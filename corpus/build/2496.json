{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Morgonus/docker-api-php-client"
		},
		"file": {
			"name": "docker-swagger.yaml",
			"path": "docker-swagger.yaml",
			"content": "openapi: 3.0.1\ninfo:\n  title: Docker Engine API\n  description: |\n    The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.\n\n    Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.\n\n    # Errors\n\n    The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:\n\n    ```\n    {\n      \"message\": \"page not found\"\n    }\n    ```\n\n    # Versioning\n\n    The API is usually changed in each release, so API calls are versioned to\n    ensure that clients don't break. To lock to a specific version of the API,\n    you prefix the URL with its version, for example, call `/v1.30/info` to use\n    the v1.30 version of the `/info` endpoint. If the API version specified in\n    the URL is not supported by the daemon, a HTTP `400 Bad Request` error message\n    is returned.\n\n    If you omit the version-prefix, the current version of the API (v1.40) is used.\n    For example, calling `/info` is the same as calling `/v1.40/info`. Using the\n    API without a version-prefix is deprecated and will be removed in a future release.\n\n    Engine releases in the near future should support this version of the API,\n    so your client will continue to work even if it is talking to a newer Engine.\n\n    The API uses an open schema model, which means server may add extra properties\n    to responses. Likewise, the server will ignore any extra query parameters and\n    request body properties. When you write clients, you need to ignore additional\n    properties in responses to ensure they do not break when talking to newer\n    daemons.\n\n\n    # Authentication\n\n    Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:\n\n    ```\n    {\n      \"username\": \"string\",\n      \"password\": \"string\",\n      \"email\": \"string\",\n      \"serveraddress\": \"string\"\n    }\n    ```\n\n    The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.\n\n    If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:\n\n    ```\n    {\n      \"identitytoken\": \"9cbaf023786cd7...\"\n    }\n    ```\n  version: \"1.40\"\n  x-logo:\n    url: https://docs.docker.com/images/logo-docker-main.png\nservers:\n  - url: /v1.40\ntags:\n  - name: Container\n    description: |\n      Create and manage containers.\n    x-displayName: Containers\n  - name: Image\n    x-displayName: Images\n  - name: Network\n    description: |\n      Networks are user-defined networks that containers can be attached to. See the [networking documentation](https://docs.docker.com/engine/userguide/networking/) for more information.\n    x-displayName: Networks\n  - name: Volume\n    description: |\n      Create and manage persistent storage that can be attached to containers.\n    x-displayName: Volumes\n  - name: Exec\n    description: |\n      Run new commands inside running containers. See the [command-line reference](https://docs.docker.com/engine/reference/commandline/exec/) for more information.\n\n      To exec a command in a container, you first need to create an exec instance, then start it. These two API endpoints are wrapped up in a single command-line command, `docker exec`.\n    x-displayName: Exec\n  - name: Swarm\n    description: |\n      Engines can be clustered together in a swarm. See [the swarm mode documentation](https://docs.docker.com/engine/swarm/) for more information.\n    x-displayName: Swarm\n  - name: Node\n    description: |\n      Nodes are instances of the Engine participating in a swarm. Swarm mode must be enabled for these endpoints to work.\n    x-displayName: Nodes\n  - name: Service\n    description: |\n      Services are the definitions of tasks to run on a swarm. Swarm mode must be enabled for these endpoints to work.\n    x-displayName: Services\n  - name: Task\n    description: |\n      A task is a container running on a swarm. It is the atomic scheduling unit of swarm. Swarm mode must be enabled for these endpoints to work.\n    x-displayName: Tasks\n  - name: Secret\n    description: |\n      Secrets are sensitive data that can be used by services. Swarm mode must be enabled for these endpoints to work.\n    x-displayName: Secrets\n  - name: Config\n    description: |\n      Configs are application configurations that can be used by services. Swarm mode must be enabled for these endpoints to work.\n    x-displayName: Configs\n  - name: Plugin\n    x-displayName: Plugins\n  - name: System\n    x-displayName: System\npaths:\n  /containers/json:\n    get:\n      tags:\n        - Container\n      summary: List containers\n      description: |\n        Returns a list of containers. For details on the format, see [the inspect endpoint](#operation/ContainerInspect).\n\n        Note that it uses a different, smaller representation of a container than inspecting a single container. For example,\n        the list of linked containers is not propagated .\n      operationId: ContainerList\n      parameters:\n        - name: all\n          in: query\n          description: Return all containers. By default, only running containers are\n            shown\n          schema:\n            type: boolean\n            default: false\n        - name: limit\n          in: query\n          description: Return this number of most recently created containers, including\n            non-running ones.\n          schema:\n            type: integer\n        - name: size\n          in: query\n          description: Return the size of container as fields `SizeRw` and `SizeRootFs`.\n          schema:\n            type: boolean\n            default: false\n        - name: filters\n          in: query\n          description: |\n            Filters to process on the container list, encoded as JSON (a `map[string][]string`). For example, `{\"status\": [\"paused\"]}` will only return paused containers. Available filters:\n\n            - `ancestor`=(`\u003cimage-name\u003e[:\u003ctag\u003e]`, `\u003cimage id\u003e`, or `\u003cimage@digest\u003e`)\n            - `before`=(`\u003ccontainer id\u003e` or `\u003ccontainer name\u003e`)\n            - `expose`=(`\u003cport\u003e[/\u003cproto\u003e]`|`\u003cstartport-endport\u003e/[\u003cproto\u003e]`)\n            - `exited=\u003cint\u003e` containers with exit code of `\u003cint\u003e`\n            - `health`=(`starting`|`healthy`|`unhealthy`|`none`)\n            - `id=\u003cID\u003e` a container's ID\n            - `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)\n            - `is-task=`(`true`|`false`)\n            - `label=key` or `label=\"key=value\"` of a container label\n            - `name=\u003cname\u003e` a container's name\n            - `network`=(`\u003cnetwork id\u003e` or `\u003cnetwork name\u003e`)\n            - `publish`=(`\u003cport\u003e[/\u003cproto\u003e]`|`\u003cstartport-endport\u003e/[\u003cproto\u003e]`)\n            - `since`=(`\u003ccontainer id\u003e` or `\u003ccontainer name\u003e`)\n            - `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)\n            - `volume`=(`\u003cvolume name\u003e` or `\u003cmount point destination\u003e`)\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContainerSummary'\n              example:\n                - Id: 8dfafdbc3a40\n                  Names:\n                    - /boring_feynman\n                  Image: ubuntu:latest\n                  ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82\n                  Command: echo 1\n                  Created: 1367854155\n                  State: Exited\n                  Status: Exit 0\n                  Ports:\n                    - PrivatePort: 2222\n                      PublicPort: 3333\n                      Type: tcp\n                  Labels:\n                    com.example.vendor: Acme\n                    com.example.license: GPL\n                    com.example.version: \"1.0\"\n                  SizeRw: 12288\n                  SizeRootFs: 0\n                  HostConfig:\n                    NetworkMode: default\n                  NetworkSettings:\n                    Networks:\n                      bridge:\n                        NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\n                        EndpointID: 2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f\n                        Gateway: 172.17.0.1\n                        IPAddress: 172.17.0.2\n                        IPPrefixLen: 16\n                        IPv6Gateway: \"\"\n                        GlobalIPv6Address: \"\"\n                        GlobalIPv6PrefixLen: 0\n                        MacAddress: 02:42:ac:11:00:02\n                  Mounts:\n                    - Name: fac362...80535\n                      Source: /data\n                      Destination: /data\n                      Driver: local\n                      Mode: ro,Z\n                      RW: false\n                      Propagation: \"\"\n                - Id: 9cd87474be90\n                  Names:\n                    - /coolName\n                  Image: ubuntu:latest\n                  ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82\n                  Command: echo 222222\n                  Created: 1367854155\n                  State: Exited\n                  Status: Exit 0\n                  Ports: []\n                  Labels: {}\n                  SizeRw: 12288\n                  SizeRootFs: 0\n                  HostConfig:\n                    NetworkMode: default\n                  NetworkSettings:\n                    Networks:\n                      bridge:\n                        NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\n                        EndpointID: 88eaed7b37b38c2a3f0c4bc796494fdf51b270c2d22656412a2ca5d559a64d7a\n                        Gateway: 172.17.0.1\n                        IPAddress: 172.17.0.8\n                        IPPrefixLen: 16\n                        IPv6Gateway: \"\"\n                        GlobalIPv6Address: \"\"\n                        GlobalIPv6PrefixLen: 0\n                        MacAddress: 02:42:ac:11:00:08\n                  Mounts: []\n                - Id: 3176a2479c92\n                  Names:\n                    - /sleepy_dog\n                  Image: ubuntu:latest\n                  ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82\n                  Command: echo 3333333333333333\n                  Created: 1367854154\n                  State: Exited\n                  Status: Exit 0\n                  Ports: []\n                  Labels: {}\n                  SizeRw: 12288\n                  SizeRootFs: 0\n                  HostConfig:\n                    NetworkMode: default\n                  NetworkSettings:\n                    Networks:\n                      bridge:\n                        NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\n                        EndpointID: 8b27c041c30326d59cd6e6f510d4f8d1d570a228466f956edf7815508f78e30d\n                        Gateway: 172.17.0.1\n                        IPAddress: 172.17.0.6\n                        IPPrefixLen: 16\n                        IPv6Gateway: \"\"\n                        GlobalIPv6Address: \"\"\n                        GlobalIPv6PrefixLen: 0\n                        MacAddress: 02:42:ac:11:00:06\n                  Mounts: []\n                - Id: 4cb07b47f9fb\n                  Names:\n                    - /running_cat\n                  Image: ubuntu:latest\n                  ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82\n                  Command: echo 444444444444444444444444444444444\n                  Created: 1367854152\n                  State: Exited\n                  Status: Exit 0\n                  Ports: []\n                  Labels: {}\n                  SizeRw: 12288\n                  SizeRootFs: 0\n                  HostConfig:\n                    NetworkMode: default\n                  NetworkSettings:\n                    Networks:\n                      bridge:\n                        NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\n                        EndpointID: d91c7b2f0644403d7ef3095985ea0e2370325cd2332ff3a3225c4247328e66e9\n                        Gateway: 172.17.0.1\n                        IPAddress: 172.17.0.5\n                        IPPrefixLen: 16\n                        IPv6Gateway: \"\"\n                        GlobalIPv6Address: \"\"\n                        GlobalIPv6PrefixLen: 0\n                        MacAddress: 02:42:ac:11:00:05\n                  Mounts: []\n        400:\n          description: bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/create:\n    post:\n      tags:\n        - Container\n      summary: Create a container\n      operationId: ContainerCreate\n      parameters:\n        - name: name\n          in: query\n          description: Assign the specified name to the container. Must match `/?[a-zA-Z0-9][a-zA-Z0-9_.-]+`.\n          schema:\n            pattern: ^/?[a-zA-Z0-9][a-zA-Z0-9_.-]+$\n            type: string\n      requestBody:\n        description: Container to create\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/ContainerConfig'\n                - type: object\n                  properties:\n                    HostConfig:\n                      $ref: '#/components/schemas/HostConfig'\n                    NetworkingConfig:\n                      type: object\n                      properties:\n                        EndpointsConfig:\n                          type: object\n                          additionalProperties:\n                            $ref: '#/components/schemas/EndpointSettings'\n                          description: A mapping of network name to endpoint configuration\n                            for that network.\n                      description: This container's networking configuration.\n          application/octet-stream:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/ContainerConfig'\n                - type: object\n                  properties:\n                    HostConfig:\n                      $ref: '#/components/schemas/HostConfig'\n                    NetworkingConfig:\n                      type: object\n                      properties:\n                        EndpointsConfig:\n                          type: object\n                          additionalProperties:\n                            $ref: '#/components/schemas/EndpointSettings'\n                          description: A mapping of network name to endpoint configuration\n                            for that network.\n                      description: This container's networking configuration.\n        required: true\n      responses:\n        201:\n          description: Container created successfully\n          content:\n            application/json:\n              schema:\n                title: ContainerCreateResponse\n                required:\n                  - Id\n                  - Warnings\n                type: object\n                properties:\n                  Id:\n                    type: string\n                    description: The ID of the created container\n                    nullable: false\n                  Warnings:\n                    type: array\n                    description: Warnings encountered when creating the container\n                    nullable: false\n                    items:\n                      type: string\n                description: OK response to ContainerCreate operation\n              example:\n                Id: e90e34656806\n                Warnings: []\n        400:\n          description: bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n        409:\n          description: conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /containers/{id}/json:\n    get:\n      tags:\n        - Container\n      summary: Inspect a container\n      description: Return low-level information about a container.\n      operationId: ContainerInspect\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: size\n          in: query\n          description: Return the size of container as fields `SizeRw` and `SizeRootFs`\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                title: ContainerInspectResponse\n                type: object\n                properties:\n                  Id:\n                    type: string\n                    description: The ID of the container\n                  Created:\n                    type: string\n                    description: The time the container was created\n                  Path:\n                    type: string\n                    description: The path to the command being run\n                  Args:\n                    type: array\n                    description: The arguments to the command being run\n                    items:\n                      type: string\n                  State:\n                    $ref: '#/components/schemas/ContainerState'\n                  Image:\n                    type: string\n                    description: The container's image\n                  ResolvConfPath:\n                    type: string\n                  HostnamePath:\n                    type: string\n                  HostsPath:\n                    type: string\n                  LogPath:\n                    type: string\n                  Node:\n                    type: object\n                    properties: {}\n                    description: TODO\n                  Name:\n                    type: string\n                  RestartCount:\n                    type: integer\n                  Driver:\n                    type: string\n                  Platform:\n                    type: string\n                  MountLabel:\n                    type: string\n                  ProcessLabel:\n                    type: string\n                  AppArmorProfile:\n                    type: string\n                  ExecIDs:\n                    type: array\n                    description: IDs of exec instances that are running in the container.\n                    nullable: true\n                    items:\n                      type: string\n                  HostConfig:\n                    $ref: '#/components/schemas/HostConfig'\n                  GraphDriver:\n                    $ref: '#/components/schemas/GraphDriverData'\n                  SizeRw:\n                    type: integer\n                    description: The size of files that have been created or changed\n                      by this container.\n                    format: int64\n                  SizeRootFs:\n                    type: integer\n                    description: The total size of all the files in this container.\n                    format: int64\n                  Mounts:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/MountPoint'\n                  Config:\n                    $ref: '#/components/schemas/ContainerConfig'\n                  NetworkSettings:\n                    $ref: '#/components/schemas/NetworkSettings'\n              example:\n                AppArmorProfile: \"\"\n                Args:\n                  - -c\n                  - exit 9\n                Config:\n                  AttachStderr: true\n                  AttachStdin: false\n                  AttachStdout: true\n                  Cmd:\n                    - /bin/sh\n                    - -c\n                    - exit 9\n                  Domainname: \"\"\n                  Env:\n                    - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n                  Healthcheck:\n                    Test:\n                      - CMD-SHELL\n                      - exit 0\n                  Hostname: ba033ac44011\n                  Image: ubuntu\n                  Labels:\n                    com.example.vendor: Acme\n                    com.example.license: GPL\n                    com.example.version: \"1.0\"\n                  MacAddress: \"\"\n                  NetworkDisabled: false\n                  OpenStdin: false\n                  StdinOnce: false\n                  Tty: false\n                  User: \"\"\n                  Volumes:\n                    /volumes/data: {}\n                  WorkingDir: \"\"\n                  StopSignal: SIGTERM\n                  StopTimeout: 10\n                Created: 2015-01-06\n                Driver: devicemapper\n                ExecIDs:\n                  - b35395de42bc8abd327f9dd65d913b9ba28c74d2f0734eeeae84fa1c616a0fca\n                  - 3fc1232e5cd20c8de182ed81178503dc6437f4e7ef12b52cc5e8de020652f1c4\n                HostConfig:\n                  MaximumIOps: 0\n                  MaximumIOBps: 0\n                  BlkioWeight: 0\n                  BlkioWeightDevice:\n                    - {}\n                  BlkioDeviceReadBps:\n                    - {}\n                  BlkioDeviceWriteBps:\n                    - {}\n                  BlkioDeviceReadIOps:\n                    - {}\n                  BlkioDeviceWriteIOps:\n                    - {}\n                  ContainerIDFile: \"\"\n                  CpusetCpus: \"\"\n                  CpusetMems: \"\"\n                  CpuPercent: 80\n                  CpuShares: 0\n                  CpuPeriod: 100000\n                  CpuRealtimePeriod: 1000000\n                  CpuRealtimeRuntime: 10000\n                  Devices: []\n                  IpcMode: \"\"\n                  LxcConf: []\n                  Memory: 0\n                  MemorySwap: 0\n                  MemoryReservation: 0\n                  KernelMemory: 0\n                  OomKillDisable: false\n                  OomScoreAdj: 500\n                  NetworkMode: bridge\n                  PidMode: \"\"\n                  PortBindings: {}\n                  Privileged: false\n                  ReadonlyRootfs: false\n                  PublishAllPorts: false\n                  RestartPolicy:\n                    MaximumRetryCount: 2\n                    Name: on-failure\n                  LogConfig:\n                    Type: json-file\n                  Sysctls:\n                    net.ipv4.ip_forward: \"1\"\n                  Ulimits:\n                    - {}\n                  VolumeDriver: \"\"\n                  ShmSize: 67108864\n                HostnamePath: /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hostname\n                HostsPath: /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hosts\n                LogPath: /var/lib/docker/containers/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b-json.log\n                Id: ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39\n                Image: 04c5d3b7b0656168630d3ba35d8889bd0e9caafcaeb3004d2bfbc47e7c5d35d2\n                MountLabel: \"\"\n                Name: /boring_euclid\n                NetworkSettings:\n                  Bridge: \"\"\n                  SandboxID: \"\"\n                  HairpinMode: false\n                  LinkLocalIPv6Address: \"\"\n                  LinkLocalIPv6PrefixLen: 0\n                  SandboxKey: \"\"\n                  EndpointID: \"\"\n                  Gateway: \"\"\n                  GlobalIPv6Address: \"\"\n                  GlobalIPv6PrefixLen: 0\n                  IPAddress: \"\"\n                  IPPrefixLen: 0\n                  IPv6Gateway: \"\"\n                  MacAddress: \"\"\n                  Networks:\n                    bridge:\n                      NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\n                      EndpointID: 7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d\n                      Gateway: 172.17.0.1\n                      IPAddress: 172.17.0.2\n                      IPPrefixLen: 16\n                      IPv6Gateway: \"\"\n                      GlobalIPv6Address: \"\"\n                      GlobalIPv6PrefixLen: 0\n                      MacAddress: 02:42:ac:12:00:02\n                Path: /bin/sh\n                ProcessLabel: \"\"\n                ResolvConfPath: /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/resolv.conf\n                RestartCount: 1\n                State:\n                  Error: \"\"\n                  ExitCode: 9\n                  FinishedAt: 2015-01-06\n                  Health:\n                    Status: healthy\n                    FailingStreak: 0\n                    Log:\n                      - Start: 2019-12-22T10:59:05.6385933Z\n                        End: 2019-12-22T10:59:05.8078452Z\n                        ExitCode: 0\n                        Output: \"\"\n                  OOMKilled: false\n                  Dead: false\n                  Paused: false\n                  Pid: 0\n                  Restarting: false\n                  Running: true\n                  StartedAt: 2015-01-06\n                  Status: running\n                Mounts:\n                  - Name: fac362...80535\n                    Source: /data\n                    Destination: /data\n                    Driver: local\n                    Mode: ro,Z\n                    RW: false\n                    Propagation: \"\"\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/top:\n    get:\n      tags:\n        - Container\n      summary: List processes running inside a container\n      description: On Unix systems, this is done by running the `ps` command. This\n        endpoint is not supported on Windows.\n      operationId: ContainerTop\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: ps_args\n          in: query\n          description: The arguments to pass to `ps`. For example, `aux`\n          schema:\n            type: string\n            default: -ef\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                title: ContainerTopResponse\n                type: object\n                properties:\n                  Titles:\n                    type: array\n                    description: The ps column titles\n                    items:\n                      type: string\n                  Processes:\n                    type: array\n                    description: Each process running in the container, where each\n                      is process is an array of values corresponding to the titles\n                    items:\n                      type: array\n                      items:\n                        type: string\n                description: OK response to ContainerTop operation\n              example:\n                Titles:\n                  - UID\n                  - PID\n                  - PPID\n                  - C\n                  - STIME\n                  - TTY\n                  - TIME\n                  - CMD\n                Processes:\n                  - - root\n                    - \"13642\"\n                    - \"882\"\n                    - \"0\"\n                    - 17:03\n                    - pts/0\n                    - 00:00:00\n                    - /bin/bash\n                  - - root\n                    - \"13735\"\n                    - \"13642\"\n                    - \"0\"\n                    - 17:06\n                    - pts/0\n                    - 00:00:00\n                    - sleep 10\n            text/plain:\n              schema:\n                title: ContainerTopResponse\n                type: object\n                properties:\n                  Titles:\n                    type: array\n                    description: The ps column titles\n                    items:\n                      type: string\n                  Processes:\n                    type: array\n                    description: Each process running in the container, where each\n                      is process is an array of values corresponding to the titles\n                    items:\n                      type: array\n                      items:\n                        type: string\n                description: OK response to ContainerTop operation\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/logs:\n    get:\n      tags:\n        - Container\n      summary: Get container logs\n      description: |\n        Get `stdout` and `stderr` logs from a container.\n\n        Note: This endpoint works only for containers with the `json-file` or `journald` logging driver.\n      operationId: ContainerLogs\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: follow\n          in: query\n          description: Keep connection after returning logs.\n          schema:\n            type: boolean\n            default: false\n        - name: stdout\n          in: query\n          description: Return logs from `stdout`\n          schema:\n            type: boolean\n            default: false\n        - name: stderr\n          in: query\n          description: Return logs from `stderr`\n          schema:\n            type: boolean\n            default: false\n        - name: since\n          in: query\n          description: Only return logs since this time, as a UNIX timestamp\n          schema:\n            type: integer\n            default: 0\n        - name: until\n          in: query\n          description: Only return logs before this time, as a UNIX timestamp\n          schema:\n            type: integer\n            default: 0\n        - name: timestamps\n          in: query\n          description: Add timestamps to every log line\n          schema:\n            type: boolean\n            default: false\n        - name: tail\n          in: query\n          description: Only return this number of log lines from the end of the logs.\n            Specify as an integer or `all` to output all log lines.\n          schema:\n            type: string\n            default: all\n      responses:\n        200:\n          description: |\n            logs returned as a stream in response body.\n            For the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).\n            Note that unlike the attach endpoint, the logs endpoint does not upgrade the connection and does not\n            set Content-Type.\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n            text/plain:\n              schema:\n                type: string\n                format: binary\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/changes:\n    get:\n      tags:\n        - Container\n      summary: Get changes on a container’s filesystem\n      description: |\n        Returns which files in a container's filesystem have been added, deleted,\n        or modified. The `Kind` of modification can be one of:\n\n        - `0`: Modified\n        - `1`: Added\n        - `2`: Deleted\n      operationId: ContainerChanges\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The list of changes\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  title: ContainerChangeResponseItem\n                  required:\n                    - Kind\n                    - Path\n                  type: object\n                  properties:\n                    Path:\n                      type: string\n                      description: Path to file that has changed\n                      nullable: false\n                    Kind:\n                      type: integer\n                      description: Kind of change\n                      format: uint8\n                      nullable: false\n                  description: change item in response to ContainerChanges operation\n                  x-go-name: ContainerChangeResponseItem\n              example:\n                - Path: /dev\n                  Kind: 0\n                - Path: /dev/kmsg\n                  Kind: 1\n                - Path: /test\n                  Kind: 1\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/export:\n    get:\n      tags:\n        - Container\n      summary: Export a container\n      description: Export the contents of a container as a tarball.\n      operationId: ContainerExport\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content: {}\n        404:\n          description: no such container\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              example:\n                message: 'No such container: c2ada9df5af8'\n        500:\n          description: server error\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/stats:\n    get:\n      tags:\n        - Container\n      summary: Get container stats based on resource usage\n      description: |\n        This endpoint returns a live stream of a container’s resource usage\n        statistics.\n\n        The `precpu_stats` is the CPU statistic of the *previous* read, and is\n        used to calculate the CPU usage percentage. It is not an exact copy\n        of the `cpu_stats` field.\n\n        If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is\n        nil then for compatibility with older daemons the length of the\n        corresponding `cpu_usage.percpu_usage` array should be used.\n      operationId: ContainerStats\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: stream\n          in: query\n          description: Stream the output. If false, the stats will be output once and\n            then it will disconnect.\n          schema:\n            type: boolean\n            default: true\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                type: object\n              example:\n                read: 2015-01-08\n                pids_stats:\n                  current: 3\n                networks:\n                  eth0:\n                    rx_bytes: 5338\n                    rx_dropped: 0\n                    rx_errors: 0\n                    rx_packets: 36\n                    tx_bytes: 648\n                    tx_dropped: 0\n                    tx_errors: 0\n                    tx_packets: 8\n                  eth5:\n                    rx_bytes: 4641\n                    rx_dropped: 0\n                    rx_errors: 0\n                    rx_packets: 26\n                    tx_bytes: 690\n                    tx_dropped: 0\n                    tx_errors: 0\n                    tx_packets: 9\n                memory_stats:\n                  stats:\n                    total_pgmajfault: 0\n                    cache: 0\n                    mapped_file: 0\n                    total_inactive_file: 0\n                    pgpgout: 414\n                    rss: 6537216\n                    total_mapped_file: 0\n                    writeback: 0\n                    unevictable: 0\n                    pgpgin: 477\n                    total_unevictable: 0\n                    pgmajfault: 0\n                    total_rss: 6537216\n                    total_rss_huge: 6291456\n                    total_writeback: 0\n                    total_inactive_anon: 0\n                    rss_huge: 6291456\n                    hierarchical_memory_limit: 67108864\n                    total_pgfault: 964\n                    total_active_file: 0\n                    active_anon: 6537216\n                    total_active_anon: 6537216\n                    total_pgpgout: 414\n                    total_cache: 0\n                    inactive_anon: 0\n                    active_file: 0\n                    pgfault: 964\n                    inactive_file: 0\n                    total_pgpgin: 477\n                  max_usage: 6651904\n                  usage: 6537216\n                  failcnt: 0\n                  limit: 67108864\n                blkio_stats: {}\n                cpu_stats:\n                  cpu_usage:\n                    percpu_usage:\n                      - 8646879\n                      - 24472255\n                      - 36438778\n                      - 30657443\n                    usage_in_usermode: 50000000\n                    total_usage: 100215355\n                    usage_in_kernelmode: 30000000\n                  system_cpu_usage: 739306590000000\n                  online_cpus: 4\n                  throttling_data:\n                    periods: 0\n                    throttled_periods: 0\n                    throttled_time: 0\n                precpu_stats:\n                  cpu_usage:\n                    percpu_usage:\n                      - 8646879\n                      - 24350896\n                      - 36438778\n                      - 30657443\n                    usage_in_usermode: 50000000\n                    total_usage: 100093996\n                    usage_in_kernelmode: 30000000\n                  system_cpu_usage: 9492140000000\n                  online_cpus: 4\n                  throttling_data:\n                    periods: 0\n                    throttled_periods: 0\n                    throttled_time: 0\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/resize:\n    post:\n      tags:\n        - Container\n      summary: Resize a container TTY\n      description: Resize the TTY for a container.\n      operationId: ContainerResize\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: h\n          in: query\n          description: Height of the tty session in characters\n          schema:\n            type: integer\n        - name: w\n          in: query\n          description: Width of the tty session in characters\n          schema:\n            type: integer\n      responses:\n        200:\n          description: no error\n          content: {}\n        404:\n          description: no such container\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              example:\n                message: 'No such container: c2ada9df5af8'\n        500:\n          description: cannot resize container\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/start:\n    post:\n      tags:\n        - Container\n      summary: Start a container\n      operationId: ContainerStart\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: detachKeys\n          in: query\n          description: 'Override the key sequence for detaching a container. Format\n          is a single character `[a-Z]` or `ctrl-\u003cvalue\u003e` where `\u003cvalue\u003e` is one of:\n          `a-z`, `@`, `^`, `[`, `,` or `_`.'\n          schema:\n            type: string\n      responses:\n        204:\n          description: no error\n          content: {}\n        304:\n          description: container already started\n          content: {}\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/stop:\n    post:\n      tags:\n        - Container\n      summary: Stop a container\n      operationId: ContainerStop\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: t\n          in: query\n          description: Number of seconds to wait before killing the container\n          schema:\n            type: integer\n      responses:\n        204:\n          description: no error\n          content: {}\n        304:\n          description: container already stopped\n          content: {}\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/restart:\n    post:\n      tags:\n        - Container\n      summary: Restart a container\n      operationId: ContainerRestart\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: t\n          in: query\n          description: Number of seconds to wait before killing the container\n          schema:\n            type: integer\n      responses:\n        204:\n          description: no error\n          content: {}\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/kill:\n    post:\n      tags:\n        - Container\n      summary: Kill a container\n      description: Send a POSIX signal to a container, defaulting to killing to the\n        container.\n      operationId: ContainerKill\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: signal\n          in: query\n          description: Signal to send to the container as an integer or string (e.g.\n            `SIGINT`)\n          schema:\n            type: string\n            default: SIGKILL\n      responses:\n        204:\n          description: no error\n          content: {}\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        409:\n          description: container is not running\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: Container d37cde0fe4ad63c3a7252023b2f9800282894247d145cb5933ddf6e52cc03a28\n                  is not running\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/update:\n    post:\n      tags:\n        - Container\n      summary: Update a container\n      description: Change various configuration options of a container without having\n        to recreate it.\n      operationId: ContainerUpdate\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/Resources'\n                - type: object\n                  properties:\n                    RestartPolicy:\n                      $ref: '#/components/schemas/RestartPolicy'\n        required: true\n      responses:\n        200:\n          description: The container has been updated.\n          content:\n            application/json:\n              schema:\n                title: ContainerUpdateResponse\n                type: object\n                properties:\n                  Warnings:\n                    type: array\n                    items:\n                      type: string\n                description: OK response to ContainerUpdate operation\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: update\n  /containers/{id}/rename:\n    post:\n      tags:\n        - Container\n      summary: Rename a container\n      operationId: ContainerRename\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: query\n          description: New name for the container\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: no error\n          content: {}\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        409:\n          description: name already in use\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/pause:\n    post:\n      tags:\n        - Container\n      summary: Pause a container\n      description: |\n        Use the freezer cgroup to suspend all processes in a container.\n\n        Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed.\n      operationId: ContainerPause\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: no error\n          content: {}\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/unpause:\n    post:\n      tags:\n        - Container\n      summary: Unpause a container\n      description: Resume a container which has been paused.\n      operationId: ContainerUnpause\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: no error\n          content: {}\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/attach:\n    post:\n      tags:\n        - Container\n      summary: Attach to a container\n      description: |\n        Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.\n\n        Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.\n\n        See [the documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.\n\n        ### Hijacking\n\n        This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.\n\n        This is the response from the daemon for an attach request:\n\n        ```\n        HTTP/1.1 200 OK\n        Content-Type: application/vnd.docker.raw-stream\n\n        [STREAM]\n        ```\n\n        After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.\n\n        To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.\n\n        For example, the client sends this request to upgrade the connection:\n\n        ```\n        POST /containers/16253994b7c4/attach?stream=1\u0026stdout=1 HTTP/1.1\n        Upgrade: tcp\n        Connection: Upgrade\n        ```\n\n        The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:\n\n        ```\n        HTTP/1.1 101 UPGRADED\n        Content-Type: application/vnd.docker.raw-stream\n        Connection: Upgrade\n        Upgrade: tcp\n\n        [STREAM]\n        ```\n\n        ### Stream format\n\n        When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.\n\n        The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).\n\n        It is encoded on the first eight bytes like this:\n\n        ```go\n        header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}\n        ```\n\n        `STREAM_TYPE` can be:\n\n        - 0: `stdin` (is written on `stdout`)\n        - 1: `stdout`\n        - 2: `stderr`\n\n        `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.\n\n        Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.\n\n        The simplest way to implement this protocol is the following:\n\n        1. Read 8 bytes.\n        2. Choose `stdout` or `stderr` depending on the first byte.\n        3. Extract the frame size from the last four bytes.\n        4. Read the extracted size and output it on the correct output.\n        5. Goto 1.\n\n        ### Stream format when using a TTY\n\n        When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client's `stdin`.\n      operationId: ContainerAttach\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: detachKeys\n          in: query\n          description: 'Override the key sequence for detaching a container.Format is\n          a single character `[a-Z]` or `ctrl-\u003cvalue\u003e` where `\u003cvalue\u003e` is one of:\n          `a-z`, `@`, `^`, `[`, `,` or `_`.'\n          schema:\n            type: string\n        - name: logs\n          in: query\n          description: |\n            Replay previous logs from the container.\n\n            This is useful for attaching to a container that has started and you want to output everything since the container started.\n\n            If `stream` is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output.\n          schema:\n            type: boolean\n            default: false\n        - name: stream\n          in: query\n          description: Stream attached streams from the time the request was made onwards\n          schema:\n            type: boolean\n            default: false\n        - name: stdin\n          in: query\n          description: Attach to `stdin`\n          schema:\n            type: boolean\n            default: false\n        - name: stdout\n          in: query\n          description: Attach to `stdout`\n          schema:\n            type: boolean\n            default: false\n        - name: stderr\n          in: query\n          description: Attach to `stderr`\n          schema:\n            type: boolean\n            default: false\n      responses:\n        101:\n          description: no error, hints proxy about hijacking\n          content: {}\n        200:\n          description: no error, no upgrade header found\n          content: {}\n        400:\n          description: bad parameter\n          content:\n            application/vnd.docker.raw-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: no such container\n          content:\n            application/vnd.docker.raw-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              example:\n                message: 'No such container: c2ada9df5af8'\n        500:\n          description: server error\n          content:\n            application/vnd.docker.raw-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/attach/ws:\n    get:\n      tags:\n        - Container\n      summary: Attach to a container via a websocket\n      operationId: ContainerAttachWebsocket\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: detachKeys\n          in: query\n          description: 'Override the key sequence for detaching a container.Format is\n          a single character `[a-Z]` or `ctrl-\u003cvalue\u003e` where `\u003cvalue\u003e` is one of:\n          `a-z`, `@`, `^`, `[`, `,`, or `_`.'\n          schema:\n            type: string\n        - name: logs\n          in: query\n          description: Return logs\n          schema:\n            type: boolean\n            default: false\n        - name: stream\n          in: query\n          description: Return stream\n          schema:\n            type: boolean\n            default: false\n        - name: stdin\n          in: query\n          description: Attach to `stdin`\n          schema:\n            type: boolean\n            default: false\n        - name: stdout\n          in: query\n          description: Attach to `stdout`\n          schema:\n            type: boolean\n            default: false\n        - name: stderr\n          in: query\n          description: Attach to `stderr`\n          schema:\n            type: boolean\n            default: false\n      responses:\n        101:\n          description: no error, hints proxy about hijacking\n          content: {}\n        200:\n          description: no error, no upgrade header found\n          content: {}\n        400:\n          description: bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/wait:\n    post:\n      tags:\n        - Container\n      summary: Wait for a container\n      description: Block until a container stops, then returns the exit code.\n      operationId: ContainerWait\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: condition\n          in: query\n          description: Wait until a container state reaches the given condition, either\n            'not-running' (default), 'next-exit', or 'removed'.\n          schema:\n            type: string\n            default: not-running\n      responses:\n        200:\n          description: The container has exit.\n          content:\n            application/json:\n              schema:\n                title: ContainerWaitResponse\n                required:\n                  - StatusCode\n                type: object\n                properties:\n                  StatusCode:\n                    type: integer\n                    description: Exit code of the container\n                    nullable: false\n                  Error:\n                    type: object\n                    properties:\n                      Message:\n                        type: string\n                        description: Details of an error\n                    description: container waiting error, if any\n                description: OK response to ContainerWait operation\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}:\n    delete:\n      tags:\n        - Container\n      summary: Remove a container\n      operationId: ContainerDelete\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: v\n          in: query\n          description: Remove the volumes associated with the container.\n          schema:\n            type: boolean\n            default: false\n        - name: force\n          in: query\n          description: If the container is running, kill it before removing it.\n          schema:\n            type: boolean\n            default: false\n        - name: link\n          in: query\n          description: Remove the specified link associated with the container.\n          schema:\n            type: boolean\n            default: false\n      responses:\n        204:\n          description: no error\n          content: {}\n        400:\n          description: bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        409:\n          description: conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'You cannot remove a running container: c2ada9df5af8. Stop\n                  the container before attempting removal or force remove'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/{id}/archive:\n    get:\n      tags:\n        - Container\n      summary: Get an archive of a filesystem resource in a container\n      description: Get a tar archive of a resource in the filesystem of container\n        id.\n      operationId: ContainerArchive\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: Resource in the container’s filesystem to archive.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content: {}\n        400:\n          description: Bad parameter\n          content:\n            application/x-tar:\n              schema:\n                type: object\n                properties:\n                  ErrorResponse:\n                    $ref: '#/components/schemas/ErrorResponse'\n                  message:\n                    type: string\n                    description: The error message. Either \"must specify path parameter\"\n                      (path cannot be empty) or \"not a directory\" (path was asserted\n                      to be a directory but exists as a file).\n                    nullable: false\n        404:\n          description: Container or path does not exist\n          content:\n            application/x-tar:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/json:\n              example:\n                message: 'No such container: c2ada9df5af8'\n        500:\n          description: server error\n          content:\n            application/x-tar:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    put:\n      tags:\n        - Container\n      summary: Extract an archive of files or folders to a directory in a container\n      description: Upload a tar archive to be extracted to a path in the filesystem\n        of container id.\n      operationId: PutContainerArchive\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: 'Path to a directory in the container to extract the archive’s\n          contents into. '\n          required: true\n          schema:\n            type: string\n        - name: noOverwriteDirNonDir\n          in: query\n          description: If “1”, “true”, or “True” then it will be an error if unpacking\n            the given content would cause an existing directory to be replaced with\n            a non-directory and vice versa.\n          schema:\n            type: string\n        - name: copyUIDGID\n          in: query\n          description: If “1”, “true”, then it will copy UID/GID maps to the dest file\n            or dir\n          schema:\n            type: string\n      requestBody:\n        description: 'The input stream must be a tar archive compressed with one of\n          the following algorithms: identity (no compression), gzip, bzip2, xz.'\n        content:\n          application/x-tar:\n            schema:\n              type: string\n              format: binary\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n        required: true\n      responses:\n        200:\n          description: The content was extracted successfully\n          content: {}\n        400:\n          description: Bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        403:\n          description: Permission denied, the volume or container rootfs is marked\n            as read-only.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: No such container or path does not exist inside the container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: inputStream\n    head:\n      tags:\n        - Container\n      summary: Get information about files in a container\n      description: A response header `X-Docker-Container-Path-Stat` is return containing\n        a base64 - encoded JSON object with some filesystem header information about\n        the path.\n      operationId: ContainerArchiveInfo\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the container\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          description: Resource in the container’s filesystem to archive.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          headers:\n            X-Docker-Container-Path-Stat:\n              description: A base64 - encoded JSON object with some filesystem header\n                information about the path\n              schema:\n                type: string\n          content: {}\n        400:\n          description: Bad parameter\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ErrorResponse:\n                    $ref: '#/components/schemas/ErrorResponse'\n                  message:\n                    type: string\n                    description: The error message. Either \"must specify path parameter\"\n                      (path cannot be empty) or \"not a directory\" (path was asserted\n                      to be a directory but exists as a file).\n                    nullable: false\n            text/plain:\n              schema:\n                type: object\n                properties:\n                  ErrorResponse:\n                    $ref: '#/components/schemas/ErrorResponse'\n                  message:\n                    type: string\n                    description: The error message. Either \"must specify path parameter\"\n                      (path cannot be empty) or \"not a directory\" (path was asserted\n                      to be a directory but exists as a file).\n                    nullable: false\n        404:\n          description: Container or path does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /containers/prune:\n    post:\n      tags:\n        - Container\n      summary: Delete stopped containers\n      operationId: ContainerPrune\n      parameters:\n        - name: filters\n          in: query\n          description: |\n            Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\n            Available filters:\n            - `until=\u003ctimestamp\u003e` Prune containers created before this timestamp. The `\u003ctimestamp\u003e` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.\n            - `label` (`label=\u003ckey\u003e`, `label=\u003ckey\u003e=\u003cvalue\u003e`, `label!=\u003ckey\u003e`, or `label!=\u003ckey\u003e=\u003cvalue\u003e`) Prune containers with (or without, in case `label!=...` is used) the specified labels.\n          schema:\n            type: string\n      responses:\n        200:\n          description: No error\n          content:\n            application/json:\n              schema:\n                title: ContainerPruneResponse\n                type: object\n                properties:\n                  ContainersDeleted:\n                    type: array\n                    description: Container IDs that were deleted\n                    items:\n                      type: string\n                  SpaceReclaimed:\n                    type: integer\n                    description: Disk space reclaimed in bytes\n                    format: int64\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /images/json:\n    get:\n      tags:\n        - Image\n      summary: List Images\n      description: Returns a list of images on the server. Note that it uses a different,\n        smaller representation of an image than inspecting a single image.\n      operationId: ImageList\n      parameters:\n        - name: all\n          in: query\n          description: Show all images. Only images from a final layer (no children)\n            are shown by default.\n          schema:\n            type: boolean\n            default: false\n        - name: filters\n          in: query\n          description: |\n            A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:\n\n            - `before`=(`\u003cimage-name\u003e[:\u003ctag\u003e]`,  `\u003cimage id\u003e` or `\u003cimage@digest\u003e`)\n            - `dangling=true`\n            - `label=key` or `label=\"key=value\"` of an image label\n            - `reference`=(`\u003cimage-name\u003e[:\u003ctag\u003e]`)\n            - `since`=(`\u003cimage-name\u003e[:\u003ctag\u003e]`,  `\u003cimage id\u003e` or `\u003cimage@digest\u003e`)\n          schema:\n            type: string\n        - name: digests\n          in: query\n          description: Show digest information as a `RepoDigests` field on each image.\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: Summary image data for the images matching the query\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ImageSummary'\n              example:\n                - Id: sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8\n                  ParentId: \"\"\n                  RepoTags:\n                    - ubuntu:12.04\n                    - ubuntu:precise\n                  RepoDigests:\n                    - ubuntu@sha256:992069aee4016783df6345315302fa59681aae51a8eeb2f889dea59290f21787\n                  Created: 1474925151\n                  Size: 103579269\n                  VirtualSize: 103579269\n                  SharedSize: 0\n                  Labels: {}\n                  Containers: 2\n                - Id: sha256:3e314f95dcace0f5e4fd37b10862fe8398e3c60ed36600bc0ca5fda78b087175\n                  ParentId: \"\"\n                  RepoTags:\n                    - ubuntu:12.10\n                    - ubuntu:quantal\n                  RepoDigests:\n                    - ubuntu@sha256:002fba3e3255af10be97ea26e476692a7ebed0bb074a9ab960b2e7a1526b15d7\n                    - ubuntu@sha256:68ea0200f0b90df725d99d823905b04cf844f6039ef60c60bf3e019915017bd3\n                  Created: 1403128455\n                  Size: 172064416\n                  VirtualSize: 172064416\n                  SharedSize: 0\n                  Labels: {}\n                  Containers: 5\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /build:\n    post:\n      tags:\n        - Image\n      summary: Build an image\n      description: |\n        Build an image from a tar archive with a `Dockerfile` in it.\n\n        The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).\n\n        The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.\n\n        The build is canceled if the client drops the connection by quitting or being killed.\n      operationId: ImageBuild\n      parameters:\n        - name: dockerfile\n          in: query\n          description: Path within the build context to the `Dockerfile`. This is ignored\n            if `remote` is specified and points to an external `Dockerfile`.\n          schema:\n            type: string\n            default: Dockerfile\n        - name: t\n          in: query\n          description: A name and optional tag to apply to the image in the `name:tag`\n            format. If you omit the tag the default `latest` value is assumed. You can\n            provide several `t` parameters.\n          schema:\n            type: string\n        - name: extrahosts\n          in: query\n          description: Extra hosts to add to /etc/hosts\n          schema:\n            type: string\n        - name: remote\n          in: query\n          description: A Git repository URI or HTTP/HTTPS context URI. If the URI points\n            to a single text file, the file’s contents are placed into a file called\n            `Dockerfile` and the image is built from that file. If the URI points to\n            a tarball, the file is downloaded by the daemon and the contents therein\n            used as the context for the build. If the URI points to a tarball and the\n            `dockerfile` parameter is also specified, there must be a file with the\n            corresponding path inside the tarball.\n          schema:\n            type: string\n        - name: q\n          in: query\n          description: Suppress verbose build output.\n          schema:\n            type: boolean\n            default: false\n        - name: nocache\n          in: query\n          description: Do not use the cache when building the image.\n          schema:\n            type: boolean\n            default: false\n        - name: cachefrom\n          in: query\n          description: JSON array of images used for build cache resolution.\n          schema:\n            type: string\n        - name: pull\n          in: query\n          description: Attempt to pull the image even if an older image exists locally.\n          schema:\n            type: string\n        - name: rm\n          in: query\n          description: Remove intermediate containers after a successful build.\n          schema:\n            type: boolean\n            default: true\n        - name: forcerm\n          in: query\n          description: Always remove intermediate containers, even upon failure.\n          schema:\n            type: boolean\n            default: false\n        - name: memory\n          in: query\n          description: Set memory limit for build.\n          schema:\n            type: integer\n        - name: memswap\n          in: query\n          description: Total memory (memory + swap). Set as `-1` to disable swap.\n          schema:\n            type: integer\n        - name: cpushares\n          in: query\n          description: CPU shares (relative weight).\n          schema:\n            type: integer\n        - name: cpusetcpus\n          in: query\n          description: CPUs in which to allow execution (e.g., `0-3`, `0,1`).\n          schema:\n            type: string\n        - name: cpuperiod\n          in: query\n          description: The length of a CPU period in microseconds.\n          schema:\n            type: integer\n        - name: cpuquota\n          in: query\n          description: Microseconds of CPU time that the container can get in a CPU\n            period.\n          schema:\n            type: integer\n        - name: buildargs\n          in: query\n          description: |\n            JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the `Dockerfile` RUN instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for passing secret values.\n\n            For example, the build arg `FOO=bar` would become `{\"FOO\":\"bar\"}` in JSON. This would result in the the query parameter `buildargs={\"FOO\":\"bar\"}`. Note that `{\"FOO\":\"bar\"}` should be URI component encoded.\n\n            [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg)\n          schema:\n            type: string\n        - name: shmsize\n          in: query\n          description: Size of `/dev/shm` in bytes. The size must be greater than 0.\n            If omitted the system uses 64MB.\n          schema:\n            type: integer\n        - name: squash\n          in: query\n          description: Squash the resulting images layers into a single layer. *(Experimental\n            release only.)*\n          schema:\n            type: boolean\n        - name: labels\n          in: query\n          description: Arbitrary key/value labels to set on the image, as a JSON map\n            of string pairs.\n          schema:\n            type: string\n        - name: networkmode\n          in: query\n          description: |\n            Sets the networking mode for the run commands during build. Supported\n            standard values are: `bridge`, `host`, `none`, and `container:\u003cname|id\u003e`.\n            Any other value is taken as a custom network's name or ID to which this\n            container should connect to.\n          schema:\n            type: string\n        - name: Content-type\n          in: header\n          schema:\n            type: string\n            default: application/x-tar\n            enum:\n              - application/x-tar\n        - name: X-Registry-Config\n          in: header\n          description: |\n            This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.\n\n            The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:\n\n            ```\n            {\n              \"docker.example.com\": {\n                \"username\": \"janedoe\",\n                \"password\": \"hunter2\"\n              },\n              \"https://index.docker.io/v1/\": {\n                \"username\": \"mobydock\",\n                \"password\": \"conta1n3rize14\"\n              }\n            }\n            ```\n\n            Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API.\n          schema:\n            type: string\n        - name: platform\n          in: query\n          description: Platform in the format os[/arch[/variant]]\n          schema:\n            type: string\n        - name: target\n          in: query\n          description: Target build stage\n          schema:\n            type: string\n        - name: outputs\n          in: query\n          description: BuildKit output configuration\n          schema:\n            type: string\n      requestBody:\n        description: 'A tar archive compressed with one of the following algorithms:\n          identity (no compression), gzip, bzip2, xz.'\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n        required: false\n      responses:\n        200:\n          description: no error\n          content: {}\n        400:\n          description: Bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: inputStream\n  /build/prune:\n    post:\n      tags:\n        - Image\n      summary: Delete builder cache\n      operationId: BuildPrune\n      parameters:\n        - name: keep-storage\n          in: query\n          description: Amount of disk space in bytes to keep for cache\n          schema:\n            type: integer\n            format: int64\n        - name: all\n          in: query\n          description: Remove all types of build cache\n          schema:\n            type: boolean\n        - name: filters\n          in: query\n          description: |\n            A JSON encoded value of the filters (a `map[string][]string`) to process on the list of build cache objects. Available filters:\n            - `until=\u003cduration\u003e`: duration relative to daemon's time, during which build cache was not used, in Go's duration format (e.g., '24h')\n            - `id=\u003cid\u003e`\n            - `parent=\u003cid\u003e`\n            - `type=\u003cstring\u003e`\n            - `description=\u003cstring\u003e`\n            - `inuse`\n            - `shared`\n            - `private`\n          schema:\n            type: string\n      responses:\n        200:\n          description: No error\n          content:\n            application/json:\n              schema:\n                title: BuildPruneResponse\n                type: object\n                properties:\n                  CachesDeleted:\n                    type: array\n                    items:\n                      type: string\n                      description: ID of build cache object\n                  SpaceReclaimed:\n                    type: integer\n                    description: Disk space reclaimed in bytes\n                    format: int64\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /images/create:\n    post:\n      tags:\n        - Image\n      summary: Create an image\n      description: Create an image by either pulling it from a registry or importing\n        it.\n      operationId: ImageCreate\n      parameters:\n        - name: fromImage\n          in: query\n          description: Name of the image to pull. The name may include a tag or digest.\n            This parameter may only be used when pulling an image. The pull is cancelled\n            if the HTTP connection is closed.\n          schema:\n            type: string\n        - name: fromSrc\n          in: query\n          description: Source to import. The value may be a URL from which the image\n            can be retrieved or `-` to read the image from the request body. This parameter\n            may only be used when importing an image.\n          schema:\n            type: string\n        - name: repo\n          in: query\n          description: Repository name given to an image when it is imported. The repo\n            may include a tag. This parameter may only be used when importing an image.\n          schema:\n            type: string\n        - name: tag\n          in: query\n          description: Tag or digest. If empty when pulling an image, this causes all\n            tags for the given image to be pulled.\n          schema:\n            type: string\n        - name: message\n          in: query\n          description: Set commit message for imported image.\n          schema:\n            type: string\n        - name: X-Registry-Auth\n          in: header\n          description: A base64-encoded auth configuration. [See the authentication\n            section for details.](#section/Authentication)\n          schema:\n            type: string\n        - name: platform\n          in: query\n          description: Platform in the format os[/arch[/variant]]\n          schema:\n            type: string\n      requestBody:\n        description: Image content if the value `-` has been specified in fromSrc\n          query parameter\n        content:\n          text/plain:\n            schema:\n              type: string\n          application/octet-stream:\n            schema:\n              type: string\n        required: false\n      responses:\n        200:\n          description: no error\n          content: {}\n        404:\n          description: repository does not exist or no read access\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: inputImage\n  /images/{name}/json:\n    get:\n      tags:\n        - Image\n      summary: Inspect an image\n      description: Return low-level information about an image.\n      operationId: ImageInspect\n      parameters:\n        - name: name\n          in: path\n          description: Image name or id\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: No error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Image'\n              example:\n                Id: sha256:85f05633ddc1c50679be2b16a0479ab6f7637f8884e0cfe0f4d20e1ebb3d6e7c\n                Container: cb91e48a60d01f1e27028b4fc6819f4f290b3cf12496c8176ec714d0d390984a\n                Comment: \"\"\n                Os: linux\n                Architecture: amd64\n                Parent: sha256:91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c\n                ContainerConfig:\n                  Tty: false\n                  Hostname: e611e15f9c9d\n                  Domainname: \"\"\n                  AttachStdout: false\n                  PublishService: \"\"\n                  AttachStdin: false\n                  OpenStdin: false\n                  StdinOnce: false\n                  NetworkDisabled: false\n                  OnBuild: []\n                  Image: 91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c\n                  User: \"\"\n                  WorkingDir: \"\"\n                  MacAddress: \"\"\n                  AttachStderr: false\n                  Labels:\n                    com.example.license: GPL\n                    com.example.version: \"1.0\"\n                    com.example.vendor: Acme\n                  Env:\n                    - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n                  Cmd:\n                    - /bin/sh\n                    - -c\n                    - '#(nop) LABEL com.example.vendor=Acme com.example.license=GPL\n                    com.example.version=1.0'\n                DockerVersion: 1.9.0-dev\n                VirtualSize: 188359297\n                Size: 0\n                Author: \"\"\n                Created: 2015-09-10T08:30:53.26995814Z\n                GraphDriver:\n                  Name: aufs\n                  Data: {}\n                RepoDigests:\n                  - localhost:5000/test/busybox/example@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf\n                RepoTags:\n                  - example:1.0\n                  - example:latest\n                  - example:stable\n                Config:\n                  Image: 91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c\n                  NetworkDisabled: false\n                  OnBuild: []\n                  StdinOnce: false\n                  PublishService: \"\"\n                  AttachStdin: false\n                  OpenStdin: false\n                  Domainname: \"\"\n                  AttachStdout: false\n                  Tty: false\n                  Hostname: e611e15f9c9d\n                  Cmd:\n                    - /bin/bash\n                  Env:\n                    - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n                  Labels:\n                    com.example.vendor: Acme\n                    com.example.version: \"1.0\"\n                    com.example.license: GPL\n                  MacAddress: \"\"\n                  AttachStderr: false\n                  WorkingDir: \"\"\n                  User: \"\"\n                RootFS:\n                  Type: layers\n                  Layers:\n                    - sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6\n                    - sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\n        404:\n          description: No such image\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such image: someimage (tag: latest)'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /images/{name}/history:\n    get:\n      tags:\n        - Image\n      summary: Get the history of an image\n      description: Return parent layers of an image.\n      operationId: ImageHistory\n      parameters:\n        - name: name\n          in: path\n          description: Image name or ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: List of image layers\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  title: HistoryResponseItem\n                  required:\n                    - Comment\n                    - Created\n                    - CreatedBy\n                    - Id\n                    - Size\n                    - Tags\n                  type: object\n                  properties:\n                    Id:\n                      type: string\n                      nullable: false\n                    Created:\n                      type: integer\n                      format: int64\n                      nullable: false\n                    CreatedBy:\n                      type: string\n                      nullable: false\n                    Tags:\n                      type: array\n                      items:\n                        type: string\n                    Size:\n                      type: integer\n                      format: int64\n                      nullable: false\n                    Comment:\n                      type: string\n                      nullable: false\n                  description: individual image layer information in response to ImageHistory\n                    operation\n                  x-go-name: HistoryResponseItem\n              example:\n                - Id: 3db9c44f45209632d6050b35958829c3a2aa256d81b9a7be45b362ff85c54710\n                  Created: 1398108230\n                  CreatedBy: '/bin/sh -c #(nop) ADD file:eb15dbd63394e063b805a3c32ca7bf0266ef64676d5a6fab4801f2e81e2a5148\n                  in /'\n                  Tags:\n                    - ubuntu:lucid\n                    - ubuntu:10.04\n                  Size: 182964289\n                  Comment: \"\"\n                - Id: 6cfa4d1f33fb861d4d114f43b25abd0ac737509268065cdfd69d544a59c85ab8\n                  Created: 1398108222\n                  CreatedBy: '/bin/sh -c #(nop) MAINTAINER Tianon Gravi \u003cadmwiggin@gmail.com\u003e\n                  - mkimage-debootstrap.sh -i iproute,iputils-ping,ubuntu-minimal\n                  -t lucid.tar.xz lucid http://archive.ubuntu.com/ubuntu/'\n                  Tags: []\n                  Size: 0\n                  Comment: \"\"\n                - Id: 511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158\n                  Created: 1371157430\n                  CreatedBy: \"\"\n                  Tags:\n                    - scratch12:latest\n                    - scratch:latest\n                  Size: 0\n                  Comment: Imported from -\n        404:\n          description: No such image\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /images/{name}/push:\n    post:\n      tags:\n        - Image\n      summary: Push an image\n      description: |\n        Push an image to a registry.\n\n        If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.\n\n        The push is cancelled if the HTTP connection is closed.\n      operationId: ImagePush\n      parameters:\n        - name: name\n          in: path\n          description: Image name or ID.\n          required: true\n          schema:\n            type: string\n        - name: tag\n          in: query\n          description: The tag to associate with the image on the registry.\n          schema:\n            type: string\n        - name: X-Registry-Auth\n          in: header\n          description: A base64-encoded auth configuration. [See the authentication\n            section for details.](#section/Authentication)\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: No error\n          content: {}\n        404:\n          description: No such image\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /images/{name}/tag:\n    post:\n      tags:\n        - Image\n      summary: Tag an image\n      description: Tag an image so that it becomes part of a repository.\n      operationId: ImageTag\n      parameters:\n        - name: name\n          in: path\n          description: Image name or ID to tag.\n          required: true\n          schema:\n            type: string\n        - name: repo\n          in: query\n          description: The repository to tag in. For example, `someuser/someimage`.\n          schema:\n            type: string\n        - name: tag\n          in: query\n          description: The name of the new tag.\n          schema:\n            type: string\n      responses:\n        201:\n          description: No error\n          content: {}\n        400:\n          description: Bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: No such image\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        409:\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /images/{name}:\n    delete:\n      tags:\n        - Image\n      summary: Remove an image\n      description: |\n        Remove an image, along with any untagged parent images that were\n        referenced by that image.\n\n        Images can't be removed if they have descendant images, are being\n        used by a running container or are being used by a build.\n      operationId: ImageDelete\n      parameters:\n        - name: name\n          in: path\n          description: Image name or ID\n          required: true\n          schema:\n            type: string\n        - name: force\n          in: query\n          description: Remove the image even if it is being used by stopped containers\n            or has other tags\n          schema:\n            type: boolean\n            default: false\n        - name: noprune\n          in: query\n          description: Do not delete untagged parent images\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: The image was deleted successfully\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ImageDeleteResponseItem'\n              example:\n                - Untagged: 3e2f21a89f\n                - Deleted: 3e2f21a89f\n                - Deleted: 53b4f83ac9\n        404:\n          description: No such image\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        409:\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /images/search:\n    get:\n      tags:\n        - Image\n      summary: Search images\n      description: Search for an image on Docker Hub.\n      operationId: ImageSearch\n      parameters:\n        - name: term\n          in: query\n          description: Term to search\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: Maximum number of results to return\n          schema:\n            type: integer\n        - name: filters\n          in: query\n          description: |\n            A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:\n\n            - `is-automated=(true|false)`\n            - `is-official=(true|false)`\n            - `stars=\u003cnumber\u003e` Matches images that has at least 'number' stars.\n          schema:\n            type: string\n      responses:\n        200:\n          description: No error\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  title: ImageSearchResponseItem\n                  type: object\n                  properties:\n                    description:\n                      type: string\n                    is_official:\n                      type: boolean\n                    is_automated:\n                      type: boolean\n                    name:\n                      type: string\n                    star_count:\n                      type: integer\n              example:\n                - description: \"\"\n                  is_official: false\n                  is_automated: false\n                  name: wma55/u1210sshd\n                  star_count: 0\n                - description: \"\"\n                  is_official: false\n                  is_automated: false\n                  name: jdswinbank/sshd\n                  star_count: 0\n                - description: \"\"\n                  is_official: false\n                  is_automated: false\n                  name: vgauthier/sshd\n                  star_count: 0\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /images/prune:\n    post:\n      tags:\n        - Image\n      summary: Delete unused images\n      operationId: ImagePrune\n      parameters:\n        - name: filters\n          in: query\n          description: |\n            Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:\n\n            - `dangling=\u003cboolean\u003e` When set to `true` (or `1`), prune only\n               unused *and* untagged images. When set to `false`\n               (or `0`), all unused images are pruned.\n            - `until=\u003cstring\u003e` Prune images created before this timestamp. The `\u003ctimestamp\u003e` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.\n            - `label` (`label=\u003ckey\u003e`, `label=\u003ckey\u003e=\u003cvalue\u003e`, `label!=\u003ckey\u003e`, or `label!=\u003ckey\u003e=\u003cvalue\u003e`) Prune images with (or without, in case `label!=...` is used) the specified labels.\n          schema:\n            type: string\n      responses:\n        200:\n          description: No error\n          content:\n            application/json:\n              schema:\n                title: ImagePruneResponse\n                type: object\n                properties:\n                  ImagesDeleted:\n                    type: array\n                    description: Images that were deleted\n                    items:\n                      $ref: '#/components/schemas/ImageDeleteResponseItem'\n                  SpaceReclaimed:\n                    type: integer\n                    description: Disk space reclaimed in bytes\n                    format: int64\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /auth:\n    post:\n      tags:\n        - System\n      summary: Check auth configuration\n      description: Validate credentials for a registry and, if available, get an identity\n        token for accessing the registry without password.\n      operationId: SystemAuth\n      requestBody:\n        description: Authentication to check\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthConfig'\n        required: false\n      responses:\n        200:\n          description: An identity token was generated successfully.\n          content:\n            application/json:\n              schema:\n                title: SystemAuthResponse\n                required:\n                  - Status\n                type: object\n                properties:\n                  Status:\n                    type: string\n                    description: The status of the authentication\n                    nullable: false\n                  IdentityToken:\n                    type: string\n                    description: An opaque token used to authenticate a user after\n                      a successful login\n                    nullable: false\n              example:\n                Status: Login Succeeded\n                IdentityToken: 9cbaf023786cd7...\n        204:\n          description: No error\n          content: {}\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: authConfig\n  /info:\n    get:\n      tags:\n        - System\n      summary: Get system information\n      operationId: SystemInfo\n      responses:\n        200:\n          description: No error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemInfo'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /version:\n    get:\n      tags:\n        - System\n      summary: Get version\n      description: Returns the version of Docker that is running and various information\n        about the system that Docker is running on.\n      operationId: SystemVersion\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                title: SystemVersionResponse\n                type: object\n                properties:\n                  Platform:\n                    required:\n                      - Name\n                    type: object\n                    properties:\n                      Name:\n                        type: string\n                  Components:\n                    type: array\n                    items:\n                      required:\n                        - Name\n                        - Version\n                      type: object\n                      properties:\n                        Name:\n                          type: string\n                        Version:\n                          type: string\n                          nullable: false\n                        Details:\n                          type: object\n                          properties: {}\n                          nullable: true\n                      x-go-name: ComponentVersion\n                  Version:\n                    type: string\n                  ApiVersion:\n                    type: string\n                  MinAPIVersion:\n                    type: string\n                  GitCommit:\n                    type: string\n                  GoVersion:\n                    type: string\n                  Os:\n                    type: string\n                  Arch:\n                    type: string\n                  KernelVersion:\n                    type: string\n                  Experimental:\n                    type: boolean\n                  BuildTime:\n                    type: string\n              example:\n                Version: 17.04.0\n                Os: linux\n                KernelVersion: 3.19.0-23-generic\n                GoVersion: go1.7.5\n                GitCommit: deadbee\n                Arch: amd64\n                ApiVersion: \"1.27\"\n                MinAPIVersion: \"1.12\"\n                BuildTime: 2016-06-14\n                Experimental: true\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /_ping:\n    get:\n      tags:\n        - System\n      summary: Ping\n      description: This is a dummy endpoint you can use to test if the server is accessible.\n      operationId: SystemPing\n      responses:\n        200:\n          description: no error\n          headers:\n            Docker-Experimental:\n              description: If the server is running with experimental mode enabled\n              schema:\n                type: boolean\n            Cache-Control:\n              schema:\n                type: string\n                default: no-cache, no-store, must-revalidate\n            BuildKit-Version:\n              description: Default version of docker image builder\n              schema:\n                type: string\n            Pragma:\n              schema:\n                type: string\n                default: no-cache\n            API-Version:\n              description: Max API Version the server supports\n              schema:\n                type: string\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: OK\n        500:\n          description: server error\n          headers:\n            Cache-Control:\n              schema:\n                type: string\n                default: no-cache, no-store, must-revalidate\n            Pragma:\n              schema:\n                type: string\n                default: no-cache\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    head:\n      tags:\n        - System\n      summary: Ping\n      description: This is a dummy endpoint you can use to test if the server is accessible.\n      operationId: SystemPingHead\n      responses:\n        200:\n          description: no error\n          headers:\n            Docker-Experimental:\n              description: If the server is running with experimental mode enabled\n              schema:\n                type: boolean\n            Cache-Control:\n              schema:\n                type: string\n                default: no-cache, no-store, must-revalidate\n            BuildKit-Version:\n              description: Default version of docker image builder\n              schema:\n                type: string\n            Pragma:\n              schema:\n                type: string\n                default: no-cache\n            API-Version:\n              description: Max API Version the server supports\n              schema:\n                type: string\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: (empty)\n        500:\n          description: server error\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /commit:\n    post:\n      tags:\n        - Image\n      summary: Create a new image from a container\n      operationId: ImageCommit\n      parameters:\n        - name: container\n          in: query\n          description: The ID or name of the container to commit\n          schema:\n            type: string\n        - name: repo\n          in: query\n          description: Repository name for the created image\n          schema:\n            type: string\n        - name: tag\n          in: query\n          description: Tag name for the create image\n          schema:\n            type: string\n        - name: comment\n          in: query\n          description: Commit message\n          schema:\n            type: string\n        - name: author\n          in: query\n          description: Author of the image (e.g., `John Hannibal Smith \u003channibal@a-team.com\u003e`)\n          schema:\n            type: string\n        - name: pause\n          in: query\n          description: Whether to pause the container before committing\n          schema:\n            type: boolean\n            default: true\n        - name: changes\n          in: query\n          description: '`Dockerfile` instructions to apply while committing'\n          schema:\n            type: string\n      requestBody:\n        description: The container configuration\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ContainerConfig'\n        required: false\n      responses:\n        201:\n          description: no error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdResponse'\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: containerConfig\n  /events:\n    get:\n      tags:\n        - System\n      summary: Monitor events\n      description: |\n        Stream real-time events from the server.\n\n        Various objects within Docker report events when something happens to them.\n\n        Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, and `update`\n\n        Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, and `untag`\n\n        Volumes report these events: `create`, `mount`, `unmount`, and `destroy`\n\n        Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, and `remove`\n\n        The Docker daemon reports these events: `reload`\n\n        Services report these events: `create`, `update`, and `remove`\n\n        Nodes report these events: `create`, `update`, and `remove`\n\n        Secrets report these events: `create`, `update`, and `remove`\n\n        Configs report these events: `create`, `update`, and `remove`\n      operationId: SystemEvents\n      parameters:\n        - name: since\n          in: query\n          description: Show events created since this timestamp then stream new events.\n          schema:\n            type: string\n        - name: until\n          in: query\n          description: Show events created until this timestamp then stop streaming.\n          schema:\n            type: string\n        - name: filters\n          in: query\n          description: |\n            A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:\n\n            - `config=\u003cstring\u003e` config name or ID\n            - `container=\u003cstring\u003e` container name or ID\n            - `daemon=\u003cstring\u003e` daemon name or ID\n            - `event=\u003cstring\u003e` event type\n            - `image=\u003cstring\u003e` image name or ID\n            - `label=\u003cstring\u003e` image or container label\n            - `network=\u003cstring\u003e` network name or ID\n            - `node=\u003cstring\u003e` node ID\n            - `plugin`=\u003cstring\u003e plugin name or ID\n            - `scope`=\u003cstring\u003e local or swarm\n            - `secret=\u003cstring\u003e` secret name or ID\n            - `service=\u003cstring\u003e` service name or ID\n            - `type=\u003cstring\u003e` object to filter by, one of `container`, `image`, `volume`, `network`, `daemon`, `plugin`, `node`, `service`, `secret` or `config`\n            - `volume=\u003cstring\u003e` volume name\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                title: SystemEventsResponse\n                type: object\n                properties:\n                  Type:\n                    type: string\n                    description: The type of object emitting the event\n                  Action:\n                    type: string\n                    description: The type of event\n                  Actor:\n                    type: object\n                    properties:\n                      ID:\n                        type: string\n                        description: The ID of the object emitting the event\n                      Attributes:\n                        type: object\n                        additionalProperties:\n                          type: string\n                        description: Various key/value attributes of the object, depending\n                          on its type\n                  time:\n                    type: integer\n                    description: Timestamp of event\n                  timeNano:\n                    type: integer\n                    description: Timestamp of event, with nanosecond accuracy\n                    format: int64\n              example:\n                Type: container\n                Action: create\n                Actor:\n                  ID: ede54ee1afda366ab42f824e8a5ffd195155d853ceaec74a927f249ea270c743\n                  Attributes:\n                    com.example.some-label: some-label-value\n                    image: alpine\n                    name: my-container\n                time: 1461943101\n        400:\n          description: bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /system/df:\n    get:\n      tags:\n        - System\n      summary: Get data usage information\n      operationId: SystemDataUsage\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                title: SystemDataUsageResponse\n                type: object\n                properties:\n                  LayersSize:\n                    type: integer\n                    format: int64\n                  Images:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ImageSummary'\n                  Containers:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ContainerSummary'\n                  Volumes:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Volume'\n                  BuildCache:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/BuildCache'\n                example:\n                  LayersSize: 1092588\n                  Images:\n                    - Id: sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749\n                      ParentId: \"\"\n                      RepoTags:\n                        - busybox:latest\n                      RepoDigests:\n                        - busybox@sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6\n                      Created: 1466724217\n                      Size: 1092588\n                      SharedSize: 0\n                      VirtualSize: 1092588\n                      Labels: {}\n                      Containers: 1\n                  Containers:\n                    - Id: e575172ed11dc01bfce087fb27bee502db149e1a0fad7c296ad300bbff178148\n                      Names:\n                        - /top\n                      Image: busybox\n                      ImageID: sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749\n                      Command: top\n                      Created: 1472592424\n                      Ports: []\n                      SizeRootFs: 1092588\n                      Labels: {}\n                      State: exited\n                      Status: Exited (0) 56 minutes ago\n                      HostConfig:\n                        NetworkMode: default\n                      NetworkSettings:\n                        Networks:\n                          bridge:\n                            NetworkID: d687bc59335f0e5c9ee8193e5612e8aee000c8c62ea170cfb99c098f95899d92\n                            EndpointID: 8ed5115aeaad9abb174f68dcf135b49f11daf597678315231a32ca28441dec6a\n                            Gateway: 172.18.0.1\n                            IPAddress: 172.18.0.2\n                            IPPrefixLen: 16\n                            IPv6Gateway: \"\"\n                            GlobalIPv6Address: \"\"\n                            GlobalIPv6PrefixLen: 0\n                            MacAddress: 02:42:ac:12:00:02\n                      Mounts: []\n                  Volumes:\n                    - Name: my-volume\n                      Driver: local\n                      Mountpoint: /var/lib/docker/volumes/my-volume/_data\n                      Scope: local\n                      UsageData:\n                        Size: 10920104\n                        RefCount: 2\n            text/plain:\n              schema:\n                title: SystemDataUsageResponse\n                type: object\n                properties:\n                  LayersSize:\n                    type: integer\n                    format: int64\n                  Images:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ImageSummary'\n                  Containers:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ContainerSummary'\n                  Volumes:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Volume'\n                  BuildCache:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/BuildCache'\n                example:\n                  LayersSize: 1092588\n                  Images:\n                    - Id: sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749\n                      ParentId: \"\"\n                      RepoTags:\n                        - busybox:latest\n                      RepoDigests:\n                        - busybox@sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6\n                      Created: 1466724217\n                      Size: 1092588\n                      SharedSize: 0\n                      VirtualSize: 1092588\n                      Labels: {}\n                      Containers: 1\n                  Containers:\n                    - Id: e575172ed11dc01bfce087fb27bee502db149e1a0fad7c296ad300bbff178148\n                      Names:\n                        - /top\n                      Image: busybox\n                      ImageID: sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749\n                      Command: top\n                      Created: 1472592424\n                      Ports: []\n                      SizeRootFs: 1092588\n                      Labels: {}\n                      State: exited\n                      Status: Exited (0) 56 minutes ago\n                      HostConfig:\n                        NetworkMode: default\n                      NetworkSettings:\n                        Networks:\n                          bridge:\n                            NetworkID: d687bc59335f0e5c9ee8193e5612e8aee000c8c62ea170cfb99c098f95899d92\n                            EndpointID: 8ed5115aeaad9abb174f68dcf135b49f11daf597678315231a32ca28441dec6a\n                            Gateway: 172.18.0.1\n                            IPAddress: 172.18.0.2\n                            IPPrefixLen: 16\n                            IPv6Gateway: \"\"\n                            GlobalIPv6Address: \"\"\n                            GlobalIPv6PrefixLen: 0\n                            MacAddress: 02:42:ac:12:00:02\n                      Mounts: []\n                  Volumes:\n                    - Name: my-volume\n                      Driver: local\n                      Mountpoint: /var/lib/docker/volumes/my-volume/_data\n                      Scope: local\n                      UsageData:\n                        Size: 10920104\n                        RefCount: 2\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /images/{name}/get:\n    get:\n      tags:\n        - Image\n      summary: Export an image\n      description: |\n        Get a tarball containing all images and metadata for a repository.\n\n        If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.\n\n        ### Image tarball format\n\n        An image tarball contains one directory per image layer (named using its long ID), each containing these files:\n\n        - `VERSION`: currently `1.0` - the file format version\n        - `json`: detailed layer information, similar to `docker inspect layer_id`\n        - `layer.tar`: A tarfile containing the filesystem changes in this layer\n\n        The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.\n\n        If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.\n\n        ```json\n        {\n          \"hello-world\": {\n            \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"\n          }\n        }\n        ```\n      operationId: ImageGet\n      parameters:\n        - name: name\n          in: path\n          description: Image name or ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/x-tar:\n              schema:\n                type: string\n                format: binary\n        500:\n          description: server error\n          content:\n            application/x-tar:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /images/get:\n    get:\n      tags:\n        - Image\n      summary: Export several images\n      description: |\n        Get a tarball containing all images and metadata for several image repositories.\n\n        For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the 'repositories' file for this image ID.\n\n        For details on the format, see [the export image endpoint](#operation/ImageGet).\n      operationId: ImageGetAll\n      parameters:\n        - name: names\n          in: query\n          description: Image names to filter by\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/x-tar:\n              schema:\n                type: string\n                format: binary\n        500:\n          description: server error\n          content:\n            application/x-tar:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /images/load:\n    post:\n      tags:\n        - Image\n      summary: Import images\n      description: |\n        Load a set of images and tags into a repository.\n\n        For details on the format, see [the export image endpoint](#operation/ImageGet).\n      operationId: ImageLoad\n      parameters:\n        - name: quiet\n          in: query\n          description: Suppress progress details during load.\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        description: Tar archive containing images\n        content:\n          application/x-tar:\n            schema:\n              type: string\n              format: binary\n        required: false\n      responses:\n        200:\n          description: no error\n          content: {}\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: imagesTarball\n  /containers/{id}/exec:\n    post:\n      tags:\n        - Exec\n      summary: Create an exec instance\n      description: Run a command inside a running container.\n      operationId: ContainerExec\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of container\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Exec configuration\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                AttachStdin:\n                  type: boolean\n                  description: Attach to `stdin` of the exec command.\n                AttachStdout:\n                  type: boolean\n                  description: Attach to `stdout` of the exec command.\n                AttachStderr:\n                  type: boolean\n                  description: Attach to `stderr` of the exec command.\n                DetachKeys:\n                  type: string\n                  description: 'Override the key sequence for detaching a container.\n                    Format is a single character `[a-Z]` or `ctrl-\u003cvalue\u003e` where `\u003cvalue\u003e`\n                    is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.'\n                Tty:\n                  type: boolean\n                  description: Allocate a pseudo-TTY.\n                Env:\n                  type: array\n                  description: A list of environment variables in the form `[\"VAR=value\",\n                    ...]`.\n                  items:\n                    type: string\n                Cmd:\n                  type: array\n                  description: Command to run, as a string or array of strings.\n                  items:\n                    type: string\n                Privileged:\n                  type: boolean\n                  description: Runs the exec process with extended privileges.\n                  default: false\n                User:\n                  type: string\n                  description: 'The user, and optionally, group to run the exec process\n                    inside the container. Format is one of: `user`, `user:group`,\n                    `uid`, or `uid:gid`.'\n                WorkingDir:\n                  type: string\n                  description: The working directory for the exec process inside the\n                    container.\n              example:\n                AttachStdin: false\n                AttachStdout: true\n                AttachStderr: true\n                DetachKeys: ctrl-p,ctrl-q\n                Tty: false\n                Cmd:\n                  - date\n                Env:\n                  - FOO=bar\n                  - BAZ=quux\n        required: true\n      responses:\n        201:\n          description: no error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdResponse'\n        404:\n          description: no such container\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such container: c2ada9df5af8'\n        409:\n          description: container is paused\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: execConfig\n  /exec/{id}/start:\n    post:\n      tags:\n        - Exec\n      summary: Start an exec instance\n      description: Starts a previously set up exec instance. If detach is true, this\n        endpoint returns immediately after starting the command. Otherwise, it sets\n        up an interactive session with the command.\n      operationId: ExecStart\n      parameters:\n        - name: id\n          in: path\n          description: Exec instance ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                Detach:\n                  type: boolean\n                  description: Detach from the command.\n                Tty:\n                  type: boolean\n                  description: Allocate a pseudo-TTY.\n              example:\n                Detach: false\n                Tty: false\n        required: false\n      responses:\n        200:\n          description: No error\n          content: {}\n        404:\n          description: No such exec instance\n          content:\n            application/vnd.docker.raw-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        409:\n          description: Container is stopped or paused\n          content:\n            application/vnd.docker.raw-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: execStartConfig\n  /exec/{id}/resize:\n    post:\n      tags:\n        - Exec\n      summary: Resize an exec instance\n      description: Resize the TTY session used by an exec instance. This endpoint\n        only works if `tty` was specified as part of creating and starting the exec\n        instance.\n      operationId: ExecResize\n      parameters:\n        - name: id\n          in: path\n          description: Exec instance ID\n          required: true\n          schema:\n            type: string\n        - name: h\n          in: query\n          description: Height of the TTY session in characters\n          schema:\n            type: integer\n        - name: w\n          in: query\n          description: Width of the TTY session in characters\n          schema:\n            type: integer\n      responses:\n        201:\n          description: No error\n          content: {}\n        404:\n          description: No such exec instance\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /exec/{id}/json:\n    get:\n      tags:\n        - Exec\n      summary: Inspect an exec instance\n      description: Return low-level information about an exec instance.\n      operationId: ExecInspect\n      parameters:\n        - name: id\n          in: path\n          description: Exec instance ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: No error\n          content:\n            application/json:\n              schema:\n                title: ExecInspectResponse\n                type: object\n                properties:\n                  CanRemove:\n                    type: boolean\n                  DetachKeys:\n                    type: string\n                  ID:\n                    type: string\n                  Running:\n                    type: boolean\n                  ExitCode:\n                    type: integer\n                  ProcessConfig:\n                    $ref: '#/components/schemas/ProcessConfig'\n                  OpenStdin:\n                    type: boolean\n                  OpenStderr:\n                    type: boolean\n                  OpenStdout:\n                    type: boolean\n                  ContainerID:\n                    type: string\n                  Pid:\n                    type: integer\n                    description: The system process ID for the exec process.\n              example:\n                CanRemove: false\n                ContainerID: b53ee82b53a40c7dca428523e34f741f3abc51d9f297a14ff874bf761b995126\n                DetachKeys: \"\"\n                ExitCode: 2\n                ID: f33bbfb39f5b142420f4759b2348913bd4a8d1a6d7fd56499cb41a1bb91d7b3b\n                OpenStderr: true\n                OpenStdin: true\n                OpenStdout: true\n                ProcessConfig:\n                  arguments:\n                    - -c\n                    - exit 2\n                  entrypoint: sh\n                  privileged: false\n                  tty: true\n                  user: \"1000\"\n                Running: false\n                Pid: 42000\n        404:\n          description: No such exec instance\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /volumes:\n    get:\n      tags:\n        - Volume\n      summary: List volumes\n      operationId: VolumeList\n      parameters:\n        - name: filters\n          in: query\n          description: |\n            JSON encoded value of the filters (a `map[string][]string`) to\n            process on the volumes list. Available filters:\n\n            - `dangling=\u003cboolean\u003e` When set to `true` (or `1`), returns all\n               volumes that are not in use by a container. When set to `false`\n               (or `0`), only volumes that are in use by one or more\n               containers are returned.\n            - `driver=\u003cvolume-driver-name\u003e` Matches volumes based on their driver.\n            - `label=\u003ckey\u003e` or `label=\u003ckey\u003e:\u003cvalue\u003e` Matches volumes based on\n               the presence of a `label` alone or a `label` and a value.\n            - `name=\u003cvolume-name\u003e` Matches all or part of a volume name.\n          schema:\n            type: string\n            format: json\n      responses:\n        200:\n          description: Summary volume data that matches the query\n          content:\n            application/json:\n              schema:\n                title: VolumeListResponse\n                required:\n                  - Volumes\n                  - Warnings\n                type: object\n                properties:\n                  Volumes:\n                    type: array\n                    description: List of volumes\n                    nullable: false\n                    items:\n                      $ref: '#/components/schemas/Volume'\n                  Warnings:\n                    type: array\n                    description: Warnings that occurred when fetching the list of\n                      volumes\n                    nullable: false\n                    items:\n                      type: string\n                description: Volume list response\n              example:\n                Volumes:\n                  - CreatedAt: 2017-07-19T12:00:26Z\n                    Name: tardis\n                    Driver: local\n                    Mountpoint: /var/lib/docker/volumes/tardis\n                    Labels:\n                      com.example.some-label: some-value\n                      com.example.some-other-label: some-other-value\n                    Scope: local\n                    Options:\n                      device: tmpfs\n                      o: size=100m,uid=1000\n                      type: tmpfs\n                Warnings: []\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /volumes/create:\n    post:\n      tags:\n        - Volume\n      summary: Create a volume\n      operationId: VolumeCreate\n      requestBody:\n        description: Volume configuration\n        content:\n          application/json:\n            schema:\n              title: VolumeConfig\n              type: object\n              properties:\n                Name:\n                  type: string\n                  description: The new volume's name. If not specified, Docker generates\n                    a name.\n                  nullable: false\n                Driver:\n                  type: string\n                  description: Name of the volume driver to use.\n                  nullable: false\n                  default: local\n                DriverOpts:\n                  type: object\n                  additionalProperties:\n                    type: string\n                  description: A mapping of driver options and values. These options\n                    are passed directly to the driver and are driver specific.\n                Labels:\n                  type: object\n                  additionalProperties:\n                    type: string\n                  description: User-defined key/value metadata.\n              description: Volume configuration\n              example:\n                Name: tardis\n                Labels:\n                  com.example.some-label: some-value\n                  com.example.some-other-label: some-other-value\n                Driver: custom\n        required: true\n      responses:\n        201:\n          description: The volume was created successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Volume'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: volumeConfig\n  /volumes/{name}:\n    get:\n      tags:\n        - Volume\n      summary: Inspect a volume\n      operationId: VolumeInspect\n      parameters:\n        - name: name\n          in: path\n          description: Volume name or ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: No error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Volume'\n        404:\n          description: No such volume\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      tags:\n        - Volume\n      summary: Remove a volume\n      description: Instruct the driver to remove the volume.\n      operationId: VolumeDelete\n      parameters:\n        - name: name\n          in: path\n          description: Volume name or ID\n          required: true\n          schema:\n            type: string\n        - name: force\n          in: query\n          description: Force the removal of the volume\n          schema:\n            type: boolean\n            default: false\n      responses:\n        204:\n          description: The volume was removed\n          content: {}\n        404:\n          description: No such volume or volume driver\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        409:\n          description: Volume is in use and cannot be removed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /volumes/prune:\n    post:\n      tags:\n        - Volume\n      summary: Delete unused volumes\n      operationId: VolumePrune\n      parameters:\n        - name: filters\n          in: query\n          description: |\n            Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\n            Available filters:\n            - `label` (`label=\u003ckey\u003e`, `label=\u003ckey\u003e=\u003cvalue\u003e`, `label!=\u003ckey\u003e`, or `label!=\u003ckey\u003e=\u003cvalue\u003e`) Prune volumes with (or without, in case `label!=...` is used) the specified labels.\n          schema:\n            type: string\n      responses:\n        200:\n          description: No error\n          content:\n            application/json:\n              schema:\n                title: VolumePruneResponse\n                type: object\n                properties:\n                  VolumesDeleted:\n                    type: array\n                    description: Volumes that were deleted\n                    items:\n                      type: string\n                  SpaceReclaimed:\n                    type: integer\n                    description: Disk space reclaimed in bytes\n                    format: int64\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /networks:\n    get:\n      tags:\n        - Network\n      summary: List networks\n      description: |\n        Returns a list of networks. For details on the format, see [the network inspect endpoint](#operation/NetworkInspect).\n\n        Note that it uses a different, smaller representation of a network than inspecting a single network. For example,\n        the list of containers attached to the network is not propagated in API versions 1.28 and up.\n      operationId: NetworkList\n      parameters:\n        - name: filters\n          in: query\n          description: |\n            JSON encoded value of the filters (a `map[string][]string`) to process on the networks list. Available filters:\n\n            - `dangling=\u003cboolean\u003e` When set to `true` (or `1`), returns all\n               networks that are not in use by a container. When set to `false`\n               (or `0`), only networks that are in use by one or more\n               containers are returned.\n            - `driver=\u003cdriver-name\u003e` Matches a network's driver.\n            - `id=\u003cnetwork-id\u003e` Matches all or part of a network ID.\n            - `label=\u003ckey\u003e` or `label=\u003ckey\u003e=\u003cvalue\u003e` of a network label.\n            - `name=\u003cnetwork-name\u003e` Matches all or part of a network name.\n            - `scope=[\"swarm\"|\"global\"|\"local\"]` Filters networks by scope (`swarm`, `global`, or `local`).\n            - `type=[\"custom\"|\"builtin\"]` Filters networks by type. The `custom` keyword returns all user-defined networks.\n          schema:\n            type: string\n      responses:\n        200:\n          description: No error\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Network'\n              example:\n                - Name: bridge\n                  Id: f2de39df4171b0dc801e8002d1d999b77256983dfc63041c0f34030aa3977566\n                  Created: 2016-10-19\n                  Scope: local\n                  Driver: bridge\n                  EnableIPv6: false\n                  Internal: false\n                  Attachable: false\n                  Ingress: false\n                  IPAM:\n                    Driver: default\n                    Config:\n                      - Subnet: 172.17.0.0/16\n                  Options:\n                    com.docker.network.bridge.default_bridge: \"true\"\n                    com.docker.network.bridge.enable_icc: \"true\"\n                    com.docker.network.bridge.enable_ip_masquerade: \"true\"\n                    com.docker.network.bridge.host_binding_ipv4: 0.0.0.0\n                    com.docker.network.bridge.name: docker0\n                    com.docker.network.driver.mtu: \"1500\"\n                - Name: none\n                  Id: e086a3893b05ab69242d3c44e49483a3bbbd3a26b46baa8f61ab797c1088d794\n                  Created: 0001-01-01T00:00:00Z\n                  Scope: local\n                  Driver: null\n                  EnableIPv6: false\n                  Internal: false\n                  Attachable: false\n                  Ingress: false\n                  IPAM:\n                    Driver: default\n                    Config: []\n                  Containers: {}\n                  Options: {}\n                - Name: host\n                  Id: 13e871235c677f196c4e1ecebb9dc733b9b2d2ab589e30c539efeda84a24215e\n                  Created: 0001-01-01T00:00:00Z\n                  Scope: local\n                  Driver: host\n                  EnableIPv6: false\n                  Internal: false\n                  Attachable: false\n                  Ingress: false\n                  IPAM:\n                    Driver: default\n                    Config: []\n                  Containers: {}\n                  Options: {}\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /networks/{id}:\n    get:\n      tags:\n        - Network\n      summary: Inspect a network\n      operationId: NetworkInspect\n      parameters:\n        - name: id\n          in: path\n          description: Network ID or name\n          required: true\n          schema:\n            type: string\n        - name: verbose\n          in: query\n          description: Detailed inspect output for troubleshooting\n          schema:\n            type: boolean\n            default: false\n        - name: scope\n          in: query\n          description: Filter the network by scope (swarm, global, or local)\n          schema:\n            type: string\n      responses:\n        200:\n          description: No error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Network'\n        404:\n          description: Network not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      tags:\n        - Network\n      summary: Remove a network\n      operationId: NetworkDelete\n      parameters:\n        - name: id\n          in: path\n          description: Network ID or name\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: No error\n          content: {}\n        403:\n          description: operation not supported for pre-defined networks\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: no such network\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /networks/create:\n    post:\n      tags:\n        - Network\n      summary: Create a network\n      operationId: NetworkCreate\n      requestBody:\n        description: Network configuration\n        content:\n          application/json:\n            schema:\n              required:\n                - Name\n              type: object\n              properties:\n                Name:\n                  type: string\n                  description: The network's name.\n                CheckDuplicate:\n                  type: boolean\n                  description: Check for networks with duplicate names. Since Network\n                    is primarily keyed based on a random ID and not on the name, and\n                    network name is strictly a user-friendly alias to the network\n                    which is uniquely identified using ID, there is no guaranteed\n                    way to check for duplicates. CheckDuplicate is there to provide\n                    a best effort checking of any networks which has the same name\n                    but it is not guaranteed to catch all name collisions.\n                Driver:\n                  type: string\n                  description: Name of the network driver plugin to use.\n                  default: bridge\n                Internal:\n                  type: boolean\n                  description: Restrict external access to the network.\n                Attachable:\n                  type: boolean\n                  description: Globally scoped network is manually attachable by regular\n                    containers from workers in swarm mode.\n                Ingress:\n                  type: boolean\n                  description: Ingress network is the network which provides the routing-mesh\n                    in swarm mode.\n                IPAM:\n                  $ref: '#/components/schemas/IPAM'\n                EnableIPv6:\n                  type: boolean\n                  description: Enable IPv6 on the network.\n                Options:\n                  type: object\n                  additionalProperties:\n                    type: string\n                  description: Network specific options to be used by the drivers.\n                Labels:\n                  type: object\n                  additionalProperties:\n                    type: string\n                  description: User-defined key/value metadata.\n              example:\n                Name: isolated_nw\n                CheckDuplicate: false\n                Driver: bridge\n                EnableIPv6: true\n                IPAM:\n                  Driver: default\n                  Config:\n                    - Subnet: 172.20.0.0/16\n                      IPRange: 172.20.10.0/24\n                      Gateway: 172.20.10.11\n                    - Subnet: 2001:db8:abcd::/64\n                      Gateway: 2001:db8:abcd::1011\n                  Options:\n                    foo: bar\n                Internal: true\n                Attachable: false\n                Ingress: false\n                Options:\n                  com.docker.network.bridge.default_bridge: \"true\"\n                  com.docker.network.bridge.enable_icc: \"true\"\n                  com.docker.network.bridge.enable_ip_masquerade: \"true\"\n                  com.docker.network.bridge.host_binding_ipv4: 0.0.0.0\n                  com.docker.network.bridge.name: docker0\n                  com.docker.network.driver.mtu: \"1500\"\n                Labels:\n                  com.example.some-label: some-value\n                  com.example.some-other-label: some-other-value\n        required: true\n      responses:\n        201:\n          description: No error\n          content:\n            application/json:\n              schema:\n                title: NetworkCreateResponse\n                type: object\n                properties:\n                  Id:\n                    type: string\n                    description: The ID of the created network.\n                  Warning:\n                    type: string\n                example:\n                  Id: 22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30\n                  Warning: \"\"\n        403:\n          description: operation not supported for pre-defined networks\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: plugin not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: networkConfig\n  /networks/{id}/connect:\n    post:\n      tags:\n        - Network\n      summary: Connect a container to a network\n      operationId: NetworkConnect\n      parameters:\n        - name: id\n          in: path\n          description: Network ID or name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                Container:\n                  type: string\n                  description: The ID or name of the container to connect to the network.\n                EndpointConfig:\n                  $ref: '#/components/schemas/EndpointSettings'\n              example:\n                Container: 3613f73ba0e4\n                EndpointConfig:\n                  IPAMConfig:\n                    IPv4Address: 172.24.56.89\n                    IPv6Address: 2001:db8::5689\n        required: true\n      responses:\n        200:\n          description: No error\n          content: {}\n        403:\n          description: Operation not supported for swarm scoped networks\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: Network or container not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: container\n  /networks/{id}/disconnect:\n    post:\n      tags:\n        - Network\n      summary: Disconnect a container from a network\n      operationId: NetworkDisconnect\n      parameters:\n        - name: id\n          in: path\n          description: Network ID or name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                Container:\n                  type: string\n                  description: The ID or name of the container to disconnect from\n                    the network.\n                Force:\n                  type: boolean\n                  description: Force the container to disconnect from the network.\n        required: true\n      responses:\n        200:\n          description: No error\n          content: {}\n        403:\n          description: Operation not supported for swarm scoped networks\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: Network or container not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: container\n  /networks/prune:\n    post:\n      tags:\n        - Network\n      summary: Delete unused networks\n      operationId: NetworkPrune\n      parameters:\n        - name: filters\n          in: query\n          description: |\n            Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\n            Available filters:\n            - `until=\u003ctimestamp\u003e` Prune networks created before this timestamp. The `\u003ctimestamp\u003e` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.\n            - `label` (`label=\u003ckey\u003e`, `label=\u003ckey\u003e=\u003cvalue\u003e`, `label!=\u003ckey\u003e`, or `label!=\u003ckey\u003e=\u003cvalue\u003e`) Prune networks with (or without, in case `label!=...` is used) the specified labels.\n          schema:\n            type: string\n      responses:\n        200:\n          description: No error\n          content:\n            application/json:\n              schema:\n                title: NetworkPruneResponse\n                type: object\n                properties:\n                  NetworksDeleted:\n                    type: array\n                    description: Networks that were deleted\n                    items:\n                      type: string\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /plugins:\n    get:\n      tags:\n        - Plugin\n      summary: List plugins\n      description: Returns information about installed plugins.\n      operationId: PluginList\n      parameters:\n        - name: filters\n          in: query\n          description: |\n            A JSON encoded value of the filters (a `map[string][]string`) to process on the plugin list. Available filters:\n\n            - `capability=\u003ccapability name\u003e`\n            - `enable=\u003ctrue\u003e|\u003cfalse\u003e`\n          schema:\n            type: string\n      responses:\n        200:\n          description: No error\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Plugin'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /plugins/privileges:\n    get:\n      tags:\n        - Plugin\n      summary: Get plugin privileges\n      operationId: GetPluginPrivileges\n      parameters:\n        - name: remote\n          in: query\n          description: The name of the plugin. The `:latest` tag is optional, and is\n            the default if omitted.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                type: array\n                example:\n                  - Name: network\n                    Description: \"\"\n                    Value:\n                      - host\n                  - Name: mount\n                    Description: \"\"\n                    Value:\n                      - /data\n                  - Name: device\n                    Description: \"\"\n                    Value:\n                      - /dev/cpu_dma_latency\n                items:\n                  title: PluginPrivilegeItem\n                  type: object\n                  properties:\n                    Name:\n                      type: string\n                    Description:\n                      type: string\n                    Value:\n                      type: array\n                      items:\n                        type: string\n                  description: Describes a permission the user has to accept upon\n                    installing the plugin.\n            text/plain:\n              schema:\n                type: array\n                example:\n                  - Name: network\n                    Description: \"\"\n                    Value:\n                      - host\n                  - Name: mount\n                    Description: \"\"\n                    Value:\n                      - /data\n                  - Name: device\n                    Description: \"\"\n                    Value:\n                      - /dev/cpu_dma_latency\n                items:\n                  title: PluginPrivilegeItem\n                  type: object\n                  properties:\n                    Name:\n                      type: string\n                    Description:\n                      type: string\n                    Value:\n                      type: array\n                      items:\n                        type: string\n                  description: Describes a permission the user has to accept upon\n                    installing the plugin.\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /plugins/pull:\n    post:\n      tags:\n        - Plugin\n      summary: Install a plugin\n      description: |\n        Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).\n      operationId: PluginPull\n      parameters:\n        - name: remote\n          in: query\n          description: |\n            Remote reference for plugin to install.\n\n            The `:latest` tag is optional, and is used as the default if omitted.\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: query\n          description: |\n            Local name for the pulled plugin.\n\n            The `:latest` tag is optional, and is used as the default if omitted.\n          schema:\n            type: string\n        - name: X-Registry-Auth\n          in: header\n          description: A base64-encoded auth configuration to use when pulling a plugin\n            from a registry. [See the authentication section for details.](#section/Authentication)\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              example:\n                - Name: network\n                  Description: \"\"\n                  Value:\n                    - host\n                - Name: mount\n                  Description: \"\"\n                  Value:\n                    - /data\n                - Name: device\n                  Description: \"\"\n                  Value:\n                    - /dev/cpu_dma_latency\n              items:\n                type: object\n                properties:\n                  Name:\n                    type: string\n                  Description:\n                    type: string\n                  Value:\n                    type: array\n                    items:\n                      type: string\n                description: Describes a permission accepted by the user upon installing\n                  the plugin.\n          text/plain:\n            schema:\n              type: array\n              example:\n                - Name: network\n                  Description: \"\"\n                  Value:\n                    - host\n                - Name: mount\n                  Description: \"\"\n                  Value:\n                    - /data\n                - Name: device\n                  Description: \"\"\n                  Value:\n                    - /dev/cpu_dma_latency\n              items:\n                type: object\n                properties:\n                  Name:\n                    type: string\n                  Description:\n                    type: string\n                  Value:\n                    type: array\n                    items:\n                      type: string\n                description: Describes a permission accepted by the user upon installing\n                  the plugin.\n        required: false\n      responses:\n        204:\n          description: no error\n          content: {}\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /plugins/{name}/json:\n    get:\n      tags:\n        - Plugin\n      summary: Inspect a plugin\n      operationId: PluginInspect\n      parameters:\n        - name: name\n          in: path\n          description: The name of the plugin. The `:latest` tag is optional, and is\n            the default if omitted.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Plugin'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Plugin'\n        404:\n          description: plugin is not installed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /plugins/{name}:\n    delete:\n      tags:\n        - Plugin\n      summary: Remove a plugin\n      operationId: PluginDelete\n      parameters:\n        - name: name\n          in: path\n          description: The name of the plugin. The `:latest` tag is optional, and is\n            the default if omitted.\n          required: true\n          schema:\n            type: string\n        - name: force\n          in: query\n          description: Disable the plugin before removing. This may result in issues\n            if the plugin is in use by a container.\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Plugin'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Plugin'\n        404:\n          description: plugin is not installed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /plugins/{name}/enable:\n    post:\n      tags:\n        - Plugin\n      summary: Enable a plugin\n      operationId: PluginEnable\n      parameters:\n        - name: name\n          in: path\n          description: The name of the plugin. The `:latest` tag is optional, and is\n            the default if omitted.\n          required: true\n          schema:\n            type: string\n        - name: timeout\n          in: query\n          description: Set the HTTP client timeout (in seconds)\n          schema:\n            type: integer\n            default: 0\n      responses:\n        200:\n          description: no error\n          content: {}\n        404:\n          description: plugin is not installed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /plugins/{name}/disable:\n    post:\n      tags:\n        - Plugin\n      summary: Disable a plugin\n      operationId: PluginDisable\n      parameters:\n        - name: name\n          in: path\n          description: The name of the plugin. The `:latest` tag is optional, and is\n            the default if omitted.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content: {}\n        404:\n          description: plugin is not installed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /plugins/{name}/upgrade:\n    post:\n      tags:\n        - Plugin\n      summary: Upgrade a plugin\n      operationId: PluginUpgrade\n      parameters:\n        - name: name\n          in: path\n          description: The name of the plugin. The `:latest` tag is optional, and is\n            the default if omitted.\n          required: true\n          schema:\n            type: string\n        - name: remote\n          in: query\n          description: |\n            Remote reference to upgrade to.\n\n            The `:latest` tag is optional, and is used as the default if omitted.\n          required: true\n          schema:\n            type: string\n        - name: X-Registry-Auth\n          in: header\n          description: A base64-encoded auth configuration to use when pulling a plugin\n            from a registry. [See the authentication section for details.](#section/Authentication)\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              example:\n                - Name: network\n                  Description: \"\"\n                  Value:\n                    - host\n                - Name: mount\n                  Description: \"\"\n                  Value:\n                    - /data\n                - Name: device\n                  Description: \"\"\n                  Value:\n                    - /dev/cpu_dma_latency\n              items:\n                type: object\n                properties:\n                  Name:\n                    type: string\n                  Description:\n                    type: string\n                  Value:\n                    type: array\n                    items:\n                      type: string\n                description: Describes a permission accepted by the user upon installing\n                  the plugin.\n          text/plain:\n            schema:\n              type: array\n              example:\n                - Name: network\n                  Description: \"\"\n                  Value:\n                    - host\n                - Name: mount\n                  Description: \"\"\n                  Value:\n                    - /data\n                - Name: device\n                  Description: \"\"\n                  Value:\n                    - /dev/cpu_dma_latency\n              items:\n                type: object\n                properties:\n                  Name:\n                    type: string\n                  Description:\n                    type: string\n                  Value:\n                    type: array\n                    items:\n                      type: string\n                description: Describes a permission accepted by the user upon installing\n                  the plugin.\n        required: false\n      responses:\n        204:\n          description: no error\n          content: {}\n        404:\n          description: plugin not installed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /plugins/create:\n    post:\n      tags:\n        - Plugin\n      summary: Create a plugin\n      operationId: PluginCreate\n      parameters:\n        - name: name\n          in: query\n          description: The name of the plugin. The `:latest` tag is optional, and is\n            the default if omitted.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Path to tar containing plugin rootfs and manifest\n        content:\n          application/x-tar:\n            schema:\n              type: string\n              format: binary\n        required: false\n      responses:\n        204:\n          description: no error\n          content: {}\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: tarContext\n  /plugins/{name}/push:\n    post:\n      tags:\n        - Plugin\n      summary: Push a plugin\n      description: |\n        Push a plugin to the registry.\n      operationId: PluginPush\n      parameters:\n        - name: name\n          in: path\n          description: The name of the plugin. The `:latest` tag is optional, and is\n            the default if omitted.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content: {}\n        404:\n          description: plugin not installed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /plugins/{name}/set:\n    post:\n      tags:\n        - Plugin\n      summary: Configure a plugin\n      operationId: PluginSet\n      parameters:\n        - name: name\n          in: path\n          description: The name of the plugin. The `:latest` tag is optional, and is\n            the default if omitted.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              example:\n                - DEBUG=1\n              items:\n                type: string\n        required: false\n      responses:\n        204:\n          description: No error\n          content: {}\n        404:\n          description: Plugin not installed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /nodes:\n    get:\n      tags:\n        - Node\n      summary: List nodes\n      operationId: NodeList\n      parameters:\n        - name: filters\n          in: query\n          description: |\n            Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).\n\n            Available filters:\n            - `id=\u003cnode id\u003e`\n            - `label=\u003cengine label\u003e`\n            - `membership=`(`accepted`|`pending`)`\n            - `name=\u003cnode name\u003e`\n            - `node.label=\u003cnode label\u003e`\n            - `role=`(`manager`|`worker`)`\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Node'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Node'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /nodes/{id}:\n    get:\n      tags:\n        - Node\n      summary: Inspect a node\n      operationId: NodeInspect\n      parameters:\n        - name: id\n          in: path\n          description: The ID or name of the node\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Node'\n        404:\n          description: no such node\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      tags:\n        - Node\n      summary: Delete a node\n      operationId: NodeDelete\n      parameters:\n        - name: id\n          in: path\n          description: The ID or name of the node\n          required: true\n          schema:\n            type: string\n        - name: force\n          in: query\n          description: Force remove a node from the swarm\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: no error\n          content: {}\n        404:\n          description: no such node\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /nodes/{id}/update:\n    post:\n      tags:\n        - Node\n      summary: Update a node\n      operationId: NodeUpdate\n      parameters:\n        - name: id\n          in: path\n          description: The ID of the node\n          required: true\n          schema:\n            type: string\n        - name: version\n          in: query\n          description: The version number of the node object being updated. This is\n            required to avoid conflicting writes.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NodeSpec'\n          text/plain:\n            schema:\n              $ref: '#/components/schemas/NodeSpec'\n        required: false\n      responses:\n        200:\n          description: no error\n          content: {}\n        400:\n          description: bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: no such node\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /swarm:\n    get:\n      tags:\n        - Swarm\n      summary: Inspect swarm\n      operationId: SwarmInspect\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Swarm'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Swarm'\n        404:\n          description: no such swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /swarm/init:\n    post:\n      tags:\n        - Swarm\n      summary: Initialize a new swarm\n      operationId: SwarmInit\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ListenAddr:\n                  type: string\n                  description: Listen address used for inter-manager communication,\n                    as well as determining the networking interface used for the VXLAN\n                    Tunnel Endpoint (VTEP). This can either be an address/port combination\n                    in the form `192.168.1.1:4567`, or an interface followed by a\n                    port number, like `eth0:4567`. If the port number is omitted,\n                    the default swarm listening port is used.\n                AdvertiseAddr:\n                  type: string\n                  description: Externally reachable address advertised to other nodes.\n                    This can either be an address/port combination in the form `192.168.1.1:4567`,\n                    or an interface followed by a port number, like `eth0:4567`. If\n                    the port number is omitted, the port number from the listen address\n                    is used. If `AdvertiseAddr` is not specified, it will be automatically\n                    detected when possible.\n                DataPathAddr:\n                  type: string\n                  description: |\n                    Address or interface to use for data path traffic (format: `\u003cip|interface\u003e`), for example,  `192.168.1.1`,\n                    or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr`\n                    is used.\n\n                    The `DataPathAddr` specifies the address that global scope network drivers will publish towards other\n                    nodes in order to reach the containers running on this node. Using this parameter it is possible to\n                    separate the container data traffic from the management traffic of the cluster.\n                DataPathPort:\n                  type: integer\n                  description: |\n                    DataPathPort specifies the data path port number for data traffic.\n                    Acceptable port range is 1024 to 49151.\n                    if no port is set or is set to 0, default port 4789 will be used.\n                  format: uint32\n                DefaultAddrPool:\n                  type: array\n                  description: |\n                    Default Address Pool specifies default subnet pools for global scope networks.\n                  items:\n                    type: string\n                    example: \"\"\n                ForceNewCluster:\n                  type: boolean\n                  description: Force creation of a new swarm.\n                SubnetSize:\n                  type: integer\n                  description: |\n                    SubnetSize specifies the subnet size of the networks created from the default subnet pool\n                  format: uint32\n                Spec:\n                  $ref: '#/components/schemas/SwarmSpec'\n              example:\n                ListenAddr: 0.0.0.0:2377\n                AdvertiseAddr: 192.168.1.1:2377\n                DataPathPort: 4789\n                DefaultAddrPool:\n                  - 10.10.0.0/8\n                  - 20.20.0.0/8\n                SubnetSize: 24\n                ForceNewCluster: false\n                Spec:\n                  Orchestration: {}\n                  Raft: {}\n                  Dispatcher: {}\n                  CAConfig: {}\n                  EncryptionConfig:\n                    AutoLockManagers: false\n          text/plain:\n            schema:\n              type: object\n              properties:\n                ListenAddr:\n                  type: string\n                  description: Listen address used for inter-manager communication,\n                    as well as determining the networking interface used for the VXLAN\n                    Tunnel Endpoint (VTEP). This can either be an address/port combination\n                    in the form `192.168.1.1:4567`, or an interface followed by a\n                    port number, like `eth0:4567`. If the port number is omitted,\n                    the default swarm listening port is used.\n                AdvertiseAddr:\n                  type: string\n                  description: Externally reachable address advertised to other nodes.\n                    This can either be an address/port combination in the form `192.168.1.1:4567`,\n                    or an interface followed by a port number, like `eth0:4567`. If\n                    the port number is omitted, the port number from the listen address\n                    is used. If `AdvertiseAddr` is not specified, it will be automatically\n                    detected when possible.\n                DataPathAddr:\n                  type: string\n                  description: |\n                    Address or interface to use for data path traffic (format: `\u003cip|interface\u003e`), for example,  `192.168.1.1`,\n                    or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr`\n                    is used.\n\n                    The `DataPathAddr` specifies the address that global scope network drivers will publish towards other\n                    nodes in order to reach the containers running on this node. Using this parameter it is possible to\n                    separate the container data traffic from the management traffic of the cluster.\n                DataPathPort:\n                  type: integer\n                  description: |\n                    DataPathPort specifies the data path port number for data traffic.\n                    Acceptable port range is 1024 to 49151.\n                    if no port is set or is set to 0, default port 4789 will be used.\n                  format: uint32\n                DefaultAddrPool:\n                  type: array\n                  description: |\n                    Default Address Pool specifies default subnet pools for global scope networks.\n                  items:\n                    type: string\n                    example: \"\"\n                ForceNewCluster:\n                  type: boolean\n                  description: Force creation of a new swarm.\n                SubnetSize:\n                  type: integer\n                  description: |\n                    SubnetSize specifies the subnet size of the networks created from the default subnet pool\n                  format: uint32\n                Spec:\n                  $ref: '#/components/schemas/SwarmSpec'\n              example:\n                ListenAddr: 0.0.0.0:2377\n                AdvertiseAddr: 192.168.1.1:2377\n                DataPathPort: 4789\n                DefaultAddrPool:\n                  - 10.10.0.0/8\n                  - 20.20.0.0/8\n                SubnetSize: 24\n                ForceNewCluster: false\n                Spec:\n                  Orchestration: {}\n                  Raft: {}\n                  Dispatcher: {}\n                  CAConfig: {}\n                  EncryptionConfig:\n                    AutoLockManagers: false\n        required: true\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                type: string\n                description: The node ID\n                example: 7v2t30z9blmxuhnyo6s4cpenp\n            text/plain:\n              schema:\n                type: string\n                description: The node ID\n                example: 7v2t30z9blmxuhnyo6s4cpenp\n        400:\n          description: bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is already part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /swarm/join:\n    post:\n      tags:\n        - Swarm\n      summary: Join an existing swarm\n      operationId: SwarmJoin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ListenAddr:\n                  type: string\n                  description: Listen address used for inter-manager communication\n                    if the node gets promoted to manager, as well as determining the\n                    networking interface used for the VXLAN Tunnel Endpoint (VTEP).\n                AdvertiseAddr:\n                  type: string\n                  description: Externally reachable address advertised to other nodes.\n                    This can either be an address/port combination in the form `192.168.1.1:4567`,\n                    or an interface followed by a port number, like `eth0:4567`. If\n                    the port number is omitted, the port number from the listen address\n                    is used. If `AdvertiseAddr` is not specified, it will be automatically\n                    detected when possible.\n                DataPathAddr:\n                  type: string\n                  description: |\n                    Address or interface to use for data path traffic (format: `\u003cip|interface\u003e`), for example,  `192.168.1.1`,\n                    or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr`\n                    is used.\n\n                    The `DataPathAddr` specifies the address that global scope network drivers will publish towards other\n                    nodes in order to reach the containers running on this node. Using this parameter it is possible to\n                    separate the container data traffic from the management traffic of the cluster.\n                RemoteAddrs:\n                  type: array\n                  description: Addresses of manager nodes already participating in\n                    the swarm.\n                  items:\n                    type: string\n                JoinToken:\n                  type: string\n                  description: Secret token for joining this swarm.\n              example:\n                ListenAddr: 0.0.0.0:2377\n                AdvertiseAddr: 192.168.1.1:2377\n                RemoteAddrs:\n                  - node1:2377\n                JoinToken: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2\n          text/plain:\n            schema:\n              type: object\n              properties:\n                ListenAddr:\n                  type: string\n                  description: Listen address used for inter-manager communication\n                    if the node gets promoted to manager, as well as determining the\n                    networking interface used for the VXLAN Tunnel Endpoint (VTEP).\n                AdvertiseAddr:\n                  type: string\n                  description: Externally reachable address advertised to other nodes.\n                    This can either be an address/port combination in the form `192.168.1.1:4567`,\n                    or an interface followed by a port number, like `eth0:4567`. If\n                    the port number is omitted, the port number from the listen address\n                    is used. If `AdvertiseAddr` is not specified, it will be automatically\n                    detected when possible.\n                DataPathAddr:\n                  type: string\n                  description: |\n                    Address or interface to use for data path traffic (format: `\u003cip|interface\u003e`), for example,  `192.168.1.1`,\n                    or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr`\n                    is used.\n\n                    The `DataPathAddr` specifies the address that global scope network drivers will publish towards other\n                    nodes in order to reach the containers running on this node. Using this parameter it is possible to\n                    separate the container data traffic from the management traffic of the cluster.\n                RemoteAddrs:\n                  type: array\n                  description: Addresses of manager nodes already participating in\n                    the swarm.\n                  items:\n                    type: string\n                JoinToken:\n                  type: string\n                  description: Secret token for joining this swarm.\n              example:\n                ListenAddr: 0.0.0.0:2377\n                AdvertiseAddr: 192.168.1.1:2377\n                RemoteAddrs:\n                  - node1:2377\n                JoinToken: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2\n        required: true\n      responses:\n        200:\n          description: no error\n          content: {}\n        400:\n          description: bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is already part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /swarm/leave:\n    post:\n      tags:\n        - Swarm\n      summary: Leave a swarm\n      operationId: SwarmLeave\n      parameters:\n        - name: force\n          in: query\n          description: Force leave swarm, even if this is the last manager or that it\n            will break the cluster.\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: no error\n          content: {}\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /swarm/update:\n    post:\n      tags:\n        - Swarm\n      summary: Update a swarm\n      operationId: SwarmUpdate\n      parameters:\n        - name: version\n          in: query\n          description: The version number of the swarm object being updated. This is\n            required to avoid conflicting writes.\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: rotateWorkerToken\n          in: query\n          description: Rotate the worker join token.\n          schema:\n            type: boolean\n            default: false\n        - name: rotateManagerToken\n          in: query\n          description: Rotate the manager join token.\n          schema:\n            type: boolean\n            default: false\n        - name: rotateManagerUnlockKey\n          in: query\n          description: Rotate the manager unlock key.\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SwarmSpec'\n          text/plain:\n            schema:\n              $ref: '#/components/schemas/SwarmSpec'\n        required: true\n      responses:\n        200:\n          description: no error\n          content: {}\n        400:\n          description: bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /swarm/unlockkey:\n    get:\n      tags:\n        - Swarm\n      summary: Get the unlock key\n      operationId: SwarmUnlockkey\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                title: UnlockKeyResponse\n                type: object\n                properties:\n                  UnlockKey:\n                    type: string\n                    description: The swarm's unlock key.\n                example:\n                  UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8\n            text/plain:\n              schema:\n                title: UnlockKeyResponse\n                type: object\n                properties:\n                  UnlockKey:\n                    type: string\n                    description: The swarm's unlock key.\n                example:\n                  UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /swarm/unlock:\n    post:\n      tags:\n        - Swarm\n      summary: Unlock a locked manager\n      operationId: SwarmUnlock\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                UnlockKey:\n                  type: string\n                  description: The swarm's unlock key.\n              example:\n                UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8\n        required: true\n      responses:\n        200:\n          description: no error\n          content: {}\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /services:\n    get:\n      tags:\n        - Service\n      summary: List services\n      operationId: ServiceList\n      parameters:\n        - name: filters\n          in: query\n          description: |\n            A JSON encoded value of the filters (a `map[string][]string`) to process on the services list. Available filters:\n\n            - `id=\u003cservice id\u003e`\n            - `label=\u003cservice label\u003e`\n            - `mode=[\"replicated\"|\"global\"]`\n            - `name=\u003cservice name\u003e`\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Service'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Service'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /services/create:\n    post:\n      tags:\n        - Service\n      summary: Create a service\n      operationId: ServiceCreate\n      parameters:\n        - name: X-Registry-Auth\n          in: header\n          description: A base64-encoded auth configuration for pulling from private\n            registries. [See the authentication section for details.](#section/Authentication)\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/ServiceSpec'\n                - type: object\n                  example:\n                    Name: web\n                    TaskTemplate:\n                      ContainerSpec:\n                        Image: nginx:alpine\n                        Mounts:\n                          - ReadOnly: true\n                            Source: web-data\n                            Target: /usr/share/nginx/html\n                            Type: volume\n                            VolumeOptions:\n                              DriverConfig: {}\n                              Labels:\n                                com.example.something: something-value\n                        Hosts:\n                          - 10.10.10.10 host1\n                          - ABCD:EF01:2345:6789:ABCD:EF01:2345:6789 host2\n                        User: \"33\"\n                        DNSConfig:\n                          Nameservers:\n                            - 8.8.8.8\n                          Search:\n                            - example.org\n                          Options:\n                            - timeout:3\n                        Secrets:\n                          - File:\n                              Name: www.example.org.key\n                              UID: \"33\"\n                              GID: \"33\"\n                              Mode: 384\n                            SecretID: fpjqlhnwb19zds35k8wn80lq9\n                            SecretName: example_org_domain_key\n                      LogDriver:\n                        Name: json-file\n                        Options:\n                          max-file: \"3\"\n                          max-size: 10M\n                      Placement: {}\n                      Resources:\n                        Limits:\n                          MemoryBytes: 104857600\n                        Reservations: {}\n                      RestartPolicy:\n                        Condition: on-failure\n                        Delay: 10000000000\n                        MaxAttempts: 10\n                    Mode:\n                      Replicated:\n                        Replicas: 4\n                    UpdateConfig:\n                      Parallelism: 2\n                      Delay: 1000000000\n                      FailureAction: pause\n                      Monitor: 15000000000\n                      MaxFailureRatio: 0.15\n                    RollbackConfig:\n                      Parallelism: 1\n                      Delay: 1000000000\n                      FailureAction: pause\n                      Monitor: 15000000000\n                      MaxFailureRatio: 0.15\n                    EndpointSpec:\n                      Ports:\n                        - Protocol: tcp\n                          PublishedPort: 8080\n                          TargetPort: 80\n                    Labels:\n                      foo: bar\n        required: true\n      responses:\n        201:\n          description: no error\n          content:\n            application/json:\n              schema:\n                title: ServiceCreateResponse\n                type: object\n                properties:\n                  ID:\n                    type: string\n                    description: The ID of the created service.\n                  Warning:\n                    type: string\n                    description: Optional warning message\n                example:\n                  ID: ak7w3gjqoa3kuz8xcpnyy0pvl\n                  Warning: 'unable to pin image doesnotexist:latest to digest: image\n                    library/doesnotexist:latest not found'\n        400:\n          description: bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        403:\n          description: network is not eligible for services\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        409:\n          description: name conflicts with an existing service\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /services/{id}:\n    get:\n      tags:\n        - Service\n      summary: Inspect a service\n      operationId: ServiceInspect\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of service.\n          required: true\n          schema:\n            type: string\n        - name: insertDefaults\n          in: query\n          description: Fill empty fields with default values.\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Service'\n        404:\n          description: no such service\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      tags:\n        - Service\n      summary: Delete a service\n      operationId: ServiceDelete\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of service.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content: {}\n        404:\n          description: no such service\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /services/{id}/update:\n    post:\n      tags:\n        - Service\n      summary: Update a service\n      operationId: ServiceUpdate\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of service.\n          required: true\n          schema:\n            type: string\n        - name: version\n          in: query\n          description: The version number of the service object being updated. This\n            is required to avoid conflicting writes. This version number should be the\n            value as currently set on the service *before* the update. You can find\n            the current version by calling `GET /services/{id}`\n          required: true\n          schema:\n            type: integer\n        - name: registryAuthFrom\n          in: query\n          description: |\n            If the `X-Registry-Auth` header is not specified, this parameter\n            indicates where to find registry authorization credentials.\n          schema:\n            type: string\n            default: spec\n            enum:\n              - spec\n              - previous-spec\n        - name: rollback\n          in: query\n          description: |\n            Set to this parameter to `previous` to cause a server-side rollback\n            to the previous service spec. The supplied spec will be ignored in\n            this case.\n          schema:\n            type: string\n        - name: X-Registry-Auth\n          in: header\n          description: A base64-encoded auth configuration for pulling from private\n            registries. [See the authentication section for details.](#section/Authentication)\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/ServiceSpec'\n                - type: object\n                  example:\n                    Name: top\n                    TaskTemplate:\n                      ContainerSpec:\n                        Image: busybox\n                        Args:\n                          - top\n                      Resources:\n                        Limits: {}\n                        Reservations: {}\n                      RestartPolicy:\n                        Condition: any\n                        MaxAttempts: 0\n                      Placement: {}\n                      ForceUpdate: 0\n                    Mode:\n                      Replicated:\n                        Replicas: 1\n                    UpdateConfig:\n                      Parallelism: 2\n                      Delay: 1000000000\n                      FailureAction: pause\n                      Monitor: 15000000000\n                      MaxFailureRatio: 0.15\n                    RollbackConfig:\n                      Parallelism: 1\n                      Delay: 1000000000\n                      FailureAction: pause\n                      Monitor: 15000000000\n                      MaxFailureRatio: 0.15\n                    EndpointSpec:\n                      Mode: vip\n        required: true\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceUpdateResponse'\n        400:\n          description: bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: no such service\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /services/{id}/logs:\n    get:\n      tags:\n        - Service\n      summary: Get service logs\n      description: |\n        Get `stdout` and `stderr` logs from a service. See also [`/containers/{id}/logs`](#operation/ContainerLogs).\n\n        **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers.\n      operationId: ServiceLogs\n      parameters:\n        - name: id\n          in: path\n          description: ID or name of the service\n          required: true\n          schema:\n            type: string\n        - name: details\n          in: query\n          description: Show service context and extra details provided to logs.\n          schema:\n            type: boolean\n            default: false\n        - name: follow\n          in: query\n          description: Keep connection after returning logs.\n          schema:\n            type: boolean\n            default: false\n        - name: stdout\n          in: query\n          description: Return logs from `stdout`\n          schema:\n            type: boolean\n            default: false\n        - name: stderr\n          in: query\n          description: Return logs from `stderr`\n          schema:\n            type: boolean\n            default: false\n        - name: since\n          in: query\n          description: Only return logs since this time, as a UNIX timestamp\n          schema:\n            type: integer\n            default: 0\n        - name: timestamps\n          in: query\n          description: Add timestamps to every log line\n          schema:\n            type: boolean\n            default: false\n        - name: tail\n          in: query\n          description: Only return this number of log lines from the end of the logs.\n            Specify as an integer or `all` to output all log lines.\n          schema:\n            type: string\n            default: all\n      responses:\n        200:\n          description: logs returned as a stream in response body\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n            text/plain:\n              schema:\n                type: string\n                format: binary\n        404:\n          description: no such service\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such service: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /tasks:\n    get:\n      tags:\n        - Task\n      summary: List tasks\n      operationId: TaskList\n      parameters:\n        - name: filters\n          in: query\n          description: |\n            A JSON encoded value of the filters (a `map[string][]string`) to process on the tasks list. Available filters:\n\n            - `desired-state=(running | shutdown | accepted)`\n            - `id=\u003ctask id\u003e`\n            - `label=key` or `label=\"key=value\"`\n            - `name=\u003ctask name\u003e`\n            - `node=\u003cnode id or name\u003e`\n            - `service=\u003cservice name\u003e`\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                type: array\n                example:\n                  - ID: 0kzzo1i0y4jz6027t0k7aezc7\n                    Version:\n                      Index: 71\n                    CreatedAt: 2016-06-07\n                    UpdatedAt: 2016-06-07\n                    Spec:\n                      ContainerSpec:\n                        Image: redis\n                      Resources:\n                        Limits: {}\n                        Reservations: {}\n                      RestartPolicy:\n                        Condition: any\n                        MaxAttempts: 0\n                      Placement: {}\n                    ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz\n                    Slot: 1\n                    NodeID: 60gvrl6tm78dmak4yl7srz94v\n                    Status:\n                      Timestamp: 2016-06-07\n                      State: running\n                      Message: started\n                      ContainerStatus:\n                        ContainerID: e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035\n                        PID: 677\n                    DesiredState: running\n                    NetworksAttachments:\n                      - Network:\n                          ID: 4qvuz4ko70xaltuqbt8956gd1\n                          Version:\n                            Index: 18\n                          CreatedAt: 2016-06-07\n                          UpdatedAt: 2016-06-07\n                          Spec:\n                            Name: ingress\n                            Labels:\n                              com.docker.swarm.internal: \"true\"\n                            DriverConfiguration: {}\n                            IPAMOptions:\n                              Driver: {}\n                              Configs:\n                                - Subnet: 10.255.0.0/16\n                                  Gateway: 10.255.0.1\n                          DriverState:\n                            Name: overlay\n                            Options:\n                              com.docker.network.driver.overlay.vxlanid_list: \"256\"\n                          IPAMOptions:\n                            Driver:\n                              Name: default\n                            Configs:\n                              - Subnet: 10.255.0.0/16\n                                Gateway: 10.255.0.1\n                        Addresses:\n                          - 10.255.0.10/16\n                  - ID: 1yljwbmlr8er2waf8orvqpwms\n                    Version:\n                      Index: 30\n                    CreatedAt: 2016-06-07\n                    UpdatedAt: 2016-06-07\n                    Name: hopeful_cori\n                    Spec:\n                      ContainerSpec:\n                        Image: redis\n                      Resources:\n                        Limits: {}\n                        Reservations: {}\n                      RestartPolicy:\n                        Condition: any\n                        MaxAttempts: 0\n                      Placement: {}\n                    ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz\n                    Slot: 1\n                    NodeID: 60gvrl6tm78dmak4yl7srz94v\n                    Status:\n                      Timestamp: 2016-06-07\n                      State: shutdown\n                      Message: shutdown\n                      ContainerStatus:\n                        ContainerID: 1cf8d63d18e79668b0004a4be4c6ee58cddfad2dae29506d8781581d0688a213\n                    DesiredState: shutdown\n                    NetworksAttachments:\n                      - Network:\n                          ID: 4qvuz4ko70xaltuqbt8956gd1\n                          Version:\n                            Index: 18\n                          CreatedAt: 2016-06-07\n                          UpdatedAt: 2016-06-07\n                          Spec:\n                            Name: ingress\n                            Labels:\n                              com.docker.swarm.internal: \"true\"\n                            DriverConfiguration: {}\n                            IPAMOptions:\n                              Driver: {}\n                              Configs:\n                                - Subnet: 10.255.0.0/16\n                                  Gateway: 10.255.0.1\n                          DriverState:\n                            Name: overlay\n                            Options:\n                              com.docker.network.driver.overlay.vxlanid_list: \"256\"\n                          IPAMOptions:\n                            Driver:\n                              Name: default\n                            Configs:\n                              - Subnet: 10.255.0.0/16\n                                Gateway: 10.255.0.1\n                        Addresses:\n                          - 10.255.0.5/16\n                items:\n                  $ref: '#/components/schemas/Task'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /tasks/{id}:\n    get:\n      tags:\n        - Task\n      summary: Inspect a task\n      operationId: TaskInspect\n      parameters:\n        - name: id\n          in: path\n          description: ID of the task\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n        404:\n          description: no such task\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /tasks/{id}/logs:\n    get:\n      tags:\n        - Task\n      summary: Get task logs\n      description: |\n        Get `stdout` and `stderr` logs from a task. See also [`/containers/{id}/logs`](#operation/ContainerLogs).\n\n        **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers.\n      operationId: TaskLogs\n      parameters:\n        - name: id\n          in: path\n          description: ID of the task\n          required: true\n          schema:\n            type: string\n        - name: details\n          in: query\n          description: Show task context and extra details provided to logs.\n          schema:\n            type: boolean\n            default: false\n        - name: follow\n          in: query\n          description: Keep connection after returning logs.\n          schema:\n            type: boolean\n            default: false\n        - name: stdout\n          in: query\n          description: Return logs from `stdout`\n          schema:\n            type: boolean\n            default: false\n        - name: stderr\n          in: query\n          description: Return logs from `stderr`\n          schema:\n            type: boolean\n            default: false\n        - name: since\n          in: query\n          description: Only return logs since this time, as a UNIX timestamp\n          schema:\n            type: integer\n            default: 0\n        - name: timestamps\n          in: query\n          description: Add timestamps to every log line\n          schema:\n            type: boolean\n            default: false\n        - name: tail\n          in: query\n          description: Only return this number of log lines from the end of the logs.\n            Specify as an integer or `all` to output all log lines.\n          schema:\n            type: string\n            default: all\n      responses:\n        200:\n          description: logs returned as a stream in response body\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n            text/plain:\n              schema:\n                type: string\n                format: binary\n        404:\n          description: no such task\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such task: c2ada9df5af8'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /secrets:\n    get:\n      tags:\n        - Secret\n      summary: List secrets\n      operationId: SecretList\n      parameters:\n        - name: filters\n          in: query\n          description: |\n            A JSON encoded value of the filters (a `map[string][]string`) to process on the secrets list. Available filters:\n\n            - `id=\u003csecret id\u003e`\n            - `label=\u003ckey\u003e or label=\u003ckey\u003e=value`\n            - `name=\u003csecret name\u003e`\n            - `names=\u003csecret name\u003e`\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                type: array\n                example:\n                  - ID: blt1owaxmitz71s9v5zh81zun\n                    Version:\n                      Index: 85\n                    CreatedAt: 2017-07-20\n                    UpdatedAt: 2017-07-20\n                    Spec:\n                      Name: mysql-passwd\n                      Labels:\n                        some.label: some.value\n                      Driver:\n                        Name: secret-bucket\n                        Options:\n                          OptionA: value for driver option A\n                          OptionB: value for driver option B\n                  - ID: ktnbjxoalbkvbvedmg1urrz8h\n                    Version:\n                      Index: 11\n                    CreatedAt: 2016-11-05\n                    UpdatedAt: 2016-11-05\n                    Spec:\n                      Name: app-dev.crt\n                      Labels:\n                        foo: bar\n                items:\n                  $ref: '#/components/schemas/Secret'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /secrets/create:\n    post:\n      tags:\n        - Secret\n      summary: Create a secret\n      operationId: SecretCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/SecretSpec'\n                - type: object\n                  example:\n                    Name: app-key.crt\n                    Labels:\n                      foo: bar\n                    Data: VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==\n                    Driver:\n                      Name: secret-bucket\n                      Options:\n                        OptionA: value for driver option A\n                        OptionB: value for driver option B\n        required: false\n      responses:\n        201:\n          description: no error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdResponse'\n        409:\n          description: name conflicts with an existing object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /secrets/{id}:\n    get:\n      tags:\n        - Secret\n      summary: Inspect a secret\n      operationId: SecretInspect\n      parameters:\n        - name: id\n          in: path\n          description: ID of the secret\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Secret'\n              example:\n                ID: ktnbjxoalbkvbvedmg1urrz8h\n                Version:\n                  Index: 11\n                CreatedAt: 2016-11-05\n                UpdatedAt: 2016-11-05\n                Spec:\n                  Name: app-dev.crt\n                  Labels:\n                    foo: bar\n                  Driver:\n                    Name: secret-bucket\n                    Options:\n                      OptionA: value for driver option A\n                      OptionB: value for driver option B\n        404:\n          description: secret not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      tags:\n        - Secret\n      summary: Delete a secret\n      operationId: SecretDelete\n      parameters:\n        - name: id\n          in: path\n          description: ID of the secret\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: no error\n          content: {}\n        404:\n          description: secret not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /secrets/{id}/update:\n    post:\n      tags:\n        - Secret\n      summary: Update a Secret\n      operationId: SecretUpdate\n      parameters:\n        - name: id\n          in: path\n          description: The ID or name of the secret\n          required: true\n          schema:\n            type: string\n        - name: version\n          in: query\n          description: The version number of the secret object being updated. This is\n            required to avoid conflicting writes.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        description: The spec of the secret to update. Currently, only the Labels\n          field can be updated. All other fields must remain unchanged from the [SecretInspect\n          endpoint](#operation/SecretInspect) response values.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SecretSpec'\n          text/plain:\n            schema:\n              $ref: '#/components/schemas/SecretSpec'\n        required: false\n      responses:\n        200:\n          description: no error\n          content: {}\n        400:\n          description: bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: no such secret\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /configs:\n    get:\n      tags:\n        - Config\n      summary: List configs\n      operationId: ConfigList\n      parameters:\n        - name: filters\n          in: query\n          description: |\n            A JSON encoded value of the filters (a `map[string][]string`) to process on the configs list. Available filters:\n\n            - `id=\u003cconfig id\u003e`\n            - `label=\u003ckey\u003e or label=\u003ckey\u003e=value`\n            - `name=\u003cconfig name\u003e`\n            - `names=\u003cconfig name\u003e`\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                type: array\n                example:\n                  - ID: ktnbjxoalbkvbvedmg1urrz8h\n                    Version:\n                      Index: 11\n                    CreatedAt: 2016-11-05\n                    UpdatedAt: 2016-11-05\n                    Spec:\n                      Name: server.conf\n                items:\n                  $ref: '#/components/schemas/Config'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /configs/create:\n    post:\n      tags:\n        - Config\n      summary: Create a config\n      operationId: ConfigCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/ConfigSpec'\n                - type: object\n                  example:\n                    Name: server.conf\n                    Labels:\n                      foo: bar\n                    Data: VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==\n        required: false\n      responses:\n        201:\n          description: no error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdResponse'\n        409:\n          description: name conflicts with an existing object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /configs/{id}:\n    get:\n      tags:\n        - Config\n      summary: Inspect a config\n      operationId: ConfigInspect\n      parameters:\n        - name: id\n          in: path\n          description: ID of the config\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: no error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Config'\n              example:\n                ID: ktnbjxoalbkvbvedmg1urrz8h\n                Version:\n                  Index: 11\n                CreatedAt: 2016-11-05\n                UpdatedAt: 2016-11-05\n                Spec:\n                  Name: app-dev.crt\n        404:\n          description: config not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    delete:\n      tags:\n        - Config\n      summary: Delete a config\n      operationId: ConfigDelete\n      parameters:\n        - name: id\n          in: path\n          description: ID of the config\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: no error\n          content: {}\n        404:\n          description: config not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /configs/{id}/update:\n    post:\n      tags:\n        - Config\n      summary: Update a Config\n      operationId: ConfigUpdate\n      parameters:\n        - name: id\n          in: path\n          description: The ID or name of the config\n          required: true\n          schema:\n            type: string\n        - name: version\n          in: query\n          description: The version number of the config object being updated. This is\n            required to avoid conflicting writes.\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        description: The spec of the config to update. Currently, only the Labels\n          field can be updated. All other fields must remain unchanged from the [ConfigInspect\n          endpoint](#operation/ConfigInspect) response values.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigSpec'\n          text/plain:\n            schema:\n              $ref: '#/components/schemas/ConfigSpec'\n        required: false\n      responses:\n        200:\n          description: no error\n          content: {}\n        400:\n          description: bad parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: no such config\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        503:\n          description: node is not part of a swarm\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-codegen-request-body-name: body\n  /distribution/{name}/json:\n    get:\n      tags:\n        - Distribution\n      summary: Get image information from the registry\n      description: Return image digest and platform information by contacting the\n        registry.\n      operationId: DistributionInspect\n      parameters:\n        - name: name\n          in: path\n          description: Image name or id\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: descriptor and platform information\n          content:\n            application/json:\n              schema:\n                title: DistributionInspectResponse\n                required:\n                  - Descriptor\n                  - Platforms\n                type: object\n                properties:\n                  Descriptor:\n                    type: object\n                    properties:\n                      MediaType:\n                        type: string\n                      Size:\n                        type: integer\n                        format: int64\n                      Digest:\n                        type: string\n                      URLs:\n                        type: array\n                        items:\n                          type: string\n                    description: A descriptor struct containing digest, media type,\n                      and size\n                  Platforms:\n                    type: array\n                    description: An array containing all platforms supported by the\n                      image\n                    items:\n                      type: object\n                      properties:\n                        Architecture:\n                          type: string\n                        OS:\n                          type: string\n                        OSVersion:\n                          type: string\n                        OSFeatures:\n                          type: array\n                          items:\n                            type: string\n                        Variant:\n                          type: string\n                        Features:\n                          type: array\n                          items:\n                            type: string\n                x-go-name: DistributionInspect\n              example:\n                Descriptor:\n                  MediaType: application/vnd.docker.distribution.manifest.v2+json\n                  Digest: sha256:c0537ff6a5218ef531ece93d4984efc99bbf3f7497c0a7726c88e2bb7584dc96\n                  Size: 3987495\n                  URLs:\n                    - \"\"\n                Platforms:\n                  - Architecture: amd64\n                    OS: linux\n                    OSVersion: \"\"\n                    OSFeatures:\n                      - \"\"\n                    Variant: \"\"\n                    Features:\n                      - \"\"\n        401:\n          description: Failed authentication or no image found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n              example:\n                message: 'No such image: someimage (tag: latest)'\n        500:\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /session:\n    post:\n      tags:\n        - Session\n      summary: Initialize interactive session\n      description: |\n        Start a new interactive session with a server. Session allows server to call back to the client for advanced capabilities.\n\n        ### Hijacking\n\n        This endpoint hijacks the HTTP connection to HTTP2 transport that allows the client to expose gPRC services on that connection.\n\n        For example, the client sends this request to upgrade the connection:\n\n        ```\n        POST /session HTTP/1.1\n        Upgrade: h2c\n        Connection: Upgrade\n        ```\n\n        The Docker daemon will respond with a `101 UPGRADED` response follow with the raw stream:\n\n        ```\n        HTTP/1.1 101 UPGRADED\n        Connection: Upgrade\n        Upgrade: h2c\n        ```\n      operationId: Session\n      responses:\n        101:\n          description: no error, hijacking successful\n          content: {}\n        400:\n          description: bad parameter\n          content:\n            application/vnd.docker.raw-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: server error\n          content:\n            application/vnd.docker.raw-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\ncomponents:\n  schemas:\n    Port:\n      required:\n        - PrivatePort\n        - Type\n      type: object\n      properties:\n        IP:\n          type: string\n          description: Host IP address that the container's port is mapped to\n          format: ip-address\n        PrivatePort:\n          type: integer\n          description: Port on the container\n          format: uint16\n          nullable: false\n        PublicPort:\n          type: integer\n          description: Port exposed on the host\n          format: uint16\n        Type:\n          type: string\n          nullable: false\n          enum:\n            - tcp\n            - udp\n            - sctp\n      description: An open port on a container\n      example:\n        PrivatePort: 8080\n        PublicPort: 80\n        Type: tcp\n    MountPoint:\n      type: object\n      properties:\n        Type:\n          type: string\n        Name:\n          type: string\n        Source:\n          type: string\n        Destination:\n          type: string\n        Driver:\n          type: string\n        Mode:\n          type: string\n        RW:\n          type: boolean\n        Propagation:\n          type: string\n      description: A mount point inside a container\n    DeviceMapping:\n      type: object\n      properties:\n        PathOnHost:\n          type: string\n        PathInContainer:\n          type: string\n        CgroupPermissions:\n          type: string\n      description: A device mapping between the host and container\n      example:\n        PathOnHost: /dev/deviceName\n        PathInContainer: /dev/deviceName\n        CgroupPermissions: mrw\n    DeviceRequest:\n      type: object\n      properties:\n        Driver:\n          type: string\n          example: nvidia\n        Count:\n          type: integer\n          example: -1\n        DeviceIDs:\n          type: array\n          example:\n            - \"0\"\n            - \"1\"\n            - GPU-fef8089b-4820-abfc-e83e-94318197576e\n          items:\n            type: string\n        Capabilities:\n          type: array\n          description: |\n            A list of capabilities; an OR list of AND lists of capabilities.\n          example:\n            - - gpu\n              - nvidia\n              - compute\n          items:\n            type: array\n            items:\n              type: string\n        Options:\n          type: object\n          additionalProperties:\n            type: string\n          description: |\n            Driver-specific options, specified as a key/value pairs. These options\n            are passed directly to the driver.\n      description: A request for devices to be sent to device drivers\n    ThrottleDevice:\n      type: object\n      properties:\n        Path:\n          type: string\n          description: Device path\n        Rate:\n          minimum: 0\n          type: integer\n          description: Rate\n          format: int64\n    Mount:\n      type: object\n      properties:\n        Target:\n          type: string\n          description: Container path.\n        Source:\n          type: string\n          description: Mount source (e.g. a volume name, a host path).\n        Type:\n          type: string\n          description: |\n            The mount type. Available types:\n\n            - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.\n            - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.\n            - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.\n            - `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container.\n          enum:\n            - bind\n            - volume\n            - tmpfs\n            - npipe\n        ReadOnly:\n          type: boolean\n          description: Whether the mount should be read-only.\n        Consistency:\n          type: string\n          description: 'The consistency requirement for the mount: `default`, `consistent`,\n            `cached`, or `delegated`.'\n        BindOptions:\n          type: object\n          properties:\n            Propagation:\n              type: string\n              description: A propagation mode with the value `[r]private`, `[r]shared`,\n                or `[r]slave`.\n              enum:\n                - private\n                - rprivate\n                - shared\n                - rshared\n                - slave\n                - rslave\n            NonRecursive:\n              type: boolean\n              description: Disable recursive bind mount.\n              default: false\n          description: Optional configuration for the `bind` type.\n        VolumeOptions:\n          type: object\n          properties:\n            NoCopy:\n              type: boolean\n              description: Populate volume with data from the target.\n              default: false\n            Labels:\n              type: object\n              additionalProperties:\n                type: string\n              description: User-defined key/value metadata.\n            DriverConfig:\n              type: object\n              properties:\n                Name:\n                  type: string\n                  description: Name of the driver to use to create the volume.\n                Options:\n                  type: object\n                  additionalProperties:\n                    type: string\n                  description: key/value map of driver specific options.\n              description: Map of driver specific options\n          description: Optional configuration for the `volume` type.\n        TmpfsOptions:\n          type: object\n          properties:\n            SizeBytes:\n              type: integer\n              description: The size for the tmpfs mount in bytes.\n              format: int64\n            Mode:\n              type: integer\n              description: The permission mode for the tmpfs mount in an integer.\n          description: Optional configuration for the `tmpfs` type.\n    RestartPolicy:\n      type: object\n      properties:\n        Name:\n          type: string\n          description: |\n            - Empty string means not to restart\n            - `always` Always restart\n            - `unless-stopped` Restart always except when the user has manually stopped the container\n            - `on-failure` Restart only when the container exit code is non-zero\n          enum:\n            - \"\"\n            - always\n            - unless-stopped\n            - on-failure\n        MaximumRetryCount:\n          type: integer\n          description: If `on-failure` is used, the number of times to retry before\n            giving up\n      description: |\n        The behavior to apply when the container exits. The default is not to restart.\n\n        An ever increasing delay (double the previous delay, starting at 100ms) is added before each restart to prevent flooding the server.\n    Resources:\n      type: object\n      properties:\n        CpuShares:\n          type: integer\n          description: An integer value representing this container's relative CPU\n            weight versus other containers.\n        Memory:\n          type: integer\n          description: Memory limit in bytes.\n          format: int64\n          default: 0\n        CgroupParent:\n          type: string\n          description: Path to `cgroups` under which the container's `cgroup` is created.\n            If the path is not absolute, the path is considered to be relative to\n            the `cgroups` path of the init process. Cgroups are created if they do\n            not already exist.\n        BlkioWeight:\n          maximum: 1E+3\n          minimum: 0\n          type: integer\n          description: Block IO weight (relative weight).\n        BlkioWeightDevice:\n          type: array\n          description: |\n            Block IO weight (relative device weight) in the form `[{\"Path\": \"device_path\", \"Weight\": weight}]`.\n          items:\n            type: object\n            properties:\n              Path:\n                type: string\n              Weight:\n                minimum: 0\n                type: integer\n        BlkioDeviceReadBps:\n          type: array\n          description: |\n            Limit read rate (bytes per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.\n          items:\n            $ref: '#/components/schemas/ThrottleDevice'\n        BlkioDeviceWriteBps:\n          type: array\n          description: |\n            Limit write rate (bytes per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.\n          items:\n            $ref: '#/components/schemas/ThrottleDevice'\n        BlkioDeviceReadIOps:\n          type: array\n          description: |\n            Limit read rate (IO per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.\n          items:\n            $ref: '#/components/schemas/ThrottleDevice'\n        BlkioDeviceWriteIOps:\n          type: array\n          description: |\n            Limit write rate (IO per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.\n          items:\n            $ref: '#/components/schemas/ThrottleDevice'\n        CpuPeriod:\n          type: integer\n          description: The length of a CPU period in microseconds.\n          format: int64\n        CpuQuota:\n          type: integer\n          description: Microseconds of CPU time that the container can get in a CPU\n            period.\n          format: int64\n        CpuRealtimePeriod:\n          type: integer\n          description: The length of a CPU real-time period in microseconds. Set to\n            0 to allocate no time allocated to real-time tasks.\n          format: int64\n        CpuRealtimeRuntime:\n          type: integer\n          description: The length of a CPU real-time runtime in microseconds. Set\n            to 0 to allocate no time allocated to real-time tasks.\n          format: int64\n        CpusetCpus:\n          type: string\n          description: CPUs in which to allow execution (e.g., `0-3`, `0,1`)\n          example: 0-3\n        CpusetMems:\n          type: string\n          description: Memory nodes (MEMs) in which to allow execution (0-3, 0,1).\n            Only effective on NUMA systems.\n        Devices:\n          type: array\n          description: A list of devices to add to the container.\n          items:\n            $ref: '#/components/schemas/DeviceMapping'\n        DeviceCgroupRules:\n          type: array\n          description: a list of cgroup rules to apply to the container\n          items:\n            type: string\n            example: c 13:* rwm\n        DeviceRequests:\n          type: array\n          description: a list of requests for devices to be sent to device drivers\n          items:\n            $ref: '#/components/schemas/DeviceRequest'\n        KernelMemory:\n          type: integer\n          description: Kernel memory limit in bytes.\n          format: int64\n          example: 209715200\n        KernelMemoryTCP:\n          type: integer\n          description: Hard limit for kernel TCP buffer memory (in bytes).\n          format: int64\n        MemoryReservation:\n          type: integer\n          description: Memory soft limit in bytes.\n          format: int64\n        MemorySwap:\n          type: integer\n          description: Total memory limit (memory + swap). Set as `-1` to enable unlimited\n            swap.\n          format: int64\n        MemorySwappiness:\n          maximum: 1E+2\n          minimum: 0\n          type: integer\n          description: Tune a container's memory swappiness behavior. Accepts an integer\n            between 0 and 100.\n          format: int64\n        NanoCPUs:\n          type: integer\n          description: CPU quota in units of 10\u003csup\u003e-9\u003c/sup\u003e CPUs.\n          format: int64\n        OomKillDisable:\n          type: boolean\n          description: Disable OOM Killer for the container.\n        Init:\n          type: boolean\n          description: Run an init inside the container that forwards signals and\n            reaps processes. This field is omitted if empty, and the default (as configured\n            on the daemon) is used.\n          nullable: true\n        PidsLimit:\n          type: integer\n          description: |\n            Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change.\n          format: int64\n          nullable: true\n        Ulimits:\n          type: array\n          description: |\n            A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\"\n          items:\n            type: object\n            properties:\n              Name:\n                type: string\n                description: Name of ulimit\n              Soft:\n                type: integer\n                description: Soft limit\n              Hard:\n                type: integer\n                description: Hard limit\n        CpuCount:\n          type: integer\n          description: |\n            The number of usable CPUs (Windows only).\n\n            On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.\n          format: int64\n        CpuPercent:\n          type: integer\n          description: |\n            The usable percentage of the available CPUs (Windows only).\n\n            On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.\n          format: int64\n        IOMaximumIOps:\n          type: integer\n          description: Maximum IOps for the container system drive (Windows only)\n          format: int64\n        IOMaximumBandwidth:\n          type: integer\n          description: Maximum IO in bytes per second for the container system drive\n            (Windows only)\n          format: int64\n      description: A container's resources (cgroups config, ulimits, etc)\n    ResourceObject:\n      type: object\n      properties:\n        NanoCPUs:\n          type: integer\n          format: int64\n          example: 4000000000\n        MemoryBytes:\n          type: integer\n          format: int64\n          example: 8272408576\n        GenericResources:\n          $ref: '#/components/schemas/GenericResources'\n      description: An object describing the resources which can be advertised by a\n        node and requested by a task\n    GenericResources:\n      type: array\n      description: User-defined resources can be either Integer resources (e.g, `SSD=3`)\n        or String resources (e.g, `GPU=UUID1`)\n      example:\n        - DiscreteResourceSpec:\n            Kind: SSD\n            Value: 3\n        - NamedResourceSpec:\n            Kind: GPU\n            Value: UUID1\n        - NamedResourceSpec:\n            Kind: GPU\n            Value: UUID2\n      items:\n        type: object\n        properties:\n          NamedResourceSpec:\n            type: object\n            properties:\n              Kind:\n                type: string\n              Value:\n                type: string\n          DiscreteResourceSpec:\n            type: object\n            properties:\n              Kind:\n                type: string\n              Value:\n                type: integer\n                format: int64\n    HealthConfig:\n      type: object\n      properties:\n        Test:\n          type: array\n          description: |\n            The test to perform. Possible values are:\n\n            - `[]` inherit healthcheck from image or parent image\n            - `[\"NONE\"]` disable healthcheck\n            - `[\"CMD\", args...]` exec arguments directly\n            - `[\"CMD-SHELL\", command]` run command with system's default shell\n          items:\n            type: string\n        Interval:\n          type: integer\n          description: The time to wait between checks in nanoseconds. It should be\n            0 or at least 1000000 (1 ms). 0 means inherit.\n        Timeout:\n          type: integer\n          description: The time to wait before considering the check to have hung.\n            It should be 0 or at least 1000000 (1 ms). 0 means inherit.\n        Retries:\n          type: integer\n          description: The number of consecutive failures needed to consider a container\n            as unhealthy. 0 means inherit.\n        StartPeriod:\n          type: integer\n          description: Start period for the container to initialize before starting\n            health-retries countdown in nanoseconds. It should be 0 or at least 1000000\n            (1 ms). 0 means inherit.\n      description: A test to perform to check that the container is healthy.\n    Health:\n      type: object\n      properties:\n        Status:\n          type: string\n          description: |\n            Status is one of `none`, `starting`, `healthy` or `unhealthy`\n\n            - \"none\"      Indicates there is no healthcheck\n            - \"starting\"  Starting indicates that the container is not yet ready\n            - \"healthy\"   Healthy indicates that the container is running correctly\n            - \"unhealthy\" Unhealthy indicates that the container has a problem\n          example: healthy\n          enum:\n            - none\n            - starting\n            - healthy\n            - unhealthy\n        FailingStreak:\n          type: integer\n          description: FailingStreak is the number of consecutive failures\n          example: 0\n        Log:\n          type: array\n          description: |\n            Log contains the last few results (oldest first)\n          items:\n            $ref: '#/components/schemas/HealthcheckResult'\n      description: |\n        Health stores information about the container's healthcheck results.\n    HealthcheckResult:\n      type: object\n      properties:\n        Start:\n          type: string\n          description: |\n            Date and time at which this check started in\n            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n          format: date-time\n          example: 2020-01-04\n        End:\n          type: string\n          description: |\n            Date and time at which this check ended in\n            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n          format: dateTime\n          example: 2020-01-04\n        ExitCode:\n          type: integer\n          description: |\n            ExitCode meanings:\n\n            - `0` healthy\n            - `1` unhealthy\n            - `2` reserved (considered unhealthy)\n            - other values: error running probe\n          example: 0\n        Output:\n          type: string\n          description: Output from last check\n      description: |\n        HealthcheckResult stores information about a single run of a healthcheck probe\n    HostConfig:\n      description: Container configuration that depends on the host we are running\n        on\n      allOf:\n        - $ref: '#/components/schemas/Resources'\n        - type: object\n          properties:\n            Binds:\n              type: array\n              description: |\n                A list of volume bindings for this container. Each volume binding\n                is a string in one of these forms:\n\n                - `host-src:container-dest[:options]` to bind-mount a host path\n                  into the container. Both `host-src`, and `container-dest` must\n                  be an _absolute_ path.\n                - `volume-name:container-dest[:options]` to bind-mount a volume\n                  managed by a volume driver into the container. `container-dest`\n                  must be an _absolute_ path.\n\n                `options` is an optional, comma-delimited list of:\n\n                - `nocopy` disables automatic copying of data from the container\n                  path to the volume. The `nocopy` flag only applies to named volumes.\n                - `[ro|rw]` mounts a volume read-only or read-write, respectively.\n                  If omitted or set to `rw`, volumes are mounted read-write.\n                - `[z|Z]` applies SELinux labels to allow or deny multiple containers\n                  to read and write to the same volume.\n                    - `z`: a _shared_ content label is applied to the content. This\n                      label indicates that multiple containers can share the volume\n                      content, for both reading and writing.\n                    - `Z`: a _private unshared_ label is applied to the content.\n                      This label indicates that only the current container can use\n                      a private volume. Labeling systems such as SELinux require\n                      proper labels to be placed on volume content that is mounted\n                      into a container. Without a label, the security system can\n                      prevent a container's processes from using the content. By\n                      default, the labels set by the host operating system are not\n                      modified.\n                - `[[r]shared|[r]slave|[r]private]` specifies mount\n                  [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).\n                  This only applies to bind-mounted volumes, not internal volumes\n                  or named volumes. Mount propagation requires the source mount\n                  point (the location where the source directory is mounted in the\n                  host operating system) to have the correct propagation properties.\n                  For shared volumes, the source mount point must be set to `shared`.\n                  For slave volumes, the mount must be set to either `shared` or\n                  `slave`.\n              items:\n                type: string\n            ContainerIDFile:\n              type: string\n              description: Path to a file where the container ID is written\n            LogConfig:\n              type: object\n              properties:\n                Type:\n                  type: string\n                  enum:\n                    - json-file\n                    - syslog\n                    - journald\n                    - gelf\n                    - fluentd\n                    - awslogs\n                    - splunk\n                    - etwlogs\n                    - none\n                Config:\n                  type: object\n                  additionalProperties:\n                    type: string\n              description: The logging configuration for this container\n            NetworkMode:\n              type: string\n              description: 'Network mode to use for this container. Supported standard\n              values are: `bridge`, `host`, `none`, and `container:\u003cname|id\u003e`. Any\n              other value is taken as a custom network''s name to which this container\n              should connect to.'\n            PortBindings:\n              $ref: '#/components/schemas/PortMap'\n            RestartPolicy:\n              $ref: '#/components/schemas/RestartPolicy'\n            AutoRemove:\n              type: boolean\n              description: Automatically remove the container when the container's process\n                exits. This has no effect if `RestartPolicy` is set.\n            VolumeDriver:\n              type: string\n              description: Driver that this container uses to mount volumes.\n            VolumesFrom:\n              type: array\n              description: A list of volumes to inherit from another container, specified\n                in the form `\u003ccontainer name\u003e[:\u003cro|rw\u003e]`.\n              items:\n                type: string\n            Mounts:\n              type: array\n              description: Specification for mounts to be added to the container.\n              items:\n                $ref: '#/components/schemas/Mount'\n            Capabilities:\n              type: array\n              description: |\n                A list of kernel capabilities to be available for container (this overrides the default set).\n\n                Conflicts with options 'CapAdd' and 'CapDrop'\"\n              items:\n                type: string\n            CapAdd:\n              type: array\n              description: A list of kernel capabilities to add to the container. Conflicts\n                with option 'Capabilities'\n              items:\n                type: string\n            CapDrop:\n              type: array\n              description: A list of kernel capabilities to drop from the container.\n                Conflicts with option 'Capabilities'\n              items:\n                type: string\n            Dns:\n              type: array\n              description: A list of DNS servers for the container to use.\n              items:\n                type: string\n            DnsOptions:\n              type: array\n              description: A list of DNS options.\n              items:\n                type: string\n            DnsSearch:\n              type: array\n              description: A list of DNS search domains.\n              items:\n                type: string\n            ExtraHosts:\n              type: array\n              description: |\n                A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`.\n              items:\n                type: string\n            GroupAdd:\n              type: array\n              description: A list of additional groups that the container process will\n                run as.\n              items:\n                type: string\n            IpcMode:\n              type: string\n              description: |\n                IPC sharing mode for the container. Possible values are:\n\n                - `\"none\"`: own private IPC namespace, with /dev/shm not mounted\n                - `\"private\"`: own private IPC namespace\n                - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers\n                - `\"container:\u003cname|id\u003e\"`: join another (shareable) container's IPC namespace\n                - `\"host\"`: use the host system's IPC namespace\n\n                If not specified, daemon default is used, which can either be `\"private\"`\n                or `\"shareable\"`, depending on daemon version and configuration.\n            Cgroup:\n              type: string\n              description: Cgroup to use for the container.\n            Links:\n              type: array\n              description: A list of links for the container in the form `container_name:alias`.\n              items:\n                type: string\n            OomScoreAdj:\n              type: integer\n              description: An integer value containing the score given to the container\n                in order to tune OOM killer preferences.\n              example: 500\n            PidMode:\n              type: string\n              description: |\n                Set the PID (Process) Namespace mode for the container. It can be either:\n\n                - `\"container:\u003cname|id\u003e\"`: joins another container's PID namespace\n                - `\"host\"`: use the host's PID namespace inside the container\n            Privileged:\n              type: boolean\n              description: Gives the container full access to the host.\n            PublishAllPorts:\n              type: boolean\n              description: |\n                Allocates an ephemeral host port for all of a container's\n                exposed ports.\n\n                Ports are de-allocated when the container stops and allocated when the container starts.\n                The allocated port might be changed when restarting the container.\n\n                The port is selected from the ephemeral port range that depends on the kernel.\n                For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`.\n            ReadonlyRootfs:\n              type: boolean\n              description: Mount the container's root filesystem as read only.\n            SecurityOpt:\n              type: array\n              description: A list of string values to customize labels for MLS systems,\n                such as SELinux.\n              items:\n                type: string\n            StorageOpt:\n              type: object\n              additionalProperties:\n                type: string\n              description: |\n                Storage driver options for this container, in the form `{\"size\": \"120G\"}`.\n            Tmpfs:\n              type: object\n              additionalProperties:\n                type: string\n              description: |\n                A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: `{ \"/run\": \"rw,noexec,nosuid,size=65536k\" }`.\n            UTSMode:\n              type: string\n              description: UTS namespace to use for the container.\n            UsernsMode:\n              type: string\n              description: Sets the usernamespace mode for the container when usernamespace\n                remapping option is enabled.\n            ShmSize:\n              minimum: 0\n              type: integer\n              description: Size of `/dev/shm` in bytes. If omitted, the system uses\n                64MB.\n            Sysctls:\n              type: object\n              additionalProperties:\n                type: string\n              description: |\n                A list of kernel parameters (sysctls) to set in the container. For example: `{\"net.ipv4.ip_forward\": \"1\"}`\n            Runtime:\n              type: string\n              description: Runtime to use with this container.\n            ConsoleSize:\n              maxItems: 2\n              minItems: 2\n              type: array\n              description: Initial console size, as an `[height, width]` array. (Windows\n                only)\n              items:\n                minimum: 0\n                type: integer\n            Isolation:\n              type: string\n              description: Isolation technology of the container. (Windows only)\n              enum:\n                - default\n                - process\n                - hyperv\n            MaskedPaths:\n              type: array\n              description: The list of paths to be masked inside the container (this\n                overrides the default set of paths)\n              items:\n                type: string\n            ReadonlyPaths:\n              type: array\n              description: The list of paths to be set as read-only inside the container\n                (this overrides the default set of paths)\n              items:\n                type: string\n    ContainerConfig:\n      type: object\n      properties:\n        Hostname:\n          type: string\n          description: The hostname to use for the container, as a valid RFC 1123\n            hostname.\n        Domainname:\n          type: string\n          description: The domain name to use for the container.\n        User:\n          type: string\n          description: The user that commands are run as inside the container.\n        AttachStdin:\n          type: boolean\n          description: Whether to attach to `stdin`.\n          default: false\n        AttachStdout:\n          type: boolean\n          description: Whether to attach to `stdout`.\n          default: true\n        AttachStderr:\n          type: boolean\n          description: Whether to attach to `stderr`.\n          default: true\n        ExposedPorts:\n          type: object\n          additionalProperties:\n            type: object\n            properties: {}\n          description: |\n            An object mapping ports to an empty object in the form:\n\n            `{\"\u003cport\u003e/\u003ctcp|udp|sctp\u003e\": {}}`\n        Tty:\n          type: boolean\n          description: Attach standard streams to a TTY, including `stdin` if it is\n            not closed.\n          default: false\n        OpenStdin:\n          type: boolean\n          description: Open `stdin`\n          default: false\n        StdinOnce:\n          type: boolean\n          description: Close `stdin` after one attached client disconnects\n          default: false\n        Env:\n          type: array\n          description: |\n            A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.\n          items:\n            type: string\n        Cmd:\n          type: array\n          description: Command to run specified as a string or an array of strings.\n          items:\n            type: string\n        Healthcheck:\n          $ref: '#/components/schemas/HealthConfig'\n        ArgsEscaped:\n          type: boolean\n          description: Command is already escaped (Windows only)\n        Image:\n          type: string\n          description: The name of the image to use when creating the container\n        Volumes:\n          type: object\n          additionalProperties:\n            type: object\n            properties: {}\n          description: An object mapping mount point paths inside the container to\n            empty objects.\n        WorkingDir:\n          type: string\n          description: The working directory for commands to run in.\n        Entrypoint:\n          type: array\n          description: |\n            The entry point for the container as a string or an array of strings.\n\n            If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).\n          items:\n            type: string\n        NetworkDisabled:\n          type: boolean\n          description: Disable networking for the container.\n        MacAddress:\n          type: string\n          description: MAC address of the container.\n        OnBuild:\n          type: array\n          description: '`ONBUILD` metadata that were defined in the image''s `Dockerfile`.'\n          items:\n            type: string\n        Labels:\n          type: object\n          additionalProperties:\n            type: string\n          description: User-defined key/value metadata.\n        StopSignal:\n          type: string\n          description: Signal to stop a container as a string or unsigned integer.\n          default: SIGTERM\n        StopTimeout:\n          type: integer\n          description: Timeout to stop a container in seconds.\n        Shell:\n          type: array\n          description: Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.\n          items:\n            type: string\n      description: Configuration for a container that is portable between hosts\n    NetworkSettings:\n      type: object\n      properties:\n        Bridge:\n          type: string\n          description: Name of the network'a bridge (for example, `docker0`).\n          example: docker0\n        SandboxID:\n          type: string\n          description: SandboxID uniquely represents a container's network stack.\n          example: 9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3\n        HairpinMode:\n          type: boolean\n          description: |\n            Indicates if hairpin NAT should be enabled on the virtual interface.\n          example: false\n        LinkLocalIPv6Address:\n          type: string\n          description: IPv6 unicast address using the link-local prefix.\n          example: fe80::42:acff:fe11:1\n        LinkLocalIPv6PrefixLen:\n          type: integer\n          description: Prefix length of the IPv6 unicast address.\n          example: 64\n        Ports:\n          $ref: '#/components/schemas/PortMap'\n        SandboxKey:\n          type: string\n          description: SandboxKey identifies the sandbox\n          example: /var/run/docker/netns/8ab54b426c38\n        SecondaryIPAddresses:\n          type: array\n          description: \"\"\n          nullable: true\n          items:\n            $ref: '#/components/schemas/Address'\n        SecondaryIPv6Addresses:\n          type: array\n          description: \"\"\n          nullable: true\n          items:\n            $ref: '#/components/schemas/Address'\n        EndpointID:\n          type: string\n          description: |\n            EndpointID uniquely represents a service endpoint in a Sandbox.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Deprecated**: This field is only propagated when attached to the\n            \u003e default \"bridge\" network. Use the information from the \"bridge\"\n            \u003e network inside the `Networks` map instead, which contains the same\n            \u003e information. This field was deprecated in Docker 1.9 and is scheduled\n            \u003e to be removed in Docker 17.12.0\n          example: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b\n        Gateway:\n          type: string\n          description: |\n            Gateway address for the default \"bridge\" network.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Deprecated**: This field is only propagated when attached to the\n            \u003e default \"bridge\" network. Use the information from the \"bridge\"\n            \u003e network inside the `Networks` map instead, which contains the same\n            \u003e information. This field was deprecated in Docker 1.9 and is scheduled\n            \u003e to be removed in Docker 17.12.0\n          example: 172.17.0.1\n        GlobalIPv6Address:\n          type: string\n          description: |\n            Global IPv6 address for the default \"bridge\" network.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Deprecated**: This field is only propagated when attached to the\n            \u003e default \"bridge\" network. Use the information from the \"bridge\"\n            \u003e network inside the `Networks` map instead, which contains the same\n            \u003e information. This field was deprecated in Docker 1.9 and is scheduled\n            \u003e to be removed in Docker 17.12.0\n          example: 2001:db8::5689\n        GlobalIPv6PrefixLen:\n          type: integer\n          description: |\n            Mask length of the global IPv6 address.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Deprecated**: This field is only propagated when attached to the\n            \u003e default \"bridge\" network. Use the information from the \"bridge\"\n            \u003e network inside the `Networks` map instead, which contains the same\n            \u003e information. This field was deprecated in Docker 1.9 and is scheduled\n            \u003e to be removed in Docker 17.12.0\n          example: 64\n        IPAddress:\n          type: string\n          description: |\n            IPv4 address for the default \"bridge\" network.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Deprecated**: This field is only propagated when attached to the\n            \u003e default \"bridge\" network. Use the information from the \"bridge\"\n            \u003e network inside the `Networks` map instead, which contains the same\n            \u003e information. This field was deprecated in Docker 1.9 and is scheduled\n            \u003e to be removed in Docker 17.12.0\n          example: 172.17.0.4\n        IPPrefixLen:\n          type: integer\n          description: |\n            Mask length of the IPv4 address.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Deprecated**: This field is only propagated when attached to the\n            \u003e default \"bridge\" network. Use the information from the \"bridge\"\n            \u003e network inside the `Networks` map instead, which contains the same\n            \u003e information. This field was deprecated in Docker 1.9 and is scheduled\n            \u003e to be removed in Docker 17.12.0\n          example: 16\n        IPv6Gateway:\n          type: string\n          description: |\n            IPv6 gateway address for this network.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Deprecated**: This field is only propagated when attached to the\n            \u003e default \"bridge\" network. Use the information from the \"bridge\"\n            \u003e network inside the `Networks` map instead, which contains the same\n            \u003e information. This field was deprecated in Docker 1.9 and is scheduled\n            \u003e to be removed in Docker 17.12.0\n          example: 2001:db8:2::100\n        MacAddress:\n          type: string\n          description: |\n            MAC address for the container on the default \"bridge\" network.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Deprecated**: This field is only propagated when attached to the\n            \u003e default \"bridge\" network. Use the information from the \"bridge\"\n            \u003e network inside the `Networks` map instead, which contains the same\n            \u003e information. This field was deprecated in Docker 1.9 and is scheduled\n            \u003e to be removed in Docker 17.12.0\n          example: 02:42:ac:11:00:04\n        Networks:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/EndpointSettings'\n          description: |\n            Information about all networks that the container is connected to.\n      description: NetworkSettings exposes the network settings in the API\n    Address:\n      type: object\n      properties:\n        Addr:\n          type: string\n          description: IP address.\n        PrefixLen:\n          type: integer\n          description: Mask length of the IP address.\n      description: Address represents an IPv4 or IPv6 IP address.\n    PortMap:\n      type: object\n      additionalProperties:\n        type: array\n        nullable: true\n        items:\n          $ref: '#/components/schemas/PortBinding'\n      description: |\n        PortMap describes the mapping of container ports to host ports, using the\n        container's port-number and protocol as key in the format `\u003cport\u003e/\u003cprotocol\u003e`,\n        for example, `80/udp`.\n\n        If a container's port is mapped for multiple protocols, separate entries\n        are added to the mapping table.\n      example:\n        443/tcp:\n          - HostIp: 127.0.0.1\n            HostPort: \"4443\"\n        80/tcp:\n          - HostIp: 0.0.0.0\n            HostPort: \"80\"\n          - HostIp: 0.0.0.0\n            HostPort: \"8080\"\n        80/udp:\n          - HostIp: 0.0.0.0\n            HostPort: \"80\"\n        53/udp:\n          - HostIp: 0.0.0.0\n            HostPort: \"53\"\n    PortBinding:\n      type: object\n      properties:\n        HostIp:\n          type: string\n          description: Host IP address that the container's port is mapped to.\n          example: 127.0.0.1\n        HostPort:\n          type: string\n          description: Host port number that the container's port is mapped to.\n          example: \"4443\"\n      description: |\n        PortBinding represents a binding between a host IP address and a host\n        port.\n    GraphDriverData:\n      required:\n        - Data\n        - Name\n      type: object\n      properties:\n        Name:\n          type: string\n          nullable: false\n        Data:\n          type: object\n          additionalProperties:\n            type: string\n          nullable: false\n      description: Information about a container's graph driver.\n    Image:\n      required:\n        - Architecture\n        - Author\n        - Comment\n        - Container\n        - Created\n        - DockerVersion\n        - GraphDriver\n        - Id\n        - Os\n        - Parent\n        - RootFS\n        - Size\n        - VirtualSize\n      type: object\n      properties:\n        Id:\n          type: string\n          nullable: false\n        RepoTags:\n          type: array\n          items:\n            type: string\n        RepoDigests:\n          type: array\n          items:\n            type: string\n        Parent:\n          type: string\n          nullable: false\n        Comment:\n          type: string\n          nullable: false\n        Created:\n          type: string\n          nullable: false\n        Container:\n          type: string\n          nullable: false\n        ContainerConfig:\n          $ref: '#/components/schemas/ContainerConfig'\n        DockerVersion:\n          type: string\n          nullable: false\n        Author:\n          type: string\n          nullable: false\n        Config:\n          $ref: '#/components/schemas/ContainerConfig'\n        Architecture:\n          type: string\n          nullable: false\n        Os:\n          type: string\n          nullable: false\n        OsVersion:\n          type: string\n        Size:\n          type: integer\n          format: int64\n          nullable: false\n        VirtualSize:\n          type: integer\n          format: int64\n          nullable: false\n        GraphDriver:\n          $ref: '#/components/schemas/GraphDriverData'\n        RootFS:\n          required:\n            - Type\n          type: object\n          properties:\n            Type:\n              type: string\n              nullable: false\n            Layers:\n              type: array\n              items:\n                type: string\n            BaseLayer:\n              type: string\n        Metadata:\n          type: object\n          properties:\n            LastTagTime:\n              type: string\n              format: dateTime\n    ImageSummary:\n      required:\n        - Containers\n        - Created\n        - Id\n        - Labels\n        - ParentId\n        - RepoDigests\n        - RepoTags\n        - SharedSize\n        - Size\n        - VirtualSize\n      type: object\n      properties:\n        Id:\n          type: string\n          nullable: false\n        ParentId:\n          type: string\n          nullable: false\n        RepoTags:\n          type: array\n          nullable: false\n          items:\n            type: string\n        RepoDigests:\n          type: array\n          nullable: false\n          items:\n            type: string\n        Created:\n          type: integer\n          nullable: false\n        Size:\n          type: integer\n          nullable: false\n        SharedSize:\n          type: integer\n          nullable: false\n        VirtualSize:\n          type: integer\n          nullable: false\n        Labels:\n          type: object\n          additionalProperties:\n            type: string\n          nullable: false\n        Containers:\n          type: integer\n          nullable: false\n    AuthConfig:\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n        email:\n          type: string\n        serveraddress:\n          type: string\n      example:\n        username: hannibal\n        password: xxxx\n        serveraddress: https://index.docker.io/v1/\n    ProcessConfig:\n      type: object\n      properties:\n        privileged:\n          type: boolean\n        user:\n          type: string\n        tty:\n          type: boolean\n        entrypoint:\n          type: string\n        arguments:\n          type: array\n          items:\n            type: string\n    Volume:\n      required:\n        - Driver\n        - Labels\n        - Mountpoint\n        - Name\n        - Options\n        - Scope\n      type: object\n      properties:\n        Name:\n          type: string\n          description: Name of the volume.\n          nullable: false\n        Driver:\n          type: string\n          description: Name of the volume driver used by the volume.\n          nullable: false\n        Mountpoint:\n          type: string\n          description: Mount path of the volume on the host.\n          nullable: false\n        CreatedAt:\n          type: string\n          description: Date/Time the volume was created.\n          format: dateTime\n        Status:\n          type: object\n          additionalProperties:\n            type: object\n            properties: {}\n          description: |\n            Low-level details about the volume, provided by the volume driver.\n            Details are returned as a map with key/value pairs:\n            `{\"key\":\"value\",\"key2\":\"value2\"}`.\n\n            The `Status` field is optional, and is omitted if the volume driver\n            does not support this feature.\n        Labels:\n          type: object\n          additionalProperties:\n            type: string\n          description: User-defined key/value metadata.\n          nullable: false\n        Scope:\n          type: string\n          description: The level at which the volume exists. Either `global` for cluster-wide,\n            or `local` for machine level.\n          nullable: false\n          default: local\n          enum:\n            - local\n            - global\n        Options:\n          type: object\n          additionalProperties:\n            type: string\n          description: The driver specific options used when creating the volume.\n        UsageData:\n          required:\n            - RefCount\n            - Size\n          type: object\n          properties:\n            Size:\n              type: integer\n              description: |\n                Amount of disk space used by the volume (in bytes). This information\n                is only available for volumes created with the `\"local\"` volume\n                driver. For volumes created with other volume drivers, this field\n                is set to `-1` (\"not available\")\n              nullable: false\n            RefCount:\n              type: integer\n              description: |\n                The number of containers referencing this volume. This field\n                is set to `-1` if the reference-count is not available.\n              nullable: false\n          description: |\n            Usage details about the volume. This information is used by the\n            `GET /system/df` endpoint, and omitted in other endpoints.\n          nullable: true\n      example:\n        Name: tardis\n        Driver: custom\n        Mountpoint: /var/lib/docker/volumes/tardis\n        Status:\n          hello: world\n        Labels:\n          com.example.some-label: some-value\n          com.example.some-other-label: some-other-value\n        Scope: local\n        CreatedAt: 2016-06-07\n    Network:\n      type: object\n      properties:\n        Name:\n          type: string\n        Id:\n          type: string\n        Created:\n          type: string\n          format: dateTime\n        Scope:\n          type: string\n        Driver:\n          type: string\n        EnableIPv6:\n          type: boolean\n        IPAM:\n          $ref: '#/components/schemas/IPAM'\n        Internal:\n          type: boolean\n        Attachable:\n          type: boolean\n        Ingress:\n          type: boolean\n        Containers:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/NetworkContainer'\n        Options:\n          type: object\n          additionalProperties:\n            type: string\n        Labels:\n          type: object\n          additionalProperties:\n            type: string\n      example:\n        Name: net01\n        Id: 7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99\n        Created: 2016-10-19\n        Scope: local\n        Driver: bridge\n        EnableIPv6: false\n        IPAM:\n          Driver: default\n          Config:\n            - Subnet: 172.19.0.0/16\n              Gateway: 172.19.0.1\n          Options:\n            foo: bar\n        Internal: false\n        Attachable: false\n        Ingress: false\n        Containers:\n          19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c:\n            Name: test\n            EndpointID: 628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a\n            MacAddress: 02:42:ac:13:00:02\n            IPv4Address: 172.19.0.2/16\n            IPv6Address: \"\"\n        Options:\n          com.docker.network.bridge.default_bridge: \"true\"\n          com.docker.network.bridge.enable_icc: \"true\"\n          com.docker.network.bridge.enable_ip_masquerade: \"true\"\n          com.docker.network.bridge.host_binding_ipv4: 0.0.0.0\n          com.docker.network.bridge.name: docker0\n          com.docker.network.driver.mtu: \"1500\"\n        Labels:\n          com.example.some-label: some-value\n          com.example.some-other-label: some-other-value\n    IPAM:\n      type: object\n      properties:\n        Driver:\n          type: string\n          description: Name of the IPAM driver to use.\n          default: default\n        Config:\n          type: array\n          description: 'List of IPAM configuration options, specified as a map: `{\"Subnet\":\n            \u003cCIDR\u003e, \"IPRange\": \u003cCIDR\u003e, \"Gateway\": \u003cIP address\u003e, \"AuxAddress\": \u003cdevice_name:IP\n            address\u003e}`'\n          items:\n            type: object\n            additionalProperties:\n              type: string\n        Options:\n          type: object\n          additionalProperties:\n            type: string\n          description: Driver-specific options, specified as a map.\n    NetworkContainer:\n      type: object\n      properties:\n        Name:\n          type: string\n        EndpointID:\n          type: string\n        MacAddress:\n          type: string\n        IPv4Address:\n          type: string\n        IPv6Address:\n          type: string\n    BuildInfo:\n      type: object\n      properties:\n        id:\n          type: string\n        stream:\n          type: string\n        error:\n          type: string\n        errorDetail:\n          $ref: '#/components/schemas/ErrorDetail'\n        status:\n          type: string\n        progress:\n          type: string\n        progressDetail:\n          $ref: '#/components/schemas/ProgressDetail'\n        aux:\n          $ref: '#/components/schemas/ImageID'\n    BuildCache:\n      type: object\n      properties:\n        ID:\n          type: string\n        Parent:\n          type: string\n        Type:\n          type: string\n        Description:\n          type: string\n        InUse:\n          type: boolean\n        Shared:\n          type: boolean\n        Size:\n          type: integer\n        CreatedAt:\n          type: integer\n        LastUsedAt:\n          type: integer\n          nullable: true\n        UsageCount:\n          type: integer\n    ImageID:\n      type: object\n      properties:\n        ID:\n          type: string\n      description: Image ID or Digest\n      example:\n        ID: sha256:85f05633ddc1c50679be2b16a0479ab6f7637f8884e0cfe0f4d20e1ebb3d6e7c\n    CreateImageInfo:\n      type: object\n      properties:\n        id:\n          type: string\n        error:\n          type: string\n        status:\n          type: string\n        progress:\n          type: string\n        progressDetail:\n          $ref: '#/components/schemas/ProgressDetail'\n    PushImageInfo:\n      type: object\n      properties:\n        error:\n          type: string\n        status:\n          type: string\n        progress:\n          type: string\n        progressDetail:\n          $ref: '#/components/schemas/ProgressDetail'\n    ErrorDetail:\n      type: object\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n    ProgressDetail:\n      type: object\n      properties:\n        current:\n          type: integer\n        total:\n          type: integer\n    ErrorResponse:\n      required:\n        - message\n      type: object\n      properties:\n        message:\n          type: string\n          description: The error message.\n          nullable: false\n      description: Represents an error.\n      example:\n        message: Something went wrong.\n    IdResponse:\n      required:\n        - Id\n      type: object\n      properties:\n        Id:\n          type: string\n          description: The id of the newly created object.\n          nullable: false\n      description: Response to an API call that returns just an Id\n    EndpointSettings:\n      type: object\n      properties:\n        IPAMConfig:\n          $ref: '#/components/schemas/EndpointIPAMConfig'\n        Links:\n          type: array\n          example:\n            - container_1\n            - container_2\n          items:\n            type: string\n        Aliases:\n          type: array\n          example:\n            - server_x\n            - server_y\n          items:\n            type: string\n        NetworkID:\n          type: string\n          description: |\n            Unique ID of the network.\n          example: 08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a\n        EndpointID:\n          type: string\n          description: |\n            Unique ID for the service endpoint in a Sandbox.\n          example: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b\n        Gateway:\n          type: string\n          description: |\n            Gateway address for this network.\n          example: 172.17.0.1\n        IPAddress:\n          type: string\n          description: |\n            IPv4 address.\n          example: 172.17.0.4\n        IPPrefixLen:\n          type: integer\n          description: |\n            Mask length of the IPv4 address.\n          example: 16\n        IPv6Gateway:\n          type: string\n          description: |\n            IPv6 gateway address.\n          example: 2001:db8:2::100\n        GlobalIPv6Address:\n          type: string\n          description: |\n            Global IPv6 address.\n          example: 2001:db8::5689\n        GlobalIPv6PrefixLen:\n          type: integer\n          description: |\n            Mask length of the global IPv6 address.\n          format: int64\n          example: 64\n        MacAddress:\n          type: string\n          description: |\n            MAC address for the endpoint on this network.\n          example: 02:42:ac:11:00:04\n        DriverOpts:\n          type: object\n          additionalProperties:\n            type: string\n          description: |\n            DriverOpts is a mapping of driver options and values. These options\n            are passed directly to the driver and are driver specific.\n          nullable: true\n          example:\n            com.example.some-label: some-value\n            com.example.some-other-label: some-other-value\n      description: Configuration for a network endpoint.\n    EndpointIPAMConfig:\n      type: object\n      properties:\n        IPv4Address:\n          type: string\n          example: 172.20.30.33\n        IPv6Address:\n          type: string\n          example: 2001:db8:abcd::3033\n        LinkLocalIPs:\n          type: array\n          example:\n            - 169.254.34.68\n            - fe80::3468\n          items:\n            type: string\n      description: |\n        EndpointIPAMConfig represents an endpoint's IPAM configuration.\n      nullable: true\n      x-nullable: true\n    PluginMount:\n      required:\n        - Description\n        - Destination\n        - Name\n        - Options\n        - Settable\n        - Source\n        - Type\n      type: object\n      properties:\n        Name:\n          type: string\n          nullable: false\n          example: some-mount\n        Description:\n          type: string\n          nullable: false\n          example: This is a mount that's used by the plugin.\n        Settable:\n          type: array\n          items:\n            type: string\n        Source:\n          type: string\n          example: /var/lib/docker/plugins/\n        Destination:\n          type: string\n          nullable: false\n          example: /mnt/state\n        Type:\n          type: string\n          nullable: false\n          example: bind\n        Options:\n          type: array\n          example:\n            - rbind\n            - rw\n          items:\n            type: string\n      nullable: false\n      x-nullable: false\n    PluginDevice:\n      required:\n        - Description\n        - Name\n        - Path\n        - Settable\n      type: object\n      properties:\n        Name:\n          type: string\n          nullable: false\n        Description:\n          type: string\n          nullable: false\n        Settable:\n          type: array\n          items:\n            type: string\n        Path:\n          type: string\n          example: /dev/fuse\n      nullable: false\n      x-nullable: false\n    PluginEnv:\n      required:\n        - Description\n        - Name\n        - Settable\n        - Value\n      type: object\n      properties:\n        Name:\n          type: string\n          nullable: false\n        Description:\n          type: string\n          nullable: false\n        Settable:\n          type: array\n          items:\n            type: string\n        Value:\n          type: string\n      nullable: false\n      x-nullable: false\n    PluginInterfaceType:\n      required:\n        - Capability\n        - Prefix\n        - Version\n      type: object\n      properties:\n        Prefix:\n          type: string\n          nullable: false\n        Capability:\n          type: string\n          nullable: false\n        Version:\n          type: string\n          nullable: false\n      nullable: false\n      x-nullable: false\n    Plugin:\n      required:\n        - Config\n        - Enabled\n        - Name\n        - Settings\n      type: object\n      properties:\n        Id:\n          type: string\n          example: 5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078\n        Name:\n          type: string\n          nullable: false\n          example: tiborvass/sample-volume-plugin\n        Enabled:\n          type: boolean\n          description: True if the plugin is running. False if the plugin is not running,\n            only installed.\n          nullable: false\n          example: true\n        Settings:\n          required:\n            - Args\n            - Devices\n            - Env\n            - Mounts\n          type: object\n          properties:\n            Mounts:\n              type: array\n              items:\n                $ref: '#/components/schemas/PluginMount'\n            Env:\n              type: array\n              example:\n                - DEBUG=0\n              items:\n                type: string\n            Args:\n              type: array\n              items:\n                type: string\n            Devices:\n              type: array\n              items:\n                $ref: '#/components/schemas/PluginDevice'\n          description: Settings that can be modified by users.\n          nullable: false\n        PluginReference:\n          type: string\n          description: plugin remote reference used to push/pull the plugin\n          nullable: false\n          example: localhost:5000/tiborvass/sample-volume-plugin:latest\n        Config:\n          required:\n            - Args\n            - Description\n            - Documentation\n            - Entrypoint\n            - Env\n            - Interface\n            - IpcHost\n            - Linux\n            - Mounts\n            - Network\n            - PidHost\n            - PropagatedMount\n            - WorkDir\n          type: object\n          properties:\n            DockerVersion:\n              type: string\n              description: Docker Version used to create the plugin\n              nullable: false\n              example: 17.06.0-ce\n            Description:\n              type: string\n              nullable: false\n              example: A sample volume plugin for Docker\n            Documentation:\n              type: string\n              nullable: false\n              example: https://docs.docker.com/engine/extend/plugins/\n            Interface:\n              required:\n                - Socket\n                - Types\n              type: object\n              properties:\n                Types:\n                  type: array\n                  example:\n                    - docker.volumedriver/1.0\n                  items:\n                    $ref: '#/components/schemas/PluginInterfaceType'\n                Socket:\n                  type: string\n                  nullable: false\n                  example: plugins.sock\n                ProtocolScheme:\n                  type: string\n                  description: Protocol to use for clients connecting to the plugin.\n                  example: some.protocol/v1.0\n                  enum:\n                    - \"\"\n                    - moby.plugins.http/v1\n              description: The interface between Docker and the plugin\n              nullable: false\n            Entrypoint:\n              type: array\n              example:\n                - /usr/bin/sample-volume-plugin\n                - /data\n              items:\n                type: string\n            WorkDir:\n              type: string\n              nullable: false\n              example: /bin/\n            User:\n              type: object\n              properties:\n                UID:\n                  type: integer\n                  format: uint32\n                  example: 1000\n                GID:\n                  type: integer\n                  format: uint32\n                  example: 1000\n              nullable: false\n            Network:\n              required:\n                - Type\n              type: object\n              properties:\n                Type:\n                  type: string\n                  nullable: false\n                  example: host\n              nullable: false\n            Linux:\n              required:\n                - AllowAllDevices\n                - Capabilities\n                - Devices\n              type: object\n              properties:\n                Capabilities:\n                  type: array\n                  example:\n                    - CAP_SYS_ADMIN\n                    - CAP_SYSLOG\n                  items:\n                    type: string\n                AllowAllDevices:\n                  type: boolean\n                  nullable: false\n                  example: false\n                Devices:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/PluginDevice'\n              nullable: false\n            PropagatedMount:\n              type: string\n              nullable: false\n              example: /mnt/volumes\n            IpcHost:\n              type: boolean\n              nullable: false\n              example: false\n            PidHost:\n              type: boolean\n              nullable: false\n              example: false\n            Mounts:\n              type: array\n              items:\n                $ref: '#/components/schemas/PluginMount'\n            Env:\n              type: array\n              example:\n                - Name: DEBUG\n                  Description: If set, prints debug messages\n                  Value: \"0\"\n              items:\n                $ref: '#/components/schemas/PluginEnv'\n            Args:\n              required:\n                - Description\n                - Name\n                - Settable\n                - Value\n              type: object\n              properties:\n                Name:\n                  type: string\n                  nullable: false\n                  example: args\n                Description:\n                  type: string\n                  nullable: false\n                  example: command line arguments\n                Settable:\n                  type: array\n                  items:\n                    type: string\n                Value:\n                  type: array\n                  items:\n                    type: string\n              nullable: false\n            rootfs:\n              type: object\n              properties:\n                type:\n                  type: string\n                  example: layers\n                diff_ids:\n                  type: array\n                  example:\n                    - sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887\n                    - sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8\n                  items:\n                    type: string\n          description: The config of a plugin.\n          nullable: false\n      description: A plugin for the Engine API\n    ObjectVersion:\n      type: object\n      properties:\n        Index:\n          type: integer\n          format: uint64\n          example: 373531\n      description: |\n        The version number of the object such as node, service, etc. This is needed to avoid conflicting writes.\n        The client must send the version number along with the modified specification when updating these objects.\n        This approach ensures safe concurrency and determinism in that the change on the object\n        may not be applied if the version number has changed from the last read. In other words,\n        if two update requests specify the same base version, only one of the requests can succeed.\n        As a result, two separate update requests that happen at the same time will not\n        unintentionally overwrite each other.\n    NodeSpec:\n      type: object\n      properties:\n        Name:\n          type: string\n          description: Name for the node.\n          example: my-node\n        Labels:\n          type: object\n          additionalProperties:\n            type: string\n          description: User-defined key/value metadata.\n        Role:\n          type: string\n          description: Role of the node.\n          example: manager\n          enum:\n            - worker\n            - manager\n        Availability:\n          type: string\n          description: Availability of the node.\n          example: active\n          enum:\n            - active\n            - pause\n            - drain\n      example:\n        Availability: active\n        Name: node-name\n        Role: manager\n        Labels:\n          foo: bar\n    Node:\n      type: object\n      properties:\n        ID:\n          type: string\n          example: 24ifsmvkjbyhk\n        Version:\n          $ref: '#/components/schemas/ObjectVersion'\n        CreatedAt:\n          type: string\n          description: |\n            Date and time at which the node was added to the swarm in\n            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n          format: dateTime\n          example: 2016-08-18\n        UpdatedAt:\n          type: string\n          description: |\n            Date and time at which the node was last updated in\n            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n          format: dateTime\n          example: 2017-08-09\n        Spec:\n          $ref: '#/components/schemas/NodeSpec'\n        Description:\n          $ref: '#/components/schemas/NodeDescription'\n        Status:\n          $ref: '#/components/schemas/NodeStatus'\n        ManagerStatus:\n          $ref: '#/components/schemas/ManagerStatus'\n    NodeDescription:\n      type: object\n      properties:\n        Hostname:\n          type: string\n          example: bf3067039e47\n        Platform:\n          $ref: '#/components/schemas/Platform'\n        Resources:\n          $ref: '#/components/schemas/ResourceObject'\n        Engine:\n          $ref: '#/components/schemas/EngineDescription'\n        TLSInfo:\n          $ref: '#/components/schemas/TLSInfo'\n      description: |\n        NodeDescription encapsulates the properties of the Node as reported by the\n        agent.\n    Platform:\n      type: object\n      properties:\n        Architecture:\n          type: string\n          description: |\n            Architecture represents the hardware architecture (for example,\n            `x86_64`).\n          example: x86_64\n        OS:\n          type: string\n          description: |\n            OS represents the Operating System (for example, `linux` or `windows`).\n          example: linux\n      description: |\n        Platform represents the platform (Arch/OS).\n    EngineDescription:\n      type: object\n      properties:\n        EngineVersion:\n          type: string\n          example: 17.06.0\n        Labels:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            foo: bar\n        Plugins:\n          type: array\n          example:\n            - Type: Log\n              Name: awslogs\n            - Type: Log\n              Name: fluentd\n            - Type: Log\n              Name: gcplogs\n            - Type: Log\n              Name: gelf\n            - Type: Log\n              Name: journald\n            - Type: Log\n              Name: json-file\n            - Type: Log\n              Name: logentries\n            - Type: Log\n              Name: splunk\n            - Type: Log\n              Name: syslog\n            - Type: Network\n              Name: bridge\n            - Type: Network\n              Name: host\n            - Type: Network\n              Name: ipvlan\n            - Type: Network\n              Name: macvlan\n            - Type: Network\n              Name: null\n            - Type: Network\n              Name: overlay\n            - Type: Volume\n              Name: local\n            - Type: Volume\n              Name: localhost:5000/vieux/sshfs:latest\n            - Type: Volume\n              Name: vieux/sshfs:latest\n          items:\n            type: object\n            properties:\n              Type:\n                type: string\n              Name:\n                type: string\n      description: EngineDescription provides information about an engine.\n    TLSInfo:\n      type: object\n      properties:\n        TrustRoot:\n          type: string\n          description: The root CA certificate(s) that are used to validate leaf TLS\n            certificates\n        CertIssuerSubject:\n          type: string\n          description: The base64-url-safe-encoded raw subject bytes of the issuer\n        CertIssuerPublicKey:\n          type: string\n          description: The base64-url-safe-encoded raw public key bytes of the issuer\n      description: Information about the issuer of leaf TLS certificates and the trusted\n        root CA certificate\n      example:\n        TrustRoot: |\n          -----BEGIN CERTIFICATE-----\n          MIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw\n          EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0\n          MzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH\n          A0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf\n          3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB\n          Af8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO\n          PQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz\n          pxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H\n          -----END CERTIFICATE-----\n        CertIssuerSubject: MBMxETAPBgNVBAMTCHN3YXJtLWNh\n        CertIssuerPublicKey: MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A==\n    NodeStatus:\n      type: object\n      properties:\n        State:\n          $ref: '#/components/schemas/NodeState'\n        Message:\n          type: string\n          example: \"\"\n        Addr:\n          type: string\n          description: IP address of the node.\n          example: 172.17.0.2\n      description: |\n        NodeStatus represents the status of a node.\n\n        It provides the current status of the node, as seen by the manager.\n    NodeState:\n      type: string\n      description: NodeState represents the state of a node.\n      example: ready\n      enum:\n        - unknown\n        - down\n        - ready\n        - disconnected\n    ManagerStatus:\n      type: object\n      properties:\n        Leader:\n          type: boolean\n          example: true\n          default: false\n        Reachability:\n          $ref: '#/components/schemas/Reachability'\n        Addr:\n          type: string\n          description: |\n            The IP address and port at which the manager is reachable.\n          example: 10.0.0.46:2377\n      description: |\n        ManagerStatus represents the status of a manager.\n\n        It provides the current status of a node's manager component, if the node\n        is a manager.\n      nullable: true\n      x-nullable: true\n    Reachability:\n      type: string\n      description: Reachability represents the reachability of a node.\n      example: reachable\n      enum:\n        - unknown\n        - unreachable\n        - reachable\n    SwarmSpec:\n      type: object\n      properties:\n        Name:\n          type: string\n          description: Name of the swarm.\n          example: default\n        Labels:\n          type: object\n          additionalProperties:\n            type: string\n          description: User-defined key/value metadata.\n          example:\n            com.example.corp.type: production\n            com.example.corp.department: engineering\n        Orchestration:\n          type: object\n          properties:\n            TaskHistoryRetentionLimit:\n              type: integer\n              description: The number of historic tasks to keep per instance or node.\n                If negative, never remove completed or failed tasks.\n              format: int64\n              example: 10\n          description: Orchestration configuration.\n          nullable: true\n        Raft:\n          type: object\n          properties:\n            SnapshotInterval:\n              type: integer\n              description: The number of log entries between snapshots.\n              format: uint64\n              example: 10000\n            KeepOldSnapshots:\n              type: integer\n              description: The number of snapshots to keep beyond the current snapshot.\n              format: uint64\n            LogEntriesForSlowFollowers:\n              type: integer\n              description: The number of log entries to keep around to sync up slow\n                followers after a snapshot is created.\n              format: uint64\n              example: 500\n            ElectionTick:\n              type: integer\n              description: |\n                The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. `ElectionTick` must be greater than `HeartbeatTick`.\n\n                A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.\n              example: 3\n            HeartbeatTick:\n              type: integer\n              description: |\n                The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.\n\n                A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.\n              example: 1\n          description: Raft configuration.\n        Dispatcher:\n          type: object\n          properties:\n            HeartbeatPeriod:\n              type: integer\n              description: The delay for an agent to send a heartbeat to the dispatcher.\n              format: int64\n              example: 5000000000\n          description: Dispatcher configuration.\n          nullable: true\n        CAConfig:\n          type: object\n          properties:\n            NodeCertExpiry:\n              type: integer\n              description: The duration node certificates are issued for.\n              format: int64\n              example: 7776000000000000\n            ExternalCAs:\n              type: array\n              description: Configuration for forwarding signing requests to an external\n                certificate authority.\n              items:\n                type: object\n                properties:\n                  Protocol:\n                    type: string\n                    description: Protocol for communication with the external CA (currently\n                      only `cfssl` is supported).\n                    default: cfssl\n                    enum:\n                      - cfssl\n                  URL:\n                    type: string\n                    description: URL where certificate signing requests should be\n                      sent.\n                  Options:\n                    type: object\n                    additionalProperties:\n                      type: string\n                    description: An object with key/value pairs that are interpreted\n                      as protocol-specific options for the external CA driver.\n                  CACert:\n                    type: string\n                    description: The root CA certificate (in PEM format) this external\n                      CA uses to issue TLS certificates (assumed to be to the current\n                      swarm root CA certificate if not provided).\n            SigningCACert:\n              type: string\n              description: The desired signing CA certificate for all swarm node TLS\n                leaf certificates, in PEM format.\n            SigningCAKey:\n              type: string\n              description: The desired signing CA key for all swarm node TLS leaf\n                certificates, in PEM format.\n            ForceRotate:\n              type: integer\n              description: An integer whose purpose is to force swarm to generate\n                a new signing CA certificate and key, if none have been specified\n                in `SigningCACert` and `SigningCAKey`\n              format: uint64\n          description: CA configuration.\n          nullable: true\n        EncryptionConfig:\n          type: object\n          properties:\n            AutoLockManagers:\n              type: boolean\n              description: If set, generate a key and use it to lock data stored on\n                the managers.\n              example: false\n          description: Parameters related to encryption-at-rest.\n        TaskDefaults:\n          type: object\n          properties:\n            LogDriver:\n              type: object\n              properties:\n                Name:\n                  type: string\n                  description: |\n                    The log driver to use as a default for new tasks.\n                  example: json-file\n                Options:\n                  type: object\n                  additionalProperties:\n                    type: string\n                  description: |\n                    Driver-specific options for the selectd log driver, specified\n                    as key/value pairs.\n                  example:\n                    max-file: \"10\"\n                    max-size: 100m\n              description: |\n                The log driver to use for tasks created in the orchestrator if\n                unspecified by a service.\n\n                Updating this value only affects new tasks. Existing tasks continue\n                to use their previously configured log driver until recreated.\n          description: Defaults for creating tasks in this cluster.\n      description: User modifiable swarm configuration.\n    ClusterInfo:\n      type: object\n      properties:\n        ID:\n          type: string\n          description: The ID of the swarm.\n          example: abajmipo7b4xz5ip2nrla6b11\n        Version:\n          $ref: '#/components/schemas/ObjectVersion'\n        CreatedAt:\n          type: string\n          description: |\n            Date and time at which the swarm was initialised in\n            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n          format: dateTime\n          example: 2016-08-18\n        UpdatedAt:\n          type: string\n          description: |\n            Date and time at which the swarm was last updated in\n            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n          format: dateTime\n          example: 2017-08-09\n        Spec:\n          $ref: '#/components/schemas/SwarmSpec'\n        TLSInfo:\n          $ref: '#/components/schemas/TLSInfo'\n        RootRotationInProgress:\n          type: boolean\n          description: Whether there is currently a root CA rotation in progress for\n            the swarm\n          example: false\n        DataPathPort:\n          type: integer\n          description: |\n            DataPathPort specifies the data path port number for data traffic.\n            Acceptable port range is 1024 to 49151.\n            If no port is set or is set to 0, the default port (4789) is used.\n          format: uint32\n          example: 4789\n        DefaultAddrPool:\n          type: array\n          description: |\n            Default Address Pool specifies default subnet pools for global scope networks.\n          items:\n            type: string\n            format: CIDR\n            example: \"\"\n        SubnetSize:\n          maximum: 29\n          type: integer\n          description: |\n            SubnetSize specifies the subnet size of the networks created from the default subnet pool\n          format: uint32\n          example: 24\n      description: |\n        ClusterInfo represents information about the swarm as is returned by the\n        \"/info\" endpoint. Join-tokens are not included.\n      nullable: true\n      x-nullable: true\n    JoinTokens:\n      type: object\n      properties:\n        Worker:\n          type: string\n          description: |\n            The token workers can use to join the swarm.\n          example: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx\n        Manager:\n          type: string\n          description: |\n            The token managers can use to join the swarm.\n          example: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2\n      description: |\n        JoinTokens contains the tokens workers and managers need to join the swarm.\n    Swarm:\n      allOf:\n        - $ref: '#/components/schemas/ClusterInfo'\n        - type: object\n          properties:\n            JoinTokens:\n              $ref: '#/components/schemas/JoinTokens'\n    TaskSpec:\n      type: object\n      properties:\n        PluginSpec:\n          type: object\n          properties:\n            Name:\n              type: string\n              description: The name or 'alias' to use for the plugin.\n            Remote:\n              type: string\n              description: The plugin image reference to use.\n            Disabled:\n              type: boolean\n              description: Disable the plugin once scheduled.\n            PluginPrivilege:\n              type: array\n              items:\n                type: object\n                properties:\n                  Name:\n                    type: string\n                  Description:\n                    type: string\n                  Value:\n                    type: array\n                    items:\n                      type: string\n                description: Describes a permission accepted by the user upon installing\n                  the plugin.\n          description: |\n            Plugin spec for the service.  *(Experimental release only.)*\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are\n            \u003e mutually exclusive. PluginSpec is only used when the Runtime field\n            \u003e is set to `plugin`. NetworkAttachmentSpec is used when the Runtime\n            \u003e field is set to `attachment`.\n        ContainerSpec:\n          type: object\n          properties:\n            Image:\n              type: string\n              description: The image name to use for the container\n            Labels:\n              type: object\n              additionalProperties:\n                type: string\n              description: User-defined key/value data.\n            Command:\n              type: array\n              description: The command to be run in the image.\n              items:\n                type: string\n            Args:\n              type: array\n              description: Arguments to the command.\n              items:\n                type: string\n            Hostname:\n              type: string\n              description: The hostname to use for the container, as a valid RFC 1123\n                hostname.\n            Env:\n              type: array\n              description: A list of environment variables in the form `VAR=value`.\n              items:\n                type: string\n            Dir:\n              type: string\n              description: The working directory for commands to run in.\n            User:\n              type: string\n              description: The user inside the container.\n            Groups:\n              type: array\n              description: A list of additional groups that the container process\n                will run as.\n              items:\n                type: string\n            Privileges:\n              type: object\n              properties:\n                CredentialSpec:\n                  type: object\n                  properties:\n                    Config:\n                      type: string\n                      description: |\n                        Load credential spec from a Swarm Config with the given ID.\n                        The specified config must also be present in the Configs field with the Runtime property set.\n\n                        \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n\n                        \u003e **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, and `CredentialSpec.Config` are mutually exclusive.\n                      example: 0bt9dmxjvjiqermk6xrop3ekq\n                    File:\n                      type: string\n                      description: |\n                        Load credential spec from this file. The file is read by the daemon, and must be present in the\n                        `CredentialSpecs` subdirectory in the docker data directory, which defaults to\n                        `C:\\ProgramData\\Docker\\` on Windows.\n\n                        For example, specifying `spec.json` loads `C:\\ProgramData\\Docker\\CredentialSpecs\\spec.json`.\n\n                        \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n                        \u003e **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, and `CredentialSpec.Config` are mutually exclusive.\n                      example: spec.json\n                    Registry:\n                      type: string\n                      description: |\n                        Load credential spec from this value in the Windows registry. The specified registry value must be\n                        located in:\n\n                        `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Virtualization\\Containers\\CredentialSpecs`\n\n                        \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n\n                        \u003e **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, and `CredentialSpec.Config` are mutually exclusive.\n                  description: CredentialSpec for managed service account (Windows\n                    only)\n                SELinuxContext:\n                  type: object\n                  properties:\n                    Disable:\n                      type: boolean\n                      description: Disable SELinux\n                    User:\n                      type: string\n                      description: SELinux user label\n                    Role:\n                      type: string\n                      description: SELinux role label\n                    Type:\n                      type: string\n                      description: SELinux type label\n                    Level:\n                      type: string\n                      description: SELinux level label\n                  description: SELinux labels of the container\n              description: Security options for the container\n            TTY:\n              type: boolean\n              description: Whether a pseudo-TTY should be allocated.\n            OpenStdin:\n              type: boolean\n              description: Open `stdin`\n            ReadOnly:\n              type: boolean\n              description: Mount the container's root filesystem as read only.\n            Mounts:\n              type: array\n              description: Specification for mounts to be added to containers created\n                as part of the service.\n              items:\n                $ref: '#/components/schemas/Mount'\n            StopSignal:\n              type: string\n              description: Signal to stop the container.\n            StopGracePeriod:\n              type: integer\n              description: Amount of time to wait for the container to terminate before\n                forcefully killing it.\n              format: int64\n            HealthCheck:\n              $ref: '#/components/schemas/HealthConfig'\n            Hosts:\n              type: array\n              description: |\n                A list of hostname/IP mappings to add to the container's `hosts`\n                file. The format of extra hosts is specified in the\n                [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html)\n                man page:\n\n                    IP_address canonical_hostname [aliases...]\n              items:\n                type: string\n            DNSConfig:\n              type: object\n              properties:\n                Nameservers:\n                  type: array\n                  description: The IP addresses of the name servers.\n                  items:\n                    type: string\n                Search:\n                  type: array\n                  description: A search list for host-name lookup.\n                  items:\n                    type: string\n                Options:\n                  type: array\n                  description: A list of internal resolver variables to be modified\n                    (e.g., `debug`, `ndots:3`, etc.).\n                  items:\n                    type: string\n              description: Specification for DNS related configurations in resolver\n                configuration file (`resolv.conf`).\n            Secrets:\n              type: array\n              description: Secrets contains references to zero or more secrets that\n                will be exposed to the service.\n              items:\n                type: object\n                properties:\n                  File:\n                    type: object\n                    properties:\n                      Name:\n                        type: string\n                        description: Name represents the final filename in the filesystem.\n                      UID:\n                        type: string\n                        description: UID represents the file UID.\n                      GID:\n                        type: string\n                        description: GID represents the file GID.\n                      Mode:\n                        type: integer\n                        description: Mode represents the FileMode of the file.\n                        format: uint32\n                    description: File represents a specific target that is backed\n                      by a file.\n                  SecretID:\n                    type: string\n                    description: SecretID represents the ID of the specific secret\n                      that we're referencing.\n                  SecretName:\n                    type: string\n                    description: |\n                      SecretName is the name of the secret that this references, but this is just provided for\n                      lookup/display purposes. The secret in the reference will be identified by its ID.\n            Configs:\n              type: array\n              description: Configs contains references to zero or more configs that\n                will be exposed to the service.\n              items:\n                type: object\n                properties:\n                  File:\n                    type: object\n                    properties:\n                      Name:\n                        type: string\n                        description: Name represents the final filename in the filesystem.\n                      UID:\n                        type: string\n                        description: UID represents the file UID.\n                      GID:\n                        type: string\n                        description: GID represents the file GID.\n                      Mode:\n                        type: integer\n                        description: Mode represents the FileMode of the file.\n                        format: uint32\n                    description: |\n                      File represents a specific target that is backed by a file.\n\n                      \u003cp\u003e\u003cbr /\u003e\u003cp\u003e\n\n                      \u003e **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive\n                  Runtime:\n                    type: object\n                    properties: {}\n                    description: |\n                      Runtime represents a target that is not mounted into the container but is used by the task\n\n                      \u003cp\u003e\u003cbr /\u003e\u003cp\u003e\n\n                      \u003e **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive\n                  ConfigID:\n                    type: string\n                    description: ConfigID represents the ID of the specific config\n                      that we're referencing.\n                  ConfigName:\n                    type: string\n                    description: |\n                      ConfigName is the name of the config that this references, but this is just provided for\n                      lookup/display purposes. The config in the reference will be identified by its ID.\n            Isolation:\n              type: string\n              description: Isolation technology of the containers running the service.\n                (Windows only)\n              enum:\n                - default\n                - process\n                - hyperv\n            Init:\n              type: boolean\n              description: Run an init inside the container that forwards signals\n                and reaps processes. This field is omitted if empty, and the default\n                (as configured on the daemon) is used.\n              nullable: true\n            Sysctls:\n              type: object\n              additionalProperties:\n                type: string\n              description: |\n                Set kernel namedspaced parameters (sysctls) in the container.\n                The Sysctls option on services accepts the same sysctls as the\n                are supported on containers. Note that while the same sysctls are\n                supported, no guarantees or checks are made about their\n                suitability for a clustered environment, and it's up to the user\n                to determine whether a given sysctl will work properly in a\n                Service.\n          description: |\n            Container spec for the service.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are\n            \u003e mutually exclusive. PluginSpec is only used when the Runtime field\n            \u003e is set to `plugin`. NetworkAttachmentSpec is used when the Runtime\n            \u003e field is set to `attachment`.\n        NetworkAttachmentSpec:\n          type: object\n          properties:\n            ContainerID:\n              type: string\n              description: ID of the container represented by this task\n          description: |\n            Read-only spec type for non-swarm containers attached to swarm overlay\n            networks.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are\n            \u003e mutually exclusive. PluginSpec is only used when the Runtime field\n            \u003e is set to `plugin`. NetworkAttachmentSpec is used when the Runtime\n            \u003e field is set to `attachment`.\n        Resources:\n          type: object\n          properties:\n            Limits:\n              $ref: '#/components/schemas/ResourceObject'\n            Reservation:\n              $ref: '#/components/schemas/ResourceObject'\n          description: Resource requirements which apply to each individual container\n            created as part of the service.\n        RestartPolicy:\n          type: object\n          properties:\n            Condition:\n              type: string\n              description: Condition for restart.\n              enum:\n                - none\n                - on-failure\n                - any\n            Delay:\n              type: integer\n              description: Delay between restart attempts.\n              format: int64\n            MaxAttempts:\n              type: integer\n              description: Maximum attempts to restart a given container before giving\n                up (default value is 0, which is ignored).\n              format: int64\n              default: 0\n            Window:\n              type: integer\n              description: Windows is the time window used to evaluate the restart\n                policy (default value is 0, which is unbounded).\n              format: int64\n              default: 0\n          description: Specification for the restart policy which applies to containers\n            created as part of this service.\n        Placement:\n          type: object\n          properties:\n            Constraints:\n              type: array\n              description: |\n                An array of constraint expressions to limit the set of nodes where\n                a task can be scheduled. Constraint expressions can either use a\n                _match_ (`==`) or _exclude_ (`!=`) rule. Multiple constraints find\n                nodes that satisfy every expression (AND match). Constraints can\n                match node or Docker Engine labels as follows:\n\n                node attribute       | matches                        | example\n                ---------------------|--------------------------------|-----------------------------------------------\n                `node.id`            | Node ID                        | `node.id==2ivku8v2gvtg4`\n                `node.hostname`      | Node hostname                  | `node.hostname!=node-2`\n                `node.role`          | Node role (`manager`/`worker`) | `node.role==manager`\n                `node.platform.os`   | Node operating system          | `node.platform.os==windows`\n                `node.platform.arch` | Node architecture              | `node.platform.arch==x86_64`\n                `node.labels`        | User-defined node labels       | `node.labels.security==high`\n                `engine.labels`      | Docker Engine's labels         | `engine.labels.operatingsystem==ubuntu-14.04`\n\n                `engine.labels` apply to Docker Engine labels like operating system,\n                drivers, etc. Swarm administrators add `node.labels` for operational\n                purposes by using the [`node update endpoint`](#operation/NodeUpdate).\n              example:\n                - node.hostname!=node3.corp.example.com\n                - node.role!=manager\n                - node.labels.type==production\n                - node.platform.os==linux\n                - node.platform.arch==x86_64\n              items:\n                type: string\n            Preferences:\n              type: array\n              description: Preferences provide a way to make the scheduler aware of\n                factors such as topology. They are provided in order from highest\n                to lowest precedence.\n              example:\n                - Spread:\n                    SpreadDescriptor: node.labels.datacenter\n                - Spread:\n                    SpreadDescriptor: node.labels.rack\n              items:\n                type: object\n                properties:\n                  Spread:\n                    type: object\n                    properties:\n                      SpreadDescriptor:\n                        type: string\n                        description: label descriptor, such as engine.labels.az\n            MaxReplicas:\n              type: integer\n              description: Maximum number of replicas for per node (default value\n                is 0, which is unlimited)\n              format: int64\n              default: 0\n            Platforms:\n              type: array\n              description: |\n                Platforms stores all the platforms that the service's image can\n                run on. This field is used in the platform filter for scheduling.\n                If empty, then the platform filter is off, meaning there are no\n                scheduling restrictions.\n              items:\n                $ref: '#/components/schemas/Platform'\n        ForceUpdate:\n          type: integer\n          description: A counter that triggers an update even if no relevant parameters\n            have been changed.\n        Runtime:\n          type: string\n          description: Runtime is the type of runtime specified for the task executor.\n        Networks:\n          type: array\n          description: Specifies which networks the service should attach to.\n          items:\n            $ref: '#/components/schemas/NetworkAttachmentConfig'\n        LogDriver:\n          type: object\n          properties:\n            Name:\n              type: string\n            Options:\n              type: object\n              additionalProperties:\n                type: string\n          description: Specifies the log driver to use for tasks created from this\n            spec. If not present, the default one for the swarm will be used, finally\n            falling back to the engine default if not specified.\n      description: User modifiable task configuration.\n    TaskState:\n      type: string\n      enum:\n        - new\n        - allocated\n        - pending\n        - assigned\n        - accepted\n        - preparing\n        - ready\n        - starting\n        - running\n        - complete\n        - shutdown\n        - failed\n        - rejected\n        - remove\n        - orphaned\n    Task:\n      type: object\n      properties:\n        ID:\n          type: string\n          description: The ID of the task.\n        Version:\n          $ref: '#/components/schemas/ObjectVersion'\n        CreatedAt:\n          type: string\n          format: dateTime\n        UpdatedAt:\n          type: string\n          format: dateTime\n        Name:\n          type: string\n          description: Name of the task.\n        Labels:\n          type: object\n          additionalProperties:\n            type: string\n          description: User-defined key/value metadata.\n        Spec:\n          $ref: '#/components/schemas/TaskSpec'\n        ServiceID:\n          type: string\n          description: The ID of the service this task is part of.\n        Slot:\n          type: integer\n        NodeID:\n          type: string\n          description: The ID of the node that this task is on.\n        AssignedGenericResources:\n          $ref: '#/components/schemas/GenericResources'\n        Status:\n          type: object\n          properties:\n            Timestamp:\n              type: string\n              format: dateTime\n            State:\n              $ref: '#/components/schemas/TaskState'\n            Message:\n              type: string\n            Err:\n              type: string\n            ContainerStatus:\n              type: object\n              properties:\n                ContainerID:\n                  type: string\n                PID:\n                  type: integer\n                ExitCode:\n                  type: integer\n        DesiredState:\n          $ref: '#/components/schemas/TaskState'\n      example:\n        ID: 0kzzo1i0y4jz6027t0k7aezc7\n        Version:\n          Index: 71\n        CreatedAt: 2016-06-07\n        UpdatedAt: 2016-06-07\n        Spec:\n          ContainerSpec:\n            Image: redis\n          Resources:\n            Limits: {}\n            Reservations: {}\n          RestartPolicy:\n            Condition: any\n            MaxAttempts: 0\n          Placement: {}\n        ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz\n        Slot: 1\n        NodeID: 60gvrl6tm78dmak4yl7srz94v\n        Status:\n          Timestamp: 2016-06-07\n          State: running\n          Message: started\n          ContainerStatus:\n            ContainerID: e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035\n            PID: 677\n        DesiredState: running\n        NetworksAttachments:\n          - Network:\n              ID: 4qvuz4ko70xaltuqbt8956gd1\n              Version:\n                Index: 18\n              CreatedAt: 2016-06-07\n              UpdatedAt: 2016-06-07\n              Spec:\n                Name: ingress\n                Labels:\n                  com.docker.swarm.internal: \"true\"\n                DriverConfiguration: {}\n                IPAMOptions:\n                  Driver: {}\n                  Configs:\n                    - Subnet: 10.255.0.0/16\n                      Gateway: 10.255.0.1\n              DriverState:\n                Name: overlay\n                Options:\n                  com.docker.network.driver.overlay.vxlanid_list: \"256\"\n              IPAMOptions:\n                Driver:\n                  Name: default\n                Configs:\n                  - Subnet: 10.255.0.0/16\n                    Gateway: 10.255.0.1\n            Addresses:\n              - 10.255.0.10/16\n        AssignedGenericResources:\n          - DiscreteResourceSpec:\n              Kind: SSD\n              Value: 3\n          - NamedResourceSpec:\n              Kind: GPU\n              Value: UUID1\n          - NamedResourceSpec:\n              Kind: GPU\n              Value: UUID2\n    ServiceSpec:\n      type: object\n      properties:\n        Name:\n          type: string\n          description: Name of the service.\n        Labels:\n          type: object\n          additionalProperties:\n            type: string\n          description: User-defined key/value metadata.\n        TaskTemplate:\n          $ref: '#/components/schemas/TaskSpec'\n        Mode:\n          type: object\n          properties:\n            Replicated:\n              type: object\n              properties:\n                Replicas:\n                  type: integer\n                  format: int64\n            Global:\n              type: object\n              properties: {}\n          description: Scheduling mode for the service.\n        UpdateConfig:\n          type: object\n          properties:\n            Parallelism:\n              type: integer\n              description: Maximum number of tasks to be updated in one iteration\n                (0 means unlimited parallelism).\n              format: int64\n            Delay:\n              type: integer\n              description: Amount of time between updates, in nanoseconds.\n              format: int64\n            FailureAction:\n              type: string\n              description: Action to take if an updated task fails to run, or stops\n                running during the update.\n              enum:\n                - continue\n                - pause\n                - rollback\n            Monitor:\n              type: integer\n              description: Amount of time to monitor each updated task for failures,\n                in nanoseconds.\n              format: int64\n            MaxFailureRatio:\n              type: number\n              description: The fraction of tasks that may fail during an update before\n                the failure action is invoked, specified as a floating point number\n                between 0 and 1.\n            Order:\n              type: string\n              description: The order of operations when rolling out an updated task.\n                Either the old task is shut down before the new task is started, or\n                the new task is started before the old task is shut down.\n              enum:\n                - stop-first\n                - start-first\n          description: Specification for the update strategy of the service.\n        RollbackConfig:\n          type: object\n          properties:\n            Parallelism:\n              type: integer\n              description: Maximum number of tasks to be rolled back in one iteration\n                (0 means unlimited parallelism).\n              format: int64\n            Delay:\n              type: integer\n              description: Amount of time between rollback iterations, in nanoseconds.\n              format: int64\n            FailureAction:\n              type: string\n              description: Action to take if an rolled back task fails to run, or\n                stops running during the rollback.\n              enum:\n                - continue\n                - pause\n            Monitor:\n              type: integer\n              description: Amount of time to monitor each rolled back task for failures,\n                in nanoseconds.\n              format: int64\n            MaxFailureRatio:\n              type: number\n              description: The fraction of tasks that may fail during a rollback before\n                the failure action is invoked, specified as a floating point number\n                between 0 and 1.\n            Order:\n              type: string\n              description: The order of operations when rolling back a task. Either\n                the old task is shut down before the new task is started, or the new\n                task is started before the old task is shut down.\n              enum:\n                - stop-first\n                - start-first\n          description: Specification for the rollback strategy of the service.\n        Networks:\n          type: array\n          description: Specifies which networks the service should attach to.\n          items:\n            $ref: '#/components/schemas/NetworkAttachmentConfig'\n        EndpointSpec:\n          $ref: '#/components/schemas/EndpointSpec'\n      description: User modifiable configuration for a service.\n    EndpointPortConfig:\n      type: object\n      properties:\n        Name:\n          type: string\n        Protocol:\n          type: string\n          enum:\n            - tcp\n            - udp\n            - sctp\n        TargetPort:\n          type: integer\n          description: The port inside the container.\n        PublishedPort:\n          type: integer\n          description: The port on the swarm hosts.\n        PublishMode:\n          type: string\n          description: |\n            The mode in which port is published.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            - \"ingress\" makes the target port accessible on every node,\n              regardless of whether there is a task for the service running on\n              that node or not.\n            - \"host\" bypasses the routing mesh and publish the port directly on\n              the swarm node where that service is running.\n          example: ingress\n          default: ingress\n          enum:\n            - ingress\n            - host\n    EndpointSpec:\n      type: object\n      properties:\n        Mode:\n          type: string\n          description: |\n            The mode of resolution to use for internal load balancing between tasks.\n          default: vip\n          enum:\n            - vip\n            - dnsrr\n        Ports:\n          type: array\n          description: List of exposed ports that this service is accessible on from\n            the outside. Ports can only be provided if `vip` resolution mode is used.\n          items:\n            $ref: '#/components/schemas/EndpointPortConfig'\n      description: Properties that can be configured to access and load balance a\n        service.\n    Service:\n      type: object\n      properties:\n        ID:\n          type: string\n        Version:\n          $ref: '#/components/schemas/ObjectVersion'\n        CreatedAt:\n          type: string\n          format: dateTime\n        UpdatedAt:\n          type: string\n          format: dateTime\n        Spec:\n          $ref: '#/components/schemas/ServiceSpec'\n        Endpoint:\n          type: object\n          properties:\n            Spec:\n              $ref: '#/components/schemas/EndpointSpec'\n            Ports:\n              type: array\n              items:\n                $ref: '#/components/schemas/EndpointPortConfig'\n            VirtualIPs:\n              type: array\n              items:\n                type: object\n                properties:\n                  NetworkID:\n                    type: string\n                  Addr:\n                    type: string\n        UpdateStatus:\n          type: object\n          properties:\n            State:\n              type: string\n              enum:\n                - updating\n                - paused\n                - completed\n            StartedAt:\n              type: string\n              format: dateTime\n            CompletedAt:\n              type: string\n              format: dateTime\n            Message:\n              type: string\n          description: The status of a service update.\n      example:\n        ID: 9mnpnzenvg8p8tdbtq4wvbkcz\n        Version:\n          Index: 19\n        CreatedAt: 2016-06-07\n        UpdatedAt: 2016-06-07\n        Spec:\n          Name: hopeful_cori\n          TaskTemplate:\n            ContainerSpec:\n              Image: redis\n            Resources:\n              Limits: {}\n              Reservations: {}\n            RestartPolicy:\n              Condition: any\n              MaxAttempts: 0\n            Placement: {}\n            ForceUpdate: 0\n          Mode:\n            Replicated:\n              Replicas: 1\n          UpdateConfig:\n            Parallelism: 1\n            Delay: 1000000000\n            FailureAction: pause\n            Monitor: 15000000000\n            MaxFailureRatio: 0.15\n          RollbackConfig:\n            Parallelism: 1\n            Delay: 1000000000\n            FailureAction: pause\n            Monitor: 15000000000\n            MaxFailureRatio: 0.15\n          EndpointSpec:\n            Mode: vip\n            Ports:\n              - Protocol: tcp\n                TargetPort: 6379\n                PublishedPort: 30001\n        Endpoint:\n          Spec:\n            Mode: vip\n            Ports:\n              - Protocol: tcp\n                TargetPort: 6379\n                PublishedPort: 30001\n          Ports:\n            - Protocol: tcp\n              TargetPort: 6379\n              PublishedPort: 30001\n          VirtualIPs:\n            - NetworkID: 4qvuz4ko70xaltuqbt8956gd1\n              Addr: 10.255.0.2/16\n            - NetworkID: 4qvuz4ko70xaltuqbt8956gd1\n              Addr: 10.255.0.3/16\n    ImageDeleteResponseItem:\n      type: object\n      properties:\n        Untagged:\n          type: string\n          description: The image ID of an image that was untagged\n        Deleted:\n          type: string\n          description: The image ID of an image that was deleted\n    ServiceUpdateResponse:\n      type: object\n      properties:\n        Warnings:\n          type: array\n          description: Optional warning messages\n          items:\n            type: string\n      example:\n        Warning: 'unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest\n          not found'\n    ContainerSummary:\n      type: array\n      items:\n        type: object\n        properties:\n          Id:\n            type: string\n            description: The ID of this container\n            x-go-name: ID\n          Names:\n            type: array\n            description: The names that this container has been given\n            items:\n              type: string\n          Image:\n            type: string\n            description: The name of the image used when creating this container\n          ImageID:\n            type: string\n            description: The ID of the image that this container was created from\n          Command:\n            type: string\n            description: Command to run when starting the container\n          Created:\n            type: integer\n            description: When the container was created\n            format: int64\n          Ports:\n            type: array\n            description: The ports exposed by this container\n            items:\n              $ref: '#/components/schemas/Port'\n          SizeRw:\n            type: integer\n            description: The size of files that have been created or changed by this\n              container\n            format: int64\n          SizeRootFs:\n            type: integer\n            description: The total size of all the files in this container\n            format: int64\n          Labels:\n            type: object\n            additionalProperties:\n              type: string\n            description: User-defined key/value metadata.\n          State:\n            type: string\n            description: The state of this container (e.g. `Exited`)\n          Status:\n            type: string\n            description: Additional human-readable status of this container (e.g.\n              `Exit 0`)\n          HostConfig:\n            type: object\n            properties:\n              NetworkMode:\n                type: string\n          NetworkSettings:\n            type: object\n            properties:\n              Networks:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/EndpointSettings'\n            description: A summary of the container's network settings\n          Mounts:\n            type: array\n            items:\n              $ref: '#/components/schemas/Mount'\n    Driver:\n      required:\n        - Name\n      type: object\n      properties:\n        Name:\n          type: string\n          description: Name of the driver.\n          nullable: false\n          example: some-driver\n        Options:\n          type: object\n          additionalProperties:\n            type: string\n          description: Key/value map of driver-specific options.\n          nullable: false\n          example:\n            OptionA: value for driver-specific option A\n            OptionB: value for driver-specific option B\n      description: Driver represents a driver (network, logging, secrets).\n    SecretSpec:\n      type: object\n      properties:\n        Name:\n          type: string\n          description: User-defined name of the secret.\n        Labels:\n          type: object\n          additionalProperties:\n            type: string\n          description: User-defined key/value metadata.\n          example:\n            com.example.some-label: some-value\n            com.example.some-other-label: some-other-value\n        Data:\n          type: string\n          description: |\n            Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-3.2))\n            data to store as secret.\n\n            This field is only used to _create_ a secret, and is not returned by\n            other endpoints.\n          example: \"\"\n        Driver:\n          $ref: '#/components/schemas/Driver'\n        Templating:\n          $ref: '#/components/schemas/Driver'\n    Secret:\n      type: object\n      properties:\n        ID:\n          type: string\n          example: blt1owaxmitz71s9v5zh81zun\n        Version:\n          $ref: '#/components/schemas/ObjectVersion'\n        CreatedAt:\n          type: string\n          format: dateTime\n          example: 2017-07-20\n        UpdatedAt:\n          type: string\n          format: dateTime\n          example: 2017-07-20\n        Spec:\n          $ref: '#/components/schemas/SecretSpec'\n    ConfigSpec:\n      type: object\n      properties:\n        Name:\n          type: string\n          description: User-defined name of the config.\n        Labels:\n          type: object\n          additionalProperties:\n            type: string\n          description: User-defined key/value metadata.\n        Data:\n          type: string\n          description: |\n            Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-3.2))\n            config data.\n        Templating:\n          $ref: '#/components/schemas/Driver'\n    Config:\n      type: object\n      properties:\n        ID:\n          type: string\n        Version:\n          $ref: '#/components/schemas/ObjectVersion'\n        CreatedAt:\n          type: string\n          format: dateTime\n        UpdatedAt:\n          type: string\n          format: dateTime\n        Spec:\n          $ref: '#/components/schemas/ConfigSpec'\n    ContainerState:\n      type: object\n      properties:\n        Status:\n          type: string\n          description: |\n            String representation of the container state. Can be one of \"created\",\n            \"running\", \"paused\", \"restarting\", \"removing\", \"exited\", or \"dead\".\n          example: running\n          enum:\n            - created\n            - running\n            - paused\n            - restarting\n            - removing\n            - exited\n            - dead\n        Running:\n          type: boolean\n          description: |\n            Whether this container is running.\n\n            Note that a running container can be _paused_. The `Running` and `Paused`\n            booleans are not mutually exclusive:\n\n            When pausing a container (on Linux), the freezer cgroup is used to suspend\n            all processes in the container. Freezing the process requires the process to\n            be running. As a result, paused containers are both `Running` _and_ `Paused`.\n\n            Use the `Status` field instead to determine if a container's state is \"running\".\n          example: true\n        Paused:\n          type: boolean\n          description: Whether this container is paused.\n          example: false\n        Restarting:\n          type: boolean\n          description: Whether this container is restarting.\n          example: false\n        OOMKilled:\n          type: boolean\n          description: Whether this container has been killed because it ran out of\n            memory.\n          example: false\n        Dead:\n          type: boolean\n          example: false\n        Pid:\n          type: integer\n          description: The process ID of this container\n          example: 1234\n        ExitCode:\n          type: integer\n          description: The last exit code of this container\n          example: 0\n        Error:\n          type: string\n        StartedAt:\n          type: string\n          description: The time when this container was last started.\n          example: 2020-01-06\n        FinishedAt:\n          type: string\n          description: The time when this container last exited.\n          example: 2020-01-06\n        Health:\n          $ref: '#/components/schemas/Health'\n      description: |\n        ContainerState stores container's running state. It's part of ContainerJSONBase\n        and will be returned by the \"inspect\" command.\n    SystemInfo:\n      type: object\n      properties:\n        ID:\n          type: string\n          description: |\n            Unique identifier of the daemon.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Note**: The format of the ID itself is not part of the API, and\n            \u003e should not be considered stable.\n          example: 7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS\n        Containers:\n          type: integer\n          description: Total number of containers on the host.\n          example: 14\n        ContainersRunning:\n          type: integer\n          description: |\n            Number of containers with status `\"running\"`.\n          example: 3\n        ContainersPaused:\n          type: integer\n          description: |\n            Number of containers with status `\"paused\"`.\n          example: 1\n        ContainersStopped:\n          type: integer\n          description: |\n            Number of containers with status `\"stopped\"`.\n          example: 10\n        Images:\n          type: integer\n          description: |\n            Total number of images on the host.\n\n            Both _tagged_ and _untagged_ (dangling) images are counted.\n          example: 508\n        Driver:\n          type: string\n          description: Name of the storage driver in use.\n          example: overlay2\n        DriverStatus:\n          type: array\n          description: |\n            Information specific to the storage driver, provided as\n            \"label\" / \"value\" pairs.\n\n            This information is provided by the storage driver, and formatted\n            in a way consistent with the output of `docker info` on the command\n            line.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Note**: The information returned in this field, including the\n            \u003e formatting of values and labels, should not be considered stable,\n            \u003e and may change without notice.\n          example:\n            - - Backing Filesystem\n              - extfs\n            - - Supports d_type\n              - \"true\"\n            - - Native Overlay Diff\n              - \"true\"\n          items:\n            type: array\n            items:\n              type: string\n        DockerRootDir:\n          type: string\n          description: |\n            Root directory of persistent Docker state.\n\n            Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker`\n            on Windows.\n          example: /var/lib/docker\n        SystemStatus:\n          type: array\n          description: |\n            Status information about this node (standalone Swarm API).\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Note**: The information returned in this field is only propagated\n            \u003e by the Swarm standalone API, and is empty (`null`) when using\n            \u003e built-in swarm mode.\n          example:\n            - - Role\n              - primary\n            - - State\n              - Healthy\n            - - Strategy\n              - spread\n            - - Filters\n              - health, port, containerslots, dependency, affinity, constraint, whitelist\n            - - Nodes\n              - \"2\"\n            - - ' swarm-agent-00'\n              - 192.168.99.102:2376\n            - - '  └ ID'\n              - 5CT6:FBGO:RVGO:CZL4:PB2K:WCYN:2JSV:KSHH:GGFW:QOPG:6J5Q:IOZ2|192.168.99.102:2376\n            - - '  └ Status'\n              - Healthy\n            - - '  └ Containers'\n              - 1 (1 Running, 0 Paused, 0 Stopped)\n            - - '  └ Reserved CPUs'\n              - 0 / 1\n            - - '  └ Reserved Memory'\n              - 0 B / 1.021 GiB\n            - - '  └ Labels'\n              - 'kernelversion=4.4.74-boot2docker, operatingsystem=Boot2Docker 17.06.0-ce\n              (TCL 7.2); HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017, ostype=linux,\n              provider=virtualbox, storagedriver=aufs'\n            - - '  └ UpdatedAt'\n              - 2017-08-09\n            - - '  └ ServerVersion'\n              - 17.06.0-ce\n            - - ' swarm-manager'\n              - 192.168.99.101:2376\n            - - '  └ ID'\n              - TAMD:7LL3:SEF7:LW2W:4Q2X:WVFH:RTXX:JSYS:XY2P:JEHL:ZMJK:JGIW|192.168.99.101:2376\n            - - '  └ Status'\n              - Healthy\n            - - '  └ Containers'\n              - 2 (2 Running, 0 Paused, 0 Stopped)\n            - - '  └ Reserved CPUs'\n              - 0 / 1\n            - - '  └ Reserved Memory'\n              - 0 B / 1.021 GiB\n            - - '  └ Labels'\n              - 'kernelversion=4.4.74-boot2docker, operatingsystem=Boot2Docker 17.06.0-ce\n              (TCL 7.2); HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017, ostype=linux,\n              provider=virtualbox, storagedriver=aufs'\n            - - '  └ UpdatedAt'\n              - 2017-08-09\n            - - '  └ ServerVersion'\n              - 17.06.0-ce\n          items:\n            type: array\n            items:\n              type: string\n        Plugins:\n          $ref: '#/components/schemas/PluginsInfo'\n        MemoryLimit:\n          type: boolean\n          description: Indicates if the host has memory limit support enabled.\n          example: true\n        SwapLimit:\n          type: boolean\n          description: Indicates if the host has memory swap limit support enabled.\n          example: true\n        KernelMemory:\n          type: boolean\n          description: Indicates if the host has kernel memory limit support enabled.\n          example: true\n        CpuCfsPeriod:\n          type: boolean\n          description: Indicates if CPU CFS(Completely Fair Scheduler) period is supported\n            by the host.\n          example: true\n        CpuCfsQuota:\n          type: boolean\n          description: Indicates if CPU CFS(Completely Fair Scheduler) quota is supported\n            by the host.\n          example: true\n        CPUShares:\n          type: boolean\n          description: Indicates if CPU Shares limiting is supported by the host.\n          example: true\n        CPUSet:\n          type: boolean\n          description: |\n            Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.\n\n            See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)\n          example: true\n        PidsLimit:\n          type: boolean\n          description: Indicates if the host kernel has PID limit support enabled.\n          example: true\n        OomKillDisable:\n          type: boolean\n          description: Indicates if OOM killer disable is supported on the host.\n        IPv4Forwarding:\n          type: boolean\n          description: Indicates IPv4 forwarding is enabled.\n          example: true\n        BridgeNfIptables:\n          type: boolean\n          description: Indicates if `bridge-nf-call-iptables` is available on the\n            host.\n          example: true\n        BridgeNfIp6tables:\n          type: boolean\n          description: Indicates if `bridge-nf-call-ip6tables` is available on the\n            host.\n          example: true\n        Debug:\n          type: boolean\n          description: Indicates if the daemon is running in debug-mode / with debug-level\n            logging enabled.\n          example: true\n        NFd:\n          type: integer\n          description: |\n            The total number of file Descriptors in use by the daemon process.\n\n            This information is only returned if debug-mode is enabled.\n          example: 64\n        NGoroutines:\n          type: integer\n          description: |\n            The  number of goroutines that currently exist.\n\n            This information is only returned if debug-mode is enabled.\n          example: 174\n        SystemTime:\n          type: string\n          description: |\n            Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)\n            format with nano-seconds.\n          example: 2017-08-08T20:28:29.06202363Z\n        LoggingDriver:\n          type: string\n          description: |\n            The logging driver to use as a default for new containers.\n        CgroupDriver:\n          type: string\n          description: |\n            The driver to use for managing cgroups.\n          example: cgroupfs\n          default: cgroupfs\n          enum:\n            - cgroupfs\n            - systemd\n            - none\n        NEventsListener:\n          type: integer\n          description: Number of event listeners subscribed.\n          example: 30\n        KernelVersion:\n          type: string\n          description: |\n            Kernel version of the host.\n\n            On Linux, this information obtained from `uname`. On Windows this\n            information is queried from the \u003ckbd\u003eHKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\\u003c/kbd\u003e\n            registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_.\n          example: 4.9.38-moby\n        OperatingSystem:\n          type: string\n          description: |\n            Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\"\n            or \"Windows Server 2016 Datacenter\"\n          example: Alpine Linux v3.5\n        OSType:\n          type: string\n          description: |\n            Generic type of the operating system of the host, as returned by the\n            Go runtime (`GOOS`).\n\n            Currently returned values are \"linux\" and \"windows\". A full list of\n            possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).\n          example: linux\n        Architecture:\n          type: string\n          description: |\n            Hardware architecture of the host, as returned by the Go runtime\n            (`GOARCH`).\n\n            A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).\n          example: x86_64\n        NCPU:\n          type: integer\n          description: |\n            The number of logical CPUs usable by the daemon.\n\n            The number of available CPUs is checked by querying the operating\n            system when the daemon starts. Changes to operating system CPU\n            allocation after the daemon is started are not reflected.\n          example: 4\n        MemTotal:\n          type: integer\n          description: |\n            Total amount of physical memory available on the host, in kilobytes (kB).\n          format: int64\n          example: 2095882240\n        IndexServerAddress:\n          type: string\n          description: |\n            Address / URL of the index server that is used for image search,\n            and as a default for user authentication for Docker Hub and Docker Cloud.\n          example: https://index.docker.io/v1/\n          default: https://index.docker.io/v1/\n        RegistryConfig:\n          $ref: '#/components/schemas/RegistryServiceConfig'\n        GenericResources:\n          $ref: '#/components/schemas/GenericResources'\n        HttpProxy:\n          type: string\n          description: |\n            HTTP-proxy configured for the daemon. This value is obtained from the\n            [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.\n            Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL\n            are masked in the API response.\n\n            Containers do not automatically inherit this configuration.\n          example: http://xxxxx:xxxxx@proxy.corp.example.com:8080\n        HttpsProxy:\n          type: string\n          description: |\n            HTTPS-proxy configured for the daemon. This value is obtained from the\n            [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.\n            Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL\n            are masked in the API response.\n\n            Containers do not automatically inherit this configuration.\n          example: https://xxxxx:xxxxx@proxy.corp.example.com:4443\n        NoProxy:\n          type: string\n          description: |\n            Comma-separated list of domain extensions for which no proxy should be\n            used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)\n            environment variable.\n\n            Containers do not automatically inherit this configuration.\n          example: '*.local, 169.254/16'\n        Name:\n          type: string\n          description: Hostname of the host.\n          example: node5.corp.example.com\n        Labels:\n          type: array\n          description: |\n            User-defined labels (key/value metadata) as set on the daemon.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Note**: When part of a Swarm, nodes can both have _daemon_ labels,\n            \u003e set through the daemon configuration, and _node_ labels, set from a\n            \u003e manager node in the Swarm. Node labels are not included in this\n            \u003e field. Node labels can be retrieved using the `/nodes/(id)` endpoint\n            \u003e on a manager node in the Swarm.\n          example:\n            - storage=ssd\n            - production\n          items:\n            type: string\n        ExperimentalBuild:\n          type: boolean\n          description: |\n            Indicates if experimental features are enabled on the daemon.\n          example: true\n        ServerVersion:\n          type: string\n          description: |\n            Version string of the daemon.\n\n            \u003e **Note**: the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/)\n            \u003e returns the Swarm version instead of the daemon  version, for example\n            \u003e `swarm/1.2.8`.\n          example: 17.06.0-ce\n        ClusterStore:\n          type: string\n          description: |\n            URL of the distributed storage backend.\n\n\n            The storage backend is used for multihost networking (to store\n            network and endpoint information) and by the node discovery mechanism.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Note**: This field is only propagated when using standalone Swarm\n            \u003e mode, and overlay networking using an external k/v store. Overlay\n            \u003e networks with Swarm mode enabled use the built-in raft store, and\n            \u003e this field will be empty.\n          example: consul://consul.corp.example.com:8600/some/path\n        ClusterAdvertise:\n          type: string\n          description: |\n            The network endpoint that the Engine advertises for the purpose of\n            node discovery. ClusterAdvertise is a `host:port` combination on which\n            the daemon is reachable by other hosts.\n\n            \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n            \u003e **Note**: This field is only propagated when using standalone Swarm\n            \u003e mode, and overlay networking using an external k/v store. Overlay\n            \u003e networks with Swarm mode enabled use the built-in raft store, and\n            \u003e this field will be empty.\n          example: node5.corp.example.com:8000\n        Runtimes:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Runtime'\n          description: |\n            List of [OCI compliant](https://github.com/opencontainers/runtime-spec)\n            runtimes configured on the daemon. Keys hold the \"name\" used to\n            reference the runtime.\n\n            The Docker daemon relies on an OCI compliant runtime (invoked via the\n            `containerd` daemon) as its interface to the Linux kernel namespaces,\n            cgroups, and SELinux.\n\n            The default runtime is `runc`, and automatically configured. Additional\n            runtimes can be configured by the user and will be listed here.\n          example:\n            runc:\n              path: runc\n            runc-master:\n              path: /go/bin/runc\n            custom:\n              path: /usr/local/bin/my-oci-runtime\n              runtimeArgs:\n                - --debug\n                - --systemd-cgroup=false\n        DefaultRuntime:\n          type: string\n          description: |\n            Name of the default OCI runtime that is used when starting containers.\n\n            The default can be overridden per-container at create time.\n          example: runc\n          default: runc\n        Swarm:\n          $ref: '#/components/schemas/SwarmInfo'\n        LiveRestoreEnabled:\n          type: boolean\n          description: |\n            Indicates if live restore is enabled.\n\n            If enabled, containers are kept running when the daemon is shutdown\n            or upon daemon start if running containers are detected.\n          example: false\n          default: false\n        Isolation:\n          type: string\n          description: |\n            Represents the isolation technology to use as a default for containers.\n            The supported values are platform-specific.\n\n            If no isolation value is specified on daemon start, on Windows client,\n            the default is `hyperv`, and on Windows server, the default is `process`.\n\n            This option is currently not used on other platforms.\n          default: default\n          enum:\n            - default\n            - hyperv\n            - process\n        InitBinary:\n          type: string\n          description: |\n            Name and, optional, path of the `docker-init` binary.\n\n            If the path is omitted, the daemon searches the host's `$PATH` for the\n            binary and uses the first result.\n          example: docker-init\n        ContainerdCommit:\n          $ref: '#/components/schemas/Commit'\n        RuncCommit:\n          $ref: '#/components/schemas/Commit'\n        InitCommit:\n          $ref: '#/components/schemas/Commit'\n        SecurityOptions:\n          type: array\n          description: |\n            List of security features that are enabled on the daemon, such as\n            apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.\n\n            Additional configuration options for each security feature may\n            be present, and are included as a comma-separated list of key/value\n            pairs.\n          example:\n            - name=apparmor\n            - name=seccomp,profile=default\n            - name=selinux\n            - name=userns\n            - name=rootless\n          items:\n            type: string\n        ProductLicense:\n          type: string\n          description: |\n            Reports a summary of the product license on the daemon.\n\n            If a commercial license has been applied to the daemon, information\n            such as number of nodes, and expiration are included.\n          example: Community Engine\n        Warnings:\n          type: array\n          description: |\n            List of warnings / informational messages about missing features, or\n            issues related to the daemon configuration.\n\n            These messages can be printed by the client as information to the user.\n          example:\n            - 'WARNING: No memory limit support'\n            - 'WARNING: bridge-nf-call-iptables is disabled'\n            - 'WARNING: bridge-nf-call-ip6tables is disabled'\n          items:\n            type: string\n    PluginsInfo:\n      type: object\n      properties:\n        Volume:\n          type: array\n          description: Names of available volume-drivers, and network-driver plugins.\n          example:\n            - local\n          items:\n            type: string\n        Network:\n          type: array\n          description: Names of available network-drivers, and network-driver plugins.\n          example:\n            - bridge\n            - host\n            - ipvlan\n            - macvlan\n            - null\n            - overlay\n          items:\n            type: string\n        Authorization:\n          type: array\n          description: Names of available authorization plugins.\n          example:\n            - img-authz-plugin\n            - hbm\n          items:\n            type: string\n        Log:\n          type: array\n          description: Names of available logging-drivers, and logging-driver plugins.\n          example:\n            - awslogs\n            - fluentd\n            - gcplogs\n            - gelf\n            - journald\n            - json-file\n            - logentries\n            - splunk\n            - syslog\n          items:\n            type: string\n      description: |\n        Available plugins per type.\n\n        \u003cp\u003e\u003cbr /\u003e\u003c/p\u003e\n\n        \u003e **Note**: Only unmanaged (V1) plugins are included in this list.\n        \u003e V1 plugins are \"lazily\" loaded, and are not returned in this list\n        \u003e if there is no resource using the plugin.\n    RegistryServiceConfig:\n      type: object\n      properties:\n        AllowNondistributableArtifactsCIDRs:\n          type: array\n          description: |\n            List of IP ranges to which nondistributable artifacts can be pushed,\n            using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).\n\n            Some images (for example, Windows base images) contain artifacts\n            whose distribution is restricted by license. When these images are\n            pushed to a registry, restricted artifacts are not included.\n\n            This configuration override this behavior, and enables the daemon to\n            push nondistributable artifacts to all registries whose resolved IP\n            address is within the subnet described by the CIDR syntax.\n\n            This option is useful when pushing images containing\n            nondistributable artifacts to a registry on an air-gapped network so\n            hosts on that network can pull the images without connecting to\n            another server.\n\n            \u003e **Warning**: Nondistributable artifacts typically have restrictions\n            \u003e on how and where they can be distributed and shared. Only use this\n            \u003e feature to push artifacts to private registries and ensure that you\n            \u003e are in compliance with any terms that cover redistributing\n            \u003e nondistributable artifacts.\n          example:\n            - ::1/128\n            - 127.0.0.0/8\n          items:\n            type: string\n        AllowNondistributableArtifactsHostnames:\n          type: array\n          description: |\n            List of registry hostnames to which nondistributable artifacts can be\n            pushed, using the format `\u003chostname\u003e[:\u003cport\u003e]` or `\u003cIP address\u003e[:\u003cport\u003e]`.\n\n            Some images (for example, Windows base images) contain artifacts\n            whose distribution is restricted by license. When these images are\n            pushed to a registry, restricted artifacts are not included.\n\n            This configuration override this behavior for the specified\n            registries.\n\n            This option is useful when pushing images containing\n            nondistributable artifacts to a registry on an air-gapped network so\n            hosts on that network can pull the images without connecting to\n            another server.\n\n            \u003e **Warning**: Nondistributable artifacts typically have restrictions\n            \u003e on how and where they can be distributed and shared. Only use this\n            \u003e feature to push artifacts to private registries and ensure that you\n            \u003e are in compliance with any terms that cover redistributing\n            \u003e nondistributable artifacts.\n          example:\n            - registry.internal.corp.example.com:3000\n            - '[2001:db8:a0b:12f0::1]:443'\n          items:\n            type: string\n        InsecureRegistryCIDRs:\n          type: array\n          description: |\n            List of IP ranges of insecure registries, using the CIDR syntax\n            ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries\n            accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates\n            from unknown CAs) communication.\n\n            By default, local registries (`127.0.0.0/8`) are configured as\n            insecure. All other registries are secure. Communicating with an\n            insecure registry is not possible if the daemon assumes that registry\n            is secure.\n\n            This configuration override this behavior, insecure communication with\n            registries whose resolved IP address is within the subnet described by\n            the CIDR syntax.\n\n            Registries can also be marked insecure by hostname. Those registries\n            are listed under `IndexConfigs` and have their `Secure` field set to\n            `false`.\n\n            \u003e **Warning**: Using this option can be useful when running a local\n            \u003e registry, but introduces security vulnerabilities. This option\n            \u003e should therefore ONLY be used for testing purposes. For increased\n            \u003e security, users should add their CA to their system's list of trusted\n            \u003e CAs instead of enabling this option.\n          example:\n            - ::1/128\n            - 127.0.0.0/8\n          items:\n            type: string\n        IndexConfigs:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/IndexInfo'\n          example:\n            127.0.0.1:5000:\n              Name: 127.0.0.1:5000\n              Mirrors: []\n              Secure: false\n              Official: false\n            '[2001:db8:a0b:12f0::1]:80':\n              Name: '[2001:db8:a0b:12f0::1]:80'\n              Mirrors: []\n              Secure: false\n              Official: false\n            docker.io:\n              Name: docker.io\n              Mirrors:\n                - https://hub-mirror.corp.example.com:5000/\n              Secure: true\n              Official: true\n            registry.internal.corp.example.com:3000:\n              Name: registry.internal.corp.example.com:3000\n              Mirrors: []\n              Secure: false\n              Official: false\n        Mirrors:\n          type: array\n          description: |\n            List of registry URLs that act as a mirror for the official\n            (`docker.io`) registry.\n          example:\n            - https://hub-mirror.corp.example.com:5000/\n            - https://[2001:db8:a0b:12f0::1]/\n          items:\n            type: string\n      description: |\n        RegistryServiceConfig stores daemon registry services configuration.\n      nullable: true\n      x-nullable: true\n    IndexInfo:\n      type: object\n      properties:\n        Name:\n          type: string\n          description: |\n            Name of the registry, such as \"docker.io\".\n          example: docker.io\n        Mirrors:\n          type: array\n          description: |\n            List of mirrors, expressed as URIs.\n          example:\n            - https://hub-mirror.corp.example.com:5000/\n            - https://registry-2.docker.io/\n            - https://registry-3.docker.io/\n          items:\n            type: string\n        Secure:\n          type: boolean\n          description: |\n            Indicates if the registry is part of the list of insecure\n            registries.\n\n            If `false`, the registry is insecure. Insecure registries accept\n            un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from\n            unknown CAs) communication.\n\n            \u003e **Warning**: Insecure registries can be useful when running a local\n            \u003e registry. However, because its use creates security vulnerabilities\n            \u003e it should ONLY be enabled for testing purposes. For increased\n            \u003e security, users should add their CA to their system's list of\n            \u003e trusted CAs instead of enabling this option.\n          example: true\n        Official:\n          type: boolean\n          description: |\n            Indicates whether this is an official registry (i.e., Docker Hub / docker.io)\n          example: true\n      description: IndexInfo contains information about a registry.\n      nullable: true\n      x-nullable: true\n    Runtime:\n      type: object\n      properties:\n        path:\n          type: string\n          description: |\n            Name and, optional, path, of the OCI executable binary.\n\n            If the path is omitted, the daemon searches the host's `$PATH` for the\n            binary and uses the first result.\n          example: /usr/local/bin/my-oci-runtime\n        runtimeArgs:\n          type: array\n          description: |\n            List of command-line arguments to pass to the runtime when invoked.\n          nullable: true\n          example:\n            - --debug\n            - --systemd-cgroup=false\n          items:\n            type: string\n      description: |\n        Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec)\n        runtime.\n\n        The runtime is invoked by the daemon via the `containerd` daemon. OCI\n        runtimes act as an interface to the Linux kernel namespaces, cgroups,\n        and SELinux.\n    Commit:\n      type: object\n      properties:\n        ID:\n          type: string\n          description: Actual commit ID of external tool.\n          example: cfb82a876ecc11b5ca0977d1733adbe58599088a\n        Expected:\n          type: string\n          description: |\n            Commit ID of external tool expected by dockerd as set at build time.\n          example: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4\n      description: |\n        Commit holds the Git-commit (SHA1) that a binary was built from, as\n        reported in the version-string of external tools, such as `containerd`,\n        or `runC`.\n    SwarmInfo:\n      type: object\n      properties:\n        NodeID:\n          type: string\n          description: Unique identifier of for this node in the swarm.\n          example: k67qz4598weg5unwwffg6z1m1\n          default: \"\"\n        NodeAddr:\n          type: string\n          description: |\n            IP address at which this node can be reached by other nodes in the\n            swarm.\n          example: 10.0.0.46\n          default: \"\"\n        LocalNodeState:\n          $ref: '#/components/schemas/LocalNodeState'\n        ControlAvailable:\n          type: boolean\n          example: true\n          default: false\n        Error:\n          type: string\n          default: \"\"\n        RemoteManagers:\n          type: array\n          description: |\n            List of ID's and addresses of other managers in the swarm.\n          nullable: true\n          example:\n            - NodeID: 71izy0goik036k48jg985xnds\n              Addr: 10.0.0.158:2377\n            - NodeID: 79y6h1o4gv8n120drcprv5nmc\n              Addr: 10.0.0.159:2377\n            - NodeID: k67qz4598weg5unwwffg6z1m1\n              Addr: 10.0.0.46:2377\n          items:\n            $ref: '#/components/schemas/PeerNode'\n        Nodes:\n          type: integer\n          description: Total number of nodes in the swarm.\n          nullable: true\n          example: 4\n        Managers:\n          type: integer\n          description: Total number of managers in the swarm.\n          nullable: true\n          example: 3\n        Cluster:\n          $ref: '#/components/schemas/ClusterInfo'\n      description: |\n        Represents generic information about swarm.\n    LocalNodeState:\n      type: string\n      description: Current local status of this node.\n      example: active\n      default: \"\"\n      enum:\n        - \"\"\n        - inactive\n        - pending\n        - active\n        - error\n        - locked\n    PeerNode:\n      type: object\n      properties:\n        NodeID:\n          type: string\n          description: Unique identifier of for this node in the swarm.\n        Addr:\n          type: string\n          description: |\n            IP address and ports at which this node can be reached.\n      description: Represents a peer-node in the swarm\n    NetworkAttachmentConfig:\n      type: object\n      properties:\n        Target:\n          type: string\n          description: The target network for attachment. Must be a network name or\n            ID.\n        Aliases:\n          type: array\n          description: Discoverable alternate names for the service on this network.\n          items:\n            type: string\n        DriverOpts:\n          type: object\n          additionalProperties:\n            type: string\n          description: Driver attachment options for the network target\n      description: Specifies how a service should be attached to a particular network.\n"
		}
	},
	"Error": "make ir: path \"/images/create\": post: requestBody: contents: application/octet-stream: octet stream with schema not supported"
}