{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openebs/mayastor-control-plane"
		},
		"file": {
			"name": "v0_api_spec.yaml",
			"path": "control-plane/rest/openapi-specs/v0_api_spec.yaml",
			"content": "openapi: 3.0.3\ninfo:\n  title: Mayastor RESTful API\n  version: v0\nservers:\n  - url: /v0\npaths:\n  /nexuses:\n    get:\n      tags:\n        - Nexuses\n      operationId: get_nexuses\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Nexus'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nexuses/{nexus_id}':\n    get:\n      tags:\n        - Nexuses\n      operationId: get_nexus\n      parameters:\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Nexus'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    delete:\n      tags:\n        - Nexuses\n      operationId: del_nexus\n      parameters:\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nexuses/{nexus_id}/children':\n    get:\n      tags:\n        - Children\n      operationId: get_nexus_children\n      parameters:\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Child'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nexuses/{nexus_id}/children/{child_id}':\n    get:\n      tags:\n        - Children\n      operationId: get_nexus_child\n      parameters:\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: path\n          name: child_id\n          required: true\n          schema:\n            type: string\n            format: url\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Child'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    put:\n      tags:\n        - Children\n      operationId: put_nexus_child\n      parameters:\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: path\n          name: child_id\n          required: true\n          schema:\n            type: string\n            format: url\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Child'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    delete:\n      tags:\n        - Children\n      operationId: del_nexus_child\n      parameters:\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: path\n          name: child_id\n          required: true\n          schema:\n            type: string\n            format: url\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  /nodes:\n    get:\n      tags:\n        - Nodes\n      operationId: get_nodes\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Node'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{id}':\n    get:\n      tags:\n        - Nodes\n      operationId: get_node\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{id}/nexuses':\n    get:\n      tags:\n        - Nexuses\n      operationId: get_node_nexuses\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Nexus'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{id}/pools':\n    get:\n      tags:\n        - Pools\n      operationId: get_node_pools\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pool'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{id}/replicas':\n    get:\n      tags:\n        - Replicas\n      operationId: get_node_replicas\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Replica'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{node_id}/nexuses/{nexus_id}':\n    get:\n      tags:\n        - Nexuses\n      operationId: get_node_nexus\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Nexus'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    put:\n      tags:\n        - Nexuses\n      operationId: put_node_nexus\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateNexusBody'\n        required: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Nexus'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    delete:\n      tags:\n        - Nexuses\n      operationId: del_node_nexus\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{node_id}/nexuses/{nexus_id}/children':\n    get:\n      tags:\n        - Children\n      operationId: get_node_nexus_children\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Child'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{node_id}/nexuses/{nexus_id}/children/{child_id}':\n    get:\n      tags:\n        - Children\n      operationId: get_node_nexus_child\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: path\n          name: child_id\n          required: true\n          schema:\n            type: string\n            format: url\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Child'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    put:\n      tags:\n        - Children\n      operationId: put_node_nexus_child\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: path\n          name: child_id\n          required: true\n          schema:\n            type: string\n            format: url\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Child'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    delete:\n      tags:\n        - Children\n      operationId: del_node_nexus_child\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: path\n          name: child_id\n          required: true\n          schema:\n            type: string\n            format: url\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{node_id}/nexuses/{nexus_id}/share':\n    delete:\n      tags:\n        - Nexuses\n      operationId: del_node_nexus_share\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{node_id}/nexuses/{nexus_id}/share/{protocol}':\n    put:\n      tags:\n        - Nexuses\n      operationId: put_node_nexus_share\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: nexus_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: path\n          name: protocol\n          required: true\n          schema:\n            $ref: '#/components/schemas/NexusShareProtocol'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{node_id}/pools/{pool_id}':\n    get:\n      tags:\n        - Pools\n      operationId: get_node_pool\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pool'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    put:\n      tags:\n        - Pools\n      operationId: put_node_pool\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreatePoolBody'\n        required: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pool'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    delete:\n      tags:\n        - Pools\n      operationId: del_node_pool\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{node_id}/pools/{pool_id}/replicas':\n    get:\n      tags:\n        - Replicas\n      operationId: get_node_pool_replicas\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Replica'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{node_id}/pools/{pool_id}/replicas/{replica_id}':\n    get:\n      tags:\n        - Replicas\n      operationId: get_node_pool_replica\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n        - in: path\n          name: replica_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Replica'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    put:\n      tags:\n        - Replicas\n      operationId: put_node_pool_replica\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n        - in: path\n          name: replica_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateReplicaBody'\n        required: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Replica'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    delete:\n      tags:\n        - Replicas\n      operationId: del_node_pool_replica\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n        - in: path\n          name: replica_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{node_id}/pools/{pool_id}/replicas/{replica_id}/share':\n    delete:\n      tags:\n        - Replicas\n      operationId: del_node_pool_replica_share\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n        - in: path\n          name: replica_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{node_id}/pools/{pool_id}/replicas/{replica_id}/share/nvmf':\n    put:\n      tags:\n        - Replicas\n      operationId: put_node_pool_replica_share\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n        - in: path\n          name: replica_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{node_id}/volumes':\n    get:\n      tags:\n        - Volumes\n      operationId: get_node_volumes\n      parameters:\n        - in: path\n          name: node_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Volume'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{node}/block_devices':\n    get:\n      tags:\n        - BlockDevices\n      operationId: get_node_block_devices\n      parameters:\n        - in: query\n          name: all\n          description: specifies whether to list all devices or only usable ones\n          schema:\n            type: boolean\n        - in: path\n          name: node\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BlockDevice'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/nodes/{node}/jsongrpc/{method}':\n    put:\n      tags:\n        - JsonGrpc\n      operationId: put_node_jsongrpc\n      parameters:\n        - in: path\n          name: node\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: path\n          name: method\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JsonGeneric'\n        required: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JsonGeneric'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  /pools:\n    get:\n      tags:\n        - Pools\n      operationId: get_pools\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pool'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/pools/{pool_id}':\n    get:\n      tags:\n        - Pools\n      operationId: get_pool\n      parameters:\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pool'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    delete:\n      tags:\n        - Pools\n      operationId: del_pool\n      parameters:\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/pools/{pool_id}/replicas/{replica_id}':\n    put:\n      tags:\n        - Replicas\n      operationId: put_pool_replica\n      parameters:\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n        - in: path\n          name: replica_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateReplicaBody'\n        required: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Replica'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    delete:\n      tags:\n        - Replicas\n      operationId: del_pool_replica\n      parameters:\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n        - in: path\n          name: replica_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/pools/{pool_id}/replicas/{replica_id}/share':\n    delete:\n      tags:\n        - Replicas\n      operationId: del_pool_replica_share\n      parameters:\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n        - in: path\n          name: replica_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/pools/{pool_id}/replicas/{replica_id}/share/nvmf':\n    put:\n      tags:\n        - Replicas\n      operationId: put_pool_replica_share\n      parameters:\n        - in: path\n          name: pool_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/PoolId'\n        - in: path\n          name: replica_id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  /replicas:\n    get:\n      tags:\n        - Replicas\n      operationId: get_replicas\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Replica'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/replicas/{id}':\n    get:\n      tags:\n        - Replicas\n      operationId: get_replica\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Replica'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  /specs:\n    get:\n      tags:\n        - Specs\n      operationId: get_specs\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Specs'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  /volumes:\n    get:\n      tags:\n        - Volumes\n      operationId: get_volumes\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Volume'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/volumes/{volume_id}':\n    get:\n      tags:\n        - Volumes\n      operationId: get_volume\n      parameters:\n        - in: path\n          name: volume_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/VolumeId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Volume'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    put:\n      tags:\n        - Volumes\n      operationId: put_volume\n      parameters:\n        - in: path\n          name: volume_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/VolumeId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateVolumeBody'\n        required: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Volume'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    delete:\n      tags:\n        - Volumes\n      operationId: del_volume\n      parameters:\n        - in: path\n          name: volume_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/VolumeId'\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/volumes/{volume_id}/replica_count/{replica_count}':\n    put:\n      tags:\n        - Volumes\n      operationId: put_volume_replica_count\n      parameters:\n        - in: path\n          name: volume_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/VolumeId'\n        - in: path\n          name: replica_count\n          required: true\n          schema:\n            type: integer\n            format: uint8\n            minimum: 1\n            maximum: 255\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Volume'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/volumes/{volume_id}/target':\n    put:\n      tags:\n        - Volumes\n      operationId: put_volume_target\n      description: |-\n        Create a volume target connectable for front-end IO from the specified node.\n        Due to a limitation, this must currently be a mayastor storage node.\n      parameters:\n        - in: path\n          name: volume_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/VolumeId'\n        - in: query\n          description: |-\n            The node where the front-end workload resides.\n            If the workload moves then the volume must be republished.\n          name: node\n          required: true\n          schema:\n            $ref: '#/components/schemas/NodeId'\n        - in: query\n          description: The protocol used to connect to the front-end node.\n          name: protocol\n          required: true\n          schema:\n            $ref: '#/components/schemas/VolumeShareProtocol'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Volume'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    delete:\n      tags:\n        - Volumes\n      operationId: del_volume_target\n      parameters:\n        - in: path\n          name: volume_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/VolumeId'\n        - in: query\n          name: force\n          description: |-\n            Force unpublish if the node is not online. This should only be used when it is safe to do so, eg: when the node is not coming back up.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Volume'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: [ ]\n  '/volumes/{volume_id}/share/{protocol}':\n    put:\n      tags:\n        - Volumes\n      operationId: put_volume_share\n      parameters:\n        - in: path\n          name: volume_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/VolumeId'\n        - in: path\n          name: protocol\n          required: true\n          schema:\n            $ref: '#/components/schemas/VolumeShareProtocol'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/volumes{volume_id}/share':\n    delete:\n      tags:\n        - Volumes\n      operationId: del_share\n      parameters:\n        - in: path\n          name: volume_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/VolumeId'\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n  '/watches/volumes/{volume_id}':\n    get:\n      tags:\n        - Watches\n      operationId: get_watch_volume\n      parameters:\n        - in: path\n          name: volume_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/VolumeId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RestWatch'\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    put:\n      tags:\n        - Watches\n      operationId: put_watch_volume\n      parameters:\n        - in: path\n          name: volume_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/VolumeId'\n        - in: query\n          name: callback\n          description: URL callback\n          required: true\n          schema:\n            type: string\n            format: uri\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\n    delete:\n      tags:\n        - Watches\n      operationId: del_watch_volume\n      parameters:\n        - in: path\n          name: volume_id\n          required: true\n          schema:\n            $ref: '#/components/schemas/VolumeId'\n        - in: query\n          name: callback\n          description: URL callback\n          required: true\n          schema:\n            type: string\n            format: uri\n      responses:\n        '204':\n          description: OK\n        '4XX':\n          $ref: '#/components/responses/ClientError'\n        '5XX':\n          $ref: '#/components/responses/ServerError'\n      security:\n        - JWT: []\ncomponents:\n  securitySchemes:\n    JWT:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    VolumeId:\n      example: ec4e66fd-3b33-4439-b504-d49aba53da26\n      type: string\n      format: uuid\n    NodeId:\n      description: storage node identifier\n      example: mayastor-1\n      type: string\n    PoolId:\n      description: storage pool identifier\n      example: pool-1\n      type: string\n    BlockDevice:\n      example:\n        available: false\n        devlinks:\n          - ''\n        devmajor: 0\n        devminor: 0\n        devname: ''\n        devpath: ''\n        devtype: ''\n        filesystem:\n          fstype: ''\n          label: ''\n          mountpoint: ''\n          uuid: ''\n        model: ''\n        partition:\n          name: ''\n          number: 0\n          parent: ''\n          scheme: ''\n          typeid: ''\n          uuid: ''\n        size: 0\n      description: Block device information\n      type: object\n      properties:\n        available:\n          description: |-\n            identifies if device is available for use (ie. is not \"currently\" in\n             use)\n          type: boolean\n        devlinks:\n          description: list of udev generated symlinks by which device may be identified\n          type: array\n          items:\n            type: string\n        devmajor:\n          description: major device number\n          type: integer\n          format: int32\n        devminor:\n          description: minor device number\n          type: integer\n          format: int32\n        devname:\n          description: entry in /dev associated with device\n          type: string\n        devpath:\n          description: official device path\n          type: string\n        devtype:\n          description: currently \"disk\" or \"partition\"\n          type: string\n        filesystem:\n          example:\n            fstype: ''\n            label: ''\n            mountpoint: ''\n            uuid: ''\n          description: filesystem information in case where a filesystem is present\n          type: object\n          properties:\n            fstype:\n              description: 'filesystem type: ext3, ntfs, ...'\n              type: string\n            label:\n              description: volume label\n              type: string\n            mountpoint:\n              description: path where filesystem is currently mounted\n              type: string\n            uuid:\n              description: UUID identifying the volume (filesystem)\n              type: string\n          required:\n            - fstype\n            - label\n            - mountpoint\n            - uuid\n        model:\n          description: device model - useful for identifying mayastor devices\n          type: string\n        partition:\n          example:\n            name: ''\n            number: 0\n            parent: ''\n            scheme: ''\n            typeid: ''\n            uuid: ''\n          description: partition information in case where device represents a partition\n          type: object\n          properties:\n            name:\n              description: partition name\n              type: string\n            number:\n              description: partition number\n              type: integer\n              format: int32\n            parent:\n              description: devname of parent device to which this partition belongs\n              type: string\n            scheme:\n              description: 'partition scheme: gpt, dos, ...'\n              type: string\n            typeid:\n              description: partition type identifier\n              type: string\n            uuid:\n              description: UUID identifying partition\n              type: string\n          required:\n            - name\n            - number\n            - parent\n            - scheme\n            - typeid\n            - uuid\n        size:\n          description: size of device in (512 byte) blocks\n          type: integer\n          format: int64\n      required:\n        - available\n        - devlinks\n        - devmajor\n        - devminor\n        - devname\n        - devpath\n        - devtype\n        - filesystem\n        - model\n        - partition\n        - size\n    ChildState:\n      example: Online\n      description: State of a Nexus Child\n      type: string\n      enum:\n        - Unknown\n        - Online\n        - Degraded\n        - Faulted\n    Child:\n      example:\n        rebuildProgress: null\n        state: Online\n        uri: 'nvmf://10.1.0.5:8420/nqn.2019-05.io.openebs:37d83441-e8ef-4e17-a29e-25169d91cb96'\n      description: Child information\n      type: object\n      properties:\n        rebuildProgress:\n          description: current rebuild progress (%)\n          type: integer\n          minimum: 0\n          maximum: 100\n        state:\n          description: state of the child\n          allOf:\n            - $ref: '#/components/schemas/ChildState'\n        uri:\n          description: uri of the child device\n          type: string\n      required:\n        - state\n        - uri\n    CreateNexusBody:\n      example:\n        children:\n          - 'nvmf://10.1.0.5:8420/nqn.2019-05.io.openebs:37d83441-e8ef-4e17-a29e-25169d91cb96'\n        size: 80241024\n      description: Create Nexus Body JSON\n      type: object\n      properties:\n        children:\n          description: |-\n            replica can be iscsi and nvmf remote targets or a local spdk bdev\n             (i.e. bdev:///name-of-the-bdev).\n\n             uris to the targets we connect to\n          type: array\n          items:\n            type: string\n        size:\n          description: size of the device in bytes\n          type: integer\n          format: int64\n          minimum: 0\n      required:\n        - children\n        - size\n    CreatePoolBody:\n      example:\n        disks:\n          - 'malloc:///disk?size_mb=100'\n      description: Create Pool Body JSON\n      type: object\n      properties:\n        disks:\n          description: disk device paths or URIs to be claimed by the pool\n          type: array\n          items:\n            example: 'malloc:///disk?size_mb=100'\n            description: |-\n              Pool device URI\n               Can be specified in the form of a file path or a URI\n               eg: /dev/sda, aio:///dev/sda, malloc:///disk?size_mb=100\n            type: string\n        labels:\n          description: labels to be set on the pools\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - disks\n    CreateReplicaBody:\n      example:\n        size: 80241024\n        thin: false\n      description: Create Replica Body JSON\n      type: object\n      properties:\n        share:\n          $ref: '#/components/schemas/ReplicaShareProtocol'\n        size:\n          description: size of the replica in bytes\n          type: integer\n          format: int64\n          minimum: 0\n        thin:\n          description: thin provisioning\n          type: boolean\n      required:\n        - size\n        - thin\n    PoolTopology:\n      example:\n        explicit: null\n        labelled: null\n      description: |-\n        Used to determine how to place/distribute the data during volume creation and replica replacement.\n         If left empty then the control plane will select from all available resources.\n      type: object\n      properties:\n        labelled:\n          description: volume pool topology definition through labels\n          allOf:\n            - $ref: '#/components/schemas/LabelledTopology'\n      additionalProperties: false\n      oneOf:\n        - required:\n            - labelled\n    ExplicitNodeTopology:\n      example:\n        allowed_nodes:\n          - ''\n        preferred_nodes:\n          - ''\n      description: 'volume topology, explicitly selected'\n      type: object\n      properties:\n        allowed_nodes:\n          description: replicas can only be placed on these nodes\n          type: array\n          items:\n            type: string\n        preferred_nodes:\n          description: preferred nodes to place the replicas\n          type: array\n          items:\n            type: string\n      required:\n        - allowed_nodes\n        - preferred_nodes\n    LabelledTopology:\n      example:\n        exclusion:\n          - ''\n        inclusion:\n          - ''\n      description: labelled topology\n      type: object\n      properties:\n        exclusion:\n          example: ''\n          description: |-\n            Excludes resources with the same $label name, eg:\n             \"Zone\" would not allow for resources with the same \"Zone\" value\n             to be used for a certain operation, eg:\n             A node with \"Zone: A\" would not be paired up with a node with \"Zone: A\",\n             but it could be paired up with a node with \"Zone: B\"\n             exclusive label NAME in the form \"NAME\", and not \"NAME: VALUE\"\n          type: object\n          additionalProperties:\n            type: string\n        inclusion:\n          example: ''\n          description: |-\n            Includes resources with the same $label or $label:$value eg:\n             if label is \"Zone: A\":\n             A resource with \"Zone: A\" would be paired up with a resource with \"Zone: A\",\n             but not with a resource with \"Zone: B\"\n             if label is \"Zone\":\n             A resource with \"Zone: A\" would be paired up with a resource with \"Zone: B\",\n             but not with a resource with \"OtherLabel: B\"\n             inclusive label key value in the form \"NAME: VALUE\"\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - exclusion\n        - inclusion\n    Topology:\n      description: node and pool topology for volumes\n      type: object\n      properties:\n        node_topology:\n          $ref: '#/components/schemas/NodeTopology'\n        pool_topology:\n          $ref: '#/components/schemas/PoolTopology'\n    NodeTopology:\n      example:\n        explicit: null\n        labelled: null\n      description: |-\n        Used to determine how to place/distribute the data during volume creation and replica replacement.\n         If left empty then the control plane will select from all available resources.\n      type: object\n      properties:\n        explicit:\n          description: volume topology, explicitly selected\n          allOf:\n            - $ref: '#/components/schemas/ExplicitNodeTopology'\n        labelled:\n          description: volume topology definition through labels\n          allOf:\n            - $ref: '#/components/schemas/LabelledTopology'\n      additionalProperties: false\n      oneOf:\n        - required:\n            - explicit\n        - required:\n            - labelled\n    VolumePolicy:\n      example:\n        self_heal: true\n      description: Volume policy used to determine if and how to replace a replica\n      type: object\n      properties:\n        self_heal:\n          description: If true the control plane will attempt to heal the volume by itself\n          type: boolean\n      required:\n        - self_heal\n    CreateVolumeBody:\n      example:\n        policy:\n          self_heal: true\n        replicas: 1\n        size: 10485761\n        topology: null\n      description: Create Volume Body JSON\n      type: object\n      properties:\n        policy:\n          $ref: '#/components/schemas/VolumePolicy'\n        replicas:\n          description: number of storage replicas\n          type: integer\n          format: uint8\n          minimum: 0\n          maximum: 255\n        size:\n          description: size of the volume in bytes\n          type: integer\n          format: int64\n          minimum: 0\n        topology:\n          $ref: '#/components/schemas/Topology'\n        labels:\n          description: Optionally used to store custom volume information\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - policy\n        - replicas\n        - size\n    JsonGeneric:\n      description: 'Generic JSON value eg: { \"size\": 1024 }'\n      type: object\n    NexusState:\n      description: State of the Nexus\n      type: string\n      enum:\n        - Unknown\n        - Online\n        - Degraded\n        - Faulted\n    Nexus:\n      example:\n        children:\n          - rebuildProgress: null\n            state: Online\n            uri: 'nvmf://10.1.0.5:8420/nqn.2019-05.io.openebs:replica1'\n        deviceUri: null\n        node: mayastor-1\n        rebuilds: 0\n        protocol: nvmf\n        size: 8024024\n        state: Online\n        uuid: 514ed1c8-7174-49ac-b9cd-ad44ef670a67\n      description: Nexus information\n      type: object\n      properties:\n        children:\n          description: Array of Nexus Children\n          type: array\n          items:\n            $ref: '#/components/schemas/Child'\n        deviceUri:\n          description: |-\n            URI of the device for the volume (missing if not published).\n             Missing property and empty string are treated the same.\n          type: string\n        node:\n          description: id of the mayastor instance\n          type: string\n        rebuilds:\n          description: total number of rebuild tasks\n          type: integer\n          format: int32\n          minimum: 0\n        protocol:\n          $ref: '#/components/schemas/Protocol'\n        size:\n          description: size of the volume in bytes\n          type: integer\n          format: int64\n          minimum: 0\n        state:\n          $ref: '#/components/schemas/NexusState'\n        uuid:\n          description: uuid of the nexus\n          type: string\n          format: uuid\n      required:\n        - children\n        - deviceUri\n        - node\n        - rebuilds\n        - protocol\n        - size\n        - state\n        - uuid\n    NodeStatus:\n      description: deemed state of the node\n      type: string\n      enum:\n        - Unknown\n        - Online\n        - Offline\n    NodeSpec:\n      example:\n        grpcEndpoint: '10.1.0.5:10124'\n        id: mayastor-1\n      description: mayastor storage node information\n      type: object\n      properties:\n        grpcEndpoint:\n          description: gRPC endpoint of the mayastor instance\n          type: string\n        id:\n          $ref: '#/components/schemas/NodeId'\n      required:\n        - grpcEndpoint\n        - id\n    NodeState:\n      example:\n        grpcEndpoint: '10.1.0.5:10124'\n        id: mayastor-1\n        status: Online\n      description: mayastor storage node information\n      type: object\n      properties:\n        grpcEndpoint:\n          description: gRPC endpoint of the mayastor instance\n          type: string\n        id:\n          $ref: '#/components/schemas/NodeId'\n        status:\n          $ref: '#/components/schemas/NodeStatus'\n      required:\n        - grpcEndpoint\n        - id\n        - status\n    Node:\n      description: mayastor storage node information\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/NodeId'\n        spec:\n          $ref: '#/components/schemas/NodeSpec'\n        state:\n          $ref: '#/components/schemas/NodeState'\n      required:\n        - id\n    PoolStatus:\n      description: current status of the pool\n      type: string\n      enum:\n        - Unknown\n        - Online\n        - Degraded\n        - Faulted\n    Pool:\n      description: Pool object, comprised of a spec and a state\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/PoolId'\n        spec:\n          $ref: '#/components/schemas/PoolSpec'\n        state:\n          $ref: '#/components/schemas/PoolState'\n      required:\n        - id\n      minProperties: 2\n    PoolState:\n      description: State of a pool, as reported by mayastor\n      type: object\n      properties:\n        capacity:\n          description: size of the pool in bytes\n          example: 10737418240\n          type: integer\n          format: int64\n          minimum: 0\n        disks:\n          description: absolute disk paths claimed by the pool\n          type: array\n          items:\n            example: 'aio:///dev/sda?uuid=caede6dd-5732-4771-8cb6-c32315ed28d3'\n            description: |-\n              Pool device URI\n               Can be specified in the form of a file path or a URI\n               eg: /dev/sda, aio:///dev/sda, malloc:///disk?size_mb=100\n            type: string\n        id:\n          $ref: '#/components/schemas/PoolId'\n        node:\n          $ref: '#/components/schemas/NodeId'\n        status:\n          $ref: '#/components/schemas/PoolStatus'\n        used:\n          description: used bytes from the pool\n          type: integer\n          format: int64\n          minimum: 0\n      required:\n        - capacity\n        - disks\n        - id\n        - node\n        - status\n        - used\n    ReplicaState:\n      description: state of the replica\n      type: string\n      enum:\n        - Unknown\n        - Online\n        - Degraded\n        - Faulted\n    Replica:\n      description: Replica information\n      type: object\n      properties:\n        node:\n          $ref: '#/components/schemas/NodeId'\n        pool:\n          $ref: '#/components/schemas/PoolId'\n        share:\n          $ref: '#/components/schemas/Protocol'\n        size:\n          description: size of the replica in bytes\n          example: 80241024\n          type: integer\n          format: int64\n          minimum: 0\n        state:\n          $ref: '#/components/schemas/ReplicaState'\n        thin:\n          description: thin provisioning\n          example: false\n          type: boolean\n        uri:\n          description: uri usable by nexus to access it\n          example: 'nvmf://10.1.0.5:8420/nqn.2019-05.io.openebs:fb04022b-1ca1-4789-bcd4-dacbcb54e23c'\n          type: string\n        uuid:\n          description: uuid of the replica\n          type: string\n          format: uuid\n      required:\n        - node\n        - pool\n        - share\n        - size\n        - state\n        - thin\n        - uri\n        - uuid\n    RestJsonError:\n      example:\n        details: The Pool 'pooloop' was not found\n        kind: NotFound\n      description: Rest Json Error format\n      type: object\n      properties:\n        details:\n          description: detailed error information\n          type: string\n        kind:\n          description: error kind\n          type: string\n          enum:\n            - Timeout\n            - Deserialize\n            - Internal\n            - InvalidArgument\n            - DeadlineExceeded\n            - NotFound\n            - AlreadyExists\n            - PermissionDenied\n            - ResourceExhausted\n            - FailedPrecondition\n            - NotShared\n            - NotPublished\n            - AlreadyPublished\n            - AlreadyShared\n            - Aborted\n            - OutOfRange\n            - Unimplemented\n            - Unavailable\n            - Unauthenticated\n            - Unauthorized\n            - Conflict\n            - FailedPersist\n            - Deleting\n            - InUse\n      required:\n        - details\n        - kind\n    RestWatch:\n      example:\n        callback: 'https://api.myserver.com/volume/e2fc5ce8-a56e-47a1-94e9-04dd2f73b88f/callback'\n        resource: e2fc5ce8-a56e-47a1-94e9-04dd2f73b88f\n      description: Watch Resource in the store\n      type: object\n      properties:\n        callback:\n          description: callback used to notify the watcher of a change\n          type: string\n        resource:\n          description: id of the resource to watch on\n          type: string\n      required:\n        - callback\n        - resource\n    Specs:\n      description: Specs detailing the requested configuration of the objects.\n      type: object\n      properties:\n        nexuses:\n          description: Nexus Specs\n          type: array\n          items:\n            $ref: '#/components/schemas/NexusSpec'\n        pools:\n          description: Pool Specs\n          type: array\n          items:\n            $ref: '#/components/schemas/PoolSpec'\n        replicas:\n          description: Replica Specs\n          type: array\n          items:\n            $ref: '#/components/schemas/ReplicaSpec'\n        volumes:\n          description: Volume Specs\n          type: array\n          items:\n            $ref: '#/components/schemas/VolumeSpec'\n      required:\n        - nexuses\n        - pools\n        - replicas\n        - volumes\n    NexusSpec:\n      example:\n        children:\n          - 'nvmf://10.1.0.5:8420/nqn.2019-05.io.openebs:37d83441-e8ef-4e17-a29e-25169d91cb96'\n        managed: false\n        node: mayastor-1\n        operation: null\n        owner: null\n        share: none\n        size: 80241024\n        state: Created\n        uuid: 514ed1c8-7174-49ac-b9cd-ad44ef670a67\n      description: User specification of a nexus.\n      type: object\n      properties:\n        children:\n          description: List of children.\n          type: array\n          items:\n            type: string\n        managed:\n          description: Managed by our control plane\n          type: boolean\n        node:\n          description: Node where the nexus should live.\n          type: string\n        operation:\n          example:\n            operation: Create\n            result: null\n          description: Record of the operation in progress\n          type: object\n          properties:\n            operation:\n              description: Record of the operation\n              type: string\n              enum:\n                - Create\n                - Destroy\n                - Share\n                - Unshare\n                - AddChild\n                - RemoveChild\n            result:\n              description: Result of the operation\n              type: boolean\n          required:\n            - operation\n        owner:\n          description: 'Volume which owns this nexus, if any'\n          type: string\n          format: uuid\n        share:\n          $ref: '#/components/schemas/Protocol'\n        size:\n          description: Size of the nexus.\n          type: integer\n          format: int64\n          minimum: 0\n        status:\n          $ref: '#/components/schemas/SpecStatus'\n        uuid:\n          description: Nexus Id\n          type: string\n          format: uuid\n      required:\n        - children\n        - managed\n        - node\n        - share\n        - size\n        - status\n        - uuid\n    PoolSpec:\n      description: User specification of a pool.\n      type: object\n      properties:\n        disks:\n          description: absolute disk paths claimed by the pool\n          type: array\n          items:\n            example: '/dev/sda'\n            description: |-\n              Pool device URI\n               Can be specified in the form of a file path or a URI\n               eg: /dev/sda, aio:///dev/sda, malloc:///disk?size_mb=100\n            type: string\n        id:\n          $ref: '#/components/schemas/PoolId'\n        labels:\n          description: labels to be set on the pools\n          type: object\n          additionalProperties:\n            type: string\n        node:\n          $ref: '#/components/schemas/NodeId'\n        status:\n          $ref: '#/components/schemas/SpecStatus'\n      required:\n        - disks\n        - id\n        - node\n        - status\n    ReplicaSpec:\n      example:\n        managed: false\n        operation: null\n        owners:\n          nexuses:\n            - 514ed1c8-7174-49ac-b9cd-ad44ef670a67\n          volume: null\n        pool: pooloop\n        share: none\n        size: 80241024\n        state: Created\n        thin: false\n        uuid: 37d83441-e8ef-4e17-a29e-25169d91cb96\n      description: User specification of a replica.\n      type: object\n      properties:\n        managed:\n          description: Managed by our control plane\n          type: boolean\n        operation:\n          example:\n            operation: Create\n            result: null\n          description: Record of the operation in progress\n          type: object\n          properties:\n            operation:\n              description: Record of the operation\n              type: string\n              enum:\n                - Create\n                - Destroy\n                - Share\n                - Unshare\n            result:\n              description: Result of the operation\n              type: boolean\n          required:\n            - operation\n        owners:\n          example:\n            nexuses:\n              - 514ed1c8-7174-49ac-b9cd-ad44ef670a67\n            volume: null\n          description: Owner Resource\n          type: object\n          properties:\n            nexuses:\n              type: array\n              items:\n                type: string\n                format: uuid\n            volume:\n              type: string\n              format: uuid\n          required:\n            - nexuses\n        pool:\n          description: The pool that the replica should live on.\n          type: string\n        share:\n          $ref: '#/components/schemas/Protocol'\n        size:\n          description: The size that the replica should be.\n          type: integer\n          format: int64\n          minimum: 0\n        status:\n          $ref: '#/components/schemas/SpecStatus'\n        thin:\n          description: Thin provisioning.\n          type: boolean\n        uuid:\n          description: uuid of the replica\n          type: string\n          format: uuid\n      required:\n        - managed\n        - owners\n        - pool\n        - share\n        - size\n        - status\n        - thin\n        - uuid\n    VolumeSpec:\n      example:\n        num_replicas: 2\n        size: 80241024\n        state: Created\n        target_node: mayastor-1\n        uuid: 514ed1c8-7174-49ac-b9cd-ad44ef670a67\n      description: User specification of a volume.\n      type: object\n      properties:\n        labels:\n          description: Optionally used to store custom volume information\n          type: object\n          additionalProperties:\n            type: string\n        num_replicas:\n          description: Number of children the volume should have.\n          type: integer\n          format: uint8\n          minimum: 0\n          maximum: 255\n        operation:\n          example:\n            operation: Create\n            result: null\n          description: Record of the operation in progress\n          type: object\n          properties:\n            operation:\n              description: Record of the operation\n              type: string\n              enum:\n                - Create\n                - Destroy\n                - Share\n                - Unshare\n                - SetReplica\n                - RemoveUnusedReplica\n                - Publish\n                - Unpublish\n            result:\n              description: Result of the operation\n              type: boolean\n          required:\n            - operation\n        size:\n          description: Size that the volume should be.\n          type: integer\n          format: int64\n          minimum: 0\n        status:\n          $ref: '#/components/schemas/SpecStatus'\n        target:\n          $ref: '#/components/schemas/VolumeTarget'\n        uuid:\n          description: Volume Id\n          type: string\n          format: uuid\n        topology:\n          $ref: '#/components/schemas/Topology'\n        policy:\n          $ref: '#/components/schemas/VolumePolicy'\n      required:\n        - num_paths\n        - num_replicas\n        - protocol\n        - size\n        - status\n        - uuid\n        - policy\n    VolumeTarget:\n      example:\n        node: mayastor-1\n        protocol: nvmf\n      description: Specification of a volume target\n      type: object\n      properties:\n        node:\n          description: The node where front-end IO will be sent to\n          type: string\n        protocol:\n          $ref: '#/components/schemas/VolumeShareProtocol'\n      required:\n        - node\n    SpecStatus:\n      description: Common base state for a resource\n      type: string\n      enum:\n        - Creating\n        - Created\n        - Deleting\n        - Deleted\n    VolumeStatus:\n      description: current volume status\n      type: string\n      enum:\n        - Unknown\n        - Online\n        - Degraded\n        - Faulted\n    VolumeShareProtocol:\n      description: Volume Share Protocol\n      type: string\n      enum:\n        - nvmf\n        - iscsi\n    NexusShareProtocol:\n      description: Nexus Share Protocol\n      type: string\n      enum:\n        - nvmf\n        - iscsi\n    ReplicaShareProtocol:\n      description: Replica Share Protocol\n      type: string\n      enum:\n        - nvmf\n    Protocol:\n      description: Common Protocol\n      type: string\n      enum:\n        - none\n        - nvmf\n        - iscsi\n        - nbd\n    WatchCallback:\n      description: Watch Callbacks\n      type: object\n      properties:\n        uri:\n          type: string\n      additionalProperties: false\n      oneOf:\n        - required:\n            - uri\n    VolumeState:\n      example:\n        target:\n          children:\n            - rebuildProgress: null\n              state: Online\n              uri: 'nvmf://10.1.0.6:8420/nqn.2019-05.io.openebs:a76adcd6-9df0-47a1-90a5-2d5bf4151572'\n          deviceUri: 'nvmf://10.1.0.5:8420/nqn.2019-05.io.openebs:nexus-a76adcd6-9df0-47a1-90a5-2d5bf4151573'\n          protocol: nvmf\n          node: mayastor-1\n          rebuilds: 0\n          share: none\n          size: 80241024\n          state: Online\n          uuid: 61d6afc8-15c6-4127-b0aa-15a570198880\n        size: 80241024\n        status: Online\n        uuid: 4be37dbd-4b60-44f3-b807-08f6693522ac\n        replica_topology:\n          03f0c3f1-4d3e-44e5-b768-4c50e53f7a34:\n            node: mayastor-1\n            pool: pool-1\n            state: Online\n      description: Runtime state of the volume\n      type: object\n      properties:\n        target:\n          description: target exposed via a Nexus\n          allOf:\n            - $ref: '#/components/schemas/Nexus'\n        size:\n          description: size of the volume in bytes\n          type: integer\n          format: int64\n          minimum: 0\n        status:\n          $ref: '#/components/schemas/VolumeStatus'\n        uuid:\n          description: name of the volume\n          type: string\n          format: uuid\n        replica_topology:\n          description: replica location information\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/ReplicaTopology'\n      required:\n        - size\n        - uuid\n        - status\n        - replica_topology\n    Volume:\n      description: |-\n        Volumes\n        Volume information\n      type: object\n      properties:\n        spec:\n          $ref: '#/components/schemas/VolumeSpec'\n        state:\n          $ref: '#/components/schemas/VolumeState'\n      required:\n        - spec\n        - state\n    ReplicaTopology:\n      description: Location of replicas (nodes and pools)\n      type: object\n      properties:\n        node:\n          $ref: '#/components/schemas/NodeId'\n        pool:\n          $ref: '#/components/schemas/PoolId'\n        state:\n          $ref: '#/components/schemas/ReplicaState'\n      required:\n        - state\n  responses:\n    ClientError:\n      description: Client side error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/RestJsonError'\n    ServerError:\n      description: Server side error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/RestJsonError'"
		}
	},
	"Error": "make ir: path \"/nodes\": get: responses: parse response status code: strconv.Atoi: parsing \"4XX\": invalid syntax"
}