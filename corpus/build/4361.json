{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "APIs/nexmo.com/conversation/2.0.1/openapi.yaml",
			"content": "openapi: 3.0.0\nservers:\n  - url: https://api.nexmo.com/v0.1\ninfo:\n  contact:\n    email: devrel@vonage.com\n    name: Vonage DevRel\n    url: https://developer.nexmo.com/\n  description: The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.\n  title: Conversation API\n  version: 2.0.1\n  x-label: Beta\n  x-origin:\n    - format: openapi\n      url: https://raw.githubusercontent.com/nexmo/api-specification/master/definitions/conversation.yml\n      version: \"3.0\"\n  x-providerName: nexmo.com\n  x-serviceName: conversation\nsecurity:\n  - bearerAuth: []\ntags:\n  - description: A conversation is a shared core component that Vonage APIs rely on. Conversations happen over multiple mediums and and can have associated Users through Memberships.\n    name: conversation\n  - description: The concept of a user exists in Vonage APIs, you can associate one with a user in your own application if you choose. A user can have multiple memberships to conversations and can communicate with other users through various different mediums.\n    name: user\n  - description: Memberships connect users with conversations. Each membership has one conversation and one user however a user can have many memberships to conversations just as conversations can have many members.\n    name: member\n  - description: \"Events are actions that occur within a conversation. Examples of this includes: Text events from members, or invite events from users\"\n    name: event\n  - description: A leg can be a video call, IP call, or PSTN call that users participate in using multiple platforms. With this endpoint you can retrieve the details about all of the legs that took place in your application.\n    name: leg\n  - description: Rtc actions. Any rtc action related (like starting a new rtc connection).\n    name: rtc\npaths:\n  /conversations:\n    get:\n      deprecated: true\n      description: |-\n        This endpoint is **DEPRECATED**. Please use [/v0.2/conversations](/api/conversation.v2#get-conversations).\n\n        List all conversations associated with your application. This endpoint required an admin JWT. To find all conversations for the currently logged in user, see [GET /users/:id/conversations](#getuserConversations)\n      operationId: listConversations\n      parameters:\n        - $ref: \"#/components/parameters/date_start\"\n        - $ref: \"#/components/parameters/date_end\"\n        - $ref: \"#/components/parameters/page_size\"\n        - $ref: \"#/components/parameters/record_index\"\n        - $ref: \"#/components/parameters/order\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  _embedded:\n                    description: A list of conversation objects. See the [get details of a specific conversation](#retrieveConversation) response fields for a description of the nested objects\n                    properties:\n                      conversations:\n                        items:\n                          properties:\n                            _links:\n                              properties:\n                                self:\n                                  properties:\n                                    href:\n                                      $ref: \"#/components/schemas/href_conversation\"\n                                  type: object\n                              type: object\n                            name:\n                              $ref: \"#/components/schemas/name_conversation\"\n                            uuid:\n                              $ref: \"#/components/schemas/conversation_id\"\n                          required:\n                            - uuid\n                            - name\n                            - href\n                          type: object\n                        type: array\n                    required:\n                      - conversations\n                    type: object\n                  _links:\n                    $ref: \"#/components/schemas/_links_conversations_list\"\n                  count:\n                    description: The total number of records returned by your request.\n                    example: \"100\"\n                    type: number\n                  page_size:\n                    $ref: \"#/components/schemas/page_size\"\n                  record_index:\n                    $ref: \"#/components/schemas/record_index\"\n                required:\n                  - count\n                  - page_size\n                  - record_index\n                  - _links\n                  - _embedded\n                type: object\n          description: List Conversations Response Payload Object.\n      summary: List conversations\n      tags:\n        - conversation\n    post:\n      operationId: createConversation\n      requestBody:\n        $ref: \"#/components/requestBodies/Conversation\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ConversationLite\"\n      summary: Create a conversation\n      tags:\n        - conversation\n  \"/conversations/{conversation_id}\":\n    delete:\n      operationId: deleteConversation\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmptyJSON\"\n      summary: Delete a conversation\n      tags:\n        - conversation\n    get:\n      operationId: retrieveConversation\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Conversation Object\n                properties:\n                  _links:\n                    $ref: \"#/components/schemas/_links_conversation\"\n                  api_key:\n                    description: The API key for your account\n                    type: string\n                  display_name:\n                    $ref: \"#/components/schemas/display_name\"\n                  members:\n                    description: Users associated to this conversation as members\n                    items:\n                      properties:\n                        channel:\n                          $ref: \"#/components/schemas/channel\"\n                        initiator:\n                          $ref: \"#/components/schemas/initiator\"\n                        member_id:\n                          $ref: \"#/components/schemas/member_id\"\n                        name:\n                          $ref: \"#/components/schemas/name_user\"\n                        state:\n                          $ref: \"#/components/schemas/member_state\"\n                        timestamp:\n                          $ref: \"#/components/schemas/timestamp_res_member\"\n                        user_id:\n                          $ref: \"#/components/schemas/user_id\"\n                      type: object\n                    type: array\n                  name:\n                    $ref: \"#/components/schemas/name_conversation\"\n                  numbers:\n                    properties: {}\n                    type: object\n                  properties:\n                    properties:\n                      video:\n                        example: false\n                        type: boolean\n                    type: object\n                  sequence_number:\n                    description: The last Event ID in this conversation. This ID can be used to [retrieve a specific event](#getEvent)\n                    example: \"1\"\n                    type: string\n                  timestamp:\n                    $ref: \"#/components/schemas/timestamp_res_conversation\"\n                  uuid:\n                    $ref: \"#/components/schemas/conversation_id\"\n                required:\n                  - uuid\n                type: object\n          description: Retrieve a conversation\n      summary: Retrieve a conversation\n      tags:\n        - conversation\n    parameters:\n      - $ref: \"#/components/parameters/conversation_id\"\n    put:\n      operationId: replaceConversation\n      requestBody:\n        $ref: \"#/components/requestBodies/Conversation\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ConversationLite\"\n      summary: Update a conversation\n      tags:\n        - conversation\n  \"/conversations/{conversation_id}/events\":\n    get:\n      deprecated: true\n      description: This endpoint is **DEPRECATED**. Please use [/v0.2/events](/api/conversation.v2#get-events).\n      operationId: getEvents\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/event_retrieved\"\n                type: array\n          description: Retrieve Events Response Payload Object\n      summary: List events\n      tags:\n        - event\n    parameters:\n      - $ref: \"#/components/parameters/conversation_id\"\n    post:\n      operationId: createEvent\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: Create New Event Request Payload Object\n              properties:\n                body:\n                  $ref: \"#/components/schemas/event_body\"\n                from:\n                  $ref: \"#/components/schemas/member_id\"\n                to:\n                  $ref: \"#/components/schemas/member_id\"\n                type:\n                  $ref: \"#/components/schemas/event_type\"\n              required:\n                - type\n                - from\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                description: Create New Event Response Payload Object\n                properties:\n                  href:\n                    $ref: \"#/components/schemas/href_event\"\n                  id:\n                    $ref: \"#/components/schemas/event_id\"\n                  timestamp:\n                    $ref: \"#/components/schemas/timestamp_res_event\"\n                type: object\n          description: Create New Event Response Payload Object\n      summary: Create an event\n      tags:\n        - event\n  \"/conversations/{conversation_id}/events/{event_id}\":\n    delete:\n      operationId: deleteEvent\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmptyJSON\"\n      summary: Delete an event\n      tags:\n        - event\n    get:\n      operationId: getEvent\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/event_retrieved\"\n          description: Retrieve an event Content Payload\n      summary: Retrieve an event\n      tags:\n        - event\n    parameters:\n      - $ref: \"#/components/parameters/conversation_id\"\n      - $ref: \"#/components/parameters/event_id\"\n  \"/conversations/{conversation_id}/members\":\n    get:\n      deprecated: true\n      description: This endpoint is **DEPRECATED**. Please use [/v0.2/members](/api/conversation.v2#get-members).\n      operationId: getMembers\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  properties:\n                    name:\n                      $ref: \"#/components/schemas/name_user\"\n                    state:\n                      $ref: \"#/components/schemas/member_state\"\n                    user_id:\n                      $ref: \"#/components/schemas/user_id\"\n                    user_name:\n                      $ref: \"#/components/schemas/name_user\"\n                  required:\n                    - user_id\n                    - name\n                    - user_name\n                    - state\n                  type: object\n                type: array\n          description: Members List Object\n      summary: List members\n      tags:\n        - member\n    parameters:\n      - $ref: \"#/components/parameters/conversation_id\"\n    post:\n      operationId: createMember\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"Create a Member in invite state \"\n              properties:\n                action:\n                  $ref: \"#/components/schemas/member_action\"\n                channel:\n                  $ref: \"#/components/schemas/channel\"\n                knocking_id:\n                  $ref: \"#/components/schemas/knocker_id\"\n                media:\n                  $ref: \"#/components/schemas/media\"\n                member_id:\n                  $ref: \"#/components/schemas/member_id\"\n                member_id_inviting:\n                  $ref: \"#/components/schemas/member_id_inviting\"\n                user_id:\n                  $ref: \"#/components/schemas/user_id\"\n              required:\n                - user_id\n                - channel\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  channel:\n                    $ref: \"#/components/schemas/channel\"\n                  href:\n                    $ref: \"#/components/schemas/href_member\"\n                  id:\n                    $ref: \"#/components/schemas/member_id\"\n                  initiator:\n                    $ref: \"#/components/schemas/initiator\"\n                  state:\n                    $ref: \"#/components/schemas/member_state\"\n                  timestamp:\n                    $ref: \"#/components/schemas/timestamp_res_member\"\n                  user_id:\n                    $ref: \"#/components/schemas/user_id\"\n                type: object\n          description: \"Create or invite Member in invite state \"\n      summary: Create a member\n      tags:\n        - member\n  \"/conversations/{conversation_id}/members/{member_id}\":\n    delete:\n      operationId: deleteMember\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmptyJSON\"\n      summary: Delete a member\n      tags:\n        - member\n    get:\n      operationId: getMember\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  href:\n                    $ref: \"#/components/schemas/href_member\"\n                  id:\n                    $ref: \"#/components/schemas/member_id\"\n          description: Retrieve member payload\n      summary: Retrieve a member\n      tags:\n        - member\n    parameters:\n      - $ref: \"#/components/parameters/conversation_id\"\n      - $ref: \"#/components/parameters/member_id\"\n    put:\n      operationId: updateMember\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                action:\n                  $ref: \"#/components/schemas/member_action\"\n                channel:\n                  $ref: \"#/components/schemas/channel\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  href:\n                    $ref: \"#/components/schemas/href_member\"\n                  id:\n                    $ref: \"#/components/schemas/member_id\"\n          description: Member retrieved\n      summary: Update a member\n      tags:\n        - member\n  \"/conversations/{conversation_id}/record\":\n    parameters:\n      - $ref: \"#/components/parameters/conversation_id\"\n    put:\n      operationId: recordConversation\n      requestBody:\n        $ref: \"#/components/requestBodies/RecordConversation\"\n      responses:\n        \"204\":\n          description: No Content\n        \"400\":\n          description: Bad Request\n        \"404\":\n          description: Not Found\n      summary: Record a conversation\n      tags:\n        - conversation\n    servers:\n      - description: Override base path for the PUT /conversations/{conversation_id}/record operation\n        url: https://api.nexmo.com/v1\n  /legs:\n    get:\n      operationId: listLegs\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: List Legs Response Payload Object\n                example:\n                  _embedded:\n                    legs:\n                      - _links:\n                          self:\n                            href: https://api.nexmo.com/v0.1/legs/2a71f8a1-b6f1-42b3-9eef-c69729e17513\n                        conversation_uuid: CON-511d076b-9d39-498c-baa7-b7a4bfbd6e32\n                        end_time: \"\"\n                        from:\n                          type: app\n                        rtc:\n                          session_id: SES-84ebef0d-321a-47e6-8446-f4fcc5ca74b9\n                          state: terminated\n                        start_time: \"\"\n                        status: completed\n                        to:\n                          type: app\n                        type: app\n                        uuid: 2a71f8a1-b6f1-42b3-9eef-c69729e17513\n                  _links:\n                    self:\n                      href: https://api.nexmo.com/v0.1/legs\n                  count: 1\n                  page_size: 10\n                  record_index: 0\n                properties:\n                  _embedded:\n                    description: A list of conversation objects. See the [get details of a specific conversation](#retrieveConversation) response fields for a description of the nested objects\n                    properties:\n                      legs:\n                        items:\n                          properties:\n                            _embedded:\n                              type: object\n                            _links:\n                              type: object\n                            conversation_uuid:\n                              $ref: \"#/components/schemas/conversation_id\"\n                            from:\n                              type: object\n                            start_end:\n                              $ref: \"#/components/schemas/timestamp_leg_end_time\"\n                            start_time:\n                              $ref: \"#/components/schemas/timestamp_leg_start_time\"\n                            state:\n                              $ref: \"#/components/schemas/leg_state\"\n                            to:\n                              type: object\n                            type:\n                              $ref: \"#/components/schemas/channel_type\"\n                            uuid:\n                              $ref: \"#/components/schemas/leg_id\"\n                          required:\n                            - uuid\n                            - name\n                            - href\n                          type: object\n                        type: array\n                    required:\n                      - legs\n                    type: object\n                  _links:\n                    properties:\n                      self:\n                        properties:\n                          href:\n                            type: string\n                        type: object\n                    required:\n                      - self\n                    type: object\n                  count:\n                    description: The total number of records returned by your request.\n                    example: \"100\"\n                    type: number\n                  page_size:\n                    $ref: \"#/components/schemas/page_size\"\n                  record_index:\n                    $ref: \"#/components/schemas/record_index\"\n                required:\n                  - count\n                  - page_size\n                  - record_index\n                  - _links\n                  - _embedded\n                type: object\n          description: List Legs Successfully\n      summary: List legs\n      tags:\n        - leg\n  \"/legs/{leg_id}\":\n    delete:\n      operationId: deleteLeg\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmptyJSON\"\n      summary: Delete a leg\n      tags:\n        - leg\n    parameters:\n      - $ref: \"#/components/parameters/leg_id\"\n  /users:\n    get:\n      deprecated: true\n      description: This endpoint is **DEPRECATED**. Please use [/v0.2/users](/api/conversation.v2#get-users).\n      operationId: getUsers\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  properties:\n                    href:\n                      $ref: \"#/components/schemas/href_user\"\n                    id:\n                      $ref: \"#/components/schemas/user_id\"\n                    name:\n                      $ref: \"#/components/schemas/name_user\"\n                  type: object\n                type: array\n          description: List of users\n      summary: List users\n      tags:\n        - user\n    post:\n      description: \"Note: Users must be created with an admin JWT.\"\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: \"Create a Member in invite state \"\n              properties:\n                display_name:\n                  $ref: \"#/components/schemas/display_name_user\"\n                image_url:\n                  $ref: \"#/components/schemas/image_url\"\n                name:\n                  $ref: \"#/components/schemas/name_user\"\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  href:\n                    $ref: \"#/components/schemas/href_user\"\n                  id:\n                    $ref: \"#/components/schemas/user_id\"\n                type: object\n          description: Create a user response\n      summary: Create a user\n      tags:\n        - user\n  \"/users/{user_id}\":\n    delete:\n      operationId: deleteUser\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmptyJSON\"\n      summary: Delete a user\n      tags:\n        - user\n    get:\n      operationId: getUser\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  href:\n                    example: https://api.nexmo.com/v0.1/users/USR-63f61863-4a51-4f6b-86e1-46edebio0391\n                    type: string\n                  id:\n                    $ref: \"#/components/schemas/user_id\"\n                  name:\n                    $ref: \"#/components/schemas/name_user\"\n          description: Retrieve a user\n      summary: Retrieve a user\n      tags:\n        - user\n    parameters:\n      - $ref: \"#/components/parameters/user_id\"\n    put:\n      operationId: updateUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                channels:\n                  $ref: \"#/components/schemas/channel\"\n                display_name:\n                  $ref: \"#/components/schemas/display_name_user\"\n                image_url:\n                  $ref: \"#/components/schemas/image_url\"\n                name:\n                  $ref: \"#/components/schemas/name_user\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  href:\n                    $ref: \"#/components/schemas/href_user\"\n                  id:\n                    $ref: \"#/components/schemas/user_id\"\n          description: Retrieve a user\n      summary: Update a user\n      tags:\n        - user\n  \"/users/{user_id}/conversations\":\n    get:\n      operationId: getuserConversations\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  properties:\n                    display_name:\n                      $ref: \"#/components/schemas/display_name\"\n                    href:\n                      $ref: \"#/components/schemas/href\"\n                    id:\n                      $ref: \"#/components/schemas/conversation_id\"\n                    image_url:\n                      $ref: \"#/components/schemas/image_url\"\n                    member_id:\n                      $ref: \"#/components/schemas/member_id\"\n                    name:\n                      $ref: \"#/components/schemas/name_conversation\"\n                    sequence_number:\n                      description: the id of the last event of the conversation (event's id is an incremental number\n                      example: \"123\"\n                      format: url\n                      type: integer\n                    state:\n                      $ref: \"#/components/schemas/member_state\"\n                    timestamp:\n                      properties:\n                        created:\n                          $ref: \"#/components/schemas/timestamp\"\n                      type: object\n                  type: object\n                type: array\n          description: List user conversations\n      summary: List user conversations\n      tags:\n        - user\n    parameters:\n      - $ref: \"#/components/parameters/user_id\"\ncomponents:\n  parameters:\n    conversation_id:\n      description: Conversation ID\n      example: CON-f972836a-550f-45fa-956c-12a2ab5b7d22\n      in: path\n      name: conversation_id\n      required: true\n      schema:\n        type: string\n    date_end:\n      description: Return the records that occurred before this point in time.\n      in: query\n      name: date_end\n      required: false\n      schema:\n        example: 2018-01-01 12:00:00\n        format: dateTime\n        type: string\n    date_start:\n      description: Return the records that occurred after this point in time.\n      in: query\n      name: date_start\n      required: false\n      schema:\n        example: 2018-01-01 10:00:00\n        format: dateTime\n        type: string\n    event_id:\n      description: Event ID\n      in: path\n      name: event_id\n      required: true\n      schema:\n        type: string\n    leg_id:\n      description: Leg ID\n      in: path\n      name: leg_id\n      required: true\n      schema:\n        type: string\n    member_id:\n      description: Member ID\n      in: path\n      name: member_id\n      required: true\n      schema:\n        type: string\n    order:\n      description: Return the records in ascending or descending order.\n      in: query\n      name: order\n      required: false\n      schema:\n        default: asc\n        enum:\n          - asc\n          - desc\n          - ASC\n          - DESC\n        type: string\n    page_size:\n      description: Return this amount of records in the response\n      in: query\n      name: page_size\n      required: false\n      schema:\n        $ref: \"#/components/schemas/page_size\"\n    record_index:\n      description: Return calls from this index in the response\n      in: query\n      name: record_index\n      required: false\n      schema:\n        $ref: \"#/components/schemas/record_index\"\n    user_id:\n      description: User ID\n      in: path\n      name: user_id\n      required: true\n      schema:\n        type: string\n  requestBodies:\n    Conversation:\n      content:\n        application/json:\n          schema:\n            properties:\n              display_name:\n                $ref: \"#/components/schemas/display_name\"\n              image_url:\n                $ref: \"#/components/schemas/image_url\"\n              name:\n                $ref: \"#/components/schemas/name_conversation\"\n              properties:\n                $ref: \"#/components/schemas/conversation_properties\"\n            type: object\n      description: Conversation Request Payload Object\n    EmptyBody:\n      content:\n        application/json:\n          schema:\n            example: {}\n            type: object\n      description: Conversation Request Payload Object\n      required: true\n    RecordConversation:\n      content:\n        application/json:\n          schema:\n            properties:\n              action:\n                $ref: \"#/components/schemas/action\"\n              event_method:\n                $ref: \"#/components/schemas/event_method\"\n              event_url:\n                $ref: \"#/components/schemas/event_url\"\n              format:\n                $ref: \"#/components/schemas/format\"\n              split:\n                $ref: \"#/components/schemas/split\"\n            required:\n              - action\n            type: object\n      description: Record Conversation Request Payload Object\n  responses:\n    ConversationLite:\n      content:\n        application/json:\n          schema:\n            properties:\n              href:\n                $ref: \"#/components/schemas/href_conversation\"\n              id:\n                $ref: \"#/components/schemas/conversation_id\"\n            required:\n              - id\n              - href\n            type: object\n      description: Create / Update Conversation Response Payload Object\n    SuccessEmptyJSON:\n      content:\n        application/json:\n          schema:\n            description: Empty JSON payload\n            example: {}\n            type: object\n      description: Success response with empty JSON\n  schemas:\n    _links_conversation:\n      properties:\n        self:\n          properties:\n            href:\n              $ref: \"#/components/schemas/href_conversation\"\n          type: object\n      type: object\n    _links_conversations_list:\n      description: A series of links between resources in this API in the http://stateless.co/hal_specification.html.\n      properties:\n        self:\n          properties:\n            href:\n              $ref: \"#/components/schemas/href_conversations_list\"\n          required:\n            - href\n          type: object\n      required:\n        - self\n      type: object\n    action:\n      description: Recording Action\n      enum:\n        - start\n        - stop\n      example: start\n      type: string\n    channel:\n      description: A user who joins a conversation as a member can have one channel per membership type. Channels can be `app`, `phone`, `sip`, `websocket`, or `vbc`\n      properties:\n        from:\n          oneOf:\n            - description: Connect to an App User\n              properties:\n                type:\n                  description: The type of connection. Must be `app`\n                  example: app\n                  type: string\n                user:\n                  description: The username to connect to\n                  example: jamie\n                  type: string\n              required:\n                - type\n                - user\n              type: object\n            - description: Connect to a Phone (PSTN) number\n              properties:\n                number:\n                  description: The phone number to connect to\n                  example: \"14155550100\"\n                  maxLength: 15\n                  minLength: 7\n                  pattern: \\d{7,15}\n                  type: string\n                type:\n                  description: The type of connection. Must be `phone`\n                  example: phone\n                  type: string\n              required:\n                - number\n                - type\n              type: object\n            - description: Connect to a SIP Endpoint\n              properties:\n                type:\n                  description: The type of connection. Must be `sip`\n                  example: sip\n                  type: string\n                uri:\n                  description: The SIP URI to connect to\n                  example: sip:rebekka@sip.example.com\n                  maxLength: 50\n                  minLength: 1\n                  type: string\n              required:\n                - type\n              type: object\n            - description: Connect to a Websocket\n              properties:\n                content-type:\n                  enum:\n                    - audio/l16;rate=8000\n                    - audio/l16;rate=16000\n                  example: audio/l16;rate=16000\n                  type: string\n                headers:\n                  description: Details of the Websocket you want to connect to\n                  properties:\n                    customer_id:\n                      description: This is an example header. You can provide any headers you may need\n                      example: ABC123\n                      type: string\n                  type: object\n                type:\n                  description: The type of connection. Must be `websocket`\n                  example: websocket\n                  type: string\n                uri:\n                  example: wss://example.com/socket\n                  maxLength: 50\n                  minLength: 1\n                  type: string\n              required:\n                - type\n                - content-type\n              type: object\n            - description: Connect to a VBC extension\n              properties:\n                extension:\n                  example: \"1234\"\n                  type: string\n                type:\n                  description: The type of connection. Must be `vbc`\n                  example: vbc\n                  type: string\n              required:\n                - type\n                - extension\n              type: object\n        leg_id:\n          $ref: \"#/components/schemas/leg_id\"\n        leg_ids:\n          description: Leg ids associated with this Channel. The first item in the array represents the main active Leg. The second item, if exists, represents a screen-share Leg.\n          items:\n            properties:\n              leg_id:\n                $ref: \"#/components/schemas/leg_id\"\n          type: array\n        to:\n          oneOf:\n            - $ref: \"#/components/schemas/channel/properties/from/oneOf/0\"\n            - description: Connect to a Phone (PSTN) number\n              properties:\n                dtmfAnswer:\n                  description: Provide [DTMF digits](https://developer.nexmo.com/voice/voice-api/guides/dtmf) to send when the call is answered\n                  example: p*123#\n                  type: string\n                number:\n                  $ref: \"#/components/schemas/channel/properties/from/oneOf/1/properties/number\"\n                type:\n                  description: The type of connection. Must be `phone`\n                  example: phone\n                  type: string\n              required:\n                - number\n                - type\n              type: object\n            - $ref: \"#/components/schemas/channel/properties/from/oneOf/2\"\n            - $ref: \"#/components/schemas/channel/properties/from/oneOf/3\"\n            - $ref: \"#/components/schemas/channel/properties/from/oneOf/4\"\n        type:\n          $ref: \"#/components/schemas/channel_type\"\n      type: object\n    channel_number:\n      description: this can be a phone number or a random string\n      example: a447700900585\n      type: string\n    channel_type:\n      description: Channel type\n      enum:\n        - app\n        - phone\n        - sip\n        - websocket\n        - vbc\n      example: phone\n      type: string\n    conversation_id:\n      description: The unique identifier for this conversation\n      example: CON-63f61863-4a51-4f6b-86e1-46edebio0391\n      type: string\n    conversation_properties:\n      description: Conversation properties\n      properties:\n        ttl:\n          description: Time to leave. After how many seconds an empty conversation is deleted.\n          example: 60\n          type: number\n      type: object\n    display_name:\n      description: The display name for the conversation. It does not have to be unique\n      example: Customer Chat\n      type: string\n    display_name_user:\n      description: A string to be displayed as user name. It does not need to be unique\n      example: My User Name\n      type: string\n    event_body:\n      description: Event Body\n      example:\n        text: My Text\n      type: object\n    event_id:\n      description: Event id. This is a progressive integer\n      example: \"5\"\n      type: string\n    event_method:\n      default: POST\n      description: The HTTP method used to send event information to event_url.\n      example: POST\n      type: string\n    event_retrieved:\n      description: Retrieve Events Response Payload Object Item\n      properties:\n        body:\n          $ref: \"#/components/schemas/event_body\"\n        from:\n          $ref: \"#/components/schemas/member_id\"\n        href:\n          $ref: \"#/components/schemas/href_event\"\n        id:\n          $ref: \"#/components/schemas/event_id\"\n        state:\n          $ref: \"#/components/schemas/member_state\"\n        timestamp:\n          $ref: \"#/components/schemas/timestamp_created\"\n        to:\n          $ref: \"#/components/schemas/member_id\"\n        type:\n          $ref: \"#/components/schemas/event_type\"\n      required:\n        - id\n        - type\n        - body\n        - timestamp\n        - href\n      type: object\n    event_type:\n      description: Event type\n      example: text\n      type: string\n    event_url:\n      description: The webhook endpoint where recording progress events are sent to.\n      example:\n        - https://example.com/event\n      items:\n        format: url\n        type: string\n      type: array\n      x-nexmo-developer-collection-description-shown: true\n    format:\n      default: mp3\n      description: Record the Conversation in a specific format.\n      enum:\n        - mp3\n        - wav\n      example: mp3\n      type: string\n    href:\n      description: A link towards a resources included in Conversation API\n      example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391\n      format: url\n      type: string\n    href_conversation:\n      description: A link towards a conversation included in Conversation API\n      example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391\n      format: url\n      type: string\n    href_conversations_list:\n      description: A link towards a conversations list included in Conversation API\n      example: https://api.nexmo.com/v0.1/conversations?page_size=2\u0026record_index=10\u0026\n      format: url\n      type: string\n    href_event:\n      description: A link towards a conversation event included in Conversation API\n      example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391/events/1\n      format: url\n      type: string\n    href_member:\n      description: A link towards a member included in Conversation API\n      example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391/members/MEM-63f61863-4a51-4f6b-86e1-46edebio0391\n      format: url\n      type: string\n    href_rtc:\n      description: A link towards a rtc (leg) included in Conversation API\n      example: https://api.nexmo.com/v0.1/conversations/CON-63f61863-4a51-4f6b-86e1-46edebio0391/rtc/7777777777777\n      format: url\n      type: string\n    href_user:\n      description: A link towards a user included in Conversation API\n      example: https://api.nexmo.com/v0.1/users/USR-63f61863-4a51-4f6b-86e1-46edebio0391\n      format: url\n      type: string\n    image_url:\n      description: A link to an image for conversations' and users' avatars\n      example: https://example.com/image.png\n      format: url\n      type: string\n    initiator:\n      properties:\n        joined:\n          properties:\n            isSystem:\n              description: \"`true` if the user was invited by an admin JWT. `user_id` and `member_id` will not exist if `true`\"\n              type: boolean\n            member_id:\n              $ref: \"#/components/schemas/member_id\"\n            user_id:\n              $ref: \"#/components/schemas/user_id\"\n          type: object\n      type: object\n    knocker_id:\n      description: Knocker ID. A knocker is a pre-member of a conversation who does not exist yet\n      example: a972836a-450f-35fa-156c-52a2ab5b7d25\n      type: string\n    leg_id:\n      description: The id of the leg. rtc_id and call_id are leg id\n      example: a595959595959595995\n      type: string\n    leg_state:\n      description: Leg Status\n      enum:\n        - terminated\n      example: terminated\n      type: string\n    media:\n      description: Media Object\n      example:\n        audio_settings:\n          earmuffed: false\n          enabled: false\n          muted: false\n      properties: {}\n      type: object\n    member_action:\n      description: Invite or join a member to a conversation\n      enum:\n        - invite\n        - join\n      example: join\n      type: string\n    member_id:\n      description: Member ID\n      example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391\n      type: string\n    member_id_inviting:\n      description: Member ID of the member that sends the invitation\n      example: MEM-63f61863-4a51-4f6b-86e1-46edebio0391\n      type: string\n    member_state:\n      description: The state that the member is in. Possible values are `invited`, `joined`, `left`, or `unknown`\n      enum:\n        - invited\n        - joined\n        - left\n        - unknown\n      example: invited\n      type: string\n    name:\n      description: Unique name\n      example: my_unique_name\n      type: string\n    name_conversation:\n      description: Unique name for a conversation\n      example: customer_chat\n      type: string\n    name_user:\n      description: Unique name for a user\n      example: my_user_name\n      type: string\n    page_size:\n      default: 10\n      description: The amount of records returned in this response\n      example: 50\n      maximum: 100\n      minimum: 1\n      type: number\n    record_index:\n      default: 0\n      description: Return `page_size` amount of conversations from this index in the response. That is, if your request returns 300 conversations, set `record_index` to 5 in order to return conversations 50 to 59. The default value is 0. That is, the first `page_size` calls.\n      example: 0\n      minimum: 0\n      type: number\n    split:\n      default: conversation\n      description: Record the sent and received audio in separate channels of a stereo recording\n      example: conversation\n      type: string\n    timestamp:\n      description: Timestamp\n      example: 2020-01-01T14:00:00.00Z\n      type: string\n    timestamp_created:\n      description: Time of creation\n      example: 2020-01-01T14:00:00.00Z\n      type: string\n    timestamp_destroyed:\n      description: Time of last update\n      example: 2020-01-01T14:20:00.00Z\n      type: string\n    timestamp_leg_end_time:\n      description: Time of leg end\n      example: 2020-01-01T14:00:00.00Z\n      type: string\n    timestamp_leg_start_time:\n      description: Time of leg start\n      example: 2020-01-01T14:00:00.00Z\n      type: string\n    timestamp_obj_leg:\n      properties:\n        end:\n          $ref: \"#/components/schemas/timestamp\"\n        request:\n          $ref: \"#/components/schemas/timestamp\"\n        start:\n          $ref: \"#/components/schemas/timestamp_created\"\n      type: object\n    timestamp_res_conversation:\n      properties:\n        created:\n          $ref: \"#/components/schemas/timestamp_created\"\n        destroyed:\n          $ref: \"#/components/schemas/timestamp_destroyed\"\n        updated:\n          $ref: \"#/components/schemas/timestamp_updated\"\n      type: object\n    timestamp_res_event:\n      description: Time of event creation\n      example: 2020-01-01T14:00:00.00Z\n      type: string\n    timestamp_res_member:\n      properties:\n        invited:\n          $ref: \"#/components/schemas/timestamp\"\n        joined:\n          $ref: \"#/components/schemas/timestamp\"\n        left:\n          $ref: \"#/components/schemas/timestamp\"\n      type: object\n    timestamp_updated:\n      description: Time of last update\n      example: 2020-01-01T14:05:00.00Z\n      type: string\n    user_id:\n      description: User ID\n      example: USR-63f61863-4a51-4f6b-86e1-46edebio0391\n      type: string\n    user_id_or_user_name:\n      description: user name or user id of the inviter\n      example: someone_else_user_name\n      type: string\n  securitySchemes:\n    bearerAuth:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\n"
		}
	},
	"Error": "parse: paths: /conversations/{conversation_id}: get: operation \"retrieveConversation\": responses: 200: content: \"application/json\": schema: parse schema: members: parse schema: item: parse schema: channel: parse schema: reference \"#/components/schemas/channel\": parse schema: to: parse schema: oneOf: [0]: parse schema: reference \"#/components/schemas/channel/properties/from/oneOf/0\": resolve reference \"#/components/schemas/channel/properties/from/oneOf/0\": schema not found"
}