{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nuts-foundation/nuts-node"
		},
		"file": {
			"name": "v1.yaml",
			"path": "docs/_static/network/v1.yaml",
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Nuts network API spec\n  description: API specification for RPC services available at the nuts-network\n  version: 0.1.0\n  license:\n    name: GPLv3\nservers:\n  - url: http://localhost:1323\npaths:\n  /internal/network/v1/transaction:\n    get:\n      summary: \"Lists the transactions on the DAG\"\n      description: \u003e\n        Lists all transactions on the DAG. Since this call returns all transactions on the DAG, care should be taken when there\n        are many of them.\n        TODO: By then we'd need a more elaborate querying interface (ranging over timestamps/hashes, pagination, filtering, etc).\n\n        error returns:\n        * 500 - internal server error\n      operationId: \"listTransactions\"\n      tags:\n        - transactions\n      responses:\n        \"200\":\n          description: \"Successfully listed the transactions\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/network/v1/transaction/{ref}:\n    parameters:\n      - name: ref\n        in: path\n        description: \"Reference of the transaction\"\n        required: true\n        example: \"4960afbdf21280ef248081e6e52317735bbb929a204351291b773c252afeebf4\"\n        schema:\n          type: string\n    get:\n      summary: \"Retrieves a transaction\"\n      description: |\n        Retrieves a transaction.\n\n        error returns:\n        * 400 - invalid transaction reference\n        * 404 - transaction not found\n        * 500 - internal server error\n      operationId: \"getTransaction\"\n      tags:\n        - transactions\n      responses:\n        \"200\":\n          description: \"Transaction is known in the transaction log\"\n          content:\n            application/jose:\n              schema:\n                type: string\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/network/v1/transaction/{ref}/payload:\n    parameters:\n      - name: ref\n        in: path\n        description: \"Reference of the transaction\"\n        required: true\n        example: \"4960afbdf21280ef248081e6e52317735bbb929a204351291b773c252afeebf4\"\n        schema:\n          type: string\n    get:\n      summary: \"Gets the transaction payload\"\n      operationId: \"getTransactionPayload\"\n      description: |\n        Gets the transaction payload.\n\n        error returns:\n        * 400 - invalid transaction reference\n        * 404 - transaction or payload not found\n        * 500 - internal server error\n      tags:\n        - transactions\n      responses:\n        \"200\":\n          description: \"Transaction found (with payload) and returned.\"\n          content:\n            application/octet-stream:\n              example:\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/network/v1/diagnostics/peers:\n    get:\n      summary: \"Gets diagnostic information about the node's peers\"\n      operationId: \"getPeerDiagnostics\"\n      tags:\n        - diagnostics\n      responses:\n        \"200\":\n          description: \"Successfully retrieved peers diagnostics\"\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/PeerDiagnostics'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/network/v1/diagnostics/graph:\n    get:\n      summary: \"Visualizes the DAG as a graph\"\n      description: \u003e\n        Walks the DAG as subscribers of the DAG do, rendering it as graph. By default it renders in Graphviz format,\n        which can be rendered to an image using `dot`.\n\n        error returns:\n        * 500 - internal server error\n      operationId: \"renderGraph\"\n      tags:\n        - diagnostics\n      responses:\n        \"200\":\n          description: \"Graph successfully rendered\"\n          content:\n            text/vnd.graphviz:\n              schema:\n                type: string\n        default:\n          $ref: '../common/error_response.yaml'\n\ncomponents:\n  schemas:\n    PeerDiagnostics:\n      type: object\n      description: Diagnostic information of a peer.\n      properties:\n        peers:\n          description: IDs of the peer's peers.\n          type: array\n          items:\n            type: string\n        uptime:\n          description: Number of seconds since the node started.\n          type: number\n        transactionNum:\n          description: Number of transactions on the peer's DAG.\n          type: number\n        softwareID:\n          description: \u003e\n            Identification of the particular Nuts implementation of the node.\n            For open source implementations it's recommended to specify URL to the public, open source repository.\n            Proprietary implementations could specify the product or vendor's name.\n          type: string\n        softwareVersion:\n          description: Indication of the software version of the node. It's recommended to use a (Git) commit ID that uniquely resolves to a code revision, alternatively a semantic version could be used (e.g. 1.2.5).\n          type: string\n"
		}
	},
	"Error": "parse: paths: /internal/network/v1/transaction/{ref}/payload: get: getTransactionPayload: responses: default: resolve \"../common/error_response.yaml\" reference: invalid response reference: \"../common/error_response.yaml\""
}