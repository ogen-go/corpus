{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/F5Networks/f5-declarative-onboarding"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "src/schema/1.21.0/openapi.yaml",
			"content": "openapi: 3.0.3\ninfo:\n  title: Draft DO API Specification\n  description: F5 Declarative Onboarding\n  version: 1.13.0\n  contact:\n    name: Declarative Onboarding\n    email: solutionsfeedback@f5.com\n    url: 'https://github.com/F5Networks/f5-declarative-onboarding'\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\npaths:\n  /:\n    get:\n      summary: Return status of configuration\n      description: Retrieve the status of the most recently deployed configuration\n      operationId: getDeclaration\n      tags:\n        - Declare\n      parameters:\n        - name: show\n          in: query\n          required: false\n          description: Retrive original and current configuration\n          schema:\n            type : string\n            enum:\n              - full\n        - name: statusCodes\n          in: query\n          required: false\n          description: Determines how DO returns HTTP status codes. Legacy returns any errors as the HTTP status. Experimental returns a 200 HTTP status code unless there is an actual error with the request. The result in the body of the response contains the status of the task.\n          schema:\n            type : string\n            enum:\n              - legacy\n              - experimental\n            default: legacy\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n    post:\n      summary: Declare a configuration\n      description: Upload a declaration and deploy the specified configuration\n      operationId: postDeclaration\n      tags:\n        - Declare\n      requestBody:\n        description: DO Declaration\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Device'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n  /config:\n    get:\n      summary: Return all original configurations\n      description: Retrieve the original configuration of all devices\n      operationId: getAllConfigs\n      tags:\n        - Config\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: '#/components/schemas/Config'\n  /config/{machineId}:\n    get:\n      summary: Return original configuration by machine ID\n      description: Retrieve the original configuration of a device by machine ID\n      operationId: getConfig\n      tags:\n        - Config\n      parameters:\n        - name: machineId\n          in: path\n          required: true\n          description: The machine ID\n          schema:\n            type : string\n            format: uuid\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Config'\n  /inspect:\n    get:\n      summary: Return current configuration\n      description: Retrieve the current configuration of a device\n      operationId: getInspect\n      tags:\n        - Inspect\n      parameters:\n        - name: targetHost\n          in: query\n          required: false\n          description: The IP address or domain name of the host from which to retrieve the current configuration\n          schema:\n            type : string\n            default: localhost\n        - name: targetPort\n          in: query\n          required: false\n          description: The port that is used with the targetHost to establish a connection to the device. By default, DO tries to establish a connection to the device using ports 443 and 8443.\n          schema:\n            type : integer\n            minimum: 0\n            maximum: 65535\n        - name: targetUsername\n          in: query\n          required: false\n          description: The username for the targetHost\n          schema:\n            type : string\n            default: admin\n        - name: targetPassword \n          in: query\n          required: false\n          description: The password for the targetHost\n          schema:\n            type : string\n            default: admin\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Inspect'\n  /task:\n    get:\n      summary: Return status of all configurations\n      description: Retrieve the status of all previously deployed configurations\n      operationId: getAllTasks\n      tags:\n        - Task\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - $ref: '#/components/schemas/Task'\n  /task/{taskId}:\n    get:\n      summary: Return status of configuration by task ID\n      description: Retrieve the status of a previously deployed configuration by task ID\n      operationId: getTask\n      tags:\n        - Task\n      parameters:\n        - name: taskId\n          in: path\n          required: true\n          description: The task ID\n          schema:\n            type : string\n            format: uuid\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\ncomponents:\n  schemas:\n    Config:\n      title: Config\n      description: The original configuration of a device\n      type: object\n      allOf:\n        - properties:\n            id:\n              type: string\n              format: uuid\n            selfLink:\n              type: string\n              format: uri\n            result:\n              type: object\n              properties:\n                class:\n                  type: string\n                  enum:\n                    - Result\n                code:\n                  type: integer\n                  enum:\n                    - 200\n                status:\n                  type: string\n                  enum:\n                    - OK\n                message:\n                  type: string\n                  enum:\n                    - ''\n                errors:\n                  type: array\n                  items:\n                    type: string\n                  maxLength: 0\n                  example: []\n        - $ref: '#/components/schemas/ConfigObject'\n    ConfigObject:\n      title: Config Object\n      type: object\n      properties:\n        Common:\n          type: object\n          description: A collection of sub-objects that describe the configuration state of a device\n          additionalProperties: true\n    Device:\n      $ref: base.schema.json\n    Inspect:\n      title: Inspect\n      description: The current configuration of a device\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        selfLink:\n          type: string\n          format: uri\n        result:\n          type: object\n          properties:\n            class:\n              type: string\n              enum:\n                - Result\n            code:\n              type: integer\n            status:\n              type: string\n              enum:\n                - OK\n                - ERROR\n            message:\n              type: string\n              enum:\n                - ''\n                - 'failed'\n            errors:\n              type: array\n              items:\n                type: string\n        declaration:\n          type: object\n          properties:\n            class:\n              type: string\n              enum:\n                - DO\n            declaration:\n              $ref: '#/components/schemas/Device'\n    Task:\n      title: Task\n      description: The configuration status and associated declaration\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        selfLink:\n          type: string\n          format: uri\n        result:\n          type: object\n          properties:\n            class:\n              type: string\n              enum:\n                - Result\n            code:\n              type: integer\n            status:\n              type: string\n              enum:\n                - OK\n                - ERROR\n                - ROLLING_BACK\n                - RUNNING\n                - REBOOTING\n                - REVOKING\n            message:\n              type: string\n        declaration:\n          $ref: '#/components/schemas/Device'\n        currentConfig:\n          $ref: '#/components/schemas/ConfigObject'\n        originalConfig:\n          $ref: '#/components/schemas/ConfigObject'\n"
		}
	},
	"Error": "parse: paths: /: get: operation \"getDeclaration\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/Task\": parse schema: declaration: parse schema: reference \"#/components/schemas/Device\": parse schema: reference \"base.schema.json\": resolve reference \"base.schema.json\": invalid schema reference \"base.schema.json\""
}