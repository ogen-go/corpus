{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/takanamito/openapi2ruby"
		},
		"file": {
			"name": "oneof.yaml",
			"path": "spec/fixtures/files/oneof.yaml",
			"content": "# This yaml referenced OpenAPI-Specification\n# https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: oneof example\n  license:\n    name: MIT\npaths:\n  /pets/{petId}:\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        animal:\n          oneOf:\n            - $ref: '#/components/schemas/Cat'\n            - $ref: '#/components/schemas/Dog'\n        name:\n          type: string\n        tag:\n          type: string\n    Dog:\n      type: object\n      properties:\n        bark:\n          type: boolean\n        breed:\n          type: string\n          enum: [Dingo, Husky, Retriever, Shepherd]\n    Cat:\n      type: object\n      properties:\n        hunts:\n          type: boolean\n        age:\n          type: integer\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n"
		}
	},
	"Error": "parse: paths: /pets/{petId}: get: showPetById: responses: 200: content: application/json: schema: parse schema: reference \"#/components/schemas/Pets\": resolve reference \"#/components/schemas/Pets\": schema not found"
}