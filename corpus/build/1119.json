{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/airbusgeo/playground-docs"
		},
		"file": {
			"name": "tile_geo_process_api.yaml",
			"path": "stub/app/tile_geo_process_api.yaml",
			"content": "openapi: 3.0.0\n\n#\n# Info\n#\ninfo:\n  title: 'Tile Geo Process API'\n  description: |\n    This document describes the Airbus DS Intelligence \"Tile Geo Process\" API specification. It is based on the Airbus Defense and Space \"Geo Process\" API specification but provides a more precise implementation. Tile Geo Process services that are provided to Airbus DS Intelligence must implement this specification.\n\n    The only execution mode for Geo Process Services is synchronous.\n\n    This API provides two endpoints with a fixed path /api/v1/openapi and /api/v1/describe.\n    The path prefix for the others endpoints are implementation specific, for example the /process endpoint could be implemented at /process or /mypath/process or /api/v1/process.\n    As been the only fixed endpoint with implementation specific data, /api/v1/describe contains the _links attribute that has to reference all implemented endpoints for the service.\n    With this main service entry and the provided links it is possible for a client to discover and address others endpoints of the service.\n\n    The Intelligence Playground is an evaluation environment to test algorithms on OneAtlas imagery from Airbus and Partners.\n  version: \"1.0.1\"\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n\n  contact:\n    name: Airbus DS Intelligence\n    url: 'https://www.intelligence-airbusds.com/'\n\n  x-logo:\n    url: https://www.intelligence-airbusds.com/files/pmedia/public/r2421_9_airbus_rgb.png\n\n#\n# External docs\n#\nexternalDocs:\n  description: Intelligence Playground Documentation\n  url: 'http://playground-docs.readthedocs.io'\n\n#\n# Tags\n#\ntags:\n  - name: Mandatory\n    description: |\n      Mandatory resources.\n      Defines the main entry point of the service.\n  - name: Synchronous\n    description: |\n      Mandatory resources for the synchronous mode.\n      Endpoints may be specific to each implementation.\n      Referenced via the _links attribute of the describe resource.\n  - name: Optional\n    description: |\n      Optional, implementation specific resources for low level\n      description and monitoring.\n      Endpoints may be specific to each implementation.\n      Referenced via the _links attribute of the describe resource.\n\n#\n# Paths\n#\npaths:\n  #\n  # OpenAPI schema\n  #\n  /api/v1/openapi:\n    get:\n      tags:\n        - Mandatory\n      summary: Open API specification of this service in YAML format\n      description: |\n        Returns Open API specification of this service in YAML format.\n        Subset of this API with implemented services.\n      responses:\n        '200':\n          description: Process Open API web UI.\n\n  #\n  # Describe\n  #\n  /api/v1/describe:\n    get:\n      tags:\n        - Mandatory\n      summary: Describes process service\n      description: |\n        Returns the description of the process.\n      operationId: describe\n      responses:\n        '200':\n          description: Process description.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Describe'\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Job execution\n  #\n  /process:\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    post:\n      tags:\n        - Synchronous\n      summary: Launch synchronous process execution on tile(s)\n      description: |\n        Execute the process as a synchronous process. The response contains a JSON object as defined\n        in the output attribute of the description resource.\n      operationId: process\n      requestBody:\n        description: |\n          Process input parameters as defined by the JSON Schema in the input\n          attribute of the description resource.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProcessInput'\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/OutputResponse'\n        '400':\n          $ref: '#/components/responses/InvalidInput'\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '503':\n          description: |\n            Service not available. Max number of simultaneous process execution\n            reached.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Instance versions\n  #\n  /version:\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    get:\n      tags:\n        - Optional\n      summary: Low level version description\n      description: |\n        Implementation specific.\n        Returns build, compiler or version control versions.\n      operationId: version\n      responses:\n        '200':\n          $ref: '#/components/responses/Version'\n\n  #\n  # Instance health check\n  #\n  /health:\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    get:\n      tags:\n        - Mandatory\n      summary: Check if the service is alive\n      description: |\n        The response is a HTTP status code 200 containing in the body 'OK'.\n      operationId: healthcheck\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n\n  #\n  # Instance metrics\n  #\n  /metrics:\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    get:\n      tags:\n        - Optional\n      summary: Execution usage metrics\n      description: |\n        Implementation specific.\n        Returns service usage metrics.\n      operationId: metrics\n      responses:\n        '200':\n          description: Service execution metrics.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metrics'\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n#\n# Components\n#\ncomponents:\n\n  #\n  # Security\n  #\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT #recommended\n\n  #\n  # Responses\n  #\n  responses:\n    OutputResponse:\n      description: |\n        Process output as defined in the output attribute of the description resource.\n\n    NotFound:\n      description: Entity not found.\n\n    NotAvailable:\n      description: Service not available.\n      \n    InvalidInput:\n      description: Invalid input for operation.\n\n    Version:\n      description: Version.\n      content:\n        text/plain:\n          schema:\n            type: string\n\n    Success:\n      description: Success. OK as content.\n      content:\n        text/plain:\n          schema:\n            type: string\n\n  #\n  # Schemas\n  #\n  schemas:\n\n    #\n    # Describe schema\n    #\n    Describe:\n      description: |\n        Process description.\n      type: object\n      required:\n        - name\n        - title\n        - family\n        - version\n        - description\n        - organization\n        - email\n        - requirements\n        - capabilities\n        - resources\n        - input\n        - output\n        - asynchronous\n        - _links\n      properties:\n        name:\n          description: Technical name of the process. May be the Docker image name.\n          type: string\n          example: eu.gcr.io/myproject/cat-detection:latest\n        title:\n          description: The title of the process.\n          type: string\n          example: Cat detection\n        family:\n          description: The process family.\n          type: string\n          example: object-detection\n        version:\n          description: The version of the process.\n          type: string\n          example: 1.0\n        description:\n          description: Gives a description of the process.\n          type: string\n          example: Detect cats on tiles\n        organization:\n          description: Identifier of the organization or entity publishing the process.\n          type: string\n          example: Airbus DS Intelligence\n        email:\n          description: Contact email.\n          type: string\n          example: cat-detection@airbus.com\n        keywords:\n          description: List of keywords or tags.\n          type: array\n          items:\n            type: string\n          example: [ \"cat\", \"dog\" ]\n        template:\n          description: Template name for predefined interfaces.\n          type: string\n          example: cat-detection\n        requirements:\n          # Requirements of the process service\n          $ref: '#/components/schemas/Requirements'\n        capabilities:\n          # Capabilities of the process service\n          $ref: '#/components/schemas/Capabilities'\n        resources:\n          # Hardware resources needed for process execution.\n          $ref: '#/components/schemas/Resources'\n        input:\n          # Process execution input interface.\n          $ref: '#/components/schemas/ProcessInput'\n        output:\n          # Process execution output interface.\n          $ref: '#/components/schemas/ProcessOutput'\n        batched:\n          description: True if batched mode provided i.e. capable of receiving an array of payloads\n          type: boolean\n          default: false\n          example: false\n        _links:\n          $ref: '#/components/schemas/Links'\n\n    #\n    # Requirements schema\n    #\n    Requirements:\n      description: Description of the requirements of a processing service. \n      type: object\n      required:\n        - tile_size\n\n      properties:\n        tile_size:\n          description: Expected size in pixels of the imagery tile that should be provided to the process service. The optimal value is the prefered size. The min and max parameters indicates the range of size in which the results are considered acceptable. If a strict tile size must be provided, all three numbers should be equals.\n          type: object\n          required:\n            - optimal\n            - min\n            - max\n          properties:\n            optimal:\n              description: Optimal size (in pixel) of the tile to be provided to the process service.\n              type: integer\n              example: 768\n            min:\n              description: Minimal size (in pixel) of the tile to be provided to the process service.\n              type: integer\n              example: 64\n            max:\n              description: Maximal size (in pixel) of the tile to be provided to the process service.\n              type: integer\n              example: 2048   \n\n        resolution:\n          description: Resolution (in meters per pixel) of the imagery to be provided to process service. The optimal value is the prefered resolution. The min and max parameters indicates the range of resolution in which the results are considered acceptable. If a strict resolution must be provided, all three numbers should be equals.\n          type: object\n          required:\n            - optimal\n            - min\n            - max\n          properties:\n            optimal:\n              description: Optimal resolution (in meter per pixel) of the imagery to be provided to the process service.\n              type: number\n              example: 1.5\n            min:\n              description: Minimal resolution (in meter per pixel) of the imagery to be provided to the process service.\n              type: number\n              example: 0.5\n            max:\n              description: Maximal resolution (in meter per pixel) of the imagery to be provided to the process service.\n              type: number\n              example: 2.5\n\n        overlap_size:\n          description: Expected overlap in pixels between two adjacent tiles of imagery.\n          type: integer\n          example: 10\n          default: 0\n\n        number_of_images:\n          description: How many images are expected by the process service (usually 1 image for object detection and 2 for change detection)\n          type: integer\n          default: 1\n\n        apply_fusion:\n          description: |\n            Defines how the output of the process service is to be fused with the results from the next overlapping tile.\n            If the value is NONE, no fusion is applied. This is the default behavior. If the value is something else than NONE,\n            then it indicates what should be done with the properties of the two fused objects.\n          type: string\n          default: NONE\n          enum:\n            - NONE\n            - SELECT_BASED_ON_CONFIDENCE\n            - SELECT_BASED_ON_AREA\n\n        max_concurrent_requests:\n          description: How many requests can the process service handle simultaneously.\n          type: integer\n          default: 1\n\n        duration_estimate:\n          description: Estimated duration in seconds of process (with optimal hardware).\n          type: integer\n          example: 720\n\n        supported_image_type:\n          description: The list of all image formats supported by the process service.\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageFormat'\n\n        metadata:\n          description: The list of metadata that the process service need to receive with each payload.\n          type: array\n          items:\n            $ref: '#/components/schemas/Metadata'\n\n        regions:\n          description: The list of regions where that process is expected to work correctly.\n          type: array\n          items:\n            $ref: '#/components/schemas/Regions'\n\n    #\n    # Extra metadata\n    #\n    Metadata:\n      type: string\n      enum:\n        - 'incidenceAngle'\n        - 'sunElevation'\n        - 'sunAzimuth'\n      description: \u003e\n        Available metadata names:\n          * `incidenceAngle` - Angle in degrees between the angle of view of the image and the nadir\n          * `sunElevation` - Angle in degrees between the horizon and the Sun direction at the time of image acquisition\n          * `sunAzimuth` - Angle in degrees between the North and the Sun direction at the time of image acquisition\n\n    #\n    # Description of regions where the processing \n    #\n    Regions:\n      type: string\n      enum:\n        - 'WORLD'\n        - 'NORTH AMERICA'\n        - 'CENTRAL AMERICA'\n        - 'SOUTH AMERICA'\n        - 'EUROPE'\n        - 'NORTH AFRICA'\n        - 'WEST AFRICA'\n        - 'CENTRAL AFRICA'\n        - 'EAST AFRICA'\n        - 'SOUTHERN AFRICA'\n        - 'MIDDLE EAST'\n        - 'RUSSIA'\n        - 'CENTRAL ASIA'\n        - 'EAST ASIA'\n        - 'SOUTH ASIA'\n        - 'SOUTH EAST ASIA'\n        - 'AUSTRALIA'\n        - 'OCEANIA'\n\n    # Capabilities\n    #\n    Capabilities:\n      description: |\n        Description of the precise technical capabilities of the process service. \n      type: object\n      required:\n        - tags\n      properties:\n        disclaimer:\n          type: string\n          description: |\n            Optional precision about the model and its results.\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tags'\n\n    #\n    # Resources schema\n    #\n    Resources:\n      description: |\n        Hardware resources needed to execute the process service.\n      type: object\n      required:\n        - gpu_enabled\n        - cpu_enabled\n        - ram\n      properties:\n        gpu_enabled:\n          description: Is the process service capable of managing GPU?\n          type: boolean\n          example: true\n        cpu_enabled:\n          description: Is the process service capable of running on CPU only?\n          type: boolean\n          example: true\n        cpu:\n          description: Number of CPU cores.\n          type: integer\n          example: 2\n        cpuArch:\n          description: CPU architecture, the default value is amd64.\n          type: string\n          enum: [amd64, arm64]\n          example: amd64\n        cpuPlatform:\n          description: Minimum CPU microarchitecture platform.\n          type: string\n          example: Haswell\n        gpu:\n          description: Number of GPU cores.\n          type: integer\n          example: 0\n        ram:\n          description: Size of RAM (bytes).\n          type: integer\n          example: 2097152 # 2 Gb\n        ram_gpu:\n          description: Size of RAM on GPU (bytes).\n          type: integer\n          example: 11534336 # 11 Gb\n        static_memory:\n          description: Required memory to process a single input.\n          type: string\n          example: \"10MB\"\n        dynamic_memory:\n          description: Required memory to process each additional input (when batching is available).\n          type: string\n          example: \"5MB\"\n        max_batch_size:\n          description: Max batch size.\n          type: integer\n          example: 10\n\n    #\n    # ImageFormat schema\n    #\n    ImageFormat:\n      description: Description of the image formats supported by the process service.\n      type: object\n      required:\n        - bit_depth\n        - bands\n        - format\n      properties:\n        bit_depth:\n          description: Number of bits used to encode one pixel.\n          type: integer\n          example: 8\n        bands:\n          description: Number and order of bands available for each pixel.\n          type: string\n          enum:\n            - PAN\n            - RGB\n            - RGBI\n            - NIR\n            - SWIR\n            - TIR\n            - RADAR-X\n            - RADAR-C\n        format:\n          description: Format in which the imagery is provided\n          type: string\n          enum:\n            - JPG\n            - JP2\n            - TIF\n            - PNG\n        processing:\n          description: Processing applied to the imagery (optional)\n          type: string\n          enum:\n            - BASIC\n            - DISPLAY\n            - REFLECTANCE\n            - AMPLITUDE\n          default: DISPLAY\n        ortholevel:\n          description: Ortho-rectification applied to the imagery (optional). \n            L1 for Sensor or no geoprocessing applied, L2 for geocoded imagery, L3 for ortho-rectified imagery and L4 for TrueOrtho\n          type: string\n          enum:\n            - L1\n            - L2\n            - L3\n            - L4\n          default: L3\n\n    #\n    # Tags schema\n    #\n    Tags:\n      type: object\n      description: A tag defining the class of the detected object\n      required:\n        - title\n      properties:\n        title:\n          type: string\n          description: The name of the tag usually a simple string i.e. 'cat'\n        description:\n          type: string\n          description: The precise description of this class i.e. for this process service 'cat' only applies to the domestic feline\n        _links:\n          $ref: '#/components/schemas/Links'\n\n    #\n    # Process Output schema\n    #\n    ProcessOutput:\n      description: Description of the output of the processing service. \n      type: object\n      required:\n        - content\n      properties:\n        format:\n          description: The description of the format of the output.\n          type: string\n          enum:\n            - application/json\n            - image/png\n        content:\n          oneOf:\n            - $ref: '#/components/schemas/as-GeoJSON'\n            - $ref: '#/components/schemas/as-PNG'\n\n\n    #\n    # as-GeoJSON schema\n    #\n    as-GeoJSON:\n      description: A GeoJSON FeatureCollection returning the results of the process service.\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n          - FeatureCollection\n        features:\n          type: array\n          items:\n            $ref: '#/components/schemas/Detection'\n\n\n    #\n    # Detection schema\n    #\n\n    Detection:\n      type: object\n      description: A GeoJSON feature indicating one detection made by the process service.\n      required:\n        - geometry\n        - properties\n      properties:\n        geometry:\n          # The geometry corresponding to the detection expressed in x,y in pixels in the tile. \n          $ref: '#/components/schemas/Geometry'\n        properties:\n          type: object\n          description: The information associated to this specific detection\n          required:\n            - tags\n          properties:\n            confidence:\n              type: number\n              description: The confidence associated to this detection expressed as a value betwee 0.0 and 1.0 by the process service.\n              example: 0.7\n              default: 1.0\n            tags:\n              type: array\n              items:\n                type: string\n            confidence_per_tag: \n              type: array\n              items:\n                type: array\n                items:\n                  oneOf:\n                    - type: string\n                    - type: number\n            length:\n              description: Length of the detected object in meters (if applicable).\n              type: number\n            width:\n              description: Width of the detected object in meters (if applicable).\n              type: number\n            area:\n              description: Surface of the detected object in squared meters.\n              type: number\n            heading:\n              description: Heading of the detected object in degrees from the North (if applicable).\n              type: number\n            height:\n              description: Height of the detected object on meters (if applicable).\n              type: number\n\n\n    #\n    # Simplified Geometry schema\n    #\n\n    Geometry:\n      type: object\n      description: GeoJSON feature\n      required:\n        - type\n      externalDocs:\n        url: http://geojson.org/geojson-spec.html#geometry-objects\n      properties:\n        type:\n          type: string\n          enum:\n            - Polygon\n          description: The geometry types supported in the output. Currently only polygons are supported.\n\n    #\n    # as-PNG schema\n    #\n\n    as-PNG:\n      description: A PNG image returning the results of the process service.\n      type: string\n      properties:\n        contentEncoding:\n          type: string\n          enum:\n          - base64\n        contentMediaType:\n          type: string\n          enum:\n            - image/png\n\n    #\n    # Links schema\n    #\n    Links:\n      description: |\n        Links for a single resource.\n      type: object\n      required:\n        - self\n      properties:\n        self:\n          # Current resource reference.\n          $ref: '#/components/schemas/Reference'\n        reference:\n          # List similar resource references.\n          $ref: '#/components/schemas/Reference'\n\n    #\n    # Metrics schema\n    #\n    Metrics:\n      description: |\n        Process metrics.\n\n        Implementation specific.\n      type: object\n\n    #\n    # ProcessInput schema\n    #\n    ProcessInput:\n      description: |\n        Process input parameters as defined by the JSON Schema in the input\n        attribute of the description resource.\n      type: object\n      required:\n        - resolution\n        - tiles\n      properties:\n        resolution:\n          description: The input tile resolution\n          type: number\n          example: 0.5\n        tiles:\n          description: The N tiles required by the process\n          type: array\n          items:\n            description: The tile image base64 encoded, may be JPEG or PNG format\n            type: string\n          example: [\"gABAQEASA....BIAADQBoUG\", \"hvdGzaG9w....IDMuM4QklN\"]      \n\n    #\n    # Reference schema\n    #\n    Reference:\n      description: |\n        Reference object.\n      type: object\n      required:\n        - href\n      properties:\n        relation:\n          description: Description of the relation.\n          type: string\n        href:\n          description: Determine the target URI of the related resource.\n          type: string\n          format: uri\n          example: http://myservice.com/api/v1/describe\n        type:\n          description: Expected content type of the response of the reference.\n          type: string\n          example: application/json\n        method:\n          # HTTP verb to distinguish between several possible actions on the same ressource. GET if omitted.\n          $ref: '#/components/schemas/ReferenceMethod'\n\n    #\n    # ReferenceMethod schema\n    #\n    ReferenceMethod:\n      description: |\n        HTTP verbs to access resources.\n      type: string\n      enum:\n        - GET\n        - POST\n        - PUT\n        - DELETE\n\n    #\n    # Error schema\n    #\n    Error:\n      description: |\n        Error returned when request fails\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          description: End user error description.\n          type: string\n        hint:\n          description: Internal / developper error message (no trace).\n          type: string\n        correlationId:\n          description: System request identifier from request header.\n          type: string\n        timestamp:\n          description: Error timestamp.\n          type: string\n"
		}
	},
	"Error": "parse: paths: /process: post: process: responses: 200: content: application/json: schema: parse schema: reference \"#/components/responses/OutputResponse\": resolve reference \"#/components/responses/OutputResponse\": invalid schema reference \"#/components/responses/OutputResponse\""
}