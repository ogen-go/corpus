{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Team-MoMo/MoMo-Server"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "server/src/docs/openapi.yaml",
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: MoMo API docs\n  description: MoMo 프로젝트의 API 문서입니다\n  license:\n    name: MIT\nservers:\n  - description: production server\n    url: https://momodiary.ga\n  - description: master server\n    url: http://3.36.79.14:3000\n  - description: local server\n    url: http://localhost:3000\nschemas: [http, https]\nconsumes:\n  - \"application/json\"\nproduces:\n  - \"application/json\"\ntags:\n  - name: Users\n    description: \"Everything about Users\"\n  - name: Diaries\n    description: \"Everything about Diaries\"\n  - name: Sentences\n    description: \"Everything about Sentences\"\n  - name: Emotions\n    description: \"Everything about Emotions\"\npaths:\n  /users/signup:\n    get:\n      summary: '이메일 중복확인(채원)'\n      tags:\n        - Users\n      parameters:\n        - in: query\n          name: email\n          schema:\n            type: string\n          required: true\n          description: 중복 확인 할 이메일\n      responses:\n        '200':\n          description: 'SUCCESS : 사용 가능한 이메일인 경우'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '사용 가능한 이메일입니다.'\n        '400':\n          description: 'FAIL : 중복된 이메일인 경우'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '사용 불가능한 이메일입니다.'\n        '500' :\n          description: 'FAIL : 서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '이메일 중복 확인 실패'\n                error: 'error \u0026\u0026 error.message'\n    post:\n      summary: '회원가입(채원)'\n      tags:\n        - Users\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                password:\n                  type: string\n      responses:\n        '201':\n          description: 'SUCCESS : 회원가입 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '회원가입 성공'\n                  data:\n                    type: object\n                    properties:\n                      user:\n                        $ref: '#/components/schemas/Users'\n                      token:\n                        type: string\n                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyLCJpYXQiOjE2MDk5MzcwMzgsImV4cCI6MTYxNzcxMzAzOCwiaXNzIjoibW9tbyJ9.Dp_5KpJ2wzCH4j-hBVgDAGmJDiS43RUKep6HjlQY6Ro'\n        '400':\n          description: 'FAIL : 중복된 이메일'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '사용 불가능한 이메일입니다.'\n        '500' :\n          description: 'FAIL : 서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '회원가입 실패'\n                error: 'error \u0026\u0026 error.message'                \n  /users/signin:\n    post:\n      summary: '로그인(채원)'\n      tags:\n        - Users\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                password:\n                  type: string\n      responses:\n        '200':\n          description: 'SUCCESS : 로그인 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '로그인 성공'\n                  data:\n                    type: object\n                    properties:\n                      user:\n                        $ref: '#/components/schemas/Users'\n                      token:\n                        type: string\n                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyLCJpYXQiOjE2MDk5MzcwMzgsImV4cCI6MTYxNzcxMzAzOCwiaXNzIjoibW9tbyJ9.Dp_5KpJ2wzCH4j-hBVgDAGmJDiS43RUKep6HjlQY6Ro'\n        '400':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                '아이디 오류':\n                  value:\n                    message: '존재하지 않는 회원'\n                '패스워드 오류':\n                  value:\n                    message: '비밀번호가 일치하지 않습니다'\n        '500' :\n          description: 'FAIL : 서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '로그인 실패'\n                error: 'error \u0026\u0026 error.message'\n  /users/signin/social:\n    post:\n      summary: '소셜로그인(채원)'\n      tags:\n        - Users\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                socialName:\n                  type: string\n                  description: 소셜 로그인 종류\n                  example: kakao || google || apple\n                accessToken:\n                  type: string\n                  description: 'kakao: accessToken 값, google: IDToken 값, apple: identityToken 값'\n      responses:\n        '200':\n          description: 'SUCCESS : 로그인 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '로그인 성공'\n                  data:\n                    type: object\n                    properties:\n                      user:\n                        $ref: '#/components/schemas/Users'\n                      token:\n                        type: string\n                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyLCJpYXQiOjE2MDk5MzcwMzgsImV4cCI6MTYxNzcxMzAzOCwiaXNzIjoibW9tbyJ9.Dp_5KpJ2wzCH4j-hBVgDAGmJDiS43RUKep6HjlQY6Ro'\n        '400':\n          description: 'FAIL : accessToken값 오류'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '잘못된 토큰'\n        '500' :\n          description: 'FAIL : 서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '로그인 실패'\n                error: 'error \u0026\u0026 error.message'\n  /users:\n    get:\n      security:\n        - api_key: []\n      summary: '회원전체조회(영현)'\n      tags:\n        - Users\n      responses:\n        '200':\n          description: 'SUCCESS : 회원 전체 조회 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '회원 전체 조회 성공'\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Users'\n        '500' :\n          description: 'FAIL : 서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '회원 전체 조회 실패'\n                error: 'error \u0026\u0026 error.message'\n  /users/{id}:\n    get:\n      security:\n        - api_key: []\n      summary: '회원 조회(영현)'\n      tags:\n        - Users\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: user 고유 id\n      responses:\n        '200':\n          description: 'SUCCESS: 회원 조회 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '회원 조회 성공'\n                  data:\n                    $ref: '#/components/schemas/Users'\n        '400':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'id값 오류':\n                  value:\n                    message: '존재하지 않는 회원'\n        '401':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'userId != 토큰 정보':\n                  value:\n                    message: '권한이 없습니다'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '회원 조회 실패'\n                error: 'error \u0026\u0026 error.message'\n    delete:\n      security:\n        - api_key: []\n      summary: '회원 탈퇴(영현)'\n      tags:\n        - Users\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: user 고유 id\n      responses:\n        '200':\n          description: 'SUCCESS: 회원 삭제 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '회원 삭제 성공'\n                  data:\n                    $ref: '#/components/schemas/Users'\n        '400':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'id값 오류':\n                  value:\n                    message: '존재하지 않는 회원'\n        '401':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'userId != 토큰 정보':\n                  value:\n                    message: '권한이 없습니다'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '회원 삭제 실패'\n                error: 'error \u0026\u0026 error.message'\n  /users/{id}/alarm:\n    put:\n      security:\n        - api_key: []\n      summary: '알람 변경(영현)'\n      tags:\n        - Users\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: user 고유 id\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  isAlarmSet:\n                    type: boolean\n                  alarmTime:\n                    type: string\n            examples:\n              알람 on/off:\n                summary: '알람 on/off 변경하는 경우'\n                value:\n                  isAlarmSet: true\n              알람 시간 설정:\n                summary: '알람 시간 설정 및 변경하는 경우'\n                value:\n                  isAlarmSet: true\n                  alarmTime: \"06:00\"\n      responses:\n        '200':\n          description: 'SUCCESS : 알람 수정 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '알람 수정 성공'\n                  data:\n                    type: object\n                    properties:\n                      isAlarmSet:\n                        type: boolean\n                        example: true\n                      alarmTime:\n                        type: string\n                        example: null\n        '400':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'id값 오류':\n                  value:\n                    message: '존재하지 않는 회원'\n        '401':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'userId != 토큰 정보':\n                  value:\n                    message: '권한이 없습니다'\n        '500' :\n          description: 'FAIL : 서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '알람 수정 실패'\n                error: 'error \u0026\u0026 error.message'\n  /users/{id}/password:\n    put:\n      security:\n        - api_key: []\n      summary: '비밀번호 변경(영현)'\n      tags:\n        - Users\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: user 고유 id\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  newPassword:\n                    type: string\n            example:\n                newPassword: \"새로운 비밀번호\"\n      responses:\n        '200':\n          description: 'SUCCESS: 비밀번호 수정 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '비밀번호 수정 성공'\n                  data:\n                    $ref: '#/components/schemas/Users'\n        '400':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'id값 오류':\n                  value:\n                    message: '존재하지 않는 회원'\n                '현재 비밀번호와 같은 값을 입력한 경우':\n                  value:\n                    message: '현재 비밀번호와 새로운 비밀번호가 동일합니다'\n        '401':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'userId != 토큰 정보':\n                  value:\n                    message: '권한이 없습니다'\n        '500' :\n          description: 'FAIL : 서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '비밀번호 수정 실패'\n                error: 'error \u0026\u0026 error.message'\n    post:\n      security:\n        - api_key: []\n      summary: '비밀번호 확인(영현)'\n      tags:\n        - Users\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: user 고유 id\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  newPassword:\n                    type: string\n            example:\n                password: \"현재 비밀번호\"\n      responses:\n        '200':\n          description: 'SUCCESS: 비밀번호 일치'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '비밀번호가 일치합니다'\n        '400':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'id값 오류':\n                  value:\n                    message: '존재하지 않는 회원'\n                'password 입력 오류':\n                  value:\n                    message: '비밀번호가 일치하지 않습니다'\n        '401':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'userId != 토큰 정보':\n                  value:\n                    message: '권한이 없습니다'\n        '500' :\n          description: 'FAIL : 서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '서버 내부 오류'\n                error: 'error \u0026\u0026 error.message'\n  /users/password/temp:\n    post:\n      security:\n        - api_key: []\n      summary: '임시비밀번호 발급(채원)'\n      tags:\n        - Users\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  email:\n                    type: string\n            example:\n                email: 'chaeppy108@gmail.com'\n      responses:\n        '200':\n          description: 'SUCCESS: 임시비밀번호 생성 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '임시 비밀번호 생성 성공'\n                  data:\n                    type: object\n                    properties:\n                      email:\n                        type: string\n                        example: 'chaeppy108@gmail.com'\n                      tempPasswordIssueCount:\n                        type: integer\n                        example: 1\n        '400':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'email 입력 오류':\n                  value:\n                    message: '존재하지 않는 회원'\n                '임시비밀번호 발급 횟수 초과':\n                  value:\n                    message: '임시비밀번호 발급 횟수 초과'\n        '500' :\n          description: 'FAIL : 서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '임시비밀번호 생성 실패'\n                error: 'error \u0026\u0026 error.message'\n  /diaries:\n    post:\n      security:\n        - api_key: []\n      summary: '일기 생성(영우)'\n      tags:\n        - Diaries\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  depth:\n                    type: integer\n                  contents:\n                    type: string\n                  userId:\n                    type: integer\n                  sentenceId:\n                    type: integer\n                  emotionId:\n                    type: integer\n                  wroteAt:\n                    type: date-time\n            example:\n              contents: 'test_contents_0'\n              depth: 3\n              userId: 2,\n              sentenceId: 40,\n              emotionId: 3,\n              wroteAt: \"2020-08-16\"\n      responses:\n        '201':\n          description: 'SUCCESS: 일기 생성 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '일기 생성 성공'\n                  data:\n                    $ref: '#/components/schemas/Diaries'\n        '401':\n          description: 'FAIL : userId != 토큰 정보'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '권한이 없습니다'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '일기 생성 실패'\n                error: 'error \u0026\u0026 error.message'\n    get:\n      security:\n        - api_key: []\n      summary: '일기 전체 조회 및  깊이 / 필터별 조회(영우)'\n      description: '일기 전체 조회(userId, year, month 값 필요(https://momodiary.ga/diaries?year=2020\u0026month=12\u0026userId=1)) =\u003e 사용자가 작성한 모든 일기 조회(날짜순으로 정렬)\n      \u003c/br\u003e일기 깊이 조회(userId, year, month, order=depth 필요(https://momodiary.ga/diaries?year=2020\u0026month=12\u0026userId=2\u0026order=depth)) =\u003e 해당 년/월에 사용자가 작성한 일기 조회(깊이순으로 정렬)\n      \u003c/br\u003e일기 필터 조회(userId, year, month, order=filter 필요 / day, emotionId, depth 필터에 따라 선택적으로 (https://momodiary.ga?year=2020\u0026month=12\u0026userId=2\u0026order=filter\u0026day=10\u0026emotionId=2))\n      \u003c/br\u003e =\u003e 해당 년/월 or 년/월/일에 사용자가 작성한 일기 필터에 따라 조회(날짜순으로 정렬)'\n      tags:\n        - Diaries\n      parameters:\n        - in: query\n          name: userId\n          schema:\n            type: string\n          required: true\n          example: 2\n          description: user 고유 id\n        - in: query\n          name: year\n          schema:\n            type: string\n          required: true\n          example: \"2020\"\n          description: 조회 할 년도\n        - in: query\n          name: month\n          schema:\n            type: string\n          required: true\n          example: \"11\"\n          description: 조회 할 월\n        - in: query\n          name: order\n          schema:\n            type: string\n          examples:\n            depth:\n              summary: 깊이별 조회\n              value: depth\n            filter:\n              summary: 필터별 조회\n              value: filter\n          description: 조회 기준(깊이 / 필터별 조회 때 사용)\n        - in: query\n          name: day\n          schema:\n            type: string\n          required: false\n          description: 조회 할 일(필터별 조회 때 사용)\n        - in: query\n          name: emotionId\n          schema:\n            type: string\n          required: false\n          example: 1\n          description: 감정 고유 id(필터별 조회 때 사용)\n        - in: query\n          name: depth\n          schema:\n            type: string\n          required: false\n          example: 1\n          description: 깊이 값(필터별 조회 때 사용)\n      responses:\n        '200':\n          description: 'SUCCESS: 일기 전체 조회 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '일기 전체 조회 성공'\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/DiariesWithSentencesAndEmotions'\n        '400':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                '입력 값 오류':\n                  value:\n                    message: 'Body 타입이 잘못 되었습니다.'\n        '401':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'userId != 토큰 정보':\n                  value:\n                    message: '권한이 없습니다'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '일기 전체 조회 실패'\n                error: 'error \u0026\u0026 error.message'\n  /diaries/statistics:\n    get:\n      security:\n        - api_key: []\n      summary: '일기통계 조회(영우)'\n      tags:\n        - Diaries\n      parameters:\n        - in: query\n          name: userId\n          schema:\n            type: string\n          required: true\n          example: 2\n          description: user 고유 id\n        - in: query\n          name: year\n          schema:\n            type: string\n          required: true\n          example: \"2020\"\n          description: 조회 할 년도\n        - in: query\n          name: month\n          schema:\n            type: string\n          required: true\n          example: \"12\"\n          description: 조회 할 월\n      responses:\n        '200':\n          description: 'SUCCESS: 일기통계 조회 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '일기통계 조회 성공'\n                  data:\n                    type: object\n                    properties:\n                      emotionCounts: \n                        type: array\n                        items:\n                          properties:\n                            id:\n                              type: integer\n                              example: 1\n                            count:\n                              type: integer\n                              example: 5\n                            Emotion.id:\n                              type: integer\n                              example: 1\n                            Emotion.name:\n                              type: string\n                              example: '행복'\n                            Emotion.createdAt:\n                              type: date-time\n                              example: '2021-01-10T14:39:10.000Z'\n                            Emotion.updatedAt:\n                              type: date-time\n                              example: '2021-01-10T14:39:10.000Z'\n                      depthCounts:\n                        type: array\n                        items: \n                          properties:\n                            depth:\n                              type: integer\n                              example: 0\n                            count:\n                              type: integer\n                              example: 4\n        '400':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                '입력 값 오류':\n                  value:\n                    message: 'Body 타입이 잘못 되었습니다.'\n        '401':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'userId != 토큰 정보':\n                  value:\n                    message: '권한이 없습니다'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '일기통계 조회 실패'\n                error: 'error \u0026\u0026 error.message'\n  /diaries/recent:\n    get:\n      security:\n        - api_key: []\n      summary: '일기 작성이 안된 가장 최근 날짜조회(영우)'\n      tags:\n        - Diaries\n      parameters:\n        - in: query\n          name: userId\n          schema:\n            type: string\n          required: true\n          example: 2\n          description: user 고유 id\n      responses:\n        '200':\n          description: 'SUCCESS: 일기 최근 미작성 날짜 조회 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '일기 최근 미작성 날짜 조회 성공'\n                  data:\n                    example: '2021-01-13T00:00:00+00:00'\n        '401':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'userId != 토큰 정보':\n                  value:\n                    message: '권한이 없습니다'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '일기 조회 실패'\n                error: 'error \u0026\u0026 error.message'\n  /diaries/{id}:\n    get:\n      security:\n        - api_key: []\n      summary: '일기 조회(영우)'\n      tags:\n        - Diaries\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          example: 1\n          description: 일기 고유 id\n      responses:\n        '200':\n          description: 'SUCCESS: 일기 조회 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '일기 조회 성공'\n                  data:\n                    $ref: '#/components/schemas/DiariesWithSentencesAndEmotions'\n        '400':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'id 값 오류':\n                  value:\n                    message: '존재하지 않는 일기'\n        '401':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                '해당 일기의 userId != 토큰 정보':\n                  value:\n                    message: '권한이 없습니다'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '일기 조회 실패'\n                error: 'error \u0026\u0026 error.message'\n    put:\n      security:\n        - api_key: []\n      summary: '일기 수정(영우)'\n      tags:\n        - Diaries\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          example: 1\n          description: 일기 고유 id\n      requestBody:\n        description: '변경된 속성만 넣어주면 됩니다!'\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  depth:\n                    type: integer\n                  contents:\n                    type: string\n                  userId:\n                    type: integer\n                  sentenceId:\n                    type: integer\n                  emotionId:\n                    type: integer\n                  wroteAt:\n                    type: date-time\n            example:\n              depth: 3\n              contents: 'test_contents_0'\n              userId: 2,\n              sentenceId: 40,\n              emotionId: 7,\n              wroteAt: \"2020-08-16\"\n      responses:\n        '200':\n          description: 'SUCCESS: 일기 수정 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '일기 수정 성공'\n                  data:\n                    $ref: '#/components/schemas/DiariesWithSentencesAndEmotions'\n        '400':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'id 값 오류':\n                  value:\n                    message: '존재하지 않는 일기'\n        '401':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'userId != 토큰 정보':\n                  value:\n                    message: '권한이 없습니다'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '일기 수정 실패'\n                error: 'error \u0026\u0026 error.message'\n    delete:\n      security:\n        - api_key: []\n      summary: '다이어리 삭제(영우)'\n      tags:\n        - Diaries\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          example: 1\n          description: 다이어리 고유 id\n      responses:\n        '200':\n          description: 'SUCCESS: 다이어리 삭제 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '일기 삭제 성공'\n                  data:\n                    $ref: '#/components/schemas/DiariesWithSentencesAndEmotions'\n        '400':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'id 값 오류':\n                  value:\n                    message: '존재하지 않는 일기'\n        '401':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'userId != 토큰 정보':\n                  value:\n                    message: '권한이 없습니다'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '일기 삭제 실패'\n                error: 'error \u0026\u0026 error.message'\n  /sentences:\n    post:\n      summary: '문장 등록(영현)'\n      tags:\n        - Sentences\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  contents:\n                    type: string\n                  bookName:\n                    type: string\n                  writer:\n                    type: string\n                  publisher:\n                    type: string\n                  emotion:\n                    type: array\n            example:\n              contents: '문장 내용'\n              bookName: '책 이름'\n              writer: '저자명'\n              publisher: \"출판사명\"\n              emotion: ['사랑', '행복']\n      responses:\n        '201':\n          description: 'SUCCESS: 문장 생성 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '문장 생성 성공'\n                  data:\n                    $ref: '#/components/schemas/Sentences'\n        '400':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'requestBody값 입력없는 경우':\n                  value:\n                    message: '필요한 값이 없습니다'\n                'emotion값 오류':\n                  value:\n                    message: '감정 조회 실패'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '문장 생성 실패'\n                error: 'error \u0026\u0026 error.message'\n    get:\n      summary: '문장 조회(영현)'\n      tags:\n        - Sentences\n      parameters:\n        - in: query\n          name: sentenceId\n          schema:\n            type: number\n          required: false\n          example: 1\n          description: sentence 고유 id\n        - in: query\n          name: publisher\n          schema:\n            type: string\n          required: false\n          example: 'publisher'\n          description: '출판사명'\n        - in: query\n          name: bookName\n          schema:\n            type: string\n          required: false\n          example: bookName\n          description: '도서명'\n        - in: query\n          name: writer\n          schema:\n            type: string\n          required: false\n          example: writer\n          description: '저자명'\n      responses:\n        '200':\n          description: 'SUCCESS: 문장 조회 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '문장 조회 성공'\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Sentences'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '문장 조회 실패'\n                error: 'error \u0026\u0026 error.message'\n    delete:\n      summary: 문장 삭제(영현)\n      tags:\n        - Sentences\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  sentenceId:\n                    type: number\n                  bookName:\n                    type: string\n                  writer:\n                    type: string\n                  publisher:\n                    type: string\n            example:\n              sentenceId: 1\n              bookName: '책 이름'\n              writer: '저자명'\n              publisher: \"출판사명\"\n      responses:\n        '200':\n          description: 'SUCCESS: 문장 삭제 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '문장 삭제 성공'\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Sentences'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '문장 삭제 실패'\n                error: 'error \u0026\u0026 error.message'\n  /sentences/recommend:\n    get:\n      security:\n        - api_key: []\n      summary: '추천문장 조회(영현)'\n      tags:\n        - Sentences\n      parameters:\n        - in: query\n          name: emotionId\n          schema:\n            type: string\n          required: true\n          example: 1\n          description: emotion 고유 id\n        - in: query\n          name: userId\n          schema:\n            type: string\n          required: true\n          example: 2\n          description: user 고유 id\n      responses:\n        '200':\n          description: 'SUCCESS: 추천문장 조회 성공(문장 3개)'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '추천문장 조회 성공'\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Sentences'\n        '400':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'id값 오류':\n                  value:\n                    message: '존재하지 않는 회원'\n        '401':\n          description: 'FAIL : 잘못된 요청'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              examples:\n                'userId != 토큰 정보':\n                  value:\n                    message: '권한이 없습니다'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '추천문장 조회 실패'\n                error: 'error \u0026\u0026 error.message'\n  /sentences/onboarding:\n    get:\n      summary: '온보딩 문장 조회(영현)'\n      tags:\n        - Sentences\n      parameters:\n        - in: query\n          name: emotionId\n          schema:\n            type: string\n          required: true\n          example: 1\n          description: emotion 고유 id\n      responses:\n        '200':\n          description: 'SUCCESS: 온보딩문장 조회 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '온보딩문장 조회 성공'\n                  data:\n                    type: object\n                    properties:\n                      emotionId:\n                        type: integer\n                        example: 1\n                      sentence_01:\n                        type: object\n                        properties:\n                          contents:\n                            type: string\n                            example: '문장 내용'\n                          bookName:\n                            type: string\n                            example: '책 제목'\n                          writer:\n                            type: string\n                            example: '저자명'\n                          publisher:\n                            type: string\n                            example: '출판사'\n                      sentence_02:\n                        type: object\n                        properties:\n                          contents:\n                            type: string\n                            example: '문장 내용'\n                          bookName:\n                            type: string\n                            example: '책 제목'\n                          writer:\n                            type: string\n                            example: '저자명'\n                          publisher:\n                            type: string\n                            example: '출판사'\n                      sentence_03:\n                        type: object\n                        properties:\n                          contents:\n                            type: string\n                            example: '문장 내용'\n                          bookName:\n                            type: string\n                            example: '책 제목'\n                          writer:\n                            type: string\n                            example: '저자명'\n                          publisher:\n                            type: string\n                            example: '출판사'\n        '400':\n          description: 'FAIL : emotionId 값 입력없는 경우'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: 'emotionId must be a `number` type, but the final value was: `NaN` (cast from the value `\\\"\\\"`).'\n  /sentences/blind:\n    put:    \n      summary: '문장블라인드 수정(영현)'\n      tags:\n        - Sentences\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  sentenceId:\n                    type: number\n                  bookName:\n                    type: string\n                  writer:\n                    type: string\n                  publisher:\n                    type: string\n                  blindedAt:\n                    type: string\n                example:\n                  sentenceId: 1\n                  bookName: '책 이름'\n                  writer: '저자명'\n                  publisher: \"출판사명\"\n                  blindedAt: \"2021-02-02 06:00\"\n      responses:\n        '200':\n          description: 'SUCCESS: 문장블라인드 수정 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '문장블라인드 수정 성공'\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Sentences'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '문장블라인드 수정 실패'\n                error: 'error \u0026\u0026 error.message'\n  /emotions:\n    get:\n      security:\n        - api_key: []\n      summary: '감정 전체 조회(영현)'\n      tags:\n        - Emotions\n      responses:\n        '200':\n          description: 'SUCCESS: 감정 전체 조회 성공'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: '감정 전체 조회 성공'\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Emotions'\n        '500' :\n          description: '서버 내부 에러'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                message: '감정 전체 조회 실패'\n                error: 'error \u0026\u0026 error.message'\ncomponents:\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: authorization\n      in: header\n  schemas:\n    Users:\n      type: object\n      required:\n        - id\n        - email\n        - password\n        - passwordSalt\n      properties:\n        id:\n          type: number\n          description: user 고유 id\n        email:\n          type: string\n          description: 이메일\n        password:\n          type: string\n          description: 비밀번호\n        passwordSalt:\n          type: string\n          description: 비밀번호 salt 값\n        isAlarmSet: \n          type: boolean\n          description: 알람 설정 값\n        alarmTime:\n          type: time\n          description: 알람 설정 시간\n        tempPassword:\n          type: string\n          description: 임시 비밀번호\n        tempPasswordCreatedAt:\n          type: date-time\n          description: 임시 비밀번호가 생성된 시점\n        tempPasswordIssueCount:\n          type: number\n          description: 임시 비밀번호 시도 횟수\n        isDeleted:\n          type: boolean\n          description: 해당 데이터 삭제 여부\n        createdAt:\n          type: date-time\n          description: 해당 데이터가 생성된 시점\n        updatedAt:\n          type: date-time\n          description: 해당 데이터가 변경된 시점\n        deletedAt:\n          type: date-time\n          description: 해당 데이터가 삭제된 시점\n    Emotions:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: number\n          description: emotion 고유 id\n        name:\n          type: string\n          description: 감정 이름\n        createdAt:\n          type: date-time\n          description: 해당 데이터가 생성된 시점\n        updatedAt:\n          type: date-time\n          description: 해당 데이터가 변경된 시점\n        deletedAt:\n          type: date-time\n          description: 해당 데이터가 삭제된 시점\n    Sentences:\n      type: object\n      required: ['id', 'contents', 'bookName', 'writer', 'publisher']\n      properties:\n        id: \n          type: number\n          description: sentence 고유 id\n        contents:\n          type: string\n          description: 문장 내용\n        bookName:\n          type: string\n          description: 책 이름\n        writer:\n          type: string\n          description: 저자명\n        publisher:\n          type: string\n          description: 출판사\n        blindedAt:\n          type: date-time\n          description: 해당 문장이 블라인드 처리된 시점\n        createdAt:\n          type: date-time\n          description: 해당 데이터가 생성된 시점\n        updatedAt:\n          type: date-time\n          description: 해당 데이터가 변경된 시점\n        deletedAt:\n          type: date-time\n          description: 해당 데이터가 삭제된 시점\n    Diaries:\n      type: object\n      required: ['id', 'contents', 'position', 'depth', 'userId', 'sentenceId', 'emotionId', 'wroteAt']\n      properties:\n        id:\n          type: number\n          description: diary 고유 id\n        contents:\n          type: string\n          description: 일기 내용\n        depth:\n          type: number\n          description: 일기 깊이\n        userId:\n          type: number\n          description: 일기를 작성한 user 고유 id\n        sentenceId:\n          type: number\n          description: 일기에 사용된 sentence 고유 id\n        tempSentenceId:\n          type: number\n          description: 일기에 사용된 sentece 고유 id(백업용)\n        emotionId:\n          type: number\n          description: 일기의 감정에 해당하는 emotion 고유 id\n        wroteAt:\n          type: date-time\n          description: 일기 날짜\n        position:\n          type: number\n          description: x 위치 값\n        createdAt:\n          type: date-time\n          description: 해당 데이터가 생성된 시점\n        updatedAt:\n          type: date-time\n          description: 해당 데이터가 변경된 시점\n        deletedAt:\n          type: date-time\n          description: 해당 데이터가 삭제된 시점\n    Notifications:\n      type: object\n      required: ['id', 'deviceToken', 'userId']\n      properties:\n        id:\n          type: number\n          description: notification 고유 id\n        deviceToken:\n          type: string\n          description: 기기 토큰 값 \n        userId:\n          type: number\n          description: user 고유 id\n        createdAt:\n          type: date-time\n          description: 해당 데이터가 생성된 시점\n        updatedAt:\n          type: date-time\n          description: 해당 데이터가 변경된 시점\n        deletedAt:\n          type: date-time\n          description: 해당 데이터가 삭제된 시점\n    UsersRecommendedSentences:\n      type: object\n      required: ['id', 'userId', 'sentenceId', 'emotionId']\n      properties:\n        id:\n          type: number\n          description: usersRecommendedSentences 고유 id\n        userId:\n          type: number\n          description: user 고유 id\n        sentenceId:\n          type: number\n          description: sentence 고유 id\n        emotionId:\n          type: number\n          description: emotion 고유 id\n        isDeleted:\n          type: boolean\n          description: 해당 데이터 삭제여부\n        createdAt:\n          type: date-time\n          description: 해당 데이터가 생성된 시점\n        updatedAt:\n          type: date-time\n          description: 해당 데이터가 변경된 시점\n        deletedAt:\n          type: date-time\n          description: 해당 데이터가 삭제된 시점\n    EmotionsHaveSentences:\n      type: object\n      required: ['id', 'userId', 'sentenceId', 'emotionId']\n      properties:\n        id:\n          type: number\n          description: usersRecommendedSentences 고유 id\n        sentenceId:\n          type: number\n          description: sentence 고유 id\n        emotionId:\n          type: number\n          description: emotion 고유 id\n        createdAt:\n          type: date-time\n          description: 해당 데이터가 생성된 시점\n        updatedAt:\n          type: date-time\n          description: 해당 데이터가 변경된 시점\n        deletedAt:\n          type: date-time\n          description: 해당 데이터가 삭제된 시점\n    DiariesWithSentencesAndEmotions:\n      allOf:\n        - $ref: '#/components/schemas/Diaries'\n        - type: object\n          properties:\n            Sentence:\n              $ref: '#/components/schemas/Sentences'\n            Emotion:\n              $ref: '#/components/schemas/Emotions'\n    Error:\n      type: object\n      properties:\n        message:\n          type: string\n        error:\n          type: string\n  responses:\n    BadRequest:\n      description: 잘못된 요청\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            message: 잘못된 요청\n    InternalServerError:\n      description: 서버 에러\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            message: 서버 내부 오류\n    DBError:\n      description: 데이터베이스 에러\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            message: 데이터베이스 에러\n    Unauthorized:\n      description: 권한 없음\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            message: 권한 없음\n"
		}
	},
	"Error": "parse: paths: /diaries/{id}: get: : responses: 200: content: application/json: schema: parse schema: data: parse schema: reference \"#/components/schemas/DiariesWithSentencesAndEmotions\": parse schema: allOf: [0]: parse schema: reference \"#/components/schemas/Diaries\": parse schema: createdAt: parse schema: unexpected schema type: \"date-time\""
}