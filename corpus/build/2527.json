{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bcgov/OCWA"
		},
		"file": {
			"name": "api-docs.yaml",
			"path": "microservices/forumApi/routes/v1/spec/api-docs.yaml",
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 0.0.1\n  title: Forum API\n  description: |\n    This is a forum api that provides topics, comments and permissions. A Websocket exists on the server on a different port (normally 1 higher than the api)\n    that sends out information when it is available over the websocket to interested users. To connect to the websocket you must specify the JWT in the protocol option.\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  contact:\n    name: Brandon Sharratt\nservers:\n  - url: /v1\n    description: This Server\npaths:\n  /:\n    get:\n      summary: List all topics\n      operationId: listTopics\n      tags:\n        - Topics\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: page\n          in: query\n          description: Which page to start on (relative to limit)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of topics that the user has access to\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Topics\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: Create a topic\n      operationId: createTopic\n      tags:\n        - Topics\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TopicPost\"\n      responses:\n        '200':\n          description: Success Message\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Success\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /comment/{topicId}:\n    get:\n      summary: Paged comments for a topic the user has access to\n      operationId: listComments\n      tags:\n        - Comments\n      parameters:\n        - name: topicId\n          in: path\n          required: true\n          description: The id of the topic to retrieve comments from\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          default: 100\n          schema:\n            type: integer\n            format: int32\n        - name: page\n          in: query\n          description: Which page to start on (relative to limit)\n          required: false\n          default: 1\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Comments\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: Create a comment\n      operationId: createComment\n      tags:\n        - Comments\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CommentPost\"\n      responses:\n        '200':\n          description: Success Message\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Success\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /permission:\n    get:\n      summary: List all permissions\n      operationId: listPermissions\n      tags:\n        - Permissions\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: page\n          in: query\n          description: Which page to start on (relative to limit)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of permissions\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Permissions\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: Create a permission\n      operationId: createPermission\n      tags:\n        - Permissions\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PermissionPost\"\n      responses:\n        '200':\n          description: Success Message\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Success\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  schemas:\n    Topic:\n      required:\n        - _id\n        - name\n        - parent_id\n        - contributors\n        - __v\n      properties:\n        _id:\n          type: string\n          description: Object id\n        name:\n          type: string\n          description: name of the topic\n        parent_id:\n          type: string\n          description: Object id pointing to another topic\n        contributors:\n          type: array\n          items:\n            type: string\n          description: List of all people who have commented on this topic, by default contains the topic creator\n        __v:\n          type: string\n          description: version of the topic (increments with changes)\n    Topics:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Topic\"\n    Comment:\n      required:\n        - _id\n        - created_ts\n        - topic_id\n        - comment\n        - author_user\n        - __v\n      properties:\n        _id:\n          type: string\n          description: Object id\n        created_ts:\n          type: string\n          format: date-time\n        topic_id:\n          type: string\n          description: Object id refering to the topic id this comment belongs to\n        comment:\n          type: string\n          description: the actual comment body\n        author_user:\n          type: string\n          description: the unique user identifier that posted this comment, usually username\n        __v:\n          type: string\n          description: version of the topic (increments with changes)\n    Comments:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Comment\"\n\n    Permission:\n      required:\n        - _id\n        - priority\n        - allow\n        - __v\n      properties:\n        _id:\n          type: string\n          description: Object id\n        priority:\n          type: number\n          description: \"Order to run priority in, DO NOT overlap, lower is first (i.e: 0 before 1)\"\n        allow:\n          type: boolean\n          description: Mostly for clarity on topics this should be true, on comments false\n          default: false\n        topic_id:\n          type: string\n          description: List of topic ids this rule applies to, * for all. Cannot be used with comment_id\n        comment_id:\n          type: string\n          description: List of comment ids this rule applies to, * for all. Cannot be used with topic_id\n        user_ids:\n          type: array\n          items:\n            type: string\n          description: The user_ids that this rule applies to, * for all\n        group_ids:\n          type: array\n          items:\n            type: string\n          description: The group_ids that this rule applies to, * for all\n        __v:\n          type: string\n          description: version of the topic (increments with changes)\n    Permissions:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Permission\"\n\n\n    TopicPost:\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          description: name of the topic\n        parent_id:\n          type: string\n          description: id of the parent topic\n    CommentPost:\n      required:\n        - comment\n      properties:\n        comment:\n          type: string\n          description: comment body\n    PermissionPost:\n      required:\n        - priority\n      properties:\n        priority:\n          type: number\n          description: \"Order to run priority in, DO NOT overlap, lower is first (i.e: 0 before 1)\"\n        allow:\n          type: boolean\n          description: Mostly for clarity on topics this should be true, on comments false\n          default: false\n        topic_id:\n          type: string\n          description: Topic id this applies to, * for all. Either topic id or comment id required, cannot use both\n        comment_id:\n          type: string\n          description: Comment id this applies to, * for all. Either topic id or comment id required, cannot use both\n        user_ids:\n          type: array\n          items:\n            type: string\n          description: The user_ids that this rule applies to, * for all. Either this or group_ids required, cannot use both\n        group_ids:\n          type: array\n          items:\n            type: string\n          description: The group_ids that this rule applies to, * for all. Either this or user_ids required, cannot use both\n\n    Success:\n      required:\n        - message\n      properties:\n        message:\n          type: string\n          description: Contains message about the success, normally \"Written successfully\"\n    Error:\n      required:\n        - error\n      properties:\n        errpr:\n          type: string\n          description: contains a message about the failure"
		}
	},
	"Error": "parse: paths: /comment/{topicId}: post: operation \"createComment\": parse path: path parameter not specified: \"topicId\""
}