{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/confluentinc/data-mesh-demo"
		},
		"file": {
			"name": "data-catalog-api-spec.yaml",
			"path": "data-catalog-api-spec.yaml",
			"content": "openapi: 3.0.1\ninfo:\n  title: Confluent Data Catalog\n  version: v1\npaths:\n  /catalog/v1/ready:\n    get:\n      operationId: ready_1\n      responses:\n        default:\n          description: default response\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: boolean\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: boolean\n            application/json; qs=0.5:\n              schema:\n                type: boolean\n  /catalog/v1/entity/tags:\n    put:\n      summary: Bulk API to update multiple tags.\n      description: Bulk API to update multiple tags. The successfully updated tags\n        will be returned.\n      operationId: updateTags_1\n      requestBody:\n        description: the tags\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Tag'\n          application/vnd.schemaregistry+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Tag'\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Tag'\n          application/octet-stream:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Tag'\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagResponse'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagResponse'\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagResponse'\n    post:\n      summary: Bulk API to create multiple tags.\n      description: Bulk API to create multiple tags. The successfully created tags\n        will be returned.\n      operationId: createTags_1\n      requestBody:\n        description: the tags\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Tag'\n          application/vnd.schemaregistry+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Tag'\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Tag'\n          application/octet-stream:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Tag'\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagResponse'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagResponse'\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagResponse'\n  /catalog/v1/entity/type/{typeName}/name/{qualifiedName}:\n    get:\n      summary: Fetch complete definition of an entity given its type and unique attribute.\n      description: \"Fetch complete definition of an entity given its type and unique\\\n        \\ attribute. In addition to the typeName path parameter, attribute key-value\\\n        \\ pair(s) can be provided in the following format attr:= NOTE: The attrName\\\n        \\ and attrValue should be unique across entities, eg. qualifiedName The REST\\\n        \\ request would look something like this GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue\"\n      operationId: getByUniqueAttributes_1\n      parameters:\n      - name: typeName\n        in: path\n        description: the type of the entity\n        required: true\n        schema:\n          type: string\n      - name: qualifiedName\n        in: path\n        description: the qualified name of the entity\n        required: true\n        schema:\n          type: string\n      - name: minExtInfo\n        in: query\n        schema:\n          type: boolean\n          default: false\n      - name: ignoreRelationships\n        in: query\n        description: whether to ignore relationships\n        schema:\n          type: boolean\n          default: false\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/AtlasEntityWithExtInfo'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/AtlasEntityWithExtInfo'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/AtlasEntityWithExtInfo'\n  /catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags:\n    get:\n      summary: Gets the list of classifications for a given entity represented by\n        a qualifed name.\n      description: Gets the list of classifications for a given entity represented\n        by a qualifed name.\n      operationId: getTags_1\n      parameters:\n      - name: typeName\n        in: path\n        description: the type of the entity\n        required: true\n        schema:\n          type: string\n      - name: qualifiedName\n        in: path\n        description: the qualified name of the entity\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagResponse'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagResponse'\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagResponse'\n  /catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags/{tagName}:\n    delete:\n      summary: Delete a tag on an entity.\n      description: Delete a tag on an entity.\n      operationId: deleteTag_1\n      parameters:\n      - name: typeName\n        in: path\n        description: the type of the entity\n        required: true\n        schema:\n          type: string\n      - name: qualifiedName\n        in: path\n        description: the qualified name of the entity\n        required: true\n        schema:\n          type: string\n      - name: tagName\n        in: path\n        description: the name of the tag\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/vnd.schemaregistry.v1+json: {}\n            application/vnd.schemaregistry+json; qs=0.9: {}\n            application/json; qs=0.5: {}\n  /catalog/v1/search/attribute:\n    get:\n      summary: Retrieve data for the specified attribute search query.\n      description: Retrieve data for the specified attribute search query.\n      operationId: searchUsingAttribute_1\n      parameters:\n      - name: types\n        in: query\n        description: limit the result to only entities of specified types\n        schema:\n          type: string\n      - name: attrs\n        in: query\n        description: one of more additional attributes to return in the response\n        schema:\n          type: string\n      - name: attrName\n        in: query\n        description: the attribute to search\n        schema:\n          type: array\n          items:\n            type: string\n      - name: attrValuePrefix\n        in: query\n        description: the prefix for the attribute value to search\n        schema:\n          type: array\n          items:\n            type: string\n      - name: tag\n        in: query\n        description: limit the result to only entities tagged with the given tag\n        schema:\n          type: string\n      - name: sortBy\n        in: query\n        description: an attribute to sort by\n        schema:\n          type: string\n      - name: sortOrder\n        in: query\n        description: \"sort order, either ASCENDING (default) or DESCENDING\"\n        schema:\n          type: string\n          enum:\n          - ASCENDING\n          - DESCENDING\n      - name: deleted\n        in: query\n        description: whether to include deleted entities\n        schema:\n          type: boolean\n      - name: limit\n        in: query\n        description: limit the result set to only include the specified number of\n          entries\n        schema:\n          type: integer\n          format: int32\n      - name: offset\n        in: query\n        description: start offset of the result set (useful for pagination)\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/SearchResult'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/SearchResult'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/SearchResult'\n        \"200\":\n          description: \"On successful search query with some results, might return\\\n            \\ an empty list if execution succeeded without any results\"\n        \"400\":\n          description: Invalid wildcard or query parameters\n  /catalog/v1/search/basic:\n    get:\n      summary: Retrieve data for the specified fulltext query.\n      description: Retrieve data for the specified fulltext query.\n      operationId: searchUsingBasic_1\n      parameters:\n      - name: query\n        in: query\n        description: the full-text query\n        schema:\n          type: string\n      - name: types\n        in: query\n        description: limit the result to only entities of specified types\n        schema:\n          type: string\n      - name: attrs\n        in: query\n        description: one or more additional attributes a to return in the response\n        schema:\n          type: string\n      - name: tag\n        in: query\n        description: limit the result to only entities tagged with the given classification\n        schema:\n          type: string\n      - name: sortBy\n        in: query\n        description: an attribute to sort by\n        schema:\n          type: string\n      - name: sortOrder\n        in: query\n        description: \"sort order, either ASCENDING (default) or DESCENDING\"\n        schema:\n          type: string\n          enum:\n          - ASCENDING\n          - DESCENDING\n      - name: deleted\n        in: query\n        description: whether to include deleted entities\n        schema:\n          type: boolean\n      - name: limit\n        in: query\n        description: limit the result set to only include the specified number of\n          entries\n        schema:\n          type: integer\n          format: int32\n      - name: offset\n        in: query\n        description: start offset of the result set (useful for pagination)\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/SearchResult'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/SearchResult'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/SearchResult'\n        \"200\":\n          description: \"On successful fulltext query with some results, might return\\\n            \\ an empty list if execution succeeded without any results\"\n        \"400\":\n          description: Invalid fulltext or query parameters\n  /catalog/v1/synced:\n    get:\n      operationId: synced_1\n      responses:\n        default:\n          description: default response\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: boolean\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: boolean\n            application/json; qs=0.5:\n              schema:\n                type: boolean\n  /catalog/v1/types/tagdefs:\n    get:\n      summary: Bulk retrieval API for retrieving tag definitions.\n      description: Bulk retrieval API for retrieving tag definitions.\n      operationId: getAllTagDefs_1\n      parameters:\n      - name: prefix\n        in: query\n        description: the prefix of a tag definition name\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagDefResponse'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagDefResponse'\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagDefResponse'\n    put:\n      summary: Bulk update API for tag definitions.\n      description: Bulk update API for tag definitions. Returns the successfully updated\n        tag definitions.\n      operationId: updateTagDefs_1\n      requestBody:\n        description: the tag definitions to update\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/TagDef'\n          application/vnd.schemaregistry+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/TagDef'\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/TagDef'\n          application/octet-stream:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/TagDef'\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagDefResponse'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagDefResponse'\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagDefResponse'\n    post:\n      summary: Bulk create API for tag definitions.\n      description: Bulk create API for tag definitions. Returns the successfully created\n        tag definitions.\n      operationId: createTagDefs_1\n      requestBody:\n        description: the tag definitions to create\n        content:\n          application/vnd.schemaregistry.v1+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/TagDef'\n          application/vnd.schemaregistry+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/TagDef'\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/TagDef'\n          application/octet-stream:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/TagDef'\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagDefResponse'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagDefResponse'\n            application/json; qs=0.5:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TagDefResponse'\n  /catalog/v1/types/tagdefs/{tagName}:\n    get:\n      summary: Get the tag definition with the given name.\n      description: Get the tag definition with the given name.\n      operationId: getTagDefByName_1\n      parameters:\n      - name: tagName\n        in: path\n        description: the name of the tag definiton\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          content:\n            application/vnd.schemaregistry.v1+json:\n              schema:\n                $ref: '#/components/schemas/TagDef'\n            application/vnd.schemaregistry+json; qs=0.9:\n              schema:\n                $ref: '#/components/schemas/TagDef'\n            application/json; qs=0.5:\n              schema:\n                $ref: '#/components/schemas/TagDef'\n    delete:\n      summary: Delete API for tag definition identified by its name.\n      description: Delete API for tag definition identified by its name.\n      operationId: deleteTagDef_1\n      parameters:\n      - name: tagName\n        in: path\n        description: the name of the tag definition\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/vnd.schemaregistry.v1+json: {}\n            application/vnd.schemaregistry+json; qs=0.9: {}\n            application/json; qs=0.5: {}\ncomponents:\n  schemas:\n    Tag:\n      type: object\n      properties:\n        typeName:\n          type: string\n        attributes:\n          type: object\n          additionalProperties:\n            type: object\n        entityGuid:\n          type: string\n        entityStatus:\n          type: string\n          enum:\n          - ACTIVE\n          - DELETED\n          - PURGED\n        propagate:\n          type: boolean\n        validityPeriods:\n          type: array\n          items:\n            $ref: '#/components/schemas/TimeBoundary'\n        removePropagationsOnEntityDelete:\n          type: boolean\n        entityType:\n          type: string\n        entityName:\n          type: string\n    TimeBoundary:\n      type: object\n      properties:\n        startTime:\n          type: string\n        endTime:\n          type: string\n        timeZone:\n          type: string\n    AtlasClassification:\n      type: object\n      properties:\n        typeName:\n          type: string\n        attributes:\n          type: object\n          additionalProperties:\n            type: object\n        entityGuid:\n          type: string\n        entityStatus:\n          type: string\n          enum:\n          - ACTIVE\n          - DELETED\n          - PURGED\n        propagate:\n          type: boolean\n        validityPeriods:\n          type: array\n          items:\n            $ref: '#/components/schemas/TimeBoundary'\n        removePropagationsOnEntityDelete:\n          type: boolean\n    AtlasEntity:\n      type: object\n      properties:\n        typeName:\n          type: string\n        attributes:\n          type: object\n          additionalProperties:\n            type: object\n        guid:\n          type: string\n        homeId:\n          type: string\n        isProxy:\n          type: boolean\n          writeOnly: true\n        isIncomplete:\n          type: boolean\n        provenanceType:\n          type: integer\n          format: int32\n        status:\n          type: string\n          enum:\n          - ACTIVE\n          - DELETED\n          - PURGED\n        createdBy:\n          type: string\n        updatedBy:\n          type: string\n        createTime:\n          type: string\n          format: date-time\n        updateTime:\n          type: string\n          format: date-time\n        version:\n          type: integer\n          format: int64\n        relationshipAttributes:\n          type: object\n          additionalProperties:\n            type: object\n        classifications:\n          type: array\n          items:\n            $ref: '#/components/schemas/AtlasClassification'\n        meanings:\n          type: array\n          items:\n            $ref: '#/components/schemas/AtlasTermAssignmentHeader'\n        customAttributes:\n          type: object\n          additionalProperties:\n            type: string\n        businessAttributes:\n          type: object\n          additionalProperties:\n            type: object\n            additionalProperties:\n              type: object\n        labels:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n        proxy:\n          type: boolean\n    AtlasEntityWithExtInfo:\n      type: object\n      properties:\n        referredEntities:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/AtlasEntity'\n        entity:\n          $ref: '#/components/schemas/AtlasEntity'\n    AtlasTermAssignmentHeader:\n      type: object\n      properties:\n        termGuid:\n          type: string\n        relationGuid:\n          type: string\n        description:\n          type: string\n        displayText:\n          type: string\n        expression:\n          type: string\n        createdBy:\n          type: string\n        steward:\n          type: string\n        source:\n          type: string\n        confidence:\n          type: integer\n          format: int32\n        status:\n          type: string\n          enum:\n          - DISCOVERED\n          - PROPOSED\n          - IMPORTED\n          - VALIDATED\n          - DEPRECATED\n          - OBSOLETE\n          - OTHER\n    AtlasEntityHeader:\n      type: object\n      properties:\n        typeName:\n          type: string\n        attributes:\n          type: object\n          additionalProperties:\n            type: object\n        guid:\n          type: string\n        status:\n          type: string\n          enum:\n          - ACTIVE\n          - DELETED\n          - PURGED\n        displayText:\n          type: string\n        classificationNames:\n          type: array\n          items:\n            type: string\n        classifications:\n          type: array\n          items:\n            $ref: '#/components/schemas/AtlasClassification'\n        meaningNames:\n          type: array\n          items:\n            type: string\n        meanings:\n          type: array\n          items:\n            $ref: '#/components/schemas/AtlasTermAssignmentHeader'\n        isIncomplete:\n          type: boolean\n        labels:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n    SearchParams:\n      type: object\n      properties:\n        includeDeleted:\n          type: boolean\n        limit:\n          type: integer\n          format: int32\n        offset:\n          type: integer\n          format: int32\n    SearchResult:\n      type: object\n      properties:\n        searchParameters:\n          $ref: '#/components/schemas/SearchParams'\n        types:\n          type: array\n          items:\n            type: string\n        entities:\n          type: array\n          items:\n            $ref: '#/components/schemas/AtlasEntityHeader'\n        referredEntities:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/AtlasEntityHeader'\n    AtlasAttributeDef:\n      type: object\n      properties:\n        name:\n          type: string\n        typeName:\n          type: string\n        isOptional:\n          type: boolean\n        cardinality:\n          type: string\n          enum:\n          - SINGLE\n          - LIST\n          - SET\n        valuesMinCount:\n          type: integer\n          format: int32\n        valuesMaxCount:\n          type: integer\n          format: int32\n        isUnique:\n          type: boolean\n        isIndexable:\n          type: boolean\n        includeInNotification:\n          type: boolean\n        defaultValue:\n          type: string\n        description:\n          type: string\n        searchWeight:\n          type: integer\n          format: int32\n        indexType:\n          type: string\n          enum:\n          - DEFAULT\n          - STRING\n        constraints:\n          type: array\n          items:\n            $ref: '#/components/schemas/AtlasConstraintDef'\n        options:\n          type: object\n          additionalProperties:\n            type: string\n        displayName:\n          type: string\n    AtlasConstraintDef:\n      type: object\n      properties:\n        type:\n          type: string\n        params:\n          type: object\n          additionalProperties:\n            type: object\n    TagDef:\n      type: object\n      properties:\n        category:\n          type: string\n          enum:\n          - PRIMITIVE\n          - OBJECT_ID_TYPE\n          - ENUM\n          - STRUCT\n          - CLASSIFICATION\n          - ENTITY\n          - ARRAY\n          - MAP\n          - RELATIONSHIP\n          - BUSINESS_METADATA\n        guid:\n          type: string\n        createdBy:\n          type: string\n        updatedBy:\n          type: string\n        createTime:\n          type: string\n          format: date-time\n        updateTime:\n          type: string\n          format: date-time\n        version:\n          type: integer\n          format: int64\n        name:\n          type: string\n        description:\n          type: string\n        typeVersion:\n          type: string\n        serviceType:\n          type: string\n        options:\n          type: object\n          additionalProperties:\n            type: string\n        attributeDefs:\n          type: array\n          items:\n            $ref: '#/components/schemas/AtlasAttributeDef'\n        superTypes:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n        entityTypes:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n        subTypes:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n    ErrorMessage:\n      type: object\n      properties:\n        error_code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    TagResponse:\n      type: object\n      properties:\n        typeName:\n          type: string\n        attributes:\n          type: object\n          additionalProperties:\n            type: object\n        entityGuid:\n          type: string\n        entityStatus:\n          type: string\n          enum:\n          - ACTIVE\n          - DELETED\n          - PURGED\n        propagate:\n          type: boolean\n        validityPeriods:\n          type: array\n          items:\n            $ref: '#/components/schemas/TimeBoundary'\n        removePropagationsOnEntityDelete:\n          type: boolean\n        entityType:\n          type: string\n        entityName:\n          type: string\n        error:\n          $ref: '#/components/schemas/ErrorMessage'\n    TagDefResponse:\n      type: object\n      properties:\n        category:\n          type: string\n          enum:\n          - PRIMITIVE\n          - OBJECT_ID_TYPE\n          - ENUM\n          - STRUCT\n          - CLASSIFICATION\n          - ENTITY\n          - ARRAY\n          - MAP\n          - RELATIONSHIP\n          - BUSINESS_METADATA\n        guid:\n          type: string\n        createdBy:\n          type: string\n        updatedBy:\n          type: string\n        createTime:\n          type: string\n          format: date-time\n        updateTime:\n          type: string\n          format: date-time\n        version:\n          type: integer\n          format: int64\n        name:\n          type: string\n        description:\n          type: string\n        typeVersion:\n          type: string\n        serviceType:\n          type: string\n        options:\n          type: object\n          additionalProperties:\n            type: string\n        attributeDefs:\n          type: array\n          items:\n            $ref: '#/components/schemas/AtlasAttributeDef'\n        superTypes:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n        entityTypes:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n        subTypes:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n        error:\n          $ref: '#/components/schemas/ErrorMessage'\n"
		}
	},
	"Error": "make ir: path \"/catalog/v1/types/tagdefs\": put: requestBody: contents: application/octet-stream: octet stream with schema not supported"
}