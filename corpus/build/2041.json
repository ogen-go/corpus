{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/adam-boduch/coyote"
		},
		"file": {
			"name": "api.yaml",
			"path": "public/api.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  title: '4programmers.net API'\n  version: '1.0'\n  description: \"This is 4programmers.net OpenAPI documentation.\"\nservers:\n  - url: https://api.4programmers.net/v1\n    description: Production server\n  - url: https://api.4programmers.dev/v1\n    description: Stagging server\npaths:\n  /login:\n    post:\n      summary: \"Login to retrieve authorization token\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - name\n                - password\n              properties:\n                name:\n                  type: string\n                password:\n                  type: string\n                  format: password\n      responses:\n        200:\n          description: \"Login token\"\n          content:\n            application/json:\n              schema:\n                type: object\n        422:\n          description: \"Validation errors\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n  /microblogs:\n    get:\n      summary: \"Get all microblogs with pagination\"\n      tags:\n        - \"microblog\"\n      parameters:\n        - name: page\n          required: false\n          in: \"query\"\n          schema:\n            type: integer\n      responses:\n        200:\n          description: \"Microblogs objects\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      $ref: './api/schemas/microblog.yaml'\n                  meta:\n                    type: object\n                    $ref: '#/components/schemas/Meta'\n\n  /microblogs/{id}:\n    get:\n      summary: \"Get microblog by ID\"\n      tags:\n        - \"microblog\"\n      parameters:\n        - name: id\n          required: true\n          in: \"path\"\n          schema:\n            type: integer\n      responses:\n        200:\n          description: \"Microblog object\"\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: './api/schemas/microblog.yaml'\n\n  /jobs:\n    get:\n      summary: \"Get all job offers with pagination\"\n      tags:\n        - \"job\"\n      responses:\n        200:\n          description: \"Job objects\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      $ref: './api/schemas/job.yaml'\n                  meta:\n                    type: object\n                    $ref: '#/components/schemas/Meta'\n    post:\n      summary: \"Create job offer\"\n      tags:\n        - \"job\"\n      security:\n        - bearerAuth: []\n      requestBody:\n        $ref: '#/components/requestBodies/JobBody'\n      responses:\n        201:\n          description: \"Job successfully created\"\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: './api/schemas/job.yaml'\n        422:\n          description: \"Validation errors\"\n          content:\n            application/json:\n              schema:\n                type: object\n        401:\n          description: \"No sufficient funds to post this job offer\"\n          content:\n            application/json:\n              schema:\n                type: object\n\n  /jobs/{id}:\n    get:\n      summary: \"Get job offer by ID\"\n      tags:\n        - \"job\"\n      parameters:\n        - name: id\n          required: true\n          in: \"path\"\n          schema:\n            type: integer\n      responses:\n        200:\n          description: \"Job object\"\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: './api/schemas/job.yaml'\n    put:\n      summary: \"Update existing job offer\"\n      tags:\n        - \"job\"\n      parameters:\n        - name: id\n          required: true\n          in: \"path\"\n          schema:\n            type: integer\n      security:\n        - bearerAuth: []\n      requestBody:\n        $ref: '#/components/requestBodies/JobBody'\n      responses:\n        200:\n          description: \"Job successfully updated\"\n          content:\n            application/json:\n              schema:\n                type: object\n        422:\n          description: \"Validation errors\"\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: './api/schemas/job.yaml'\n\n  /topics:\n    get:\n      summary: \"Get list of all topics\"\n      tags:\n        - forum\n      parameters:\n        - name: sort\n          required: false\n          in: query\n          description: \"Default sort by last topic ID.\"\n          schema:\n            type: string\n            enum: [id, last_post_id]\n        - name: order\n          required: false\n          in: query\n          description: \"Default sort order is DESC.\"\n          schema:\n            type: string\n            enum: [asc, desc]\n      responses:\n        200:\n          description: \"Topic object\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      $ref: './api/schemas/topic.yaml'\n                  meta:\n                    type: object\n                    $ref: '#/components/schemas/Meta'\n  /topics/{id}:\n    get:\n      summary: \"Get topic by ID\"\n      tags:\n        - forum\n      parameters:\n        - name: id\n          required: true\n          in: \"path\"\n          schema:\n            type: integer\n      responses:\n        200:\n          description: \"Topic object\"\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: './api/schemas/topic.yaml'\n\n  /forums:\n    get:\n      summary: \"Get list of all forum categories\"\n      tags:\n        - forum\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: \"Forum object\"\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: './api/schemas/forum.yaml'\n\n  /posts:\n    get:\n      summary: \"Get list of all posts\"\n      tags:\n        - forum\n      parameters:\n        - name: order\n          required: false\n          in: query\n          description: \"Default sort order is DESC.\"\n          schema:\n            type: string\n            enum: [ asc, desc ]\n      security:\n        - bearerAuth: [ ]\n      responses:\n        200:\n          description: \"Post object\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      $ref: './api/schemas/post.yaml'\n                  meta:\n                    type: object\n                    $ref: '#/components/schemas/Meta'\n\n  /posts/{id}:\n    get:\n      summary: \"Get post by ID\"\n      tags:\n        - forum\n      parameters:\n        - name: id\n          required: true\n          in: \"path\"\n          schema:\n            type: integer\n      security:\n        - bearerAuth: [ ]\n      responses:\n        200:\n          description: \"Post object\"\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: './api/schemas/post.yaml'\n\ncomponents:\n  requestBodies:\n    JobBody:\n      description: A JSON object containing job information\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - title\n            $ref: './api/schemas/job.yaml'\n\n  schemas:\n    JobSchema:\n      $ref: './api/schemas/job.yaml'\n\n    FirmSchema:\n      $ref: './api/schemas/firm.yaml'\n\n    LocationSchema:\n      $ref: './api/schemas/location.yaml'\n\n    TagSchema:\n      $ref: './api/schemas/tag.yaml'\n\n    MicroblogSchema:\n      $ref: './api/schemas/microblog.yaml'\n\n    TopicSchema:\n      $ref: './api/schemas/topic.yaml'\n\n    PostSchema:\n      $ref: './api/schemas/post.yaml'\n\n    Meta:\n      type: object\n      properties:\n        current_page:\n          type: integer\n          minimum: 1\n        from:\n          type: integer\n          minimum: 1\n        last_page:\n          type: integer\n          minimum: 1\n        path:\n          type: string\n        per_page:\n          type: integer\n        to:\n          type: integer\n          minimum: 1\n        total:\n          type: integer\n          minimum: 1\n\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n"
		}
	},
	"Error": "parse: paths: /forums: get: : responses: 200: content: application/json: schema: parse schema: reference \"./api/schemas/forum.yaml\": resolve reference \"./api/schemas/forum.yaml\": invalid schema reference \"./api/schemas/forum.yaml\""
}