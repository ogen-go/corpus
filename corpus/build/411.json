{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wikirate/wikirate"
		},
		"file": {
			"name": "output.yml",
			"path": "script/swagger/output.yml",
			"content": "---\nopenapi: 3.0.0\ninfo:\n  description: |-\n    API to access WikiRate's data. To get the JSON responses as described below, you can (1) set the http access header to `application/json` in your request, (2) append `.json` to the request urls, or (3) add `format=json` to the query params.\n\n      WikiRate is built with Decko, and is thus constructed from _cards_. Everything in Decko is a card, including images, accounts, searches, fields, etc. So every request for a webpage on WikiRate.org or via its REST API is for a _card_.\n\n      The documentation below is divided into generic Decko card documentation (under `Decko`) and more WikiRate-specific cardtypes (under `WikiRate`).\n  version: 0.20.2\n  title: WikiRate API\n  contact:\n    email: info@decko.org\n  license:\n    name: GPL-2.0\n    url: https://opensource.org/licenses/GPL-2.0\ntags:\n- name: Decko\n  description: |-\n    \"Cards\" are the building blocks of Decko (and thus WikiRate). All requests\n    are CRUD operations on cards.\n- name: WikiRate\n  description: |-\n    RESTful Decko api calls can be made with any card on WikiRate. The\n    following examples feature some customized JSON views.\npaths:\n  \"/{mark}\":\n    get:\n      tags:\n      - Decko\n      summary: get specified view of card\n      description: |-\n        All read operations involve producing a _view_ of a card.\n\n        The request can come in several variants, eg\\:\n          1. /{mark}?view={view} (standard)\n          1. /{mark}/{view}\n          1. /?mark={mark}\u0026view={view}\n      parameters:\n      - \"$ref\": \"#/components/parameters/cardmark\"\n      - \"$ref\": \"#/components/parameters/view\"\n      responses:\n        200:\n          \"$ref\": \"#/components/responses/200\"\n        404:\n          \"$ref\": \"#/components/responses/404\"\n    put:\n      tags:\n      - Decko\n      summary: update a card\n      description: |-\n        Update a card's name, type, and/or content. It's also possible to use\n        a GET request with /update/{mark}\n      parameters:\n      - \"$ref\": \"#/components/parameters/cardmark\"\n      - \"$ref\": \"#/components/parameters/card\"\n      - \"$ref\": \"#/components/parameters/success\"\n      responses:\n        302:\n          \"$ref\": \"#/components/responses/302\"\n        404:\n          \"$ref\": \"#/components/responses/404\"\n    delete:\n      tags:\n      - Decko\n      summary: delete a card\n      parameters:\n      - \"$ref\": \"#/components/parameters/cardmark\"\n      - \"$ref\": \"#/components/parameters/success\"\n      responses:\n        302:\n          \"$ref\": \"#/components/responses/302\"\n        404:\n          \"$ref\": \"#/components/responses/404\"\n  \"/\":\n    post:\n      tags:\n      - Decko\n      summary: create a card\n      description: |-\n        Create a card, setting its name, type, and/or content. It's also possible to use\n        a GET request with /card/create\n      parameters:\n      - \"$ref\": \"#/components/parameters/cardmark\"\n      - \"$ref\": \"#/components/parameters/card\"\n      - \"$ref\": \"#/components/parameters/success\"\n      responses:\n        302:\n          \"$ref\": \"#/components/responses/302\"\n  \"/Company\":\n    get:\n      tags:\n      - WikiRate\n      summary: company index (cardtype) card\n      description: |-\n        The card 'Company' is a Cardtype card; all companies have this type.\n        Includes a paged list of all companies under `items`.\"\n      operationId: read7\n      parameters:\n      - \"$ref\": \"#/components/parameters/limit\"\n      - \"$ref\": \"#/components/parameters/offset\"\n      responses:\n        200:\n          description: default JSON view of the card 'Company'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                  name:\n                    type: string\n                    example: Company\n                  url:\n                    type: string\n                    example: https://wikirate.org/Company.json\n                  type:\n                    \"$ref\": \"#/components/schemas/nucleus%20view\"\n                  codename:\n                    type: string\n                    example: company\n                  html_url:\n                    type: string\n                    example: https://wikirate.org/Company\n                  links:\n                    type: array\n                    items:\n                      type: string\n                  items:\n                    type: array\n                    description: companies\n                    items:\n                      \"$ref\": \"#/components/schemas/company_atom\"\n        404:\n          \"$ref\": \"#/components/responses/404\"\n  \"/{company}\":\n    get:\n      tags:\n      - WikiRate\n      summary: a company\n      description: |-\n        Basic company details. Answers for this company can be found via its\n        `answers_url`.\"\n      operationId: read8\n      parameters:\n      - \"$ref\": \"#/components/parameters/company\"\n      responses:\n        200:\n          description: molecule view of company\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    example: 1578\n                  name:\n                    type: string\n                    example: Apple Inc\n                  url:\n                    type: string\n                    example: https://wikirate.org/Apple_Inc.json\n                  type:\n                    \"$ref\": \"#/components/schemas/nucleus%20view\"\n                  wikipedia:\n                    type: string\n                    example: Apple_Inc\n                  open_corporates:\n                    type: string\n                    example: C080659\n                  aliases:\n                    type: array\n                    items:\n                      type: string\n                    example:\n                    - Apple\n                    - Apple Computer\n                  headquarters:\n                    type: array\n                    items:\n                      type: string\n                    example:\n                    - California (United States)\n                  answers_url:\n                    type: string\n                    example: https://wikirate.org/Apple_Inc+answers.json\n        404:\n          \"$ref\": \"#/components/responses/404\"\n  \"/{company}+Answer\":\n    get:\n      tags:\n      - WikiRate\n      summary: Answers for company\n      description: |-\n        Answer names follow the pattern `{Metric}+{Company}+{Year}`.\n\n        Note that request URLS can be generated on company pages on WikiRate.org.\n      operationId: read9\n      parameters:\n      - \"$ref\": \"#/components/parameters/company\"\n      - \"$ref\": \"#/components/parameters/answer_filter\"\n      responses:\n        200:\n          \"$ref\": \"#/components/responses/200\"\n        404:\n          \"$ref\": \"#/components/responses/404\"\n  \"/Metric\":\n    get:\n      tags:\n      - WikiRate\n      summary: metric index (cardtype) card\n      description: |-\n        All metrics have this type. Includes a paged list of all metrics\n        under `items`.\n      operationId: read10\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                  name:\n                    type: string\n                    example: Metric\n                  url:\n                    type: string\n                    example: https://wikirate.org/Metric.json\n                  html_url:\n                    type: string\n                    example: https://wikirate.org/Metric\n                  type:\n                    \"$ref\": \"#/components/schemas/nucleus%20view\"\n                  codename:\n                    type: string\n                    example: metric\n                  items:\n                    type: array\n                    description: metrics\n                    items:\n                      \"$ref\": \"#/components/schemas/metric_atom\"\n  \"/{metric}\":\n    get:\n      tags:\n      - WikiRate\n      summary: a metric\n      description: Basic metric details. Answers for this metric can be found via\n        its `answers_url`.\n      operationId: read11\n      parameters:\n      - \"$ref\": \"#/components/parameters/metric\"\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/metric_atom\"\n  \"/{metric}+Answer\":\n    get:\n      tags:\n      - WikiRate\n      summary: Answers for metric\n      description: |-\n        Answer names follow the pattern `{Metric}+{Company}+{Year}`.\n\n        Note that request URLS can be generated on metric pages on WikiRate.org.\n      operationId: read12\n      parameters:\n      - \"$ref\": \"#/components/parameters/metric\"\n      - \"$ref\": \"#/components/parameters/answer_filter\"\n      responses:\n        200:\n          \"$ref\": \"#/components/responses/200\"\n        404:\n          \"$ref\": \"#/components/responses/404\"\n  \"/{metric}+{company}\":\n    get:\n      tags:\n      - WikiRate\n      summary: A record for a metric/company\n      description: A record contains all of a company's answers to a given metric\n        (for all years). Answers are included under `items`.\n      operationId: read13\n      parameters:\n      - \"$ref\": \"#/components/parameters/metric\"\n      - \"$ref\": \"#/components/parameters/company\"\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/record\"\n  \"/{metric}+{company}+{year}\":\n    put:\n      tags:\n      - WikiRate\n      summary: update an answer card\n      description: Update the answer for a specific metric company and year.\n      parameters:\n      - \"$ref\": \"#/components/parameters/metric\"\n      - \"$ref\": \"#/components/parameters/company\"\n      - \"$ref\": \"#/components/parameters/year\"\n      - \"$ref\": \"#/components/parameters/answer_subcards\"\n      responses:\n        302:\n          \"$ref\": \"#/components/responses/302\"\n        404:\n          \"$ref\": \"#/components/responses/404\"\n    get:\n      tags:\n      - WikiRate\n      summary: An answer for a metric/company/year\n      description: An answer includes a value and various bits of metadata, including\n        sources, discussions, and verification. For relationship metrics, it also\n        includes details about related companies under `items`\n      operationId: read14\n      parameters:\n      - \"$ref\": \"#/components/parameters/metric\"\n      - \"$ref\": \"#/components/parameters/company\"\n      - \"$ref\": \"#/components/parameters/year\"\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/answer\"\n  \"/{metric}+{company}+{year}+{company}\":\n    get:\n      tags:\n      - WikiRate\n      summary: company-to-company relationship answer\n      description: Relationship metrics ask questions about relationships between\n        companies. Each answer to these metrics is comprised of one or more relationship\n        answers, each describing the relationship of two specific companies\n      operationId: read15\n      parameters:\n      - \"$ref\": \"#/components/parameters/metric\"\n      - \"$ref\": \"#/components/parameters/company\"\n      - \"$ref\": \"#/components/parameters/year\"\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/relationship_answer\"\n  \"/ #card[type]=Company\":\n    post:\n      tags:\n      - WikiRate\n      summary: create a company card\n      description: 'Create a new company card. Alternative: a GET request with /card/create'\n      parameters:\n      - \"$ref\": \"#/components/parameters/company_card\"\n      - \"$ref\": \"#/components/parameters/success\"\n      responses:\n        302:\n          \"$ref\": \"#/components/responses/302\"\n  \"/ #card[type]=Answer\":\n    post:\n      tags:\n      - WikiRate\n      summary: create an answer card\n      description: Create a new answer to a specified metric, company, and year.\n      parameters:\n      - \"$ref\": \"#/components/parameters/answer_name\"\n      - \"$ref\": \"#/components/parameters/answer_subcards\"\n      responses:\n        302:\n          \"$ref\": \"#/components/responses/302\"\n  \"/ #card[type]=Source\":\n    post:\n      tags:\n      - WikiRate\n      summary: create an Source card\n      description: Create a source record that can be cited by answers.\n      parameters:\n      - \"$ref\": \"#/components/parameters/source_subcards\"\n      responses:\n        302:\n          \"$ref\": \"#/components/responses/302\"\nexternalDocs:\n  description: Find out more about Decko\n  url: http://decko.org\nservers:\n- description: SwaggerHub API Auto Mocking\n  url: https://virtserver.swaggerhub.com/Decko/WikiRate/0.6\n- description: live server\n  url: https://wikirate.org\n- description: staging server\n  url: https://staging.wikirate.org\ncomponents:\n  parameters:\n    cardmark:\n      name: mark\n      in: path\n      required: true\n      description: |-\n        A card's \"mark\" can be a name, an id, or a codename. Prefix ids with a tilde (~) and codenames with a colon (\\:).\n        - **name:** Every card has a unique name. A name can have many variants. For example, `Berlin`, `berlin`, and `BERLIN!` all refer to the same card. The singularized, lower-cased, underscored variant of a name is called its \"key.\"\n        - **id:** Every card stored in the database has a unique numerical id. _Note: some cards, called 'virtual cards', are not stored in the database and therefore do not have a numerical id. For example, the name `Menu+*refer to` identifies a virtual Search card that finds all the cards that refer to the `Menu` card.Because it is based on patterns that apply to all cards with names ending in `+*refer to`, there is no need to store each instance of that pattern._\n        - **codename:** Some cards also have special identifiers called \"codenames\". Card names can be edited by Decko users. If these names were used directly in code, then renaming would break that code. Codename identifiers solve this problem by providing persistent readable identifiers. Only cards referred to directly in code have codenames.\n      schema:\n        type: string\n        enum:\n        - \"{name}\"\n        - \"~{id}\"\n        - \":{codename}\"\n    view:\n      name: view\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n        - nucleus\n        - atom\n        - molecule\n        - id\n        - codename\n        - name\n        - key\n        - content\n        - type\n        default: molecule\n      description: The view determines the contents of the response JSON.  See the\n        corresponding schema for more details.\n    card:\n      name: card\n      in: header\n      schema:\n        type: object\n        properties:\n          name:\n            type: string\n          type:\n            type: string\n          content:\n            type: string\n      description: |-\n        The card parameter contains card field data, subcard field data. It follows RubyOnRails hash parameter pattern; for example, a card's name is represented as `card[name]=foobar`.\n        The most common fields are:\n        - **name:** Every card has a unique name.\n        - **type:** The card\\'s type.  Note that every card has a type, and the value of this field should be the type card\\'s name. You can alternatively use **type_id** or **type_code** with the type card\\s id\n          or mark respectively.\n\n        - **content:** The card\\'s content (in string form)\n        - **subcards** A hash that contains information about additional cards to be handled in the same transaction.  Each key is a card name, and each value is a card hash. Eg `cards[subcards][+color][content]=red`\n    success:\n      name: success\n      in: header\n      schema:\n        type: object\n      description: parameters hash to pass on to the GET request to which a successful\n        request will be redirected.  Eg, `success[mark]=mycardname`\n    company:\n      name: company\n      in: path\n      required: true\n      description: name of a company\n      schema:\n        type: string\n        example: Apple Inc\n    metric:\n      name: metric\n      in: path\n      required: true\n      description: name of a metric\n      schema:\n        type: string\n        example: PayScale+CEO to Worker pay\n    year:\n      name: year\n      in: path\n      required: true\n      description: 4-digit year\n      schema:\n        type: string\n        example: 2010\n    limit:\n      name: limit\n      in: query\n      required: false\n      description: limit for the items list\n      schema:\n        type: integer\n    offset:\n      name: offset\n      in: query\n      required: false\n      description: offset for the items list\n      schema:\n        type: integer\n    company_card:\n      name: card\n      in: header\n      required: true\n      schema:\n        type: object\n        properties:\n          name:\n            type: string\n          type:\n            type: string\n          content:\n            type: string\n      description: |-\n        The card parameter contains card field data, subcard field data.\n        It follows RubyOnRails hash parameter pattern; for example,\n        the company's name is represented as `card[name]=MyCompanyName`.\n\n        `card[name]` and `card[type]=Company` are required to create a company\n\n        You can also include subcards such as the wikipedia or opencorporates mapping. For example:\n\n        - `card[subcards][+wikipedia]=MyCompanyWikipediaName`\n        - `card[subcards][+open_corporates]=MyCompanyOpenCorporatesEntityID`\n    answer_filter:\n      name: filter\n      in: query\n      required: false\n      description: |-\n        Same filter options as GUI in RubyOnRails hash parameter style,\n        eg `filter[status]=known`.\n\n        - **status:** all, exists (researched), known, unknown, or none (not researched)\n        - **year:** answer year\n        - **value:** answer value to match, OR a hash with `to` and/or `from` keys to\n          represent a range (eg `filter[value][from]=5`\n        - **updated:** today, week, or month (returns answers updated in that time range)\n        - **source:** source card name(s). restrict to answers citing source\n        - **project:** project card name(s). restrict to answers connected to project\n        - **check:** Completed, Requested, or Neither\n\n        {company}+Answer only:\n        - **metric_name:** string to match (or exact name in quotes)\n        - **metric_id:** numerical_id\n        - **metric_type:** name of \"metric type\" card (Researched, Relationship, Formula,\n          WikiRating, Score, or Descendant)\n        - **topic:** topic card name(s). restrict to metrics with topic\n        - **research policy:** name of research policy card\n\n        {metric}+Answer only:\n        - **company_name:** string to match (or exact name in quotes)\n        - **company_id:** numerical id\n        - **outliers:** only, exclude\n\n        Note: arrays can be represented in RubyOnRails array parameter style, eg:\n        `filter[topic][]=human+rights\u0026filter[topic][]=climate+change`\n      schema:\n        type: array\n        items:\n          type: string\n    answer_name:\n      name: card[name]\n      in: query\n      required: true\n      description: |-\n        The name of an answer follows the pattern Metric+Company+Year.  (Note, the name of a company follows the pattern Designer+Title).\n        Any piece of the name (or the entire name ) can be substituted with its numerical id in the form of `~INTEGER`.  Eg, if your metric's id is 867 and your company's id is 5309, then you can address the answer as ~867+~5309+1981\n      schema:\n        type: string\n        example: PayScale+CEO to Worker pay+Apple Inc+2010\n    answer_subcards:\n      name: card[subcards]\n      in: query\n      description: |-\n        An answer can have several subcards, including:\n\n        - **+:value**: the answer value\n        - **+:source**: (required) list of source card names separated by line breaks.  All answers\n          must have valid sources.\n        - **+:checked_by**: value can be a list of names separated by line breaks or\n          `[[request]]` to indicate that a check is requested.\n        - **+:discussion**: initial comment for discussion\n      schema:\n        type: object\n        example: card[subcards][+:checked_by]=[[request]]\n    source_subcards:\n      name: card[subcards]\n      in: query\n      description: |-\n        An source can have several subcards.\n\n        First, the source must refer to an actual document. The most standard way to\n        do that is with a url.\n\n        - **+link**: url string\n\n        It is also possible to upload a file source. (Documentation coming soon).\n\n\n        In general the following subcards are also required:\n\n        - **+title**: a short readable title for the source\n        - **+company**: a newline-separated list of companies to which the source applies\n        - **+year**: a newline-separated list of years to which the the source applies\n        - **+report type**: a newline-separate list of report types to which the source\n          applies.  (See http://wikirate.org/Report_Type\n\n        The above requirements are extremely helpful in making the sources usable via\n        WikiRate's research pages.  However, if you plan to use the sources immediately\n        in a citation (eg via uploads or API calls), you may avoid the requirements using\n        `card[skip]=requirements`.\n\n        Another optional subcard field:\n\n        - **+description**: a paragraph or two about the contents of the source\n      schema:\n        type: object\n        example: card[subcards][+link]=http://mysource.com/mysourcepage.html\n  schemas:\n    nucleus view:\n      name: nucleus view\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        url:\n          type: string\n        type:\n          type: string\n        codename:\n          type: string\n    atom view:\n      name: atom view\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        url:\n          type: string\n        type:\n          type: string\n        codename:\n          type: string\n        content:\n          type: string\n    molecule view:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        url:\n          type: string\n        type:\n          \"$ref\": \"#/components/schemas/nucleus%20view\"\n        codename:\n          type: string\n        content:\n          type: string\n        html_url:\n          type: string\n        items:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/atom%20view\"\n        links:\n          type: array\n          items:\n            type: string\n        ancestors:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/atom%20view\"\n    errors view:\n      type: object\n      properties:\n        error_status:\n          type: integer\n        error:\n          type: array\n          items:\n            type: string\n    company_atom:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1578\n        name:\n          type: string\n          example: Apple Inc\n        url:\n          type: string\n          example: https://wikirate.org/Apple_Inc.json\n        type:\n          type: string\n          example: Company\n        wikipedia:\n          type: string\n          example: Apple_Inc\n        open_corporates:\n          type: string\n          example: C0806592\n        aliases:\n          type: array\n          items:\n            type: string\n          example:\n          - Apple\n          - Apple Computer\n        headquarters:\n          type: array\n          items:\n            type: string\n          example:\n          - California (United States)\n    metric_atom:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 565926\n        name:\n          type: string\n          example: PayScale+CEO to Worker pay\n        url:\n          type: string\n          example: https://wikirate.org/PayScale+CEO_to_Worker_pay.json\n        type:\n          type: string\n          example: Metric\n        designer:\n          type: string\n          example: PayScale\n        title:\n          type: string\n          example: CEO to Worker pay\n        answers_url:\n          type: string\n          example: https://wikirate.org/PayScale+CEO_to_Worker_pay+answer.json\n        ancestors:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/atom%20view\"\n        metric_type:\n          type: string\n          example: Researched\n        about:\n          type: string\n        value_type:\n          type: string\n          example: Number\n        value_options:\n          type: array\n          items:\n            type: string\n        report_type:\n          type: string\n        research_policy:\n          type: string\n        unit:\n          type: string\n        range:\n          type: string\n        hybrid:\n          type: string\n        question:\n          type: string\n    record:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 566034\n        name:\n          type: string\n          example: PayScale+CEO to Worker pay+Apple Inc.\n        url:\n          type: string\n          example: https://wikirate.org/PayScale+CEO_to_Worker_pay+Apple_Inc.json\n        html_url:\n          type: string\n          example: https://wikirate.org/PayScale+CEO_to_Worker_pay+Apple_Inc\n        type:\n          type: string\n          example: Record\n        items:\n          description: answers\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/answer\"\n        ancestors:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/atom%20view\"\n    answer:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 566035\n        name:\n          type: string\n          example: PayScale+CEO to Worker pay+Apple Inc.+2013\n        url:\n          type: string\n          example: https://wikirate.org/PayScale+CEO_to_Worker_pay+Apple_Inc+2013.json\n        html_url:\n          type: string\n          example: https://wikirate.org/PayScale+CEO_to_Worker_pay+Apple_Inc+2013\n        type:\n          type: string\n          example: Answer\n        metric:\n          type: string\n          example: PayScale+CEO to Worker pay\n        company:\n          type: string\n          example: Apple Inc.\n        year:\n          type: string\n          example: '2013'\n        value:\n          type: string\n          example: '43'\n        record_url:\n          type: string\n          example: https://wikirate.org/PayScale+CEO_to_Worker_pay+Apple_Inc.json\n        items:\n          description: If the metric is a relationship metric then all relationships\n            to other companies for the given company are listed here.\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/relationship_answer\"\n        ancestors:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/atom%20view\"\n    relationship_answer:\n      type: object\n      properties:\n        id:\n          type: string\n          example: 3316841\n        name:\n          type: string\n          example: Commons+Supplied By+The Walt Disney Company+2016+Fastmaker LLC\n        url:\n          type: string\n          example: https://wikirate.org/Commons+Supplied_By+The_Walt_Disney_Company+2016+Fastmaker_LLC.json\n        html_url:\n          type: string\n          example: https://wikirate.org/Commons+Supplied_By+The_Walt_Disney_Company+2016+Fastmaker_LLC\n        type:\n          type: string\n          example: Relationship Answer\n        content:\n          type: string\n          example: ''\n        year:\n          type: string\n          example: '2016'\n        value:\n          type: string\n          example: Tier 1 Supplier\n        import:\n          type: string\n          example: false\n        comments:\n          type: string\n          example: ''\n        subject_company:\n          \"$ref\": \"#/components/schemas/company_atom\"\n        object_company:\n          \"$ref\": \"#/components/schemas/company_atom\"\n  responses:\n    200:\n      description: Card data. Defaults to molecule view.\n      content:\n        application/json:\n          schema:\n            \"$ref\": \"#/components/schemas/molecule%20view\"\n    404:\n      description: Could not find the card requested.\n      content:\n        application/json:\n          schema:\n            \"$ref\": \"#/components/schemas/errors%20view\"\n    302:\n      description: |-\n        Successful non-idempotent requests redirect to idempotent GET\n        requests.\n"
		}
	},
	"Error": "parse: paths: /Metric: get: operation \"read10\": responses: 200: content: \"application/json\": schema: parse schema: items: parse schema: item: parse schema: reference \"#/components/schemas/metric_atom\": parse schema: ancestors: parse schema: item: parse schema: reference \"#/components/schemas/atom%20view\": resolve reference \"#/components/schemas/atom%20view\": schema not found"
}