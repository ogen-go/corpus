{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vanilla/vanilla"
		},
		"file": {
			"name": "users.yml",
			"path": "applications/dashboard/openapi/users.yml",
			"content": "openapi: 3.0.2\ninfo:\nx-resourceEvents:\n    user:\n        x-addon: \"dashboard\"\n        name: \"User\"\n        type: \"user\"\npaths:\n    /users:\n        get:\n            parameters:\n                - description: \u003e\n                      When the user was created.\n\n                      This filter receive a string that can take two forms.\n\n                      A single date that matches '{Operator}{DateTime}' where {Operator}\n                      can be =, \u0026lt;, \u0026gt;, \u0026lt;=, \u0026gt;=  and, if omitted, defaults to\n                      =.\n\n                      A date range that matches '{Opening}{DateTime},{DateTime}{Closing}'\n                      where {Opening} can be '[' or '(' and {Closing} can be ']' or ')'.\n                      '[]' are inclusive and '()' are exclusive.\n                  in: query\n                  name: dateInserted\n                  schema:\n                      format: date-filter\n                      type: string\n                - description: \u003e\n                      When the user was updated.\n\n                      This filter receive a string that can take two forms.\n\n                      A single date that matches '{Operator}{DateTime}' where {Operator}\n                      can be =, \u0026lt;, \u0026gt;, \u0026lt;=, \u0026gt;=  and, if omitted, defaults to\n                      =.\n\n                      A date range that matches '{Opening}{DateTime},{DateTime}{Closing}'\n                      where {Opening} can be '[' or '(' and {Closing} can be ']' or ')'.\n                      '[]' are inclusive and '()' are exclusive.\n                  in: query\n                  name: dateUpdated\n                  schema:\n                      format: date-filter\n                      type: string\n                - name: dateLastActive\n                  description: When the user was last active on the community.\n                  in: query\n                  schema:\n                      type: string\n                      format: date-filter\n                - name: roleID\n                  description: Filter by the role ID of a user.\n                  in: query\n                  schema:\n                      type: integer\n                - name: userID\n                  description: Filter by a range or CSV of user IDs.\n                  in: query\n                  schema:\n                      $ref: \"#/components/schemas/RangeExpression\"\n                - $ref: \"#/components/parameters/Page\"\n                - description: |\n                      Desired number of items per page.\n                  in: query\n                  name: limit\n                  schema:\n                      type: integer\n                      default: 30\n                      maximum: 500\n                      minimum: 1\n                - name: sort\n                  in: query\n                  description: Sort the results.\n                  schema:\n                      type: string\n                      enum:\n                          - dateInserted\n                          - dateLastActive\n                          - name\n                          - userID\n                          - -dateInserted\n                          - -dateLastActive\n                          - -name\n                          - -userID\n                - $ref: \"#/components/parameters/UserExpand\"\n            responses:\n                \"200\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/User\"\n                                type: array\n                    description: Success\n            tags:\n                - Users\n            summary: List users.\n        post:\n            responses:\n                \"201\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                $ref: \"#/components/schemas/User\"\n                    description: Success\n            tags:\n                - Users\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/UserPost\"\n                required: true\n            summary: Add a user.\n    /users/by-names:\n        get:\n            parameters:\n                - description: \u003e\n                      Filter for username. Supports full or partial matching with\n                      appended wildcard (e.g. User*).\n                  in: query\n                  name: name\n                  required: true\n                  schema:\n                      minLength: 1\n                      type: string\n                - description: \u003e\n                      Sort method for results.\n\n                      Must be one of: \"countComments\", \"dateLastActive\", \"name\",\n                      \"mention\".\n                  in: query\n                  name: order\n                  schema:\n                      type: string\n                      default: name\n                      enum:\n                          - countComments\n                          - dateLastActive\n                          - name\n                          - mention\n                - description: |\n                      Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n                  in: query\n                  name: page\n                  schema:\n                      type: integer\n                      default: 1\n                      minimum: 1\n                - description: |\n                      Desired number of items per page.\n                  in: query\n                  name: limit\n                  schema:\n                      type: integer\n                      default: 30\n                      maximum: 100\n                      minimum: 1\n            responses:\n                \"200\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                items:\n                                    $ref: \"../dashboard/schemas.yml#/components/schemas/UserFragment\"\n                                type: array\n                    description: Success\n            tags:\n                - Users\n            summary: Search for users by full or partial name matching.\n    /users/me:\n        get:\n            responses:\n                \"200\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                allOf:\n                                    - $ref: \"../dashboard/schemas.yml#/components/schemas/UserFragment\"\n                                    - type: object\n                                      properties:\n                                          email:\n                                              description: The current user's email address.\n                                              type: string\n                                              format: email\n                                          ssoID:\n                                              description: The unique ID of the default SSO connection. This will be YOUR user ID.\n                                              type: string\n                                          isAdmin:\n                                              description: Whether or not the user is a global admin.\n                                              type: boolean\n                                          permissions:\n                                              description: Global permissions available to the current user.\n                                              type: array\n                                              items:\n                                                  type: string\n                                          countUnreadNotifications:\n                                              description: Total number of unread notifications for the current user.\n                                              type: integer\n                                          countUnreadConversations:\n                                              description: Total number of unread conversations for the current user.\n                                              type: integer\n                                      required:\n                                          - isAdmin\n                                          - permissions\n                    description: Success\n            tags:\n                - Users\n            summary: Get information about the current user.\n    /users/me-counts:\n        get:\n            responses:\n                \"200\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                properties:\n                                    counts:\n                                        type: array\n                                        items:\n                                            type: object\n                                            properties:\n                                                name:\n                                                    description: Menu counter name\n                                                    type: string\n                                                count:\n                                                    description: Counter value\n                                                    type: integer\n                                        example:\n                                            - name: UnreadNotifications\n                                              count: 2\n                                            - name: Bookmarks\n                                              count: 3\n                                required:\n                                    - counts\n                    description: Success\n            tags:\n                - Users\n            summary: Get information about menu counts for current user.\n    /users/register:\n        post:\n            responses:\n                \"201\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                properties:\n                                    email:\n                                        description: Email address of the user.\n                                        minLength: 0\n                                        type: string\n                                    name:\n                                        description: Name of the user.\n                                        minLength: 1\n                                        type: string\n                                    userID:\n                                        description: ID of the user.\n                                        type: integer\n                                required:\n                                    - userID\n                                    - name\n                                    - email\n                                type: object\n                    description: Success\n            tags:\n                - Users\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            properties:\n                                discoveryText:\n                                    description: \u003e-\n                                        Why does the user wish to join? Only used when the\n                                        registration is flagged as SPAM (response code: 202).\n                                    type: string\n                                email:\n                                    description: An email address for this user.\n                                    minLength: 1\n                                    type: string\n                                name:\n                                    description: The username.\n                                    minLength: 1\n                                    type: string\n                                password:\n                                    description: A password for this user.\n                                    minLength: 1\n                                    type: string\n                            required:\n                                - email\n                                - name\n                                - password\n                            type: object\n                required: true\n            summary: Submit a new user registration.\n    /users/request-password:\n        post:\n            responses:\n                \"201\":\n                    description: Success\n            tags:\n                - Users\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            properties:\n                                email:\n                                    description: The email/username of the user.\n                                    minLength: 1\n                                    type: string\n                            required:\n                                - email\n                            type: object\n                required: true\n    \"/users/{id}\":\n        delete:\n            parameters:\n                - description: The user ID.\n                  in: path\n                  name: id\n                  required: true\n                  schema:\n                      type: integer\n            responses:\n                \"204\":\n                    description: Success\n            tags:\n                - Users\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            properties:\n                                deleteMethod:\n                                    type: string\n                                    default: delete\n                                    description: The deletion method / strategy.\n                                    enum:\n                                        - keep\n                                        - wipe\n                                        - delete\n                            type: object\n                required: true\n            summary: Delete a user.\n        get:\n            parameters:\n                - description: |\n                      The user ID.\n                  in: path\n                  name: id\n                  required: true\n                  schema:\n                      type: integer\n                - description: \u003e\n                      Expand associated records using one or more valid field names. A\n                      value of \"all\" will expand all expandable fields.\n                  in: query\n                  name: expand\n                  schema:\n                      items:\n                          enum:\n                              - rank\n                              - all\n                          type: string\n                      type: array\n                  style: form\n                - description: \u003e\n                      Authenticate using a JWT, [role/token](https://success.vanillaforums.com/kb/articles/436-api-role-tokens).\n                  in: query\n                  name: role-token\n                  schema:\n                      type: string\n            responses:\n                \"200\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                $ref: \"#/components/schemas/User\"\n                    description: Success\n                \"403\":\n                    description: \u003e\n                        Forbidden, e.g. expired or invalid role token, role token used with another auth mechanism.\n                    content:\n                        \"application/json\":\n                            schema:\n                                $ref: \"#/components/schemas/BasicError\"\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n            tags:\n                - Users\n            summary: Get a user.\n        patch:\n            parameters:\n                - description: The user ID.\n                  in: path\n                  name: id\n                  required: true\n                  schema:\n                      type: integer\n            responses:\n                \"200\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                $ref: \"#/components/schemas/User\"\n                    description: Success\n            tags:\n                - Users\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/UserPatch\"\n                required: true\n            summary: Update a user.\n    \"/users/{id}/ban\":\n        put:\n            parameters:\n                - description: The user ID.\n                  in: path\n                  name: id\n                  required: true\n                  schema:\n                      type: integer\n            responses:\n                \"200\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                properties:\n                                    banned:\n                                        description: The current banned value.\n                                        type: boolean\n                                required:\n                                    - banned\n                                type: object\n                    description: Success\n            tags:\n                - Users\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            properties:\n                                banned:\n                                    description: Pass true to ban or false to unban.\n                                    type: boolean\n                            required:\n                                - banned\n                            type: object\n                required: true\n            summary: Ban a user.\n    \"/users/{id}/confirm-email\":\n        post:\n            parameters:\n                - description: The user ID.\n                  in: path\n                  name: id\n                  required: true\n                  schema:\n                      type: integer\n            responses:\n                \"200\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                properties:\n                                    email:\n                                        minLength: 1\n                                        type: string\n                                    emailConfirmed:\n                                        type: boolean\n                                    userID:\n                                        type: integer\n                                required:\n                                    - userID\n                                    - email\n                                    - emailConfirmed\n                                type: object\n                    description: Success\n            tags:\n                - Users\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            properties:\n                                confirmationCode:\n                                    description: Email confirmation code\n                                    minLength: 1\n                                    type: string\n                            required:\n                                - confirmationCode\n                            type: object\n                required: true\n            summary: Confirm a users current email address by using a confirmation code\n    \"/users/{id}/edit\":\n        get:\n            parameters:\n                - description: |\n                      The user ID.\n                  in: path\n                  name: id\n                  required: true\n                  schema:\n                      type: integer\n                - description: \u003e\n                      Expand associated records using one or more valid field names. A\n                      value of \"all\" will expand all expandable fields.\n                  in: query\n                  name: expand\n                  schema:\n                      items:\n                          enum:\n                              - rank\n                              - all\n                          type: string\n                      type: array\n                  style: form\n            responses:\n                \"200\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                properties:\n                                    bypassSpam:\n                                        description: Should submissions from this user bypass SPAM checks?\n                                        type: boolean\n                                    email:\n                                        description: Email address of the user.\n                                        minLength: 0\n                                        type: string\n                                    emailConfirmed:\n                                        description: Has the email address for this user been confirmed?\n                                        type: boolean\n                                    name:\n                                        description: Name of the user.\n                                        minLength: 1\n                                        type: string\n                                    photo:\n                                        description: Raw photo field value from the user record.\n                                        minLength: 0\n                                        nullable: true\n                                        type: string\n                                    userID:\n                                        description: ID of the user.\n                                        type: integer\n                                required:\n                                    - userID\n                                    - name\n                                    - email\n                                    - photo\n                                    - emailConfirmed\n                                    - bypassSpam\n                                type: object\n                    description: Success\n            tags:\n                - Users\n            summary: Get a user for editing.\n    \"/users/{id}/hidden\":\n        put:\n            parameters:\n                - description: The user ID.\n                  in: path\n                  name: id\n                  required: true\n                  schema:\n                      type: integer\n            responses:\n                \"200\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                properties:\n                                    hidden:\n                                        description: Whether not the user is hidden from Online status.\n                                        type: boolean\n                                required:\n                                    - hidden\n                                type: object\n                    description: Success\n            tags:\n                - Users\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            properties:\n                                hidden:\n                                    description: Whether not the user should be hidden from Online status.\n                                    type: boolean\n                            required:\n                                - hidden\n                            type: object\n                required: true\n            summary: Adjust a user’s Online privacy.\n    \"/users/{id}/photo\":\n        delete:\n            parameters:\n                - description: |\n                      The user ID.\n                  in: path\n                  name: id\n                  required: true\n                  schema:\n                      type: integer\n                - description: \u003e\n                      Expand associated records using one or more valid field names. A\n                      value of \"all\" will expand all expandable fields.\n                  in: query\n                  name: expand\n                  schema:\n                      items:\n                          enum:\n                              - rank\n                              - all\n                          type: string\n                      type: array\n                  style: form\n            responses:\n                \"204\":\n                    description: Success\n            tags:\n                - Users\n            summary: Delete a user photo.\n        post:\n            parameters:\n                - in: path\n                  name: id\n                  required: true\n                  schema:\n                      type: integer\n            responses:\n                \"200\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                properties:\n                                    photoUrl:\n                                        description: URL to the user photo.\n                                        minLength: 0\n                                        nullable: true\n                                        type: string\n                                required:\n                                    - photoUrl\n                                type: object\n                    description: Success\n            tags:\n                - Users\n            requestBody:\n                content:\n                    multipart/form-data:\n                        schema:\n                            properties:\n                                photo:\n                                    type: string\n                                    format: binary\n                            required:\n                                - photo\n                            type: object\n                required: true\n    \"/users/{id}/badges\":\n        x-addon: badges\n        get:\n            summary: Get user badges.\n            tags:\n                - Users\n            parameters:\n                - description: The user ID.\n                  in: path\n                  name: id\n                  required: true\n                  schema:\n                      type: integer\n                - description: |\n                      Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n                  in: query\n                  name: page\n                  schema:\n                      type: integer\n                      default: 1\n                      maximum: 100\n                      minimum: 1\n                - description: |\n                      Desired number of items per page.\n                  in: query\n                  name: limit\n                  schema:\n                      type: integer\n                      default: 30\n                      maximum: 100\n                      minimum: 1\n            responses:\n                \"200\":\n                    content:\n                        application/json:\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/UserBadges\"\n                                type: array\n                    description: Success\n    \"/users/{id}/rank\":\n        x-addon: ranks\n        put:\n            summary: Update the rank of a user.\n            tags:\n                - Users\n            parameters:\n                - in: path\n                  name: id\n                  required: true\n                  schema:\n                      type: integer\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            properties:\n                                rankID:\n                                    description: ID of the user rank.\n                                    nullable: true\n                                    type: integer\n                            required:\n                                - rankID\n                            type: object\n                required: true\n            responses:\n                \"200\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                properties:\n                                    rankID:\n                                        description: ID of the user rank.\n                                        nullable: true\n                                        type: integer\n                                required:\n                                    - rankID\n                                type: object\n                    description: Success\ncomponents:\n    parameters:\n        UserExpand:\n            description: \u003e\n                Expand associated records using one or more valid field names. A\n                value of \"all\" will expand all expandable fields.\n            in: query\n            name: expand\n            schema:\n                items:\n                    enum:\n                        - rank\n                        - all\n                    type: string\n                type: array\n            style: form\n    schemas:\n        User:\n            properties:\n                userID:\n                    description: ID of the user.\n                    type: integer\n                name:\n                    description: Name of the user.\n                    minLength: 1\n                    type: string\n                photoUrl:\n                    description: URL to the user photo.\n                    minLength: 0\n                    nullable: true\n                    type: string\n                email:\n                    description: Email address of the user.\n                    minLength: 0\n                    type: string\n                roles:\n                    items:\n                        $ref: \"schemas.yml#/components/schemas/RoleFragment\"\n                    type: array\n                dateInserted:\n                    description: When the user was created.\n                    format: date-time\n                    type: string\n                dateLastActive:\n                    description: Time the user was last active.\n                    format: date-time\n                    nullable: true\n                    type: string\n                dateUpdated:\n                    description: When the user was last updated.\n                    format: date-time\n                    nullable: true\n                    type: string\n                points:\n                    description: The total number of points the user has accumulated.\n                    type: integer\n                    default: 0\n                emailConfirmed:\n                    description: Has the email address for the user been confirmed?\n                    type: boolean\n                hidden:\n                    description: Is this user hiding their online status?\n                    type: boolean\n                bypassSpam:\n                    description: Should submissions from this user bypass SPAM checks?\n                    type: boolean\n                banned:\n                    description: Is the user banned?\n                    type: integer\n                rank:\n                    x-addon: ranks\n                    properties:\n                        name:\n                            description: Name of the rank.\n                            minLength: 1\n                            type: string\n                        rankID:\n                            description: Rank ID.\n                            type: integer\n                        userTitle:\n                            description: Label that will display beside the user.\n                            minLength: 1\n                            type: string\n                    required:\n                        - rankID\n                        - name\n                        - userTitle\n                    type: object\n                rankID:\n                    x-addon: ranks\n                    description: ID of the user rank.\n                    nullable: true\n                    type: integer\n                showEmail:\n                    description: Is the email address visible to other users?\n                    type: boolean\n            required:\n                - userID\n                - name\n                - email\n                - photoUrl\n                - points\n                - emailConfirmed\n                - showEmail\n                - bypassSpam\n                - banned\n                - dateInserted\n                - dateLastActive\n                - dateUpdated\n            type: object\n        UserPatch:\n            type: object\n            properties:\n                bypassSpam:\n                    description: Should submissions from this user bypass SPAM checks?\n                    type: boolean\n                email:\n                    description: Email address of the user.\n                    minLength: 0\n                    type: string\n                emailConfirmed:\n                    description: Has the email address for this user been confirmed?\n                    type: boolean\n                name:\n                    description: Name of the user.\n                    minLength: 1\n                    type: string\n                password:\n                    description: Password of the user.\n                    minLength: 1\n                    type: string\n                photo:\n                    description: Raw photo field value from the user record.\n                    minLength: 0\n                    nullable: true\n                    type: string\n                roleID:\n                    description: Roles to set on the user.\n                    items:\n                        type: integer\n                    type: array\n        UserPost:\n            type: object\n            properties:\n                bypassSpam:\n                    default: false\n                    description: Should submissions from this user bypass SPAM checks?\n                    type: boolean\n                email:\n                    description: Email address of the user.\n                    minLength: 1\n                    type: string\n                emailConfirmed:\n                    default: true\n                    description: Has the email address for this user been confirmed?\n                    type: boolean\n                name:\n                    description: Name of the user.\n                    minLength: 1\n                    type: string\n                password:\n                    description: Password of the user.\n                    minLength: 1\n                    type: string\n                photo:\n                    description: Raw photo field value from the user record.\n                    minLength: 0\n                    nullable: true\n                    type: string\n                roleID:\n                    description: Roles to set on the user.\n                    items:\n                        type: integer\n                    type: array\n            required:\n                - name\n                - email\n                - password\n                - emailConfirmed\n                - bypassSpam\n        UserBadges:\n            type: object\n            properties:\n                badgeID:\n                    description: ID of the badge.\n                    type: integer\n                name:\n                    description: Name of the badge.\n                    type: string\n                photoUrl:\n                    description: Badge photo.\n                    type: string\n                url:\n                    description: URL to the badge photo.\n                    type: string\n"
		}
	},
	"Error": "parse: paths: /users: get: : parameters: parse parameter \"userID\": schema: parse schema: reference \"#/components/schemas/RangeExpression\": resolve reference \"#/components/schemas/RangeExpression\": schema not found"
}