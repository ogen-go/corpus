{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ngageoint/mage-server"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "docs/openapi.yaml",
			"content": "openapi: 3.0.1\ninfo:\n  title: MAGE (Mobile Awareness GEOINT Environment) API\n  description: MAGE API\n  contact:\n    name: MAGE Support\n    email: mage@nga.mil\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0\n  version: 5.5.2\nservers: []\nsecurity:\n  - mageToken: []\ntags:\n  - name: Auth\n  - name: Authentication \u0026 Authorization\n  - name: Authentication Configuration\n    description: Authentication configurations define the strategies used to authenticate users into the system.\n  - name: Device\n  - name: Event\n  - name: Export\n  - name: Layer\n  - name: Location\n  - name: Observation\n  - name: Role\n  - name: Settings\n  - name: Team\n  - name: User\npaths:\n  /api/logins:\n    get:\n      tags: [ Auth ]\n      description: \u003e\n        Return an array of user login events.  This operation requires\n        `READ_USER` permission.\n      operationId: getUserLogins\n      parameters:\n        - name: userId\n          in: query\n          description: Return only logins for the given `userId`\n          schema: { $ref: '#/components/schemas/User/properties/id' }\n        - name: deviceId\n          in: query\n          description: Return only logins from the given `deviceId`\n          schema: { $ref: '#/components/schemas/Device/properties/id' }\n        - name: startDate\n          in: query\n          description: ISO 8601 start date to filter (inclusive)\n          schema:\n            type: string\n            format: date-time\n        - name: endDate\n          in: query\n          description: ISO 8601 end date filter (exclusive)\n          schema:\n            type: string\n            format: date-time\n        - name: limit\n          in: query\n          description: \u003e\n            Limit the number of results to the given value.  The default value\n            is `10`.\n          schema:\n            type: integer\n        - name: firstLoginId\n          in: query\n          description: The ID of the first login in the range of results\n          schema: { $ref: '#/components/schemas/Login/properties/id' }\n        - name: lastLoginId\n          in: query\n          description: The ID of the last login in the range of results\n          schema: { $ref: '#/components/schemas/Login/properties/id' }\n      responses:\n        200:\n          description: \u003e\n            Success - return the array of login events according to the given\n            query parameters.\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [ logins ]\n                properties:\n                  next:\n                    type: string\n                    format: uri\n                    description: Link to the next chunk of results\n                  prev:\n                    type: string\n                    format: uri\n                    description: Link to the previous chunk of results\n                  logins:\n                    type: array\n                    items: { $ref: '#/components/schemas/Login' }\n\n  /api/logout:\n    post:\n      tags:\n      - Auth\n      description: Invaldate the auth token for the requesting user.\n      operationId: logout\n      responses:\n        200:\n          description: logout response\n   \n  /auth/{authenticationStrategy}/signin:\n    post:\n      tags: [ Authentication \u0026 Authorization ]\n      summary: Authentication \n      description: Authenticate a user using a given strategy. \n      operationId: authenticate\n      security:\n        []\n      parameters:\n        - name: authenticationStrategy\n          in: path\n          description: Authentication strategy.  Given authentication strategy must be enabled in config.js\n          required: true\n          schema:\n            type: string\n            enum: [ local, ldap, saml, geoaxis, openidconnect ]\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: { $ref: '#/components/schemas/UserIn' }\n          multipart/form-data:\n            schema: { $ref: '#/components/schemas/UserIn' }\n      responses:\n        200:\n          description: Successfully signed in.\n          content:\n            application/json:\n              schema: { $ref: '#/components/schemas/Authentication' }\n\n  /auth/token:\n    post:\n      tags: [ Authentication \u0026 Authorization  ]\n      summary: Device Authorization\n      description: Authorize a device.  If device does not exist, it may also be created via this method.\n      operationId: authorize\n      security:\n        - authenticationToken: []\n      parameters:\n        - name: uid\n          in: query\n          description: Id of the device that requires provisioning\n          required: true\n          schema: { $ref: '#/components/schemas/Device/properties/id' }\n        - name: name\n          in: query\n          description: Name of the device\n          schema: { $ref: '#/components/schemas/Device/properties/name' }\n        - name: description\n          in: query\n          description: Description of the device\n          schema: { $ref: '#/components/schemas/Device/properties/description' }\n        - name: appVersion\n          in: query\n          description: Application version of the device (required if creating a new device)\n          schema: { $ref: '#/components/schemas/Device/properties/appVersion' }\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema: { $ref: '#/components/schemas/DeviceIn' }\n          multipart/form-data:\n            schema: { $ref: '#/components/schemas/DeviceIn' }\n      responses:\n        200:\n          description: Successful device authorization, MAGE api token is returned.\n        401:\n          description:  User is not authorized.  Typically this means you need to authenticate `/auth/local/signin`.\n        403:\n          description: Failure to provision the device.  This typically means the device needs to be registered.\n\n  /api/authentication/configuration/:\n    get:\n      tags: [Authentication Configuration]\n      summary: Get an array of all authentication configurations\n      description: Get all authentication configurations.  The client must have `READ_AUTH_CONFIG` permission.\n      operationId: getAllAuthConfigs\n      parameters:\n        - { $ref: '#/components/parameters/authenticationConfigurationIncludeDisabled' }\n      responses:\n        200:\n          description: A list of all authentication configurations.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AuthenticationConfiguration'\n        401:\n          description: User is not authorized to view authentication configurations.\n    post:\n      tags: [Authentication Configuration]\n      summary: Create a new authentication configuration\n      description: Create a new authentication configuration.  If enabled, it will allow users to use this method.  \n                   The client must have `UPDATE_AUTH_CONFIG` permission.\n      operationId: createNewAuthConfig\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: { $ref: '#/components/schemas/AuthenticationConfiguration' }\n      responses:\n        200:\n          description: The created authentication configuration\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticationConfiguration'\n        401:\n          description: User is not authorized to create authentication configurations.\n  /api/authentication/configuration/{id}:\n    parameters:\n      - { $ref: '#/components/parameters/authenticationConfigurationIdInPath' }\n    put:\n      tags: [ Authentication Configuration ]\n      summary: Update an authentication configuration\n      description: \u003e\n        Update the authentication configuration.\n        The client must have `UPDATE_AUTH_CONFIG` permission.\n      operationId: updateAuthConfigById\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: { $ref: '#/components/schemas/AuthenticationConfiguration' }\n      responses:\n        200:\n          description: authentication configuration update response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticationConfiguration'\n    delete:\n      tags: [ Authentication Configuration ]\n      summary: Delete  an authentication configuration\n      description: \u003e\n        Delete the authentiction configuration document by `id`.\n        The client must have `UPDATE_AUTH_CONFIG` permission.\n      operationId: deleteAutheConfig\n      responses:\n        204:\n          description: Success - authentication configuration\n  /api/authentication/configuration/count/{id}:\n    parameters:\n      - { $ref: '#/components/parameters/authenticationConfigurationIdInPath' }\n    get:\n      tags: [ Authentication Configuration ]\n      summary: Count the number of users for a given configuration\n      description: \u003e\n        Count the number of users for a given configuration.\n        The client must have `READ_AUTH_CONFIG` permission.\n      operationId: countUsersByAuthConfig\n      responses:\n        200:\n          description: The number of users created from the provided authentication.\n          \n  /api/users:\n    post:\n      tags: [ User ]\n      description: \u003e\n        Create a new user.  Duplicate usernames are not allowed.\n        If the requesting user is an admin, i.e., has the `CREATE_USER`\n        permission, the user record will be active.  Otherwise, the user will\n        be inactive and an admin must activate the user later.  Additionally,\n        the `roleId` key is required when the requesting user is an admin.\n        Otherwise, the created user receives a default role.  When the request\n        body contains `multipart/form-data`, MAGE will handle the `icon` and/or\n        `avatar` file form parameters.  The server only sets the user's map\n        icon if the requesting user has the `CREATE_USER` permission.\n      operationId: createUser\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: { $ref: '#/components/schemas/UserCreate' }\n          multipart/form-data:\n            schema: { $ref: '#/components/schemas/UserCreate' }\n      responses:\n        200:\n          description: The created user document\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    get:\n      tags: [ User ]\n      description: \u003e\n        Return an array of all users.  The client must have `READ_USER` permission.\n      summary: Get an array of users.\n      operationId: getUsers\n      parameters:\n        - in: query\n          name: active\n          description: Return only active or inactive users.\n          schema:\n            type: boolean\n        - in: query\n          name: enabled\n          description: Return only enabled or disabled users.\n          schema:\n            type: boolean\n        - in: query\n          name: start\n          description: Used with pagination.  Indicates the record number to start (leave blank for initial set of results).\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Used with pagination.  Maximum number of records to return. \n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: Describes the sort order.  Values allowed are asc, desc, ascending, descending, 1, and -1.\n          content:\n            application/json:  \n              schema:\n                type: object\n                required:\n                  - displayName\n                  - _id\n                properties:\n                  displayName:\n                    type: string\n                  _id:\n                    type: string\n        - in: query\n          name: populate\n          description: \u003e\n            Pre-populate the given relation keys in the result user documents.\n            Currently, this only supports 'roleId'.\n          schema: { $ref: '#/components/schemas/CommaSeparatedTokens' }\n      responses:\n        200:\n          description: An array of user documents\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n  /api/users/count:\n    get:\n      tags: [ User ]\n      description: \u003e\n        Return the number of users in the database.  The client must\n        have `READ_USER` permission.\n      summary: Count the number of users in the database.\n      operationId: getUserCount\n      parameters:\n        - in: query\n          name: active\n          schema:\n            type: boolean\n        - in: query\n          name: enabled\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: A successful request\n          content:\n            application/json:\n              schema: { $ref: '#/components/schemas/Count' }\n  /api/users/myself:\n    get:\n      tags: [ User ]\n      description: \u003e\n        Return the user document for the requesting user based on the\n        provided authentication token.\n      operationId: getMyself\n      responses:\n        200:\n          description: The user document for the requesting user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    put:\n      tags: [ User ]\n      description: \u003e\n        Update the user document for the requesting user based on the\n        provided authentication token.  This operation does not support\n        changing the requesting user's password; use\n        `PUT /api/users/myself/password` for that.\n      operationId: updateMyself\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: { $ref: '#/components/schemas/UserUpdateSelf' }\n          multipart/form-data:\n            schema: { $ref: '#/components/schemas/UserUpdateSelf' }\n      responses:\n        200:\n          description: The updated user document\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /api/users/myself/password:\n    put:\n      tags: [ User ]\n      description: Update the password for the requesting user.\n      operationId: updateMyPassword\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                newPassword:\n                  type: string\n                  format: password\n                newPasswordConfirm:\n                  type: string\n                  format: password\n      responses:\n        200:\n          description: Successful password update; return the user document\n          content:\n            application/json:\n              schema: { $ref: '#/components/schemas/User' }\n  /api/users/myself/status:\n    put:\n      tags: [ User ]\n      description: Update the status of the requesting user.\n      operationId: updateMyStatus\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                status:\n                  type: string\n              required: [ status ]\n      responses:\n        200:\n          description: Successful status update\n          content:\n            application/json:\n              schema: { $ref: '#/components/schemas/User' }\n    delete:\n      tags: [ User ]\n      description: Delete the status of the requesting user.\n      operationId: deleteMyStatus\n      responses:\n        200:\n          description: Successfully deleted status\n          content:\n            application/json:\n              schema: { $ref: '#/components/schemas/User' }\n  /api/users/{userId}:\n    parameters:\n      - { $ref: '#/components/parameters/userIdInPath' }\n    get:\n      tags:\n      - User\n      description: \u003e\n        Return the user document whose `id` equals the `userId` path parameter.\n        The client must have `READ_USER` permission.\n      operationId: getUserById\n      responses:\n        200:\n          description: The updated user document\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    put:\n      tags: [ User ]\n      description: \u003e\n        Update the user document whose `id` equals the `userId` path parameter.\n        The client must have `UPDATE_USER` permission.\n      operationId: updateUserById\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: { $ref: '#/components/schemas/UserIn' }\n          multipart/form-data:\n            schema: { $ref: '#/components/schemas/UserIn' }\n      responses:\n        200:\n          description: user update response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    delete:\n      tags: [ User ]\n      description: \u003e\n        Delete the user document whose `id` equals the `userId` path parameter.\n        The client must have `DELETE_USER` permission.\n      operationId: deleteUser\n      responses:\n        204:\n          description: Success - user deleted\n  /api/users/{userId}/avatar:\n    parameters:\n      - { $ref: '#/components/parameters/userIdInPath' }\n    get:\n      tags: [ User ]\n      description: Returns users avatar based on user id\n      operationId: getUserAvatar\n      responses:\n        200:\n          description: user avatar response\n          content:\n            image/*:\n              schema:\n                type: string\n                format: binary\n  /api/users/{userId}/icon:\n    parameters:\n      - { $ref: '#/components/parameters/userIdInPath' }\n    get:\n      tags: [ User ]\n      description: Returns users map icon based on user id\n      operationId: getUserIcon\n      responses:\n        200:\n          description: user icon response\n          content:\n            image/*:\n              schema:\n                type: string\n                format: binary\n  /api/users/{userId}/events/{eventId}/recent:\n    parameters:\n      - { $ref: '#/components/parameters/userIdInPath' }\n      - { $ref: '#/components/parameters/eventIdInPath' }\n    post:\n      tags: [ User ]\n      description: \u003e\n        Add the given event to top of recent list for the given user.  The list\n        is capped at 5.\n      operationId: addRecentEventForUser\n      responses:\n        200:\n          description: user response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n  /api/devices:\n    post:\n      tags:\n        - Device\n      summary: Create a device\n      description: \u003e\n        Save a new device document in the database.  The request client must\n        have `CREATE_DEVICE` permission. `DEPRECATED`: Clients should be creating devices via authorize `/auth/{strategy}/authorize`\n      operationId: createDevice\n      requestBody:\n        $ref: '#/components/requestBodies/DeviceIn'\n      deprecated:\n        true\n      responses:\n        200:\n          description: new device response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Device'\n    get:\n      tags:\n        - Device\n      description: \u003e\n        Return an array of all the device documents in the database.  The\n        requesting client must have `READ_DEVICE` permission.\n      summary: Get all the device documents in the database.\n      operationId: getDevices\n      parameters:\n        - in: query\n          name: registered\n          description: Return only registered or unregistered devices.\n          schema: { $ref: '#/components/schemas/Device/properties/registered' }\n        - in: query\n          name: start\n          description: Used with pagination.  Indicates the record number to start (leave blank for initial set of results).\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Used with pagination.  Maximum number of records to return. \n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: Describes the sort order.  Values allowed are asc, desc, ascending, descending, 1, and -1.\n          content:\n            application/json:  \n              schema:\n                type: object\n                required:\n                  - userAgent\n                  - _id\n                properties:\n                  userAgent:\n                    type: string\n                  _id:\n                    type: string\n        - in: query\n          name: expand\n          description: \u003e\n            Comma-separated list of relation keys to populate with related\n            documents.  Currently the API only supports the `user` key.\n          schema: { $ref: '#/components/schemas/CommaSeparatedTokens' }\n      responses:\n        200:\n          description: Success - an array of device documents\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Device'\n  /api/devices/count:\n    get:\n      tags:\n        - Device\n      operationId: getDeviceCount\n      description: Return the number of devices in the database.\n      summary: Count the number of devices in the database.\n      parameters:\n        - in: query\n          name: registered\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: Success - return the device count\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Count'\n  /api/devices/{deviceId}:\n    parameters:\n      - $ref: '#/components/parameters/deviceIdInPath'\n    get:\n      tags:\n        - Device\n      description: \u003e\n        Return the device document whose ID matches the path parameter for the\n        device ID.  The requesting client must have READ_DEVICE permission.\n      operationId: getDeviceById\n      responses:\n        200:\n          description: device response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Device'\n    put:\n      tags:\n        - Device\n      description: \u003e\n        Update a device document whose ID matches the path parameter for the\n        device ID.  The requesting client must have `UPDATE_DEVICE` permission.\n      operationId: updateDeviceById\n      requestBody:\n        $ref: '#/components/requestBodies/DeviceIn'\n      responses:\n        200:\n          description: device update response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Device'\n    delete:\n      tags:\n        - Device\n      description: \u003e\n        Delete a device document whose ID matches the path parameter for the\n        device ID.  The requesting client must have `DELETE_DEVICE` permission.\n      operationId: deleteDeviceByIds\n      responses:\n        204:\n          description: user deleted\n\n  /api/teams:\n    post:\n      tags: [ Team ]\n      description: \u003e\n        Save a new team document to the database.  The requesting user must\n        have `CREATE_TEAM` permission.\n      operationId: createTeam\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: { $ref: '#/components/schemas/TeamCreate' }\n          application/x-www-form-urlencoded:\n            schema: { $ref: '#/components/schemas/TeamCreate' }\n      responses:\n        200:\n          description: Success - the created team document\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Team'\n    get:\n      tags: [ Team ]\n      description: \u003e\n        Return all the teams.  The requesting client must have `READ_TEAM`\n        permission.\n      operationId: getTeams\n      parameters:\n        - in: query\n          name: start\n          description: Used with pagination.  Indicates the record number to start (leave blank for initial set of results).\n          schema:\n            type: integer\n        - in: query\n          name: limit\n          description: Used with pagination.  Maximum number of records to return. \n          schema:\n            type: integer\n        - in: query\n          name: sort\n          description: Describes the sort order.  Values allowed are asc, desc, ascending, descending, 1, and -1.\n          content:\n            application/json:  \n              schema:\n                type: object\n                required:\n                  - name\n                  - _id\n                properties:\n                  name:\n                    type: string\n                  _id:\n                    type: string\n      responses:\n        200:\n          description: Success - an array of team documents\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Team'\n  /api/teams/count:\n    get:\n      tags: [ Team ]\n      description: \u003e\n        Get the number of teams in the database.  The requesting user must have\n        have `READ_TEAM` permission.\n      operationId: getTeamCount\n      responses:\n        200:\n          description: Success - return the number of teams\n          content:\n            application/json:\n              schema: { $ref: '#/components/schemas/Count' }\n  /api/teams/{teamId}:\n    parameters:\n      - $ref: '#/components/parameters/teamIdInPath'\n    get:\n      tags: [ Team ]\n      description: \u003e\n        Return the team document whose ID matches the team ID path parameter.\n        The requesting client must have `READ_TEAM` permission.\n      operationId: getTeamById\n      responses:\n        200:\n          description: Success - a team document\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Team'\n    put:\n      tags: [ Team ]\n      description: \u003e\n        Update the team document whose ID matches the team ID in the path.\n        The requesting user must have `UPDATE_TEAM` permission.\n      operationId: updateTeamById\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: { $ref: '#/components/schemas/TeamIn' }\n          application/x-www-form-urlencoded:\n            schema: { $ref: '#/components/schemas/TeamIn' }\n      responses:\n        200:\n          description: Success - return the updated team document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Team'\n    delete:\n      tags: [ Team ]\n      description: \u003e\n        Delete the team document whose ID matches the team ID in the path.  The\n        request user must have `DELETE_TEAM` permission.\n      operationId: deleteTeam\n      responses:\n        204:\n          description: Success - team deleted\n  /api/teams/{teamId}/users:\n    parameters:\n      - { $ref: '#/components/parameters/teamIdInPath' }\n    post:\n      tags: [ Team ]\n      operationId: addUserToTeam\n      description: \u003e\n        Add a user to a team.  The request user must have `UPDATE_TEAM`\n        permission as well as an ACL entry in the team document with `update`\n        permission.\n      requestBody:\n        description: The user ID reference to add to the target team\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserRef'\n        required: true\n      responses:\n        200:\n          description: Success - return the updated team document.\n          content:\n            application/json:\n              schema: { $ref: '#/components/schemas/Team' }\n  /api/teams/{teamId}/users/{userId}:\n    parameters:\n      - { $ref: '#/components/parameters/teamIdInPath' }\n      - { $ref: '#/components/parameters/userIdInPath' }\n    delete:\n      tags: [ Team ]\n      operationId: removeUserFromTeam\n      description: \u003e\n        Remove a user from a team.  The requesting user must have `UPDATE_TEAM`\n        permission as well as an ACL entry in the team document with `update`\n        permission.\n      responses:\n        200:\n          description: Success - return the updated team document.\n          content:\n            application/json:\n              schema: { $ref: '#/components/schemas/Team' }\n  /api/teams/{teamId}/acl/{userId}:\n    parameters:\n      - { $ref: '#/components/parameters/teamIdInPath' }\n      - { $ref: '#/components/parameters/userIdInPath' }\n    put:\n      tags: [ Team ]\n      operationId: setUserAccessForTeam\n      description: \u003e\n        Update a team ACL entry.  The requesting user must have `UPDATE_TEAM`\n        permission, as well as an ACL entry in the team document with `update`\n        permission.\n      requestBody:\n        $ref: '#/components/requestBodies/ACLRoleUpdate'\n      responses:\n        200:\n          description: Success - return the updated team document.\n          content:\n            application/json:\n              schema: { $ref: '#/components/schemas/Team' }\n    delete:\n      tags: [ Team ]\n      operationId: removeUserAccessFromTeam\n      description: \u003e\n        Delete a team ACL entry.  The requesting user must have `UPDATE_TEAM`\n        permission, as well as an ACL entry in the team document with `update`\n        permission.\n      responses:\n        200:\n          description: Success - return the updated team document.\n          content:\n            application/json:\n              schema: { $ref: '#/components/schemas/Team' }\n\n  /api/events:\n    post:\n      tags: [ Event ]\n      operationId: createEvent\n      description: \u003e\n        Create a new event.  The requesting user must have `CREATE_EVENT`\n        permission.  MAGE assigns the requesting user to the event's ACL with\n        the `OWNER` role.  Creating a new event implicitly creates a team\n        coupled to the event by the team's `teamEventId` property.  One can\n        add users to this team to allow access to the event on an individual\n        basis.  This allows team and user access management to remain\n        consistent across the API without having to maintain a list of users\n        separately for each event.\n      requestBody:\n        description: The new event document\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EventCreate'\n        required: true\n      responses:\n        201:\n          description: Success - return the created event.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Event'\n    get:\n      tags: [ Event ]\n      description: \u003e\n        Get all of the MAGE server's events.  The requesting user must have\n        `READ_EVENT_ALL` permission and an ACL entry on the even with `read`\n        permission.\n      operationId: getEvents\n      parameters:\n        - in: query\n          name: projection\n          schema:\n            type: string\n        - in: query\n          name: state\n          schema:\n            type: string\n            enum: [ active, complete ]\n        - in: query\n          name: userId\n          schema:\n            $ref: '#/components/schemas/User/properties/id'\n          description: \u003e\n            Return only events the given user can access.\n        - in: query\n          name: populate\n          schema:\n            type: boolean\n          description: \u003e\n            When omitted or not `false`, populate the teams and layers related\n            to each event.  Otherwise, the event documents will only contain\n            the IDs of the related teams and layers.  When populated, the\n            event documents will contain the `teams` and `layers` keys mapped to\n            arrays of their respective documents.  When not populated, the\n            event documents will contain the `eventIds` and `layerIds` keys\n            mapped to arrays of ID strings.  Populated team documents will NOT\n            contain populated user documents.\n      responses:\n        200:\n          description: Success - return an array of event documents.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Event'\n  /api/events/count:\n    get:\n      tags: [ Event ]\n      description: \u003e\n        Get the number of events in the database.  The requesting user must\n        have `READ_EVENT_ALL` permission.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Count'\n  /api/events/{eventId}:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n    get:\n      tags: [ Event ]\n      description: \u003e\n        Return the event with the ID specified in the path.  The requesting\n        user must have `READ_EVENT_ALL` permission and an ACL entry with `read`\n        permission on the even.\n      operationId: getEventById\n      parameters:\n        - in: query\n          name: populate\n          schema:\n            type: boolean\n          description: \u003e\n            When omitted or not `false`, populate the teams and layers related\n            to each event.  Otherwise, the event documents will only contain\n            the IDs of the related teams and layers.  When populated, the\n            event documents will contain the `teams` and `layers` keys mapped to\n            with arrays of their respective documents.  When not populated, the\n            event documents will contain the `eventIds` and `layerIds` keys\n            mapped to arrays of ID strings.  Populated team documents will NOT\n            contain populated user documents.\n        - in: query\n          name: projection\n          schema:\n            type: string\n      responses:\n        200:\n          description: Sucess - return the event document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Event'\n    put:\n      tags: [ Event ]\n      description: \u003e\n        Update the event with the ID specified in the path.  The requesting\n        user must have `UPDATE_EVENT` permission and an ACL entry on the event\n        with `update` permission.\n      operationId: updateEventById\n      requestBody:\n        description: event update body\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EventUpdate'\n        required: true\n      responses:\n        200:\n          description: Success - return the update event document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Event'\n    delete:\n      tags: [ Event ]\n      description: \u003e\n        Delete the event with the ID specified in the path.  The requesting\n        user must have `DELETE_EVENT` permission and an ACL entry on the event\n        with `delete` permission.\n      operationId: deleteEvent\n      responses:\n        204:\n          description: Success - event deleted\n  /api/events/{eventId}/forms:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n    post:\n      tags: [ Event ]\n      description: \u003e\n        Add a form to the specified event.  The requesting user must have\n        `UPDATE_EVENT` permission and an ACL entry on the event with `update`\n        permission.\n      operationId: addFormToEvent\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FormCreate'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/FormImport'\n      responses:\n        201:\n          description: Success - return the updated event document\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Event'\n  /api/events/{eventId}/forms/{formId}:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/formIdInPath'\n    put:\n      tags: [ Event ]\n      operationId: updateFormById\n      description: \u003e\n        Update the specified form for the specified event.  The requesting\n        client must have `UPDATE_EVENT` permission and an ACL entry on the\n        event with `update` permission.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Form'\n      responses:\n        200:\n          description: Success - return the updated form document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Form'\n  /api/events/{eventId}/{formId}/form.zip:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/formIdInPath'\n    get:\n      tags: [ Event ]\n      operationId: exportForm\n      description: \u003e\n        Export a zip archive of the form.  The zip file includes metadata and\n        map symbology icons in the following layout.\n        ```\n        form/form.json # the form document\n        icons/ # a directory that contains the form's icon image files\n        icons/icon.png\n        # icon for 'primary_1' primary value with no variant value\n        icons/\u003cprimary_1\u003e/icon.png\n        # icon for 'primary_1' primary value with 'variant_1' variant value\n        icons/\u003cprimary_1\u003e/\u003cvariant_1\u003e/icon.png\n        # icon for 'primary_1' primary value with 'variant_2' variant value\n        icons/\u003cprimary_1\u003e/\u003cvariant_2\u003e/icon.png\n        ...\n        # and so on for any combination of primary and variant field values\n        # that one wishes to have a specific map icon\n        icons/\u003cprimary_n\u003e/\u003cvariant_n\u003e/icon.png\n        ```\n        The `\u003cprimary_x\u003e` and `\u003cvariant_x\u003e` directory components above are\n        named after the choice values of the form's primary and variant\n        select fields, respectively.  Each `primary_x/variant_x` directory\n        contains the map icon image that MAGE clients will use to represent\n        observations with those values on a map.  MAGE clients will use the\n        form's default icon image to represent primary/variant combinations\n        that are not present in the `icons` directory.  The requesting user\n        must have `READ_EVENT_ALL` permission and an ACL entry with `read`\n        permission on the event.\n      responses:\n        200:\n          description: \u003e\n            Success - return a zip file of the form meta-data and icons.\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n  /api/events/{eventId}/form/icons.zip:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n    get:\n      tags: [ Event ]\n      operationId: getEventIcons\n      description: \u003e\n        Get a zip file containing all the map icons for the forms of an event.\n        The requesting user must have `READ_EVENT_ALL` permission and an ACL\n        entry with `read` permission on the event.  The top level of the zip\n        file will contain one directory entry, `icons/`, which contains the\n        icon files under directories named according to primary and variant\n        field values as described above in the `exportForm` operation.\n      responses:\n        200:\n          description: Success - return a zip file of icon images for the event.\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n  /api/events/{eventId}/icons/{formId}.json:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/formIdInPath'\n    get:\n      tags: [ Event ]\n      operationId: getFormIcons\n      description: \u003e\n        Return all the icons for the specified form as base-64 strings in a\n        JSON document.  The requesting user must have `READ_EVENT_ALL`\n        permission and an ACL entry with `read` permission on the event.\n      responses:\n        200:\n          description: Success - return the array of form icons.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FormIconEmbedded'\n  /api/events/{eventId}/icons:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n    post:\n      tags: [ Event ]\n      operationId: uploadEventIcon\n      description: \u003e\n        Upload the default icon for the specified event.  The requesting user\n        must have `UPDATE_EVENT` permission and an ACL entry on the event with\n        `update` permission.\n      requestBody:\n        $ref: '#/components/requestBodies/FormIconUpload'\n      responses:\n        200:\n          $ref: '#/components/responses/FormIconInfo'\n    get:\n      tags: [ Event ]\n      operationId: getEventIcon\n      description: \u003e\n        Get the default icon image for the specified event.  The requesting user\n        must have `READ_EVENT_ALL` permission and an ACL entry on the event with\n        `read` permission.\n      responses:\n        200:\n          $ref: '#/components/responses/FormIconContent'\n    delete:\n      tags: [ Event ]\n      operationId: deleteEventIcon\n      description: \u003e\n        Delete the default icon from the specified event.  The requesting user\n        must have `UPDATE_EVENT` permission and an ACL entry on the event with\n        `update` permission.\n      responses:\n        204:\n          description: Success - icon deleted.\n  /api/events/{eventId}/icons/{formId}:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/formIdInPath'\n    post:\n      tags: [ Event ]\n      operationId: uploadDefaultFormIcon\n      description: \u003e\n        Upload the default icon for the specified form.  The requesting user\n        must have 'UPDATE_EVENT' permission and an ACL entry on the event with\n        `update` permission.\n      requestBody:\n        $ref: '#/components/requestBodies/FormIconUpload'\n      responses:\n        200:\n          $ref: '#/components/responses/FormIconInfo'\n    get:\n      tags: [ Event ]\n      operationId: getDefaultFormIcon\n      description: \u003e\n        Get the default icon for the specified form.  The requesting user must\n        have `READ_EVENT_ALL` permission and an ACL entry on the event with\n        `read` permission.\n      responses:\n        200:\n          $ref: '#/components/responses/FormIconContent'\n    delete:\n      tags: [ Event ]\n      operationId: deleteDefaultFormIcon\n      description: \u003e\n        Delete the default icon from the form.  The requesting user must have\n        `UPDATE_EVENT` permission and an ACL entry on the event with `update`\n        permission.\n      responses:\n        204:\n          description: Success - icon deleted.\n  /api/events/{eventId}/icons/{formId}/{primary}:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/formIdInPath'\n      - $ref: '#/components/parameters/primaryFieldValueInPath'\n    post:\n      tags: [ Event ]\n      operationId: uploadPrimaryFormIcon\n      requestBody:\n        $ref: '#/components/requestBodies/FormIconUpload'\n      responses:\n        200:\n          $ref: '#/components/responses/FormIconInfo'\n    get:\n      tags: [ Event ]\n      operationId: getPrimaryFormIcon\n      description: \u003e\n        Get the default icon for the specified form.  The requesting user must\n        have `READ_EVENT_ALL` permission and an ACL entry on the event with\n        `read` permission.\n      responses:\n        200:\n          $ref: '#/components/responses/FormIconContent'\n    delete:\n      tags: [ Event ]\n      operationId: deletePrimaryFormIcon\n      description: \u003e\n        Delete the primary icon from the form.  The requesting user must have\n        `UPDATE_EVENT` permission and an ACL entry on the event with `update`\n        permission.\n      responses:\n        204:\n          description: Success - icon deleted.\n  /api/events/{eventId}/icons/{formId}/{primary}/{variant}:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/formIdInPath'\n      - $ref: '#/components/parameters/primaryFieldValueInPath'\n      - $ref: '#/components/parameters/variantFieldValueInPath'\n    post:\n      tags: [ Event ]\n      operationId: uploadVariantFormIcon\n      description: \u003e\n        Upload the icon image associated with the specified primary + variant\n        field value combination.\n      responses:\n        200:\n          $ref: '#/components/responses/FormIconInfo'\n    get:\n      tags: [ Event ]\n      operationId: getVariantFormIcon\n      description: \u003e\n        Get the variant icon for the specified form.  The requesting user must\n        have `READ_EVENT_ALL` permission and an ACL entry on the event with\n        `read` permission.\n      responses:\n        200:\n          $ref: '#/components/responses/FormIconContent'\n    delete:\n      tags: [ Event ]\n      operationId: deleteVariantFormIcon\n      description: \u003e\n        Delete the variant icon from the form.  The requesting user  must have\n        `UPDATE_EVENT` permission and an ACL entry on the event with `update`\n        permission.\n      responses:\n        204:\n          description: Success - icon deleted.\n  /api/events/{eventId}/layers:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n    get:\n      tags: [ Layer ]\n      operationId: getLayersForEvent\n      description: \u003e\n        Return an array of all layers for specified event.\n        The client must have 'READ_LAYER_ALL' permission of `READ_LAYER_EVENT`\n        permission and an ACL entry on the event with `read` permission.\n      parameters:\n        - in: query\n          name: type\n          schema:\n            type: string\n            enum: [ Imagery, Feature, GeoPackage ]\n      responses:\n        200:\n          description: Success - return an array of layer documents for specified event.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Layer'\n    post:\n      tags: [ Event ]\n      operationId: addLayerToEvent\n      description: \u003e\n        Add a layer to the specified event.  The requesting user must have\n        `UPDATE_EVENT` permission and an ACL entry on the event with `update`\n        permission.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LayerRef'\n        required: true\n      responses:\n        200:\n          description: Success - return the updated event document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Event'\n  /api/events/{eventId}/layers/{layerId}:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/layerIdInPath'\n    get:\n      tags: [ Layer ]\n      description: \u003e\n        Return the layer for the event specified with the ID specified\n        in the path.  The requesting user must have `READ_LAYER_ALL` permission\n        or `READ_LAYER_EVENT` permission and an ACL entry on the evebnt with\n        `update` permission.\n      operationId: getLayerForEventById\n      responses:\n        200:\n          description: layer response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Layer'\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n    delete:\n      tags: [ Event ]\n      operationId: removeLayerFromEvent\n      description: \u003e\n        Remove the specified layer from the specified event.  The requesting\n        user must have `UPDATE_EVENT` permission and an ACL entry on the event\n        with `update` permission.\n      responses:\n        200:\n          description: Success - return the updated event document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Event'\n  /api/events/{eventId}/layers/{layerId}/{tableName}:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/layerIdInPath'\n    get:\n      tags: [ Layer ]\n      operationId: getXYZTileForGeoPackage\n      description: \u003e\n        Get an XYZ map tile for the specified layer in the specified event.\n      parameters:\n        - in: path\n          name: tableName\n          description: GeoPackage table name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success - XYZ map tile.\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n                description: JPEG map tile\n            pbf:\n              schema:\n                type: string\n                format: binary\n                description: Google protobuf vector tile\n\n  /api/events/{eventId}/users:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n    get:\n      tags: [ Event ]\n      operationId: getUsersForEvent\n      description: \u003e\n        Get a flat list of all the users of all the teams with access to the\n        specified event.  The requesting user must have `READ_EVENT_ALL`\n        permission and an ACL entry on the event with `read` permission.\n      responses:\n        200:\n          description: Success - return an array of user documents.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n  /api/events/{eventId}/teams:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n    post:\n      tags: [ Event ]\n      operationId: addTeamToEvent\n      description: \u003e\n        Add a team to the specified event.  The requesting user must have\n        `UPDATE_EVENT` permission and an ACL entry on the event with `update`\n        permission.  All of the team's members will have access to the event.\n      requestBody:\n        description: \u003e\n          Document referencing the ID of the team to add to the event\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TeamRef'\n        required: true\n      responses:\n        200:\n          description: Success - return the updated event.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Event'\n    get:\n      tags: [ Event ]\n      operationId: getTeamsForEvent\n      description: \u003e\n        Get the teams with access to the specified event.  The requesting user\n        must have `READ_EVENT_ALL` permission and an ACL entry on the event\n        with `read` permission.\n      parameters:\n        - in: query\n          name: populate\n          description: \u003e\n            The `populate` parameter is a comma-separated list of keys in the\n            returned team documents to populate with their referenced documents.\n            When the value of `populate` includes `users`, MAGE will populate\n            the returned team documents with the user documents they reference,\n            replacing the `userIds` key in each team document with `users`.\n          schema:\n            type: string\n            enum:\n              - users\n      responses:\n        200:\n          description: Success - return an array of team documents.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Team'\n  /api/events/{eventId}/teams/{teamId}:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/teamIdInPath'\n    delete:\n      tags: [ Event ]\n      operationId: removeTeamFromEvent\n      description: \u003e\n        Remove the specified team from the specified event.  The requesting\n        user must have `UPDATE_EVENT` permission and an ACL entry on the event\n        with `update` permission.\n      responses:\n        200:\n          description: Success - return the updated team document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Event'\n  /api/events/{eventId}/acl/{userId}:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/userIdInPath'\n    put:\n      tags: [ Event ]\n      operationId: setUserAccessForEvent\n      description: \u003e\n        Set the specified user's ACL role on the specified event.  The\n        requesting user must have `UPDATE_EVENT` permission and an ACL entry on\n        the event with `update` permission.\n      requestBody:\n        $ref: '#/components/requestBodies/ACLRoleUpdate'\n      responses:\n        200:\n          description: Success - return the updated event document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Event'\n    delete:\n      tags: [ Event ]\n      operationId: removeUserAccessFromEvent\n      description: \u003e\n        Remove the specified user's ACL role from the specified event.  The\n        requesting user must have `UPDATE_EVENT` permission and an ACL entry on\n        the event with `update` permission.\n      responses:\n        200:\n          description: Success - return the updated event document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Event'\n  /api/events/{eventId}/observations/id:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n    post:\n      tags: [ Observation ]\n      operationId: createObservationId\n      description: \u003e\n        Generate a new observation ID with which to save a new observation.\n      responses:\n        201:\n          description: \u003e\n            Success - return a stub observation document including the `id`,\n            `eventId`, and `url` properties.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Observation'\n          links:\n            createObservation:\n              operationId: saveObservation\n              parameters:\n                eventId: $request.path.eventId\n                ovservationId: $response.body#/id\n  /api/events/{eventId}/observations/{observationId}:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/observationIdInPath'\n    put:\n      tags: [ Observation ]\n      operationId: saveObservation\n      description: \u003e\n        Create or update an observation with the specified observation ID for\n        the specified event.  To create an observation, the requesting user\n        must have `CREATE_OBSERVATION` permission and must be a member of a\n        team with access to the event.  To update an observation, the\n        requesting user must have `UPDATE_OBSERVATION_ALL` permission, or have\n        `UPDATE_OBSERVATION_EVENT` permission as well as an ACL entry on the\n        event with `read` permission, or be a member of a team with access to\n        the event.\n      requestBody:\n        description: The observation properties\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ObservationIn'\n        required: true\n      responses:\n        200:\n          description: Success - return the updated observation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Observation'\n    get:\n      tags: [ Observation ]\n      operationId: getObservationById\n      description: \u003e\n        Get the specified observation in the specified event.  The requesting\n        user must have `READ_OBSERVATION_ALL` permission, or have\n        `READ_OBSERVATION_EVENT` permission and an ACL entry on the event with\n        `read` permission.\n      parameters: \u0026obsQueryParams\n        - $ref: '#/components/parameters/observationQuery.fields'\n        - $ref: '#/components/parameters/observationQuery.startDate'\n        - $ref: '#/components/parameters/observationQuery.endDate'\n        - $ref: '#/components/parameters/observationQuery.observationStartDate'\n        - $ref: '#/components/parameters/observationQuery.observationEndDate'\n        - $ref: '#/components/parameters/observationQuery.bbox'\n        - $ref: '#/components/parameters/observationQuery.geometry'\n        - $ref: '#/components/parameters/observationQuery.states'\n        - $ref: '#/components/parameters/observationQuery.sort'\n      responses:\n        200:\n          description: observation response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Observation'\n  /api/events/{eventId}/observations/{observationId}.zip:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/observationIdInPath'\n    get:\n      tags: [ Observation ]\n      operationId: getObservationArchive\n      description: \u003e\n        Get a zip archive of the specified observation content.  The requesting\n        user must have `READ_OBSERVATION_ALL` permission, or have\n        `READ_OBSERVATION_EVENT` permission and an ACL entry on the event with\n        `read` permission.  The returned archive contains an entry named\n        `\u003cobservation_id\u003e/index.html`, as well as related resources for any\n        media attached to the observation.\n      responses:\n        200:\n          description: Success - return the observation zip archive.\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n  /api/events/{eventId}/observations:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n    get:\n      tags: [ Observation ]\n      description: \u003e\n        Get all the observations for the specified event that match the\n        specified query parameters.  The requesting user must have\n        `READ_OBSERVATION_ALL` permission, or have `READ_OBSERVATION_EVENT`\n        permission and an ACL entry on the event with `read` permission.\n      operationId: getObservationsForEvent\n      parameters: *obsQueryParams\n      responses:\n        200:\n          description: \u003e\n            Success - return the observation documents matching the query.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Observation'\n  /api/events/{eventId}/observations/{observationId}/favorite:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/observationIdInPath'\n    put:\n      tags: [ Observation ]\n      operationId: addObservationFavorite\n      description: \u003e\n        Mark the specified observation as a favorite of the requesting user by\n        adding the user's ID to the `favoriteUserIds` array on the observation.\n        The requesting user must have `UPDATE_OBSERVATION_ALL` permission, or\n        have `UPDATE_OBSERVATION_EVENT` permission and an ACL entry on the\n        event with `read` permission.\n      responses:\n        200:\n          description: Success - return the updated observation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Observation'\n    delete:\n      tags: [ Observation ]\n      operationId: removeObservationFavorite\n      description: \u003e\n        Remove the requesting user's ID from the `favoriteUserIds` of the\n        specified observation.  The requesting user must have\n        `UPDATE_OBSERVATION_ALL` permission, or have `UPDATE_OBSERVATION_EVENT`\n        permission and an ACL entry on the event with `read` permission.\n      responses:\n        200:\n          description: Success - return the updated observation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Observation'\n  /api/events/{eventId}/observations/{observationId}/important:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/observationIdInPath'\n    put:\n      tags: [ Observation ]\n      operationId: setObservationImportant\n      description: \u003e\n        Mark the specified observation as important.  This operation allows\n        administrators and event managers to flag important observations for\n        all users with access to the event.  The requesting user must have\n        `UPDATE_EVENT` permission and an ACL entry on the event with `update`\n        permission.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ObservationImportantCreate'\n        required: true\n      responses:\n        200:\n          description: Success - return the updated observation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Observation'\n    delete:\n      tags: [ Observation ]\n      operationId: removeObservationImportant\n      description: \u003e\n        Remove the important flag from the specified observation.  The\n        requesting user must have `UPDATE_EVENT` permission and an ACL entry on\n        the event with `update` permission.\n      responses:\n        200:\n          description: Success - return the updated observation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Observation'\n  /api/events/{eventId}/observations/{observationId}/states:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/observationIdInPath'\n    post:\n      tags: [ Observation ]\n      operationId: addObservationState\n      description: \u003e\n        Set the current state of the specified observation.  The state is\n        appended to a list of states on the observation, the head of which is\n        the current state.  The requesting user must be the user that created\n        the observation, have `UPDATE_EVENT` permission, or have an ACL entry on\n        the event with `update` permission.\n      requestBody:\n        description: \u003e\n          The request body contains the name of the state to set on the\n          target observation.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ObservationStateCreate'\n        required: true\n      responses:\n        201:\n          description: Success - return the added state document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObservationState'\n  /api/events/{eventId}/observations/{observationId}/attachments:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/observationIdInPath'\n    post:\n      tags: [ Observation ]\n      operationId: addAttachment\n      description: \u003e\n        Add the given attachment to the specified observation.  The requesting\n        user must have `UPDATE_OBSERVATION_ALL` permission, or have\n        `UPDATE_OBSERVATION_EVENT` permission and an ACL entry on the event\n        with `read` permission.\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                attachment:\n                  type: string\n                  format: binary\n              required:\n                - attachment\n        required: true\n      responses:\n        200:\n          description: Success - return the attachment descriptor.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attachment'\n    get:\n      tags: [ Observation ]\n      operationId: getAttachments\n      description: \u003e\n        Get the attachment descriptors for the specified observation.  The\n        requesting user must have `READ_OBSERVATION_ALL` permission, or have\n        `READ_OBSERVATION_EVENT` permission and an ACL entry on the event with\n        `read` permission.\n      responses:\n        200:\n          description: Success - return an array of attachment descriptors.\n          content:\n            application/octet-stream:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Attachment'\n  /api/events/{eventId}/observations/{observationId}/attachments/{attachmentId}:\n    parameters:\n      - $ref: '#/components/parameters/eventIdInPath'\n      - $ref: '#/components/parameters/observationIdInPath'\n      - $ref: '#/components/parameters/attachmentIdInPath'\n    put:\n      tags: [ Observation ]\n      operationId: updateAttachment\n      description: \u003e\n        Update the specified attachment for the specified observation.  The\n        requesting user must have `UPDATE_OBSERVATION_ALL` permission, or have\n        `UPDATE_OBSERVATION_EVENT` permission and an ACL entry on the event\n        with `read` permission.\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                attachment:\n                  type: string\n                  format: binary\n              required: [ attachment ]\n        required: true\n      responses:\n        200:\n          description: Success - return the updated attachment descriptor.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Attachment'\n    get:\n      tags: [ Observation ]\n      operationId: getAttachment\n      description: \u003e\n        Get the specified attachment content.  This operation returns the\n        actual bytes of the attachment, not the attachment descriptor document.\n        The requesting user must have `READ_OBSERVATION_ALL` permission, or have\n        `READ_OBSERVATION_EVENT` permission and an ACL entry on the event with\n        `read` permission.\n      responses:\n        200:\n          description: attachment response\n          content:\n            '*/*':\n              schema:\n                type: string\n                format: binary\n    delete:\n      tags: [ Observation ]\n      operationId: deleteAttachment\n      description: \u003e\n        Delete the specified attachment from the specified observation.  The\n        requesting user must be the user that created the observation, have\n        `UPDATE_EVENT` permission, or have an ACL entry on the event with\n        `update` permission.\n      responses:\n        204:\n          description: Success - the attachment was deleted.\n  /api/layers:\n    get:\n      tags: [ Layer ]\n      operationId: getLayers\n      description: \u003e\n        Return an array of all layers.  The client must have 'READ_LAYER_ALL' permission.\n      parameters:\n        - in: query\n          name: type\n          schema:\n            type: string\n            enum: [ Imagery, Feature, GeoPackage ]\n      responses:\n        200:\n          description: Success - return an array of layer documents.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Layer'\n    post:\n      tags: [ Layer ]\n      operationId: createLayer\n      description: \u003e\n        Create a new layer. The requesting user must have `CREATE_LAYER`\n        permission.\n      requestBody:\n        description: The new layer document\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LayerCreate'\n        required: true\n      responses:\n        201:\n          description: Success - return the created event.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Layer'\n  /api/layers/count:\n    get:\n      tags: [ Layer ]\n      operationId: getLayerCount\n      description: Return the number of layers in the database.\n      responses:\n        200:\n          description: Success - return the layer count\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Count'\n  /api/layers/{layerId}:\n    parameters:\n      - { $ref: '#/components/parameters/layerIdInPath' }\n    get:\n      tags: [ Layer ]\n      description: \u003e\n        Return the layer with the ID specified in the path.  The requesting\n        user must have `READ_LAYER_ALL` permission.\n      operationId: getLayerById\n      responses:\n        200:\n          description: layer response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Layer'\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n    put:\n      tags: [ Layer ]\n      operationId: updateLayerById\n      description: \u003e\n        Update the layer with the ID specified in the path.  The requesting\n        user must have `UPDATE_LAYER` permission\n      requestBody:\n        description: layer update body\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LayerCreate'\n        required: true\n      responses:\n        200:\n          description: Success - return the update layer document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Layer'\n    delete:\n      tags: [ Layer ]\n      operationId: deleteLayer\n      description: \u003e\n        Delete the event with the ID specified in the path.  The requesting\n        user must have `DELETE_LAYER`.\n      responses:\n        204:\n          description: Success - layer deleted\n  /api/layers/{layerId}/features:\n    parameters:\n      - { $ref: '#/components/parameters/layerIdInPath' }\n    get:\n      tags: [ Layer ]\n      operationId: getFeaturesForLayer\n      description: \u003e\n        Return an array of features for specified layer.\n        The requesting client must have `READ_LAYER_ALL`.\n      responses:\n        200:\n          description: Success - return an arrary of features.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: 'geojson.yaml#/definitions/feature'\n  /api/events/{eventId}/layers/{layerId}/features:\n    parameters:\n      - { $ref: '#/components/parameters/eventIdInPath' }\n      - { $ref: '#/components/parameters/layerIdInPath' }\n    get:\n      tags: [ Layer ]\n      operationId: getFeaturesForEventAndLayer\n      description: \u003e\n        Return an array of features for specified layer for specified event.\n        The requesting client must have `READ_LAYER_ALL` permission or\n        `READ_LAYER_EVENT` and an ACL entry on the event with `read` permission.\n      responses:\n        200:\n          description: Success - return an arrary of features.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: 'geojson.yaml#/definitions/feature'\n  /api/events/{eventId}/locations:\n    parameters:\n      - { $ref: '#/components/parameters/eventIdInPath' }\n    get:\n      tags: [ Location ]\n      operationId: getLocations\n      description: \u003e\n        Return an array of locations for the specified event.\n        The requesting client must have `READ_LOCATION_ALL` permission or\n        `READ_LOCATION_EVENT` and an ACL entry on the event with `read` permission.\n      parameters:\n      - name: startDate\n        in: query\n        schema:\n          type: string\n          format: date-time\n      - name: endDate\n        in: query\n        schema:\n          type: string\n          format: date-time\n      - name: lastLocationId\n        in: query\n        description: locationId of last item in previous page (paging)\n        schema:\n          type: string\n      - name: limit\n        in: query\n        description: limit locations (paging)\n        schema:\n          type: number\n      responses:\n        200:\n          description: Success - array of user locations.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: 'geojson.yaml#/definitions/feature'\n    post:\n      tags: [ Location ]\n      operationId: createLocation\n      description: \u003e\n        Create a new location for user with token in the specified event.\n        The requesting client must have `CREATE_LOCATION` permission.\n      requestBody:\n        description: create location response\n        content:\n          application/json:\n            schema:\n              $ref: 'geojson.yaml#/definitions/feature'\n        required: true\n      responses:\n        200:\n          description: Success - the created location document.\n  /api/events/{eventId}/locations/users:\n    parameters:\n      - { $ref: '#/components/parameters/eventIdInPath' }\n    get:\n      tags: [ Location ]\n      operationId: getLocationsByUser\n      description: \u003e\n        Return an array of user locations for the specified event.\n        The requesting client must have `READ_LOCATION_ALL` permission or\n        `READ_LOCATION_EVENT` and an ACL entry on the event with `read` permission.\n      parameters:\n      - name: startDate\n        in: query\n        schema:\n          type: string\n          format: date-time\n      - name: endDate\n        in: query\n        schema:\n          type: string\n          format: date-time\n      - name: lastLocationId\n        in: query\n        description: locationId of last item in previous page (paging)\n        schema:\n          type: string\n      - name: limit\n        in: query\n        description: limit locations (paging)\n        schema:\n          type: number\n      responses:\n        200:\n          description: Success - array of user locations.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: 'geojson.yaml#/definitions/feature'\n  /api/roles:\n    get:\n      tags: [ Role ]\n      operationId: getRoles\n      description: \u003e\n        Return an array of all roles.  The client must have `READ_ROLE` permission.\n      responses:\n        200:\n          description: Success - an array of role documents.\n          content:\n            application/json:\n              schema:\n                type: array\n                items: { $ref: '#/components/schemas/Role' }\n    post:\n      tags: [ Role ]\n      operationId: createRole\n      description: \u003e\n        Create a new role. The client must have `CREATE_ROLE` permission.\n      responses:\n        200:\n          description: Success - the created role document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n  /api/roles/{roleId}:\n    parameters:\n      - { $ref: '#/components/parameters/roleIdInPath' }\n    get:\n      tags: [ Role ]\n      operationId: getRoleById\n      description: \u003e\n        Return the role document whose `id` equals the `roleId` path parameter.\n        The client must have `READ_ROLE` permission.\n      responses:\n        200:\n          description: Success - role document\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n    put:\n      tags: [ Role ]\n      operationId: updateRoleById\n      description: \u003e\n        Update the user document whose `id` equals the `roleId` path parameter.\n        The client must have `UPDATE_ROLE` permission.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema: { $ref: '#/components/schemas/RoleIn' }\n      responses:\n        200:\n          description: Success - The updated role document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n    delete:\n      tags: [ Device ]\n      description: \u003e\n        Delete a role document whose ID matches the path parameter for the\n        role ID.  The requesting client must have `DELETE_ROLE` permission.\n      operationId: deleteRoleById\n      responses:\n        200:\n          description: Success - role deleted\n  /api/settings:\n    get:\n      tags: [ Settings ]\n      operationId: getSettings\n      description: \u003e\n        Return an array of all the settings documents in the database.  The\n        requesting client must have `READ_SETTINGS` permission.\n      responses:\n        200:\n          description: Success - an array of settings documents\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Setting'\n  /api/settings/{type}:\n    get:\n      tags: [ Settings ]\n      operationId: getSettingByType\n      description: \u003e\n        Return a settings document by the referenced `type`.  The\n        requesting client must have `READ_SETTINGS` permission.\n      parameters:\n      - name: type\n        in: path\n        description: type name to update\n        required: true\n        schema:\n          type: string\n          enum:\n          - banner\n          - disclaimer\n      responses:\n        200:\n          description: Success - setting document\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Setting'\n    put:\n      tags: [ Settings ]\n      operationId: updateSettingByType\n      description: \u003e\n        Update the settings document whose `type` matches the type in the path.\n        The requesting user must have `UPDATE_SETTINGS` permission.\n      parameters:\n      - name: type\n        in: path\n        description: type name to update\n        required: true\n        schema:\n          type: string\n          enum:\n          - banner\n          - disclaimer\n      responses:\n        200:\n          description: Success - the update settings document\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Setting'\n  /api/{exportType}:\n    get:\n      deprecated: true\n      tags: [ Export ]\n      operationId: exportStream\n      description: \u003e\n        Export mage data (GeoJSON, KML, GeoPackage, CSV). The requesting user must have\n        `READ_OBSERVATION_ALL` permission or `READ_OBSERVATION_EVENT` and an ACL entry in the\n        event with `read`.\n      summary: Perform export during request.  May timeout, so please use /api/exports instead.\n      parameters:\n      - name: exportType\n        in: path\n        required: true\n        schema:\n          type: string\n          enum:\n          - geojson\n          - kml\n          - geopackage\n          - csv\n      - name: eventId\n        in: query\n        required: true\n        schema:\n          type: number\n      - name: startDate\n        in: query\n        schema:\n          type: string\n          format: date-time\n      - name: endDate\n        in: query\n        schema:\n          type: string\n          format: date-time\n      - name: observations\n        in: query\n        description: Boolean flag indicating whether or not to export observations\n        schema:\n          type: boolean\n          default: true\n      - name: locations\n        in: query\n        description: Boolean flag indicating whether or not to export user locations\n        schema:\n          type: boolean\n          default: true\n      - name: attachments\n        in: query\n        description: Boolean flag indicating whether or not to `exclude` observation attachments (if any).  Attachments are included by default.\n        schema:\n          type: boolean\n      - name: favorites\n        in: query\n        description: Boolean flag indicating whether or not to export only favorite observations \n        schema:\n          type: boolean\n      - name: important\n        in: query\n        description: Boolean flag indicating whether or not to export only observations flagged important\n        schema:\n          type: boolean\n      responses:\n        200:\n          description: export response\n  /api/exports/:\n    get:\n      tags: [ Export ]\n      operationId: getAllExports\n      description: \u003e\n        Get all exports regardless of user.\n      summary: Get a list of all exports.\n      responses:\n        200:\n          description: all exports.\n          content: \n            application/json:\n              schema:\n                type: array\n                items: { $ref: '#/components/schemas/Export' }\n    post:\n      tags: [ Export ]\n      operationId: export\n      description: \u003e\n        Export MAGE data (GeoJSON, KML, GeoPackage, CSV) in the background. The requesting user must have\n        `READ_OBSERVATION_ALL` permission or `READ_OBSERVATION_EVENT` or an ACL entry in the\n        event with `read`.\n      summary: Export MAGE data using a background task.\n      parameters:\n      - name: exportType\n        in: query\n        required: true\n        schema:\n          type: string\n          enum:\n          - geojson\n          - kml\n          - geopackage\n          - csv\n      - name: eventId\n        in: query\n        required: true\n        schema:\n          type: number\n      - name: startDate\n        in: query\n        schema:\n          type: string\n          format: date-time\n      - name: endDate\n        in: query\n        schema:\n          type: string\n          format: date-time\n      - name: observations\n        in: query\n        required: true\n        description: Boolean flag indicating whether or not to export observations\n        schema:\n          type: boolean\n      - name: locations\n        in: query\n        required: true\n        description: Boolean flag indicating whether or not to export user locations\n        schema:\n          type: boolean\n      - name: attachments\n        in: query\n        description: Boolean flag indicating whether or not to `exclude` observation attachments (if any).  Attachments are included by default.\n        schema:\n          type: boolean\n      - name: favorites\n        in: query\n        description: Boolean flag indicating whether or not to export only favorite observations \n        schema:\n          type: boolean\n      - name: important\n        in: query\n        description: Boolean flag indicating whether or not to export only observations flagged important\n        schema:\n          type: boolean\n      responses:\n        201:\n          description: export id\n          headers:\n            location:\n              description: The URI of the export download.\n              schema:\n                type: string\n          content: \n            text/plain:\n              schema:\n                type: string\n  /api/exports/myself:\n    get:\n      tags: [ Export ]\n      operationId: getExports\n      description: \u003e\n        Get only exports for current token holder.\n      summary: Get exports.\n      responses:\n        200:\n          description: exports\n          content: \n            application/json:\n              schema:\n                type: array\n                items: { $ref: '#/components/schemas/Export' }\n  /api/exports/{exportId}:\n    get:\n      tags: [ Export ]\n      operationId: getExportById\n      description: \u003e\n        Download an export by id.\n      summary: Download a completed export.\n      parameters:\n      - name: exportId\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: The exported data as a compressed file.\n          content: \n            application/zip:\n              schema:\n                type: object\ncomponents:\n  securitySchemes:\n    authenticationToken:\n      type: http\n      description: \u003e\n        Token generated after successful authentication.  The client will exchange \n        this token with an approved device for and API token.\n      scheme: bearer\n      bearerFormat: JWT\n    mageToken:\n      type: http\n      description: \u003e\n        MAGE generates an API token when a client authenticates\n        initially.  The client can use the token for subsequent requests until\n        it expires.\n      scheme: bearer\n  schemas:\n    CommaSeparatedTokens:\n      type: string\n      pattern: '\\w+(,\\w+)*'\n    ColorHex:\n      description: \u003e\n        This is a 3 or 4 byte hexadecimal string prefixed with '#' representing\n        an RGB or RGBA color value, e.g. '#ff4545',\n      type: string\n      pattern: '#([a-fA-F0-9]{2}){3,4}'\n    Count:\n      type: object\n      required: [ count ]\n      properties:\n        count:\n          type: integer\n    NormalizedRange:\n      type: number\n      format: float\n      minimum: 0.0\n      maximum: 1.0\n    SortKey:\n      description: \u003e\n        A `SortKey` is a string comprising the name of a document key,\n        optionally suffixed with a sort direction modifier of `+DESC` or `+ASC`\n        for descending or ascending, respectively.\n      type: string\n      pattern: ^\\w+(\\+(ASC|DESC))?\n    User:\n      description: \u003e\n        The `User` schema defines the structure of persisted user documents as\n        they exist in the database and as the server returns them in various\n        responses.\n      type: object\n      properties:\n        id:\n          type: string\n        username:\n          type: string\n        displayName:\n          type: string\n        status:\n          type: string\n        email:\n          type: string\n          format: email\n        createdAt:\n          type: string\n          format: date-time\n        lastUpdated:\n          type: string\n          format: date-time\n        active:\n          type: boolean\n        enabled:\n          type: boolean\n        avatarUrl:\n          type: string\n        iconUrl:\n          type: string\n        authentication:\n          $ref: '#/components/schemas/AuthStatus'\n        role:\n          $ref: '#/components/schemas/Role'\n        roleId:\n          $ref: '#/components/schemas/Role/properties/id'\n        icon:\n          $ref: '#/components/schemas/UserIcon'\n        phones:\n          type: array\n          items:\n            $ref: '#/components/schemas/Phone'\n        recentEventIds:\n          type: array\n          items:\n            $ref: '#/components/schemas/Event/properties/id'\n      oneOf:\n        - { type: object, required: [ role ], not: { type: object, required: [ roleId ] } }\n        - { type: object, required: [ roleId ], not: { type: object, required: [ role ] } }\n        - { type: object, not: { type: object, required: [ role, roleId ] } }\n    UserRef:\n      description: \u003e\n        `UserRef` is an object that references an existing user document with\n        the required `id` property.  MAGE ignores any properties other than\n        `id`.\n      type: object\n      allOf:\n        - { $ref: '#/components/schemas/User' }\n        - { type: object, required: [ id ] }\n    UserIn:\n      type: object\n      properties:\n        username: { $ref: '#/components/schemas/User/properties/username' }\n        displayName: { $ref: '#/components/schemas/User/properties/displayName' }\n        email: { $ref: '#/components/schemas/User/properties/email' }\n        phone:\n          type: string\n          format: phone\n        roleId: { $ref: '#/components/schemas/User/properties/roleId' }\n        iconMetadata:\n          type: object\n          properties:\n            type: { $ref: '#/components/schemas/UserIcon/properties/type' }\n            color: { $ref: '#/components/schemas/UserIcon/properties/color' }\n            text: { $ref: '#/components/schemas/UserIcon/properties/text' }\n        icon:\n          description: \u003e\n            This key is valid only when encoded as `multipart/form-data`.\n            This is a binary image file attachment.\n          type: string\n          format: binary\n        avatar:\n          description: \u003e\n            This key is valid only when encoded as `multipart/form-data`.\n            This is a binary image file attachment.\n          type: string\n          format: binary\n      allOf:\n        - { $ref: '#/components/schemas/UserPasswordPair' }\n    UserCreate:\n      allOf:\n        - { $ref: '#/components/schemas/UserIn' }\n        - { type: object, required: [ username, displayName, password, passwordconfirm ] }\n    UserUpdateSelf:\n      allOf:\n        - { $ref: '#/components/schemas/UserIn' }\n        - type: object\n          not:\n            type: object\n            required: [ password, passwordconfirm, icon, iconMetadata ]\n    UserIcon:\n      description: \u003e\n        A user icon is the small image that appears on a map to show the user's\n        location.\n      type: object\n      properties:\n        type:\n          description: The origin of the icon\n          type: string\n          enum:\n            - create\n            - upload\n            - none\n        color:\n          description: Color is only applicable for `create` type icons.\n          $ref: '#/components/schemas/ColorHex'\n        text:\n          description: \u003e\n            Two-letter text label that appears on the map icon; only applies to\n            `create` type icons\n          type: string\n        contentType:\n          description: The MIME type of the icon image\n          type: string\n        size:\n          description: The image size in bytes\n          type: integer\n    UserPasswordPair:\n      type: object\n      properties:\n        password:\n          type: string\n        passwordconfirm:\n          type: string\n      oneOf:\n        - { type: object, required: [ password, passwordconfirm ] }\n        - { type: object, not: { type: object, required: [ password, passwordconfirm ] } }\n    Authentication:\n      type: object\n      required:\n        - user\n        - token\n      properties:\n        user:\n          $ref: '#/components/schemas/UserRef'\n        token:\n          type: string\n    AuthStatus:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n        security:\n          type: object\n          properties:\n            locked:\n              type: boolean\n            lockedUntil:\n              type: string\n              format: date-time\n            invalidLoginAttempts:\n              type: number\n            numberOfTimesLocked:\n              type: number\n    ACL:\n      description: \u003e\n        The ACL (Access Control List) is a mapping of user IDs to the roles and\n        permissions users have to access the parent resource of the ACL.\n      type: object\n      additionalProperties:\n        description: \u003e\n          The keys of the ACL object are user ID strings.  The values specify\n          the role and permissions that the user matching the associated key\n          has to access a resource.\n        type: object\n        properties:\n          role: { $ref: '#/components/schemas/ACLRole' }\n          permissions:\n            description: \u003e\n              The permissions of an ACL entry are currently a static mapping\n              from the role.  The ACL entry includes the permissions associated\n              with the role to be more explicit about what the role means and\n              how the user of the ACL entry can access the resource.\n            type: array\n            items: { $ref: '#/components/schemas/ACLPermission' }\n    ACLRole:\n      type: string\n      enum:\n        - OWNER\n        - MANAGER\n        - GUEST\n    ACLPermission:\n      type: string\n      enum:\n        - read\n        - update\n        - delete\n    Device:\n      required:\n        - id\n        - uid\n        - name\n        - description\n      type: object\n      properties:\n        id:\n          type: string\n        uid:\n          type: string\n          description: \u003e\n            The device UID is an identifier string assigned at the application\n            level.  This is usually a UUID, but can be any string the creator\n            of the device chooses.\n        name:\n          type: string\n        description:\n          type: string\n        registered:\n          type: boolean\n        userAgent:\n          type: string\n        appVersion:\n          type: string\n        userId:\n          $ref: '#/components/schemas/User/properties/id'\n        user:\n          $ref: '#/components/schemas/User'\n      oneOf:\n        - { type: object, required: [ userId ], not: { type: object, required: [ user ] } }\n        - { type: object, required: [ user ], not: { type: object, required: [ userId ] } }\n    DeviceIn:\n      type: object\n      required: [ uid ]\n      properties:\n        uid:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        appVersion:\n          type: string\n        userId:\n          $ref: '#/components/schemas/User/properties/id'\n    Team:\n      description: \u003e\n        A team is simply a grouping of users that commonly operate together.\n        Teams facilitate adding groups of users to events.\n      type: object\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n        description:\n          type: string\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserRef'\n        teamEventId:\n          $ref: '#/components/schemas/Event/properties/id'\n          description: \u003e\n            MAGE adds this property to indicate that a team is the implicitly\n            created team paired with an event for grouping the event's users\n            on an individual basis.  This property references the ID of the\n            event document to which the team belongs.  To add an individual\n            user to an event, add the user to the team with the `teamEventId`\n            property that references the target event.\n        acl:\n          $ref: '#/components/schemas/ACL'\n    TeamIn:\n      type: object\n      properties:\n        name: { $ref: '#/components/schemas/Team/properties/name' }\n        description: { $ref: '#/components/schemas/Team/properties/description' }\n        users:\n          type: array\n          items: { $ref: '#/components/schemas/UserRef' }\n    TeamCreate:\n      allOf:\n        - $ref: '#/components/schemas/TeamIn'\n        - { type: object, required: [ name ] }\n    TeamRef:\n      allOf:\n        - $ref: '#/components/schemas/Team'\n        - { type: object, required: [ id ] }\n    Event:\n      required:\n        - id\n        - name\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        description:\n          type: string\n        complete:\n          description: \u003e\n            When `true`, the `complete` flag indicates the event is no longer\n            active.  One can reactivate a complete event at any time.\n          type: boolean\n        style:\n          description: \u003e\n            The event's geometry style is the default style applied to each\n            form of the event.  Individual forms can override the default\n            style.\n          $ref: '#/components/schemas/GeometryStyle'\n        forms:\n          type: array\n          items:\n            $ref: '#/components/schemas/Form'\n        teams:\n          type: array\n          items:\n            $ref: '#/components/schemas/Team'\n        layers:\n          type: array\n          items:\n            $ref: '#/components/schemas/Layer'\n        acl:\n          $ref: '#/components/schemas/ACL'\n    EventCreate:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/Event/properties/name'\n        description:\n          $ref: '#/components/schemas/Event/properties/description'\n    EventUpdate:\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/Event/properties/name'\n        description:\n          $ref: '#/components/schemas/Event/properties/description'\n        complete:\n          $ref: '#/components/schemas/Event/properties/complete'\n        forms:\n          $ref: '#/components/schemas/Event/properties/forms'\n    Form:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        color:\n          $ref: '#/components/schemas/ColorHex'\n          description: \u003e\n            The form's color is a visual discriminator that displays in the\n            observation form selector when an event has multiple forms.\n        primaryField:\n          type: string\n          description: \u003e\n            The primary field must be a single-select-type field whose choices\n            determine the map symbology used to represent the observation on a\n            map.\n        variantField:\n          type: string\n          description: \u003e\n            The variant field must be another single-select-type field whose\n            values can further refine the map symbology associated with the\n            primary field's value of in an observation.\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/Field'\n          minItems: 1\n        userFields:\n          type: array\n          items:\n            $ref: '#/components/schemas/Field/properties/name'\n          description: \u003e\n            A list of field names that will be drop-downs whose choices are\n            dynamically populated with the names of users in the event.\n    FormCreate:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/Form'\n        - type: object\n          required: [ name, color, fields ]\n    FormImport:\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/Form/properties/name'\n        color:\n          $ref: '#/components/schemas/Form/properties/color'\n        form:\n          type: string\n          format: binary\n          description: |\n            The form is a zip file the user uploads.  THe layout of the zip\n            file is the same as described in the `exportForm` operation.\n      required: [ name, color, form ]\n    GeometryStyle:\n      type: object\n      properties:\n        strokeWidth:\n          type: integer\n        strokeOpacity:\n          $ref: '#/components/schemas/NormalizedRange'\n        stroke:\n          type: string\n    Field:\n      type: object\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n        title:\n          type: string\n        type:\n          type: string\n        value:\n          type: string\n        required:\n          type: boolean\n        choices:\n          type: array\n          items:\n            $ref: '#/components/schemas/Choice'\n    Choice:\n      type: object\n      properties:\n        id:\n          type: number\n        title:\n          type: string\n        value:\n          type: string\n    FormIcon:\n      description: \u003e\n        `FormIcon` documents are the meta-data about icon images that MAGE\n        clients use to mark the location on the map display of observations\n        with the associated form.\n      type: object\n      properties:\n        eventId:\n          $ref: '#/components/schemas/Event/properties/id'\n        formId:\n          $ref: '#/components/schemas/Form/properties/id'\n        primary:\n          type: string\n          nullable: true\n          description: \u003e\n            The value of the primary form field associated with the icon\n        variant:\n          type: string\n          nullable: true\n          description: \u003e\n            The value of the variant form field associated with the icon\n        relativePath:\n          type: string\n          pattern: ^/\\\\d+/\\\\d+(/[^/]+){0,2}$\n          description: \u003e\n            The relative path of the icon image URL, which looks like\n            `\u003cevent_id\u003e/\u003cform_id\u003e[/\u003cprimary\u003e[/variant]]`\n    FormIconEmbedded:\n      allOf:\n        - $ref: '#/components/schemas/FormIcon'\n        - type: object\n          properties:\n            icon:\n              type: string\n              pattern: ^data:image/[^;]+;base64,[A-Za-z0-9+/]+$\n              description: \u003e\n                The base-64-encoded image bytes of the icon, formatted as a\n                data URL suitable for use as the value of the HTML `img` tag's\n                `src` attribute\n    FormIconUpload:\n      type: object\n      properties:\n        icon:\n          type: string\n          format: binary\n    Layer:\n      title: Layer\n      type: object\n      properties:\n        id:\n          type: number\n          description: The unique layer ID\n        name:\n          type: string\n        description:\n          type: string\n        type:\n          type: string\n          enum: [ Feature, Imagery, GeoPackage ]\n        url:\n          type: string\n        base:\n          type: boolean\n        format:\n          type: string\n          enum: [ WMS, XYZ, TMS ]\n    WMSLayer:\n      title: WMSLayer\n      type: object\n      properties:\n        layers:\n          type: string\n          description: Comma seperated list of WMS layer names\n        styles:\n          type: string\n          description: Comma seperated list of WMS style names\n        format:\n          type: string\n          description: WMS map tile format.\n        version:\n          type: string\n          description: WMS service version.\n    LayerRef:\n      allOf:\n        - $ref: '#/components/schemas/Layer'\n        - type: object\n          required: [ id ]\n    ObservationIn:\n      description: \u003e\n        This schema defines the observation properties a client sends to save\n        a new or updated observation.\n      allOf:\n        - $ref: 'geojson.yaml#/definitions/feature'\n        - type: object\n          properties:\n            properties:\n              $ref: '#/components/schemas/ObservationFeatureProperties'\n        - type: object\n          required: [ type, geometry, properties ]\n    Observation:\n      title: Observation\n      description: \u003e\n        The `Observation` is the operative concept of MAGE's geospatial data\n        collection functionality.  Observation documents are the geo-tagged\n        form and media records that MAGE users submit to the MAGE server.\n        Observation documents are extensions of GeoJSON feature documents, so\n        all observations have a `type` property whose value is `Feature`, as\n        well as a `geometry` property that holds the geospatial geometry of the\n        observation, such as point or polygon coordinates.  The values of the\n        observation's form fields reside under the GeoJSON `properties` key.\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique observation ID\n        createdAt:\n          type: string\n          format: date-time\n        lastModified:\n          type: string\n          format: date-time\n        userId:\n          $ref: '#/components/schemas/User/properties/id'\n        deviceId:\n          $ref: '#/components/schemas/Device/properties/id'\n        eventId:\n          $ref: '#/components/schemas/Event/properties/id'\n        state:\n          $ref: '#/components/schemas/ObservationState'\n        url:\n          type: string\n          format: uri\n          description: \u003e\n            This is the absolute URL of the observation where the client can\n            fetch and update the observation document.\n        favoriteUserIds:\n          type: array\n          items:\n            $ref: '#/components/schemas/User/properties/id'\n        attachements:\n          type: array\n          items:\n            $ref: '#/components/schemas/Attachment'\n      allOf:\n        - $ref: '#/components/schemas/ObservationIn'\n      example: {\n        \"createdAt\": \"2019-09-25T19:50:05.065Z\",\n        \"deviceId\": \"5d697f88951c51a926e9dba4\",\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            -0.08910298347473145,\n            51.527068718503244\n          ],\n        },\n        \"lastModified\": \"2019-10-01T04:24:45.466Z\",\n        \"properties\": {\n          \"timestamp\": \"2019-09-25T19:48:55.859Z\",\n          \"forms\": [\n            {\n              \"formId\": 3,\n              \"field1\": [\n                \"Umbarela\"\n              ],\n            }\n          ],\n        },\n        \"type\": \"Feature\",\n        \"userId\": \"5d697f88b8ed5f29bef7b10c\",\n        \"favoriteUserIds\": [\n          \"5d697f88b8ed5f29bef7b10c\"\n        ],\n        \"important\": {\n          \"description\": \"Come back later\",\n          \"timestamp\": \"2019-10-01T04:24:45.466Z\",\n          \"userId\": \"5d697f88b8ed5f29bef7b10c\"\n        },\n        \"attachments\": [\n          {\n            \"contentType\": \"image/jpeg\",\n            \"size\": 24875,\n            \"name\": \"c1816efcab6e00c39623ddd8262b852e.jpg\",\n            \"relativePath\": \"observations2/2019/9/25/c1816efcab6e00c39623ddd8262b852e.jpg\",\n            \"lastModified\": \"2019-09-25T19:50:22.383Z\",\n            \"oriented\": false,\n            \"id\": \"5d8bc4fe038559417fffbb55\",\n            \"url\": \"http://localhost:4242/api/events/2/observations/5d8bc4ed038559417fffbb53/attachments/5d8bc4fe038559417fffbb55\"\n          }\n        ],\n        \"id\": \"5d8bc4ed038559417fffbb53\",\n        \"eventId\": 2,\n        \"url\": \"http://localhost:4242/api/events/2/observations/5d8bc4ed038559417fffbb53\",\n        \"state\": {\n          \"userId\": \"5d697f88b8ed5f29bef7b10c\",\n          \"name\": \"active\",\n          \"id\": \"5d8bc4ed038559417fffbb54\",\n          \"url\": \"http://localhost:4242/api/events/2/observations/5d8bc4ed038559417fffbb53/states/5d8bc4ed038559417fffbb54\"\n        }\n      }\n    ObservationFeatureProperties:\n      description: \u003e\n        This schema defines the specific keys that MAGE recognizes under the\n        GeoJSON feature's `properties` entry.\n      type: object\n      properties:\n        timestamp:\n          type: string\n          format: date-time\n        forms:\n          type: array\n          items:\n            type: object\n            properties:\n              formId:\n                $ref: '#/components/schemas/Form/properties/id'\n            additionalProperties: true\n      required: [ timestamp ]\n    ObservationImportant:\n      type: object\n      properties:\n        userId:\n          $ref: '#/components/schemas/User/properties/id'\n        timestamp:\n          type: string\n          format: date-time\n        description:\n          type: string\n          description: The reason for flagging an observation important\n    ObservationImportantCreate:\n      allOf:\n        - $ref: '#/components/schemas/ObservationImportant'\n        - type: object\n          required: [ description ]\n    ObservationState:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          $ref: '#/components/schemas/ObservationStateName'\n        userId:\n          $ref: '#/components/schemas/User/properties/id'\n          description: \u003e\n            The ID of the user that set this state on the parent observation.\n    ObservationStateCreate:\n      allOf:\n        - $ref: '#/components/schemas/ObservationState'\n        - type: object\n          required: [ name ]\n    ObservationStateName:\n      type: string\n      enum: [ active, archive ]\n      description: \u003e\n        Setting an observation's state to `archive` effectively deletes the\n        observation from client views, but preserves the observation data.\n    Attachment:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        relativePath:\n          type: string\n        contentType:\n          type: string\n        url:\n          type: string\n          format: uri\n        oriented:\n          type: boolean\n    LocalCredentials:\n      required:\n        - password\n        - username\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n    Thumbnail:\n      type: object\n      properties:\n        name:\n          type: string\n        contentType:\n          type: string\n        height:\n          type: number\n        width:\n          type: number\n        size:\n          type: number\n        minDimension:\n          type: number\n    Phone:\n      type: object\n      properties:\n        type:\n          description: \u003e\n            The type of phone number currently defaults to `Main` and is\n            static.\n          type: string\n        number:\n          type: string\n    LoginResponse:\n      type: object\n      properties:\n        token:\n          type: string\n        expirationDate:\n          type: string\n        user:\n          $ref: '#/components/schemas/User'\n        role:\n          $ref: '#/components/schemas/Role'\n    Login:\n      type: object\n      properties:\n        id:\n          type: string\n        timestamp:\n          type: string\n        device:\n          $ref: '#/components/schemas/Device'\n        deviceId:\n          $ref: '#/components/schemas/Device/properties/id'\n        user:\n          $ref: '#/components/schemas/User'\n        userId:\n          $ref: '#/components/schemas/User/properties/id'\n      required:\n        - id\n        - timestamp\n      allOf:\n        - oneOf:\n          - { type: object, required: [ deviceId ], not: { type: object, required: [ device ] } }\n          - { type: object, required: [ device ], not: { type: object, required: [ deviceId ] } }\n        - oneOf:\n          - { type: object, required: [ userId ], not: { type: object, required: [ user ] } }\n          - { type: object, required: [ user ], not: { type: object, required: [ userId ] } }\n    Role:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        permissions:\n          type: array\n          items:\n            type: string\n      required:\n        - id\n        - name\n        - description\n        - permissions\n    RoleIn:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        permissions:\n          type: array\n          items:\n            type: string\n    LayerCreate:\n      required:\n        - name\n        - type\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/Layer/properties/name'\n        description:\n          $ref: '#/components/schemas/Layer/properties/description'\n        type:\n          $ref: '#/components/schemas/Layer/properties/type'\n        url:\n          $ref: '#/components/schemas/Layer/properties/url'\n        base:\n          $ref: '#/components/schemas/Layer/properties/base'\n        format:\n          $ref: '#/components/schemas/Layer/properties/format'\n        wms:\n          $ref: '#/components/schemas/WMSLayer'\n        geopackage:\n          type: string\n          format: binary\n          description: |\n            The geopackage is a GeoPackage file the user uploads.  If uploading this file the `type` must\n            be GeoPackage\n    Setting:\n      required:\n        - type\n      type: object\n      properties:\n        type:\n          type: string\n        settings:\n          type: object\n    Export:\n      required:\n        - type\n      type: object\n      properties:\n        _id:\n          type: string\n        userId:\n          $ref: '#/components/schemas/User/properties/id'\n        physicalPath:\n          type: string\n        filename:\n          type: string\n        exportType:\n          type: string\n          enum: [ geojson, kml, geopackage, csv ]\n        location:\n          type: string\n        status:\n          type: string\n        options:\n          type: string\n    AuthenticationConfiguration:\n      required:\n        - name\n        - type\n      type: object\n      properties:\n        name:\n          type: string\n        type:\n          type: string\n        title: \n          type: string\n        textColor:\n          type: string\n        buttonColor:\n          type: string\n        icon:\n          type: string\n          format: byte\n        enabled:\n          type: boolean\n        settings:\n          type: object\n\n  parameters:\n    userIdInPath:\n      in: path\n      name: userId\n      description: The ID of the target user document\n      required: true\n      example: 5d0b2bfeeec24262f1a5fdf3\n      schema: { $ref: '#/components/schemas/User/properties/id' }\n    eventIdInPath:\n      in: path\n      name: eventId\n      description: The ID of the target event document\n      required: true\n      example: 1234\n      schema: { $ref: '#/components/schemas/Event/properties/id' }\n    formIdInPath:\n      in: path\n      name: formId\n      description: The ID of a form within an event\n      required: true\n      schema: { $ref: '#/components/schemas/Form/properties/id' }\n    primaryFieldValueInPath:\n      in: path\n      name: primary\n      description: The value of the primary form field\n      required: true\n      schema:\n        type: string\n    variantFieldValueInPath:\n      in: path\n      name: variant\n      description: The value of the variant form field\n      required: true\n      schema:\n        type: string\n    layerIdInPath:\n      in: path\n      name: layerId\n      description: The ID of the target layer document\n      required: true\n      schema: { $ref: '#/components/schemas/Layer/properties/id' }\n    deviceIdInPath:\n      in: path\n      name: deviceId\n      description: The ID of the target device document\n      required: true\n      schema: { $ref: '#/components/schemas/Device/properties/id' }\n    roleIdInPath:\n      in: path\n      name: roleId\n      description: The ID of the target role document\n      required: true\n      schema: { $ref: '#/components/schemas/Device/properties/id' }\n    teamIdInPath:\n      in: path\n      name: teamId\n      description: The ID of the target team document\n      required: true\n      schema: { $ref: '#/components/schemas/Team/properties/id' }\n    observationIdInPath:\n      in: path\n      name: observationId\n      description: The ID of the target observation document\n      required: true\n      schema: { $ref: '#/components/schemas/Observation/properties/id' }\n    attachmentIdInPath:\n      in: path\n      name: attachmentId\n      description: The ID of the target attachment document\n      required: true\n      schema: { $ref: '#/components/schemas/Attachment/properties/id' }\n    observationQuery.fields:\n      in: query\n      name: fields\n      description: \u003e\n        The form fields to project in the result observation documents (JSON)\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n    observationQuery.startDate:\n      in: query\n      name: startDate\n      schema:\n        type: string\n        format: date-time\n      description: \u003e\n        The low end of the range for the observations' `lastModified`\n        property\n    observationQuery.endDate:\n      in: query\n      name: endDate\n      schema:\n        type: string\n        format: date-time\n      description: \u003e\n        The high end of the range for the observations' `lastModified`\n        property\n    observationQuery.observationStartDate:\n      in: query\n      name: observationStartDate\n      schema:\n        type: string\n        format: date-time\n      description: \u003e\n        The low end of the range for the observations' `timestamp`\n        property\n    observationQuery.observationEndDate:\n      in: query\n      name: observationEndDate\n      schema:\n        type: string\n        format: date-time\n      description: \u003e\n        The low end of the range for the observations' `lastModified`\n        property\n    observationQuery.bbox:\n      in: query\n      name: bbox\n      description: \u003e\n        Bounding box array as a JSON string, e.g.\n        `[xMin, yMin, xMax, yMax]`\n      explode: false\n      schema:\n        $ref: 'geojson.yaml#/definitions/boundingBox'\n    observationQuery.geometry:\n      in: query\n      name: geometry\n      description: \u003e\n        A URL-encoded, stringified JSON object that is a GeoJSON geometry\n        as defined in geojson.yaml#/definitions/geometryObject\n      schema:\n        type: string\n        format: json\n    observationQuery.states:\n      in: query\n      name: states\n      explode: false\n      schema:\n        type: array\n        items:\n          $ref: '#/components/schemas/ObservationStateName'\n    observationQuery.sort:\n      in: query\n      name: sort\n      description: \u003e\n        The `sort` query parameter is a comma-separated list of sort keys.\n        Currently, this operation only supports sorting on the\n        `lastModified` key.\n      explode: false\n      schema:\n        type: array\n        items:\n          $ref: '#/components/schemas/SortKey'\n    authenticationConfigurationIdInPath:\n      in: path\n      name: id\n      description: The id of the authentication configuration\n      required: true\n      schema:\n        type: string\n    authenticationConfigurationIncludeDisabled:\n      in: query\n      name: includeDisabled\n      description: Flag to return disabled configs\n      required: false\n      schema:\n        type: boolean\n\n  responses:\n    FormIconInfo:\n      description: Return the meta-data about a form icon.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/FormIcon'\n    FormIconContent:\n      description: \u003e\n        Return the form icon as a base-64-encoded string value within the icon\n        meta-data document, or as a binary image.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/FormIconEmbedded'\n        image/*:\n          schema:\n            type: string\n            format: binary\n\n  requestBodies:\n    DeviceIn:\n      description: \u003e\n        A `DeviceIn` request body specifies the keys and values to save to a\n        `Device` document in the database.\n      required: true\n      content:\n        application/json:\n          schema: { $ref: '#/components/schemas/DeviceIn' }\n        application/x-www-form-urlencoded:\n          schema: { $ref: '#/components/schemas/DeviceIn' }\n    FormIconUpload:\n      required: true\n      content:\n        multipart/form-data:\n          schema:\n            $ref: '#/components/schemas/FormIconUpload'\n          encoding:\n            icon:\n              contentType: image/*\n    ACLRoleUpdate:\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              role:\n                $ref: '#/components/schemas/ACLRole'\n            required: [ role ]\n\n\n"
		}
	},
	"Error": "parse: /api/events/{eventId}/teams/{teamId}: parameters: parse parameter \"\": resolve \"#/components/parameters/eventIdInPath\" reference: schema: parse schema: reference \"#/components/schemas/Event/properties/id\": resolve reference \"#/components/schemas/Event/properties/id\": schema not found"
}