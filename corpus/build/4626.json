{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/windingtree/glider-ota"
		},
		"file": {
			"name": "backend-api-schema.yaml",
			"path": "api/_lib/schemas/backend-api-schema.yaml",
			"content": "openapi: 3.0.1\n\ninfo:\n  title: Glider OTA backend\n  description: Glider OTA backend API documentation\n  version: 1.0.0\n\nservers:\n  - url: https://staging.glider.travel\n    description: Staging environment\n  - url: https://glider.travel\n    description: Production environment\n\npaths:\n  /api/searchOffers:\n    post:\n      tags:\n        - offers\n      summary: Search for offers matching search criterias\n      operationId: offersWithSearchCriteria\n      requestBody:\n        description: Search for offers matching input criteria\n        content:\n          application/json:\n            schema:\n              $ref: \"wt-aggregator.yaml#/components/schemas/SearchCriteria\"\n        required: true\n      responses:\n        200:\n          description: Offers Retrieved\n          content:\n            application/json:\n              schema:\n                type: object\n        400:\n          description: Error occured\n          content:\n            application/json:\n              schema:\n                type: object\n        500:\n          description: Internal Server error\n          content:\n            application/json:\n              schema:\n                type: object\n  /api/lookup/airportSearch:\n    get:\n      summary: Airports lookup\n      operationId: airportSearch\n      parameters:\n        - name: searchquery\n          in: path\n          description: Airport/city name (or partial)\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Matching airports\n          content:\n            application/json:\n              schema:\n                type: array\n  /api/cart/offer:\n    post:\n      summary: Store offer in shopping cart\n      operationId: addOfferToCart\n      requestBody:\n        description: Store selected offer in shopping cart\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CartItemOffer\"\n        required: true\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n  /api/cart/passengers:\n    post:\n      summary: Store passenger details\n      operationId: addPaxDetailsToCart\n      requestBody:\n        description: Store passenger details to be used to issue the ticket\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CartItemPassengers\"\n        required: true\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n  /api/cart/userPreferences:\n    post:\n      summary: Store user preferences\n      operationId: addUserPreferences\n      requestBody:\n        description: Store user preferences\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CartUserPreferences\"\n        required: true\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n  /api/order/checkout:\n    post:\n      summary: Checkout - start payment process\n      operationId: checkout\n      requestBody:\n        description: Initiate payment process (it will create payment intent)\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CheckoutParameters\"\n        required: true\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n  /api/order/crypto:\n    post:\n      summary: Create an order for the offer paid with crypto\n      operationId: crypto\n      requestBody:\n        description: Initiate creation of the order\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CryptoPaymentParameters\"\n        required: true\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\ncomponents:\n  schemas:\n    SearchCriteria:\n      $ref: \"wt-aggregator.yaml#/components/schemas/SearchCriteria\"\n\n    CartItemOffer:\n      description: An offer to be stored in cart\n      type: object\n      required: [\"offer\"]\n      properties:\n        offer:\n          type: object\n          description: offer\n          required: [\"offerId\"]\n          properties:\n            offerId:\n              $ref: \"#/components/schemas/CommaSepUUIDs\"\n\n    CommaSepUUIDs:\n      description: Comma separated list of offerIDs\n      type: string\n      minLength: 5\n      example: \"11111111-2222-3333-4444-000000000001,11111111-2222-3333-4444-000000000002\"\n    CartItemPassengers:\n      description: Passengers details to be stored for late ticket issuance\n      required: [\"passengers\"]\n      properties:\n        passengers:\n          type: array\n          description: List of passenger details\n          minItems: 1\n          items:\n            $ref: \"wt-aggregator.yaml#/components/schemas/Passenger\"\n    CartUserPreferences:\n      description: User preferences for the shopping\n      properties:\n        currency:\n          description: Payment currency\n          type: string\n          pattern: \"^[A-Z]{3}$\"\n        paymentMethod:\n          description: Payment method\n          type: string\n          enum: [card, crypto, lif]\n    CheckoutParameters:\n      description: Payment details\n      required: [\"type\",\"confirmedOfferId\"]\n      properties:\n        type:\n          type: string\n          description: Method of payment\n          enum:\n            - card\n            - crypto\n        confirmedOfferId:\n          $ref: \"#/components/schemas/CommaSepUUIDs\"\n    CryptoPaymentParameters:\n      description: Crypto Payment details\n      required: [\"confirmedOfferId\",\"transactionHash\"]\n      properties:\n        confirmedOfferId:\n          $ref: \"#/components/schemas/CommaSepUUIDs\"\n        transactionHash:\n          type: string\n          description: Hash of the transaction\n          example: \"0x769b0b56f749b71d2e42acf570c67ec0d770c32336d1d542b0c74caca8c5c619\"\n\n#    Airports:\n#      description: List of airports\n#      type: array\n#      items:\n#        $ref: \"#/components/schemas/Airport\"\n#    Airport:\n#      description: Airports\n#      type: array\n#      items:\n#        $ref: \"#/components/schemas/Airport\"\n#\n"
		}
	},
	"Error": "parse: paths: /api/searchOffers: post: offersWithSearchCriteria: requestBody: content: application/json: parse schema: parse schema: reference \"wt-aggregator.yaml#/components/schemas/SearchCriteria\": resolve reference \"wt-aggregator.yaml#/components/schemas/SearchCriteria\": invalid schema reference \"wt-aggregator.yaml#/components/schemas/SearchCriteria\""
}