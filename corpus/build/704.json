{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/4paradigm/openaios-platform"
		},
		"file": {
			"name": "main.yaml",
			"path": "doc/api/main.yaml",
			"content": "openapi: 3.0.3\ninfo:\n  title: Pineapple\n  description: Pineapple\n  version: 0.0.1\n\nservers:\n  - url: \"http://127.0.0.1:1234/api\"\n\nsecurity:\n  - OpenID:\n      - openid\n      - email\n      - profile\n  - ApiKeyAuth: []\n\ntags:\n  - name: images\n  - name: users\n  - name: environments\n  - name: releases\n  - name: applications\n  - name: appstore\n  - name: storage\n  - name: computing_resource\n  - name: logs\n  - name: competition\n  - name: finished\n\n\npaths:\n  /version:\n    get:\n      tags:\n        - finished\n      summary: image version\n      operationId: PineappleVersion\n      security: []\n      responses:\n        200:\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: string\n\n\n  /user/info:\n    get:\n      tags:\n        - users\n        - finished\n      summary: Get user info\n      operationId: getUser\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserInfo\"\n        404:\n          description: User not found\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /user/tasks:\n    get:\n      tags:\n        - users\n        - finished\n      summary: get user task info\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserTasksInfo\"\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /user/init:\n    post:\n      tags:\n        - users\n        - finished\n      summary: init user\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /computing_resource/specs:\n    get:\n      tags:\n        - computing_resource\n        - finished\n      summary: Get computing unit specifications\n      operationId: GetComputingUnitSpecs\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ComputeUnitSpec\"\n\n  /environments:\n    parameters:\n      - in: query\n        name: offset\n        schema:\n          type: integer\n        description: The number of items to skip before starting to collect the result set\n      - in: query\n        name: limit\n        schema:\n          type: integer\n        description: The numbers of items to return\n    get:\n      tags:\n        - environments\n        - finished\n      summary: Gets environment list\n      operationId: getEnvironmentList\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EnvironmentRuntimeInfos\"\n\n  /environments/{name}:\n    parameters:\n      - in: path\n        name: name\n        schema:\n          $ref: \"#/components/schemas/EnvironmentName\"\n        required: true\n        description: \"Name of environment\"\n\n    get:\n      tags:\n        - environments\n        - finished\n      summary: Gets environment\n      operationId: getEnvironment\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EnvironmentRuntimeInfo\"\n        400:\n          description: Error\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n    post:\n      tags:\n        - environments\n        - finished\n      summary: Create an environment\n      operationId: createEnvironment\n      requestBody:\n        description: Information about creating an environment\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EnvironmentConfig\"\n      responses:\n        200:\n          description: OK\n        400:\n          description: Error\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n    delete:\n      tags:\n        - environments\n        - finished\n      summary: Delete an environment\n      operationId: deleteEnvironment\n      responses:\n        200:\n          description: OK\n        400:\n          description: Error\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /applications:\n    get:\n      parameters:\n        - in: query\n          name: offset\n          schema:\n            type: integer\n          description: The number of items to skip before starting to collect the result set\n        - in: query\n          name: limit\n          schema:\n            type: integer\n          description: The numbers of items to return\n      tags:\n        - applications\n        - finished\n      summary: Get application list\n      operationId: getApplicationList\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApplicationList\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /applications/{name}:\n    parameters:\n      - in: path\n        name: name\n        schema:\n          type: string\n        required: true\n        description: application name\n    post:\n      tags:\n        - applications\n        - finished\n      summary: Create an app\n      operationId: createApplication\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ApplicationConfig\"\n      responses:\n        200:\n          description: OK\n        400:\n          description: Error\n        500:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      tags:\n        - applications\n        - finished\n      summary: Delete an application instance\n      operationId: deleteApplication\n      responses:\n        200:\n          description: OK\n        400:\n          description: Error\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /applications/{name}/metadata:\n    parameters:\n      - in: path\n        name: name\n        schema:\n          type: string\n        required: true\n        description: application name\n    get:\n      tags:\n        - applications\n        - finished\n      summary: Gets a application metadata\n      operationId: getApplicationMetadata\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApplicationInstanceMetadata\"\n        400:\n          description: Error\n        500:\n          $ref: \"#/components/responses/ServerError\"\n  /applications/{name}/pods:\n    parameters:\n      - in: path\n        name: name\n        schema:\n          type: string\n        required: true\n        description: application name\n    get:\n      tags:\n        - applications\n        - finished\n      summary: Gets a application pods\n      operationId: getApplicationPods\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApplicationInstancePodList\"\n        400:\n          description: Error\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /applications/{name}/services:\n    parameters:\n      - in: path\n        name: name\n        schema:\n          type: string\n        required: true\n        description: application name\n    get:\n      tags:\n        - applications\n        - finished\n      summary: Gets a application services\n      operationId: getApplicationServices\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApplicationInstanceServiceList\"\n        400:\n          description: Error\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /applications/{name}/notes:\n    parameters:\n      - in: path\n        name: name\n        schema:\n          type: string\n        required: true\n        description: application name\n    get:\n      tags:\n        - applications\n        - finished\n      summary: Gets application notes\n      operationId: getApplicationNotes\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  notes:\n                    type: string\n        400:\n          description: Error\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /appstore/charts:\n    get:\n      tags:\n        - appstore\n        - finished\n      summary: Get chart list\n      operationId: getAppstoreChartList\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ChartMetaDataList\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /appstore/charts/{category}:\n    parameters:\n      - in: path\n        name: category\n        schema:\n          $ref: \"#/components/schemas/ChartCategory\"\n        required: true\n        description: chart repo\n    post:\n      tags:\n        - appstore\n      summary: Upload chart\n      operationId: uploadChart\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  $ref: \"#/components/schemas/FileType\"\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n\n  /appstore/charts/{category}/{name}/{version}:\n    parameters:\n      - in: path\n        name: category\n        schema:\n          $ref: \"#/components/schemas/ChartCategory\"\n        required: true\n        description: chart repo\n      - in: path\n        name: name\n        schema:\n          type: string\n        required: true\n        description: chart name\n      - in: path\n        name: version\n        schema:\n          type: string\n        required: true\n        description: chart version\n    get:\n      tags:\n        - appstore\n        - finished\n      summary: Get a chart\n      operationId: getAppstoreChart\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Chart\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n\n  /releases/{name}:\n    parameters:\n      - in: path\n        name: name\n        schema:\n          $ref: \"#/components/schemas/ReleaseName\"\n        required: true\n        description: release name\n\n    get:\n      tags:\n        - releases\n      summary: Get information from specific release\n      operationId: getRelease\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  name:\n                    $ref: \"#/components/schemas/ReleaseName\"\n                  summary:\n                    $ref: \"#/components/schemas/ShortDescription\"\n                  description:\n                    $ref: \"#/components/schemas/LongDescription\"\n                  pods:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/KubernetesPod\"\n                  services:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/KubernetesService\"\n        404:\n          description: Release not found\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n    post:\n      tags:\n        - releases\n      summary: Create a release\n      operationId: createRelease\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ReleaseCreateConfig\"\n      responses:\n        200:\n          description: OK\n        409:\n          description: Duplicated environment name\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n    delete:\n      tags:\n        - releases\n      summary: Delete a release\n      operationId: deleteRelease\n      responses:\n        200:\n          description: OK\n        404:\n          description: Release not found\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /log/pod/{pod_name}:\n    get:\n      tags:\n        - logs\n        - finished\n      summary: get container log\n      operationId: GetContainerLog\n      parameters:\n        - in: path\n          name: pod_name\n          schema:\n            $ref: \"#/components/schemas/PodName\"\n          required: true\n          description: pod name in kubernetes\n        - in: query\n          name: container_name\n          schema:\n            $ref: \"#/components/schemas/ContainerName\"\n          required: false\n          description: container name in kubernetes\n        - in: query\n          name: tail_lines\n          schema:\n            type: integer\n            format: int64\n          required: false\n          description: tail lines of the log\n      responses:\n        200:\n          description: OK\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /images/importing:\n    get:\n      tags:\n        - images\n        - finished\n      summary:\n        List importing images\n      operationId: ListImportingImages\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ImageImportingInfo\"\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n    post:\n      tags:\n        - images\n        - finished\n      summary:\n        Import images\n      parameters:\n        - in: query\n          name: registryId\n          schema:\n            type: integer\n            format: int64\n          required: true\n          description: image registry id\n        - in: query\n          name: repo\n          schema:\n            $ref: \"#/components/schemas/ImageRepo\"\n          required: true\n        - in: query\n          name: tag\n          schema:\n            $ref: \"#/components/schemas/ImageTag\"\n          required: true\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      tags:\n        - images\n        - finished\n      summary: \n        Remove importing from list\n      parameters:\n        - in: query\n          name: importing_id\n          schema:\n            $ref: \"#/components/schemas/ImageImportingId\"\n          required: true\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n    put:\n      tags:\n        - images\n        - finished\n      summary:\n        Stop importing\n      parameters:\n        - in: query\n          name: importing_id\n          schema:\n            $ref: \"#/components/schemas/ImageImportingId\"\n          required: true\n          description: importing id to stop\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /images/registry:\n    get:\n      tags:\n        - images\n        - finished\n      summary:\n        Get registry list\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ImageRegistryInfo\"\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /public_images/info:\n    get:\n      tags:\n        - images\n        - finished\n      summary:\n        Get public project info\n      parameters:\n        - in: query\n          name: filter\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProjectUserInfo\"\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /public_images:\n    get:\n      tags:\n        - images\n        - finished\n      summary:\n        Get public images\n      parameters:\n        - in: query\n          name: filter\n          schema:\n            type: string\n        - in: query\n          name: page\n          schema:\n            type: integer\n            format: int64\n        - in: query\n          name: page_size\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ImageInfo\"\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /images/info:\n    get:\n      tags:\n        - images\n        - finished\n      summary:\n        Get user project info\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProjectUserInfo\"\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /images:\n    get:\n      tags:\n        - images\n        - finished\n      summary:\n        Get images\n      parameters:\n        - in: query\n          name: page\n          schema:\n            type: integer\n            format: int64\n        - in: query\n          name: page_size\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ImageInfo\"\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n    put:\n      tags:\n        - images\n        - finished\n      summary:\n        Copy image\n      parameters:\n        - in: query\n          name: src_repo\n          schema:\n            $ref: \"#/components/schemas/ImageRepo\"\n          required: true\n        - in: query\n          name: dest_repo\n          schema:\n            $ref: \"#/components/schemas/ImageRepo\"\n          required: true\n        - in: query\n          name: tag\n          schema:\n            $ref: \"#/components/schemas/ImageTag\"\n          required: true\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      tags:\n        - images\n        - finished\n      summary:\n        Delete image\n      parameters:\n        - in: query\n          name: repo\n          schema:\n            $ref: \"#/components/schemas/ImageRepo\"\n          required: true\n        - in: query\n          name: reference\n          schema:\n            type: string\n          description: tag or digest\n          required: true\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n\n  /competition:\n    get:\n      tags:\n        - competition\n        - finished\n      summary: list competition\n      parameters:\n        - in: query\n          name: beginning\n          schema:\n            type: string\n            format: date-time\n          required: false\n        - in: query\n          name: end\n          schema:\n            type: string\n            format: date-time\n          required: false\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/CompetitionInfo\"\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /competition/{competitionID}:\n    parameters:\n      - in: path\n        name: competitionID\n        schema:\n          type: string\n        description: computition id\n    post:\n      tags:\n        - competition\n        - finished\n      summary: join competition\n      parameters:\n        - in: query\n          name: inviter\n          schema:\n            type: string\n          description: inviter id\n          required: false\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n    get:\n      tags:\n        - competition\n        - finished\n      summary: check joined competition\n      responses:\n        200:\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: boolean\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /competition/{competitionID}/invitation:\n    parameters:\n      - in: path\n        name: competitionID\n        schema:\n          type: string\n        description: computition id\n    get:\n      tags:\n        - competition\n        - finished\n      summary: get invitation number in a competition\n      responses:\n        200:\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: integer\n                format: int64\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n\n  /storage:\n    get:\n      tags:\n        - storage\n        - finished\n      summary: Get directory\n      operationId: getDirectory\n      parameters:\n        - in: query\n          name: path\n          schema:\n            $ref: \"#/components/schemas/PosixPath\"\n          required: false\n          description: Directory path\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/FileInfo\"\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n    post:\n      tags:\n        - storage\n        - finished\n      summary: Create directory\n      operationId: createDirectory\n      parameters:\n        - in: query\n          name: path\n          schema:\n            $ref: \"#/components/schemas/PosixPath\"\n          required: true\n          description: File or Directory path\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n    delete:\n      tags:\n        - storage\n        - finished\n      summary: Delete directory or file\n      operationId: deleteDirectoryOrFile\n      parameters:\n        - in: query\n          name: path\n          schema:\n            $ref: \"#/components/schemas/PosixPath\"\n          required: True\n          description: Directory path\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /storage/upload:\n    post:\n      tags:\n        - storage\n        - finished\n      summary: Upload File\n      parameters:\n        - in: query\n          name: path\n          schema:\n            $ref: \"#/components/schemas/PosixPath\"\n          required: false\n          description: Destination directory\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  $ref: \"#/components/schemas/FileType\"\n      responses:\n        200:\n          description: OK\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n  /storage/download:\n    parameters:\n      - in: query\n        name: path\n        schema:\n          $ref: \"#/components/schemas/PosixPath\"\n        required: true\n        description: Source path\n    get:\n      tags:\n        - storage\n        - finished\n      summary: Download File\n      responses:\n        200:\n          description: OK\n          content:\n            application/octet-stream:\n              schema:\n                $ref: \"#/components/schemas/FileType\"\n        400:\n          $ref: \"#/components/responses/RequestError\"\n        500:\n          $ref: \"#/components/responses/ServerError\"\n\n\ncomponents:\n  securitySchemes:\n#    BasicAuth:\n#      type: http\n#      scheme: basic\n    OpenID:\n      type: openIdConnect\n      openIdConnectUrl: /.well-known/openid-configuration\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: Authorization\n  responses:\n    ServerError:\n      description: server error\n      content:\n        text/plain:\n          schema:\n            type: string\n          example: \"Something went wrong.\"\n    RequestError:\n      description: http request error\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              content:\n                type: object\n              message:\n                type: string\n              type:\n                type: string\n    500:\n      description: internal error\n      content:\n        text/plain:\n          schema:\n            type: string\n          example: \"internal error\"\n    400:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - message\n            properties:\n              message:\n                type: string\n              type:\n                type: string\n              content:\n                type: object\n            example:\n              message: this request is bad\n    401:\n      description: Unauthorized\n      content:\n        text/plain:\n          schema:\n            type: string\n  schemas:\n    PosixPath:\n      description: posix path for directory or file\n      type: string\n      maxLength: 256\n    UserName:\n      description: user name\n      type: string\n      pattern: '^[\\d\\w\\.-]*$'\n      maxLength: 32\n      example: coolguy\n    Password:\n      description: password\n      type: string\n      pattern: '^[\\d\\w\\.-]*$'\n      maxLength: 32\n      example: strongpassword\n    Email:\n      description: user email\n      type: string\n      example: coolguy@coolcompany.com\n    EnvironmentName:\n      description: environment name\n      type: string\n      pattern: '^[\\d\\w\\.-]*$'\n      maxLength: 32\n    ChartName:\n      description: chart name\n      type: string\n      pattern: '^[\\d\\w\\.-]*$'\n      maxLength: 32\n    ReleaseName:\n      description: release name\n      type: string\n      pattern: '^[\\d\\w\\.-]*$'\n      maxLength: 32\n    ImageName:\n      description: image name\n      type: string\n      pattern: '^[\\d\\w\\.-]*$'\n      maxLength: 64\n    ServiceName:\n      description: service name\n      type: string\n      pattern: '^[\\d\\w\\.-]*$'\n      maxLength: 32\n    PodName:\n      description: pod name\n      type: string\n      pattern: '^[\\d\\w\\.-]*$'\n      maxLength: 32\n    ContainerName:\n      description: container name\n      type: string\n      pattern: '^[\\d\\w\\.-]*$'\n      maxLength: 32\n    ChartVersion:\n      description: chart version\n      type: string\n      pattern: '^[\\d\\.]*$'\n    Port:\n      description: port\n      type: integer\n      minimum: 0\n      maximum: 65353\n    ReleaseState:\n      type: string\n      enum:\n        - \"running\"\n        - \"stopped\"\n        - \"finished\"\n    PodState:\n      type: string\n    ContainerState:\n      type: string\n    UserInfo:\n      type: object\n      properties:\n        name:\n          type: string\n          example: John\n        balance:\n          type: number\n          format: double\n#        create_tm:\n#          type: string\n#          format: date-time\n#          example: 2017-07-21T17:32:28Z\n#        instance_num:\n#          type: integer\n#          format: int32\n#          example: 2\n    EmailVerifyCode:\n      type: string\n    UserLoginInfo:\n      description: user login information\n      type: object\n      required:\n        - username\n        - password\n      properties:\n        username:\n          $ref: \"#/components/schemas/UserName\"\n        password:\n          $ref: \"#/components/schemas/Password\"\n    UserRegisterInfo:\n      description: user register information\n      type: object\n      required:\n        - code\n        - email\n        - username\n        - password\n      properties:\n        code:\n          $ref: \"#/components/schemas/EmailVerifyCode\"\n        email:\n          $ref: \"#/components/schemas/Email\"\n        username:\n          $ref: \"#/components/schemas/UserName\"\n        password:\n          $ref: \"#/components/schemas/Password\"\n    UserRefreshToken:\n      type: object\n      required:\n        - refresh_token\n      properties:\n        refresh_token:\n          type: string\n    UserTasksInfo:\n      type: object\n      properties:\n        env_num:\n          type: integer\n          format: int64\n        app_num:\n          type: integer\n          format: int64\n        task_list:\n          type: array\n          items:\n            $ref: \"#/components/schemas/UserTaskInfo\"\n    UserTaskInfo:\n      type: object\n      properties:\n        compute_unit:\n          $ref: \"#/components/schemas/ComputeUnitId\"\n        number:\n          type: integer\n          format: int64\n        price:\n          type: number\n          format: double\n    StorageMapping:\n      description: storage mapping\n      type: object\n      properties:\n        subpath:\n          type: string\n          description: relative path to user storage path\n          example: \"the/path/inside/user/storage/path\"\n        mountpath:\n          type: string\n          description: absolute path to container filesystem path\n          example: \"/the/path/inside/container\"\n    ServiceExpose:\n      description: service to expose\n      type: object\n      properties:\n        name:\n          $ref: \"#/components/schemas/ServiceName\"\n        port:\n          $ref: \"#/components/schemas/Port\"\n    ImageConfig:\n      description: image configuration\n      type: object\n      properties:\n        repo:\n          example: m7-ieg-pico-test01:5000/fuhao/pineapple/env/tensorflow\n          type: string\n        tag:\n          example: 20.12-tf2-py3\n          type: string\n        source:\n          example: private\n          type: string\n    EnvironmentConfig:\n      description: environment configuration\n      type: object\n      properties:\n        image:\n          $ref: \"#/components/schemas/ImageConfig\"\n        mounts:\n          type: array\n          items:\n            $ref: \"#/components/schemas/StorageMapping\"\n        compute_unit:\n          $ref: \"#/components/schemas/ComputeUnitId\"\n        ssh:\n          type: object\n          properties:\n            enable:\n              example: true\n              type: boolean\n            id_rsa.pub:\n              example: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAAMfJkdGFHw+tcovIkSSk5sayb/2uid8vdcc9unEGSk74sZMJrN2yMd52sUnvdNaSp2VLVZ/CfpuKs3coKj335neyEcN4PKsv6KFywFa0DaHZ0Uzbp6k6/ThBKIi8kNQfkgKXlf2L04Z6PqgFkfRiS4gYKLSF/yZQ+VXYpnnzzCUAeLsCL7Vy1ZHSIbmx74neUxp1y8eBCN6cD9qEHW2aespg0wK2tM4dsTyb3av1FIP44wP6cOx0ZK6WhDhkIEmkvbfN/HhhF9HqCKciq/pQxyP10k3VxgcEYZUZOnlzdgUugHNOLi2oE9lGNWyPU9cl2wyE4bUV1zz4OI6wbqPL liwenhao@liwenhaodeMBP-2.4pd.io\n              type: string\n        jupyter:\n          type: object\n          properties:\n            enable:\n              example: true\n              type: boolean\n            token:\n              example: abcdefg\n              type: string\n    EnvironmentState:\n      description: environment state\n      type: string\n      enum:\n        - \"Pending\"\n        - \"Running\"\n        - \"Succeeded\"\n        - \"Failed\"\n        - \"Unknown\"\n    EnvironmentRuntimeStaticInfo:\n      description: environment runtime static information\n      type: object\n      properties:\n        name:\n          $ref: \"#/components/schemas/EnvironmentName\"\n        create_tm:\n          type: string\n          format: date-time\n          example: 2017-07-21T17:32:28Z\n        environmentConfig:\n          $ref: \"#/components/schemas/EnvironmentConfig\"\n        notebook_url:\n          type: string\n        description:\n          type: string\n    EnvironmentRuntimeSshInfo:\n      description: environment runtime ssh information\n      type: object\n      properties:\n        ssh_ip:\n          type: string\n          format: ipv4\n        ssh_port:\n          type: string\n    EnvironmentRuntimeInfo:\n      description: environment runtime information\n      type: object\n      properties:\n        staticInfo:\n          $ref: \"#/components/schemas/EnvironmentRuntimeStaticInfo\"\n        state:\n          $ref: \"#/components/schemas/EnvironmentState\"\n        sshInfo:\n          $ref: \"#/components/schemas/EnvironmentRuntimeSshInfo\"\n        pod_name:\n          type: string\n        events:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ApplicationInstanceEvent\"\n    EnvironmentRuntimeInfos:\n      description: environment runtime information list\n      type: object\n      properties:\n        total:\n          type: integer\n        item:\n          type: array\n          items:\n            $ref: \"#/components/schemas/EnvironmentRuntimeInfo\"\n    ApplicationConfig:\n      description: metadata to create an application instance\n      type: object\n      properties:\n        url:\n          type: string\n        answers:\n          type: object\n    ReleaseCreateConfig:\n      description: metadata to create a release\n      type: object\n      properties:\n        name:\n          $ref: \"#/components/schemas/ReleaseName\"\n        chart_name:\n          $ref: \"#/components/schemas/ChartName\"\n        value_encode:\n          description: utf-8 encoded value.yaml file\n          type: string\n          format: binary\n    KubernetesContainer:\n      description: container schema\n      type: object\n      properties:\n        name:\n          $ref: \"#/components/schemas/ContainerName\"\n        state:\n          $ref: \"#/components/schemas/ContainerState\"\n        image:\n          $ref: \"#/components/schemas/ImageName\"\n    KubernetesPod:\n      description: pod schema\n      type: object\n      properties:\n        name:\n          $ref: \"#/components/schemas/PodName\"\n        ip:\n          type: string\n          format: ipv4\n        state:\n          $ref: \"#/components/schemas/PodState\"\n        compute_unit:\n          $ref: \"#/components/schemas/ComputeUnitId\"\n        containers:\n          type: array\n          items:\n            $ref: \"#/components/schemas/KubernetesContainer\"\n    KubernetesService:\n      description: service schema\n      type: object\n      properties:\n        name:\n          $ref: \"#/components/schemas/ServiceName\"\n        cluster_ip:\n          type: string\n          format: ipv4\n        port:\n          type: string\n          format: port\n        node_port:\n          type: string\n          format: port\n    ChartValue:\n      type: string\n    ChartCategory:\n      description: chart repo category\n      type: string\n      enum:\n        - public-official\n        - public-practical\n        - public-community\n        - private\n    ChartMetaDataList:\n      description: chart metadata list\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ChartMetadata\"\n    Chart:\n      description: chart\n      type: object\n      properties:\n        metadata:\n          $ref: \"#/components/schemas/ChartMetadata\"\n        files:\n          $ref: \"#/components/schemas/ChartFiles\"\n        version_list:\n          type: array\n          items:\n            type: string\n    ChartMetadata:\n      description: chart metadata\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        version:\n          type: string\n        url:\n          type: string\n        icon_link:\n          type: string\n        category:\n          $ref: \"#/components/schemas/ChartCategory\"\n    ChartFiles:\n      description: chart files\n      type: object\n      additionalProperties:\n        type: string\n        format: byte\n    ApplicationList:\n      description: application instance list\n      type: object\n      properties:\n        total:\n          type: integer\n        item:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ApplicationInstanceMetadata\"\n    ApplicationInstanceMetadata:\n      description: application instance\n      type: object\n      properties:\n        instance_name:\n          type: string\n        chart_name:\n          type: string\n        chart_version:\n          type: string\n        create_tm:\n          type: string\n          format: date-time\n          example: 2017-07-21T17:32:28Z\n        status:\n          type: string\n    ApplicationInstancePodList:\n      description: application instance pod list\n      type: object\n      properties:\n        total:\n          type: integer\n        item:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ApplicationInstancePod\"\n    ApplicationInstancePod:\n      description: application instance pod\n      type: object\n      properties:\n        name:\n          type: string\n        events:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ApplicationInstanceEvent\"\n        state:\n          type: string\n        containers:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ApplicationInstanceContainer\"\n        create_tm:\n          type: string\n          format: date-time\n          example: 2017-07-21T17:32:28Z\n    ApplicationInstanceEvent:\n      description: application instance event\n      type: object\n      properties:\n        type:\n          type: string\n        reason:\n          type: string\n        age:\n          type: string\n        from:\n          type: string\n        message:\n          type: string\n    ApplicationInstanceContainer:\n      description: application instance container\n      type: object\n      properties:\n        name:\n          type: string\n        image:\n          type: string\n        state:\n          type: string\n        ports:\n          type: array\n          items:\n            type: object\n            properties:\n              container_port:\n                type: string\n              protocol:\n                type: string\n    ApplicationInstanceServiceList:\n      description: application instance service list\n      type: object\n      properties:\n        total:\n          type: integer\n        item:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ApplicationInstanceService\"\n    ApplicationInstanceService:\n      description: application instance pod\n      type: object\n      properties:\n        name:\n          type: string\n        type:\n          type: string\n        cluster_ip:\n          type: string\n        external_ips:\n          type: array\n          items:\n            type: string\n        ports:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n              port:\n                type: string\n              node_port:\n                type: string\n              protocol:\n                type: string\n    LongDescription:\n      description: long description including newlines\n      type: string\n    ShortDescription:\n      description: short description excluding newlines\n      type: string\n    ImageRegistryInfo:\n      description: image registry info\n      type: object\n      properties:\n        url:\n          type: string\n        id:\n          type: integer\n          format: int64\n    ImageRepo:\n      description: image repo\n      type: string\n    ImageTag:\n      description: image tag\n      type: string\n    ImageImportingId:\n      description: image importing ID\n      type: integer\n      format: int64\n    ImageImportingInfo:\n      description: import image info\n      type: object\n      properties:\n        registry:\n          $ref: \"#/components/schemas/ImageRegistryInfo\"\n        repo:\n          $ref: \"#/components/schemas/ImageRepo\"\n        tag:\n          $ref: \"#/components/schemas/ImageTag\"\n        status:\n          type: string\n        start_time:\n          type: string\n          format: date-time\n        end_time:\n          type: string\n          format: date-time\n        importing_id:\n          $ref: \"#/components/schemas/ImageImportingId\"\n    ImageInfo:\n      description: image info\n      type: object\n      properties:\n        repo:\n          $ref: \"#/components/schemas/ImageRepo\"\n        tags:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ImageTag\"\n        digest:\n          type: string\n        size:\n          type: string\n        importing_time:\n          type: string\n          format: date-time\n    ProjectUserInfo:\n      description: user repo info\n      type: object\n      properties:\n        image_count:\n          type: integer\n          format: int64\n    MemorySpec:\n      description: memory spec\n      type: string\n      pattern: '^[\\d]+(G|M|K)$'\n    ComputeUnitId:\n      description: compute unit name\n      type: string\n      example: 1c-1g\n      maxLength: 32\n    ComputeUnitSpec:\n      description: compute unit spec\n      type: object\n      properties:\n        name:\n          type: string\n          description: compute unit spec\n          example: Free CPU\n        id:\n          $ref: \"#/components/schemas/ComputeUnitId\"\n        price:\n          type: number\n          format: double\n          description: price\n          example: 15.0\n        description:\n          type: string\n    DomainType:\n      description: private or public\n      type: string\n      enum:\n        - public\n        - private\n    FileInfo:\n      description: file or directory info\n      type: object\n      properties:\n        name:\n          type: string\n        is_dir:\n          type: boolean\n        size:\n          type: string\n        modification_time:\n          type: string\n          format: date-time\n    FileType:\n      description: file type for upload and Download\n      type: string\n      format: binary\n    CompetitionInfo:\n      type: object\n      properties:\n        name:\n          type: string\n        id:\n          type: string\n        beginning:\n          type: string\n          format: date-time\n        deadline:\n          type: string\n          format: date-time\n        avl:\n          type: boolean\n        participant:\n          type: integer\n          format: int64\n        computingResource:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ComputeUnitSpec\""
		}
	},
	"Error": "parse: /competition/{competitionID}: parameters: parse parameter \"competitionID\": path parameters must be required"
}