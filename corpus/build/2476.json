{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/fabric8-launcher/launcher-application"
		},
		"file": {
			"name": "crud-openapi.yaml",
			"path": "frontend/packages/launcher-welcome-app/api/crud-openapi.yaml",
			"content": "---\nopenapi: 3.0.2\ninfo:\n  title: Relational Database Backend API\n  description: |-\n    The application is using a database to store the managed items. The API has been designed to be simple and intuitive. Additionally, this experience demonstrates how an application can locate and use a relational database.\n\n    The experience is built upon an application to manage fruits. The user experience is delivered using a web page proposing the CRUD operations (create / retrieve / update and delete). The user can also use the service endpoint directly.\n\n    While this experience does not showcase a fully matured RESTful model (level 3), it uses HTTP verbs and status.\n\n    Based on https://github.com/fabric8-launcher/launcher-documentation/wiki/Mission:-Relational-Database-Backend\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0\n  version: 1.0.0\npaths:\n  /api/fruits:\n    get:\n      summary: Returns a list of all fruits\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              examples:\n                List of Fruits:\n                  description: Performs a SELECT in the Database and return the content\n                    as a JSON response\n                  value: '[{\"name\":\"apple\", \"id\": 1}]'\n    post:\n      summary: Insert a new fruit\n      requestBody:\n        description: A fruit without the ID\n        content:\n          application/json:\n            examples:\n              A Fruit resource without the ID:\n                value: '[{\"name\": \"banana\"}]'\n        required: true\n      responses:\n        201:\n          description: Fruit created\n          content:\n            application/json:\n              examples:\n                Fruit created:\n                  value: '{\"name\": \"banana\", \"id\": 2}'\n        415:\n          description: If the payload was not JSON or empty\n          content:\n            application/json: {}\n        422:\n          description: If the payload was JSON (for instance, if the id is set)\n          content:\n            application/json: {}\n  /api/fruits/{id}:\n    get:\n      summary: Returns the JSON for a single fruit\n      responses:\n        200:\n          description: A single fruit resource\n          content:\n            application/json:\n              examples:\n                A Single Fruit resource:\n                  value: '{\"name\" : \"apple\", \"id\": 1}'\n        404:\n          description: If the fruit does not exists\n          content:\n            application/json: {}\n    put:\n      summary: Edit the fruit\n      requestBody:\n        description: The name can be changed, or another attribute. The id cannot\n          be changed\n        required: true\n      responses:\n        200:\n          description: Returns the updated representation\n          content:\n            application/json:\n              examples:\n                The changed fruit representation:\n                  value: '{\"name\": \"pear\", \"id\": 1}'\n        404:\n          description: Unknown ID\n        415:\n          description: If the payload was not JSON or empty\n        422:\n          description: Illegal payload\n    delete:\n      summary: Delete the fruit\n      responses:\n        204:\n          description: No Content\n        404:\n          description: Invalid ID\n    parameters:\n    - name: id\n      in: path\n      description: The fruit ID\n      required: true\n      schema:\n        type: number\n"
		}
	},
	"Error": "parse: paths: /api/fruits/{id}: put: operation \"\": requestBody: content must have at least on entry"
}