{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/topcoder-platform/taas-apis"
		},
		"file": {
			"name": "swagger.yaml",
			"path": "docs/swagger.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  title: Bookings microservice\n  description: Bookings microservice\n  version: 1.0.0\nservers:\n  - url: /api/{apiVersion}/\n  - url: http://localhost:3000/v5/\n  - url: https://api.topcoder-dev.com/{apiVersion}/\n    variables:\n      apiVersion:\n        default: \"v5\"\n        description: The REST API version\ntags:\n  - name: Jobs\n  - name: JobCandidates\n  - name: Interviews\n  - name: UserMeetingSettings\n  - name: ResourceBookings\n  - name: Teams\n  - name: WorkPeriods\n  - name: WorkPeriodPayments\n  - name: Roles\npaths:\n  /jobs:\n    post:\n      tags:\n        - Jobs\n      description: |\n        Create job.\n\n        **Authorization** All topcoder members are allowed\n\n        Permission rules on field `isApplicationPageActive`:\n          - M2M user is allowed to set the value of the field\n          - Other users are not allowed to set the value of the field\n\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/JobRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Job\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      tags:\n        - Jobs\n      description: |\n        Search jobs.\n\n        **Authorization** All topcoder members are allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            default: 1\n          description: The page number.\n        - in: query\n          name: perPage\n          required: false\n          schema:\n            type: integer\n            default: 20\n          description: The number of items to list per page.\n        - in: query\n          name: sortBy\n          required: false\n          schema:\n            type: string\n            default: id\n            enum: [\"id\", \"createdAt\", \"updatedAt\", \"startDate\", \"rateType\", \"status\"]\n          description: The sort by column.\n        - in: query\n          name: sortOrder\n          required: false\n          schema:\n            type: string\n            default: desc\n            enum: [\"desc\", \"asc\"]\n          description: The sort order.\n        - in: query\n          name: projectId\n          required: false\n          schema:\n            type: integer\n          description: The project id.\n        - in: query\n          name: jobLocation\n          required: false\n          schema:\n            type: string\n          description: The location of the jobs.\n        - in: query\n          name: minSalary\n          required: false\n          schema:\n            type: integer\n          description: The minimum Salary.\n        - in: query\n          name: maxSalary\n          required: false\n          schema:\n            type: integer\n          description: The maximum Salary.\n        - in: query\n          name: isApplicationPageActive\n          required: false\n          schema:\n            type: boolean\n          description: Is application page active.\n        - in: query\n          name: projectIds\n          required: false\n          schema:\n            type: string\n          description: The project ids, separated by commas.\n        - in: query\n          name: externalId\n          required: false\n          schema:\n            type: string\n          description: The external id.\n        - in: query\n          name: description\n          required: false\n          schema:\n            type: string\n          description: The description.\n        - in: query\n          name: title\n          required: false\n          schema:\n            type: string\n            maxLength: 64\n          description: The title.\n        - in: query\n          name: startDate\n          required: false\n          schema:\n            type: string\n            format: date\n          description: The job start date.\n        - in: query\n          name: resourceType\n          required: false\n          schema:\n            type: string\n          description: The resource type.\n        - in: query\n          name: skill\n          required: false\n          schema:\n            type: string\n          description: The skill.\n        - in: query\n          name: workload\n          required: false\n          schema:\n            type: string\n            enum: [\"full-time\", \"fractional\"]\n          description: The rate type.\n        - in: query\n          name: rateType\n          required: false\n          schema:\n            type: string\n            enum: [\"hourly\", \"daily\", \"weekly\", \"monthly\", \"annual\"]\n          description: The rate type.\n        - in: query\n          name: status\n          required: false\n          schema:\n            type: string\n            enum: [\"sourcing\", \"in-review\", \"assigned\", \"closed\", \"cancelled\"]\n          description: The rate type.\n        - in: query\n          name: specialJob\n          required: false\n          schema:\n            type: boolean\n          description: When passing true, the API will load all featured and showInHotList jobs at once\n        - in: query\n          name: featured\n          required: false\n          schema:\n            type: boolean\n          description: The featured jobs\n        - in: query\n          name: rcrmStatus\n          required: false\n          schema:\n            type: string\n            enum: [\"Open\", \"On Hold\", \"Canceled\", \"Draft\", \"Closed\", \"Did not Post\"]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/JobSearchBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Job\"\n\n          headers:\n            X-Next-Page:\n              schema:\n                type: integer\n                description: The index of the next page\n            X-Page:\n              schema:\n                type: integer\n                description: The index of the current page (starting at 1)\n            X-Per-Page:\n              schema:\n                type: integer\n                description: The number of items to list per page\n            X-Prev-Page:\n              schema:\n                type: integer\n                description: The index of the previous page\n            X-Total:\n              schema:\n                type: integer\n                description: The total number of items\n            X-Total-Pages:\n              schema:\n                type: integer\n                description: The total number of pages\n            Link:\n              schema:\n                type: string\n                description: Pagination link header.\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /jobs/{id}:\n    get:\n      tags:\n        - Jobs\n      description: |\n        Get job information by id.\n\n        **Authorization** All topcoder members are allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The job id.\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: fromDb\n          description: get data from db or not.\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Job\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      tags:\n        - Jobs\n      description: |\n        Delete the job.\n\n        **Authorization** Every topcoder member can delete the job he/she created. bookingmanager can delete all jobs.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: \"The id of job.\"\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    put:\n      tags:\n        - Jobs\n      description: |\n        Update the job.\n\n        **Authorization** Every topcoder member can update the job he/she created. bookingmanager and connectmember can update all jobs.\n\n        Permission rules on field `isApplicationPageActive`:\n          - M2M user is allowed to update the value of the field\n          - Other users are not allowed to update the value of the field\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The id of job\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: \"#/components/schemas/JobRequestBody\"\n                - $ref: \"#/components/schemas/JobPatchRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Job\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      tags:\n        - Jobs\n      description: |\n        Update job.\n\n        **Authorization** Topcoder token with patch job scope is allowed\n\n        Permission rules on field `isApplicationPageActive`:\n          - M2M user is allowed to update the value of the field\n          - Other users are not allowed to update the value of the field\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The id job.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/JobPatchRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Job\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /jobCandidates:\n    post:\n      tags:\n        - JobCandidates\n      description: |\n        Create Job candidate.\n\n        **Authorization** Topcoder token with write JobCandidate scope is allowed\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/JobCandidateRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/JobCandidate\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      tags:\n        - JobCandidates\n      description: |\n        Search job candidate.\n\n        **Authorization** Topcoder token with read JobCandidate scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            default: 1\n          description: The page number.\n        - in: query\n          name: perPage\n          required: false\n          schema:\n            type: integer\n            default: 20\n          description: The number of items to list per page.\n        - in: query\n          name: sortBy\n          required: false\n          schema:\n            type: string\n            default: id\n            enum: [\"id\", \"status\"]\n          description: The sort by column.\n        - in: query\n          name: sortOrder\n          required: false\n          schema:\n            type: string\n            default: desc\n            enum: [\"desc\", \"asc\"]\n        - in: query\n          name: jobId\n          required: false\n          schema:\n            type: string\n            format: uuid\n          description: The job id.\n        - in: query\n          name: userId\n          required: false\n          schema:\n            type: string\n            format: uuid\n          description: The user id.\n        - in: query\n          name: status\n          required: false\n          schema:\n            type: string\n            enum:\n              [\n                \"open\",\n                \"placed\",\n                \"selected\",\n                \"client rejected - screening\",\n                \"client rejected - interview\",\n                \"rejected - other\",\n                \"cancelled\",\n                \"interview\",\n                \"topcoder-rejected\",\n                \"applied\",\n                \"rejected-pre-screen\",\n                \"skills-test\",\n                \"phone-screen\",\n                \"job-closed\",\n                \"offered\",\n              ]\n          description: The job candidate status.\n        - in: query\n          name: externalId\n          required: false\n          schema:\n            type: string\n          description: The external id.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/JobCandidateSearchBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/JobCandidateInterviewsIncluded\"\n\n          headers:\n            X-Next-Page:\n              schema:\n                type: integer\n                description: The index of the next page\n            X-Page:\n              schema:\n                type: integer\n                description: The index of the current page (starting at 1)\n            X-Per-Page:\n              schema:\n                type: integer\n                description: The number of items to list per page\n            X-Prev-Page:\n              schema:\n                type: integer\n                description: The index of the previous page\n            X-Total:\n              schema:\n                type: integer\n                description: The total number of items\n            X-Total-Pages:\n              schema:\n                type: integer\n                description: The total number of pages\n            Link:\n              schema:\n                type: string\n                description: Pagination link header.\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /jobCandidates/{id}:\n    get:\n      tags:\n        - JobCandidates\n      description: |\n        Get job candidate information by id.\n\n        **Authorization** Topcoder token with read job candidate scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The job candidate id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: query\n          name: fromDb\n          description: get data from db or not.\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/JobCandidateInterviewsIncluded\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      tags:\n        - JobCandidates\n      description: |\n        Delete the job.\n\n        **Authorization** Topcoder token with delete job candidate scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The job candidate id\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    put:\n      tags:\n        - JobCandidates\n      description: |\n        Update the job candidate.\n\n        **Authorization** Topcoder token with update JobCandidate scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The job candidate id.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: \"#/components/schemas/JobCandidateRequestBody\"\n                - $ref: \"#/components/schemas/JobCandidatePatchRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/JobCandidate\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      tags:\n        - JobCandidates\n      description: |\n        Partail update job candidate.\n\n        **Authorization** Topcoder token with update Job candidate scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The job candidate id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/JobCandidatePatchRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/JobCandidate\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /jobCandidates/{id}/resume:\n    get:\n      tags:\n        - JobCandidates\n      description: |\n        Get job candidate resume by id.\n\n        **Authorization** Topcoder token with read job candidate scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The job candidate id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/msword:\n              schema:\n                $ref: \"#/components/schemas/JobCandidateResume\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /jobCandidates/{jobCandidateId}/requestInterview:\n    patch:\n      tags:\n        - Interviews\n      description: |\n        Request a new interview.\n\n        **Authorization** Topcoder token with create interview scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: jobCandidateId\n          description: The job candidate id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RequestInterviewBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Interview\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /jobCandidates/{jobCandidateId}/updateInterview/{round}:\n    patch:\n      tags:\n        - Interviews\n      description: |\n        Partially update interview.\n\n        **Authorization** Topcoder token with update interview scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: jobCandidateId\n          description: The job candidate id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: path\n          name: round\n          description: The interview round.\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateInterviewByRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Interview\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /updateInterview/{id}:\n    patch:\n      tags:\n        - Interviews\n      description: |\n        Partially update interview.\n\n        **Authorization** Topcoder token with update interview scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The interview id.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateInterviewByRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Interview\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /jobCandidates/{jobCandidateId}/interviews:\n    get:\n      tags:\n        - Interviews\n      description: |\n        Search interviews.\n\n        **Authorization** Topcoder token with read interview scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: jobCandidateId\n          description: The job candidate id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            default: 1\n          description: The page number.\n        - in: query\n          name: perPage\n          required: false\n          schema:\n            type: integer\n            default: 20\n          description: The number of items to list per page.\n        - in: query\n          name: sortBy\n          required: false\n          schema:\n            type: string\n            default: createdAt\n            enum: [\"round\", \"createdAt\", \"updatedAt\"]\n          description: The sort by column.\n        - in: query\n          name: sortOrder\n          required: false\n          schema:\n            type: string\n            default: desc\n            enum: [\"desc\", \"asc\"]\n        - in: query\n          name: createdAt\n          required: false\n          schema:\n            type: string\n            format: date-time\n          description: The creation date/time of interview.\n        - in: query\n          name: updatedAt\n          required: false\n          schema:\n            type: string\n            format: date-time\n          description: The last update date/time of interview.\n        - in: query\n          name: status\n          required: false\n          schema:\n            type: string\n            enum: [\"Requested\"]\n          description: The interview status.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Interview\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /jobCandidates/{jobCandidateId}/interviews/{round}:\n    get:\n      tags:\n        - Interviews\n      description: |\n        Get interview by round.\n\n        **Authorization** Topcoder token with read interview scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: jobCandidateId\n          description: The job candidate id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: path\n          name: round\n          description: The interview round.\n          required: true\n          schema:\n            type: integer\n        - in: query\n          name: fromDb\n          description: get data from db or not.\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Interview\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /getInterview/{id}:\n    get:\n      tags:\n        - Interviews\n      description: |\n        Get interview by id.\n\n        **Authorization** Topcoder token with read interview scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The interview id.\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: fromDb\n          description: get data from db or not.\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Interview\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /getInterview/{id}/zoom-link:\n    get:\n      tags:\n        - Interviews\n      description: |\n        Get a fresh Zoom Links from Zoom Meeting and redirect to Zoom Link.\n\n      parameters:\n        - in: path\n          name: id\n          description: The interview id.\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: type\n          description: the zoom link type (host or guest).\n          required: true\n          schema:\n            type: string\n            enum:\n              - host\n              - guest\n        - in: query\n          name: token\n          description: the request token.\n          required: true\n          schema:\n            type: string\n      responses:\n        \"302\":\n          description: Redirect to link of Zoom Meeting\n          headers:\n            Location:\n              description: Zoom Meeting Link.\n              schema:\n                type: string\n                format: uri\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /resourceBookings:\n    post:\n      tags:\n        - ResourceBookings\n      description: |\n        Create Resource booking.\n\n        **Authorization** Topcoder token with write Resource booking scope is allowed\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ResourceBookingRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceBooking\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      tags:\n        - ResourceBookings\n      description: |\n        Search resource booking.\n\n        **Authorization** Topcoder token with read resource booking scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: query\n          name: fields\n          description: the field names to be returned from all ResourceBooking, WorkPeriod and WorkPeriodPayment\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            default: 1\n          description: The page number.\n        - in: query\n          name: perPage\n          required: false\n          schema:\n            type: integer\n            default: 20\n          description: The number of items to list per page.\n        - in: query\n          name: sortBy\n          required: false\n          schema:\n            type: string\n            default: id\n            enum:\n              [\n                \"id\",\n                \"status\",\n                \"startDate\",\n                \"endDate\",\n                \"rateType\",\n                \"customerRate\",\n                \"memberRate\",\n                \"workPeriods.userHandle\",\n                \"workPeriods.daysWorked\",\n                \"workPeriods.customerRate\",\n                \"workPeriods.memberRate\",\n                \"workPeriods.paymentStatus\",\n              ]\n          description: The sort by column.\n        - in: query\n          name: sortOrder\n          required: false\n          schema:\n            type: string\n            default: desc\n            enum: [\"desc\", \"asc\"]\n        - in: query\n          name: status\n          required: false\n          schema:\n            type: string\n            enum: [\"placed\", \"in-progress\", \"completed\"]\n          description: The status.\n        - in: query\n          name: startDate\n          required: false\n          schema:\n            type: string\n            format: date\n          description: The resource booking start date.\n        - in: query\n          name: endDate\n          required: false\n          schema:\n            type: string\n            format: date\n          description: The resource booking end date.\n        - in: query\n          name: rateType\n          required: false\n          schema:\n            type: string\n            enum: [\"hourly\", \"daily\", \"weekly\", \"monthly\"]\n          description: The rate type.\n        - in: query\n          name: jobId\n          required: false\n          schema:\n            type: string\n            format: uuid\n          description: The job id.\n        - in: query\n          name: userId\n          required: false\n          schema:\n            type: string\n            format: uuid\n          description: The job id.\n        - in: query\n          name: projectId\n          required: false\n          schema:\n            type: integer\n          description: The project id.\n        - in: query\n          name: projectIds\n          required: false\n          schema:\n            type: string\n          description: comma separated project ids.\n        - in: query\n          name: billingAccountId\n          required: false\n          schema:\n            type: integer\n          description: billing account id. 0 represents null value.\n        - in: query\n          name: workPeriods.paymentStatus\n          required: false\n          schema:\n            oneOf:\n              - type: array\n                items:\n                  type: string\n                  enum:\n                    [\"pending\", \"partially-completed\", \"completed\", \"cancelled\"]\n              - type: string\n                enum:\n                  [\"pending\", \"partially-completed\", \"completed\", \"cancelled\"]\n          description: comma separated payment status.\n        - in: query\n          name: workPeriods.startDate\n          required: false\n          schema:\n            type: string\n            format: date\n            pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          description: The work period start date. Should be Sunday.\n        - in: query\n          name: workPeriods.endDate\n          required: false\n          schema:\n            type: string\n            format: date\n            pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          description: The work period end date. Should be Saturday.\n        - in: query\n          name: workPeriods.userHandle\n          required: false\n          schema:\n            type: string\n          description: The user handle.\n        - in: query\n          name: workPeriods.isFirstWeek\n          required: false\n          schema:\n            type: boolean\n            default: false\n          description: |\n            the week which matches workPeriods.startDate is the first one in the RB.\n            workPeriods.startDate is required.\n            only one of workPeriods.isFirstWeek and workPeriods.isLastWeek is allowed.\n        - in: query\n          name: workPeriods.isLastWeek\n          required: false\n          schema:\n            type: boolean\n            default: false\n          description: |\n            the week which matches workPeriods.startDate is the last one in the RB.\n            workPeriods.startDate is required.\n            only one of workPeriods.isFirstWeek and workPeriods.isLastWeek is allowed.\n        - in: query\n          name: workPeriods.payments.status\n          required: false\n          schema:\n            type: string\n          description: The status of the payment\n        - in: query\n          name: workPeriods.payments.days\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 5\n            example: 3\n          description: The workdays to pay\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ResourceBookingSearchBody\"\n\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ResourceBooking\"\n\n          headers:\n            X-Next-Page:\n              schema:\n                type: integer\n                description: The index of the next page\n            X-Page:\n              schema:\n                type: integer\n                description: The index of the current page (starting at 1)\n            X-Per-Page:\n              schema:\n                type: integer\n                description: The number of items to list per page\n            X-Prev-Page:\n              schema:\n                type: integer\n                description: The index of the previous page\n            X-Total:\n              schema:\n                type: integer\n                description: The total number of items\n            X-Total-Pages:\n              schema:\n                type: integer\n                description: The total number of pages\n            Link:\n              schema:\n                type: string\n                description: Pagination link header.\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /resourceBookings/{id}:\n    get:\n      tags:\n        - ResourceBookings\n      description: |\n        Get resource booking by id.\n\n        **Authorization** Topcoder token with read resource booking scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The resource booking id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: query\n          name: fromDb\n          description: get data from db or not.\n          required: false\n          schema:\n            type: boolean\n        - in: query\n          name: fields\n          description: the field names to be returned from all ResourceBooking, WorkPeriod and WorkPeriodPayment\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceBooking\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      tags:\n        - ResourceBookings\n      description: |\n        Delete the resource booking.\n\n        **Authorization** Topcoder token with delete resource booking scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The id of resource booking.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    put:\n      tags:\n        - ResourceBookings\n      description: |\n        Update the resource booking.\n\n        **Authorization** Topcoder token with update resource booking scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The id of resource booking.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: \"#/components/schemas/ResourceBookingRequestBody\"\n                - $ref: \"#/components/schemas/ResourceBookingPatchRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceBooking\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      tags:\n        - ResourceBookings\n      description: |\n        Partial Update resource booking.\n\n        **Authorization** Topcoder token with update job candidate scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The id of resource booking.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ResourceBookingPatchRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ResourceBooking\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /work-periods:\n    get:\n      tags:\n        - WorkPeriods\n      description: |\n        Search work period.\n\n        **Authorization** Topcoder token with read work period scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            default: 1\n          description: The page number.\n        - in: query\n          name: perPage\n          required: false\n          schema:\n            type: integer\n            default: 20\n          description: The number of items to list per page.\n        - in: query\n          name: sortBy\n          required: false\n          schema:\n            type: string\n            default: id\n            enum:\n              [\n                \"id\",\n                \"resourceBookingId\",\n                \"userHandle\",\n                \"projectId\",\n                \"paymentStatus\",\n                \"startDate\",\n                \"endDate\",\n                \"daysWorked\",\n                \"customerRate\",\n                \"memberRate\",\n              ]\n          description: The sort by column.\n        - in: query\n          name: sortOrder\n          required: false\n          schema:\n            type: string\n            default: desc\n            enum: [\"desc\", \"asc\"]\n        - in: query\n          name: resourceBookingId\n          required: false\n          schema:\n            type: string\n            format: uuid\n          description: The resource booking id.\n        - in: query\n          name: resourceBookingIds\n          required: false\n          schema:\n            oneOf:\n              - type: array\n                items:\n                  type: string\n                  format: uuid\n              - type: string\n          description: comma separated resource booking ids.\n        - in: query\n          name: paymentStatus\n          required: false\n          schema:\n            oneOf:\n              - type: array\n                items:\n                  type: string\n                  enum:\n                    [\n                      \"pending\",\n                      \"partially-completed\",\n                      \"completed\",\n                      \"in-progress\",\n                      \"failed\",\n                      \"no-days\",\n                    ]\n              - type: string\n                enum:\n                  [\n                    \"pending\",\n                    \"partially-completed\",\n                    \"completed\",\n                    \"in-progress\",\n                    \"failed\",\n                    \"no-days\",\n                  ]\n          description: comma separated payment status.\n        - in: query\n          name: startDate\n          required: false\n          schema:\n            type: string\n            format: date\n            pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          description: The work period start date.\n        - in: query\n          name: endDate\n          required: false\n          schema:\n            type: string\n            format: date\n            pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          description: The work period end date.\n        - in: query\n          name: userHandle\n          required: false\n          schema:\n            type: string\n          description: The user handle.\n        - in: query\n          name: projectId\n          required: false\n          schema:\n            type: integer\n          description: The project id.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/WorkPeriod\"\n          headers:\n            X-Next-Page:\n              schema:\n                type: integer\n                description: The index of the next page\n            X-Page:\n              schema:\n                type: integer\n                description: The index of the current page (starting at 1)\n            X-Per-Page:\n              schema:\n                type: integer\n                description: The number of items to list per page\n            X-Prev-Page:\n              schema:\n                type: integer\n                description: The index of the previous page\n            X-Total:\n              schema:\n                type: integer\n                description: The total number of items\n            X-Total-Pages:\n              schema:\n                type: integer\n                description: The total number of pages\n            Link:\n              schema:\n                type: string\n                description: Pagination link header.\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /work-periods/{id}:\n    get:\n      tags:\n        - WorkPeriods\n      description: |\n        Get work period by id.\n\n        **Authorization** Topcoder token with read work period scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The work period id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: query\n          name: fromDb\n          description: get data from db or not.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WorkPeriod\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      tags:\n        - WorkPeriods\n      description: |\n        Partial Update work period.\n\n        **Authorization** Topcoder token with update work period scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The id of work period.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/WorkPeriodPatchRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WorkPeriod\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /work-period-payments:\n    post:\n      tags:\n        - WorkPeriodPayments\n      description: |\n        Create Work Period Payment.\n\n        **Authorization** Topcoder token with write Work period payment scope is allowed\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/WorkPeriodPaymentCreateRequestBody\"\n                - type: array\n                  items:\n                    $ref: \"#/components/schemas/WorkPeriodPaymentCreateRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/WorkPeriodPayment\"\n                  - type: array\n                    items:\n                      oneOf:\n                        - $ref: \"#/components/schemas/WorkPeriodPayment\"\n                        - $ref: \"#/components/schemas/WorkPeriodPaymentCreatedError\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      tags:\n        - WorkPeriodPayments\n      description: |\n        Search work period payment.\n\n        **Authorization** Topcoder token with read work period payment scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            default: 1\n          description: The page number.\n        - in: query\n          name: perPage\n          required: false\n          schema:\n            type: integer\n            default: 20\n          description: The number of items to list per page.\n        - in: query\n          name: sortBy\n          required: false\n          schema:\n            type: string\n            default: createdAt\n            enum: [\"status\", \"amount\", \"createdAt\", \"updatedAt\"]\n          description: The sort by column.\n        - in: query\n          name: sortOrder\n          required: false\n          schema:\n            type: string\n            default: desc\n            enum: [\"desc\", \"asc\"]\n        - in: query\n          name: workPeriodId\n          required: false\n          schema:\n            type: string\n            format: uuid\n          description: The work period id.\n        - in: query\n          name: workPeriodIds\n          required: false\n          schema:\n            oneOf:\n              - type: array\n                items:\n                  type: string\n                  format: uuid\n              - type: string\n          description: comma separated work period ids.\n        - in: query\n          name: status\n          required: false\n          schema:\n            type: string\n            enum:\n              [\"completed\", \"scheduled\", \"in-progress\", \"failed\", \"cancelled\"]\n          description: The payment status.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/WorkPeriodPayment\"\n          headers:\n            X-Next-Page:\n              schema:\n                type: integer\n                description: The index of the next page\n            X-Page:\n              schema:\n                type: integer\n                description: The index of the current page (starting at 1)\n            X-Per-Page:\n              schema:\n                type: integer\n                description: The number of items to list per page\n            X-Prev-Page:\n              schema:\n                type: integer\n                description: The index of the previous page\n            X-Total:\n              schema:\n                type: integer\n                description: The total number of items\n            X-Total-Pages:\n              schema:\n                type: integer\n                description: The total number of pages\n            Link:\n              schema:\n                type: string\n                description: Pagination link header.\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /work-period-payments/query:\n    post:\n      tags:\n        - WorkPeriodPayments\n      description: |\n        Create Multiple Work Period Payments for all the pages at once.\n\n        **Authorization** Topcoder token with write Work period payment scope is allowed\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/WorkPeriodPaymentQueryCreateRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WorkPeriodPaymentQueryCreateResult\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /work-period-payments/{id}:\n    get:\n      tags:\n        - WorkPeriodPayments\n      description: |\n        Get work period payment by id.\n\n        **Authorization** Topcoder token with read work period payment scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The work period payment id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: query\n          name: fromDb\n          description: get data from db or not.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WorkPeriodPayment\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      tags:\n        - WorkPeriodPayments\n      description: |\n        Partial Update work period payment.\n\n        **Authorization** Topcoder token with update work period payment scope is allowed\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The id of work period payment.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/WorkPeriodPaymentPatchRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WorkPeriodPayment\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /work-period-payments/bulk:\n    post:\n      tags:\n        - WorkPeriodPayments\n      description: |\n        Create Work Period Payments in Bulk.\n\n        **Authorization** Topcoder token with write Work period payment scope is allowed\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: \"#/components/schemas/WorkPeriodPaymentCreateRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - $ref: \"#/components/schemas/WorkPeriodPayment\"\n                    - $ref: \"#/components/schemas/WorkPeriodPaymentCreatedError\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      tags:\n        - WorkPeriodPayments\n      description: |\n        Partial Update work period payments in bulk.\n\n        **Authorization** Topcoder token with update work period payment scope is allowed\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: \"#/components/schemas/WorkPeriodPaymentPatchRequestBodyInBulk\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - $ref: \"#/components/schemas/WorkPeriodPayment\"\n                    - $ref: \"#/components/schemas/WorkPeriodPaymentUpdatedError\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-teams:\n    get:\n      tags:\n        - Teams\n      description: |\n        Search my teams. Teams is project in topcoder with type=='talent-as-a-service'\n      parameters:\n        - in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            default: 1\n          description: The page number.\n        - in: query\n          name: perPage\n          required: false\n          schema:\n            type: integer\n            default: 20\n          description: The number of items to list per page.\n        - in: query\n          name: sortBy\n          required: false\n          schema:\n            type: string\n            default: createdAt\n            enum:\n              [\n                \"createdAt\",\n                \"updatedAt\",\n                \"lastActivityAt\",\n                \"id\",\n                \"status\",\n                \"name\",\n                \"type\",\n                \"best match\",\n              ]\n          description: The sort by column.\n        - in: query\n          name: sortOrder\n          required: false\n          schema:\n            type: string\n            default: desc\n            enum: [\"desc\", \"asc\"]\n          description: The sort order. Not allowed when sortBy is `best match`.\n        - in: query\n          name: name\n          required: false\n          schema:\n            type: string\n          description: filter by name, case-insensitive; support wildcard match.\n          example: \"*taas*\"\n      security:\n        - bearerAuth: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Team\"\n          headers:\n            X-Next-Page:\n              schema:\n                type: integer\n                description: The index of the next page\n            X-Page:\n              schema:\n                type: integer\n                description: The index of the current page (starting at 1)\n            X-Per-Page:\n              schema:\n                type: integer\n                description: The number of items to list per page\n            X-Prev-Page:\n              schema:\n                type: integer\n                description: The index of the previous page\n            X-Total:\n              schema:\n                type: integer\n                description: The total number of items\n            X-Total-Pages:\n              schema:\n                type: integer\n                description: The total number of pages\n            Link:\n              schema:\n                type: string\n                description: Pagination link header.\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-teams/{id}:\n    get:\n      tags:\n        - Teams\n      description: |\n        Gets the team details. Should check if user has permission on the project or not by checking if he is connect user or not\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n          description: The team/project id.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TeamDetail\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Not authorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-teams/{id}/jobs/{jobId}:\n    get:\n      tags:\n        - Teams\n      description: |\n        Gets the job details including all candidates. Should check if user has permission on the project or not by checking if he is connect user or not\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n          description: The team/project id.\n        - in: path\n          name: jobId\n          required: true\n          schema:\n            type: string\n            format: uuid\n          description: The job id.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/JobDetail\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Not authorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-teams/{id}/members:\n    post:\n      tags:\n        - Teams\n      description: |\n        Add members to a team by handle or email.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n          description: The team/project id.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddMembersRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AddMembersResponseBody\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Not authorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      tags:\n        - Teams\n      description: |\n        Search members in a team.\n        Serves as a proxy endpoint for `GET /projects/{projectId}/members`.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n          description: The team/project id.\n        - in: query\n          name: fields\n          required: false\n          schema:\n            type: string\n          description: Fields to be returned.\n        - in: query\n          name: role\n          required: false\n          schema:\n            type: string\n          description: Filtered by a specific role.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ProjectMember\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Not authorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /taas-teams/user-meeting-settings/{userId}:\n    get:\n      tags:\n        - UserMeetingSettings\n      description: |\n        Get the User's Meeting Settings.\n\n        **Authorization** This endpoint could be called by: \"hasManagePermission\" users, M2M tokens with scopes \"read:taas-userMeetingsSettings\" or \"all:taas-userMeetingsSettings\". Also any user can call this endpoint to get setting for themselves\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: userId\n          description: The userId\n          required: true\n          schema:\n            type: string\n            format: uuid\n\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserMeetingSettings\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-teams/user-meeting-settings/{userId}/calendars/{calendarId}:\n    delete:\n      tags:\n        - UserMeetingSettings\n      description: |\n        Delete a calendar from the User's Meeting Settings' nylasCalendars array.\n\n        This endpoint deletes a connected calendar in Nylas by deleting it from the nylasCalendars array inside UserMeetingSettings object.\n        Note, this does not delete the calendar in Nylas backend server - intentionally, it only deletes from UserMeetingSettings array.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: userId\n          description: The UUID of the User whose calendar should be deleted\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: path\n          name: calendarId\n          description: The id of the calendar to delete. This id comes from Nylas backend server\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /taas-teams/{id}/invites:\n    get:\n      tags:\n        - Teams\n      description: |\n        Search member invites for a team.\n        Serves as a proxy endpoint for `GET /projects/{projectId}/invites`.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n          description: The team/project id.\n        - in: query\n          name: fields\n          required: false\n          schema:\n            type: string\n          description: Fields to be returned.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ProjectMemberInvite\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Not authorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-teams/{id}/members/{projectMemberId}:\n    delete:\n      tags:\n        - Teams\n      description: |\n        Remove a member from a team.\n        Serves as a proxy endpoint for `DELETE /projects/{projectId}/members/{id}`.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n          description: The team/project id.\n        - in: path\n          name: projectMemberId\n          required: true\n          schema:\n            type: integer\n          description: The id of the project member.\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-teams/skills:\n    get:\n      tags:\n        - Teams\n      description: |\n        Serves as a proxy endpoint for /v5/skills, allowing to be accessed by any topcoder user.\n      parameters:\n        - in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            default: 1\n          description: The page number.\n        - in: query\n          name: perPage\n          required: false\n          schema:\n            type: integer\n            default: 20\n          description: The number of items to list per page.\n        - name: orderBy\n          in: query\n          schema:\n            type: string\n          description: \"Specify by which field to sort by. Sorts in ascending order only\"\n      security:\n        - bearerAuth: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/SkillInSkillsAPI\"\n          headers:\n            X-Next-Page:\n              schema:\n                type: integer\n                description: The index of the next page\n            X-Page:\n              schema:\n                type: integer\n                description: The index of the current page (starting at 1)\n            X-Per-Page:\n              schema:\n                type: integer\n                description: The number of items to list per page\n            X-Prev-Page:\n              schema:\n                type: integer\n                description: The index of the previous page\n            X-Total:\n              schema:\n                type: integer\n                description: The total number of items\n            X-Total-Pages:\n              schema:\n                type: integer\n                description: The total number of pages\n            Link:\n              schema:\n                type: string\n                description: Pagination link header.\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /taas-teams/getSkillsByJobDescription:\n    post:\n      tags:\n        - Teams\n      description: |\n        Get skill list by Job Description\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TeamJobDescriptionRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items: { $ref: \"#/components/schemas/SkillItem\" }\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-teams/email:\n    post:\n      tags:\n        - Teams\n      description: |\n        Send emails through one of predefined templates.\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TeamEmailRequestBody\"\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /taas-teams/me:\n    get:\n      tags:\n        - Teams\n      description: |\n        Return details about the current user.\n      security:\n        - bearerAuth: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UbahnUser\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-teams/sendRoleSearchRequest:\n    post:\n      tags:\n        - Teams\n      description: |\n        Perform a role search operaion\n\n        **Authorization** Any Topcoder user with valid token is allowed. For not logged users Topcoder m2m token with create:taas-roleSearchRequests scope is allowed.\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RoleSearchRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RoleSearchResponse\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-teams/submitTeamRequest:\n    post:\n      tags:\n        - Teams\n      description: |\n        Creates new Team in persistence and new project that will source this team in Connect.\n\n        **Authorization** Any Topcoder user with valid token is allowed. For not logged users Topcoder m2m token with create:taas-teams scope is allowed.\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SubmitTeamRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SubmitTeamResponse\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-teams/calculateAmount:\n    post:\n      tags:\n        - Teams\n      description: |\n        Calculates total amount for the team.\n\n        **Authorization** Any Topcoder user with valid token is allowed. For not logged users Topcoder m2m token with create:taas-teams scope is allowed.\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CalculateAmountRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CalculateAmountResponse\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-teams/createPayment:\n    post:\n      tags:\n        - Teams\n      description: |\n        Calculates total amount for the team.\n\n        **Authorization** Any Topcoder user with valid token is allowed. For not logged users Topcoder m2m token with create:taas-teams scope is allowed.\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreatePaymentRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CreatePaymentResponse\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-teams/isExternalMember:\n    post:\n      tags:\n        - Teams\n      description: |\n        Finds whether member is internal or external\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IsExternalMemberRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IsExternalMemberResponse\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-teams/members-suggest/{fragment}:\n    get:\n      tags:\n        - Teams\n      description: |\n        Returns suggested members for the given handle fragment\n      parameters:\n        - in: path\n          name: fragment\n          required: true\n          schema:\n            type: string\n      security:\n        - bearerAuth: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/SuggestedMember\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-roles:\n    post:\n      tags:\n        - Roles\n      description: |\n        Create Role.\n\n        **Authorization** Topcoder m2m token with create scope is allowed. Topcoder user token with administrator or bookingmanager role is allowed.\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RoleRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Role\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    get:\n      tags:\n        - Roles\n      description: |\n        Search roles.\n\n        **Authorization** Topcoder m2m token with read scope is allowed. Topcoder user token with any role is allowed.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: query\n          name: skillsList\n          required: false\n          schema:\n            type: string\n          description: comma separated skill names. case-insensitive.\n        - in: query\n          name: keyword\n          required: false\n          schema:\n            type: string\n          description: role name. case-insensitive. partial match allowed\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Role\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /taas-roles/{id}:\n    get:\n      tags:\n        - Roles\n      description: |\n        Get role by id.\n\n        **Authorization** Topcoder m2m token with read scope is allowed. Topcoder user token with any role is allowed.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The role id.\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - in: query\n          name: fromDb\n          description: get data from db or not.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Role\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    patch:\n      tags:\n        - Roles\n      description: |\n        Partial Update role.\n\n        **Authorization** Topcoder m2m token with update scope is allowed. Topcoder user token with administrator or bookingmanager role is allowed.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The id of role.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RolePatchRequestBody\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Role\"\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      tags:\n        - Roles\n      description: |\n        Delete the role.\n\n        **Authorization** Topcoder m2m token with delete scope is allowed. Topcoder user token with administrator or bookingmanager role is allowed.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: path\n          name: id\n          description: The id of role.\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"204\":\n          description: OK\n        \"400\":\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Not authenticated\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /health:\n    get:\n      tags:\n        - Health\n      description: |\n        Get health status of the app.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CheckRun\"\n        \"503\":\n          description: Service unavailable\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CheckRun\"\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    SkillItem:\n      properties:\n        id:\n          type: string\n          format: uuid\n        tag:\n          type: string\n          example: \"Java\"\n        type:\n          type: string\n          example: \"taas_skill\"\n        source:\n          type: string\n          example: \"taas-jd-parser\"\n\n    Job:\n      required:\n        - id\n        - projectId\n        - title\n        - numPositions\n        - skills\n        - status\n        - minSalary\n        - maxSalary\n        - hoursPerWeek\n        - jobLocation\n        - jobTimezone\n        - currency\n        - createdAt\n        - createdBy\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The job id.\"\n        projectId:\n          type: integer\n          example: 21\n          description: \"The project id.\"\n        externalId:\n          type: string\n          example: \"1212\"\n          description: \"The external id.\"\n        description:\n          type: string\n          example: \"Dummy Description\"\n          description: \"The description.\"\n        title:\n          type: string\n          example: \"Dummy title\"\n          description: \"The title.\"\n          maxLength: 64\n        startDate:\n          type: string\n          format: date\n          example: \"2020-09-27\"\n          description: \"The job start date.\"\n        duration:\n          type: integer\n          example: 1\n          description: \"The duration in weeks\"\n        numPositions:\n          type: integer\n          example: 13\n          description: \"The number of positions for the job.\"\n        resourceType:\n          type: string\n          example: \"Dummy Resource Type\"\n          description: \"The resource type of job.\"\n        rateType:\n          type: string\n          enum: [\"hourly\", \"daily\", \"weekly\", \"monthly\"]\n          description: \"The rate type of the job.\"\n        workload:\n          type: string\n          enum: [\"full-time\", \"fractional\"]\n          description: \"The workload of the job.\"\n        skills:\n          type: array\n          description: \"The skills.\"\n          items:\n            type: string\n            format: uuid\n            description: \"The skill id.\"\n        roleIds:\n          type: array\n          description: \"The roles.\"\n          items:\n            type: string\n            format: uuid\n            description: \"The role id.\"\n        status:\n          type: string\n          enum: [\"sourcing\", \"in-review\", \"assigned\", \"closed\", \"cancelled\"]\n          description: \"The job status.\"\n        candidates:\n          type: array\n          description: \"The job candidates.\"\n          items:\n            $ref: \"#/components/schemas/JobCandidate\"\n        isApplicationPageActive:\n          type: boolean\n          default: false\n        minSalary:\n          type: integer\n          example: 1000\n          description: \"the amount of minimum salary\"\n        maxSalary:\n          type: integer\n          example: 3000\n          description: \"the amount of maximum salary\"\n        hoursPerWeek:\n          type: integer\n          example: 20\n          description: \"the amount working hours per week\"\n        jobLocation:\n          type: string\n          example: \"Any location\"\n          description: \"the location of job\"\n        jobTimezone:\n          type: string\n          example: \"GMT\"\n          description: \"the timezone of job\"\n        currency:\n          type: string\n          example: \"USD\"\n          description: \"the currency of job\"\n        showInHotList:\n          type: boolean\n          default: false\n          description: \"Whether to show job in hot list\"\n        featured:\n          type: boolean\n          default: false\n          description: \"Whether a job is a featured job\"\n        hotListExcerpt:\n          type: string\n          default: ''\n          description: \"A text to show for the hotlist excerpt\"\n        jobTag:\n          type: string\n          default: ''\n          enum: [\"New\", \"$$$\", \"Hot\", \"\"]\n          description: \"the job tag\"\n        rcrmStatus:\n          type: string\n          default: null\n          enum: [null, \"Open\", \"On Hold\", \"Canceled\", \"Draft\", \"Closed\"]\n          description: \"the job rcrm status\"\n        rcrmReason:\n          type: string\n          default: null\n          description: \"the possible rcrm reason for current status\"\n        createdAt:\n          type: string\n          format: date-time\n          description: \"The job created date.\"\n        createdBy:\n          type: string\n          example: \"topocder user\"\n          description: \"The user who created the job.(Will get the user info from the token)\"\n        updatedAt:\n          type: string\n          format: date-time\n          description: \"The job last updated at.\"\n        updatedBy:\n          type: string\n          example: \"topcoder user\"\n          description: \"The user who updated the job last time.(Will get the user info from the token)\"\n    JobSearchBody:\n      properties:\n        bodySkills:\n          type: array\n          items:\n            type: string\n            format: uuid\n            description: \"The array of skill ids\"\n        jobIds:\n          type: array\n          items:\n            type: string\n            format: uuid\n            description: \"The array of job ids\"\n\n    JobRequestBody:\n      required:\n        - projectId\n        - title\n        - numPositions\n        - skills\n        - minSalary\n        - maxSalary\n        - hoursPerWeek\n        - jobLocation\n        - jobTimezone\n        - currency\n      properties:\n        projectId:\n          type: integer\n          example: 21\n          description: \"The project id.\"\n        externalId:\n          type: string\n          example: \"1212\"\n          description: \"The external id.\"\n        description:\n          type: string\n          example: \"Dummy Description\"\n          description: \"The description.\"\n        title:\n          type: string\n          example: \"Dummy title\"\n          description: \"The title.\"\n          maxLength: 64\n        status:\n          type: string\n          enum: [\"sourcing\", \"in-review\", \"assigned\", \"closed\", \"cancelled\"]\n          description: \"The job status.\"\n          default: sourcing\n        startDate:\n          type: string\n          format: date\n          example: \"2020-09-27\"\n          description: \"The job start date.\"\n        duration:\n          type: integer\n          example: 1\n          description: \"The duration in weeks\"\n        numPositions:\n          type: integer\n          example: 13\n          description: \"The number of positions for the job.\"\n        resourceType:\n          type: string\n          example: \"Dummy Resource Type\"\n          description: \"The resource type of job.\"\n        rateType:\n          type: string\n          enum: [\"hourly\", \"daily\", \"weekly\", \"monthly\"]\n          description: \"The rate type of the job.\"\n        workload:\n          type: string\n          enum: [\"full-time\", \"fractional\"]\n          description: \"The workload of the job.\"\n        skills:\n          type: array\n          description: \"The skills.\"\n          items:\n            type: string\n            format: uuid\n            description: \"The skill id.\"\n        roleIds:\n          type: array\n          description: \"The roles.\"\n          items:\n            type: string\n            format: uuid\n            description: \"The role id.\"\n        showInHotList:\n          type: boolean\n          default: false\n        featured:\n          type: boolean\n          default: false\n        hotListExcerpt:\n          type: string\n          example: \"This is very hot job\"\n          description: \"The further instruction to show for the hot job\"\n        jobTag:\n          type: string\n          enum: [\"\", \"New\", \"$$$\", \"Hot\"]\n          description: \"The tag of a job\"\n        rcrmStatus:\n          type: string\n          default: null\n          enum: [null, \"Open\", \"On Hold\", \"Canceled\", \"Draft\", \"Closed\"]\n          description: \"the job rcrm status\"\n        rcrmReason:\n          type: string\n          default: null\n          description: \"the possible rcrm reason for current status\"\n        isApplicationPageActive:\n          type: boolean\n          default: false\n        minSalary:\n          type: integer\n          example: 1000\n          description: \"the amount of minimum salary\"\n        maxSalary:\n          type: integer\n          example: 3000\n          description: \"the amount of maximum salary\"\n        hoursPerWeek:\n          type: integer\n          example: 20\n          description: \"the amount working hours per week\"\n        jobLocation:\n          type: string\n          example: \"Any location\"\n          description: \"the location of job\"\n        jobTimezone:\n          type: string\n          example: \"GMT\"\n          description: \"the timezone of job\"\n        currency:\n          type: string\n          example: \"USD\"\n          description: \"the currency of job\"\n    JobCandidate:\n      required:\n        - id\n        - jobId\n        - userId\n        - status\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The job id.\"\n        jobId:\n          type: string\n          format: uuid\n          description: \"The project id.\"\n        userId:\n          type: string\n          format: uuid\n          example: \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\"\n          description: \"The user id.\"\n        status:\n          type: string\n          enum:\n            [\n              \"open\",\n              \"placed\",\n              \"selected\",\n              \"client rejected - screening\",\n              \"client rejected - interview\",\n              \"rejected - other\",\n              \"cancelled\",\n              \"interview\",\n              \"topcoder-rejected\",\n              \"applied\",\n              \"rejected-pre-screen\",\n              \"skills-test\",\n              \"phone-screen\",\n              \"job-closed\",\n              \"offered\",\n              \"withdrawn\",\n              \"withdrawn-prescreen\",\n            ]\n          description: \"The job candidate status.\"\n        externalId:\n          type: string\n          example: \"1212\"\n          description: \"The external id.\"\n        resume:\n          type: string\n          example: \"http://example.com\"\n          description: \"The resume link\"\n        remark:\n          type: string\n          example: \"excellent\"\n          description: \"The remark of candidate\"\n        createdAt:\n          type: string\n          format: date-time\n          description: \"The job created date.\"\n        createdBy:\n          type: string\n          example: \"topocder user\"\n          description: \"The user who created the job.(Will get the user info from the token)\"\n        updatedAt:\n          type: string\n          format: date-time\n          description: \"The job last updated at.\"\n        updatedBy:\n          type: string\n          example: \"topcoder user\"\n          description: \"The user who updated the job last time.(Will get the user info from the token)\"\n    JobCandidateInterviewsIncluded:\n      required:\n        - id\n        - jobId\n        - userId\n        - status\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The job id.\"\n        jobId:\n          type: string\n          format: uuid\n          description: \"The project id.\"\n        userId:\n          type: string\n          format: uuid\n          example: \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\"\n          description: \"The user id.\"\n        status:\n          type: string\n          enum:\n            [\n              \"open\",\n              \"selected\",\n              \"shortlist\",\n              \"rejected\",\n              \"cancelled\",\n              \"interview\",\n            ]\n          description: \"The job candidate status.\"\n        externalId:\n          type: string\n          example: \"1212\"\n          description: \"The external id.\"\n        resume:\n          type: string\n          example: \"http://example.com\"\n          description: \"The resume link\"\n        remark:\n          type: string\n          example: \"excellent\"\n          description: \"The remark of candidate\"\n        interviews:\n          type: array\n          description: \"Interviews associated to this job candidate.\"\n          items:\n            $ref: \"#/components/schemas/Interview\"\n        createdAt:\n          type: string\n          format: date-time\n          description: \"The job created date.\"\n        createdBy:\n          type: string\n          example: \"topocder user\"\n          description: \"The user who created the job.(Will get the user info from the token)\"\n        updatedAt:\n          type: string\n          format: date-time\n          description: \"The job last updated at.\"\n        updatedBy:\n          type: string\n          example: \"topcoder user\"\n          description: \"The user who updated the job last time.(Will get the user info from the token)\"\n    JobCandidateSearchBody:\n      properties:\n        statuses:\n          type: array\n          items:\n            type: string\n            enum:\n              [\n                \"open\",\n                \"placed\",\n                \"selected\",\n                \"client rejected - screening\",\n                \"client rejected - interview\",\n                \"rejected - other\",\n                \"cancelled\",\n                \"interview\",\n                \"topcoder-rejected\",\n                \"applied\",\n                \"rejected-pre-screen\",\n                \"skills-test\",\n                \"phone-screen\",\n                \"job-closed\",\n                \"offered\",\n                \"withdrawn\",\n                \"withdrawn-prescreen\",\n              ]\n            description: \"The array of job Candidates status\"\n    JobCandidateResume:\n        type: string\n        format: binary\n    JobCandidateRequestBody:\n      required:\n        - jobId\n        - userId\n      properties:\n        jobId:\n          type: string\n          format: uuid\n          description: \"The project id.\"\n        userId:\n          type: string\n          format: uuid\n          example: \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\"\n          description: \"The user id.\"\n        status:\n          type: string\n          enum:\n            [\n              \"open\",\n              \"placed\",\n              \"selected\",\n              \"client rejected - screening\",\n              \"client rejected - interview\",\n              \"rejected - other\",\n              \"cancelled\",\n              \"interview\",\n              \"topcoder-rejected\",\n              \"applied\",\n              \"rejected-pre-screen\",\n              \"skills-test\",\n              \"phone-screen\",\n              \"job-closed\",\n              \"offered\",\n              \"withdrawn\",\n              \"withdrawn-prescreen\",\n            ]\n          description: \"The job candidate status.\"\n          default: open\n        externalId:\n          type: string\n          example: \"1212\"\n          description: \"The external id.\"\n        resume:\n          type: string\n          example: \"http://example.com\"\n          description: \"The resume link\"\n        remark:\n          type: string\n          example: \"excellent\"\n          description: \"The remark of candidate\"\n    JobCandidatePatchRequestBody:\n      properties:\n        status:\n          type: string\n          enum:\n            [\n              \"open\",\n              \"placed\",\n              \"selected\",\n              \"client rejected - screening\",\n              \"client rejected - interview\",\n              \"rejected - other\",\n              \"cancelled\",\n              \"interview\",\n              \"topcoder-rejected\",\n              \"applied\",\n              \"rejected-pre-screen\",\n              \"skills-test\",\n              \"phone-screen\",\n              \"job-closed\",\n              \"offered\",\n              \"withdrawn\",\n              \"withdrawn-prescreen\",\n            ]\n        externalId:\n          type: string\n          example: \"1212\"\n          description: \"The external id.\"\n        resume:\n          type: string\n          example: \"http://example.com\"\n          description: \"The resume link\"\n        remark:\n          type: string\n          example: \"excellent\"\n          description: \"The remark of candidate\"\n    Interview:\n      required:\n        - id\n        - jobCandidateId\n        - round\n        - status\n        - createdAt\n        - createdBy\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The interview id.\"\n        jobCandidateId:\n          type: string\n          format: uuid\n          description: \"The job candidate id.\"\n        round:\n          type: integer\n          example: 1\n          description: \"The interview round.\"\n        duration:\n          type: integer\n          example: 30\n          description: \"The interview duration (in minutes).\"\n        startTimestamp:\n          type: string\n          format: date-time\n          description: \"Interview start time.\"\n        endTimestamp:\n          type: string\n          format: date-time\n          description: \"Interview end time.\"\n        hostTimezone:\n          type: string\n          description: \"Timezone of interview host.\"\n        guestTimezone:\n          type: string\n          description: \"Timezone of interview candidate.\"\n        nylasPageId:\n          type: string\n          description: 'Associated Nylas page id.'\n        nylasPageSlug:\n          type: string\n          description: 'Associated Nylas page slug.'\n        nylasCalendarId:\n          type: string\n          description: 'Associated Nylas calendar id.'\n        nylasEventId:\n          type: string\n          description: 'Associated Nylas event id.'\n        nylasEventEditHash:\n          type: string\n          description: 'Associated Nylas event edit hash.'\n        status:\n          type: string\n          enum:\n            [\n              \"Scheduling\",\n              \"Scheduled\",\n              \"Requested for reschedule\",\n              \"Rescheduled\",\n              \"Completed\",\n              \"Cancelled\",\n            ]\n          description: \"The interview status.\"\n        createdAt:\n          type: string\n          format: date-time\n          description: \"The interview created date.\"\n        createdBy:\n          type: string\n          format: uuid\n          description: \"The user who created the interview.(Will get the user info from the token)\"\n        updatedAt:\n          type: string\n          format: date-time\n          description: \"The interview last updated at.\"\n        updatedBy:\n          type: string\n          format: uuid\n          description: \"The user who updated the interview last time.(Will get the user info from the token)\"\n    CandidateInterview:\n      required:\n        - id\n        - jobCandidateId\n        - round\n        - status\n        - createdAt\n        - createdBy\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The interview id.\"\n        hostFirstName:\n          type: string\n          example: \"nkumar\"\n          description: \"The firstName of the interview host\"\n        hostLastName:\n          type: string\n          example: \"nkumar\"\n          description: \"The lastName of the interview host\"\n        hostHandle:\n          type: string\n          example: \"nkumartest\"\n          description: \"The handle of the interview host\"\n        hostUserId:\n          type: string\n          example: \"00000000-0000-0000-0000-000000000000\"\n          description: \"The userId of the interview host\"\n        jobCandidateId:\n          type: string\n          format: uuid\n          description: \"The job candidate id.\"\n        round:\n          type: integer\n          example: 1\n          description: \"The interview round.\"\n        duration:\n          type: integer\n          example: 30\n          description: \"The interview duration (in minutes).\"\n        startTimestamp:\n          type: string\n          format: date-time\n          description: \"Interview start time.\"\n        endTimestamp:\n          type: string\n          format: date-time\n          description: \"Interview end time.\"\n        status:\n          type: string\n          enum:\n            [\n              \"Scheduling\",\n              \"Scheduled\",\n              \"Requested for reschedule\",\n              \"Rescheduled\",\n              \"Completed\",\n              \"Cancelled\",\n            ]\n          description: \"The interview status.\"\n        createdAt:\n          type: string\n          format: date-time\n          description: \"The interview created date.\"\n        createdBy:\n          type: string\n          format: uuid\n          description: \"The user who created the interview.(Will get the user info from the token)\"\n        updatedAt:\n          type: string\n          format: date-time\n          description: \"The interview last updated at.\"\n        updatedBy:\n          type: string\n          format: uuid\n          description: \"The user who updated the interview last time.(Will get the user info from the token)\"\n    RequestInterviewBody:\n      required:\n        - duration\n        - hostTimezone\n        - availableTime\n      properties:\n        duration:\n          type: integer\n          example: 30\n          description: \"duration of the interview\"\n        hostTimezone:\n          type: string\n          example: \"Europe/London\"\n        availableTime:\n          type: array\n          items:\n            type: object\n            required:\n              - days\n              - start\n              - end\n            properties:\n              days:\n                type: array\n                items:\n                  type: string\n                  enum: [\"M\", \"T\", \"W\", \"R\", \"F\", \"S\", \"U\"]\n              start:\n                type: string\n                example: \"09:00\"\n                pattern: \"^[0-9]{1,2}:[0-9]{2}$\"\n              end:\n                type: string\n                example: \"10:00\"\n                pattern: \"^[0-9]{1,2}:[0-9]{2}$\"\n        hostUserId:\n          type: string\n          format: uuid\n\n    UpdateInterviewByRequestBody:\n      properties:\n        duration:\n          type: integer\n          example: 30\n          description: \"duration of the interview\"\n        hostTimezone:\n          type: string\n          example: \"Europe/London\"\n        hostUserId:\n          type: string\n          description: \"UUID of interview host user\"\n        expireTimestamp:\n          type: string\n          format: date-time\n          description: \"Interview expiry time stamp.\"\n        availableTime:\n          type: array\n          items:\n            type: object\n            required:\n              - days\n              - start\n              - end\n            properties:\n              days:\n                type: array\n                items:\n                  type: string\n                  enum: [\"M\", \"T\", \"W\", \"R\", \"F\", \"S\", \"U\"]\n              start:\n                type: string\n                example: \"09:00\"\n                pattern: \"^[0-9]{1,2}:[0-9]{2}$\"\n              end:\n                type: string\n                example: \"10:00\"\n                pattern: \"^[0-9]{1,2}:[0-9]{2}$\"\n        startTimestamp:\n          type: string\n          format: date-time\n          description: \"Interview start time.\"\n        endTimestamp:\n          type: string\n          format: date-time\n          description: \"Interview end time.\"\n        status:\n          type: string\n          enum: [\"Scheduling\", \"Scheduled\", \"Requested for reschedule\", \"Rescheduled\", \"Completed\", \"Cancelled\", \"Expired\"]\n        deletedAt:\n          type: string\n          format: date-time\n\n    JobPatchRequestBody:\n      properties:\n        status:\n          type: string\n          enum: [\"sourcing\", \"in-review\", \"assigned\", \"closed\", \"cancelled\"]\n        description:\n          type: string\n          example: \"Dummy Description\"\n          description: \"The description.\"\n        startDate:\n          type: string\n          format: date\n          example: \"2020-09-27\"\n          description: \"The job start date.\"\n        duration:\n          type: integer\n          example: 1\n          description: \"The duration in weeks\"\n        numPositions:\n          type: integer\n          example: 13\n          description: \"The number of positions for the job.\"\n        resourceType:\n          type: string\n          example: \"Dummy Resource Type\"\n          description: \"The resource type of job.\"\n        rateType:\n          type: string\n          enum: [\"hourly\", \"daily\", \"weekly\", \"monthly\"]\n          description: \"The rate type of the job.\"\n        workload:\n          type: string\n          enum: [\"full-time\", \"fractional\"]\n          description: \"The workload of the job.\"\n        skills:\n          type: array\n          description: \"The skills.\"\n          items:\n            type: string\n            format: uuid\n            description: \"The skill id.\"\n        roleIds:\n          type: array\n          description: \"The roles.\"\n          items:\n            type: string\n            format: uuid\n            description: \"The role id.\"\n        showInHotList:\n          type: boolean\n          default: false\n        featured:\n          type: boolean\n          default: false\n        hotListExcerpt:\n          type: string\n          example: \"This is very hot job\"\n          description: \"The further instruction to show for the hot job\"\n        jobTag:\n          type: string\n          enum: [\"\", \"New\", \"$$$\", \"Hot\"]\n          description: \"The tag of a job\"\n        rcrmStatus:\n          type: string\n          default: null\n          enum: [null, \"Open\", \"On Hold\", \"Canceled\", \"Draft\", \"Closed\"]\n          description: \"the job rcrm status\"\n        rcrmReason:\n          type: string\n          default: null\n          description: \"the possible rcrm reason for current status\"\n        isApplicationPageActive:\n          type: boolean\n          default: false\n        minSalary:\n          type: integer\n          example: 1000\n          description: \"the amount of minimum salary\"\n        maxSalary:\n          type: integer\n          example: 3000\n          description: \"the amount of maximum salary\"\n        hoursPerWeek:\n          type: integer\n          example: 20\n          description: \"the amount working hours per week\"\n        jobLocation:\n          type: string\n          example: \"Any location\"\n          description: \"the location of job\"\n        jobTimezone:\n          type: string\n          example: \"GMT\"\n          description: \"the timezone of job\"\n        currency:\n          type: string\n          example: \"USD\"\n          description: \"the currency of job\"\n    ResourceBooking:\n      required:\n        - id\n        - projectId\n        - userId\n        - status\n        - rateType\n        - createdAt\n        - createdBy\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The job id.\"\n        projectId:\n          type: integer\n          example: 21\n          description: \"The project id.\"\n        userId:\n          type: string\n          format: uuid\n          example: \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\"\n          description: \"The external id.\"\n        jobId:\n          type: string\n          format: uuid\n          description: \"The external id.\"\n        status:\n          type: string\n          enum: [\"placed\", \"closed\", \"cancelled\"]\n          description: \"The job status.\"\n        startDate:\n          type: string\n          format: date\n          example: \"2020-09-27\"\n          description: \"The job start date.\"\n        endDate:\n          type: string\n          format: date\n          example: \"2020-09-28\"\n          description: \"The job end date.\"\n        memberRate:\n          type: integer\n          format: float\n          example: 13\n          description: \"The member rate.\"\n        sendWeeklySurvey:\n          type: boolean\n          example: true,\n          description: \"whether we should send weekly survey to this ResourceBooking or no\"\n        customerRate:\n          type: integer\n          format: float\n          example: 13\n          description: \"The customer rate.\"\n        rateType:\n          type: string\n          enum: [\"hourly\", \"daily\", \"weekly\", \"monthly\"]\n          description: \"The rate type of the job.\"\n        billingAccountId:\n          type: integer\n          example: 80000071\n          description: \"the billing account id for payments\"\n        workPeriods:\n          type: array\n          description: \"The work periods related with resource booking\"\n          items:\n            $ref: \"#/components/schemas/WorkPeriod\"\n        createdAt:\n          type: string\n          format: date-time\n          description: \"The job created date.\"\n        createdBy:\n          type: string\n          example: \"topocder user\"\n          description: \"The user who created the job.(Will get the user info from the token)\"\n        updatedAt:\n          type: string\n          format: date-time\n          description: \"The job last updated at.\"\n        updatedBy:\n          type: string\n          example: \"topcoder user\"\n          description: \"The user who updated the job last time.(Will get the user info from the token)\"\n    ResourceBookingSearchBody:\n      properties:\n        jobIds:\n          type: array\n          items:\n            type: string\n            format: uuid\n            description: \"The array of job ids\"\n    ResourceBookingRequestBody:\n      required:\n        - projectId\n        - userId\n        - rateType\n      properties:\n        projectId:\n          type: integer\n          example: 21\n          description: \"The project id.\"\n        userId:\n          type: string\n          format: uuid\n          example: \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\"\n          description: \"The external id.\"\n        sendWeeklySurvey:\n          type: boolean\n          example: true,\n          description: \"whether we should send weekly survey to this ResourceBooking or no\"\n        jobId:\n          type: string\n          format: uuid\n          description: \"The job id.\"\n        status:\n          type: string\n          enum: [\"placed\", \"closed\", \"cancelled\"]\n          description: \"The job status.\"\n          default: sourcing\n        startDate:\n          type: string\n          format: date\n          example: \"2020-09-27\"\n          description: \"The job start date.\"\n        endDate:\n          type: string\n          format: date\n          example: \"2020-09-28\"\n          description: \"The job end date.\"\n        memberRate:\n          type: number\n          format: float\n          example: 13.23\n          description: \"The member rate.\"\n        customerRate:\n          type: number\n          format: float\n          example: 13\n          description: \"The customer rate.\"\n        rateType:\n          type: string\n          enum: [\"hourly\", \"daily\", \"weekly\", \"monthly\"]\n          description: \"The rate type of the job.\"\n        billingAccountId:\n          type: integer\n          example: 80000071\n          description: \"the billing account id for payments\"\n    ResourceBookingPatchRequestBody:\n      properties:\n        status:\n          type: string\n          enum: [\"placed\", \"closed\", \"cancelled\"]\n        startDate:\n          type: string\n          format: date\n          example: \"2020-09-27\"\n          description: \"The job start date.\"\n        endDate:\n          type: string\n          format: date\n          example: \"2020-09-28\"\n          description: \"The job end date.\"\n        memberRate:\n          type: number\n          format: float\n          example: 13.23\n          description: \"The member rate.\"\n        sendWeeklySurvey:\n          type: boolean\n          example: true,\n          description: \"whether we should send weekly survey to this ResourceBooking or no\"\n        customerRate:\n          type: number\n          format: float\n          example: 13\n          description: \"The customer rate.\"\n        rateType:\n          type: string\n          enum: [\"hourly\", \"daily\", \"weekly\", \"monthly\"]\n          description: \"The rate type of the job.\"\n        billingAccountId:\n          type: integer\n          example: 80000071\n          description: \"the billing account id for payments\"\n    WorkPeriod:\n      required:\n        - id\n        - resourceBookingId\n        - userHandle\n        - projectId\n        - startDate\n        - endDate\n        - daysWorked\n        - daysPaid\n        - paymentTotal\n        - paymentStatus\n        - createdAt\n        - createdBy\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The work period id.\"\n        resourceBookingId:\n          type: string\n          format: uuid\n          description: \"The resource booking id.\"\n        sentSurvey:\n          type: boolean\n          example: true\n          description: \"whether we've already sent a survey for this WorkPeriod of no\"\n        sentSurveyError:\n          description: \"error details if error happened during sending survey\"\n          type: object\n          properties:\n            errorMessage:\n              type: string\n              example: \"error message\"\n              description: \"The error message\"\n            errorCode:\n              type: integer\n              example: 429\n              description: \"HTTP code of error\"\n        userHandle:\n          type: string\n          example: \"eisbilir\"\n          description: \"The user handle.\"\n        projectId:\n          type: integer\n          example: 123\n          description: \"The project id.\"\n        startDate:\n          type: string\n          format: date\n          example: \"2021-03-07\"\n          description: \"The start date of work period. Should be always Sunday.\"\n        endDate:\n          type: string\n          format: date\n          example: \"2021-03-13\"\n          description: \"The end date of work period. Should be always Saturday.\"\n        daysWorked:\n          type: integer\n          minimum: 0\n          maximum: 10\n          example: 2\n          description: \"The count of the days worked for that work period.\"\n        daysPaid:\n          type: integer\n          minimum: 0\n          maximum: 5\n          format: integer\n          example: 1\n          description: \"The count of paid days for that work period\"\n        paymentTotal:\n          type: integer\n          format: float\n          example: 13.13\n          description: \"The total paid amount\"\n        paymentStatus:\n          type: string\n          enum:\n            [\n              \"pending\",\n              \"partially-completed\",\n              \"completed\",\n              \"in-progress\",\n              \"failed\",\n              \"no-days\",\n            ]\n          description: \"The payment status.\"\n        payments:\n          type: array\n          description: \"The payments related with work period\"\n          items:\n            $ref: \"#/components/schemas/WorkPeriodPayment\"\n        createdAt:\n          type: string\n          format: date-time\n          description: \"The work period created date.\"\n        createdBy:\n          type: string\n          format: uuid\n          description: \"The user Id who created the work period.(Will get the user info from the token)\"\n        updatedAt:\n          type: string\n          format: date-time\n          description: \"The work period last updated at.\"\n        updatedBy:\n          type: string\n          format: uuid\n          description: \"The user Id who updated the work period last time.(Will get the user info from the token)\"\n    WorkPeriodPatchRequestBody:\n      properties:\n        daysWorked:\n          type: integer\n          minimum: 0\n          maximum: 10\n          example: 2\n          description: \"The count of the days worked for that work period.\"\n        sentSurvey:\n          type: boolean\n          example: true\n          description: \"whether we've already sent a survey for this WorkPeriod of no\"\n        sentSurveyError:\n          description: \"error details if error happened during sending survey\"\n          type: object\n          properties:\n            errorMessage:\n              type: string\n              example: \"error message\"\n              description: \"The error message\"\n            errorCode:\n              type: integer\n              example: 429\n              description: \"HTTP code of error\"\n    WorkPeriodPayment:\n      required:\n        - id\n        - workPeriodId\n        - memberRate\n        - days\n        - amount\n        - status\n        - billingAccountId\n        - createdAt\n        - createdBy\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The work period payment id.\"\n        workPeriodId:\n          type: string\n          format: uuid\n          description: \"The work period id.\"\n        challengeId:\n          type: string\n          format: uuid\n          description: \"The challenge id.\"\n        memberRate:\n          type: number\n          format: float\n          example: 20.5\n          description: \"The member rate\"\n        customerRate:\n          type: number\n          format: float\n          example: 15.5\n          description: \"The customer rate\"\n        days:\n          type: integer\n          minimum: 1\n          maximum: 5\n          example: 3\n          description: \"The workdays to pay\"\n        amount:\n          type: integer\n          example: 2\n          description: \"The amount to be paid.\"\n        status:\n          type: string\n          enum: [\"completed\", \"scheduled\", \"in-progress\", \"failed\", \"cancelled\"]\n          description: \"The payment status.\"\n        statusDetails:\n          type: object\n          properties:\n            errorMessage:\n              type: string\n            errorCode:\n              type: integer\n            retry:\n              type: integer\n            step:\n              type: string\n            challengeId:\n              type: string\n              format: uuid\n        billingAccountId:\n          type: integer\n          example: 80000071\n          description: \"the billing account id for payments\"\n        createdAt:\n          type: string\n          format: date-time\n          description: \"The work period payment created date.\"\n        createdBy:\n          type: string\n          format: uuid\n          description: \"The user Id who created the work period payment.(Will get the user info from the token)\"\n        updatedAt:\n          type: string\n          format: date-time\n          description: \"The work period payment last updated at.\"\n        updatedBy:\n          type: string\n          format: uuid\n          description: \"The user Id who updated the work period payment last time.(Will get the user info from the token)\"\n    WorkPeriodPaymentCreatedError:\n      required:\n        - workPeriodId\n      properties:\n        workPeriodId:\n          type: string\n          format: uuid\n          description: \"The work period id.\"\n        amount:\n          type: integer\n          example: 2\n          description: \"The amount to be paid.\"\n        error:\n          type: object\n          properties:\n            message:\n              type: string\n              description: \"The error message\"\n            code:\n              type: integer\n              example: 429\n              description: \"HTTP code of error\"\n    WorkPeriodPaymentCreateRequestBody:\n      required:\n        - workPeriodId\n      properties:\n        workPeriodId:\n          type: string\n          format: uuid\n          description: \"The work period id.\"\n        days:\n          type: integer\n          minimum: 0\n          maximum: 10\n          example: 2\n          description: \"The workDays to be paid.\"\n        amount:\n          type: integer\n          minimum: 1\n          example: 200\n          description: \"The amount to be paid. Required only if days value is 0, otherwise forbidden.\"\n    WorkPeriodPaymentQueryCreateRequestBody:\n      properties:\n        status:\n          type: string\n          enum: [\"placed\", \"in-progress\", \"completed\"]\n          description: The resource booking status.\n        startDate:\n          type: string\n          format: date\n          description: The resource booking start date.\n        endDate:\n          type: string\n          format: date\n          description: The resource booking end date.\n        rateType:\n          type: string\n          enum: [\"hourly\", \"daily\", \"weekly\", \"monthly\"]\n          description: The resource booking rate type.\n        jobId:\n          type: string\n          format: uuid\n          description: The job id.\n        userId:\n          type: string\n          format: uuid\n          description: The user id.\n        projectId:\n          type: integer\n          description: The project id.\n        projectIds:\n          oneOf:\n            - type: string\n              description: comma separated project ids.\n            - type: array\n              items:\n                type: integer\n        workPeriods.paymentStatus:\n          type: string\n          enum: [\"pending\", \"partially-completed\", \"failed\"]\n        workPeriods.startDate:\n          type: string\n          format: date\n          pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          description: The work period start date.\n        workPeriods.endDate:\n          type: string\n          format: date\n          pattern: '^\\d{4}-\\d{2}-\\d{2}$'\n          description: The work period end date.\n        workPeriods.userHandle:\n          type: string\n          description: The user handle.\n    WorkPeriodPaymentQueryCreateResult:\n      properties:\n        total:\n          type: integer\n          description: The total Work Periods found.\n        totalSuccess:\n          type: integer\n          description: The total payments scheduled successfully.\n        totalError:\n          type: integer\n          description: The total payments which failed to get scheduled.\n        query:\n          $ref: \"#/components/schemas/WorkPeriodPaymentQueryCreateRequestBody\"\n    WorkPeriodPaymentPatchRequestBody:\n      properties:\n        status:\n          type: string\n          enum: [\"scheduled\", \"cancelled\"]\n          description: \"The payment status.\"\n        memberRate:\n          type: integer\n          format: float\n          example: 13\n          description: \"The member rate.\"\n        customerRate:\n          type: integer\n          format: float\n          example: 13\n          description: \"The customer rate.\"\n        billingAccountId:\n          type: integer\n          example: 80000071\n          description: \"the billing account id for payments\"\n        days:\n          type: integer\n          minimum: 0\n          example: 3\n          description: \"The workdays to pay\"\n        amount:\n          type: integer\n          format: float\n          example: 2\n          description: \"The amount to be paid.\"\n    WorkPeriodPaymentPatchRequestBodyInBulk:\n      allOf:\n        - type: object\n          required:\n            - id\n          properties:\n            id:\n              type: string\n              format: uuid\n              description: \"The work period payment id.\"\n        - $ref: \"#/components/schemas/WorkPeriodPaymentPatchRequestBody\"\n    WorkPeriodPaymentUpdatedError:\n      allOf:\n        - $ref: \"#/components/schemas/WorkPeriodPaymentPatchRequestBodyInBulk\"\n        - type: object\n          properties:\n            error:\n              type: object\n              properties:\n                message:\n                  type: string\n                  description: \"The error message\"\n                code:\n                  type: integer\n                  example: 429\n                  description: \"HTTP code of error\"\n    CheckRun:\n      type: object\n      properties:\n        checksRun:\n          type: integer\n      required:\n        - checksRun\n    Team:\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The team id.\"\n        name:\n          type: string\n          example: \"1212\"\n          description: \"The team name.\"\n        invites:\n          type: array\n          items:\n            type: object\n          description: \"The invites of the project\"\n          example:\n            [\n              {\n                \"createdAt\": \"2021-02-08T09:21:00.885Z\",\n                \"createdBy\": 40159127,\n                \"deletedBy\": null,\n                \"email\": null,\n                \"id\": 3008,\n                \"projectId\": 16819,\n                \"role\": \"customer\",\n                \"status\": \"pending\",\n                \"updatedAt\": \"2021-02-08T09:21:00.885Z\",\n                \"updatedBy\": 40159127,\n                \"userId\": 40153913,\n              },\n            ]\n        members:\n          type: array\n          items:\n            type: object\n          description: \"The members of the project\"\n          example:\n            [\n              {\n                \"lastName\": \"L_NAME\",\n                \"role\": \"customer\",\n                \"updatedBy\": 21926562,\n                \"handle\": \"Tester123\",\n                \"userId\": 21926562,\n                \"deletedBy\": null,\n                \"createdAt\": \"2021-01-12T10:58:26.237Z\",\n                \"firstName\": \"F_NAME\",\n                \"createdBy\": 21926562,\n                \"isPrimary\": false,\n                \"id\": 13833,\n                \"projectId\": 16893,\n                \"email\": \"email@domain.com.z\",\n                \"updatedAt\": \"2021-01-12T10:58:26.237Z\",\n              },\n            ]\n        startDate:\n          type: string\n          format: date-time\n          example: \"2020-09-27T04:17:23.131Z\"\n          description: \"The start date.\"\n        endDate:\n          type: string\n          format: date-time\n          example: \"2020-09-27T04:17:23.131Z\"\n          description: \"The end date.\"\n        weeklyCost:\n          type: number\n          format: decimal\n          example: 5000.50\n          description: \"The average weekly cost\"\n        totalPositions:\n          type: integer\n          description: \"The sum of number of positions opening in all job\"\n        resources:\n          type: array\n          description: \"The rosources that are assigned\"\n          items:\n            $ref: \"#/components/schemas/ResourceUserInfo\"\n    User:\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The user id.\"\n        handle:\n          type: string\n          example: \"Tony\"\n          description: \"The project id.\"\n        photo_url:\n          type: string\n          format: url\n          example: \"https://topcoder-dev-media.s3.amazonaws.com/member/profile/TonyJ-1604301092491.jpeg\"\n          description: \"The user avatar.\"\n        firstName:\n          type: string\n          example: \"Tony\"\n          description: \"The first name of user\"\n        lastName:\n          type: string\n          example: \"J\"\n          description: \"The last name of user\"\n    ResourceUserInfo:\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The resource booking id.\"\n        userId:\n          type: string\n          format: uuid\n          description: \"The user id.\"\n        handle:\n          type: string\n          example: \"Tony\"\n          description: \"The project id.\"\n        photo_url:\n          type: string\n          format: url\n          example: \"https://topcoder-dev-media.s3.amazonaws.com/member/profile/TonyJ-1604301092491.jpeg\"\n          description: \"The user avatar.\"\n        firstName:\n          type: string\n          example: \"Tony\"\n          description: \"The first name of user\"\n        lastName:\n          type: string\n          example: \"J\"\n          description: \"The last name of user\"\n    TeamDetail:\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The team id.\"\n        name:\n          type: string\n          example: \"1212\"\n          description: \"The team name.\"\n        invites:\n          type: array\n          items:\n            type: object\n          description: \"The invites of the project\"\n          example:\n            [\n              {\n                \"createdAt\": \"2021-02-08T09:21:00.885Z\",\n                \"createdBy\": 40159127,\n                \"deletedBy\": null,\n                \"email\": null,\n                \"id\": 3008,\n                \"projectId\": 16819,\n                \"role\": \"customer\",\n                \"status\": \"pending\",\n                \"updatedAt\": \"2021-02-08T09:21:00.885Z\",\n                \"updatedBy\": 40159127,\n                \"userId\": 40153913,\n              },\n            ]\n        members:\n          type: array\n          items:\n            type: object\n          description: \"The members of the project\"\n          example:\n            [\n              {\n                \"lastName\": \"L_NAME\",\n                \"role\": \"customer\",\n                \"updatedBy\": 21926562,\n                \"handle\": \"Tester123\",\n                \"userId\": 21926562,\n                \"deletedBy\": null,\n                \"createdAt\": \"2021-01-12T10:58:26.237Z\",\n                \"firstName\": \"F_NAME\",\n                \"createdBy\": 21926562,\n                \"isPrimary\": false,\n                \"id\": 13833,\n                \"projectId\": 16893,\n                \"email\": \"email@domain.com.z\",\n                \"updatedAt\": \"2021-01-12T10:58:26.237Z\",\n              },\n            ]\n        startDate:\n          type: string\n          format: date-time\n          example: \"2020-09-27T04:17:23.131Z\"\n          description: \"The start date.\"\n        endDate:\n          type: string\n          format: date-time\n          example: \"2020-09-27T04:17:23.131Z\"\n          description: \"The end date.\"\n        weeklyCost:\n          type: number\n          format: decimal\n          example: 5000.50\n          description: \"The average weekly cost\"\n        resources:\n          type: array\n          description: \"The rosources that are assigned\"\n          items:\n            allOf:\n              - $ref: \"#/components/schemas/ResourceUserInfo\"\n            type: object\n            properties:\n              customerRate:\n                type: integer\n                format: float\n                example: 13\n                description: \"The customer rate.\"\n              skills:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Skill\"\n              jobId:\n                type: string\n                format: uuid\n                description: The job id the member is assinged at\n              startDate:\n                type: string\n                format: date-time\n                example: \"2020-09-27T04:17:23.131Z\"\n                description: \"Resource start date.\"\n              endDate:\n                type: string\n                format: date-time\n                example: \"2020-09-27T04:17:23.131Z\"\n                description: \"Resource end date.\"\n\n        jobs:\n          type: array\n          description: \"The jobs which are opened\"\n          items:\n            $ref: \"#/components/schemas/JobForTeam\"\n    Skill:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The skill id.\"\n        name:\n          type: string\n          example: \"React\"\n          description: The skill name.\n    SkillInSkillsAPI:\n      required:\n        - \"id\"\n        - \"name\"\n        - \"taxonomyId\"\n        - \"taxonomyName\"\n        - \"metadata\"\n      properties:\n        id:\n          type: \"string\"\n          format: \"UUID\"\n          description: \"The skill id\"\n        taxonomyId:\n          type: \"string\"\n          format: \"UUID\"\n          description: \"The referenced taxonomy id\"\n        taxonomyName:\n          type: \"string\"\n          description: \"The referenced taxonomy name\"\n        name:\n          type: \"string\"\n          description: \"The name of the skill\"\n        externalId:\n          type: \"string\"\n          description: \"The external id for the skill\"\n        uri:\n          type: \"string\"\n          description: \"The uri for the skill\"\n        metadata:\n          type: \"object\"\n          description: \"The metadata for the skill\"\n          properties:\n            updated:\n              type: \"string\"\n              format: \"date-time\"\n              description: \"The last updated timestamp of the skill\"\n            challengeProminence:\n              type: \"string\"\n              description: \"The challenge prominence ranging from [0, 1]\"\n            memberProminence:\n              type: \"string\"\n              description: \"The member prominence ranging from [0, 1]\"\n    JobForTeam:\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The job id.\"\n        title:\n          type: string\n          example: \"Dummy title\"\n          description: \"The job title.\"\n        startDate:\n          type: string\n          format: date-time\n          example: \"2020-09-27T04:17:23.131Z\"\n          description: \"The job start date.\"\n        duration:\n          type: integer\n          example: 1\n          description: \"The duration in weeks\"\n        numPositions:\n          type: integer\n          example: 13\n          description: \"The number of positions for the job.\"\n        rateType:\n          type: string\n          enum: [\"hourly\", \"daily\", \"weekly\", \"monthly\"]\n          description: \"The rate type of the job.\"\n        skills:\n          type: array\n          description: \"The skills.\"\n          items:\n            $ref: \"#/components/schemas/Skill\"\n        customerRate:\n          type: integer\n          format: float\n          example: 5500\n          description: \"The customer rate.\"\n        status:\n          type: string\n          enum: [\"sourcing\", \"in-review\", \"assigned\", \"closed\", \"cancelled\"]\n          description: \"The job status.\"\n    JobDetail:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The job id.\"\n        title:\n          type: string\n          example: \"Dummy title\"\n          description: \"The job title.\"\n        candidates:\n          type: array\n          items:\n            allOf:\n              - $ref: \"#/components/schemas/User\"\n            type: object\n            properties:\n              id:\n                type: string\n                format: uuid\n                description: \"The job candidate id.\"\n              userId:\n                type: string\n                format: uuid\n                description: \"User id.\"\n              resume:\n                type: string\n                format: url\n                description: \"The link for the resume that can be downloaded\"\n              remark:\n                type: string\n                example: \"excellent\"\n                description: \"The remark of candidate\"\n              interviews:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/CandidateInterview\"\n              status:\n                type: string\n                enum:\n                  [\n                    \"open\",\n                    \"placed\",\n                    \"selected\",\n                    \"client rejected - screening\",\n                    \"client rejected - interview\",\n                    \"rejected - other\",\n                    \"cancelled\",\n                    \"interview\",\n                    \"topcoder-rejected\",\n                    \"applied\",\n                    \"rejected-pre-screen\",\n                    \"skills-test\",\n                    \"phone-screen\",\n                    \"job-closed\",\n                    \"offered\",\n                    \"withdrawn\",\n                    \"withdrawn-prescreen\",\n                  ]\n                description: \"The job candidate status.\"\n              skills:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Skill\"\n    TeamJobDescriptionRequestBody:\n      type: object\n      properties:\n        description:\n          type: string\n          description: \"job description\"\n          example: \"nodejs and java\"\n\n    TeamEmailRequestBody:\n      type: object\n      properties:\n        template:\n          type: string\n          description: \"the email template name\"\n          example: \"team-issue-report\"\n        data:\n          type: object\n          example:\n            {\n              \"projectName\": \"TaaS Project Name\",\n              \"projectId\": 12345,\n              \"reportText\": \"I have issue with ...\",\n            }\n          description: \"Arbitrary data to feed the specified template\"\n    AddMembersRequestBody:\n      properties:\n        handles:\n          type: array\n          description: \"The handles.\"\n          items:\n            type: string\n            description: \"the handle of a member\"\n            example: topcoder321\n        emails:\n          type: array\n          description: \"The emails.\"\n          items:\n            type: string\n            description: \"the email of a member\"\n            example: \"xxx@xxx.com\"\n    AddMembersResponseBody:\n      properties:\n        success:\n          type: array\n          description: \"The members created.\"\n          items:\n            $ref: \"#/components/schemas/ProjectMember\"\n        failed:\n          type: array\n          description: \"The emails.\"\n          items:\n            oneOf:\n              - type: object\n                properties:\n                  error:\n                    type: string\n                    description: the error message\n                    example: \"User doesn't exist\"\n                  handle:\n                    type: string\n                    description: \"the handle of a member\"\n                    example: topcoder321\n              - type: object\n                properties:\n                  error:\n                    type: string\n                    description: the error message\n                    example: \"User is already added\"\n                  email:\n                    type: string\n                    description: \"the email of a member\"\n                    example: \"xxx@xxx.com\"\n    RoleSearchRequestBody:\n      anyOf:\n        - type: object\n          required:\n            - roleId\n          properties:\n            roleId:\n              type: string\n              format: uuid\n              description: \"The role id.\"\n        - type: object\n          required:\n            - jobDescription\n          properties:\n            jobDescription:\n              type: string\n              description: \"The description of the job.\"\n            jobTitle:\n              type: string\n              description: \"An optional job title.\"\n        - type: object\n          required:\n            - skills\n          properties:\n            skills:\n              type: array\n              description: \"The array of skill ids.\"\n              items:\n                type: string\n                format: uuid\n                description: \"The skill id\"\n\n    RoleSearchResponse:\n      allOf:\n        - $ref: \"#/components/schemas/Role\"\n        - type: object\n          required:\n            - roleSearchRequestId\n            - isExternalMember\n          properties:\n            roleSearchRequestId:\n              type: string\n              format: uuid\n              description: \"The role search request id.\"\n            isExternalMember:\n              type: boolean\n              description: \"Is the user external member\"\n            matchedSkills:\n              type: array\n              items:\n                type: string\n                example: \"java\"\n              description: \"skills match with the role\"\n            unMatchedSkills:\n              type: array\n              items:\n                type: string\n                example: \"javascript\"\n              description: \"skills unmatch with the role\"\n            skillsMatch:\n              type: number\n              format: float\n              description: \"Rate at which searched skills match the given role\"\n              example: 0.75\n            jobTitle:\n              type: string\n              description: \"Optional job title.\"\n              example: \"Lead Application Developer\"\n    CalculateAmountRequestBody:\n      properties:\n        numberOfResources:\n          type: number\n          description: \"No. of resources required.\"\n        rate:\n          type: number\n          description: \"Weekly rates\"\n    CalculateAmountResponse:\n      properties:\n        totalAmount:\n          type: number\n          description: \"Total amount calculated\"\n    CreatePaymentRequestBody:\n      properties:\n        totalAmount:\n          type: number\n          description: \"Total amount charged to user via stripe\"\n    CreatePaymentResponse:\n      properties:\n        paymentIntentToken:\n          type: string\n          description: \" Token required by stripe for completing payment.\"\n    IsExternalMemberRequestBody:\n      properties:\n        totalAmount:\n          type: number\n          description: \"Member id\"\n    IsExternalMemberResponse:\n      properties:\n        paymentIntentToken:\n          type: boolean\n          description: \"Is the user external member\"\n    SubmitTeamRequestBody:\n      properties:\n        teamName:\n          type: string\n          description: \"The name of the team\"\n        teamDescription:\n          type: string\n          description: \"The description of the team\"\n        refCode:\n          type: string\n          description: \"Optional referral code\"\n        intakeSource:\n          type: string\n          description: \"The source of the intake.\"\n        positions:\n          type: array\n          description: \"The array of positions\"\n          items:\n            type: object\n            required:\n              - roleName\n              - roleSearchRequestId\n              - numberOfResources\n            properties:\n              roleName:\n                type: string\n                description: \"The name of the role\"\n              roleSearchRequestId:\n                type: string\n                format: uuid\n                description: \"The id of roleSearchRequest\"\n              numberOfResources:\n                type: integer\n                example: 10\n                minimum: 1\n                description: \"The number of needed resources\"\n              hoursPerWeek:\n                type: integer\n                example: 40\n                minimum: 1\n                description: \"The amount of working hours per week\"\n              durationWeeks:\n                type: integer\n                example: 5\n                minimum: 1\n                description: \"The amount of time in weeks\"\n              startMonth:\n                type: string\n                format: date-time\n                description: \"The start day of the job\"\n    SubmitTeamResponse:\n      required:\n        - projectId\n      properties:\n        projectId:\n          type: string\n          format: uuid\n          description: \"The id of created project\"\n    Role:\n      required:\n        - id\n        - name\n        - rates\n        - createdAt\n        - createdBy\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: \"The role id.\"\n        name:\n          type: string\n          example: \"Dev Ops Engineer\"\n          description: \"The role name.\"\n        description:\n          type: string\n          example: \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\"\n          description: \"The role description\"\n        listOfSkills:\n          type: array\n          description: \"The array of skill names.\"\n          items:\n            type: string\n            example: \"HTML\"\n            description: \"The skill name\"\n        rates:\n          type: array\n          description: \"The rates object array.\"\n          items:\n            $ref: \"#/components/schemas/RoleRates\"\n        numberOfMembers:\n          type: number\n          example: 100\n          description: \"The number of members.\"\n        numberOfMembersAvailable:\n          type: integer\n          example: 100\n          description: \"The number of members available.\"\n        imageUrl:\n          type: string\n          format: url\n          example: \"http://images.topcoder.com/images\"\n          description: \"The image url of the role.\"\n        timeToCandidate:\n          type: integer\n          example: 200\n          description: \"The time to candidate.\"\n        timeToInterview:\n          type: integer\n          example: 300\n          description: \"The time to interview.\"\n        createdAt:\n          type: string\n          format: date-time\n          description: \"The role created date.\"\n        createdBy:\n          type: string\n          format: uuid\n          description: \"The user Id who created the role.(Will get the user info from the token)\"\n        updatedAt:\n          type: string\n          format: date-time\n          description: \"The role last updated at.\"\n        updatedBy:\n          type: string\n          format: uuid\n          description: \"The user Id who updated the role last time.(Will get the user info from the token)\"\n    SuggestedMember:\n      properties:\n        userId:\n          type: number\n          example: 40157055\n          description: the user id\n        handle:\n          type: string\n          example: maxceemdev\n          description: the user handle\n        photoURL:\n          type: string\n          example: https://topcoder-dev-media.s3.amazonaws.com/member/profile/maxceem13-1587184611143.jpeg\n          description: the photo url\n        firstName:\n          type: string\n          example: Max\n          description: the firstname of the user\n        lastName:\n          type: string\n          example: Max\n          description: the lastname of the user\n        maxRating:\n          type: number\n          example: 1200\n          description: the maximum rating of the user\n    RoleRequestBody:\n      required:\n        - name\n        - rates\n      properties:\n        name:\n          type: string\n          example: \"Dev Ops Engineer\"\n          description: \"The role name.\"\n        description:\n          type: string\n          example: \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\"\n          description: \"The role description\"\n        listOfSkills:\n          type: array\n          description: \"The array of skill names.\"\n          items:\n            type: string\n            example: \"HTML\"\n            description: \"The skill name\"\n        rates:\n          type: array\n          description: \"The rates object array.\"\n          items:\n            $ref: \"#/components/schemas/RoleRates\"\n        numberOfMembers:\n          type: number\n          example: 100\n          description: \"The number of members.\"\n        numberOfMembersAvailable:\n          type: number\n          example: 100\n          description: \"The number of members available.\"\n        imageUrl:\n          type: string\n          format: url\n          example: \"http://images.topcoder.com/images\"\n          description: \"The image url of the role.\"\n        timeToCandidate:\n          type: integer\n          example: 200\n          description: \"The time to candidate.\"\n        timeToInterview:\n          type: integer\n          example: 300\n          description: \"The time to interview.\"\n    RolePatchRequestBody:\n      properties:\n        name:\n          type: string\n          example: \"Dev Ops Engineer\"\n          description: \"The role name.\"\n        description:\n          type: string\n          example: \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\"\n          description: \"The role description\"\n        listOfSkills:\n          type: array\n          description: \"The array of skill names.\"\n          items:\n            type: string\n            example: \"HTML\"\n            description: \"The skill name\"\n        rates:\n          type: array\n          description: \"The rates object array.\"\n          items:\n            $ref: \"#/components/schemas/RoleRates\"\n        numberOfMembers:\n          type: number\n          example: 100\n          description: \"The number of members.\"\n        numberOfMembersAvailable:\n          type: number\n          example: 100\n          description: \"The number of members available.\"\n        imageUrl:\n          type: string\n          format: url\n          example: \"http://images.topcoder.com/images\"\n          description: \"The image url of the role.\"\n        timeToCandidate:\n          type: integer\n          example: 200\n          description: \"The time to candidate.\"\n        timeToInterview:\n          type: integer\n          example: 300\n          description: \"The time to interview.\"\n    RoleRates:\n      type: object\n      properties:\n        niche:\n          type: integer\n          example: 10\n        global:\n          type: integer\n          example: 10\n        inCountry:\n          type: integer\n          example: 20\n        offShore:\n          type: integer\n          example: 30\n        rate30Niche:\n          type: integer\n          example: 10\n        rate30Global:\n          type: integer\n          example: 10\n        rate30InCountry:\n          type: integer\n          example: 20\n        rate30OffShore:\n          type: integer\n          example: 30\n        rate20Niche:\n          type: integer\n          example: 10\n        rate20Global:\n          type: integer\n          example: 10\n        rate20InCountry:\n          type: integer\n          example: 20\n        rate20OffShore:\n          type: integer\n          example: 30\n    ProjectMember:\n      type: object\n      example:\n        {\n          \"id\": 14329,\n          \"userId\": 40159097,\n          \"role\": \"customer\",\n          \"createdAt\": \"2021-02-24T12:34:45.074Z\",\n          \"updatedAt\": \"2021-02-24T12:34:45.075Z\",\n          \"createdBy\": -101,\n          \"updatedBy\": -101,\n          \"handle\": \"tester1234\",\n          \"photoURL\": null,\n          \"workingHourStart\": \"9:00\",\n          \"workingHourEnd\": \"17:00\",\n          \"timeZone\": \"Asia/Kolkata\",\n          \"email\": \"xxx@xxx.com\",\n        }\n    ProjectMemberInvite:\n      type: object\n      example:\n        {\n          \"createdAt\": \"2021-02-24T11:02:12.673Z\",\n          \"deletedAt\": null,\n          \"role\": \"customer\",\n          \"updatedBy\": -101,\n          \"createdBy\": -101,\n          \"id\": 3686,\n          \"projectId\": 16705,\n          \"userId\": 23008602,\n          \"email\": null,\n          \"deletedBy\": null,\n          \"updatedAt\": \"2021-02-24T11:02:12.674Z\",\n          \"status\": \"pending\",\n        }\n    UbahnUser:\n      type: object\n      example:\n        {\n          \"lastName\": \"DeLaurentis\",\n          \"updatedBy\": \"tcAdmin\",\n          \"achievements\":\n            [\n              {\n                \"certifierId\": \"certifierId\",\n                \"updatedBy\": \"tcAdmin\",\n                \"createdBy\": \"tc-user\",\n                \"certifiedDate\": \"2020-05-04T07:36:28.036Z\",\n                \"created\": \"2020-05-13T08:44:27.244Z\",\n                \"name\": \"Topcoder\",\n                \"id\": \"a49e1013-fd42-4c08-bc12-492510cadb96\",\n                \"achievementsProviderId\": \"ce05133f-129e-484d-9ef9-72bf51ff81f9\",\n                \"uri\": \"http://www.google.com/xx\",\n                \"updated\": \"2021-01-05T10:58:32.429Z\",\n                \"userId\": \"0bcb0d86-09bb-410a-b2b1-fba90d1a7699\",\n                \"achievementprovider\":\n                  {\n                    \"updatedBy\": \"tcAdmin\",\n                    \"createdBy\": \"tc-user\",\n                    \"created\": \"2020-05-13T08:42:41.877Z\",\n                    \"name\": \"achievementsProviders_02\",\n                    \"id\": \"ce05133f-129e-484d-9ef9-72bf51ff81f9\",\n                    \"updated\": \"2021-01-05T10:58:32.341Z\",\n                  },\n              },\n            ],\n          \"created\": \"2020-05-05T10:18:03.882Z\",\n          \"handle\": \"lazybaer\",\n          \"skills\":\n            [\n              {\n                \"certifierId\": null,\n                \"skillId\": \"d67f35c3-fa42-4866-a0f9-0a4b84fcf4a9\",\n                \"updatedBy\": \"tcAdmin\",\n                \"createdBy\": \"lazybaer\",\n                \"certifiedDate\": null,\n                \"created\": \"2020-10-23T16:22:11.208Z\",\n                \"skill\":\n                  {\n                    \"updatedBy\": \"tcAdmin\",\n                    \"skillprovider\":\n                      {\n                        \"updatedBy\": \"tcAdmin\",\n                        \"createdBy\": \"TonyJ\",\n                        \"created\": \"2020-08-31T12:30:00.543Z\",\n                        \"name\": \"Wipro Digital\",\n                        \"id\": \"26fb37b1-5f9f-4727-baa9-f3c87de84ab1\",\n                        \"updated\": \"2021-01-05T10:58:32.836Z\",\n                      },\n                    \"createdBy\": \"0\",\n                    \"created\": \"2020-09-01T21:59:21.554Z\",\n                    \"skillProviderId\": \"26fb37b1-5f9f-4727-baa9-f3c87de84ab1\",\n                    \"name\": \"GitHub\",\n                    \"externalId\": null,\n                    \"id\": \"d67f35c3-fa42-4866-a0f9-0a4b84fcf4a9\",\n                    \"uri\": null,\n                    \"updated\": \"2021-01-05T10:58:33.332Z\",\n                  },\n                \"metricValue\": null,\n                \"id\": \"8a84c1b4-1884-4a3c-90b2-eb86bf469bb6\",\n                \"updated\": \"2021-01-05T10:58:34.080Z\",\n                \"userId\": \"0bcb0d86-09bb-410a-b2b1-fba90d1a7699\",\n              },\n            ],\n          \"firstName\": \"Christopher\",\n          \"externalProfiles\":\n            [\n              {\n                \"organizationId\": \"0d2320f9-be61-4ba4-973e-edc3bb682a69\",\n                \"updatedBy\": \"tcAdmin\",\n                \"createdBy\": \"TonyJ\",\n                \"isInactive\": false,\n                \"created\": \"2020-08-31T12:30:38.495Z\",\n                \"organization\":\n                  {\n                    \"updatedBy\": \"tcAdmin\",\n                    \"createdBy\": \"TonyJ\",\n                    \"created\": \"2020-08-31T12:29:58.081Z\",\n                    \"name\": \"Wipro Digital\",\n                    \"skillProviders\":\n                      [\n                        {\n                          \"organizationId\": \"0d2320f9-be61-4ba4-973e-edc3bb682a69\",\n                          \"updatedBy\": \"tcAdmin\",\n                          \"createdBy\": \"TonyJ\",\n                          \"created\": \"2020-08-31T12:30:08.410Z\",\n                          \"skillProviderId\": \"26fb37b1-5f9f-4727-baa9-f3c87de84ab1\",\n                          \"id\": \"5b26cdd3-fe68-4b30-85c5-ceaf280bd688\",\n                          \"updated\": \"2021-01-05T10:58:32.919Z\",\n                        },\n                      ],\n                    \"id\": \"0d2320f9-be61-4ba4-973e-edc3bb682a69\",\n                    \"updated\": \"2021-01-05T10:58:32.261Z\",\n                  },\n                \"externalId\": \"8547899\",\n                \"id\": \"870af97b-8c3b-4659-92d6-cac126bbe9de\",\n                \"uri\": null,\n                \"updated\": \"2021-01-05T10:58:32.724Z\",\n                \"userId\": \"0bcb0d86-09bb-410a-b2b1-fba90d1a7699\",\n              },\n            ],\n          \"createdBy\": \"tc-Copilot\",\n          \"attributes\":\n            [\n              {\n                \"attributeId\": \"d709276a-80c3-491c-9b29-a4f065b2a56f\",\n                \"updatedBy\": \"tcAdmin\",\n                \"createdBy\": \"tc-Admin\",\n                \"created\": \"2020-05-13T08:19:13.709Z\",\n                \"id\": \"21de9324-900d-41ea-b127-f297dfb9a873\",\n                \"attribute\":\n                  {\n                    \"updatedBy\": \"tcAdmin\",\n                    \"attributegroup\":\n                      {\n                        \"organizationId\": \"36ed815b-3da1-49f1-a043-aaed0a4e81ad\",\n                        \"updatedBy\": \"tc-Admin\",\n                        \"createdBy\": \"tc-Admin\",\n                        \"created\": \"2020-05-13T07:15:01.215Z\",\n                        \"name\": \"group 03\",\n                        \"id\": \"84634bbd-8191-40cf-a03e-9962d7e39fda\",\n                        \"updated\": \"2020-05-13T07:16:20.636Z\",\n                      },\n                    \"createdBy\": \"tc-Admin\",\n                    \"created\": \"2020-05-13T07:32:03.128Z\",\n                    \"name\": \"Billing Account\",\n                    \"id\": \"d709276a-80c3-491c-9b29-a4f065b2a56f\",\n                    \"attributeGroupId\": \"84634bbd-8191-40cf-a03e-9962d7e39fda\",\n                    \"updated\": \"2021-01-05T10:58:32.604Z\",\n                  },\n                \"value\": \"74314457\",\n                \"updated\": \"2021-01-05T10:58:33.739Z\",\n                \"userId\": \"0bcb0d86-09bb-410a-b2b1-fba90d1a7699\",\n              },\n            ],\n          \"id\": \"0bcb0d86-09bb-410a-b2b1-fba90d1a7699\",\n          \"updated\": \"2021-01-05T10:58:32.113Z\",\n        }\n    UserMeetingSettings:\n      type: object\n      properties:\n        userId:\n          type: string\n          format: uuid\n        defaultAvailableTime:\n          type: array\n          items:\n            type: object\n            required:\n              - days\n              - start\n              - end\n            properties:\n              days:\n                type: array\n                items:\n                  type: string\n                  enum: [\"M\", \"T\", \"W\", \"R\", \"F\", \"S\", \"U\"]\n              start:\n                type: string\n                example: \"09:00\"\n                pattern: \"^[0-9]{1,2}:[0-9]{2}$\"\n              end:\n                type: string\n                example: \"10:00\"\n                pattern: \"^[0-9]{1,2}:[0-9]{2}$\"\n        defaultTimezone:\n          type: string\n          example: \"Europe/Rome\"\n        nylasCalendars:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                format: uuid\n              isPrimary:\n                type: boolean\n              accountProvider:\n                type: string\n        createdAt:\n          type: string\n          format: date-time\n          description: \"The setting created date.\"\n        createdBy:\n          type: string\n          format: uuid\n          description: \"The user Id who created the setting.(Will get the user info from the token)\"\n        updatedAt:\n          type: string\n          format: date-time\n          description: \"The setting last updated at.\"\n        updatedBy:\n          type: string\n          format: uuid\n          description: \"The user Id who updated the setting last time.(Will get the user info from the token)\"\n\n\n    Error:\n      required:\n        - message\n      properties:\n        message:\n          type: string\n"
		}
	},
	"Error": "parse: paths: /jobs/{id}: get: : responses: 200: content: application/json: schema: parse schema: reference \"#/components/schemas/Job\": parse schema: rcrmReason: unexpected default \"null\" value"
}