{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bundesAPI/luftqualitaet-api"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "openapi.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    email: immission@uba.de\n    name: API Support\n  description: Air data API of Umweltbundesamt\n  title: Umweltbundesamt Air Data API\n  version: 2.0.1\nservers:\n  - url: 'https://www.umweltbundesamt.de/api/air_data/v2'\n    description: Public API\ntags:\n  - name: metadata\n    x-displayName: Meta data\n  - name: airquality\n    x-displayName: Air quality\n  - name: measurements\n    x-displayName: Measurements\n  - name: exceedances\n    x-displayName: Exceedances\n  - name: annualtabulation\n    x-displayName: Annual tabulation\ncomponents:\n  parameters:\n    component:\n      name: component\n      description: Id of component\n      in: query\n      required: false\n      schema:\n        type: integer\n      example: 1\n    componentReq:\n      name: component\n      description: Id of component\n      in: query\n      required: true\n      schema:\n        type: integer\n      example: 1\n    date:\n      name: date\n      description: A date\n      in: query\n      required: false\n      schema:\n        format: YYYY-MM-DD\n        type: string\n      example: '2019-01-01'\n    dateFromAq:\n      name: date_from\n      description: A date (required only for use = airquality)\n      in: query\n      required: false\n      schema:\n        format: YYYY-MM-DD\n        type: string\n      example: '2019-01-01'\n    dateToAq:\n      name: date_to\n      description: A date (required only for use = airquality)\n      in: query\n      required: false\n      schema:\n        format: YYYY-MM-DD\n        type: string\n      example: '2019-01-01'\n    dateFromReq:\n      name: date_from\n      description: A date\n      in: query\n      required: true\n      schema:\n        format: YYYY-MM-DD\n        type: string\n      example: '2019-01-01'\n    dateToReq:\n      name: date_to\n      description: A date\n      in: query\n      required: true\n      schema:\n        format: YYYY-MM-DD\n        type: string\n      example: '2019-01-01'\n    index:\n      name: index\n      description: The type of index to be used\n      in: query\n      required: false\n      schema:\n        default: id\n        enum:\n          - id\n          - code\n      example: code\n    lang:\n      name: lang\n      description: The language code\n      in: query\n      required: false\n      schema:\n        type: string\n        default: en\n        enum:\n          - en\n          - de\n      example: de\n    scope:\n      name: scope\n      description: Id of scope\n      in: query\n      schema:\n        type: integer\n      example: 2\n    station:\n      name: station\n      description: Id of station\n      in: query\n      schema:\n        type: integer\n      example: 769\n    stationReq:\n      name: station\n      description: Id of station\n      in: query\n      required: true\n      schema:\n        type: integer\n      example: 769\n    time:\n      name: time\n      description: An hour.\n      in: query\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 24\n      example: 9\n    timeFromAq:\n      name: time_from\n      description: An hour.\n      in: query\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 24\n      example: 9\n    timeToAq:\n      name: time_to\n      description: An hour.\n      in: query\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 24\n      example: 9\n    timeFromReq:\n      name: time_from\n      description: An hour.\n      in: query\n      required: true\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 24\n      example: 9\n    timeToReq:\n      name: time_to\n      description: An hour.\n      in: query\n      required: true\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 24\n      example: 9\n    use:\n      name: use\n      in: query\n      description: Defines the use.\n      required: true\n      schema:\n        enum:\n          - airquality\n          - measure\n          - transgression\n          - annualbalance\n          - map\n        type: string\n      example: airquality\n    usethreshold:\n      name: use\n      description: Defines which thresholds to use.\n      in: query\n      required: true\n      schema:\n        enum:\n          - airquality\n          - measure\n        type: string\n      example: airquality\n    year:\n      name: year\n      description: A 4-digit Year\n      in: query\n      required: false\n      schema:\n        format: YYYY\n        minimum: 2016\n        maxLength: 4\n        minLength: 4\n        type: string\n      example: \"2019\"\n    yearReq:\n      name: year\n      description: A 4-digit Year\n      in: query\n      required: true\n      schema:\n        format: YYYY\n        minimum: 2016\n        maxLength: 4\n        minLength: 4\n        type: string\n      example: \"2019\"\n    dataArray:\n      name: dataArray\n      description: An array of datas.\n      in: query\n      required: true\n      schema:\n        type: array\n        items:\n          type: object\n          properties:\n            co:\n              description: Id of component\n            sc:\n              description: Id of scope\n            st:\n              description: Id of station\n  schemas:\n    airquality:\n      type: object\n      properties:\n        station id:\n          type: array\n          items:\n            type: object\n            properties:\n              date start (CET):\n                type: object\n                properties:\n                  '0':\n                    description: Date of end of measuring in CET\n                    type: string\n                    example: '2019-02-19 10:00:00'\n                  '1':\n                    description: Airquality index for all components\n                    type: integer\n                    example: 1\n                    minimum: 0\n                    maximum: 4\n                  '2':\n                    description: Flag if data is incomplete (not all components available)\n                    type: integer\n                    minimum: 0\n                    maximum: 1\n                    example: 1\n                  3 and following:\n                    description: Object for component\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        '0':\n                          description: Id of component\n                          type: integer\n                          example: 1\n                        '1':\n                          description: The value\n                          type: number\n                          example: 24\n                        '2':\n                          description: Airquality index of this component\n                          type: integer\n                          example: 1\n                          minimum: 0\n                          maximum: 4\n                        '3':\n                          description: \u003e-\n                            Decimal representation of percent in index\n                            thresholds. 0.x is between index 0 and 1, 1.x is\n                            between index 1 and 2...\n                          type: string\n                          format: float\n                          example: \"0.25\"\n                          minimum: 0\n                          maximum: 5\n    airqualitylimits:\n      type: object\n      properties:\n        station id:\n          properties:\n            '0':\n              description: Minimum date start (CET)\n              example: '2019-02-16 09:00:00'\n              format: 'YYYY-MM-DD HH:MM:SS'\n              type: string\n            '1':\n              description: Maximum date start (CET)\n              example: '2019-02-19 10:00:00'\n              format: 'YYYY-MM-DD HH:MM:SS'\n              type: string\n          type: object\n    annualbalance:\n      type: object\n      properties:\n        '0':\n          description: Id of station\n          example: 6\n          format: integer\n          type: integer\n        '1':\n          description: Id of component\n          example: 3\n          type: integer\n        '2':\n          description: Year\n          format: YYYY\n          example: 2017\n          type: integer\n        '3':\n          description: value\n          example: 35\n          type: integer\n        '4':\n          description: Id of exceedance type (not used)\n          example: 13\n          type: integer\n    component:\n      type: object\n      properties:\n        '0':\n          description: Id of component\n          example: 5\n          format: integer\n          type: integer\n        '1':\n          description: Component code\n          example: NO2\n          type: string\n        '2':\n          description: Component symbol\n          example: NO₂\n          type: string\n        '3':\n          description: Component unit\n          example: µg/m³\n          type: string\n        '4':\n          description: Components name in specified language\n          example: Nitrogen dioxide\n          type: string\n    network:\n      type: object\n      properties:\n        '0':\n          description: Id of network\n          example: 2\n          format: integer\n          type: integer\n        '1':\n          description: Network short code\n          example: BY\n          type: string\n        '2':\n          description: Networks name in specified language\n          example: Bavaria\n          type: string\n    scope:\n      type: object\n      properties:\n        '0':\n          description: Id of scope\n          example: 2\n          format: integer\n          type: integer\n        '1':\n          description: Scope code\n          example: 1SMW\n          type: string\n        '2':\n          description: Scope time base\n          example: hour\n          type: string\n        '3':\n          description: Scope time scope\n          example: 3600\n          format: integer\n          type: integer\n        '4':\n          description: Scope time is max\n          enum:\n            - 0\n            - 1\n          example: 0\n          format: integer\n          type: integer\n        '5':\n          description: Scope name in specified language\n          example: 1-hour average\n          type: string\n    station:\n      type: object\n      properties:\n        '0':\n          description: Id of station\n          example: \"769\"\n          type: string\n          format: interger\n        '1':\n          description: Code of station\n          example: \"DEHH016\"\n          type: string\n        '2':\n          description: Name of station\n          example: \"Hamburg Billbrook\"\n          type: string\n        '3':\n          description: City of station\n          example: \"Hamburg\"\n          type: string\n        '4':\n          description: Synonym of station\n          example: \"21BI\"\n          type: string\n        '5':\n          description: Date of first activity\n          example: \"1985-01-01T00:00:00.000Z\"\n          format: YYYY-MM-DD\n          type: string\n        '6':\n          description: Date of last activity (null when still running)\n          example: \"1985-01-01T00:00:00.000Z\"\n          format: YYYY-MM-DD\n          type: string\n          nullable: true\n        '7':\n          description: Longitude of station\n          example: \"10.0817\"\n          type: string\n          format: float\n        '8':\n          description: Latitude of station\n          example: \"53.529\"\n          type: string\n          format: float\n        '9':\n          description: Id of network\n          example: \"6\"\n          type: string\n          format: integer\n        '10':\n          description: Id of station setting\n          example: \"1\"\n          type: string\n          format: integer\n        '11':\n          description: Id of station type\n          example: \"2\"\n          type: string\n          format: integer\n        '12':\n          description: Code of network\n          example: \"HH\"\n          type: string\n        '13':\n          description: Name of network in specified language\n          example: \"Hamburg\"\n          type: string\n        '14':\n          description: Name of station setting in specified language\n          example: \"urban area\"\n          type: string\n        '15':\n          description: Short name of station setting in specified language\n          example: \"urban\"\n          type: string\n        '16':\n          description: Name of station type in specified language\n          example: \"industry\"\n          type: string\n        '17':\n          description: Street of station\n          example: \"Lauchhammerstr.\"\n          type: string\n        '18':\n          description: Street number of station\n          example: \"23\"\n          type: string\n        '19':\n          description: ZIP code of station\n          example: \"04910\"\n          type: string\n    stationsetting:\n      type: object\n      properties:\n        '0':\n          description: Id of station setting\n          example: 2\n          format: integer\n          type: integer\n        '1':\n          description: Name of station setting in specified language\n          example: \"suburban area\"\n          type: string\n        '2':\n          description: Short name of station setting in specified language\n          example: \"suburban\"\n          type: string\n    stationtype:\n      type: object\n      properties:\n        '0':\n          description: Id of station type\n          example: 2\n          format: integer\n          type: integer\n        '1':\n          description: Name of station type in specified language\n          example: \"industry\"\n          type: string\n    threshold:\n      type: object\n      properties:\n        '0':\n          description: Id of threshold\n          example: 5\n          format: integer\n          type: integer\n        '1':\n          description: Id of component\n          example: 5\n          type: integer\n        '2':\n          description: Id of scope\n          example: 1\n          type: integer\n        '3':\n          description: Threshold minimum value\n          example: 201\n          type: integer\n        '4':\n          description: Threshold maximum value\n          example: 1000\n          type: integer\n        '5':\n          description: Threshold index\n          example: 4\n          type: integer\n    transgression:\n      type: object\n      properties:\n        '0':\n          description: Id of station\n          example: 2\n          format: integer\n          type: integer\n        '1':\n          description: Date of first activity\n          example: '2019-01-01'\n          format: YYYY-MM-DD\n          type: string\n        '2':\n          description: Date of recent activity\n          example: '2019-01-01'\n          format: YYYY-MM-DD\n          type: string\n        '3':\n          description: Sum of values of year\n          example: 24\n          format: integer\n          type: integer\n        '4':\n          description: Value of January\n          example: 2\n          format: integer\n          type: integer\n        '5':\n          description: Value of Feburary\n          example: 2\n          format: integer\n          type: integer\n        '6':\n          description: Value of March\n          example: 2\n          format: integer\n          type: integer\n        '7':\n          description: Value of April\n          example: 2\n          format: integer\n          type: integer\n        '8':\n          description: Value of May\n          example: 2\n          format: integer\n          type: integer\n        '9':\n          description: Value of June\n          example: 2\n          format: integer\n          type: integer\n        '10':\n          description: Value of July\n          example: 2\n          format: integer\n          type: integer\n        '11':\n          description: Value of August\n          example: 2\n          format: integer\n          type: integer\n        '12':\n          description: Value of September\n          example: 2\n          format: integer\n          type: integer\n        '13':\n          description: Value of October\n          example: 2\n          format: integer\n          type: integer\n        '14':\n          description: Value of November\n          example: 2\n          format: integer\n          type: integer\n        '15':\n          description: Value of December\n          example: 2\n          format: integer\n          type: integer\n    transgressiontype:\n      type: object\n      properties:\n        '0':\n          description: Id of exceedance type\n          example: 2\n          format: integer\n          type: integer\n        '1':\n          description: Name of exceedance type in specified language\n          example: Jahresmittelwert in µg/m³\n          type: string\n    measure:\n      type: object\n      properties:\n        '0':\n          description: Id of component\n          example: 2\n          type: integer\n        '1':\n          description: Id of scope\n          example: 2\n          type: integer\n        '2':\n          description: Value of measurement\n          example: 112.4\n          nullable: true\n          type: number\n        '3':\n          description: Date end (CET)\n          example: '2019-01-01 02:00:00'\n          format: 'YYYY-MM-DD HH:mm:ss'\n          type: string\n        '4':\n          description: Air quality index\n          example: 1\n          type: integer\n          nullable: true\n    measurelimit:\n      type: object\n      description: 'The index is a concatination of scope id, component id and station id.'\n      properties:\n        '0':\n          description: Id of scope\n          example: 2\n          format: integer\n          type: integer\n        '1':\n          description: Id of component\n          example: 2\n          format: integer\n          type: integer\n        '2':\n          description: Id of station\n          example: 2\n          format: integer\n          type: integer\n        '3':\n          description: Mimimum datetime of start (CET)\n          example: 2019-01-02T11:00:00.000Z\n          format: 'YYYY-MM-DD HH:mm:ss'\n          type: string\n        '4':\n          description: Maximum datetime of start (CET)\n          example: 2019-01-02T12:00:00.000Z\n          format: 'YYYY-MM-DD HH:mm:ss'\n          type: string\n    limit:\n      type: object\n      description: 'The index is a concatination of scope id, component id and station id.'\n      properties:\n        '0':\n          description: Id of scope\n          example: \"1\"\n          format: integer\n          type: string\n        '1':\n          description: Id of component\n          example: \"1\"\n          format: integer\n          type: string\n        '2':\n          description: Id of station\n          example: \"120\"\n          format: integer\n          type: string\n        '3':\n          description: Minimum datetime of start (CET)\n          example: \"2016-01-01T11:00:00.000Z\"\n          format: 'YYYY-MM-DD HH:mm:ss'\n          type: string\n        '4':\n          description: Maximum datetime of start (CET)\n          example: \"2019-09-02T11:00:00.000Z\"\n          format: 'YYYY-MM-DD HH:mm:ss'\n          type: string\npaths:\n  /airquality/json:\n    get:\n      description: This entry point returns airquality data for the provided parameters.\n      parameters:\n        - $ref: '#/components/parameters/dateFromReq'\n        - $ref: '#/components/parameters/timeFromReq'\n        - $ref: '#/components/parameters/dateToReq'\n        - $ref: '#/components/parameters/timeToReq'\n        - $ref: '#/components/parameters/station'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  indices:\n                    description: Description of indices\n                    example:\n                      station id: null\n                  data:\n                    type: object\n                    items:\n                      $ref: '#/components/schemas/airquality'\n                    example:\n                      '6':\n                        '2019-01-01 00:00:00':\n                          '0': '2019-01-01 01:00:00'\n                          '1': 0\n                          '2': 0\n                          '3':\n                            '0':\n                              '0': 3\n                              '1': 20\n                              '2': 0\n                              '3': 0.333\n        '422':\n          description: required parameter is missing.\n      summary: Get airquality data\n      tags:\n        - airquality\n  /airquality/limits:\n    get:\n      description: This entry point returns the date limits of airquality stations.\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  indices:\n                    description: Description of indices\n                    example:\n                      station_id:\n                        '0': limit date start min (CET)\n                        '1': limit date start max (CET)\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/airqualitylimits'\n                    example:\n                      - '30':\n                        '0': '2016-01-01 00:00:00'\n                        '1': '2019-09-03 11:00:00'\n      summary: Get airquality date limits\n      tags:\n        - airquality\n  /annualbalances/json:\n    get:\n      description: This entry point returns the data of annual tabulations\n      parameters:\n        - $ref: '#/components/parameters/componentReq'\n        - $ref: '#/components/parameters/yearReq'\n        - $ref: '#/components/parameters/lang'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                properties:\n                  indices:\n                    type: array\n                    items:\n                      type: object\n                    description: Description of indices\n                    example:\n                      - '0': station id\n                      - '1': component id\n                      - '2': year\n                      - '3': value\n                      - '4': transgression type\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/annualbalance'\n                type: object\n        '422':\n          description: required parameter is missing.\n      summary: Get annualtabulation\n      tags:\n        - annualtabulation\n  /components/json:\n    get:\n      description: This entry point returns a list of all components.\n      parameters:\n          - $ref: '#/components/parameters/lang'\n          - $ref: '#/components/parameters/index'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                example:\n                  '5':\n                    '0': 5\n                    '1': NO2\n                    '2': NO₂\n                    '3': µg/m³\n                    '4': Nitrogen dioxide\n                  NO2:\n                    '0': 5\n                    '1': NO2\n                    '2': NO₂\n                    '3': µg/m³\n                    '4': Nitrogen dioxide\n                properties:\n                  id|code:\n                    $ref: '#/components/schemas/component'\n      summary: Get all components\n      tags:\n        - metadata\n  /measures/json:\n    get:\n      description: This entry point returns measures for the provided parameters.\n      parameters:\n        - $ref: '#/components/parameters/dateFromReq'\n        - $ref: '#/components/parameters/timeFromReq'\n        - $ref: '#/components/parameters/dateToReq'\n        - $ref: '#/components/parameters/timeToReq'\n        - $ref: '#/components/parameters/station'\n        - $ref: '#/components/parameters/component'\n        - $ref: '#/components/parameters/scope'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/measure'\n                type: object\n                properties:\n                  indices:\n                    type: array\n                    items:\n                      type: object\n                    description: Description of indices\n                    example:\n                      - station id:\n                        date start:\n                          '0': component id\n                          '1': scope id\n                          '2': value\n                          '3': date end\n                          '4': index\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        station id:\n                          type: object\n                          description: The id of the station\n                          properties:\n                            date start (CET):\n                              type: array\n                              description:\n                                The datetime in CET when the measuring was\n                                started\n                              items:\n                                $ref: '#/components/schemas/measure'\n                      example:\n                        '7':\n                          '2019-01-01 00:00:00':\n                            '0': 1\n                            '1': 6\n                            '2': 17.1\n                            '3': '2019-01-01 01:00:00'\n                            '4': null\n        '422':\n          description: required parameter is missing.\n      summary: Get all measurements\n      tags:\n        - measurements\n  /measures/limits:\n    get:\n      description: This entry point returns all limits of measurements\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  indices:\n                    type: object\n                    description: Description of indices\n                    example:\n                      'combination of scope id, component id, station id':\n                        '0': scope id\n                        '1': component id\n                        '2': station id\n                        '3': limit date start min (CET)\n                        '4': limit date start max (CET)\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        concatId:\n                          $ref: '#/components/schemas/measurelimit'\n                      example:\n                        '11620':\n                          '0': 1\n                          '1': 1\n                          '2': 620\n                          '3': '2016-01-01 11:00:00'\n                          '4': '2019-09-01 11:00:00'\n      summary: Get measurement date limits\n      tags:\n        - measurements\n  /networks/json:\n    get:\n      description: This entry point returns a list of all networks.\n      parameters:\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/index'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/network'\n                properties:\n                  indices:\n                    type: array\n                    items:\n                      type: string\n                    description: Description of indices\n                    example:\n                      - network id\n                      - network code\n                      - network name\n                  data:\n                    type: object\n                    properties:\n                      id|code:\n                        $ref: '#/components/schemas/network'\n                    example:\n                      '1':\n                        '0': 2\n                        '1': BY\n                        '2': Bayern\n                      BY:\n                        '0': 2\n                        '1': BY\n                        '2': Bayern\n                type: object\n      summary: Get all networks\n      tags:\n        - metadata\n  /scopes/json:\n    get:\n      description: The entry point returns a list of all scopes.\n      parameters:\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/index'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                example:\n                  '2':\n                    '0': 2\n                    '1': 1SMW\n                    '2': hour\n                    '3': 3600\n                    '4': 0\n                    '5': 1-hour average\n                  1SMW:\n                    '0': 2\n                    '1': 1SMW\n                    '2': hour\n                    '3': 3600\n                    '4': 0\n                    '5': 1-hour average\n                properties:\n                  id|code:\n                    $ref: '#/components/schemas/scope'\n                type: object\n      summary: Get all scopes\n      tags:\n        - metadata\n  /stationsettings/json:\n    get:\n      description: This entry point returns a list of all station settings.\n      parameters:\n        - $ref: '#/components/parameters/lang'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/stationsetting'\n                type: array\n      summary: Get all station settings\n      tags:\n        - metadata\n  /stationtypes/json:\n    get:\n      description: This entry point returns a list of all station types.\n      parameters:\n        - $ref: '#/components/parameters/lang'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/stationtype'\n                type: array\n      summary: Get all station types\n      tags:\n        - metadata\n  /thresholds/json:\n    get:\n      description: This entry point returns a list of all thresholds\n      parameters:\n        - $ref: '#/components/parameters/usethreshold'\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/component'\n        - $ref: '#/components/parameters/scope'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/threshold'\n                type: array\n        '422':\n          description: required parameter is missing.\n      summary: Get all thresholds\n      tags:\n        - metadata\n  /transgressions/json:\n    get:\n      description: Returns exceedances data\n      parameters:\n        - $ref: '#/components/parameters/componentReq'\n        - $ref: '#/components/parameters/yearReq'\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/index'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                properties:\n                  indices:\n                    type: object\n                    description: Description of indices\n                    example:\n                      '0': station id,\n                      '1': day_frist,\n                      '2': day_recent,\n                      '3': value of year,\n                      '4': 4-15 values of month\n                  data:\n                    items:\n                      $ref: '#/components/schemas/transgression'\n                    type: array\n        '422':\n          description: required parameter is missing.\n      summary: Get exceedances data\n      tags:\n        - exceedances\n  /transgressiontypes/json:\n    get:\n      description: Returns all exceedances types\n      parameters:\n        - $ref: '#/components/parameters/lang'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/transgressiontype'\n      summary: Get all exceedances types\n      tags:\n        - metadata\n  /meta/json:\n    get:\n      parameters:\n        - $ref: '#/components/parameters/use'\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/dateFromAq'\n        - $ref: '#/components/parameters/dateToAq'\n        - $ref: '#/components/parameters/timeFromAq'\n        - $ref: '#/components/parameters/timeToAq'\n      summary: Get combined metadata for use\n      description: \u003e-\n        The use parameter defines what meta data should be returned. E.g. if you\n        set use to airquality, meta data of airquality is returned.\n      tags:\n        - metadata\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  components:\n                    description: \u003e-\n                      components (available for use = airquality, map,\n                      transgression, annualbalance, measure)\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id of component:\n                          $ref: '#/components/schemas/component'\n                      example:\n                        '5':\n                          '0': 5\n                          '1': NO2\n                          '2': NOÃ¢â€šâ€š\n                          '3': Ã‚Âµg/mÃ‚Â³\n                          '4': Nitrogen dioxid\n                  scopes:\n                    description: 'scopes (available for use = airquality, map, measure)'\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id of scope:\n                          $ref: '#/components/schemas/scope'\n                      example:\n                        '2':\n                          '0': 2\n                          '1': 1SMW\n                          '2': hour\n                          '3': 3600\n                          '4': 0\n                          '5': 1-hour average\n                  networks:\n                    description: \u003e-\n                      networks (available for use = air quality, transgression,\n                      annualbalance, measure)\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id of network:\n                          $ref: '#/components/schemas/network'\n                      example:\n                        '2':\n                          '0': 2\n                          '1': BY\n                          '2': Bavaria\n                  stations:\n                    description: \u003e-\n                      stations (available for use = airquality, transgression,\n                      annualbalance, measure)\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id of station:\n                          $ref: '#/components/schemas/station'\n                      example:\n                        '769':\n                          '0': 769\n                          '1': DEHH016\n                          '2': Hamburg Billbrook\n                          '3': Hamburg\n                          '4': 21BI\n                          '5': 1985-01-01T00:00:00.000Z\n                          '6': 1985-01-01T00:00:00.000Z\n                          '7': 10.0817\n                          '8': 53.529\n                          '9': 6\n                          '10': 1\n                          '11': 2\n                          '12': HH\n                          '13': Hamburg\n                          '14': urban area\n                          '15': urban\n                          '16': industry\n                  limits-1:\n                    description: 'Limits (available for use = airquality, measure)'\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        'concat of component id, scope id, station id':\n                          $ref: '#/components/schemas/limit'\n                      example:\n                        '11120':\n                          '0': 1\n                          '1': 1\n                          '2': 120\n                          '3': 2016-01-01T11:00:00.000Z\n                          '4': 2019-09-02T11:00:00.000Z\n                  limits-2:\n                    description: Limits (available for use = annualbalance)\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        '0':\n                          description: Year\n                          example: 2004\n                          type: integer\n                          minLength: 4\n                          maxLength: 4\n                        '1':\n                          description: Id of component\n                          example: 1\n                          type: integer\n                  xref:\n                    description: \u003e-\n                      Cross reference component/scope (available for use = map,\n                      measure)\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        '0':\n                          description: Id of component\n                          example: 2\n                          type: integer\n                        '1':\n                          description: Id of scope\n                          example: 4\n                          type: integer\n                        '2':\n                          description: \u003e-\n                            Flag if this combination of component and scope has\n                            a map\n                          example: 1\n                          type: integer\n                          minimum: 0\n                          maximum: 1\n                        '3':\n                          description: \u003e-\n                            Flag if this combination of component and scope has\n                            an alternative map\n                          example: 0\n                          type: integer\n                          minimum: 0\n                          maximum: 1\n                        '4':\n                          description: \u003e-\n                            Flag if this combination of component and scope is\n                            an hourly value\n                          example: 1\n                          type: integer\n                          minimum: 0\n                          maximum: 1\n        '422':\n          description: required parameter is missing.\n"
		}
	},
	"Error": "parse: paths: /networks/json: get: : responses: 200: content: application/json: schema: parse schema: object cannot contain 'items' field"
}