{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/zhenquan321/blog-feng"
		},
		"file": {
			"name": "swagger.json",
			"path": "server/swagger.json",
			"content": "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"Node-Typescript API\",\n    \"version\": \"1.0.0\",\n    \"description\": \"A sample API\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:3000\"\n    }\n  ],\n  \"paths\": {\n    \"/auth/signup/\": {\n      \"post\": {\n        \"description\": \"sign up user to application\",\n        \"tags\": [\n          \"auth\"\n        ],\n        \"requestBody\": {\n          \"description\": \"sign up body\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UserSchema\"\n              },\n              \"example\": {\n                \"email\": \"test.user@mail.com\",\n                \"password\": \"test_test\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"user successfuly signed in\",\n            \"content\": {\n              \"appication/json\": {\n                \"example\": {\n                  \"status\": 200,\n                  \"logged\": true,\n                  \"message\": \"Sign in successfull!!\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"sign in failed\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"status\": 400,\n                  \"logged\": false,\n                  \"message\": \"Email already exists\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/auth/login/\": {\n      \"post\": {\n        \"description\": \"Login user to application\",\n        \"tags\": [\n          \"auth\"\n        ],\n        \"requestBody\": {\n          \"description\": \"login body\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UserSchema\"\n              },\n              \"example\": {\n                \"email\": \"test.user@mail.com\",\n                \"password\": \"test_test\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"user successfuly logged\",\n            \"content\": {\n              \"appication/json\": {\n                \"example\": {\n                  \"status\": 200,\n                  \"logged\": true,\n                  \"message\": \"Successfully logged!\"\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"Not logged, invalid credentials\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"status\": 401,\n                  \"logged\": false,\n                  \"message\": \"Invalid credentials\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/auth/logout/\": {\n      \"post\": {\n        \"description\": \"Loogout from application\",\n        \"tags\": [\n          \"auth\"\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"users successfuly logout\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"status\": 200,\n                  \"logged\": false,\n                  \"message\": \"Successfuly logged out\"\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"cant logout user, because he didnt login to app\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"status\": 401,\n                  \"logged\": false,\n                  \"message\": \"You are not authorized to app. Can't logout\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/Blogs\": {\n      \"get\": {\n        \"description\": \"Get all stored Blogs in Database\",\n        \"tags\": [\n          \"Blogs\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An array of Blogs\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/Blogs\"\n                    }\n                  ]\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"description\": \"Create new Blog\",\n        \"tags\": [\n          \"Blogs\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"Blog creation request body\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/BlogSchema\"\n              },\n              \"example\": {\n                \"name\": \"BlogName\",\n                \"email\": \"test.Blog@mail.com\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"return created Blog\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/BlogSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/Blogs/{id}\": {\n      \"get\": {\n        \"description\": \"Get Blog by BlogId\",\n        \"tags\": [\n          \"Blogs\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"id\",\n            \"description\": \"the unique BlogId\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"return Blog by id\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/BlogSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"description\": \"Delete Blog by BlogId\",\n        \"tags\": [\n          \"Blogs\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"id\",\n            \"description\": \"the unique BlogId\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"return deleted Blog\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/BlogSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/Classifications\": {\n      \"get\": {\n        \"description\": \"Get all stored Classifications in Database\",\n        \"tags\": [\n          \"Classifications\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An array of Classifications\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/Classifications\"\n                    }\n                  ]\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"description\": \"Create new Classification\",\n        \"tags\": [\n          \"Classifications\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"Classification creation request body\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ClassificationSchema\"\n              },\n              \"example\": {\n                \"name\": \"ClassificationName\",\n                \"email\": \"test.Classification@mail.com\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"return created Classification\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/ClassificationSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/Classifications/{id}\": {\n      \"get\": {\n        \"description\": \"Get Classification by ClassificationId\",\n        \"tags\": [\n          \"Classifications\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"id\",\n            \"description\": \"the unique ClassificationId\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"return Classification by id\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/ClassificationSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"description\": \"Delete Classification by ClassificationId\",\n        \"tags\": [\n          \"Classifications\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"id\",\n            \"description\": \"the unique ClassificationId\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"return deleted Classification\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/ClassificationSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/Comments\": {\n      \"get\": {\n        \"description\": \"Get all stored Comments in Database\",\n        \"tags\": [\n          \"Comments\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An array of Comments\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/Comments\"\n                    }\n                  ]\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"description\": \"Create new Comment\",\n        \"tags\": [\n          \"Comments\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"Comment creation request body\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CommentSchema\"\n              },\n              \"example\": {\n                \"name\": \"CommentName\",\n                \"email\": \"test.Comment@mail.com\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"return created Comment\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/CommentSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/Comments/{id}\": {\n      \"get\": {\n        \"description\": \"Get Comment by CommentId\",\n        \"tags\": [\n          \"Comments\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"id\",\n            \"description\": \"the unique CommentId\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"return Comment by id\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/CommentSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"description\": \"Delete Comment by CommentId\",\n        \"tags\": [\n          \"Comments\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"id\",\n            \"description\": \"the unique CommentId\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"return deleted Comment\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/CommentSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/Movies\": {\n      \"get\": {\n        \"description\": \"Get all stored Movies in Database\",\n        \"tags\": [\n          \"Movies\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An array of Movies\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/Movies\"\n                    }\n                  ]\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"description\": \"Create new Movie\",\n        \"tags\": [\n          \"Movies\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"Movie creation request body\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/MovieSchema\"\n              },\n              \"example\": {\n                \"name\": \"MovieName\",\n                \"email\": \"test.Movie@mail.com\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"return created Movie\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/MovieSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/Movies/{id}\": {\n      \"get\": {\n        \"description\": \"Get Movie by MovieId\",\n        \"tags\": [\n          \"Movies\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"id\",\n            \"description\": \"the unique MovieId\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"return Movie by id\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/MovieSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"description\": \"Delete Movie by MovieId\",\n        \"tags\": [\n          \"Movies\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"id\",\n            \"description\": \"the unique MovieId\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"return deleted Movie\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/MovieSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/users\": {\n      \"get\": {\n        \"description\": \"Get all stored users in Database\",\n        \"tags\": [\n          \"users\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"An array of users\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/Users\"\n                    }\n                  ]\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"description\": \"Create new User\",\n        \"tags\": [\n          \"users\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"user creation request body\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UserSchema\"\n              },\n              \"example\": {\n                \"name\": \"userName\",\n                \"email\": \"test.user@mail.com\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"return created user\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/UserSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          },\n          \"default\": {\n            \"description\": \"unexpected error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Error\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/v1/users/{id}\": {\n      \"get\": {\n        \"description\": \"Get user by userId\",\n        \"tags\": [\n          \"users\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"id\",\n            \"description\": \"the unique userId\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"return user by id\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/UserSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"description\": \"Delete user by userId\",\n        \"tags\": [\n          \"users\"\n        ],\n        \"security\": [\n          {\n            \"cookieAuth\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"id\",\n            \"description\": \"the unique userId\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"return deleted user\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/UserSchema\"\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"UserSchema\": {\n        \"required\": [\n          \"email\",\n          \"name\"\n        ],\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"email\": {\n            \"type\": \"string\"\n          },\n          \"password\": {\n            \"type\": \"string\"\n          },\n          \"passwordResetToken\": {\n            \"type\": \"string\"\n          },\n          \"passwordResetExpires\": {\n            \"type\": \"string\",\n            \"format\": \"date\"\n          },\n          \"tokens\": {\n            \"type\": \"array\"\n          }\n        }\n      },\n      \"Users\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/UserSchema\"\n        }\n      },\n      \"Error\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"status\",\n          \"message\"\n        ],\n        \"properties\": {\n          \"status\": {\n            \"type\": \"integer\",\n            \"description\": \"HTTP status code\",\n            \"example\": 200\n          },\n          \"message\": {\n            \"type\": \"string\",\n            \"description\": \"Error description\",\n            \"example\": \"User created\"\n          }\n        }\n      }\n    },\n    \"securitySchemes\": {\n      \"cookieAuth\": {\n        \"type\": \"apiKey\",\n        \"in\": \"cookie\",\n        \"name\": \"sid\"\n      }\n    }\n  },\n  \"tags\": []\n}"
		}
	},
	"Error": "parse: paths: /v1/Blogs/{id}: get: : responses: 200: content: application/json: schema: parse schema: oneOf: [0]: parse schema: reference \"#/components/schemas/BlogSchema\": resolve reference \"#/components/schemas/BlogSchema\": schema not found"
}