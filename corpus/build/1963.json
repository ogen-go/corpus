{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/eth-cscs/firecrest"
		},
		"file": {
			"name": "firecrest-developers-api.yaml",
			"path": "doc/openapi/firecrest-developers-api.yaml",
			"content": "##\n##  Copyright (c) 2019-2021, ETH Zurich. All rights reserved.\n##\n##  Please, refer to the LICENSE file in the root directory.\n##  SPDX-License-Identifier: BSD-3-Clause\n##\nopenapi: 3.0.0\nservers:\n  - url: 'http://FIRECREST_URL'\n  - url: 'https://FIRECREST_URL'\ninfo:\n  version: 1.8.1-beta2\n  title: FirecREST API\n  description: \u003e\n    FirecREST platform, a RESTful Services Gateway to HPC resources, is a\n    high-performance and reusable framework that integrates with existing HPC\n    infrastructure, thus enabling the access to HPC resources to web-enabled\n    services.\n\n\n    FirecREST provides a REST API that defines a set of functions through which\n    developers can interact with using the HTTP/REST protocol architecture.\n    Calls to the REST API received by the services gateway are translated into\n    the appropriate infrastructure requests. Among the most prominent services\n    that FirecREST exposes we find authentication and authorization, system\n    status, file-system access, data mover, execution of parallel jobs,\n    accounting information, etc.\npaths:\n  '/status/services':\n    get:\n      summary: List of services\n      description: \u003e-\n        Returns a list containing all available micro services with a name,\n        description, and status.\n      tags:\n        - Status\n      responses:\n        '200':\n          description: List of services with status and description.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Services'\n        '400':\n          $ref: '#/components/responses/Standard400Error'\n  '/status/services/{servicename}':\n    parameters:\n      - name: servicename\n        in: path\n        description: The service name\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get service information\n      description: \u003e-\n        Returns a single service descriptor (name, description and status) from its name.\n      tags:\n        - Status\n      responses:\n        '200':\n          description: Service information\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Service'\n        '404':\n          description: Service does not exists\n  '/status/systems':\n    get:\n      summary: List of systems\n      description: Returns a list containing all available systems and response status.\n      tags:\n        - Status\n      # parameters:\n      #   - $ref: '#/components/parameters/pageSize'\n      #   - $ref: '#/components/parameters/pageNumber'\n      responses:\n        '200':\n          description: List of systems with status and description\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Systems'\n        '400':\n          $ref: '#/components/responses/Standard400Error'\n        '500':\n          $ref: '#/components/responses/Standard500Error'\n  '/status/systems/{machinename}':\n    parameters:\n      - name: machinename\n        in: path\n        description: The system name\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get system information\n      description: Returns a single system from its name.\n      tags:\n        - Status\n      responses:\n        '200':\n          description: System information\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/System'\n        '404':\n          description: System does not exists\n  '/status/parameters':\n    get:\n      summary: List of API parameters\n      description: Returns list of parameters that can be configured in environment files.\n      tags:\n        - Status\n      responses:\n        '200':\n          description: List of parameters and values\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Parameters'\n\n  '/utilities/ls':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    get:\n      summary: List directory contents\n      description: \u003e-\n        Returns a list of contents at the specified path on the {X-Machine-Name}\n        filesystem.\n      tags:\n        - Utilities\n      parameters:\n        - name: targetPath\n          in: query\n          description: Absolute path to destination\n          required: true\n          schema:\n            type: string\n          allowReserved: true\n        - name: showhidden\n          in: query\n          description: Show entries starting with '.'\n          schema:\n            type: boolean\n        # - $ref: '#/components/parameters/pageSize'\n        # - $ref: '#/components/parameters/pageNumber'\n      responses:\n        '200':\n          description: List of contents of path\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Files-metadata'\n        '400':\n          description: Error listing contents of path\n          content:\n            text/plain:\n              schema:\n                type: string\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: string\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: string\n            X-Permission-Denied:\n              description: User does not have permissions to access machine or path\n              schema:\n                type: string\n            X-Invalid-Path:\n              description: \u003cpath\u003e is an invalid path\n              schema:\n                type: string\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: string\n  '/utilities/mkdir':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    post:\n      summary: Creates a directory\n      description: 'Create a directory at the specified path on the {X-Machine-Name} filesystem.'\n      tags:\n        - Utilities\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                targetPath:\n                  type: string\n                  description: Absolute path to destination\n                p:\n                  type: string\n                  description: No error if existing, make parent directories as needed\n              required:\n                - targetPath\n              example:\n                targetPath: /home/user/newdir\n                p:\n      responses:\n        '201':\n          description: Directory created\n        '400':\n          description: Error creating directory\n          content:\n            text/plain:\n              schema:\n                type: string\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: string\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: string\n            X-Permission-Denied:\n              description: User does not have permissions to access machine or path\n              schema:\n                type: string\n            X-Exists:\n              description: \u003cpath\u003e already exists\n              schema:\n                type: string\n            X-Invalid-Path:\n              description: \u003cpath\u003e is an invalid path\n              schema:\n                type: string\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: string\n  '/utilities/rename':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    put:\n      summary: 'Rename/move a file, directory, or symlink'\n      description: \u003e-\n        Rename/move a file, directory, or symlink at the sourcePath to\n        the targetPath on the {X-Machine-Name} filesystem.\n      tags:\n        - Utilities\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data': # FIXME: this doesn't work for put requests\n            schema:\n              type: object\n              properties:\n                sourcePath:\n                  type: string\n                  description: Absolute path to source\n                targetPath:\n                  type: string\n                  description: Absolute path to destination\n              required:\n                - sourcePath\n                - targetPath\n              example:\n                sourcePath: /home/user/file\n                targetPath: /home/user/file-renamed\n      responses:\n        '200':\n          description: Success to rename file or directory\n        '400':\n          description: Error on rename operation\n          content:\n            text/plain:\n              schema:\n                type: string\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: string\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: string\n            X-Permission-Denied:\n              description: User does not have permissions to access machine or paths\n              schema:\n                type: string\n            X-Not-Found:\n              description: \u003coldpath\u003e not found\n              schema:\n                type: string\n            X-Exists:\n              description: \u003cnewpath\u003e already exists\n              schema:\n                type: string\n            X-Invalid-Path:\n              description: \u003coldpath\u003e and/or \u003cnewpath\u003e are invalid paths\n              schema:\n                type: string\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: string\n  '/utilities/chmod':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    put:\n      summary: Change file mode bits\n      description: Change the file mod bits of a given file according to the specified mode.\n      tags:\n        - Utilities\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data': # FIXME: this doesn't work for put requests\n            schema:\n              type: object\n              properties:\n                targetPath:\n                  type: string\n                  description: Absolute path to destination\n                mode:\n                  type: string\n                  description: Same as numeric mode of linux chmod tool\n              required:\n                - targetPath\n                - mode\n              example:\n                targetPath: /home/user/file\n                mode: \"700\"\n      responses:\n        '200':\n          description: Operation completed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Application-output'\n        '400':\n          description: Error in chmod operation\n          content:\n            text/plain:\n              schema:\n                type: string\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: string\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: string\n            X-Permission-Denied:\n              description: User does not have permissions to access machine or paths\n              schema:\n                type: string\n            X-Invalid-Path:\n              description: \u003cpath\u003e is an invalid path\n              schema:\n                type: string\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: string\n            X-Invalid-Mode:\n              description: \u003cmode\u003e is an invalid mode\n              schema:\n                type: string\n  '/utilities/chown':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    put:\n      summary: Change file owner and group\n      description: \u003e-\n        Changes the user and/or group ownership of a given file. If only owner\n        or group information is passed, only that information will be updated.\n      tags:\n        - Utilities\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                targetPath:\n                  type: string\n                  description: Absolute path to destination\n                owner:\n                  type: string\n                  description: Owner username for target\n                group:\n                  type: string\n                  description: group username for target\n              required:\n                - targetPath\n              example:\n                targetPath: /home/user/file\n                owner: newOwner\n                group: newGroup\n      responses:\n        '200':\n          description: Operation completed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Application-output'\n        '400':\n          description: Error in chwon operation\n          content:\n            text/plain:\n              schema:\n                type: string\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: string\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: string\n            X-Permission-Denied:\n              description: User does not have permissions to access machine or paths\n              schema:\n                type: string\n            X-Invalid-Path:\n              description: \u003cpath\u003e is an invalid path\n              schema:\n                type: string\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: string\n            X-Invalid-Owner:\n              description: \u003cowner\u003e is an invalid user\n              schema:\n                type: string\n            X-Invalid-Group:\n              description: \u003cgroup\u003e is an invalid group\n              schema:\n                type: string\n  '/utilities/copy':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    post:\n      summary: Copy file from a filesystem path to another\n      description: \u003e-\n        Copies file from {sourcePath} to {targetPath}.\n      tags:\n        - Utilities\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                sourcePath:\n                  type: string\n                  description: Absolute filesystem path to file to be copied\n                targetPath:\n                  type: string\n                  description: Absolute filesystem path where the {sourcePath} is copied\n              required:\n                - sourcePath\n                - targetPath\n              example:\n                sourcePath: /home/user/file\n                targetPath: /home/user/file-copied\n      responses:\n        '201':\n          description: Object copy succesful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Application-output'\n        '400':\n          description: Error in copy operation\n          content:\n            text/plain:\n              schema:\n                type: string\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: string\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: string\n            X-Permission-Denied:\n              description: User does not have permissions to access machine or paths\n              schema:\n                type: string\n            X-Invalid-Path:\n              description: \u003cpath\u003e is an invalid path\n              schema:\n                type: string\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: string\n            X-Exists:\n              description: \u003ctargetPath\u003e already exists\n              schema:\n                type: string\n            X-Not-Found:\n              description: \u003csourcePath\u003e not found\n              schema:\n                type: string\n  '/utilities/file':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    get:\n      summary: determine file type\n      description: Uses the file linux application to determine the type of a file on the\n        {X-Machine-Name} filesystem.\n      tags:\n        - Utilities\n      parameters:\n        - name: targetPath\n          in: query\n          description: Absolute filesystem path\n          required: true\n          allowEmptyValue: false\n          schema:\n            type: string\n          allowReserved: true\n      responses:\n        '200':\n          description: Operation completed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Application-output'\n        '400':\n          description: Error in file operation\n          content:\n            text/plain:\n              schema:\n                type: string\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: string\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: string\n            X-Permission-Denied:\n              description: User does not have permissions to access machine or paths\n              schema:\n                type: string\n            X-Invalid-Path:\n              description: \u003cpath\u003e is an invalid path\n              schema:\n                type: string\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: string\n        '401':\n          description: No auth header given\n          content:\n            text/plain:\n              schema:\n                type: string\n  '/utilities/symlink':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    post:\n      summary: Create a symlink\n      description: Create a symbolic link (symlink) on the\n        {X-Machine-Name} filesystem.\n      tags:\n        - Utilities\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                linkPath:\n                  type: string\n                  description: Absolute path to the new symlink\n                targetPath:\n                  type: string\n                  description: Absolute filesystem path to target that the symlink will point to\n              required:\n                - linkPath\n                - targetPath\n              example:\n                targetPath: /home/user/file\n                linkPath: /home/user/file-linked\n\n      responses:\n        '201':\n          description: Success create the symlink\n        '400':\n          description: Failed to create symlink\n          content:\n            text/plain:\n              schema:\n                type: string\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: string\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: string\n            X-Permission-Denied:\n              description: User does not have permissions to access machine or paths\n              schema:\n                type: string\n            X-Exists:\n              description: \u003csource\u003e already exists\n              schema:\n                type: string\n            X-Invalid-Path:\n              description: \u003ctarget\u003e and/or \u003csource\u003e are invalid paths\n              schema:\n                type: string\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: string\n  '/utilities/download':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Download a small file\n      description: \u003e-\n        Blocking call that returns the file from the specified path on the\n        {X-Machine-Name} filesystem.\n      tags:\n        - Utilities\n      parameters:\n        - name: sourcePath\n          in: query\n          description: Path to the file to download\n          required: true\n          schema:\n            type: string\n          allowReserved: true\n      responses:\n        '200':\n          description: Returns the file as part of the response body\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        '400':\n          description: Failed to download file\n          content:\n            text/plain:\n              schema:\n                type: string\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: string\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: string\n            X-Permission-Denied:\n              description: User does not have permissions to access machine or path\n              schema:\n                type: string\n            X-Invalid-Path:\n              description: \u003cpath\u003e is invalid\n              schema:\n                type: string\n  '/utilities/upload':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    post:\n      summary: Uploads a small file\n      description: 'Uploads a file to the specified path on the {X-Machine-Name} filesystem.'\n      tags:\n        - Utilities\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n                  description: File to be uploaded\n                targetPath:\n                  type: string\n                  description: Absolute path to destination\n              required:\n                - file\n                - targetPath\n              example:\n                file: \"@/home/local/file\"\n                targetPath: /home/user/remotefile\n      responses:\n        '201':\n          description: File upload successful\n        '400':\n          description: Failed to upload file\n          content:\n            text/plain:\n              schema:\n                type: string\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: string\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: string\n            X-Permission-Denied:\n              description: User does not have permissions to access machine or path\n              schema:\n                type: string\n            X-Invalid-Path:\n              description: \u003cpath\u003e is invalid.\n              schema:\n                type: string\n  '/utilities/rm':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    delete:\n      summary: Delete a small file\n      description: 'Delete a file to the specified path on the {X-Machine-Name} filesystem.'\n      tags:\n        - Utilities\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data': # FIXME\n            schema:\n              type: object\n              properties:\n                targetPath:\n                  type: string\n                  description: Absolute path to destination\n              required:\n                - targetPath\n              example:\n                targetPath: /home/user/remotefile\n      responses:\n        '204':\n          description: File deletion successful\n        '400':\n          description: Failed to delete file\n          content:\n            text/plain:\n              schema:\n                type: string\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: string\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: string\n            X-Permission-Denied:\n              description: User does not have permissions to access machine or path\n              schema:\n                type: string\n            X-Invalid-Path:\n              description: \u003cpath\u003e is invalid.\n              schema:\n                type: string\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: string\n  '/utilities/checksum':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Calculate the checksum of a given file\n      description: 'Calculate the SHA256 (256-bit) checksum of a specified file in {targetPath} on the {X-Machine-Name} filesystem.'\n      tags:\n        - Utilities\n      parameters:\n        - name: targetPath\n          in: query\n          description: Path to the file to calculate checksum\n          required: true\n          schema:\n            type: string\n          allowReserved: true\n      responses:\n        '200':\n          description: Checksum successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Utilities-ok'\n        '400':\n          description: Error obatining checksum\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Utilities-notok'\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: string\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: string\n            X-Permission-Denied:\n              description: User does not have permissions to access machine or path\n              schema:\n                type: string\n            X-Invalid-Path:\n              description: \u003cpath\u003e is invalid.\n              schema:\n                type: string\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: string\n            X-A-Directory:\n              description: \u003ctargetPath\u003e is a directory, can't checksum directories\n              schema:\n                type: string\n  '/utilities/view':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    get:\n      summary: View the content of a given file\n      description: 'View the content of a specified file in {targetPath} on the {X-Machine-Name} filesystem.'\n      tags:\n        - Utilities\n      parameters:\n        - name: targetPath\n          in: query\n          description: Path to the file to view\n          required: true\n          schema:\n            type: string\n          allowReserved: true\n      responses:\n        '200':\n          description: File content successfully returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Utilities-ok'\n        '400':\n          description: Failed to view file content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Utilities-notok'\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: string\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: string\n            X-Permission-Denied:\n              description: User does not have permissions to access machine or path\n              schema:\n                type: string\n            X-Invalid-Path:\n              description: \u003cpath\u003e is invalid.\n              schema:\n                type: string\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: string\n            X-A-Directory:\n              description: \u003ctargetPath\u003e is a directory, can't checksum directories\n              schema:\n                type: string\n  '/compute/jobs/upload':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    post:\n      summary: Submit Job by uploading a local sbatch file\n      description: \u003e-\n        Non-blocking call. Submits a batch script to SLURM on the target system.\n        The batch script is uploaded as a file to the microservice which then\n        stores it in a temporal directory in preparation to be submitted to the\n        workload manager. The operation returns the task id associated to the\n        Task microservice that will contain information of the SLURM job once\n        it is created.\n      tags:\n        - Compute\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n                  description: SBATCH script file to be submitted to SLURM\n                account:\n                  type: string\n                  description: Name of the account associated to the user in the scheduler. If not set, the one incuded in the sbatch file is taken.\n              required:\n                - file\n      responses:\n        '201':\n          description: Task created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Success'\n        '400':\n          description: Task creation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: integer\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: integer\n            X-Permission-Denied:\n              description: User does not have permissions to access machine\n              schema:\n                type: integer\n            X-sbatch-error:\n              description: sbatch returned error\n              schema:\n                type: integer\n  '/compute/jobs/path':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    post:\n      summary: Submit Job by a given remote sbatch file\n      description: \u003e-\n        Non-blocking call. Submits a batch script to SLURM on the target system.\n        The batch script is uploaded as a file to the microservice which then\n        stores it in a temporal directory in preparation to be submitted to the\n        workload manager. The operation returns the task id associated to the\n        Task microservice that will contain information of the SLURM job once\n        it is created.\n      tags:\n        - Compute\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                targetPath:\n                  type: string\n                  description: path to the SBATCH script file stored in {X-Machine-Name} machine to be submitted to SLURM\n                account:\n                  type: string\n                  description: Name of the account associated to the user in the scheduler. If not set, the one incuded in the sbatch file is taken.\n              required:\n                - targetPath\n      responses:\n        '201':\n          description: Task created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Success'\n        '400':\n          description: Task creation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: integer\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: integer\n            X-Permission-Denied:\n              description: User does not have permissions to access machine\n              schema:\n                type: integer\n            X-sbatch-error:\n              description: sbatch returned error\n              schema:\n                type: integer\n  '/compute/jobs':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Retrieves information from all jobs\n      description: Information about jobs on the SLURM scheduling queue. This call uses the `squeue` command.\n      tags:\n        - Compute\n      parameters:\n        - name: jobs\n          in: query\n          description: Comma-separated list of job IDs to retrieve.\n          schema:\n            type: array\n            items:\n              type: string\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/pageNumber'\n      responses:\n        '200':\n          description: Task created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Success'\n        '400':\n          description: Task creation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: integer\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: integer\n            X-Permission-Denied:\n              description: User does not have permissions to access machine\n              schema:\n                type: integer\n  '/compute/jobs/{jobid}':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n      - name: jobid\n        in: path\n        description: ID of the job\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Retrieves information from a job\n      description: Information about a job on the SLURM scheduling queue. This call uses the `squeue` command.\n      tags:\n        - Compute\n      responses:\n        '200':\n          description: Task created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Success'\n        '400':\n          description: Task creation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: integer\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: integer\n            X-Permission-Denied:\n              description: User does not have permissions to access machine\n              schema:\n                type: integer\n    delete:\n      summary: Delete Job\n      description: Cancel job from SLURM, using the `scancel` command.\n      tags:\n        - Compute\n      responses:\n        '204':\n          description: Task created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Success'\n        '400':\n          description: Task creation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: integer\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: integer\n            X-Permission-Denied:\n              description: User does not have permissions to access machine\n              schema:\n                type: integer\n  '/compute/acct':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Job account information\n      description: \u003e-\n        Reports accounting data of job in the SLURM job accounting log, this\n        includes information from completed jobs. This call uses the `sacct` command.\n      tags:\n        - Compute\n      parameters:\n        - name: jobs\n          in: query\n          description: Comma-separated list of job IDs to retrieve\n          schema:\n            type: array\n            items:\n              type: string\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/pageNumber'\n        - name: starttime\n          in: query\n          description: Start date/time of job's query. Allowed formats are HH:MM[:SS] [AM|PM]\n            MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]\n            MM/DD[/YY]-HH:MM[:SS]\n            YYYY-MM-DD[THH:MM[:SS]]\n          required: false\n          schema:\n            type: string\n        - name: endtime\n          in: query\n          description: End time (and/or date) of sacct query. Allowed formats are\n            HH:MM[:SS] [AM|PM]\n            MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]\n            MM/DD[/YY]-HH:MM[:SS]\n            YYYY-MM-DD[THH:MM[:SS]]\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Task created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Success'\n        '400':\n          description: Task creation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: integer\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: integer\n            X-Permission-Denied:\n              description: User does not have permissions to access machine\n              schema:\n                type: integer\n  '/storage/xfer-internal/rsync':\n    post:\n      summary: rsync\n      description: \u003e-\n        Data transfer between internal CSCS file systems. To transfer files and\n        folders from `/users`, `/project` or `/store` to the `/scratch` file systems for\n        stage-in or stage-out jobs. Reference:\n        https://user.cscs.ch/storage/transfer/internal/\n      tags:\n        - Storage\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                sourcePath:\n                  type: string\n                  description: Source path to the location filesystem\n                targetPath:\n                  type: string\n                  description: Absolute path to destination\n                jobName:\n                  type: string\n                  description: job name the rsync operation\n                  default: rsync-job\n                time:\n                  type: string\n                  description: \u003e-\n                    Limit on the total run time of the rsync. Acceptable time formats\n                    \\'minutes\\',   \\'minutes:seconds\\',   \\'hours:minutes:seconds\\',\n                    \\'days-hours\\', \\'days-hours:minutes\\' and\n                    \\'days-hours:minutes:seconds\\'. Note: for stage-in queue a slurm\n                    xfer job.\n                  default: '02:00:00'\n                stageOutJobId:\n                  type: string\n                  description: Move data after job with id {stageOutJobId} is completed\n                  default: null\n                account:\n                  type: string\n                  description: Name of the account associated to the user in the scheduler. If not set, system default is taken.\n                  default: null\n              required:\n                - sourcePath\n                - targetPath\n              example:\n                sourcePath: /home/user/origin\n                targetPath: /home/user/destination\n                jobName: rsync-firecrest-job\n                stageOutJobId: \"123456\"\n                time: \"2-03:00:00\"\n      responses:\n        '201':\n          description: Task created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Success'\n        '400':\n          description: Task creation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n          headers:\n            X-Permission-Denied:\n              description: User does not have permissions to access paths\n              schema:\n                type: integer\n            X-Not-Found:\n              description: sourcePath not found\n              schema:\n                type: integer\n            X-Exists:\n              description: targetPath already exists\n              schema:\n                type: integer\n            X-Invalid-Path:\n              description: sourcePath and/or targetPath are invalid paths.\n              schema:\n                type: integer\n  '/storage/xfer-internal/mv':\n    post:\n      summary: move (rename) files\n      description: \u003e-\n        'Move files between internal CSCS file systems. Rename sourcePath to\n        targetPath, or move sourcePath to targetPath /users, /project or /store\n        to the /scratch file systems. Possible to stage-out jobs providing the\n        SLURM Id of a production job. Reference:\n        https://user.cscs.ch/storage/data_transfer/internal_transfer/'\n      tags:\n        - Storage\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                sourcePath:\n                  type: string\n                  description: source path to the location filesystem\n                targetPath:\n                  type: string\n                  description: Absolute path to destination\n                jobName:\n                  type: string\n                  description: job name the rename operation\n                  default: mv-job\n                time:\n                  type: string\n                  description: \u003e-\n                    'Limit on the total run time of the rename. Acceptable time formats\n                    \\'minutes\\',   \\'minutes:seconds\\',   \\'hours:minutes:seconds\\',\n                    \\'days-hours\\', \\'days-hours:minutes\\' and\n                    \\'days-hours:minutes:seconds\\'. Note: for stage-in queue a slurm\n                    xfer job.'\n                  default: '02:00:00'\n                stageOutJobId:\n                  type: string\n                  description: Move data after job with id {stageOutJobId} is completed\n                  default: null\n                account:\n                  type: string\n                  description: Name of the account associated to the user in the scheduler. If not set, system default is taken.\n                  default: null\n              required:\n                - sourcePath\n                - targetPath\n              example:\n                sourcePath: /home/user/origin\n                targetPath: /home/user/destination\n                jobName: mv-firecrest-job\n                stageOutJobId: \"123456\"\n                time: \"2-03:00:00\"\n      responses:\n        '201':\n          description: Task created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Success'\n        '400':\n          description: Task creation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n          headers:\n            X-Permission-Denied:\n              description: User does not have permissions to access paths\n              schema:\n                type: integer\n            X-Not-Found:\n              description: sourcePath not found\n              schema:\n                type: integer\n            X-Exists:\n              description: targetPath already exists\n              schema:\n                type: integer\n            X-Invalid-Path:\n              description: sourcePath and/or targetPath are invalid paths.\n              schema:\n                type: integer\n  '/storage/xfer-internal/cp':\n    post:\n      summary: copy files and directories\n      description: \u003e-\n        'Copy files and directories between internal CSCS file systems. Copy\n        sourcePath to targetPath /users, /project or /store to the /scratch file\n        systems. Possible to stage-out jobs providing the SLURM Id of a\n        production job. Reference:\n        https://user.cscs.ch/storage/data_transfer/internal_transfer/'\n      tags:\n        - Storage\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                sourcePath:\n                  type: string\n                  description: source path to the location filesystem\n                targetPath:\n                  type: string\n                  description: Absolute path to destination\n                jobName:\n                  type: string\n                  description: job name the copy operation\n                  default: cp-job\n                time:\n                  type: string\n                  description: \u003e-\n                    'Limit on the total run time of the copy. Acceptable time formats\n                    \\'minutes\\',   \\'minutes:seconds\\',   \\'hours:minutes:seconds\\',\n                    \\'days-hours\\', \\'days-hours:minutes\\' and\n                    \\'days-hours:minutes:seconds\\'. Note: for stage-in queue a slurm\n                    xfer job.'\n                  default: '02:00:00'\n                stageOutJobId:\n                  type: string\n                  description: Copy data after job with id {stageOutJobId} is completed\n                  default: null\n                account:\n                  type: string\n                  description: Name of the account associated to the user in the scheduler. If not set, system default is taken.\n                  default: null\n              required:\n                - sourcePath\n                - targetPath\n              example:\n                sourcePath: /home/user/origin\n                targetPath: /home/user/destination\n                jobName: cp-firecrest-job\n                stageOutJobId: \"123456\"\n                time: \"2-03:00:00\"\n      responses:\n        '201':\n          description: Task created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Success'\n        '400':\n          description: Task creation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n          headers:\n            X-Permission-Denied:\n              description: User does not have permissions to access paths\n              schema:\n                type: integer\n            X-Not-Found:\n              description: sourcePath not found\n              schema:\n                type: integer\n            X-Exists:\n              description: targetPath already exists\n              schema:\n                type: integer\n            X-Invalid-Path:\n              description: sourcePath and/or targetPath are invalid paths.\n              schema:\n                type: integer\n  '/storage/xfer-internal/rm':\n    post:\n      summary: remove files or directories\n      description: \u003e-\n        'Remove files or directories in the internal CSCS file systems, with\n        options rm -rf. With targetPath pointing to file system /users,\n        /project, /store, or /scratch. Possible to stage-out jobs providing the\n        SLURM Id of a production job. Reference:\n        https://user.cscs.ch/storage/data_transfer/internal_transfer/'\n      tags:\n        - Storage\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                targetPath:\n                  type: string\n                  description: Absolute path to destination\n                jobName:\n                  type: string\n                  description: job name the remove operation\n                  default: rm-job\n                time:\n                  type: string\n                  description: \u003e-\n                    'Limit on the total run time of the rm. Acceptable time formats\n                    \\'minutes\\',   \\'minutes:seconds\\',   \\'hours:minutes:seconds\\',\n                    \\'days-hours\\', \\'days-hours:minutes\\' and\n                    \\'days-hours:minutes:seconds\\'. Note: for stage-in queue a slurm\n                    xfer job.'\n                  default: '02:00:00'\n                stageOutJobId:\n                  type: string\n                  description: Delete data after job with id {stageOutJobId} is completed\n                  default: null\n                account:\n                  type: string\n                  description: Name of the account associated to the user in the scheduler. If not set, system default is taken.\n                  default: null\n              required:\n                - targetPath\n              example:\n                targetPath: /home/user/file-to-delete\n                jobName: rm-firecrest-job\n                stageOutJobId: \"123456\"\n                time: \"2-03:00:00\"\n      responses:\n        '201':\n          description: Task created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Success'\n        '400':\n          description: Task creation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n          headers:\n            X-Permission-Denied:\n              description: User does not have permissions to access paths\n              schema:\n                type: integer\n            X-Not-Found:\n              description: targetPath not found\n              schema:\n                type: integer\n            X-Invalid-Path:\n              description: targetPath is an invalid path.\n              schema:\n                type: integer\n  '/storage/xfer-external/upload':\n    post:\n      summary: Upload a file\n      description: \u003e-\n        Starts an asynchronous upload to a specific path, the upload workflow is\n        coordinated by a task in the Tasks microservice. This returns a task\n        task that will provide a persisten URL at which the target file can be\n        uploaded to, the persistent URL is encoded with a random hash and is\n        available for an extended period of time (it does not depend on the\n        lifetime of the OIDC token).\n\n      tags:\n        - Storage\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                sourcePath:\n                  type: string\n                  description: source path to the file in local machine\n                targetPath:\n                  type: string\n                  description: Absolute path to destination\n              required:\n                - sourcePath\n                - targetPath\n              example:\n                sourcePath: /home/local_user/origin\n                targetPath: /home/user/destination\n      responses:\n        '201':\n          description: Task created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Success'\n        '400':\n          description: Task creation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n          headers:\n            X-Permission-Denied:\n              description: User does not have permissions to access path\n              schema:\n                type: integer\n            X-Not-Found:\n              description: targetPath not found\n              schema:\n                type: integer\n            X-Invalid-Path:\n              description: targetPath is an invalid path.\n              schema:\n                type: integer\n            X-Not-A-Directory:\n              description: targetPath is not a directory\n              schema:\n                type: string\n            X-Error:\n              description: Error\n              schema:\n                type: string\n  '/storage/xfer-external/download':\n    post:\n      summary: Download a file\n      description: \u003e-\n        Start an asynchronous download by creating a new task in the Tasks\n        microservice. The new task will first copy the file to the file transfer\n        server, once this copy has been completed a persisten URL will be\n        provided by the task. This persistent URL is encoded with a random hash\n        and is available for an extended period of time (it does not depend on\n        the lifetime of the OIDC token).\n      tags:\n        - Storage\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                sourcePath:\n                  type: string\n                  description: source path to the file in remote filesystem\n              required:\n                - sourcePath\n              example:\n                sourcePath: /home/user/file\n      responses:\n        '201':\n          description: Task created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Success'\n        '400':\n          description: Task creation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n          headers:\n            X-Permission-Denied:\n              description: User does not have permissions to access path\n              schema:\n                type: string\n            X-Not-Found:\n              description: targetPath not found\n              schema:\n                type: string\n            X-Invalid-Path:\n              description: targetPath is an invalid path.\n              schema:\n                type: string\n            X-A-Directory:\n              description: targetPath is a directory, can't download directories\n              schema:\n                type: string\n            X-Error:\n              description: Error\n              schema:\n                type: string\n  '/storage/xfer-external/invalidate':\n    post:\n      summary: Invalidate temporary URL\n      description: \u003e-\n        Remove a temporary URL attached to a given Task Id\n      tags:\n        - Storage\n      parameters:\n        - in: header\n          name: X-Task-Id\n          description: Task Id associated to the upload/download task\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: URL invalidated correctly\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Invalidate-ok'\n        '400':\n          description: Error invalidating URL\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n  '/tasks':\n    get:\n      summary: Returns all tasks\n      description: List all recorded tasks and their status.\n      tags:\n        - Tasks\n      responses:\n        '200':\n          description: tasks in queue\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tasks'\n  '/tasks/{taskid}':\n    parameters:\n      - name: taskid\n        in: path\n        description: id of task\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Task status information\n      description: A long running task progress and result is tracked through a {taskid}.\n      tags:\n        - Tasks\n      responses:\n        '200':\n          description: \u003e-\n              Current status of a task with `taskid`.\n              Depending on the type of task (`Compute` or `Storage`) and of the current status, the schema could change.\n              Check the field `status` to match the specific response.\n          content: \n            object:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Task-100'\n                  - $ref: '#/components/schemas/Task-Storage-Ext-Upload-110'\n                  - $ref: '#/components/schemas/Task-Storage-Ext-Upload-111'\n                  - $ref: '#/components/schemas/Task-Storage-Ext-Upload-112'\n                  - $ref: '#/components/schemas/Task-Storage-Ext-Upload-113'\n                  - $ref: '#/components/schemas/Task-Storage-Ext-Upload-114'\n                  - $ref: '#/components/schemas/Task-Storage-Ext-Upload-115'\n                  - $ref: '#/components/schemas/Task-Storage-Ext-Download-116'\n                  - $ref: '#/components/schemas/Task-Storage-Ext-Download-117'\n                  - $ref: '#/components/schemas/Task-Storage-Ext-Download-118'\n                  - $ref: '#/components/schemas/Task-Compute-Job-Submitted-200'\n                  - $ref: '#/components/schemas/Task-Compute-Job-Submitted-400'\n                  - $ref: '#/components/schemas/Task-Compute-Job-Listed-200'\n                  - $ref: '#/components/schemas/Task-Compute-Job-Listed-400'\n                  - $ref: '#/components/schemas/Task-Compute-Acct-200'\n                  - $ref: '#/components/schemas/Task-Compute-Acct-400'\n                  - $ref: '#/components/schemas/Task-Compute-Delete-200'\n                  - $ref: '#/components/schemas/Task-Compute-Delete-400'\n  '/reservations':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Returns all reservations\n      description: List all active reservations and their status\n      tags:\n        - Reservation\n      responses:\n        '200':\n          description: Reservation list returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Reservations'\n        '400':\n          description: Error listing reservations\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: integer\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: integer\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: integer\n        '404':\n          description: Error listing reservations\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task-Creation-Error'\n          headers:\n            X-Permission-Denied:\n              description: User does not have permissions to access machine\n              schema:\n                type: integer\n\n    post:\n      summary: Creates a new reservation\n      description: Creates a new reservation with {reservation} name for a given SLURM groupname\n      tags:\n        - Reservation\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                reservation:\n                  type: string\n                  description: name of the reservation\n                account:\n                  type: string\n                  description: name of the account in SLURM to which the reservation is made for\n                numberOfNodes:\n                  type: string\n                  description: number of nodes needed for the reservation\n                nodeType:\n                  type: string\n                  description: type of node\n                  default: knl\n                starttime:\n                  type: string\n                  description: start time for reservation (YYYY-MM-DDTHH:MM:SS)\n                endtime:\n                  type: string\n                  description: end time for reservation (YYYY-MM-DDTHH:MM:SS)\n              required:\n                - reservation\n                - account\n                - numberOfNodes\n                - nodeType\n                - starttime\n                - endtime\n              example:\n                reservation: selvedas\n                project: psigroup\n                numberOfNodes: 10\n                nodeType: knl\n                starttime: '2020-12-24T00:00:00'\n                endtime: '2020-12-24T12:30:00'\n      responses:\n        '201':\n          description: Reservation succesfully created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: string\n                    example: \"Reservation created: {reservation}\"\n        '400':\n          description: Error creating reservation\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"Error creating reservation {reservation}\"\n                  description:\n                    type: string\n                    example: \"Error: invalid start time reservation\"\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: integer\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: integer\n            X-Error:\n              description: Error\n              schema:\n                type: integer\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: integer\n        '404':\n          description: Error creating reservation\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"Error creating reservation {reservation}\"\n          headers:\n            X-Permission-Denied:\n              description: User does not have permissions to access machine\n              schema:\n                type: integer\n  '/reservations/{reservation}':\n    parameters:\n      - in: header\n        name: X-Machine-Name\n        description: The system name\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: reservation\n        description: reservation name\n        required: true\n        schema:\n          type: string\n    put:\n      summary: Updates reservation {reservation}\n      description: Updates an already created reservation named {reservation}\n      tags:\n        - Reservation\n      requestBody:\n        required: true\n        content:\n          'multipart/form-data':\n            schema:\n              type: object\n              properties:\n                numberOfNodes:\n                  type: string\n                  description: number of nodes needed for the reservation\n                nodeType:\n                  type: string\n                  description: type of node\n                  default: knl\n                starttime:\n                  type: string\n                  description: start time for reservation (YYYY-MM-DDTHH:MM:SS)\n                endtime:\n                  type: string\n                  description: end time for reservation (YYYY-MM-DDTHH:MM:SS)\n              required:\n                - reservation\n                - numberOfNodes\n                - nodeType\n                - starttime\n                - endtime\n              example:\n                reservation: selvedas\n                project: psigroup\n                numberOfNodes: 10\n                nodeType: knl\n                starttime: '2020-12-24T00:00:00'\n                endtime: '2020-12-24T12:30:00'\n      responses:\n        '200':\n          description: Reservation succesfully updated\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: string\n                    example: \"Reservation {reservation} updated\"\n        '400':\n          description: Error updating reservation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"Error updating reservation {reservation}\"\n                  description:\n                    type: string\n                    example: \"Error: {reservation} doesn't seem to be a valid reservation\"\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: integer\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: integer\n            X-Error:\n              description: Error\n              schema:\n                type: integer\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: integer\n        '404':\n          description: Error updating reservation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"Error updating reservation {reservation}\"\n          headers:\n            X-Permission-Denied:\n              description: User does not have permissions to access machine\n              schema:\n                type: integer\n\n    delete:\n      summary: Deletes reservation {reservation}\n      description: Deletes an already created reservation named {reservation}\n      tags:\n        - Reservation\n      responses:\n        '204':\n          description: Reservation succesfully deleted\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: string\n                    example: \"Reservation {reservation} removed\"\n        '400':\n          description: Error deleting reservation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"Error deleting reservation {reservation}\"\n                  description:\n                    type: string\n                    example: \"Error: You are not an owner of the reservation\"\n          headers:\n            X-Machine-Does-Not-Exist:\n              description: Machine does not exist\n              schema:\n                type: integer\n            X-Machine-Not-Available:\n              description: Machine is not available\n              schema:\n                type: integer\n            X-Error:\n              description: Error\n              schema:\n                type: integer\n            X-Timeout:\n              description: Command has finished with timeout signal\n              schema:\n                type: integer\n        '404':\n          description: Error deleting reservation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"Error deleting reservation {reservation}\"\n          headers:\n            X-Permission-Denied:\n              description: User does not have permissions to access machine\n              schema:\n                type: integer\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\n  parameters:\n    machinename:\n      name: machineName\n      in: path\n      description: The system name\n      required: true\n      schema:\n        type: string\n    pageSize:\n      name: pageSize\n      in: query\n      description: Number of entries returned\n      schema:\n        type: integer\n        enum:\n          - 10\n          - 25\n          - 50\n          - 100\n        default: 25\n    pageNumber:\n      name: pageNumber\n      in: query\n      description: Page number\n      schema:\n        type: integer\n        default: 0\n    path:\n      name: path\n      in: query\n      description: Filesystem path\n      schema:\n        type: string\n      allowReserved: true\n  responses:\n    QueryParameter400Error:\n      description: Bad request\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/Error'\n    Standard400Error:\n      description: Bad Request error\n    Standard500Error:\n      description: An unexpected error occured\n  schemas:\n    File-metadata:\n      required:\n        - name\n        - type\n        - link_target\n        - user\n        - group\n        - permissions\n        - last_modified\n        - size\n      properties:\n        name:\n          type: string\n        type:\n          type: string\n        link_target:\n          type: string\n        user:\n          type: string\n        group:\n          type: string\n        permissions:\n          type: string\n        last_modified:\n          type: string\n        size:\n          type: string\n    Files-metadata:\n      type: array\n      items:\n        $ref: '#/components/schemas/File-metadata'\n    System:\n      required:\n        - system\n      properties:\n        system:\n          type: string\n        status:\n          type: string\n          enum:\n            - available\n            - unavailable\n        description:\n          type: string\n    Systems:\n      type: array\n      items:\n        $ref: '#/components/schemas/System'\n    Parameters:\n      type: object\n      properties:\n        microservice-name:\n          type: object\n          properties:\n            name:\n              type: string\n            value:\n              type: string\n            unit:\n              type: string\n    Error:\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n    Service:\n      required:\n        - service\n      properties:\n        service:\n          type: string\n        status:\n          type: string\n          enum:\n            - available\n            - unavailable\n        description:\n          type: string\n    Services:\n      type: array\n      items:\n        $ref: '#/components/schemas/Service'\n    Job:\n      type: object\n      required:\n        - jobid\n      properties:\n        jobid:\n          type: string\n        partition:\n          type: string\n        name:\n          type: string\n        user:\n          type: string\n        state:\n          type: string\n        start_time:\n          type: string\n        time:\n          type: string\n        time_left:\n          type: string\n        nodes:\n          type: string\n        nodelist:\n          type: string\n    Jobs:\n      type: array\n      items:\n        $ref: '#/components/schemas/Job'\n    Session:\n      properties:\n        authenticated:\n          type: boolean\n        username:\n          type: string\n        domain:\n          type: string\n        session_time:\n          type: string\n        session_id:\n          type: string\n    Application-output:\n      type: object\n      properties:\n        stdout:\n          type: string\n          description: Standard output returned by application\n        stderr:\n          type: string\n          description: Standard error returned by application.\n    Task:\n      type: object\n      properties:\n        task_id:\n          type: string\n        hash_id:\n          type: string\n        description:\n          type: string\n        data:\n          type: object\n        last_modify:\n          type: string\n        user:\n          type: string\n        status:\n          type: string\n        service:\n          type: string\n        task_url:\n          type: string\n    Tasks:\n      type: array\n      items:\n        $ref: '#/components/schemas/Task'\n    Task-Creation-Success:\n      type: object\n      properties:\n        success:\n          type: string\n        task_url:\n          type: string\n        task_id:\n          type: string\n    Task-Creation-Error:\n      type: object\n      properties:\n        error:\n          type: string\n    Utilities-ok:\n      type: object\n      properties:\n        description:\n          type: string\n        output:\n          type: string\n    Utilities-notok:\n      type: object\n      properties:\n        description:\n          type: string\n        error:\n          type: string\n    Invalidate-ok:\n      type: object\n      properties:\n        success:\n          type: string\n    Reservation:\n      type: object\n      properties:\n        reservationname:\n          type: string\n        starttime:\n          type: string\n        endtime:\n          type: string\n        duration:\n          type: string\n        nodes:\n          type: string\n        nodecnt:\n          type: string\n        corecnt:\n          type: string\n        features:\n          type: string\n        partitionname:\n          type: string\n        flags:\n          type: string\n        users:\n          type: string\n        accounts:\n          type: string\n        licenses:\n          type: string\n        state:\n          type: string\n        burstbuffer:\n          type: string\n        watts:\n          type: string\n\n    Reservations:\n      type: array\n      items:\n        $ref: '#/components/schemas/Reservation'\n    Task-100:\n      type: object\n      description: Task has been created and is queued\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task (Queued)\n        data:\n          type: object\n          description: Data concerning the status of the task\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"100\"``)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (`\"compute\"` or `\"storage\"`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Storage-Ext-Upload-110:\n      type: object\n      description: Task information about progress in a task created with `POST /storage/xfer-external/upload`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Waiting for Form URL from Object Storage to be retrieved')\n        data:\n          type: object\n          description: Data concerning the status of the task\n          properties:\n            user: \n              type: string\n              description: Task owner user name\n            msg:\n              type: string\n              description: Message concerning current operations on the task\n            system_name:\n              type: string\n              description: Target system public name\n            system_addr:\n              type: string\n              description: Target system private name\n            target:\n              type: string\n              description: Path to the destination of the file in target system\n            source:\n              type: string\n              description: Local path to the file to be uploaded\n            status:\n              type: string\n              description: Status code (`\"110\"`)\n            hash_id:\n              type: string\n              description: for internal use of FirecREST\n            trace_id:\n              type: string\n              description: for internal use of FirecREST\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"110\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"storage\"`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Storage-Ext-Upload-111:\n      type: object\n      description: Task information about progress in a task created with `POST /storage/xfer-external/upload`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task (Form URL from Object Storage received)\n        data:\n          type: object\n          description: Data concerning the status of the task\n          properties:\n            user: \n              type: string\n              description: Task owner user name\n            msg:\n              type: object\n              description: Data concerning current operations on the task\n              properties:\n                command: \n                  type: string\n                  description: cURL command to execute object upload to Object Storage server\n                parameters:\n                  type: object\n                  description: parameters to be used with an data transfer software or library\n                  properties:\n                    method: \n                      type: string\n                      description: 'HTTP method to be used (POST, PUT). eg: with cURL `curl -X {method}`'\n                    url:\n                      type: string\n                      description: URL to be used to upload the object\n                    data:\n                      type: object\n                      description: 'HTTP POST Data object in the form \"key: value\" (for cURL, option `-d`)'\n                    files:\n                      type: string\n                      description: 'file object in HTTP form form with `-H \"Content-Type: multipart/form-data\"`'\n                    json:\n                      type: object\n                      description: 'HTTP JSON object in the form key: value, to be used in HTTP with `-H \"Content-Type: application/json\"`'\n                      default: {}\n                    headers:\n                      description: 'HTTP Header object in the form key: value'\n                      default: {}\n                    params:\n                      description: 'HTTP Parameter object in the form key: value'\n                      default: {}\n            system_name:\n              type: string\n              description: Target system public name\n            system_addr:\n              type: string\n              description: Target system private name\n            target:\n              type: string\n              description: Path to the destination of the file in target system\n            source:\n              type: string\n              description: Local path to the file to be uploaded\n            status:\n              type: string\n              description: Status code (\"111\")\n            hash_id:\n              type: string\n              description: for internal use of FirecREST\n            trace_id:\n              type: string\n              description: for internal use of FirecREST\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"111\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"storage\"`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Storage-Ext-Upload-112:\n      type: object\n      description: Task information about progress in a task created with `POST /storage/xfer-external/upload`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Object Storage confirms that upload to Object Storage has finished')\n        data:\n          type: object\n          description: Data concerning the status of the task\n          properties:\n            user: \n              type: string\n              description: Task owner user name\n            msg:\n              type: object\n              description: Data concerning current operations on the task\n              properties:\n                command: \n                  type: string\n                  description: cURL command to execute object upload to Object Storage server\n                parameters:\n                  type: object\n                  description: parameters to be used with an data transfer software or library\n                  properties:\n                    method: \n                      type: string\n                      description: 'HTTP method to be used (POST, PUT). eg: with cURL `curl -X {method}`'\n                    url:\n                      type: string\n                      description: URL to be used to upload the object\n                    data:\n                      type: object\n                      description: 'HTTP POST Data object in the form \"key: value\" (for cURL, option `-d`)'\n                    files:\n                      type: string\n                      description: 'file object in HTTP form form with `-H \"Content-Type: multipart/form-data\"`'\n                    json:\n                      type: object\n                      description: 'HTTP JSON object in the form key: value, to be used in HTTP with `-H \"Content-Type: application/json\"`'\n                      default: {}\n                    headers:\n                      description: 'HTTP Header object in the form key: value'\n                      default: {}\n                    params:\n                      description: 'HTTP Parameter object in the form key: value'\n                      default: {}\n            system_name:\n              type: string\n              description: Target system public name\n            system_addr:\n              type: string\n              description: Target system private name\n            target:\n              type: string\n              description: Path to the destination of the file in target system\n            source:\n              type: string\n              description: Local path to the file to be uploaded\n            status:\n              type: string\n              description: Status code (`\"112\"`)\n            hash_id:\n              type: string\n              description: for internal use of FirecREST\n            trace_id:\n              type: string\n              description: for internal use of FirecREST\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"112\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"storage\"`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Storage-Ext-Upload-113:\n      type: object\n      description: Task information about progress in a task created with `POST /storage/xfer-external/upload`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Download from Object Storage to server has started')\n        data:\n          type: object\n          description: Data concerning the status of the task\n          properties:\n            user: \n              type: string\n              description: Task owner user name\n            msg:\n              type: string\n              description: Data concerning current operations on the task\n              default: \"Download from Object Storage to server has started\"\n            system_name:\n              type: string\n              description: Target system public name\n            system_addr:\n              type: string\n              description: Target system private name\n            target:\n              type: string\n              description: Path to the destination of the file in target system\n            source:\n              type: string\n              description: Local path to the file to be uploaded\n            status:\n              type: string\n              description: Status code (`\"113\"`)\n            hash_id:\n              type: string\n              description: for internal use of FirecREST\n            trace_id:\n              type: string\n              description: for internal use of FirecREST\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"113\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `storage`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Storage-Ext-Upload-114:\n      description: Task information about successful results in a task created with `POST /storage/xfer-external/upload`\n      type: object\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Download from Object Storage to server has finished')\n        data:\n          type: object\n          description: Data concerning the status of the task\n          properties:\n            user: \n              type: string\n              description: Task owner user name\n            msg:\n              type: string\n              description: Data concerning current operations on the task\n              default: \"Download from Object Storage to server has finished\"\n            system_name:\n              type: string\n              description: Target system public name\n            system_addr:\n              type: string\n              description: Target system private name\n            target:\n              type: string\n              description: Path to the destination of the file in target system\n            source:\n              type: string\n              description: Local path to the file to be uploaded\n            status:\n              type: string\n              description: Status code (`\"114\"`)\n            hash_id:\n              type: string\n              description: for internal use of FirecREST\n            trace_id:\n              type: string\n              description: for internal use of FirecREST\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"114\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `storage`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Storage-Ext-Upload-115:\n      type: object\n      description: Task information about error results in a task created with `POST /storage/xfer-external/upload`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Download from Object Storage error')\n        data:\n          type: object\n          description: Data concerning the status of the task\n          properties:\n            user: \n              type: string\n              description: Task owner user name\n            msg:\n              type: string\n              description: Data concerning current operations on the task\n              default: \"Download from Object Storage error\"\n            system_name:\n              type: string\n              description: Target system public name\n            system_addr:\n              type: string\n              description: Target system private name\n            target:\n              type: string\n              description: Path to the destination of the file in target system\n            source:\n              type: string\n              description: Local path to the file to be uploaded\n            status:\n              type: string\n              description: Status code (`\"115\"`)\n            hash_id:\n              type: string\n              description: for internal use of FirecREST\n            trace_id:\n              type: string\n              description: for internal use of FirecREST\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"115\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"storage\"`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Storage-Ext-Download-116:\n      type: object\n      description: Task information about progress in a task created with `POST /storage/xfer-external/download`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Started upload from filesystem to Object Storage')\n        data:\n          type: string\n          description: Data concerning the status of the task\n          default: \"Started upload from filesystem to Object Storage\"\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"116\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"storage\"`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Storage-Ext-Download-117:\n      type: object\n      description: Task information about successful results in a task created with `POST /storage/xfer-external/download`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Upload from filesystem to Object Storage has finished succesfully')\n        data:\n          type: string\n          description: Temporary URL for downloading object from Object Storage location          \n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"117\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"storage\"`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Storage-Ext-Download-118:\n      type: object\n      description: Task information about error results in a task created with `POST /storage/xfer-external/download`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Upload from filesystem to Object Storage has finished with errors')\n        data:\n          type: string\n          description: Error message describing the failure in the action          \n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"118\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"storage\"`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Compute-Job-Submitted-200:\n      type: object\n      description: Task information about success results in a task created with `POST /compute/jobs/*`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Finished successfully')\n        data:\n          type: object\n          description: Job submission information\n          properties:\n            result:\n              type: string\n              description: result of the job submission\n              default: \"Job submitted\"\n            jobid:\n              type: string\n              description: SLURM jobid of the job submitted\n            job_file:\n              type: string\n              description: path (in the target system) of the job batch file executed\n              default: \"command-not-found\"\n            job_file_out:\n              type: string\n              description: path (in the target system) of the job output file\n              default: \"stdout-file-not-found\"\n            job_file_err:\n              type: string\n              description: path (in the target system) of the error job file\n              default: \"stderr-file-not-found\"\n            job_data_out:\n              type: string\n              description: latest content of the job output file\n              default: \"\"\n            job_data_err:\n              type: string\n              description: latest content of the error job file\n              default: \"\"            \n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"200\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"compute\"`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Compute-Job-Submitted-400:\n      type: object\n      description: Task information about error results in a task created with `POST /compute/jobs/*`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Finished successfully')\n        data:\n          type: string\n          description: Description of the job submission error\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"400\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"compute\"`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Compute-Job-Listed-200:\n      type: object\n      description: Task information about success results in a task created with `GET /compute/jobs/{jobid}`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Finished successfully')\n        data:\n          type: object\n          description: Job listing information\n          default: {}\n          properties:\n            \"index\":\n              type: object \n              description: index of the individual job\n              default: \"0\"\n              properties: \n                schema:\n                  type: object\n                  $ref: \"#/components/schemas/Job-Listed-Object\"\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"200\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"compute\"`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Compute-Job-Listed-400:\n      type: object\n      description: Task information about error results in a task created with `GET /compute/jobs/{jobid}`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Finished with errors')\n        data:\n          type: string\n          description: Description of the job query error\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"400\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"compute\"`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Compute-Acct-200:\n      type: object\n      description: Task information about success results in a task created with `GET /compute/acct/{jobid}`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Finished successfully')\n        data:\n          type: array          \n          items:\n            $ref: \"#/components/schemas/Job-Listed-Object\"\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"200\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"compute\"`)\n        task_url:\n          type: string\n          description: URL of the task\n    Task-Compute-Acct-400:\n      type: object\n      description: Task information about error results in a task created with `GET /compute/acct/{jobid}`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Finished with errors')\n        data:\n          type: string\n          description: Description of the job accounting error\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"400\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"compute\"`)\n        task_url:\n          type: string\n          description: URL of the task   \n    Task-Compute-Delete-200:\n      type: object\n      description: Task information about success results in a task created with `DELETE /compute/jobs/{jobid}`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Finished successfully')\n        data:\n          type: string          \n          description: Success message of job cancelation\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"200\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"compute\"`)\n        task_url:\n          type: string\n          description: URL of the task \n    Task-Compute-Delete-400:\n      type: object\n      description: Task information about error results in a task created with `DELETE /compute/jobs/{jobid}`\n      properties:\n        task_id:\n          type: string\n          description: task unique public identifier\n        hash_id:\n          type: string\n          description: Same value than task_id (preserved for backward compatibility)\n        description:\n          type: string\n          description: Description of the status of the task ('Finished with errors')\n        data:\n          type: string          \n          description: Message describing job cancelation error\n        last_modify:\n          type: string\n          description: Date and time of latest update of the task (format=`%Y-%m-%dT%H:%M:%S`)\n        user:\n          type: string\n          description: Task owner user name\n        status:\n          type: string\n          description: Status code for this task (`\"400\"`)\n        service:\n          type: string\n          description: FirecREST service that is related to the task (in this case is always `\"compute\"`)\n        task_url:\n          type: string\n          description: URL of the task \n    Job-Listed-Object:\n      type: object      \n      properties:\n        jobid:\n          type: string\n          description: SLURM jobid of the job submitted\n        partition:\n          type: string\n          description: partition where the job is running\n        name:\n          type: string\n          description: job name\n        user:\n          type: string\n          description: user name of the job owner\n        state:\n          type: string\n          description: job state as described in https://slurm.schedmd.com/squeue.html#SECTION_JOB-STATE-CODES            \n        start_time:\n          type: string\n          description: job actual or expected start time, as described in https://slurm.schedmd.com/squeue.html#OPT_StartTime\n        time:\n          type: string\n          description: job consumed time, as described in https://slurm.schedmd.com/squeue.html#OPT_%M\n        time_left:\n          type: string\n          description: time left for the job to execute, as described in https://slurm.schedmd.com/squeue.html#OPT_%L\n        nodes:\n          type: string\n          description: number of nodes allocated by the job, as described in https://slurm.schedmd.com/squeue.html#OPT_%D\n        nodelist:\n          type: string\n          description: list of nodes allocated by the job, as described in https://slurm.schedmd.com/squeue.html#OPT_%N\n        job_file:\n          type: string\n          description: path (in the target system) of the job batch file executed\n          default: \"command-not-found\"\n        job_file_out:\n          type: string\n          description: path (in the target system) of the job output file\n          default: \"stdout-file-not-found\"\n        job_file_err:\n          type: string\n          description: path (in the target system) of the error job file\n          default: \"stderr-file-not-found\"\n        job_data_out:\n          type: string\n          description: latest content of the job output file\n          default: \"\"\n        job_data_err:\n          type: string\n          description: latest content of the error job file\n          default: \"\" \ntags:\n  - name: Status\n    description: Status information of infrastructure and services.\n  - name: Utilities\n    description: \u003e-\n      Basic system utilities. All calls are blocking and low-latency operations,\n      maximum operation duration is limited by a timeout.\n  - name: Compute\n    description: \u003e-\n      Non-blocking calls to workload manager to submit and query jobs. The\n      service responds with a reference to the temporary task resource that\n      tracks the state of the request.\n  - name: Storage\n    description: \u003e-\n      Non-blocking calls to high-performance storage services. The service\n      responds with a reference to the temporary task resource that tracks the\n      state of the request.\n  - name: Tasks\n    description: Access status and response of compute and storage tasks.\nsecurity:\n  - bearerAuth: []\n"
		}
	},
	"Error": "parse: paths: /storage/xfer-internal/rm: post: : requestBody: content: multipart/form-data: parse schema: parse schema: account: unexpected default \"null\" value"
}