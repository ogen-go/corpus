{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/smclab/openk9"
		},
		"file": {
			"name": "openapi.json",
			"path": "plugins/liferay/liferay-parser/app/static/openapi.json",
			"content": "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"version\": \"1.0.0\",\n    \"title\": \"Liferay parser Api\",\n    \"description\": \"An API to extract and parsing data from Liferay portal as users, calendars and elements from document media library\"\n  },\n  \"paths\": {\n    \"/execute\": {\n      \"post\": {\n        \"tags\": [\"Extract data from Liferay portal\"],\n        \"summary\": \"Launch extraction from liferay portal\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"domain\": {\n                    \"type\": \"string\"\n                  },\n                  \"username\": {\n                    \"type\": \"string\"\n                  },\n                  \"password\": {\n                    \"type\": \"string\"\n                  },\n                  \"timestamp\": {\n                    \"type\": \"integer\",\n                    \"default\": 0\n                  },\n                  \"companyId\": {\n                    \"type\": \"integer\"\n                  },\n                  \"datasourceId\": {\n                    \"type\": \"integer\"\n                  }\n                },\n                \"required\": [\n                  \"domain\",\n                  \"username\",\n                  \"password\",\n                  \"timestamp\",\n                  \"companyId\",\n                  \"datasourceId\",\n                  \"task\"\n                ],\n                \"example\": {\n                  \"domain\": \"http://liferay:8080\",\n                  \"username\": \"XXXX\",\n                  \"password\": \"XXXX\",\n                  \"timestamp\": 0,\n                  \"companyId\": 1,\n                  \"datasourceId\": 1,\n                  \"task\": \"user\"\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Extraction process started\"\n          },\n          \"400\": {\n            \"description\": \"Bad request. Check form of json request.\"\n          },\n          \"5XX\": {\n            \"description\": \"Unexpected error. If Key error some json with specified parameter key is returned.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"error\": {\n                      \"type\": \"string\"\n                    },\n                    \"key\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"example\": {\n                    \"error\": \"Key Error\",\n                    \"status\": \"username\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/status\": {\n      \"get\": {\n        \"tags\": [\"Status\"],\n        \"summary\": \"See status of extraction\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"message\": {\n                      \"type\": \"string\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\",\n                      \"enum\": [\"RUNNING\", \"ERROR\", \"SUCCESS\", \"null\"]\n                    }\n                  },\n                  \"example\": {\n                    \"message\": \"[2020-11-06 10:02:57,390] INFO in user_extraction: Extraction completed\",\n                    \"status\": \"SUCCESS\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/get-url\": {\n      \"get\": {\n        \"tags\": [\"Get Url\"],\n        \"summary\": \"get url for ingestion\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Url of ingestion configured\"\n          }\n        }\n      }\n    },\n    \"/set-url\": {\n      \"post\": {\n        \"tags\": [\"Set Url\"],\n        \"summary\": \"Set url for ingestion\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"mailServer\": {\n                    \"url\": \"string\"\n                  }\n                },\n                \"required\": [\"url\"],\n                \"example\": {\n                  \"url\": \"dev-projectq.smc.it/api/v1/ingestion/\"\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Ingestion url modified with dev-projectq.smc.it/api/v1/ingestion/\"\n          }\n        }\n      }\n    }\n  }\n}\n"
		}
	},
	"Error": "make ir: path \"/execute\": post: responses: parse response status code: strconv.Atoi: parsing \"5XX\": invalid syntax"
}