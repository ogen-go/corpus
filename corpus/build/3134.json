{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ioggstream/python-course"
		},
		"file": {
			"name": "store.yaml",
			"path": "connexion-101/notebooks/oas3/store.yaml",
			"content": "#\n# Questo e' un progetto d'esempio in formato OpenAPI 3.0 API Starter Kit.\n#\n# Stai per sviluppare un API? Segui attentamente questo template e\n#   potrai integrarla facilmente in Developers Italia.\n#\nx-commons:\n  common-responses: \u0026common-responses\n    '400':\n      $ref: '#/components/responses/400BadRequest'\n    '429':\n      $ref: '#/components/responses/429TooManyRequests'\n    '503':\n      $ref: '#/components/responses/503ServiceUnavailable'\n    default:\n      $ref: '#/components/responses/default'\n  throttling-headers: \u0026throttling-headers\n    X-RateLimit-Limit:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/headers/X-RateLimit-Limit'\n    X-RateLimit-Remaining:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/headers/X-RateLimit-Remaining'\n    X-RateLimit-Reset:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/headers/X-RateLimit-Reset'\n\nopenapi: 3.0.1\ninfo:\n  title: Flask store API.\n  version: 0.0.1\n  x-summary: 'A simple store app for flask.'\n  contact:\n    email: robipolli@gmail.com\n    name: Roberto Polli\n    url: 'https://twitter.com/ioggstream'\n  description: |-\n    #### Documentation\n\n    This API allows to store  files with\n    attached metadata.\n\n    One or more files are packed together within a mime\n    payload, where the first component is a json file\n    containing the metadata attached to the packed files.\n\n    Once stored, files are archived on a remote store\n    and their metadata indexed.\n\n    Metadata is validated via json-schema.\n\n    Max message size is predefined.\n\n    Authentication via basic-auth.\n\n    When storage is over a predefined quota,\n    the application returns 503 and avoid saturation.\n\n\n    ##### Subsection\n\n    Write here subsections.\n\n    #### Notes\n\n\n    This service might be autenticated upfront.\n\n\n    #### Technical information and examples\n\n\n    Example:\n\n\n    ```\n    http https://localhost:8443/store/v0\n    ```\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n  termsOfService: 'http://swagger.io/terms/'\n  x-api-id: 00000000-0000-0000-0000-000000000000\n  x-audience:\n    - public\nservers:\n  - description: Development server\n    url: 'https://localhost:8443/store/v0'\n  - description: Test server\n    url: 'https://api.example.com/store/v0'\ntags:\n  - description: Retrieve informations\n    externalDocs:\n      url: 'http://docs.my-api.com/pet-operations.htm'\n    name: private\npaths:\n  /status:\n    get:\n      operationId: openapi.get_status\n      responses:\n        \u003c\u003c: *common-responses\n        200:\n          description: |\n            The API is working properly.\n          headers:\n            Cache-Control:\n              description: |\n                The Cache-Control header defined in RFC 7234. For this operation\n                it could be set to no-store if we don't want to leverage cache.\n              schema:\n                type: string\n                example: \"no-store\"\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Problem'\n\n  /stores:\n    get:\n      operationId: openapi.list_files\n      parameters:\n        - in: query\n          name: filename\n          schema:\n            type: string\n        - $ref: 'https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/parameters/fields'\n        - $ref: 'https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/parameters/limit'\n      responses:\n        \u003c\u003c: *common-responses\n        '200':\n          description: Retrieve a list of stored files.\n          headers:\n            \u003c\u003c: *throttling-headers\n          content:\n            application/json:\n              schema:\n                properties:\n                  limit:\n                    type: number\n                  count:\n                    type: number\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Item'\n  '/store/{filename}':\n    put:\n      operationId: openapi.put_file\n      parameters:\n        - in: path\n          name: filename\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: |\n          A multipart/related containing at least\n          two attachments: an application/json with the metadata\n          and one or more attachment files that will be stored as-is\n        required: true\n        content:\n          multipart/related:\n            schema: {}\n              # $ref: '#/components/schemas/UploadFiles'\n\n      responses:\n        \u003c\u003c: *common-responses\n        '201':\n          description: |-\n            The files are properly indexed and stored.\n          headers:\n            \u003c\u003c: *throttling-headers\n          content:\n            multipart/related: {}\ncomponents:\n  schemas:\n    UploadFiles:\n      type: object\n      properties:\n        metadata:\n          type: object\n          properties:\n            files:\n              type: array\n              items:\n                type: string\n        attachments:\n          type: array\n          items:\n            type: string\n            format: binary\n\n    Problem:\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/schemas/Problem'\n    Metadata:\n      properties:\n        filename: {type: string}\n    Item:\n      properties:\n        name:\n          type: string\n        size:\n          type: number\n        id:\n          type: string\n\n  responses:\n    # Predefined error codes for this API\n    400BadRequest:\n      $ref: \"https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/responses/400BadRequest\"\n    404NotFound:\n      $ref: \"https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/responses/404NotFound\"\n    429TooManyRequests:\n      $ref: \"https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/responses/429TooManyRequests\"\n    503ServiceUnavailable:\n      $ref: \"https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/responses/503ServiceUnavailable\"\n    default:\n      $ref: \"https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/responses/default\"\n"
		}
	},
	"Error": "parse: paths: /stores: get: openapi.list_files: parameters: parse parameter \"\": resolve \"https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/parameters/fields\" reference: invalid parameter reference: \"https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/parameters/fields\""
}