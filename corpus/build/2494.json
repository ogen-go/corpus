{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/unwiredlabs/locationapi-client-libraries"
		},
		"file": {
			"name": "ul_api_spec_openapi3_v2_0_0.yaml",
			"path": "ul_api_spec_openapi3_v2_0_0.yaml",
			"content": "openapi: 3.0.0\ninfo: \n  version: 2.0.0\n  title: Location API\n  description: Geolocation, Geocoding and Maps\npaths:\n  /process.php:\n    post:\n      operationId: Geolocation\n      summary: Geolocation\n      tags:\n      - GEOLOCATION\n      description: The Geolocation API helps developers locate IoT,\n        M2M and other connected devices anywhere in the world without GPS.\n        The device first sends the API data about which Cellular networks and WiFi networks it can see nearby.\n        The API then uses Unwired Labs’ large datasets of Cell towers,\n        WiFi networks backed by numerous algorithms to calculate and return the device’s location\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/geolocation_schema\"\n            \n      responses:\n        '200':\n          description: The response will be a JSON object as defined in the model.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/geolocate_response_schema'\n                  - $ref: '#/components/schemas/geolocate_error_schema'\n            \n  /search.php:\n    get:\n      operationId: search\n      summary: Forward Geocoding\n      tags:\n        - SEARCH\n      description: \u003e-\n        The Search API allows converting addresses, such as a street address,\n        into geographic coordinates (latitude and longitude). These coordinates\n        can serve various use-cases, from placing markers on a map to helping\n        algorithms determine nearby bus stops. This process is also known as\n        Forward Geocoding.\n      parameters:\n        - name: q\n          in: query\n          description: Address to geocode\n          required: true\n          schema:\n            type: string\n          example: '\"Statue of Liberty\"'\n        \n        - name: viewbox\n          in: query\n          description: \u003e-\n            The preferred area to find search results.  To restrict results to\n            those within the viewbox, use along with the bounded option. Tuple of 4 floats. Any two corner points of the box - `max_lon,max_lat,min_lon,min_lat` or `min_lon,min_lat,max_lon,max_lat` - are accepted in any order as long as they span a real box. \n          required: false\n          example: '\"-132.84908,47.69382,-70.44674,30.82531\"'\n          schema:\n            type: string\n  \n        - name: limit\n          in: query\n          description: Limit the number of returned results. Default is 10.\n          required: false\n          example: 10\n          schema:\n            type: integer\n            format: int64\n            default: 10\n  \n        - name: accept-language\n          in: query\n          description: \u003e-\n            Preferred language order for showing search results, overrides the\n            value specified in the Accept-Language HTTP header. Defaults to en.\n            To use native language for the response when available, use\n            accept-language=native\n          required: false\n          example: '\"en\"'\n          schema:\n            type: string\n\n        - name: countrycodes\n          in: query\n          description: Limit search to a list of countries.\n          required: false\n          example: '\"us\"'\n          schema:\n            type: string\n  \n      responses:\n        '200':\n          description: The response will be a JSON object as defined in the model.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/search_response_schema'\n                  - $ref: '#/components/schemas/error_schema'\n\n      security:\n        - token: []\n    \n  /reverse.php:\n    get:\n      operationId: reverse\n      summary: Reverse Geocoding\n      tags:\n        - REVERSE\n      description: \u003e-\n        Reverse geocoding is the process of converting a coordinate or location\n        (latitude, longitude) to a readable address or place name. This permits\n        the identification of nearby street addresses, places, and/or area\n        subdivisions such as a neighborhood, county, state, or country.\n      parameters:\n        - name: lat\n          in: query\n          description: Latitude of the location to generate an address for.\n          required: true\n          example: 17.24\n          schema:\n            type: number\n            format: double\n            minimum: -90\n            maximum: 90\n\n        - name: lon\n          in: query\n          description: Longitude of the location to generate an address for.\n          required: true\n          example: 74.25\n          schema:\n            type: number\n            format: double\n            minimum: -180\n            maximum: 180\n\n        - name: zoom\n          in: query\n          description: Zoom value lies between 0-18. Level of detail required where 0 is country and 18 is house/building\n          required: false\n          example: 2\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n            maximum: 18\n        \n        - name: accept-language\n          in: query\n          description: \u003e-\n            Preferred language order for showing search results, overrides the\n            value specified in the Accept-Language HTTP header. Defaults to en.\n            To use native language for the response when available, use\n            accept-language=native\n          required: false\n          schema:\n            type: string\n          example: '\"Empire state building\"'\n\n      responses:\n        '200':\n          description: The response will be a JSON object as defined in the model.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/reverse_response_schema'\n                  - $ref: '#/components/schemas/error_schema'\n\n      security:\n        - token: []\n  \n      \n  /timezone.php:\n    get:\n      operationId: timezone\n      description: The Unwired Labs TimeZone API provides time offset data for locations on the surface of the earth.\n      summary: timezone \n      tags: \n        - Timezone\n      parameters:\n        - name: latitude\n          in: query\n          description: lattitude of the location\n          required: true\n          schema:\n            type: number\n            format: double\n          example: 40.6892474\n\n        - name: longitude\n          in: query\n          description: longitude of location\n          required: true\n          schema:\n            type: number\n            format: double\n          example: -74.0445404280149\n\n      responses:\n        '200':\n          description: timezone response\n          content: \n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/timezone_response_schema'\n\n      security:\n        - token: []\n\n  /balance.php:\n    get:\n      operationId: balance\n      tags:\n        - BALANCE\n      summary: balance\n      description: \u003e-\n        The Balance API provides a count of request credits left in the user's\n        account for the day. Balance is reset at midnight UTC everyday (00:00\n        UTC).\n      responses:\n        '200':\n          description: The response will be a JSON object as defined in the model.\n          content:  \n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/balance_response_schema'\n                  - $ref: '#/components/schemas/error_schema'\n\n      security:\n        - token: []\n\nservers: \n  - url: 'https://us1.unwiredlabs.com/v2'\n  \ncomponents:\n  securitySchemes:\n    token:\n      name: token\n      type: apiKey\n      in: query\n      \n  schemas:\n    geolocation_schema:\n        title: Geolocation\n        type: object.\n        required:\n          - token    \n        properties:\n          token:\n            $ref: '#/components/schemas/token_schema'\n          id:\n            $ref: '#/components/schemas/id_schema'\n          radio:\n            $ref: '#/components/schemas/radio_schema'\n          mcc:\n            $ref: '#/components/schemas/mcc_schema'\n          mnc:\n            $ref: '#/components/schemas/mnc_schema'\n          cells:\n            description: An array of cell ID objects\n            type: array\n            items:\n              $ref: '#/components/schemas/cell_schema'           \n          wifi:\n            description: An array of WiFi objects visible to the device. \n            type: array\n            items:\n              $ref: '#/components/schemas/wifi_schema'\n          fallbacks:\n            $ref: '#/components/schemas/fallback_schema'   \n          address:\n            $ref: '#/components/schemas/geolocation_address_schema'\n          ip:\n            $ref: '#/components/schemas/ip_schema'\n          bt:\n            $ref: '#/components/schemas/bt_schema'\n        \n\n    token_schema:\n      title: token\n      type: string\n      example: '\"YOUR_API_TOKEN\"'\n  \n    id_schema:\n      description: ID of the device, in case you are in a per-device plan. \n        This could be any unique string such as an IMEI, IMSI, phone number or a hash of any of the previous values, etc. Maximum accepted length is 20 chars, and values should only be alphanumeric (a-z, 0-9)\n      title: id\n      type: string\n      example: '\"IMEI number\"'\n\n      \n    radio_schema:\n      title: radio\n      description:  Radio type of the device. Supported values are ‘gsm’, ‘cdma’, ‘umts’ and ‘lte’. \n        This field should be included for more accurate results.\n      type: string\n      enum:\n        - '\"gsm\"'\n        - '\"utms\"'\n        - '\"cdma\"'\n        - '\"lte\"'\n      example: '\"gsm\"'\n\n\n    mcc_schema:\n      title: mcc\n      description: '\"Mobile Country Code of your operator’s network represented by an integer (Optional). Range: 0 to 999.\"' \n      type: integer\n      format: int64\n      example: 310\n    \n\n    mnc_schema:\n      title: mnc\n      description: \"Mobile Network Code of your operator’s network represented by an integer (Optional). Range: 0 to 999. On CDMA, provide the System ID or SID, with range: 1 to 32767.\"\n      type: integer\n      format: int64\n      example: 404\n\n\n    cell_schema:\n      title: cell\n      description: You can send 1 to 7 cell ID objects.\n        If your device supports scanning for more than 7 cell objects,\n        reach out to us and we’ll increase this limit on your account.\n        The first cell object has to be that of the serving cell, i.e. the tower the device is connected to. \n        The others are neighbouring cell objects that are visible to the device.\n        Except lac and cid all other parameters mentioned below are optional.\n        Parameters vary depending on the radio type. Supported radio types and their corresponding parameters are\n      type: object\n      properties:\n        lac:\n          $ref: '#/components/schemas/lac_schema'\n          \n        cid:\n          $ref: '#/components/schemas/cid_schema'\n          \n        radio:\n          $ref: '#/components/schemas/radio_schema'\n\n        mcc:\n          $ref: '#/components/schemas/mcc_schema'\n\n        mnc:\n          $ref: '#/components/schemas/mnc_schema'\n\n        signal:\n          $ref: '#/components/schemas/signal_schema'\n          \n        psc:\n          $ref: '#/components/schemas/psc_schema'\n          \n        asu:\n          $ref: '#/components/schemas/asu_schema'\n          \n        ta:\n          $ref: '#/components/schemas/ta_schema'\n      \n           \n    lac_schema:\n      description: the Location Area Code of your operator’s network.\n      type: integer\n      format: int64\n      minimum: 1\n      maximum: 65533\n      example: 7033\n\n    cid_schema:\n      description: Cell ID\n      type: integer\n      format: int64\n      minimum: 0\n      maximum:  268435455\n      example: 17811\n\n    signal_schema:\n      description: Signal Strength (RSSI)\n      type: integer\n      format: int64\n      minimum: -121\n      maximum: -25\n      example: -51\n\n    psc_schema:\n      description: Primary Scrambling Code\n      type: integer\n      format: int64\n      minimum: 0\n      maximum: 503\n      example: 51\n\n    asu_schema:\n      description: Arbitrary Strength Unit\n      type: integer\n      format: int64\n      minimum: -5\n      maximum: 97\n      example: 56\n\n    ta_schema: \n      description: Timing Advance\n      type: integer\n      format: int64\n      minimum: 0 \n      maximum: 63\n      example: 0\n\n\n    wifi_schema:\n      title: wifi\n      description: You can send a minimum of 2 and a maximum of 15 WiFi objects in 1 request.\n        If WiFi is not available, wifi object can be omitted all together.\n        In accordance with our industry’s privacy standards we require a minimum of 2 valid nearby Access Points to be sent. \n        If your use-case allows only 1 AP, reach out to us.\n      type: object \n      properties:\n        bssid: \n          $ref: '#/components/schemas/bssid_schema'\n\n        channel:\n          $ref: '#/components/schemas/channel_schema'\n          \n        frequency:\n          $ref: '#/components/schemas/frequency_schema'\n          \n        signal: \n          $ref: '#/components/schemas/signal_schema'\n          \n        signalToNoiseRatio:\n          $ref: '#/components/schemas/signalToNoiseRatio_schema' \n          \n    bssid_schema:\n      description: \"Basic Service Set Identifier or MAC address of the Access Point. \n        Typical format of a MAC address is xx-xx-xx-xx-xx-xx. However, the delimiter can be any of these when sent to the API: : or - or .\"\n      type: string\n      example:  '\"00:17:c5:cd:ca:aa\"'\n\n    channel_schema:\n      description: Channel the WiFi network is operating in (optional)\n      type: integer\n      format: int64\n      example: 11\n\n    frequency_schema:\n      description: Frequency the WiFi network is operating in (MHz) (optional)\n      type: integer\n      format: int64\n      example: 2412\n\n\n    signalToNoiseRatio_schema:\n      description: The current signal to noise ratio, measured in dB (optional)\n      type: integer\n      format: int64\n      example: 1\n\n\n\n    geolocation_address_schema:\n      description: The physical address of the returned location\n      title: physical address\n      type: integer\n      format: int64\n      enum: \n        - 0 \n        - 1\n        - 2\n      example: 1\n\n    fallback_schema:\n      title: fallback\n      description: An array of fallback options to enable or disable.\n      type: object\n      properties: \n        all:\n          $ref: '#/components/schemas/all_schema'\n          \n        ipf:\n          $ref: '#/components/schemas/ipf_schema'\n          \n        lacf:\n          $ref: '#/components/schemas/lacf_schema'\n          \n        scf: \n          $ref: '#/components/schemas/scf_schema'\n          \n    \n    all_schema:\n      description: Enable or disable all fallbacks.\n      type: integer\n      format: int32\n      enum:\n        - 0\n        - 1\n      example: 1\n\n    ipf_schema:\n      description:  Enable IP address fallback. \n        Specify IP address of the device in the “ip” field if it’s different from the device making the API call.\n      type: integer\n      format: int32\n      enum:\n        - 0\n        - 1\n      example: 1\n\n    lacf_schema:\n      description: Enable LAC fallback. If we are unable to locate a cell,\n        we will return an approzimate location\n        based on nearby cells in our database.\n      type: integer\n      format: int32\n      enum:\n        - 0\n        - 1\n        - 2\n      example: 1\n\n    scf_schema:\n      description: Enable Short CID fallback. Adds support for devices\n        that can only see 16-bit (short) CID\n        of an UMTS 28-bit UTRAN CID.\n      type: integer\n      format: int32\n      enum:\n        - 0\n        - 1\n      example: 0\n\n\n    ip_schema:\n      description: IP address of device.\n      title: ip address\n      type: string\n      example: '\"49.204.218.106\"'\n\n\n    bt_schema:\n      description: Specify level of strictness to apply to Borders\n      title: Border Threshold\n      type: integer\n      format: int32\n      enum: \n        - 0\n        - 1\n        - 2\n      default: 1\n      example: 1\n\n    status_schema:\n      title: status\n      description: If the request is successful, ok is returned. Otherwise error is returned\n      type: string\n      example: '\"error\"'\n\n    message_schema:\n      type: string\n      description: Any additional information from the server is returned here\n      example: '\"INVALID_TOKEN\"'\n\n\n    geolocation_response_schema:\n      title: Geolocation response \n      description: The response will be a JSON object as defined in the model.\n      properties: \n        status: \n          $ref: '#/components/schemas/status_schema'\n        message:\n          $ref: '#/components/schemas/message_schema'\n        balance:\n          type: integer\n          format: int64\n          description: This represents the remaining balance on the API token. \n            Requests that return error are not charged and do not affect balance\n          example: 99585\n        balance_slots:\n          type: integer\n          format: int64\n          description: This represents the remaining balance of device slots. \n            Requests that return error are not charged and do not affect balance. If -1 is returned, then observe it as an error while calculating slots balance. This element will only exist if you are on a device plan.\n          example: 2\n        lat:\n          type: number\n          format: double\n          description: The latitude representing the location\n          example: 39.56763197\n        lon:\n          type: number\n          format: double\n          description: The longitude representing the location\n          example: -105.00727917  \n        accuracy:\n          description: The accuracy of the position is returned in meters\n          type: integer\n          format: int64\n          example: 10\n        address:\n          description: The physical address of the location\n          type: string\n          example: High Line Canal Trail, Littleton, CO 80120, USA\n        address_details:\n          $ref: '#/components/schemas/address_details_schema'\n        aged:\n          description: Shown when the location is based on a single measurement or those older than 90 days or is an LAC fallback\n          type: integer\n          format: int32\n          example: 0\n        fallback:\n          $ref: \"#/components/schemas/fallback_schema\"\n  \n    address_details_schema:\n      title: address_details\n      description: The API only returns components that have valid values for a location. \n        Component town is normalized to city to make things simple\n      type: object\n      properties:\n        area: \n          type: string\n          example: '\"5th Avenue\"'\n        locality:\n          type: string\n          example: '\"Korea Town\"'\n        district:\n          type: string\n          example: '\"Manhattan\"'\n        county:\n          type: string\n          example: '\"New York County\"'\n        city:\n          type: string\n          example: '\"New York City\"'\n        state:\n          type: string\n          example: '\"New York\"'\n        country:\n          type: string\n          example: '\"United States of America\"'\n        country_code:\n          type: string\n          example: '\"US\"'\n        postal_code:\n          type: string\n          example: '\"80120\"'\n\n\n    geolocation_error_schema:\n      title: geolocation error response\n      type: object\n      properties: \n        status:\n          $ref: '#/components/schemas/status_schema'\n        message: \n          $ref: '#/components/schemas/message_schema'\n        balance:\n          description: This represents the remaining balance on the API token. Requests that return error are not charged and do not affect balance.\n          type: integer\n          format: int64\n          example: 0\n    \n    \n    search_response_schema:\n      title: Search Response\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/status_schema'\n        balance:\n          description: Balance left in the account\n          type: number\n          example: 0\n        addresses:\n          description: Array of Address objects found for the search query\n          type: array\n          items: \n            $ref: '#/components/schemas/address_schema'\n          \n    reverse_response_schema:\n      title: Reverse Geocoding Response\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/status_schema'\n       \n        balance:\n          type: integer\n          format: int64\n          description: Balance left in the account\n          example: 0\n        address:\n          $ref: '#/components/schemas/address_schema'\n        \n\n    address_schema:\n      title: address\n      description: Address object found for the search query\n      type: object\n      properties:\n        lat:\n          type: string\n          description: Latitude of the given location (decimal)\n          example: '\"41.3438648\"'\n        lon:\n          type: string\n          description: Longitude of the given location (decimal)\n          example: '\"-86.3111653\"'\n        display_name:\n          type: string\n          description: Matched Address name for the given location\n          example:\n            '\"Southpark Lane, Littleton,Arapahoe county, colorado, 800\"'\n        house_number: \n          type: string\n          description: House Number\n        road:\n          type: string\n          description: Road Name\n          example: '\"Southpark Lane\"'\n        neighborhood:\n          type: string\n          description: Neighbourhood\n\n        suburb: \n          type: string\n          description: Suburb\n        city: \n          type: string\n          description: City name (normalized form of city, town, village, hamlet)\n          example: '\"Denver-Aurora-Lakewood\"'\n            \n        county:\n          type: string\n          description: County name (normalized form of county, state_district)\n          \n        country: \n          type: string\n          description: Country name\n          example: '\"United States of america\"'\n        country_code: \n          type: string\n          description: Country code\n          example: '\"US\"'\n        postal_code: \n          type: string\n          description: Postal code\n          example: '\"80120\"'\n      \n    balance_response_schema:\n      title: Balance Response\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/status_schema'\n        balance_geolocation: \n          description: Remaining balance left in the account for geolocation requests\n          type: integer\n          format: int64\n          example: 45\n        balance_geocoding:\n          description: Remaining balance left in the account for geocoding requests\n          type: integer\n          format: int64\n          example: 55\n\n    error_schema:\n      title: error\n      type: object\n      properties: \n        status:\n          $ref: '#/components/schemas/status_schema'\n        message: \n          $ref: '#/components/schemas/message_schema'\n\n    timezone_response_schema: \n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/status_schema'\n        balance:\n          title: balance\n          description: Balance left in the account\n          type: integer\n          format: int64\n        timezone:\n          $ref: '#/components/schemas/timezone_schema'\n\n    timezone_schema:\n      title: timezone\n      description: Timezone object found for the location.\n      type: object\n      properties: \n        short_name:\n          title: short name\n          description: Short name of the Timezone\n          type: string \n        offset_sec:\n          title: offset sec\n          description: The offset from UTC (in seconds) for the given location. Considers DST savings.\n          type: number\n          \n        now_in_dst:\n          title: now in dst\n          description: Represents whether the zone currently observing DST or not\n          type: string\n        name:\n          title: Timezone name\n          description: Timezone name of the Location\n          type: string\n    "
		}
	},
	"Error": "parse: paths: /process.php: post: operation \"Geolocation\": requestBody: content: \"application/json\": parse schema: parse schema: reference \"#/components/schemas/geolocation_schema\": parse schema: unexpected schema type: \"object.\""
}