{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/UriChen/vue-vuetify-typescript-template"
		},
		"file": {
			"name": "swagger.yml",
			"path": "mock/swagger.yml",
			"content": "openapi: 3.0.0\ninfo:\n  description: Mock API for vue-element-typescript-admin\n  version: 1.0.0\n  title: Mock API\n  contact:\n    email: urichen9606@gmail.com\n  license:\n    name: No license\n    url: ''\nservers:\n  - url: /mock-api/v1\ntags:\n  - name: articles\n    description: Articles data related api.\n  - name: roles\n    description: Roles related api.\n  - name: transactions\n    description: Transactions data related api.\n  - name: users\n    description: Users related api.\npaths:\n  /articles:\n    get:\n      tags:\n        - articles\n      summary: Get Article List\n      description: Return a list of articles.\n      operationId: getArticles\n      parameters:\n        - name: importance\n          in: query\n          description: Used to filter articles by importance.\n          schema:\n            $ref: '#/components/schemas/Article/properties/importance'\n        - name: title\n          in: query\n          description: Used to filter articles by matched title substring.\n          schema:\n            $ref: '#/components/schemas/Article/properties/title'\n        - name: type\n          in: query\n          description: Used to filter articles by type.\n          schema:\n            $ref: '#/components/schemas/Article/properties/type'\n        - name: page\n          in: query\n          description: The wanted page number (one page).\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n        - name: limit\n          in: query\n          description: The maximum number of articles returned for one page.\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            maximum: 50\n        - name: sort\n          in: query\n          description: Optional sorting order for articles.\n          schema:\n            type: string\n            enum:\n              - +id\n              - -id\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      total:\n                        type: integer\n                        format: int32\n                      items:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Article'\n    post:\n      tags:\n        - articles\n      summary: Create New Article\n      description: Create a new article.\n      operationId: createArticle\n      security:\n        - AccessTokenAuth: []\n      parameters:\n        - name: article\n          in: query\n          required: true\n          description: The data for new article.\n          schema:\n            $ref: '#/components/schemas/Article'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      article:\n                        $ref: '#/components/schemas/Article'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n  /articles/{id}:\n    get:\n      tags:\n        - articles\n      summary: Get Article Detail\n      description: Get article detail by ID.\n      operationId: getArticle\n      security:\n        - AccessTokenAuth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Article id.\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      article:\n                        $ref: '#/components/schemas/Article'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n    put:\n      tags:\n        - articles\n      summary: Update Article Detail\n      description: Update article deatail by ID.\n      operationId: updateArticle\n      security:\n        - AccessTokenAuth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Article id.\n          schema:\n            type: integer\n            format: int64\n        - name: article\n          in: query\n          required: true\n          description: data for the updated article.\n          schema:\n            $ref: '#/components/schemas/Article'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      article:\n                        $ref: '#/components/schemas/Article'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n    delete:\n      tags:\n        - articles\n      summary: Delete Article\n      description: Delete article by ID.\n      operationId: deleteArticle\n      security:\n        - AccessTokenAuth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Article id.\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n  /pageviews:\n    get:\n      tags:\n        - articles\n      summary: Get Pageviews Data\n      description: Return a list of pageviews for each platforms.\n      operationId: getPageviews\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      pageviews:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Pageviews'\n  /transactions:\n    get:\n      tags:\n        - transactions\n      summary: Get Transaction List\n      description: Return a list of transaction.\n      operationId: getTransactions\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      total:\n                        type: integer\n                        format: int32\n                      items:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Transaction'\n  /roles:\n    get:\n      tags:\n        - roles\n      summary: Get Role List\n      description: Return a list of roles.\n      operationId: getRoles\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      total:\n                        type: integer\n                        format: int32\n                      items:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Role'\n    post:\n      tags:\n        - roles\n      summary: Create New Role\n      description: Create a new role.\n      operationId: createRole\n      security:\n        - AccessTokenAuth: []\n      parameters:\n        - name: role\n          in: query\n          required: true\n          description: The data for new role.\n          schema:\n            $ref: '#/components/schemas/Role'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      key:\n                        type: integer\n                        format: int64\n        401:\n          $ref: '#/components/responses/Unauthorized'\n  /roles/{id}:\n    put:\n      tags:\n        - roles\n      summary: Update Role Detail\n      description: Update role deatail by ID.\n      operationId: updateRole\n      security:\n        - AccessTokenAuth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Role id (key).\n          schema:\n            type: integer\n            format: int64\n        - name: role\n          in: query\n          required: true\n          description: The data for updated role.\n          schema:\n            $ref: '#/components/schemas/Role'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      role:\n                        $ref: '#/components/schemas/Role'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n    delete:\n      tags:\n        - roles\n      summary: Delete Role\n      description: Delete role by ID.\n      operationId: deleteRole\n      security:\n        - AccessTokenAuth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Role id (key).\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n  /routes:\n    get:\n      tags:\n        - roles\n      summary: Get Routes Data\n      description: Return routes object.\n      operationId: getRoutes\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      routes:\n                        $ref: '#/components/schemas/Role/properties/routes'\n  /users:\n    get:\n      tags:\n        - users\n      summary: Get users list\n      description: Return a list of users\n      operationId: getUsers\n      security:\n        - AccessTokenAuth: []\n      parameters:\n        - name: name\n          in: query\n          description: Used to filter users by matched username substring\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      items:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/User'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n  /users/register:\n    post:\n      tags:\n        - users\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: register\n      parameters:\n        - name: user\n          in: query\n          required: true\n          description: The data for created user.\n          schema:\n            $ref: '#/components/schemas/User'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n  /users/login:\n    post:\n      tags:\n        - users\n      summary: Logs user into the system\n      description: Use username and password to login.\n      operationId: login\n      parameters:\n        - name: username\n          in: query\n          required: true\n          description: The user name for login.\n          schema:\n            $ref: '#/components/schemas/User/properties/username'\n        - name: password\n          in: query\n          required: true\n          description: The password for login in clear text.\n          schema:\n            $ref: '#/components/schemas/User/properties/password'\n      responses:\n        200:\n          description: OK\n          headers:\n            X-Rate-Limit:\n              schema:\n                type: integer\n                format: int32\n              description: calls per hour allowed by the user.\n            X-Expires-After:\n              schema:\n                type: string\n                format: date-time\n              description: date in UTC when token expires.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      accessToken:\n                        type: string\n                        example: admin-token\n        400:\n          $ref: '#/components/responses/InvalidUser'\n  /users/logout:\n    post:\n      tags:\n        - users\n      summary: Logs out current logged in user session\n      description: Log out current session.\n      operationId: logout\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n  /users/{username}:\n    get:\n      tags:\n        - users\n      summary: Get user by user name\n      description: Get user by user name.\n      operationId: getUserByName\n      security:\n        - AccessTokenAuth: []\n      parameters:\n        - name: username\n          in: path\n          required: true\n          description: The name that needs to be fetched.\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      user:\n                        $ref: '#/components/schemas/User'\n        400:\n          $ref: '#/components/responses/InvalidUser'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n    put:\n      tags:\n        - users\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      security:\n        - AccessTokenAuth: []\n      parameters:\n        - name: username\n          in: path\n          required: true\n          description: Name that need to be updated.\n          schema:\n            type: string\n        - name: user\n          in: query\n          required: true\n          description: The data for updated user.\n          schema:\n            $ref: \"#/components/schemas/User\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      user:\n                        $ref: '#/components/schemas/User'\n        400:\n          $ref: '#/components/responses/InvalidUser'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n    delete:\n      tags:\n        - users\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      security:\n        - AccessTokenAuth: []\n      parameters:\n        - name: username\n          in: path\n          required: true\n          description: The name that needs to be deleted.\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n        400:\n          $ref: '#/components/responses/InvalidUser'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n  /users/info:\n    post:\n      tags:\n        - users\n      summary: Get current user info\n      description: This can only be done by the logged in user.\n      operationId: getUserInfo\n      security:\n        - AccessTokenAuth: []\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: integer\n                    format: int32\n                  data:\n                    type: object\n                    properties:\n                      user:\n                        $ref: '#/components/schemas/User'\n        401:\n          $ref: '#/components/responses/Unauthorized'\ncomponents:\n  securitySchemes:\n    AccessTokenAuth:\n      type: apiKey\n      in: header\n      name: X-Access-Token\n  responses:\n    NotFound:\n      description: The specified resource was not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    InvalidUser:\n      description: Invalid username supplied\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  schemas:\n    Error:\n      type: object\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n      required:\n        - code\n        - message\n    Article:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        status:\n          type: string\n          enum:\n            - draft\n            - published\n            - deleted\n        title:\n          type: string\n          example: IG Won World Championship\n        abstractContent:\n          type: string\n          example: Invictus Gaming sweeps Fnatic 3-0 to win League of Legends World Championship\n        fullContent:\n          type: string\n          example: Article details goes here...\n        sourceURL:\n          type: string\n          format: url\n          example: http://www.espn.com/esports/story/_/id/25164094/invictus-gaming-sweeps-fnatic-3-0-win-league-legends-world-championship\n        imageURL:\n          type: string\n          format: url\n          example: https://a1.espncdn.com/combiner/i?img=%2Fphoto%2F2018%2F1103%2Fr458060_1296x729_16%2D9.jpg\u0026w=920\u0026h=518\u0026scale=crop\u0026cquality=80\u0026location=origin\u0026format=jpg\n        timestamp:\n          $ref: '#/components/schemas/Timestamp'\n        platforms:\n          type: array\n          items:\n            type: string\n            enum:\n              - a-platform\n              - b-platform\n              - c-platform\n          uniqueItems: true\n        disableComment:\n          type: boolean\n          example: false\n        importance:\n          type: integer\n          format: int32\n          enum:\n            - 1\n            - 2\n            - 3\n        author:\n          type: string\n          example: Chong Guo\n        reviewer:\n          type: string\n          example: Chong Guo\n        type:\n          type: string\n          enum:\n            - CN\n            - US\n            - JP\n            - EU\n        pageviews:\n          $ref: '#/components/schemas/Pageviews/properties/pageviews'\n      required:\n       - id\n       - status\n       - title\n       - timestamp\n       - importance\n       - author\n    Pageviews:\n      type: object\n      properties:\n        key:\n          type: string\n          enum:\n            - PC\n            - Mobile\n            - iOS\n            - Android\n        pageviews:\n          type: integer\n          format: int32\n          example: 1024\n      required:\n        - key\n        - pageviews\n    Transaction:\n      type: object\n      properties:\n        orderId:\n          type: string\n          format: uuid\n        timestamp:\n          $ref: '#/components/schemas/Timestamp'\n        username:\n          type: string\n          example: Chong Guo\n        price:\n          type: number\n          format: double\n        status:\n          type: string\n          enum:\n            - success\n            - pending\n      required:\n        - orderId\n        - timestamp\n        - username\n        - price\n        - status\n    Role:\n      type: object\n      properties:\n        key:\n          type: string\n          example: admin\n        name:\n          type: string\n          example: admin\n        description:\n          type: string\n          example: Super Administrator. Have access to view all pages.\n        routes:\n          $ref: '#/components/schemas/AnyValue'\n      required:\n        - key\n        - name\n        - routes\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n          example: Armour\n        password:\n          type: string\n          example: 12345678\n        name:\n          type: string\n          example: Chong Guo\n        email:\n          type: string\n          example: armourcy@gmail.com\n        phone:\n          type: string\n          example: 18888888888\n        avatar:\n          type: string\n          format: url\n        introduction:\n          type: string\n          example: Always Sunshine\n        roles:\n          type: array\n          items:\n            $ref: '#/components/schemas/Role/properties/key'\n      required:\n        - id\n        - username\n        - password\n        - roles\n    Timestamp:\n      oneOf:\n      - type: integer\n        format: int32\n        example: 1559605283\n      - type: string\n        format: date-time\n        example: 2017-07-21T17:32:28Z\n    AnyValue: {}\n"
		}
	},
	"Error": "parse: paths: /users/register: post: register: parameters: parse parameter \"user\": schema: parse schema: reference \"#/components/schemas/User\": parse schema: roles: parse schema: item: parse schema: reference \"#/components/schemas/Role/properties/key\": resolve reference \"#/components/schemas/Role/properties/key\": schema not found"
}