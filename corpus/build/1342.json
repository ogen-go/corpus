{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/heremaps/xyz-hub"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "xyz-hub-service/src/main/resources/openapi.yaml",
			"content": "openapi: 3.0.2\ninfo:\n  title: HERE XYZ Hub\n  description: |-\n    HERE XYZ Hub is a REST API for simple access to geo data.\n  contact: {}\n  version: 1.0.0\nservers:\n  - url: /hub\nsecurity:\n  - AccessToken: []\n  - Bearer: []\ntags:\n  - name: Manage Spaces\n    description: Space management endpoints.\n  - name: Read Features\n    description: Read only endpoints for features.\n  - name: Write Features\n    description: Read and write endpoints for features.\n  - name: Manage Connectors\n    description: Read and write endpoints for connectors.\npaths:\n  '/spaces':\n    get:\n      tags:\n        - Manage Spaces\n      summary: List spaces\n      description: \u003e-\n        Lists the spaces, which the current authenticated user has access to.\n      operationId: getSpaces\n      parameters:\n        - name: includeRights\n          in: query\n          description: \u003e-\n            If set to _true_, the access rights for each space are included in\n            the response.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: includeConnectors\n          in: query\n          description: \u003e-\n            If set to _true_, the connectors for each space are included in\n            the response.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: owner\n          in: query\n          description: \u003e\n            Define the owner(s) of spaces to be shown in the response.\n\n            Possible values are:\n\n\n            * __me__ (_The default value;_ Show only the spaces being owned by\n            the current user),\n\n            * __(someOwnerId)__ (_Only for shared spaces:_ Explicitly only show\n            spaces belonging to the specified user),\n\n            * __others__ (Show only the spaces having been shared _excluding the\n            own ones_),\n\n            * __*__ (Show all spaces the current user has access to)\n          required: false\n          schema:\n            type: string\n            default: me\n        - name: contentUpdatedAt\n          in: query\n          description: \u003e\n            Additional space filter which compares the space's contentUpdatedAt timestamp with the one\n            specified in the query, resulting in a subset of spaces.\n\n\n            The usage of a comma (,) separating the timestamps, represents\n            an OR operation.\n\n\n            The format should follow the specification below\n              * ?contentUpdatedAt=timestamp\n\n            While in the following example\n              * ?contentUpdatedAt=timestamp_1,timestamp_2\n\n\n            The resulting spaces list will contain all contentUpdatedAt having timestamp_1 OR timestamp_2\n\n\n            The available operators are:\n              - \"=\" - equals\n              - \"!=\" - not equals\n              - \"\u003e=\" or \"=gte=\" - greater than or equals\n              - \"\u003c=\" or \"=lte=\" - less than or equals\n              - \"\u003e\" or \"=gt=\" - greater than\n              - \"\u003c\" or \"=lt=\" - less than\n          required: false\n          schema:\n            type: string\n            example: 1597092085740\n      responses:\n        '200':\n          $ref: '#/components/responses/SpacesResponse'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n    post:\n      tags:\n        - Manage Spaces\n      summary: Create a space\n      description: Creates a new space.\n      operationId: postSpace\n      requestBody:\n        $ref: '#/components/requestBodies/SpaceRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/SpaceResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '409':\n          $ref: '#/components/responses/ErrorResponse409'\n        '413':\n          $ref: '#/components/responses/ErrorResponse413'\n  '/spaces/{spaceId}':\n    get:\n      tags:\n        - Manage Spaces\n      summary: Get a space by ID\n      description: Returns the space definition.\n      operationId: getSpace\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n      responses:\n        '200':\n          $ref: '#/components/responses/SpaceResponse'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n    patch:\n      tags:\n        - Manage Spaces\n      summary: Update a space\n      description: Updates a space.\n      operationId: patchSpace\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n      requestBody:\n        $ref: '#/components/requestBodies/SpaceRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/SpaceResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n        '409':\n          $ref: '#/components/responses/ErrorResponse409'\n        '413':\n          $ref: '#/components/responses/ErrorResponse413'\n    delete:\n      tags:\n        - Manage Spaces\n      summary: Delete a space\n      description: \u003e-\n        Deletes a space configuration. The data of the space may or may not be\n        deleted, depending on the underlying storage provider.\n      operationId: deleteSpace\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n      responses:\n        '200':\n          $ref: '#/components/responses/SpaceResponse'\n        '204':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n  '/spaces/{spaceId}/features':\n    get:\n      tags:\n        - Read Features\n      summary: Get features by ID\n      description: \u003e-\n        Returns all of the features found for the provided list of IDs.\n        The response is always a FeatureCollection,\n        even if there are no features with the provided IDs.\n      operationId: getFeatures\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/RequiredIds'\n        - $ref: '#/components/parameters/PropertiesSelection'\n        - $ref: '#/components/parameters/Force2D'\n      responses:\n        '200':\n          $ref: '#/components/responses/FeatureCollectionResponse'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n        '513':\n          $ref: '#/components/responses/ErrorResponse513'\n    put:\n      tags:\n        - Write Features\n      summary: Create or replace multiple features\n      description: Create or replace the provided features.\n      operationId: putFeatures\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/AddTags'\n        - $ref: '#/components/parameters/RemoveTags'\n      requestBody:\n        $ref: '#/components/requestBodies/FeatureCollectionRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/FeatureCollectionModificationResponse'\n        '204':\n          $ref: '#/components/responses/EmptyResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n        '409':\n          $ref: '#/components/responses/ErrorResponse409'\n        '413':\n          $ref: '#/components/responses/ErrorResponse413'\n        '513':\n          $ref: '#/components/responses/ErrorResponse513'\n    post:\n      tags:\n        - Write Features\n      summary: Modify features in the space\n      description: \u003e\n        This method allows to create, update and delete features. The behavior\n        of the POST handler is controlled by three query parameters described in\n        detail below. The name of the parameter reflects a condition to be\n        matched. Its value reflects the corresponding action to be performed for\n        this case.\n\n\n        If no values are provided, the request is handled with the default\n        values:\n\n\n        ```\n\n\n        ne=create\u0026e=patch\u0026transactional=true\n\n\n        ```\n\n\n        The three parameters and their possible values are:\n\n\n        ### _ne_ - If Not Exists\n\n\n        If no feature with the provided ID exists, or if the provided feature\n        contains no ID, then one of the following actions can be used:\n\n\n        * __create__  (default) - A new object is created.\n\n\n        * __retain__ - No action is executed, allowing the execution of the\n        batch operation to continue, even if the _transactional_ parameter is\n        set to _true_.\n\n\n        * __error__ - If no object with the provided ID exists, an error is\n        raised, which would result in the whole batch operation to be aborted,\n        if the _transactional_ parameter is set to _true_.\n\n\n        ### _e_ - If Exists\n\n\n        If an object with the provided ID exists, and _history_ is enabled for\n        the space, there are 2 states which could be taken into account:\n\n            1. The __ORIGIN__ state - the state that the client received and modified. The state is retrieved by using the value of the root attribute _guid_.\n\n            2. The __HEAD__ state - the current state of the object in the space, including any changes applied to it in the meantime.\n\n\n        The possible operations in detail:\n\n\n        * __patch__  (default) - The feature object is handled as a _partial\n        update object_. Therefore it could contain only the properties, which\n        should be modified. Properties, which do not exist in the HEAD state of\n        the object are inserted, the values for all existing properties are\n        updated, unless the value of the property is set to _null_ , which will\n        result in the property being removed from the object.\n\n            If an _ORIGIN_ state is specified in the _partial update object_ and it is not the same as the _HEAD_ state, the patch is applied to the _HEAD_ state, but only in case that the differnce between _ORIGIN_ and _HEAD_ contains no conflicting changes( i.e. only different properties were modified ). Otherwise an error is raised, which will result in the batch operation being aborted, if the _transactional_ parameter is set to _true_.\n\n        * __replace__ - If an object with the provided ID exists, it will be\n        replaced with the provided feature object. If the _ORIGIN_ state is\n        specified in the provided feature and differs from the _HEAD_ state,\n        then a error is raised.\n\n\n        * __merge__ - The provided feature object is handled as a full object\n        version and not a partial update. If an _ORIGIN_ state is specified in\n        the feature and it is not the same as the _HEAD_ state, the difference\n        between the _ORIGIN_ state and provided version to the _HEAD_ state, but\n        only in the case that the difference between _ORIGIN_ and _HEAD_ contains\n        no conflicting changes. Otherwise an error is raised, which will result\n        in the batch operation being aborted, if the _transactional_ parameter\n        is set to _true_.\n\n\n        * __delete__ - The feature with the provided is deleted.\n\n\n        * __retain__ - The current state of the feature is retained and included\n        in the response.\n\n\n        * __error__ - Raises an error, if the object already exists.\n\n\n        ### transactional - Transactional batch operation\n\n\n        Defines, if modifying of the features, is executed as a single\n        transactional batch operation (_true_:default) or as independent\n        operations (_false_).\n\n        There is a limit of 10 megs of data allowed for this operation.\n      operationId: postFeatures\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/AddTags'\n        - $ref: '#/components/parameters/RemoveTags'\n        - $ref: '#/components/parameters/IfExists'\n        - $ref: '#/components/parameters/IfNotExists'\n        - $ref: '#/components/parameters/ConflictResolution'\n        - $ref: '#/components/parameters/Transactional'\n        - $ref: '#/components/parameters/PrefixId'\n      requestBody:\n        $ref: '#/components/requestBodies/FeatureCollectionOrFeatureModificationListRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/FeatureCollectionModificationResponse'\n        '204':\n          $ref: '#/components/responses/EmptyResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n        '409':\n          $ref: '#/components/responses/ErrorResponse409'\n        '413':\n          $ref: '#/components/responses/ErrorResponse413'\n        '513':\n          $ref: '#/components/responses/ErrorResponse513'\n    delete:\n      tags:\n        - Write Features\n      summary: Delete multiple features\n      description: \u003e-\n        Feature IDs can be used to delete features individually,\n        or the wildcard sign '*' can be used to delete all features in the space.\n      operationId: deleteFeatures\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/Ids'\n        - $ref: '#/components/parameters/TagList'\n      responses:\n        '200':\n          $ref: '#/components/responses/FeatureCollectionModificationResponse'\n        '204':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n  '/spaces/{spaceId}/features/{featureId}':\n    get:\n      tags:\n        - Read Features\n      summary: Get a feature by ID\n      description: Retrieves the feature with the provided identifier.\n      operationId: getFeature\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/FeatureId'\n        - $ref: '#/components/parameters/PropertiesSelection'\n        - $ref: '#/components/parameters/Force2D'\n      responses:\n        '200':\n          $ref: '#/components/responses/FeatureResponse'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n        '513':\n          $ref: '#/components/responses/ErrorResponse513'\n    put:\n      tags:\n        - Write Features\n      summary: Create or replace a feature\n      description: Creates or replaces a feature in the space.\n      operationId: putFeature\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/FeatureId'\n        - $ref: '#/components/parameters/AddTags'\n        - $ref: '#/components/parameters/RemoveTags'\n      requestBody:\n        $ref: '#/components/requestBodies/FeatureRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/FeatureResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '409':\n          $ref: '#/components/responses/ErrorResponse409'\n        '413':\n          $ref: '#/components/responses/ErrorResponse413'\n        '513':\n          $ref: '#/components/responses/ErrorResponse513'\n    patch:\n      tags:\n        - Write Features\n      summary: Patch a feature\n      description: Patches an existing feature.\n      operationId: patchFeature\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/FeatureId'\n        - $ref: '#/components/parameters/AddTags'\n        - $ref: '#/components/parameters/RemoveTags'\n      requestBody:\n        $ref: '#/components/requestBodies/FeatureRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/FeatureResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n        '409':\n          $ref: '#/components/responses/ErrorResponse409'\n        '413':\n          $ref: '#/components/responses/ErrorResponse413'\n        '513':\n          $ref: '#/components/responses/ErrorResponse513'\n    delete:\n      tags:\n        - Write Features\n      summary: Deletes a feature from the space\n      description: Deletes an existing feature.\n      operationId: deleteFeature\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/FeatureId'\n      responses:\n        '204':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n  '/spaces/{spaceId}/statistics':\n    get:\n      tags:\n        - Read Features\n      summary: Get statistics\n      description: Returns statistical information about this space.\n      operationId: getStatistics\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/SkipCache'\n      responses:\n        '200':\n          $ref: '#/components/responses/StatisticsResponse'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n  '/spaces/{spaceId}/bbox':\n    get:\n      tags:\n        - Read Features\n      summary: Get features by bounding box\n      description: \u003e-\n        Return the features which are inside a bounding box stipulated by\n        west, north, east and south parameters.\n      operationId: getFeaturesByBBox\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/West'\n        - $ref: '#/components/parameters/North'\n        - $ref: '#/components/parameters/East'\n        - $ref: '#/components/parameters/South'\n        - $ref: '#/components/parameters/TagList'\n        - $ref: '#/components/parameters/Clip'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/PropertiesQuery'\n        - $ref: '#/components/parameters/PropertiesSelection'\n        - $ref: '#/components/parameters/SkipCache'\n        - $ref: '#/components/parameters/Clustering'\n        - $ref: '#/components/parameters/ClusteringParams'\n        - $ref: '#/components/parameters/Tweaks'\n        - $ref: '#/components/parameters/TweaksParams'\n        - $ref: '#/components/parameters/Force2D'\n      responses:\n        '200':\n          $ref: '#/components/responses/FeatureCollectionResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n        '513':\n          $ref: '#/components/responses/ErrorResponse513'\n  '/spaces/{spaceId}/tile/{type}/{tileId}':\n    get:\n      tags:\n        - Read Features\n      summary: Get features in tile\n      description: |\n        List the features selected by tile type and tile id.\n\n        One of the tile types can be used:\n          * quadkey\n          * web\n          * tms\n          * here\n      operationId: getFeaturesByTile\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/TileType'\n        - $ref: '#/components/parameters/TileId'\n        - $ref: '#/components/parameters/TagList'\n        - $ref: '#/components/parameters/Clip'\n        - $ref: '#/components/parameters/PropertiesQuery'\n        - $ref: '#/components/parameters/PropertiesSelection'\n        - $ref: '#/components/parameters/SkipCache'\n        - $ref: '#/components/parameters/Clustering'\n        - $ref: '#/components/parameters/ClusteringParams'\n        - $ref: '#/components/parameters/Tweaks'\n        - $ref: '#/components/parameters/TweaksParams'\n        - $ref: '#/components/parameters/Margin'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Force2D'\n        - $ref: '#/components/parameters/Mode'\n        - $ref: '#/components/parameters/VizSampling'\n      responses:\n        '200':\n          $ref: '#/components/responses/TileResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n        '513':\n          $ref: '#/components/responses/ErrorResponse513'\n  '/spaces/{spaceId}/spatial':\n    get:\n      tags:\n        - Read Features\n      summary: Get features with radius search\n      description: |\n        List the features which are inside the specified radius.\n        The origin radius point is calculated based either on latitude \u0026 longitude or by\n        specifying a features geometry. As third option it is possible to use a H3 index\n        as input geometry.\n      operationId: getFeaturesBySpatial\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/Latitude'\n        - $ref: '#/components/parameters/Longitude'\n        - $ref: '#/components/parameters/RefSpaceId'\n        - $ref: '#/components/parameters/RefFeatureId'\n        - $ref: '#/components/parameters/H3Index'\n        - $ref: '#/components/parameters/Radius'\n        - $ref: '#/components/parameters/TagList'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Clip'\n        - $ref: '#/components/parameters/PropertiesQuery'\n        - $ref: '#/components/parameters/PropertiesSelection'\n        - $ref: '#/components/parameters/SkipCache'\n        - $ref: '#/components/parameters/Force2D'\n      responses:\n        '200':\n          $ref: '#/components/responses/FeatureCollectionResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n        '513':\n          $ref: '#/components/responses/ErrorResponse513'\n    post:\n      tags:\n        - Read Features\n      summary: Get features which intersects the provided geometry.\n      description: |\n        List the features which are inside the specified radius.\n        The origin point is calculated based on the geometry provided as payload.\n      operationId: getFeaturesBySpatialPost\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/Radius'\n        - $ref: '#/components/parameters/TagList'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Clip'\n        - $ref: '#/components/parameters/PropertiesQuery'\n        - $ref: '#/components/parameters/PropertiesSelection'\n        - $ref: '#/components/parameters/SkipCache'\n        - $ref: '#/components/parameters/Force2D'\n      requestBody:\n        $ref: '#/components/requestBodies/GeometryRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/FeatureCollectionResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n        '513':\n          $ref: '#/components/responses/ErrorResponse513'\n  '/spaces/{spaceId}/search':\n    get:\n      tags:\n        - Read Features\n      summary: Search for features\n      description: \u003e-\n        Searches for features in the space. The results are unordered and the\n        request does not allow continuation of the search, which is the main\n        difference when compared to the _iterate_ request.\n      operationId: searchForFeatures\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/TagList'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/PropertiesQuery'\n        - $ref: '#/components/parameters/PropertiesSelection'\n        - $ref: '#/components/parameters/SkipCache'\n        - $ref: '#/components/parameters/Force2D'\n      responses:\n        '200':\n          $ref: '#/components/responses/FeatureCollectionResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n        '513':\n          $ref: '#/components/responses/ErrorResponse513'\n  '/spaces/{spaceId}/iterate':\n    get:\n      tags:\n        - Read Features\n      summary: Iterate features in the space\n      description: \u003e-\n        Iterates all of the features in the space. The features in the response\n        are ordered so that no feature is returned twice. If there are more\n        features which could be loaded, the response FeatureCollection contains\n        the root attribute _handle_. The value of this attribute can\n        be passed as a query parameter for the following request in order to\n        continue the iteration from the marked position.\n      operationId: iterateFeatures\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/PropertiesSelection'\n        - $ref: '#/components/parameters/Sort'\n        - $ref: '#/components/parameters/Part'\n        - $ref: '#/components/parameters/Version'\n        - $ref: '#/components/parameters/SkipCache'\n        - $ref: '#/components/parameters/Handle'\n        - $ref: '#/components/parameters/Force2D'\n      responses:\n        '200':\n          $ref: '#/components/responses/IterateResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n        '513':\n          $ref: '#/components/responses/ErrorResponse513'\n  '/spaces/{spaceId}/count':\n    x-deprecated: true\n    get:\n      tags:\n        - Read Features\n      summary: Get feature count\n      description: \u003e-\n        Returns the feature count of all features in the space or the count for\n        the provided combination of tags.\n      operationId: getFeaturesCount\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/TagList'\n      responses:\n        '200':\n          $ref: '#/components/responses/CountFeaturesResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n  '/spaces/{spaceId}/history':\n    get:\n      tags:\n        - Read Features\n      summary: Get historical data\n      description: |\n        Get  all features in a given version range.\n\n        Based on the Accept-Header (vnd.here.changeset-collection or vnd.here.compact-changeset)\n        the result will be a Changeset-Collection or a CompactChangeset.\n\n        The former result type contains each of the changes between start version and end version\n        grouped by version which can be used for easily navigate across all modifications which\n        happened on the referring space.\n\n        While the latter contains only the latest state of each feature which is within the start\n        and end version range.\n\n        The Space must have \"enableHistory=true\" setting.\n      operationId: iterateHistory\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/StartVersion'\n        - $ref: '#/components/parameters/EndVersion'\n        - $ref: '#/components/parameters/PageToken'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/SkipCache'\n      responses:\n        '200':\n          $ref: '#/components/responses/HistoryResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n        '513':\n          $ref: '#/components/responses/ErrorResponse513'\n  '/spaces/{spaceId}/history/statistics':\n    get:\n      tags:\n        - Read Features\n      summary: Get history statistics\n      description: |\n        Returns statistical information about the history.\n        The Space must have \"enableGlobalVersioning=true\" setting.\n      operationId: getHistoryStatistics\n      parameters:\n        - $ref: '#/components/parameters/SpaceId'\n        - $ref: '#/components/parameters/SkipCache'\n      responses:\n        '200':\n          $ref: '#/components/responses/HistoryStatisticsResponseResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n  '/connectors':\n    get:\n      tags:\n        - Manage Connectors\n      summary: List connectors\n      description: \u003e-\n        Lists the connectors, which the current authenticated user has access to.\n      operationId: getConnectors\n      parameters:\n        - name: id\n          in: query\n          description: Only query selected resources by id.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/ConnectorsResponse'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n    post:\n      tags:\n        - Manage Connectors\n      summary: Create a connector\n      description: Creates a new connector.\n      operationId: postConnector\n      requestBody:\n        $ref: '#/components/requestBodies/ConnectorConfig'\n      responses:\n        '201':\n          $ref: '#/components/responses/ConnectorResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n  '/connectors/{connectorId}':\n    get:\n      tags:\n        - Manage Connectors\n      summary: Get a connector by ID\n      description: Returns the connector definition\n      operationId: getConnector\n      parameters:\n        - $ref: '#/components/parameters/ConnectorId'\n      responses:\n        '200':\n          $ref: '#/components/responses/ConnectorResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n    patch:\n      tags:\n        - Manage Connectors\n      summary: Update a connector\n      description: Updates a connector.\n      operationId: patchConnector\n      parameters:\n        - $ref: '#/components/parameters/ConnectorId'\n      requestBody:\n        $ref: '#/components/requestBodies/ConnectorConfig'\n      responses:\n        '200':\n          $ref: '#/components/responses/ConnectorResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\n    delete:\n      tags:\n        - Manage Connectors\n      summary: Delete a connector\n      description: \u003e-\n        Deletes a connector configuration.\n      operationId: deleteConnector\n      parameters:\n        - $ref: '#/components/parameters/ConnectorId'\n      responses:\n        '200':\n          $ref: '#/components/responses/ConnectorResponse'\n        '400':\n          $ref: '#/components/responses/ErrorResponse400'\n        '401':\n          $ref: '#/components/responses/ErrorResponse401'\n        '403':\n          $ref: '#/components/responses/ErrorResponse403'\n        '404':\n          $ref: '#/components/responses/ErrorResponse404'\ncomponents:\n  securitySchemes:\n    AccessToken:\n      type: apiKey\n      in: query\n      name: access_token\n    Bearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  parameters:\n    AddTags:\n      name: addTags\n      in: query\n      description: Tags to be added to the features.\n      required: false\n      style: form\n      schema:\n        type: array\n        items:\n          type: string\n    Clip:\n      name: clip\n      in: query\n      description: \u003e-\n        If set to _true_ the features' geometries are clipped to the geometry of\n        the tile, bounding box or input geometry. Default is _false_.\n      required: false\n      schema:\n        type: boolean\n    Clustering:\n      name: clustering\n      in: query\n      description: \u003e-\n        The clustering algorithm to apply to the data within the result.\n        Providing this query parameter, the data is returned in a clustered way.\n        This means the data is not necessarily returned in its original shape or with its\n        original properties.\n\n        Depending on the chosen clustering algorithm, there could be different mandatory and/or\n        optional parameters to specify the behavior of the algorithm.\n\n        Possible values are:\n\n          * \"hexbin\"\n\n            The hexbin algorithm divides the world in hexagonal \"bins\" on a specified resolution.\n            Each hexagon has an address being described by the H3 addressing scheme.\n            For more information on this topic see: https://eng.uber.com/h3/\n\n          * \"quadbin\"\n\n            The quadbin algorithm takes the geometry input from the request (for example, quadkey / bbox..)\n            and count the features in it. This clustering mode works also for very large spaces and\n            can be used for getting an overview where data is present in a given space. Furthermore,\n            a property filter on one property is applicable.\n      required: false\n      schema:\n        type: string\n        enum:\n          - hexbin\n          - quadbin\n    ClusteringParams:\n      name: clusteringParams\n      in: query\n      required: false\n      description: |\n        Some parameters for the chosen clustering algorithm.\n\n        Depending on the chosen clustering algorithm, there could be different mandatory and/or\n        optional parameters to specify the behavior of the algorithm.\n\n        ### Clustering-Parameter reference\n\n        NOTE: The actual query parameters in the URL look like: `?clustering.aParameterName=aValue`\n\n        **Clustering-type: \"hexbin\":**\n\n        There are several parameters needed by the H3 based hexbin algorithm.\n        For more information on this topic see: https://eng.uber.com/h3/\n\n        | Parameter   | Type    | Mandatory | Meaning                                                               |\n        |-------------|---------|-----------|-----------------------------------------------------------------------|\n        | absoluteResolution  | Number  | NO        | integer, The H3 hexagon resolution [0,13]                      |\n        | resolution  | Number  | NO        | deprecated, renamed to absoluteResolution                             |\n        | relativeResolution | Number  | NO        | integer value [-2,2] to be added to current used resolution  |\n        | property    | String  | NO        | A property of the original features for which to calculate statistics |\n        | pointmode   | Boolean | NO        | retuns the centroid of hexagons as geojson feature                    |\n        | singlecoord | Boolean | NO        | force to evaluate the first object coordinate only (default: false)   |\n        | sampling    | String  | NO        | samplingratio of underlying dataset  |\n        |             |         |           | string value [off (1/1), low (1/8), lowmed (1/32), med (1/128), medhigh (1/1024), high (1/4096)] (default: off) |\n\n        **Clustering-type: \"quadbin\":**\n\n        There are several parameters needed by the quadbin algorithm. You can use one property filter in combination.\n\n        | Parameter   | Type    | Mandatory | Meaning                                                               |\n        |-------------|---------|-----------|-----------------------------------------------------------------------|\n        | relativeResolution | Number  | NO        | integer, The quad resolution [0,4]                                             |\n        | noBuffer    | Boolean | NO        | do not place a buffer around quad polygons, default: false            |\n        | resolution  | Number  | NO        | deprecated, renamed to resolutionRelative             |\n        | countmode   | String  | NO        | [real, estimated, mixed]                                    |\n        |             |         |           | real = real feature counts. Best accuracy, but slow.                  |\n        |             |         |           |     Not recommended for big result sets                       |\n        |             |         |           |                                                                       |\n        |             |         |           | estimated = estimated feature counts. Low accuracy, but very fast      |\n        |             |         |           |     Recommended for big result sets                           |\n        |             |         |           |                                                                       |\n        |             |         |           | mixed (default) = estimated feature counts combined with real ones.   |\n        |             |         |           |     If the estimation is low a real count gets applied. Fits to the |\n        |             |         |           |     most use cases                                        |\n      style: form\n      explode: true\n      schema:\n        type: object\n        example:\n          clustering.resolution: 3\n          clustering.property: 'a.nested.property'\n        additionalProperties:\n          type: string\n    ConflictResolution:\n      name: cr\n      in: query\n      description: \u003e-\n        The resolution strategy when a conflicting update of the same attribute occurs.\n        To keep the value of the head state select _retain_.\n        To overwrite the value of the head state select _replace_.\n        To abort the entry update select _error_.\n      required: false\n      schema:\n        type: string\n        enum:\n          - error\n          - retain\n          - replace\n        default: error\n    ConnectorId:\n      name: connectorId\n      in: path\n      description: The unique identifier of the connector.\n      required: true\n      schema:\n        type: string\n    East:\n      name: east\n      in: query\n      description: \u003e-\n        The longitude in WGS'84 decimal degree (-180 to +180) of the east\n        (right) border of the bounding box.\n      required: false\n      schema:\n        type: number\n        format: double\n        minimum: -180\n        maximum: 180\n    EndVersion:\n      name: endVersion\n      in: query\n      description: Define end of version-range [version \u003c= endVersion].\n      required: false\n      schema:\n        type: integer\n    FeatureId:\n      name: featureId\n      in: path\n      description: The unique identifier of a feature in the space.\n      required: true\n      schema:\n        type: string\n    Force2D:\n      name: force2D\n      in: query\n      description: \u003e-\n        If set to _true_ the features in the response have only X's and Y's as coordinates.\n      schema:\n        type: boolean\n    Handle:\n      name: handle\n      in: query\n      description: The handle to continue the iteration.\n      schema:\n        type: string\n    Ids:\n      name: id\n      in: query\n      description: \u003e-\n        A comma separated list of unique feature identifiers. These are the acceptable formats\n        for this field:\n          * id=value1,value2\n          * id=value1,id=value2\n      schema:\n        type: array\n        items:\n          type: string\n    IfExists:\n      name: e\n      in: query\n      description: \u003e-\n        The action to execute, when a feature with the provided ID exists.\n        Default is _patch_.\n      required: false\n      schema:\n        type: string\n        enum:\n          - patch\n          - replace\n          - merge\n          - delete\n          - retain\n          - error\n        default: patch\n    IfNotExists:\n      name: ne\n      in: query\n      description: \u003e-\n        The action to execute, when a feature with the provided ID does not\n        exist or the feature contains no ID. Default is _create_.\n      required: false\n      schema:\n        type: string\n        enum:\n          - retain\n          - error\n          - create\n        default: create\n    Latitude:\n      name: lat\n      in: query\n      description: \u003e-\n        The latitude in WGS'84 decimal degree (-90 to +90) of the center Point.\n      schema:\n        type: number\n        minimum: -90\n        maximum: 90\n    Limit:\n      name: limit\n      in: query\n      description: \u003e-\n        The maximum number of features in the response.\n        Default is _30000_. Hard limit is _100000_.\n      schema:\n        type: integer\n    Longitude:\n      name: lon\n      in: query\n      description: \u003e-\n        The longitude in WGS'84 decimal degree (-180 to +180) of the center Point.\n      schema:\n        type: number\n        minimum: -180\n        maximum: 180\n    Margin:\n      name: margin\n      in: query\n      description: \u003e-\n        Margin in pixels on the respective projected level around the tile.\n        Default is 0.\n      schema:\n        type: integer\n        minimum: 0\n    Mode:\n      name: mode\n      in: query\n      description: \u003e-\n        Optimize resultset and geometries for dispaly. mode = [raw|viz]\n\n\n        Note: when using mode=viz, the value of \"limit\" parameter will be set\n        to its max value (100000) if not specified otherwise.\n      required: false\n      schema:\n        type: string\n        enum:\n          - raw\n          - viz\n    North:\n      name: north\n      in: query\n      description: \u003e-\n        The latitude in WGS'84 decimal degree (-90 to +90) of the north\n        (top) border of the bounding box.\n      required: false\n      schema:\n        type: number\n        format: double\n        minimum: -90\n        maximum: 90\n    PageToken:\n      name: pageToken\n      in: query\n      description: The page token where the iteration continues.\n      schema:\n        type: string\n    Part:\n      name: part\n      in: query\n      description: |\n         Requests disjunct parts of iteration results (used with sort). List of two integers \"part,total\".\n         part=1,4 read as first part out of 4, ... until part=4,4 .\n\n         Example: ?part=7,9\n      explode: false\n      schema:\n        type: array\n        items:\n          type: integer\n    PrefixId:\n      name: prefixId\n      in: query\n      description: If set all feature IDs are prefixed with the provided string.\n      required: false\n      schema:\n        type: string\n    PropertiesQuery:\n      name: params\n      in: query\n      description: \u003e\n        Additional feature filters which compare the feature's property value with the one\n        specified in the query, resulting in a subset of features.\n\n\n        The usage of multiple property names represents an AND operation.\n        The usage of a comma (,) separating the properties values, represents\n        an OR operation.\n\n\n        Properties initiated with 'f.' are used to access values which are added by default in the\n        stored feature. The possible values are: 'f.id', 'f.createdAt' and 'f.updatedAt'.\n\n\n        Properties initiated with 'p.' are used to access values in the stored feature which are\n        under the 'properties' property. Use it as a shorthand accessor for 'properties' values.\n\n\n        The format should follow the specification below\n          * ?p.property_name_1=property_value_1\u0026f.special_property_name_1=special_property_value_1\n\n\n        For example, the above query, the Features are filtered by\n        'property' AND 'special property' equals to their respective values.\n\n\n        While in the following example\n          * ?p.property_name_1=value_1,value_2\n\n\n        The resulting Features list contains all elements having value_1 OR value_2.\n\n\n        Additionally, to the operators used in the examples above, the query can be written,\n        with the same semantic, by using the long operators: \"=gte=\", \"=lte=\", \"=gt=\", \"=lt=\" and \"=cs=\".\n        The following queries yield the same result:\n          * ?p.property_name_1\u003e=10\n          * ?p.property_name_1=gte=10\n\n\n        The available operators are:\n          - \"=\" - equals\n          - \"!=\" - not equals\n          - \"=.null\" - is null\n          - \"!=.null\" - is not null\n          - \"\u003e=\" or \"=gte=\" - greater than or equals\n          - \"\u003c=\" or \"=lte=\" - less than or equals\n          - \"\u003e\" or \"=gt=\" - greater than\n          - \"\u003c\" or \"=lt=\" - less than\n          - \"@\u003e\" or \"=cs=\" - Array contains\n      explode: true\n      schema:\n        type: object\n        example:\n          p.myProperty: 'someValue'\n          p.otherProperty: 5\n        additionalProperties:\n          type: string\n    PropertiesSelection:\n      name: selection\n      in: query\n      description: |\n        A list of properties to be returned in the features result list. Multiple attributes can be\n        specified by using comma(,).\n\n        Example: ?selection=p.name,p.capacity,p.color,rootpropertyname\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n    H3Index:\n      name: h3Index\n      in: query\n      description: \u003e-\n        H3 index\n      schema:\n        type: string\n    Radius:\n      name: radius\n      in: query\n      description: \u003e-\n        Radius in meters which defines the diameter of the search request.\n      schema:\n        type: integer\n    RefFeatureId:\n      name: refFeatureId\n      in: query\n      description: \u003e-\n        The unique identifier of a feature in the referenced space.\n\n        The feature's geometry is used as a reference in the spatial search.\n      schema:\n        type: string\n    RefSpaceId:\n      name: refSpaceId\n      in: query\n      description: \u003e-\n        The space where the feature, referenced by refFeatureId, is stored.\n\n        Required if refFeatureId is used.\n      schema:\n        type: string\n    RemoveTags:\n      name: removeTags\n      in: query\n      description: Tags to be removed from the features.\n      required: false\n      style: form\n      schema:\n        type: array\n        items:\n          type: string\n    RequiredIds:\n      name: id\n      in: query\n      description: \u003e-\n        A comma separated list of unique feature identifiers. These are the acceptable formats\n        for this field:\n          * id=value1,value2\n          * id=value1,id=value2\n      required: true\n      schema:\n        type: array\n        items:\n          type: string\n    SkipCache:\n      name: skipCache\n      in: query\n      description: \u003e-\n        If set to _true_ the response is not returned from cache. Default is _false_.\n      schema:\n        type: boolean\n    Sort:\n      name: sort\n      in: query\n      description: |\n        Specifies the sort order by a list of properties. Ascending assumed if no sort direction (:asc, :desc) is specified\n\n        Example: ?sort=p.name:asc,p.color:desc\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n    South:\n      name: south\n      in: query\n      description: \u003e-\n        The latitude in WGS'84 decimal degree (-90 to +90) of the south\n        (bottom) border of the bounding box.\n      required: false\n      schema:\n        type: number\n        format: double\n        minimum: -90\n        maximum: 90\n    SpaceId:\n      name: spaceId\n      in: path\n      description: The unique identifier of the space.\n      required: true\n      schema:\n        type: string\n    StartVersion:\n      name: startVersion\n      in: query\n      description: Define start of version-range [version \u003e= startVersion].\n      required: false\n      schema:\n        type: integer\n    TagList:\n      name: tags\n      in: query\n      description: \u003e-\n        A comma separated list of tags or combination of tags concatenated with\n        a plus sign (+). A comma separated list of tags means any tag may be\n        found. A plus sign concatenated list means every tag is required.\n      allowEmptyValue: true\n      #allowReserved: true\n      style: form\n      schema:\n        type: array\n        items:\n          type: string\n    TileId:\n      name: tileId\n      in: path\n      description: \u003e-\n        The tile identifier can be provided as quadkey (__1__), Web Mercator\n        level,x,y coordinates (__1_1_0__) or OSGEO Tile Map Service\n        level,x,y (__1_1_0__).\n      required: true\n      schema:\n        type: string\n    TileType:\n      name: type\n      in: path\n      description: \u003e-\n        The type of tile identifier. \"quadkey\" - Virtual Earth, \"web\" - Web\n        Mercator, \"tms\" - OSGEO Tile Map Service, \"here\" - Here Tile Schema.\n      required: true\n      schema:\n        type: string\n        enum:\n          - quadkey\n          - web\n          - tms\n          - here\n    Transactional:\n      name: transactional\n      in: query\n      description: Defines, if this is a transactional operation. Default is _true_.\n      required: false\n      schema:\n        type: boolean\n    Tweaks:\n      name: tweaks\n      in: query\n      description: \u003e-\n        Providing this query parameter only a subset of the data will be returned. This can be used for rendering higher zoom levels.\n\n        Possible values are:\n\n          * \"sampling\"\n            Delivery of geometry distributed data-samples.\n\n          * \"simplification\"\n            Delivery of simplified geometries\n\n      required: false\n      schema:\n        type: string\n        enum:\n          - sampling\n          - simplification\n          - ensure\n    TweaksParams:\n      name: tweaksParams\n      in: query\n      required: false\n      description: |\n        Providing this query parameter only a subset of the data will be returned. This can be used for rendering higher zoom levels.\n\n        ### Tweaks-Parameter reference\n\n        **Tweaks-type: \"sampling\":**\n\n        With the strength parameter it is possibile to control the behavior of the tweaks-sampling algorithm.\n\n        | Parameter   | Type    | Mandatory | Meaning                                                               |\n        |-------------|---------|-----------|-----------------------------------------------------------------------|\n        | algorithm   | String  | NO        | distribution, geometrysize     |\n        | strength    | String  | NO        | Use presets: low, lowmed, med, medhigh, high or define strengh in percentage 1-100     |\n\n        **Tweaks-type: \"simplification\":**\n\n        With the strength parameter it is possibile to control the behavior of the tweaks-simplification algorithm.\n\n        | Parameter   | Type    | Mandatory | Meaning                                                               |\n        |-------------|---------|-----------|-----------------------------------------------------------------------|\n        | algorithm   | String  | NO        | grid, gridbytilelevel, simplifiedkeeptopology, simplified, merge, linemerge |\n        | strength    | String  | NO        | Use presets: low, med, high or define strengh in percentage 1-100     |\n\n        **Tweaks-type: \"ensure\":**\n\n        | Parameter   | Type    | Mandatory | Meaning                                                               |\n        |-------------|---------|-----------|-----------------------------------------------------------------------|\n        | defaultselection | boolean  | NO        | use standard selection behaviour  [default: false]              |\n        | samplingthreshold | Number  | NO        | integer 10-100, size of samples (x1000) [default: 10]           |\n\n      style: form\n      explode: true\n      schema:\n        type: object\n        example:\n          tweaks.strength: \"1-100 | [low,lowmed,med,medhigh,high]\"\n        additionalProperties:\n          type: string\n    Version:\n      name: version\n      in: query\n      description: Define a version [feature version \u003c= query version].\n      required: false\n      schema:\n        type: integer\n    VizSampling:\n      name: vizSampling\n      in: query\n      description: \u003e-\n        Choose sampling strength in case of mode = viz.\n\n        vizSampling = [low|med|high|off] - default: med.\n      required: false\n      schema:\n        type: string\n        enum:\n          - low\n          - med\n          - high\n          - \"off\"\n    West:\n      name: west\n      in: query\n      description: \u003e-\n        The longitude in WGS'84 decimal degree (-180 to +180) of the west\n        (left) border of the bounding box.\n      required: false\n      schema:\n        type: number\n        format: double\n        minimum: -180\n        maximum: 180\n  responses:\n    ConnectorResponse:\n      description: The connector\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ConnectorConfig'\n    ConnectorsResponse:\n      description: The list of connectors\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: '#/components/schemas/ConnectorConfig'\n            type: array\n    CountFeaturesResponse:\n      x-deprecated: true\n      description: The number of features in a spaces, optionally counted by tag(s).\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CountFeatures'\n    EmptyResponse:\n      description: \u003e-\n        An empty response as a result of a user-request with accepted MIME type application/x-empty.\n      content:\n        application/x-empty:\n          schema:\n            type: string\n    ErrorResponse400:\n      description: Malformed or Bad Request.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            type: ErrorResponse\n            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9\n            error: Exception\n            errorMessage: \u003cInvalid request details\u003e\n    ErrorResponse401:\n      description: Unauthorized to perform the request.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    ErrorResponse403:\n      description: Forbidden request. Insufficient rights to perform the request.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            type: ErrorResponse\n            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9\n            error: Exception\n            errorMessage: Insufficient rights + \u003cRequest specific access error details\u003e\n    ErrorResponse404:\n      description: Not found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            type: ErrorResponse\n            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9\n            error: Exception\n            errorMessage: The requested resource does not exist.\n    ErrorResponse409:\n      description: An error response which indicates a conflict.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            type: ErrorResponse\n            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9\n            error: Exception\n            errorMessage: The record exists.\n    ErrorResponse413:\n      description: Request entity too large.\n      content:\n        text/plain:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            type: \"ErrorResponse\"\n            error: \"Exception\"\n            errorMessage: \"Request entity too large.\"\n            streamId: \"7480e28a-e273-11e8-9af8-7508bbe361d9\"\n    ErrorResponse513:\n      description: Response payload too large.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            type: ErrorResponse\n            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9\n            error: Exception\n            errorMessage: The response payload was too large. Please try to reduce the expected amount of data.\n    FeatureCollectionModificationResponse:\n      description: An array of features and their modifications response.\n      content:\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/FeatureCollectionModification'\n          example:\n            type: FeatureCollection\n            etag: b9be03f253c53c23\n            inserted:\n              - BfiimUxHjj\n            updated:\n              - cuiImUxOjj\n            features:\n              - type: Feature\n                id: BfiimUxHjj\n                geometry:\n                  type: Point\n                  coordinates:\n                    - -2.960847\n                    - 53.430828\n                properties:\n                  name: Anfield\n                  '@ns:com:here:xyz':\n                    createdAt: 1517504700726\n                    updatedAt: 1517504700726\n                    space: 0FzlE2wX\n                    tags:\n                      - football\n                      - stadium\n                  amenity: Football Stadium\n                  capacity: 54074\n                  description: Home of Liverpool Football Club\n    FeatureCollectionResponse:\n      description: An array of features response.\n      content:\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/FeatureCollection'\n    FeatureResponse:\n      description: A feature response.\n      content:\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/Feature'\n    HistoryResponse:\n      description: Changesets which are containing FeatureCollections grouped by operation/versions.\n      content:\n        application/vnd.here.changeset-collection:\n          schema:\n            $ref: '#/components/schemas/ChangesetCollection'\n        application/vnd.here.compact-changeset:\n          schema:\n            $ref: '#/components/schemas/CompactChangeset'\n    HistoryStatisticsResponseResponse:\n      description: Statistical information about a history.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HistoryStatisticsResponse'\n    IterateResponse:\n      description: A FeatureCollection with handle response.\n      content:\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/FeatureCollectionIterable'\n    SpaceResponse:\n      description: The space.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Space'\n          examples:\n            response:\n              value:\n                id: 0FzlE2wX\n                title: My Demo Space\n                description: Description as markdown\n                owner: HERE-12345678-1234-1111-1234-1234432112344321\n                cid: dX0BH75QE8paCVQr8MQw\n                createdAt: 1560417151751\n                updatedAt: 1561480482869\n    SpacesResponse:\n      description: The list of spaces.\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: '#/components/schemas/Space'\n            type: array\n          examples:\n            response:\n              value:\n                - id: 0FzlE2wX\n                  title: My Demo Space\n                  description: Description as markdown\n                  owner: HERE-12345678-1234-1111-1234-1234432112344321\n                  cid: dX0BH75QE8paCVQr8MQw\n                  createdAt: 1560417151751\n                  updatedAt: 1561480482869\n    StatisticsResponse:\n      description: Statistical information about a space.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Statistics'\n    TileResponse:\n      description: \u003e-\n        A FeatureCollection in GeoJSON or MVT response format. The response format can be selected by using the header \"Accept\". Possible values for the header \"Accept\" are: \"application/geo+json\" and \"application/vnd.mapbox-vector-tile\". When the header \"Accept\" is not informed, the default response type GeoJSON is assumed. Appending \".mvt\" to the end of the tile address selects automatically the MVT response type.\n      content:\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/FeatureCollection'\n        application/vnd.mapbox-vector-tile:\n          schema:\n            type: string\n            format: binary\n          example: ''\n  requestBodies:\n    ConnectorConfig:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ConnectorConfig'\n    FeatureCollectionOrFeatureModificationListRequest:\n      description: A FeatureCollection object or a FeatureModificationList object.\n      required: true\n      content:\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/FeatureCollection'\n        application/vnd.here.feature-modification-list:\n          schema:\n            $ref: '#/components/schemas/FeatureModificationList'\n    FeatureCollectionRequest:\n      description: A feature collection request.\n      required: true\n      content:\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/FeatureCollection'\n    FeatureRequest:\n      description: A feature request.\n      required: true\n      content:\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/Feature'\n    GeometryRequest:\n      description: A geometry request.\n      content:\n        application/geo+json:\n          schema:\n            $ref: '#/components/schemas/Geometry'\n    SpaceRequest:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Space'\n  schemas:\n    # TODO add Typed and Iterable schemas\n    AWSLambda:\n      allOf:\n        - $ref: '#/components/schemas/RemoteFunctionConfig'\n        - type: object\n          properties:\n            lambdaARN:\n              description: \u003e-\n                The ARN of the AWS lambda main function to be called for the respective operation.\n              type: string\n            roleARN:\n              description: \u003e-\n                The ARN of an AWS IAM Role granting the permission to call the lambda function specified in {@link #lambdaARN}. The referenced role\n                needs to allow this service to assume it by adding this service' role ARN as principle into its trust policy.\n                See: [AWS Docs](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#delegation)\n              type: string\n    CacheProfile:\n      description: \u003e-\n        Provides cache information used to determine where and for how long the content should\n        be held. Each of the properties of this object represents a component and its\n        TTL (time-to-live) in seconds, where zero value means the content should not be cached.\n      type: object\n      properties:\n        browserTTL:\n          type: integer\n          description: For how long, in seconds, the client should hold the content cached.\n        cdnTTL:\n          type: integer\n          description: For how long, in seconds, the CDN should hold the content cached.\n        serviceTTL:\n          type: integer\n          description: For how long, in seconds, Data Hub should hold the content cached.\n    Changeset:\n      type: object\n      description: A Changeset includes three FeatureCollections grouped by the operations inserted, updated, deleted.\n      properties:\n        type:\n          type: string\n        inserted:\n          type: array\n          description: FeatureCollection of inserted features.\n          items:\n            $ref: '#/components/schemas/FeatureCollection'\n        updated:\n          type: array\n          description: FeatureCollection of updated features.\n          items:\n            $ref: '#/components/schemas/FeatureCollection'\n        deleted:\n          type: array\n          description: FeatureCollection of deleted features.\n          items:\n            $ref: '#/components/schemas/FeatureCollection'\n      example:\n        type: Changeset\n        inserted:\n          type: FeatureCollection\n          features:\n            - type: Feature\n              id: Q1369587\n              geometry:\n                type: Point\n                coordinates:\n                  - -62.696667\n                  - 8.3125\n              properties:\n                name: Polideportivo Cachamay\n                '@ns:com:here:xyz':\n                  tags:\n                    - football\n                    - stadium\n                sport: association football\n                capacity: 41600\n        updated:\n          type: FeatureCollection\n          features:\n            - type: Feature\n              id: Q947065\n              geometry:\n                type: Point\n                coordinates:\n                  - -110.948889\n                  - 32.228889\n              properties:\n                name: Arizona Stadium\n                '@ns:com:here:xyz':\n                  tags:\n                    - football\n                    - stadium\n                sport: American football\n                capacity: 56037\n        deleted:\n          type: FeatureCollection\n          features:\n            - type: Feature\n              id: Q1369587\n              geometry:\n                type: Point\n                coordinates:\n                  - -62.696667\n                  - 8.3125\n              properties:\n                name: Murrayfield Stadium\n                '@ns:com:here:xyz':\n                  tags:\n                    - rugby\n                    - stadium\n                sport: rugby union\n                capacity: 67144\n    ChangesetCollection:\n      description: A ChangesetCollection JSON object.\n      properties:\n        type:\n          type: string\n        startVersion:\n          type: integer\n          description: Defines the minimal version.\n        endVersion:\n          type: integer\n          description: Defines the maximial version.\n        versions:\n          type: object\n          description: Map of Versions. Each Version contains a Changeset.\n          additionalProperties:\n            $ref: '#/components/schemas/Changeset'\n        nextPageToken:\n          type: string\n          description: The handle of the next batch.\n      example:\n        type: ChangesetCollection\n        startVersion: 1\n        endVersion: 2\n        versions:\n          \"1\":\n            type: Changeset\n            inserted:\n              type: FeatureCollection\n              features:\n                - type: Feature\n                  id: Q1369587\n                  geometry:\n                    type: Point\n                    coordinates:\n                      - -62.696667\n                      - 8.3125\n                  properties:\n                    name: Polideportivo Cachamay\n                    '@ns:com:here:xyz':\n                      tags:\n                        - football\n                        - stadium\n                      version: 1\n                    sport: association football\n                    capacity: 41600\n            updated:\n              type: FeatureCollection\n              features:\n                - type: Feature\n                  id: Q947065\n                  geometry:\n                    type: Point\n                    coordinates:\n                      - -110.948889\n                      - 32.228889\n                  properties:\n                    name: Arizona Stadium\n                    '@ns:com:here:xyz':\n                      tags:\n                        - football\n                        - stadium\n                      version: 1\n                    sport: American football\n                    capacity: 56037\n            deleted:\n              type: FeatureCollection\n              features: [ ]\n        nextPageToken: 1000\n    CompactChangeset:\n      allOf:\n        - $ref: '#/components/schemas/Changeset'\n        - type: object\n          description: A Changeset JSON object.\n          properties:\n            nextPageToken:\n              type: string\n              description: The handle of the next batch.\n      example:\n        type: Changeset\n        inserted:\n          type: FeatureCollection\n          features:\n            - type: Feature\n              id: Q1369587\n              geometry:\n                type: Point\n                coordinates:\n                  - -62.696667\n                  - 8.3125\n              properties:\n                name: Polideportivo Cachamay\n                '@ns:com:here:xyz':\n                  tags:\n                    - football\n                    - stadium\n                version: 1\n                sport: association football\n                capacity: 41600\n        updated:\n          type: FeatureCollection\n          features:\n            - type: Feature\n              id: Q947065\n              geometry:\n                type: Point\n                coordinates:\n                  - -110.948889\n                  - 32.228889\n              properties:\n                name: Arizona Stadium\n                '@ns:com:here:xyz':\n                  tags:\n                    - football\n                    - stadium\n                version: 5\n                sport: American football\n                capacity: 56037\n        deleted:\n          type: FeatureCollection\n          features: [ ]\n        nextPageToken: 1000\n    Connector:\n      type: object\n      description: \u003e-\n        A connector configuration which is attached to the space and can act as Listener or Processor.\n      properties:\n        id:\n          type: string\n          description: \u003e-\n            The connector ID, which should correspond to one of the existing connectors in Data Hub.\n        eventTypes:\n          type: array\n          description: \u003e-\n            An array of strings where each of the elements, describes the type of event and in\n            which phase Data Hub should notify the connector.\n          items:\n            type: string\n          example:\n            - ModifyFeaturesEvent.request\n            - ModifyFeaturesEvent.response\n        params:\n          description: \u003e-\n            An arbitrary object containing additional properties which are passed to the connector\n            together within the event sent by Data Hub. It can be used to configure the connector\n            per-space basis.\n          additionalProperties: true\n    ConnectorConfig:\n      type: object\n      description: A connector declaration.\n      properties:\n        id:\n          description: \u003e-\n            The unique identifier of the connector.\n          example: my-custom-connector-id\n          type: string\n        active:\n          description: \u003e-\n            Whether this connector is activated.\n            If this flag is set to false, no connector client will be available for it.\n            That means no requests can be performed to the connector.\n          type: boolean\n          default: true\n        skipAutoDisable:\n          description: \u003e-\n            Whether to skip the automatic disabling of this connector even when being not healthy.\n          type: boolean\n          default: false\n        trusted:\n          description: \u003e-\n            Whether the connector is a trusted connector. Trusted connectors will receive more information than normal connectors.\n          type: boolean\n          default: false\n        params:\n          description: \u003e-\n            Arbitrary parameters to be provided to the remote function with the event.\n          type: object\n        capabilities:\n          $ref: '#/components/schemas/StorageCapabilities'\n        remoteFunctions:\n          description: \u003e-\n            A map with Cluster-IDs as keys (cluster-id-1 \u0026 cluster-id-1) and a 'RemoteFunctionConfig' as value.\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/RemoteFunctionConfig'\n        remoteFunction:\n          allOf:\n            - $ref: '#/components/schemas/RemoteFunctionConfig'\n            - deprecated: true\n              description: \"This property has been deprecated, please use remoteFunctions instead.\"\n          deprecated: true\n        connectionSettings:\n          description: \u003e-\n            The connection and throttling settings.\n          type: object\n          properties:\n            maxConnections:\n              description: The maximal amount of concurrent connector instances to use.\n              type: integer\n              format: int64\n              default: 64\n        defaultEventTypes:\n          description: \u003e-\n            The default event types to register the connector for. Can be overridden in the space definition by the owner.\n            The value of one individual array element is a composition of the event type\n            and the phase, separated by a dot. For example \\\"ModifySpaceEvent\\\" as the event\n            type plus \".\" plus \"response\" as phase.\n          type: array\n          items:\n            type: string\n            enum: [\n                ModifySpaceEvent.request,\n                ModifySpaceEvent.response,\n                GetStatisticsEvent.request,\n                GetStatisticsEvent.response,\n                GetFeaturesByIdEvent.request,\n                GetFeaturesByIdEvent.response,\n                SearchForFeaturesEvent.request,\n                SearchForFeaturesEvent.response,\n                IterateFeaturesEvent.request,\n                IterateFeaturesEvent.response,\n                GetFeaturesByTileEvent.request,\n                GetFeaturesByTileEvent.response,\n                GetFeaturesByBBoxEvent.request,\n                GetFeaturesByBBoxEvent.response,\n                GetFeaturesByGeometryEvent.request,\n                GetFeaturesByGeometryEvent.response,\n                ModifyFeaturesEvent.request,\n                ModifyFeaturesEvent.response,\n                DeleteFeaturesByTagEvent.request,\n                DeleteFeaturesByTagEvent.response,\n                ContentModifiedNotification.request\n            ]\n        contactEmails:\n          description: \u003e-\n            A list of email addresses of responsible owners for this connector. These email addresses will be used to send potential health warnings and other notifications.\n          type: array\n          items:\n            type: string\n            format: email\n      example:\n        capabilities:\n          clusteringTypes:\n            - hexbin\n            - quad\n            - quadbin\n          preserializedResponseSupport: true\n          propertySearch: true\n          relocationSupport: true\n          searchablePropertiesConfiguration: true\n        contactEmails:\n          - MY_TEAM_E-MAIL@here.com\n          - DEVELOPER_E-MAIL@here.com\n        id: my-custom-unique-id\n        params:\n          ecps: myEncryptedAndVeryLongEcpsString\n          autoIndexing: true\n          propertySearch: true\n          mvtSupport: true\n        remoteFunctions:\n          eu-west-1:\n            id: test1\n            lambdaARN: arn:aws:lambda:eu-west-1:\u003cmyAwsAccountId\u003e:function:test1\n            roleARN:\n            type: AWSLambda\n    Copyright:\n      type: object\n      description: Provides some information about a copyright\n      properties:\n        label:\n          description: The copyright label to be displayed by the client.\n          type: string\n        alt:\n          description: The description text for the label to be displayed by the client.\n          type: string\n      example:\n        label: HERE\n        alt: HERE XYZ\n    CountFeatures:\n      x-deprecated: true\n      type: object\n      description: \u003e-\n        The response returned when successfully requesting the feature count of\n        a space.\n      properties:\n        count:\n          description: The feature count.\n          type: integer\n        estimated:\n          $ref: '#/components/schemas/Estimated'\n      example:\n        type: CountResponse\n        count: 100\n        estimated: false\n    Error:\n      type: object\n      description: \u003e-\n        The response send when the request failed. This response may be send for\n        certain HTTP error codes like 403 Forbidden or 502 Bad Gateway and\n        should hold more details about the error reason.\n      properties:\n        streamId:\n          description: \u003e-\n            A unique identifier of the request. This identifier should be\n            provided when reporting errors. Its used to track requests\n            through the XYZ platform.\n          type: string\n        type:\n          type: string\n          description: The type of the error. Defaults to 'ErrorResponse'.\n        error:\n          type: string\n          description: The error summary.\n        errorMessage:\n          type: string\n          description: \u003e-\n            A human readable message in English that should provide a more\n            detailed description of the error reason.\n    Estimated:\n      type: boolean\n      description: True if the value is only an estimation; false otherwise.\n      example: true\n    Feature:\n      allOf:\n        - $ref: '#/components/schemas/GeoJSON'\n        - type: object\n          description: A Feature object represents a spatially bounded thing.\n          properties:\n            id:\n              description: The unique identifier of the feature.\n              type: string\n            geometry:\n              $ref: '#/components/schemas/Geometry'\n            properties:\n              type: object\n              description: The properties of the feature.\n              properties:\n                '@ns:com:here:xyz':\n                  $ref: '#/components/schemas/Namespace'\n              additionalProperties: true\n          example:\n            type: Feature\n            id: BfiimUxHjj\n            geometry:\n              type: Point\n              coordinates:\n                - -2.960847\n                - 53.430828\n            properties:\n              name: Anfield\n              '@ns:com:here:xyz':\n                tags:\n                  - football\n                  - stadium\n              amenity: Football Stadium\n              capacity: 54074\n              description: Home of Liverpool Football Club\n    FeatureCollection:\n      allOf:\n        - $ref: '#/components/schemas/GeoJSON'\n        - type: object\n          description: A FeatureCollection GeoJSON object.\n          required:\n            - features\n          discriminator:\n            propertyName: type\n            mapping:\n              FeatureCollectionIterable: '#/components/schemas/FeatureCollectionIterable'\n              FeatureCollectionModification: '#/components/schemas/FeatureCollectionModification'\n          properties:\n            features:\n              type: array\n              description: Features included in the collection.\n              items:\n                $ref: '#/components/schemas/Feature'\n          example:\n            type: FeatureCollection\n            features:\n              - type: Feature\n                id: BfiimUxHjj\n                geometry:\n                  type: Point\n                  coordinates:\n                    - -2.960847\n                    - 53.430828\n                properties:\n                  name: Anfield\n                  '@ns:com:here:xyz':\n                    createdAt: 1517504700726\n                    updatedAt: 1517504700726\n                    tags:\n                      - football\n                      - stadium\n                  amenity: Football Stadium\n                  capacity: 54074\n                  description: Home of Liverpool Football Club\n    FeatureCollectionIterable:\n      allOf:\n        - $ref: '#/components/schemas/FeatureCollection'\n        - type: object\n          properties:\n            handle:\n              type: string\n              description: The handle of the next batch.\n            nextPageToken:\n              type: string\n              description: The nextPageToken of the next batch.\n          example:\n            type: FeatureCollection\n            handle: 1000\n            nextPageToken: 1000\n            features:\n              - type: Feature\n                id: BfiimUxHjj\n                geometry:\n                  type: Point\n                  coordinates:\n                    - -2.960847\n                    - 53.430828\n                properties:\n                  name: Anfield\n                  '@ns:com:here:xyz':\n                    createdAt: 1517504700726\n                    updatedAt: 1517504700726\n                    tags:\n                      - football\n                      - stadium\n                  amenity: Football Stadium\n                  capacity: 54074\n                  description: Home of Liverpool Football Club\n    FeatureCollectionModification:\n      allOf:\n        - $ref: '#/components/schemas/FeatureCollection'\n        - type: object\n          properties:\n            inserted:\n              type: array\n              description: List of inserted feature IDs.\n              items:\n                type: string\n            updated:\n              type: array\n              description: List of updated features IDs.\n              items:\n                type: string\n            deleted:\n              type: array\n              description: List of deleted features IDs.\n              items:\n                type: string\n          example:\n            type: FeatureCollection\n            etag: b9be03f253c53c23\n            inserted:\n              - BfiimUxHjj\n            updated:\n              - cuiImUxOjj\n            features:\n              - type: Feature\n                id: BfiimUxHjj\n                geometry:\n                  type: Point\n                  coordinates:\n                    - -2.960847\n                    - 53.430828\n                properties:\n                  name: Anfield\n                  '@ns:com:here:xyz':\n                    createdAt: 1517504700726\n                    updatedAt: 1517504700726\n                    space: 0FzlE2wX\n                    tags:\n                      - football\n                      - stadium\n                  amenity: Football Stadium\n                  capacity: 54074\n                  description: Home of Liverpool Football Club\n    FeatureModification:\n      type: object\n      description: |\n        A FeatureModification object containing GeoJSON FeatureCollections\n        (see [RFC-7946](https://tools.ietf.org/html/rfc7946)) or (in case if deletions) a list of\n        feature IDs.\n      required:\n        - type\n      properties:\n        type:\n          type: string\n        featureData:\n          $ref: '#/components/schemas/FeatureCollection'\n        featureIds:\n          type: array\n          description: A list of feature IDs (strings)\n          items:\n            type: string\n        onFeatureNotExists:\n          $ref: '#/components/schemas/OnFeatureNotExists'\n        onFeatureExists:\n          $ref: '#/components/schemas/OnFeatureExists'\n        onMergeConflict:\n          $ref: '#/components/schemas/OnMergeConflict'\n      example:\n        type: FeatureModification\n        featureData:\n          type: FeatureCollection\n          features:\n            - type: Feature\n              id: BfiimUxHjj\n              geometry:\n                type: Point\n                coordinates:\n                  - -2.960847\n                  - 53.430828\n              properties:\n                name: Anfield\n                '@ns:com:here:xyz':\n                  tags:\n                    - football\n                    - stadium\n                amenity: Football Stadium\n                capacity: 54074\n                description: Home of Liverpool Football Club\n    FeatureModificationList:\n      type: object\n      description: |\n        An object describing modifications of features. It contains feature data being provided as\n        GeoJSON FeatureCollections (see [RFC-7946](https://tools.ietf.org/html/rfc7946))\n        or (in case if deletions) a list of feature IDs.\n      externalDocs:\n        url: 'https://tools.ietf.org/html/rfc7946'\n      required:\n        - type\n      properties:\n        type:\n          type: string\n        modifications:\n          type: array\n          description: A list of FeatureModification objects\n          items:\n            $ref: '#/components/schemas/FeatureModification'\n      example:\n        type: FeatureModificationList\n        modifications:\n          - type: FeatureModification\n            featureData:\n              type: FeatureCollection\n              features:\n                - type: Feature\n                  id: BfiimUxHjj\n                  geometry:\n                    type: Point\n                    coordinates:\n                      - -2.960847\n                      - 53.430828\n                  properties:\n                    name: Anfield\n                    '@ns:com:here:xyz':\n                      tags:\n                        - football\n                        - stadium\n                    amenity: Football Stadium\n                    capacity: 54074\n                    description: Home of Liverpool Football Club\n    GeoJSON:\n      type: object\n      description: The base type for all possible GeoJSON objects.\n      required:\n        - type\n      properties:\n        type:\n          type: string\n        bbox:\n          type: array\n          description: Describes the coordinate range of the GeoJSON object.\n          items:\n            type: number\n      discriminator:\n        propertyName: type\n        mapping:\n          Feature: '#/components/schemas/Feature'\n          FeatureCollection: '#/components/schemas/FeatureCollection'\n          Geometry: '#/components/schemas/Geometry'\n      additionalProperties: true\n    Geometry:\n      allOf:\n        - $ref: '#/components/schemas/GeoJSON'\n        - type: object\n          description: A Geometry object represents points, curves, and surfaces in coordinate space.\n          discriminator:\n            propertyName: type\n            mapping:\n              MultiPoint: '#/components/schemas/MultiPoint'\n              MultiLineString: '#/components/schemas/MultiLineString'\n              LineString: '#/components/schemas/LineString'\n              MultiPolygon: '#/components/schemas/MultiPolygon'\n              Point: '#/components/schemas/Point'\n              Polygon: '#/components/schemas/Polygon'\n    HistoryStatisticsResponse:\n      description: The response returned to when counting features in a history.\n      properties:\n        type:\n          type: string\n        count:\n          type: object\n          readOnly: true\n          properties:\n            value:\n              type: integer\n              description: The amount of features being in the history.\n              format: int64\n              minimum: 0\n            estimated:\n              $ref: '#/components/schemas/Estimated'\n        byteSize:\n          deprecated: true\n          type: object\n          readOnly: true\n          properties:\n            value:\n              type: integer\n              description: \u003e-\n                The amount of bytes that are allocated in the storage for\n                this history.\n              format: int64\n              minimum: 0\n            estimated:\n              $ref: '#/components/schemas/Estimated'\n        dataSize:\n          type: object\n          readOnly: true\n          properties:\n            value:\n              type: integer\n              description: \u003e-\n                The amount of bytes that are allocated in the storage for\n                this history.\n              format: int64\n              minimum: 0\n            estimated:\n              $ref: '#/components/schemas/Estimated'\n        maxVersion:\n          type: object\n          readOnly: true\n          properties:\n            value:\n              type: integer\n              description: \u003e-\n                The last version which got written into the history.\n              format: int32\n              minimum: 0\n            estimated:\n              $ref: '#/components/schemas/Estimated'\n      example:\n        type: HistoryStatisticsResponse\n        count:\n          value: 29208\n          estimated: true\n        byteSize:\n          value: 108364\n          estimated: true\n        dataSize:\n          value: 108364\n          estimated: true\n        maxVersion:\n          value: 112\n          estimated: true\n    Http:\n      allOf:\n        - $ref: '#/components/schemas/RemoteFunctionConfig'\n        - type: object\n          properties:\n            url:\n              description: \u003e-\n                The URL of the endpoint to POST events to.\n              type: string\n    LineString:\n      allOf:\n        - $ref: '#/components/schemas/Geometry'\n        - type: object\n          description: A LineString geometry.\n          properties:\n            coordinates:\n              type: array\n              items:\n                type: array\n                items:\n                  type: number\n                maxItems: 3\n                minItems: 2\n              minItems: 2\n    MultiLineString:\n      allOf:\n        - $ref: '#/components/schemas/Geometry'\n        - type: object\n          description: A MultiLineString geometry.\n          properties:\n            coordinates:\n              type: array\n              items:\n                type: array\n                items:\n                  type: array\n                  items:\n                    type: number\n                  maxItems: 3\n                  minItems: 2\n                minItems: 2\n    MultiPoint:\n      allOf:\n        - $ref: '#/components/schemas/Geometry'\n        - type: object\n          description: A MultiPoint geometry.\n          properties:\n            coordinates:\n              type: array\n              items:\n                type: array\n                items:\n                  type: number\n                maxItems: 3\n                minItems: 2\n    MultiPolygon:\n      allOf:\n        - $ref: '#/components/schemas/Geometry'\n        - type: object\n          description: A MultiPolygon geometry.\n          properties:\n            coordinates:\n              type: array\n              items:\n                type: array\n                items:\n                  type: array\n                  items:\n                    type: array\n                    items:\n                      type: number\n                    maxItems: 3\n                    minItems: 2\n                  minItems: 4\n    Namespace:\n      type: object\n      description: The XYZ namespace.\n      properties:\n        space:\n          description: The space ID.\n          example: 0FzlE2wX\n          readOnly: true\n          type: string\n        tags:\n          description: The tags for this objects.\n          items:\n            type: string\n          type: array\n        createdAt:\n          description: \u003e-\n            The UNIX Epoch time of when this feature has been created (in\n            milliseconds since 01.01.1970).\n          example: 1234567890123\n          format: int64\n          readOnly: true\n          type: integer\n        updatedAt:\n          description: \u003e-\n            The UNIX Epoch time of when this feature has been last updated (in\n            milliseconds since 01.01.1970).\n          example: 1234567890123\n          format: int64\n          readOnly: true\n          type: integer\n    OnFeatureExists:\n      type: string\n      enum:\n        - patch\n        - replace\n        - merge\n        - delete\n        - retain\n        - error\n      default: patch\n    OnFeatureNotExists:\n      type: string\n      enum:\n        - retain\n        - error\n        - create\n      default: create\n    OnMergeConflict:\n      type: string\n      enum:\n        - error\n        - retain\n        - replace\n      default: error\n    Point:\n      allOf:\n        - $ref: '#/components/schemas/Geometry'\n        - type: object\n          description: A Point geometry.\n          properties:\n            coordinates:\n              type: array\n              items:\n                type: number\n              maxItems: 3\n              minItems: 2\n    Polygon:\n      allOf:\n        - $ref: '#/components/schemas/Geometry'\n        - type: object\n          description: A Polygon geometry.\n          properties:\n            coordinates:\n              type: array\n              items:\n                type: array\n                items:\n                  type: array\n                  items:\n                    type: number\n                  maxItems: 3\n                  minItems: 2\n                minItems: 4\n    RemoteFunctionConfig:\n      type: object\n      description: A connector declaration.\n      discriminator:\n        propertyName: type\n      required:\n        - type\n      properties:\n        type:\n          description: \"The remote function's type.\"\n          type: \"string\"\n          enum:\n            - \"Embedded\"\n            - \"AWSLambda\"\n            - \"Http\"\n        id:\n          description: \u003e-\n            The ID of this config.\n          example: my-id\n          type: string\n        warmUp:\n          description: \u003e-\n            The number of containers to keep warmed up by sending health check requests in parallel to the remote function.\n            This function can be disabled by setting warmUp to zero.\n          type: integer\n          format: int64\n    Space:\n      type: object\n      description: A data holder for features which points to a persistent storage.\n      properties:\n        id:\n          description: \u003e-\n            The unique identifier of the space which consists of an (optional)\n            prefix and a base part (prefix-base).\n          example: 0FzlE2wX\n          type: string\n        title:\n          description: The space title.\n          example: My Demo Space\n          type: string\n        description:\n          description: The space description in markdown format.\n          example: Description as markdown.\n          type: string\n        owner:\n          description: The identifier of the owner of this space, most likely the HERE account ID.\n          type: string\n        shared:\n          description: \u003e\n            If set to __true__, every authenticated user can read the features\n            in the space.\n\n            When publishing a space it's also recommended to set the fields\n            __copyright__ \u0026 __license__.\n          type: boolean\n        readOnly:\n          description: A flag indicating whether the space allows write operations (false) or not (true).\n          type: boolean\n        copyright:\n          items:\n            $ref: '#/components/schemas/Copyright'\n          type: array\n        license:\n          description: Information about the license bound to the data within the space.\n          enum:\n            - AFL-3.0\n            - Apache-2.0\n            - Artistic-2.0\n            - BSL-1.0\n            - BSD-2-Clause\n            - BSD-3-Clause\n            - BSD-3-Clause-Clear\n            - CC0-1.0\n            - CC-BY-4.0\n            - CC-BY-SA-4.0\n            - WTFPL\n            - ECL-1.0\n            - ECL-2.0\n            - EUPL-1.1\n            - AGPL-3.0-only\n            - GPL-2.0-only\n            - GPL-3.0-only\n            - LGPL-2.1-only\n            - LGPL-3.0-only\n            - ISC\n            - LPPL-1.3c\n            - MS-PL\n            - MIT\n            - MPL-2.0\n            - OSL-3.0\n            - PostgreSQL\n            - OFL-1.1\n            - NCSA\n            - Unlicense\n            - Zlib\n            - ODbL-1.0\n          type: string\n        storage:\n          $ref: '#/components/schemas/SpaceStorage'\n        client:\n          $ref: '#/components/schemas/SpaceClient'\n        enableUUID:\n          default: false\n          description: \u003e-\n            Whether the uuid should be added to the response or not.\n          example: true\n          type: boolean\n        enableHistory:\n          default: false\n          description: \u003e-\n            Whether the feature's modification history should be saved.\n          example: true\n          type: boolean\n        maxVersionCount:\n          default: 0\n          description: \u003e-\n            Used to control how many versions should be kept in the history. -1 means infinite.\n          example: -1\n          type: integer\n        packages:\n          description: List of packages that this space belongs to.\n          items:\n            type: string\n          type: array\n        cid:\n          description: An additional identifier specifying a context of the owner.\n          type: string\n        tags:\n          description: The tags for this objects.\n          items:\n            type: string\n          type: array\n        createdAt:\n          default: 1538352000000\n          description: \u003e-\n            The UNIX Epoch time of when this space has been created (in\n            milliseconds since 01.01.1970). Defaults to October 1st, 2018.\n          example: 1538352000000\n          format: int64\n          readOnly: true\n          type: integer\n        updatedAt:\n          default: 1538352000000\n          description: \u003e-\n            The UNIX Epoch time of when this space has been last updated (in\n            milliseconds since 01.01.1970). Defaults to October 1st, 2018.\n          example: 1538352000000\n          format: int64\n          readOnly: true\n          type: integer\n        cacheTTL:\n          default: -1\n          description: \u003e-\n            The maximum amount of seconds of how long to hold objects of this Space in a cache.\n          type: integer\n        contentUpdatedAt:\n          default: 1538352000000\n          description: \u003e-\n            The UNIX Epoch time of when the content of this space has been last updated (in\n            milliseconds since 01.01.1970). Defaults to October 1st, 2018.\n          example: 1538352000000\n          format: int64\n          readOnly: true\n          type: integer\n        searchableProperties:\n          $ref: '#/components/schemas/SearchableProperties'\n        volatilityAtLastContentUpdate:\n          description: \u003e-\n            The calculated volatility at the last content update time.\n          type: number\n          format: double\n          readOnly: true\n        volatility:\n          description: \u003e-\n            An indicator, if the data in the space is edited often ( value tends to 1 ) or static ( value tends to 0 ).\n          type: number\n          format: double\n          readOnly: true\n        rights:\n          description: \u003e-\n            The list of rights the current user has when accessing the space. This property\n            is only shown when listing spaces with the option _includeRights=true_\n          type: array\n          items:\n            type: string\n          readOnly: true\n        autoCacheProfile:\n          allOf:\n            - $ref: '#/components/schemas/CacheProfile'\n          readOnly: true\n        listeners:\n          description: \u003e-\n            A list of connector configurations in which Data Hub sends events asynchronously.\n          type: array\n          items:\n            $ref: '#/components/schemas/Connector'\n        processors:\n          description: \u003e-\n            A list of connector configurations in which Data Hub sends events synchronously.\n          type: array\n          items:\n            $ref: '#/components/schemas/Connector'\n      example:\n        title: My Demo Space\n        description: Description as markdown\n    SpaceClient:\n      type: object\n      additionalProperties:\n        type: object\n      description: \u003e-\n        An arbitrary client configuration with hints or settings for the client,\n        for example rendering instructions.\n      example:\n        key: value\n    SearchableProperties:\n      description: \u003e-\n        A map defined by the user that indicates, which of the feature's properties to be searchable.\n        The key is the name of the property (nested properties can be specified using the\n        dot-notation e.g.: some.nested.property) and the value is a boolean telling whether the\n        property should be searchable or not.\n        Setting the value to `false` the property won't be searchable at all. (Even if the  property\n        was chosen to be searchable by the automated property-search algorithm before). Optional it is\n        possible to define the datatype (object,array,string,number,boolean) of the property\n        eg.: some.nested.property::array. If the datatype is not given, an attempt is made to determine\n        it automatically.\n      type: object\n      additionalProperties:\n        type: boolean\n    SpaceStorage:\n      type: object\n      description: \u003e-\n        The configuration of the space storage provider to be contacted by the\n        space API.\n      properties:\n        id:\n          description: The unique identifier of the connector to contact.\n          example: psql\n          type: string\n        params:\n          $ref: '#/components/schemas/SpaceStorageParams'\n    SpaceStorageParams:\n      type: object\n      description: \u003e-\n        The storage provider configuration, which contains optional parameters\n        to be forwarded to the storage provider.\n    Statistics:\n      type: object\n      description: The statistical information about the space.\n      properties:\n        count:\n          type: object\n          description: The amount of features stored in the space.\n          properties:\n            value:\n              type: integer\n            estimated:\n              $ref: '#/components/schemas/Estimated'\n        byteSize:\n          deprecated: true\n          type: object\n          description: The amount of bytes that are allocated in the storage for this space.\n          properties:\n            value:\n              type: integer\n            estimated:\n              $ref: '#/components/schemas/Estimated'\n        dataSize:\n          type: object\n          description: The amount of bytes that are allocated in the storage for this space.\n          properties:\n            value:\n              type: integer\n            estimated:\n              $ref: '#/components/schemas/Estimated'\n        bbox:\n          type: object\n          description: The most outer bounding box around all features being within the space.\n          properties:\n            value:\n              type: array\n              items:\n                type: number\n            estimated:\n              $ref: '#/components/schemas/Estimated'\n        geometryTypes:\n          type: object\n          description: The types of geometries part of the space.\n          properties:\n            value:\n              type: array\n              items:\n                type: string\n            estimated:\n              $ref: '#/components/schemas/Estimated'\n        properties:\n          type: object\n          description: The properties of the features of the space.\n          properties:\n            value:\n              type: array\n              items:\n                type: object\n                properties:\n                  key:\n                    type: string\n                    description: Property key of the feature.\n                    example: Route\n                  count:\n                    type: number\n                    description: Count of the features with the property.\n                    example: 1202\n                  searchable:\n                    type: boolean\n                    description: Specifies if the property is searchable.\n                    example: false\n            estimated:\n              $ref: '#/components/schemas/Estimated'\n            searchable:\n              type: string\n              description: \u003e-\n                Specifies the scope of searchability of the properties. One of NONE, PARTIAL, ALL.\n              example: PARTIAL\n        tags:\n          type: object\n          description: Tags of the space with their count.\n          properties:\n            value:\n              type: array\n              items:\n                type: object\n                properties:\n                  key:\n                    type: string\n                    description: Tag name\n                  count:\n                    type: number\n                    description: How many features with this tag\n            estimated:\n              $ref: '#/components/schemas/Estimated'\n        searchable:\n          type: string\n          description: \u003e-\n            Specifies the scope of searchability of the properties. One of NONE, PARTIAL, ALL.\n          example: PARTIAL\n      example:\n        type: StatisticsResponse\n        count:\n          value: 29208\n          estimated: true\n        byteSize:\n          value: 108364\n          estimated: true\n        dataSize:\n          value: 108364\n          estimated: true\n        bbox:\n          value:\n            - -10\n            - -10\n            - 10\n            - 10\n          estimated: true\n        geometryTypes:\n          value:\n            - Point\n          estimated: true\n        properties:\n          value:\n            - key: Route\n              count: 29208\n              searchable: true\n            - key: Route Type\n              count: 29208\n              searchable: true\n          estimated: true\n          searchable: PARTIAL\n        tags:\n          value:\n            - key: PuneBusStop\n              count: 29208\n        etag: 072d3ec0f881b4e7\n    StorageCapabilities:\n      type: object\n      description: Arbitrary parameters to be provided to the remote function with the event.\n      properties:\n        preserializedResponseSupport:\n          description: \u003e-\n            If the lambda supports pre-serialization.\n          type: boolean\n        relocationSupport:\n          description: \u003e-\n            If the lambda supports relocation events.\n          type: boolean\n        maxUncompressedSize:\n          description: \u003e-\n            The maximum size of the payload, which the connector accepts as uncompressed data.\n          format: int64\n          default: 2147483647\n          type: integer\n        maxPayloadSize:\n          description: \u003e-\n            The maximum size of the event, which this connector can directly receive.\n          format: int64\n          default: 6291456\n          type: integer\n        propertySearch:\n          description: \u003e-\n            Whether searching by properties is supported. (Only applicable for storage connectors)\n          default: false\n          type: boolean\n        searchablePropertiesConfiguration:\n          description: \u003e-\n            Whether it's supported to configure the searchableProperties of spaces. (Only applicable for storage connectors)\n          default: false\n          type: boolean\n        enableAutoCache:\n          description: \u003e-\n            Whether automatic caching configuration for spaces is supported.\n          default: false\n          type: boolean\n        clusteringTypes:\n          description: \u003e-\n            A list of supported clustering types / algorithms. (\"hexbin\", \"quad\", \"quadbin\") (Only applicable for storage connectors)\n          items:\n            type: string\n          type: array\n"
		}
	},
	"Error": "parse: paths: /spaces/{spaceId}/tile/{type}/{tileId}: get: getFeaturesByTile: responses: 513: unknown status code: 513"
}