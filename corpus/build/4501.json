{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "APIs/art19.com/1.0.0/openapi.yaml",
			"content": "openapi: 3.0.0\nservers:\n  - url: https://art19.com\ninfo:\n  contact:\n    email: support@art19.com\n    name: ART19 Engineering Team\n    x-twitter: art19co\n  description: |\n    The ART19 Content API conforms to the [JSON:API specification](http://jsonapi.org).\n\n    API requests **MUST** use the HTTP Accept header:\n\n    `Accept: application/vnd.api+json`\n\n    API requests **MUST** be authenticated using the HTTP Authorization header:\n\n    `Authorization: Token token=\"your-token\", credential=\"your-credential\"`\n\n    ## General Notes\n\n    Some query parameters use unencoded [ and ] characters simply for readability. Defaults, examples, and\n    possible values are additionally rendered in double quotes for readability. In practice, query parameters should\n    not have quotes around the values (e.g., `foo=bar` is valid, not `foo=\"bar\"`), and both query parameter keys\n    and values must be percent-encoded, per the requirements in [RFC 3986 § 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).\n\n    ## Rate Limiting\n\n    In order to provide a fair distribution of available resources, all API calls are subject to rate limits.\n    If you exceed the number of API calls per minute granted to your credential, a `429 Too Many Requests`\n    error response will be returned.\n\n    In that case, a `Retry-After` header MAY be included in the response, describing the number of seconds\n    after which a request can be retried.\n\n    If you run into a high number of 429 errors, please reach out to ART19 Support to adjust your rate limit.\n\n    ### Example\n\n    In the following example the request can be retried after waiting for 21 seconds:\n\n        HTTP/1.1 429 Too Many Requests\n        Content-Type: text/html\n        Retry-After: 21\n\n    ## Pagination\n\n    Requests to collection endpoints **SHOULD** provide pagination parameters.\n    Some endpoints **REQUIRE** pagination parameters to be provided.\n    Whenever pagination is provided, it **MUST** be valid.\n    Failing to provide pagination when it is required or providing wrong or incomplete pagination\n    always results in a `400 Bad Request` error response.\n\n    The page numbering starts with `1` and the maximum page size (if not otherwise documented\n    on an endpoint) is `100`. Pagination **MUST NOT** be specified if requesting a list of IDs (using an `ids[]` parameter).\n\n    Providing invalid values for page number or page size, as well as providing only a page number or only a page size,\n    is considered an error. Pagination is provided like this:\n\n    `page[number]=1\u0026page[size]=25`\n\n    Responses conform to the [JSON:API specification's pagination section](https://jsonapi.org/format/#fetching-pagination)\n    by including pagination links. Your requested page size will be carried into the pagination links.\n\n    ## Sorting\n\n    Requests to collection endpoints usually accept a `sort` parameter. Please refer to the\n    [JSON:API Specification's sorting section](https://jsonapi.org/format/#fetching-sorting) for further details.\n\n    ## Relationship Linking\n\n    Currently, resources return all of their relationships, in no particular order, pursuant to how relationships\n    should be returned [according to the JSON:API specification](https://jsonapi.org/format/#document-resource-object-relationships). Consumers of this API\n    **MUST NOT** make assumptions about the order of these collections. Even though this data is not currently paginated, consumers **MUST** support\n    paginating relationships per the JSON:API specification if this data is important for their application.\n  termsOfService: https://art19.com/business-terms\n  title: ART19 Content API Documentation\n  version: 1.0.0\n  x-apisguru-categories:\n    - media\n  x-logo:\n    url: https://twitter.com/art19co/profile_image?size=original\n  x-origin:\n    - format: openapi\n      url: https://art19.com/swagger_json/external/content.json\n      version: \"3.0\"\n  x-providerName: art19.com\nsecurity:\n  - api_key: []\npaths:\n  /classification_inclusions:\n    get:\n      description: |\n        Classification Inclusions connect classifications with entities like series, episodes, or campaigns, amongst others.\n\n        In order to retrieve a set of classification inclusions, at least one of the following filter parameters must\n        be provided. Failing to do so renders a `400 Bad Request` response.\n\n        - `ids[]`\n        - `classified_id` and `classified_type`\n        - `classified_id` and `classification_type`\n        - `classification_id` and `classified_type`\n      parameters:\n        - description: |\n            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.\n            The brackets *MUST* be percent-encoded, per the requirements in\n            [RFC 3986 § 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).\n          explode: true\n          in: query\n          name: ids[]\n          required: false\n          schema:\n            items:\n              format: uuid\n              type: string\n            type: array\n            uniqueItems: true\n        - description: |+\n            Select which page number to receive results for. Pages are numbered starting at 1.\n\n          in: query\n          name: page[number]\n          schema:\n            minimum: 1\n            type: integer\n        - description: |+\n            Indicate how many records to return per page. The maximum is 100.\n\n          in: query\n          name: page[size]\n          schema:\n            maximum: 100\n            minimum: 1\n            type: integer\n        - description: Limit the result to classification inclusions linked to a classification with this ID.\n          example: a90609c0-9f0c-48fd-8a41-83eb8414bedb\n          in: query\n          name: classification_id\n          schema:\n            format: uuid\n            type: string\n        - description: |\n            The type of classification that the classification inclusions are linked to.\n            Depending on the permissions of your credential, only a subset of these types are usable.\n          in: query\n          name: classification_type\n          schema:\n            enum:\n              - AlternateFeedType\n              - Genre\n              - Industry\n              - Language\n              - MediaRating\n            type: string\n        - description: |\n            Limit the result to classification inclusions linked to a resource with this ID.\n            You will have to use this filter together with either `classified_type` or `classification_type`.\n          example: fee1976e-f1bc-48a9-9ee8-58800f4d3462\n          in: query\n          name: classified_id\n          schema:\n            format: uuid\n            type: string\n        - description: Limit the result to classification inclusions linked to this type of entity.\n          in: query\n          name: classified_type\n          schema:\n            enum:\n              - Series\n              - Season\n              - Episode\n            type: string\n        - description: |\n            Limit the result to classification inclusions linked to a classification containing\n            the parameter value disregarding case.\n          in: query\n          name: q\n          schema:\n            type: string\n        - description: |\n            Specify how to sort the result. Please refer to either the top section or the\n            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.\n          explode: false\n          in: query\n          name: sort\n          schema:\n            default: created_at\n            items:\n              enum:\n                - classification_value\n                - created_at\n                - position\n              type: string\n            type: array\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/ClassificationInclusion\"\n                    type: array\n                  links:\n                    $ref: \"#/components/schemas/Links\"\n                type: object\n          description: Success\n        \"400\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  errors:\n                    description: |\n                      An error object describing the problem. Please check out the\n                      [JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\n                      description of the returned object.\n                    items:\n                      properties:\n                        code:\n                          description: An application-specific error code, expressed as a string value\n                          type: string\n                        detail:\n                          description: |\n                            A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n                          example: Required query parameter “series_id” is missing\n                          type: string\n                        source:\n                          description: |\n                            An object containing references to the source of the error, optionally including any of the following members.\n                          nullable: true\n                          properties:\n                            parameter:\n                              description: A string indicating which URI query parameter caused the error.\n                              example: series_id\n                              type: string\n                            pointer:\n                              description: |\n                                A JSON Pointer [RFC6901](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute).\n                              example: /data/attributes/name\n                              type: string\n                          type: object\n                        status:\n                          description: \"The HTTP status code applicable to this problem, expressed as a string value: 400\"\n                          example: \"400\"\n                          type: string\n                        title:\n                          description: |\n                            A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\n                            problem, except for purposes of localization.\n                          example: Bad Request\n                          type: string\n                      type: object\n                    type: array\n                type: object\n          description: |\n            Bad Request\n\n            Parameters requiring a specific format must adhere to that format.\n            Pagination must have a positive page number and a page size no larger than 100. At least one filter parameter is required.\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get ClassificationInclusion records\n      tags:\n        - ClassificationInclusion\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/classification_inclusions\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"5f626dd3-375a-4c66-b04f-8f39858f4e6e\"'\n              },\n              params: {\n                # add filters if desired\n                page: { number: 1, size: 25 }\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/classification_inclusions?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"6cd910f5-84d2-4a80-b184-b3d8151b3714\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // The API endpoint to request data from\n              $url = array('https://art19.com/classification_inclusions');\n\n              // Provide extra parameters like filters or pagination to the request\n              $url[] = http_build_query(array(\n                'page' =\u003e array('number' =\u003e 1, 'size' =\u003e 25)\n              ));\n\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, implode('?', $url));\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"d134c684-9c4d-4673-8a0c-2235fe565e4a\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/classification_inclusions?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"fb037d04-19f3-4901-b31e-f5af71a3a8cc\"' \\\n              --compressed\n  \"/classification_inclusions/{id}\":\n    get:\n      parameters:\n        - description: The ID of the classification inclusion resource to load.\n          example: 8bb43d87-b1d2-4d35-99ee-dfceba6d8902\n          in: path\n          name: id\n          required: true\n          schema:\n            format: uuid\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/ClassificationInclusion\"\n                  links:\n                    $ref: \"#/components/schemas/ResourceLink\"\n                type: object\n          description: Success\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a specific classification inclusion\n      tags:\n        - ClassificationInclusion\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/classification_inclusions/2bb5fa72-b91b-4230-9edc-aa16caa9a618\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"f018e032-aa1b-411c-9767-6a33d1ea7a22\"'\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/classification_inclusions/2bb5fa72-b91b-4230-9edc-aa16caa9a618', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"224d375b-c58e-4172-866a-b2f8d3b51a00\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, 'https://art19.com/classification_inclusions/2bb5fa72-b91b-4230-9edc-aa16caa9a618');\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"e6b25279-c993-4d6c-b010-b504dcf5e040\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/classification_inclusions/2bb5fa72-b91b-4230-9edc-aa16caa9a618' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"37d0b5be-25a2-430a-8443-9d2f90ae73d4\"' \\\n              --compressed\n  /classifications:\n    get:\n      parameters:\n        - description: |\n            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.\n            The brackets *MUST* be percent-encoded, per the requirements in\n            [RFC 3986 § 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).\n          explode: true\n          in: query\n          name: ids[]\n          required: false\n          schema:\n            items:\n              format: uuid\n              type: string\n            type: array\n            uniqueItems: true\n        - description: |+\n            Select which page number to receive results for. Pages are numbered starting at 1.\n\n          in: query\n          name: page[number]\n          schema:\n            minimum: 1\n            type: integer\n        - description: |+\n            Indicate how many records to return per page. The maximum is 100.\n\n          in: query\n          name: page[size]\n          schema:\n            maximum: 100\n            minimum: 1\n            type: integer\n        - description: |\n            Limit the result to classifications of this type. The possible values for types\n            depends on the privileges of the provided credential.\n          example: Genre\n          in: query\n          name: type\n          schema:\n            enum:\n              - AlternateFeedType\n              - Genre\n              - Industry\n              - Language\n              - MediaRating\n            type: string\n        - description: |\n            Limit the result to classifications with a value containing the parameter value\n            disregarding case.\n          in: query\n          name: q\n          schema:\n            type: string\n        - description: |\n            If this parameter is provided and not empty, limit the result to classifications\n            of type `Geography` representing countries. The credential must have at least one\n            privilege with a network, series, or advertiser profile.\n          example: \"true\"\n          in: query\n          name: is_country\n          schema:\n            type: string\n        - description: |\n            Specify how to sort the result. Please refer to either the top section or the\n            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.\n          explode: false\n          in: query\n          name: sort\n          schema:\n            default: value\n            items:\n              enum:\n                - created_at\n                - updated_at\n                - value\n              type: string\n            type: array\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/Classification\"\n                    type: array\n                  links:\n                    $ref: \"#/components/schemas/Links\"\n                type: object\n          description: Success\n        \"400\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  errors:\n                    description: |\n                      An error object describing the problem. Please check out the\n                      [JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\n                      description of the returned object.\n                    items:\n                      properties:\n                        code:\n                          description: An application-specific error code, expressed as a string value\n                          type: string\n                        detail:\n                          description: |\n                            A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n                          example: Required query parameter “series_id” is missing\n                          type: string\n                        source:\n                          description: |\n                            An object containing references to the source of the error, optionally including any of the following members.\n                          nullable: true\n                          properties:\n                            parameter:\n                              description: A string indicating which URI query parameter caused the error.\n                              example: series_id\n                              type: string\n                            pointer:\n                              description: |\n                                A JSON Pointer [RFC6901](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute).\n                              example: /data/attributes/name\n                              type: string\n                          type: object\n                        status:\n                          description: \"The HTTP status code applicable to this problem, expressed as a string value: 400\"\n                          example: \"400\"\n                          type: string\n                        title:\n                          description: |\n                            A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\n                            problem, except for purposes of localization.\n                          example: Bad Request\n                          type: string\n                      type: object\n                    type: array\n                type: object\n          description: |\n            Bad Request\n\n            Parameters requiring a specific format must adhere to that format.\n            Pagination must have a positive page number and a page size no larger than 100. Filtering by type for AudienceSegment and AudienceTag is no longer supported.\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a list of classifications\n      tags:\n        - Classification\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/classifications\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"e9048b4e-fb16-4322-9d15-5e41d58a50d8\"'\n              },\n              params: {\n                # add filters if desired\n                page: { number: 1, size: 25 }\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/classifications?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"3ab0d091-d1f4-4b96-b875-0c9acda2f7c4\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // The API endpoint to request data from\n              $url = array('https://art19.com/classifications');\n\n              // Provide extra parameters like filters or pagination to the request\n              $url[] = http_build_query(array(\n                'page' =\u003e array('number' =\u003e 1, 'size' =\u003e 25)\n              ));\n\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, implode('?', $url));\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"a40beacc-fd88-4ad6-81da-a712da343c06\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/classifications?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"3ecd0184-8472-45fd-acdd-9049e43e293a\"' \\\n              --compressed\n  \"/classifications/{id}\":\n    get:\n      parameters:\n        - description: The ID of the classification resource to load.\n          example: e3303428-d3ab-4024-b37b-2c77ae1a6d0e\n          in: path\n          name: id\n          required: true\n          schema:\n            format: uuid\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/Classification\"\n                  links:\n                    $ref: \"#/components/schemas/ResourceLink\"\n                type: object\n          description: Success\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a specific classification\n      tags:\n        - Classification\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/classifications/d085ad89-148a-4623-bd16-4392ba25d7ed\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"82c1aa07-6de0-4f82-9568-b3d4baed6cba\"'\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/classifications/d085ad89-148a-4623-bd16-4392ba25d7ed', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"4900721d-bab2-46ed-abe1-7674093755a2\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, 'https://art19.com/classifications/d085ad89-148a-4623-bd16-4392ba25d7ed');\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"569552d1-7f14-41fc-b812-6066168cca5b\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/classifications/d085ad89-148a-4623-bd16-4392ba25d7ed' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"ad83c373-37b7-4fbd-96e9-2a465d5dcd57\"' \\\n              --compressed\n  /credits:\n    get:\n      parameters:\n        - description: |\n            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.\n            The brackets *MUST* be percent-encoded, per the requirements in\n            [RFC 3986 § 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).\n          explode: true\n          in: query\n          name: ids[]\n          required: false\n          schema:\n            items:\n              format: uuid\n              type: string\n            type: array\n            uniqueItems: true\n        - description: |+\n            Select which page number to receive results for. Pages are numbered starting at 1.\n\n          in: query\n          name: page[number]\n          schema:\n            minimum: 1\n            type: integer\n        - description: |+\n            Indicate how many records to return per page. The maximum is 100.\n\n          in: query\n          name: page[size]\n          schema:\n            maximum: 100\n            minimum: 1\n            type: integer\n        - description: |\n            Limit the result to credits for the entity with this ID only. If the entity is not\n            published, the credential needs to have the right privilege to list the credits for it.\n          example: 76654e16-76ce-4945-92e9-e0a381917853\n          in: query\n          name: creditable_id\n          schema:\n            format: uuid\n            type: string\n        - description: |\n            Limit the result to credits linked to this type of entity only.\n            Depending on the privileges of the credential, this list might be further reduced to\n            only published entities.\n          in: query\n          name: creditable_type\n          schema:\n            enum:\n              - Series\n              - Season\n              - Episode\n            type: string\n        - description: |\n            Specify how to sort the result. Please refer to either the top section or the\n            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.\n          explode: false\n          in: query\n          name: sort\n          schema:\n            default: position\n            items:\n              enum:\n                - created_at\n                - position\n                - updated_at\n              type: string\n            type: array\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/Credit\"\n                    type: array\n                  links:\n                    $ref: \"#/components/schemas/Links\"\n                type: object\n          description: Success\n        \"400\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  errors:\n                    description: |\n                      An error object describing the problem. Please check out the\n                      [JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\n                      description of the returned object.\n                    items:\n                      properties:\n                        code:\n                          description: An application-specific error code, expressed as a string value\n                          type: string\n                        detail:\n                          description: |\n                            A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n                          example: Required query parameter “series_id” is missing\n                          type: string\n                        source:\n                          description: |\n                            An object containing references to the source of the error, optionally including any of the following members.\n                          nullable: true\n                          properties:\n                            parameter:\n                              description: A string indicating which URI query parameter caused the error.\n                              example: series_id\n                              type: string\n                            pointer:\n                              description: |\n                                A JSON Pointer [RFC6901](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute).\n                              example: /data/attributes/name\n                              type: string\n                          type: object\n                        status:\n                          description: \"The HTTP status code applicable to this problem, expressed as a string value: 400\"\n                          example: \"400\"\n                          type: string\n                        title:\n                          description: |\n                            A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\n                            problem, except for purposes of localization.\n                          example: Bad Request\n                          type: string\n                      type: object\n                    type: array\n                type: object\n          description: |\n            Bad Request\n\n            Parameters requiring a specific format must adhere to that format.\n            Pagination must have a positive page number and a page size no larger than 100. \n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a list of credits\n      tags:\n        - Credit\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/credits\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"0e37bf80-6f46-4961-aea0-67b9b037a729\"'\n              },\n              params: {\n                # add filters if desired\n                page: { number: 1, size: 25 }\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/credits?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"603c5985-22a4-42c9-bc64-567149140e1e\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // The API endpoint to request data from\n              $url = array('https://art19.com/credits');\n\n              // Provide extra parameters like filters or pagination to the request\n              $url[] = http_build_query(array(\n                'page' =\u003e array('number' =\u003e 1, 'size' =\u003e 25)\n              ));\n\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, implode('?', $url));\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"4a63ce3a-e74a-4a0c-af39-f4d61ed6561c\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/credits?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"74c598e4-3dd2-4b73-b8e0-bae3da60e320\"' \\\n              --compressed\n  \"/credits/{id}\":\n    get:\n      parameters:\n        - description: The ID of the credit resource to load.\n          example: e82e68f8-0c5e-4363-ab10-ade007ce7d8f\n          in: path\n          name: id\n          required: true\n          schema:\n            format: uuid\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/Credit\"\n                  links:\n                    $ref: \"#/components/schemas/ResourceLink\"\n                type: object\n          description: Success\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a specific credit\n      tags:\n        - Credit\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/credits/2c771d49-fbe2-4af0-9636-8a3185be3411\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"6be16173-f3cf-4544-a80a-9b3c35cc6998\"'\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/credits/2c771d49-fbe2-4af0-9636-8a3185be3411', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"7a554e1e-dae3-4df0-93a9-b3b4ebe45e31\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, 'https://art19.com/credits/2c771d49-fbe2-4af0-9636-8a3185be3411');\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"4fc49bce-6c0b-43a5-ac18-6ae216d9531a\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/credits/2c771d49-fbe2-4af0-9636-8a3185be3411' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"35e5473c-0866-47c2-af70-829de73fd6bb\"' \\\n              --compressed\n  /episodes:\n    get:\n      description: |\n        One initial filter must be provided (`ids`, `series_id`, or `season_id`), otherwise a `400 Bad Request` response\n        will be returned. Additional filters are allowed.\n\n        This API will only return episodes that your credential has permission to access, which may not be exclusive to\n        your account, depending on the filter(s) being used. Be careful to filter the results as needed.\n      parameters:\n        - description: |\n            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.\n            The brackets *MUST* be percent-encoded, per the requirements in\n            [RFC 3986 § 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).\n          explode: true\n          in: query\n          name: ids[]\n          required: false\n          schema:\n            items:\n              format: uuid\n              type: string\n            type: array\n            uniqueItems: true\n        - description: |+\n            Select which page number to receive results for. Pages are numbered starting at 1.\n\n          in: query\n          name: page[number]\n          required: true\n          schema:\n            minimum: 1\n            type: integer\n        - description: |+\n            Indicate how many records to return per page. The maximum is 100.\n\n          in: query\n          name: page[size]\n          required: true\n          schema:\n            maximum: 100\n            minimum: 1\n            type: integer\n        - description: Limit the result to episodes usable with an inventory management calendar for the provided AdDeal ID.\n          example: b97239ef-1776-489a-a1df-5f70a8407148\n          in: query\n          name: included_in_inventory_calendar\n          schema:\n            format: uuid\n            type: string\n        - description: Limit the result to episodes released in this month.\n          in: query\n          name: month\n          schema:\n            type: string\n        - description: |\n            If `true`, limit the result to published episodes only.\n            If `false`, limit the result to _unpublished_ episodes only.\n          in: query\n          name: published\n          schema:\n            type: boolean\n        - description: Limit the result to episodes with a title containing this parameter in a case-insensitive way.\n          in: query\n          name: q\n          schema:\n            type: string\n        - description: Limit the result to episodes released after this timestamp.\n          in: query\n          name: released_after\n          schema:\n            format: date-time\n            type: string\n        - description: Limit the result to episodes released before this timestamp.\n          in: query\n          name: released_before\n          schema:\n            format: date-time\n            type: string\n        - description: |\n            If `true`, limit the result to published and released episodes holding an available media file.\n            If this is `true`, it also changes the default sort order to `-released_at`.\n          in: query\n          name: rss\n          schema:\n            type: boolean\n        - description: Limit result to episodes linked to this season.\n          example: 30e7b568-d099-486b-9a8e-51b7594cab7d\n          in: query\n          name: season_id\n          schema:\n            format: uuid\n            type: string\n        - description: Limit the result to episodes linked to this series.\n          example: d0ceb1ff-b95b-4c1e-a7e5-a36ed7b4d3b7\n          in: query\n          name: series_id\n          schema:\n            format: uuid\n            type: string\n        - description: |\n            Specify how to sort the result. Please refer to either the top section or the\n            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.\n          explode: false\n          in: query\n          name: sort\n          schema:\n            default: sort_title\n            items:\n              enum:\n                - created_at\n                - earliest_released_at\n                - released_at\n                - released_or_created_at\n                - sort_title\n                - title\n                - updated_at\n              type: string\n            type: array\n          style: form\n        - description: Limit the result to episodes released in this year.\n          in: query\n          name: year\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/Episode\"\n                    type: array\n                  links:\n                    $ref: \"#/components/schemas/Links\"\n                type: object\n          description: Success\n        \"400\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  errors:\n                    description: |\n                      An error object describing the problem. Please check out the\n                      [JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\n                      description of the returned object.\n                    items:\n                      properties:\n                        code:\n                          description: An application-specific error code, expressed as a string value\n                          type: string\n                        detail:\n                          description: |\n                            A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n                          example: Required query parameter “series_id” is missing\n                          type: string\n                        source:\n                          description: |\n                            An object containing references to the source of the error, optionally including any of the following members.\n                          nullable: true\n                          properties:\n                            parameter:\n                              description: A string indicating which URI query parameter caused the error.\n                              example: series_id\n                              type: string\n                            pointer:\n                              description: |\n                                A JSON Pointer [RFC6901](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute).\n                              example: /data/attributes/name\n                              type: string\n                          type: object\n                        status:\n                          description: \"The HTTP status code applicable to this problem, expressed as a string value: 400\"\n                          example: \"400\"\n                          type: string\n                        title:\n                          description: |\n                            A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\n                            problem, except for purposes of localization.\n                          example: Bad Request\n                          type: string\n                      type: object\n                    type: array\n                type: object\n          description: |\n            Bad Request\n\n            Parameters requiring a specific format must adhere to that format.\n            Pagination must be present and have a positive page number and a page size no larger than 100. One initial filter must be provided (`ids`, `series_id`, or `season_id`).\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a list of episodes\n      tags:\n        - Episode\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/episodes\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"a0f1f928-f603-4964-bb55-0d29f1fa5d80\"'\n              },\n              params: {\n                # add filters if desired\n                page: { number: 1, size: 25 }\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/episodes?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"1bf407ac-5b90-429d-9886-4fe4e079a9b5\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // The API endpoint to request data from\n              $url = array('https://art19.com/episodes');\n\n              // Provide extra parameters like filters or pagination to the request\n              $url[] = http_build_query(array(\n                'page' =\u003e array('number' =\u003e 1, 'size' =\u003e 25)\n              ));\n\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, implode('?', $url));\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"24afd9b2-b07e-4885-b757-af6b39673cce\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/episodes?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"fc04da24-c1db-4a6a-85ed-e7eaba1bb136\"' \\\n              --compressed\n  \"/episodes/{id}\":\n    get:\n      parameters:\n        - description: The ID of the episode resource to load.\n          example: 3c298747-3c6a-486a-aed2-80eb6beef31b\n          in: path\n          name: id\n          required: true\n          schema:\n            format: uuid\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/Episode\"\n                  links:\n                    $ref: \"#/components/schemas/ResourceLink\"\n                type: object\n          description: Success\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a specific episode\n      tags:\n        - Episode\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/episodes/557321dc-0173-447c-afa4-6648762ef7b1\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"b80edd7f-cb15-4929-9cab-572590682335\"'\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/episodes/557321dc-0173-447c-afa4-6648762ef7b1', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"0b57dab7-aaf1-42ff-8193-505228447dd4\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, 'https://art19.com/episodes/557321dc-0173-447c-afa4-6648762ef7b1');\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"ed7e10ad-093c-4734-b145-7a31a1396bbb\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/episodes/557321dc-0173-447c-afa4-6648762ef7b1' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"a7116706-0d7b-4644-801c-66cec747fb93\"' \\\n              --compressed\n  \"/episodes/{id}/next_sibling\":\n    get:\n      parameters:\n        - description: The ID of the episode to find the one episode released right after it.\n          example: 74716edc-0c77-4638-9001-5f6642b25a4b\n          in: path\n          name: id\n          required: true\n          schema:\n            format: uuid\n            type: string\n        - description: |\n            If `true`, get the next released and published episode with an available media file.\n          in: query\n          name: rss\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/Episode\"\n                  links:\n                    $ref: \"#/components/schemas/ResourceLink\"\n                type: object\n          description: Success\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get the episode released right after the specified one\n      tags:\n        - Episode\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/episodes/0b88d438-0b65-4c5a-b8b4-abe9ad8f14d1/next_sibling\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"703c062e-d9c6-49a1-81b3-574b522e4d85\"'\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/episodes/0b88d438-0b65-4c5a-b8b4-abe9ad8f14d1/next_sibling', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"1757f074-1d58-4eee-bc27-b460f0a50c82\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, 'https://art19.com/episodes/0b88d438-0b65-4c5a-b8b4-abe9ad8f14d1/next_sibling');\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"f8fd1fdf-85b0-417f-a810-48b44b6b8092\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/episodes/0b88d438-0b65-4c5a-b8b4-abe9ad8f14d1/next_sibling' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"f32ba1a2-db39-4aa5-ba63-6a50c10c3072\"' \\\n              --compressed\n  \"/episodes/{id}/previous_sibling\":\n    get:\n      parameters:\n        - description: The ID of the episode to find the one episode released right before it.\n          example: 66b64b5a-6e51-41f2-af87-080d28f99e56\n          in: path\n          name: id\n          required: true\n          schema:\n            format: uuid\n            type: string\n        - description: |\n            If `true`, get the previously released and published episode with an available media file.\n          in: query\n          name: rss\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/Episode\"\n                  links:\n                    $ref: \"#/components/schemas/ResourceLink\"\n                type: object\n          description: Success\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get the episode released right before the specified one\n      tags:\n        - Episode\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/episodes/4cfdc136-627b-4852-bc88-508035ad15c9/previous_sibling\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"d52f67bf-600b-4481-b795-1c3964b34f03\"'\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/episodes/4cfdc136-627b-4852-bc88-508035ad15c9/previous_sibling', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"41556079-5b3a-4daf-971c-a7dc992e25de\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, 'https://art19.com/episodes/4cfdc136-627b-4852-bc88-508035ad15c9/previous_sibling');\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"d1133ead-7b8e-439c-bf2c-93e545932bd0\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/episodes/4cfdc136-627b-4852-bc88-508035ad15c9/previous_sibling' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"5cde6b77-5f42-4216-80b4-2f1c6c537f1e\"' \\\n              --compressed\n  /images:\n    get:\n      description: |+\n        An image represents a piece of artwork attached to some entity like a series, season, or episode,\n        and is _owned_ by an entity called the `bucket`.\n        An image is also a container for several `MediaAssets` representing the physical files for various\n        styles used.\n\n        ## Media Asset Styles for Images\n\n        Most media assets use square images. You may upload and use a square image, or upload an image of any\n        shape and crop it to a square by specifying the cropping area. This area – identified by a coordinate\n        `x, y` and a `width` \u0026 `height` – is the portion of the image used for all cover art. If an image has\n        cropping defined, the cropped version of the image will be used in any `regular` or `square` style of media\n        asset. If the original file is rectangular and does not have cropping, then the system will use a squared\n        version of the original file with the smaller of width or height as the square size.\n\n        The original image as uploaded into the system is always retained unmodified and available through\n        the style `original`. All media asset styles except `stripped-original` consist of the cropped image.\n\n        An image has media assets with the following styles:\n\n        - `original`: This is the original file provided. May not be available, depending on permissions\n          and file type.\n        - `stripped-original`: The original file with all metadata (EXIF, XMP, PNG metadata, etc.) removed.\n          This should be used for any application needing the original, uncropped, image.\n        - `regular`: If the image has cropping defined, this is the cropped image.\n          If not, this is a square version of the original.\n        - `thumb`: A square thumbnail of the image with a size of `100x100` pixels.\n        - `square-400`: A square version of the image with a size of `400x400` pixels.\n        - `square-640`: A square version of the image with a size of `640x640` pixels.\n        - `square-888`: A square version of the image with a size of `888x888` pixels.\n        - `square-3000`: A square version of the image with a size of `3000x3000` pixels.\n          This variant is only created if the cropped width \u0026 height are each at least 3000.\n        - `itunes`: A square version of the image with a size of `1400x1400` pixels.\n\n        ### Preferred image used in feeds\n\n        For the main series image used in feeds, it is ideal to use the `square-3000` version.\n        If that is not available, the `itunes` version should be used instead.\n\n      parameters:\n        - description: |\n            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.\n            The brackets *MUST* be percent-encoded, per the requirements in\n            [RFC 3986 § 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).\n          explode: true\n          in: query\n          name: ids[]\n          required: true\n          schema:\n            items:\n              format: uuid\n              type: string\n            type: array\n            uniqueItems: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/Image\"\n                    type: array\n                  links:\n                    $ref: \"#/components/schemas/Links\"\n                type: object\n          description: Success\n        \"400\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  errors:\n                    description: |\n                      An error object describing the problem. Please check out the\n                      [JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\n                      description of the returned object.\n                    items:\n                      properties:\n                        code:\n                          description: An application-specific error code, expressed as a string value\n                          type: string\n                        detail:\n                          description: |\n                            A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n                          example: Required query parameter “series_id” is missing\n                          type: string\n                        source:\n                          description: |\n                            An object containing references to the source of the error, optionally including any of the following members.\n                          nullable: true\n                          properties:\n                            parameter:\n                              description: A string indicating which URI query parameter caused the error.\n                              example: series_id\n                              type: string\n                            pointer:\n                              description: |\n                                A JSON Pointer [RFC6901](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute).\n                              example: /data/attributes/name\n                              type: string\n                          type: object\n                        status:\n                          description: \"The HTTP status code applicable to this problem, expressed as a string value: 400\"\n                          example: \"400\"\n                          type: string\n                        title:\n                          description: |\n                            A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\n                            problem, except for purposes of localization.\n                          example: Bad Request\n                          type: string\n                      type: object\n                    type: array\n                type: object\n          description: |\n            Bad Request\n\n            Parameters requiring a specific format must adhere to that format.\n            Pagination must have a positive page number and a page size no larger than 100. \n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a list of images\n      tags:\n        - Image\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/images\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"2bc2bafc-b293-4e2b-b592-3d3bf525b0a0\"'\n              },\n              params: {\n                # add filters if desired\n                page: { number: 1, size: 25 }\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/images?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"9c5b1e95-e973-4523-a9f4-e65ba9e67a1c\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // The API endpoint to request data from\n              $url = array('https://art19.com/images');\n\n              // Provide extra parameters like filters or pagination to the request\n              $url[] = http_build_query(array(\n                'page' =\u003e array('number' =\u003e 1, 'size' =\u003e 25)\n              ));\n\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, implode('?', $url));\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"86517c9d-9781-4c8b-ab95-2ceae3c326ea\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/images?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"c70191aa-0cb7-409d-952b-cd349f1f3ef8\"' \\\n              --compressed\n  \"/images/{id}\":\n    get:\n      description: |+\n        An image represents a piece of artwork attached to some entity like a series, season, or episode,\n        and is _owned_ by an entity called the `bucket`.\n        An image is also a container for several `MediaAssets` representing the physical files for various\n        styles used.\n\n        ## Media Asset Styles for Images\n\n        Most media assets use square images. You may upload and use a square image, or upload an image of any\n        shape and crop it to a square by specifying the cropping area. This area – identified by a coordinate\n        `x, y` and a `width` \u0026 `height` – is the portion of the image used for all cover art. If an image has\n        cropping defined, the cropped version of the image will be used in any `regular` or `square` style of media\n        asset. If the original file is rectangular and does not have cropping, then the system will use a squared\n        version of the original file with the smaller of width or height as the square size.\n\n        The original image as uploaded into the system is always retained unmodified and available through\n        the style `original`. All media asset styles except `stripped-original` consist of the cropped image.\n\n        An image has media assets with the following styles:\n\n        - `original`: This is the original file provided. May not be available, depending on permissions\n          and file type.\n        - `stripped-original`: The original file with all metadata (EXIF, XMP, PNG metadata, etc.) removed.\n          This should be used for any application needing the original, uncropped, image.\n        - `regular`: If the image has cropping defined, this is the cropped image.\n          If not, this is a square version of the original.\n        - `thumb`: A square thumbnail of the image with a size of `100x100` pixels.\n        - `square-400`: A square version of the image with a size of `400x400` pixels.\n        - `square-640`: A square version of the image with a size of `640x640` pixels.\n        - `square-888`: A square version of the image with a size of `888x888` pixels.\n        - `square-3000`: A square version of the image with a size of `3000x3000` pixels.\n          This variant is only created if the cropped width \u0026 height are each at least 3000.\n        - `itunes`: A square version of the image with a size of `1400x1400` pixels.\n\n        ### Preferred image used in feeds\n\n        For the main series image used in feeds, it is ideal to use the `square-3000` version.\n        If that is not available, the `itunes` version should be used instead.\n\n      parameters:\n        - description: The ID of the image resource to load.\n          example: 4fda2ee0-70c6-4693-a4ac-787ea1eec06c\n          in: path\n          name: id\n          required: true\n          schema:\n            format: uuid\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/Image\"\n                  links:\n                    $ref: \"#/components/schemas/ResourceLink\"\n                type: object\n          description: Success\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a specific image\n      tags:\n        - Image\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/images/93014add-6102-4d3a-9ca9-548c9fa0bf14\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"8ea4ed88-a7ea-4134-8002-917fe7485baf\"'\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/images/93014add-6102-4d3a-9ca9-548c9fa0bf14', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"cc8e8f9d-ce70-4fa1-ae70-31ab1effdcf2\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, 'https://art19.com/images/93014add-6102-4d3a-9ca9-548c9fa0bf14');\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"e848355d-4e58-4054-9e99-60241aade58b\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/images/93014add-6102-4d3a-9ca9-548c9fa0bf14' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"a5a06090-d492-4c22-8e4b-fcc4b6431f2c\"' \\\n              --compressed\n  /media_assets:\n    get:\n      description: |+\n        A media asset is part of a collection of assets or files representing an image or a piece of audio content\n        like an episode or an ad. Images, for example, have differently sized versions for better rendering performance,\n        and a piece of audio content usually comes in different encoding formats.\n\n        The `style` attribute of a media asset describes the role an asset plays in the context of the collection.\n        The collection is what an asset is attached to (`attachment_id|type`).\n\n        ## Styles for Images\n\n        Most media assets use square images. You may upload and use a square image, or upload an image of any\n        shape and crop it to a square by specifying the cropping area. This area – identified by a coordinate\n        `x, y` and a `width` \u0026 `height` – is the portion of the image used for all cover art. If an image has\n        cropping defined, the cropped version of the image will be used in any `regular` or `square` style of media\n        asset. If the original file is rectangular and does not have cropping, then the system will use a squared\n        version of the original file with the smaller of width or height as the square size.\n\n        The original image as uploaded into the system is always retained unmodified and available through\n        the style `original`. All media asset styles except `stripped-original` consist of the cropped image.\n\n        An image has media assets with the following styles:\n\n        - `original`: This is the original file provided. May not be available, depending on permissions\n          and file type.\n        - `stripped-original`: The original file with all metadata (EXIF, XMP, PNG metadata, etc.) removed.\n          This should be used for any application needing the original, uncropped, image.\n        - `regular`: If the image has cropping defined, this is the cropped image.\n          If not, this is a square version of the original.\n        - `thumb`: A square thumbnail of the image with a size of `100x100` pixels.\n        - `square-400`: A square version of the image with a size of `400x400` pixels.\n        - `square-640`: A square version of the image with a size of `640x640` pixels.\n        - `square-888`: A square version of the image with a size of `888x888` pixels.\n        - `square-3000`: A square version of the image with a size of `3000x3000` pixels.\n          This variant is only created if the cropped width \u0026 height are each at least 3000.\n        - `itunes`: A square version of the image with a size of `1400x1400` pixels.\n\n        ### Preferred image used in feeds\n\n        For the main series image used in feeds, it is ideal to use the `square-3000` version.\n        If that is not available, the `itunes` version should be used instead.\n\n\n        ## Styles for Audio\n\n        - `medium`: A medium-quality version of the audio asset in various formats.\n        - `original`: This is the original file provided. May not be available, depending on permissions\n          and file type.\n        - `waveform_data`: The generated BBC Audiowaveform data in JSON or binary format.\n\n      parameters:\n        - description: |\n            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.\n            The brackets *MUST* be percent-encoded, per the requirements in\n            [RFC 3986 § 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).\n          explode: true\n          in: query\n          name: ids[]\n          required: true\n          schema:\n            items:\n              format: uuid\n              type: string\n            type: array\n            uniqueItems: true\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/MediaAsset\"\n                    type: array\n                  links:\n                    $ref: \"#/components/schemas/Links\"\n                type: object\n          description: Success\n        \"400\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  errors:\n                    description: |\n                      An error object describing the problem. Please check out the\n                      [JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\n                      description of the returned object.\n                    items:\n                      properties:\n                        code:\n                          description: An application-specific error code, expressed as a string value\n                          type: string\n                        detail:\n                          description: |\n                            A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n                          example: Required query parameter “series_id” is missing\n                          type: string\n                        source:\n                          description: |\n                            An object containing references to the source of the error, optionally including any of the following members.\n                          nullable: true\n                          properties:\n                            parameter:\n                              description: A string indicating which URI query parameter caused the error.\n                              example: series_id\n                              type: string\n                            pointer:\n                              description: |\n                                A JSON Pointer [RFC6901](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute).\n                              example: /data/attributes/name\n                              type: string\n                          type: object\n                        status:\n                          description: \"The HTTP status code applicable to this problem, expressed as a string value: 400\"\n                          example: \"400\"\n                          type: string\n                        title:\n                          description: |\n                            A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\n                            problem, except for purposes of localization.\n                          example: Bad Request\n                          type: string\n                      type: object\n                    type: array\n                type: object\n          description: |\n            Bad Request\n\n            Parameters requiring a specific format must adhere to that format.\n            Pagination must have a positive page number and a page size no larger than 100. \n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a list of media assets\n      tags:\n        - MediaAsset\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/media_assets\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"22938b22-25f9-4c43-8b00-3f66528b2d66\"'\n              },\n              params: {\n                # add filters if desired\n                page: { number: 1, size: 25 }\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/media_assets?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"25bd1eea-2db9-4056-8272-bfb1af75f77e\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // The API endpoint to request data from\n              $url = array('https://art19.com/media_assets');\n\n              // Provide extra parameters like filters or pagination to the request\n              $url[] = http_build_query(array(\n                'page' =\u003e array('number' =\u003e 1, 'size' =\u003e 25)\n              ));\n\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, implode('?', $url));\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"6f5be5e4-894e-4959-b68e-4a8d40cf6d66\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/media_assets?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"211d8f48-76bd-4559-bcf3-5c05fdc39290\"' \\\n              --compressed\n  \"/media_assets/{id}\":\n    get:\n      description: |+\n        A media asset is part of a collection of assets or files representing an image or a piece of audio content\n        like an episode or an ad. Images, for example, have differently sized versions for better rendering performance,\n        and a piece of audio content usually comes in different encoding formats.\n\n        The `style` attribute of a media asset describes the role an asset plays in the context of the collection.\n        The collection is what an asset is attached to (`attachment_id|type`).\n\n        ## Styles for Images\n\n        Most media assets use square images. You may upload and use a square image, or upload an image of any\n        shape and crop it to a square by specifying the cropping area. This area – identified by a coordinate\n        `x, y` and a `width` \u0026 `height` – is the portion of the image used for all cover art. If an image has\n        cropping defined, the cropped version of the image will be used in any `regular` or `square` style of media\n        asset. If the original file is rectangular and does not have cropping, then the system will use a squared\n        version of the original file with the smaller of width or height as the square size.\n\n        The original image as uploaded into the system is always retained unmodified and available through\n        the style `original`. All media asset styles except `stripped-original` consist of the cropped image.\n\n        An image has media assets with the following styles:\n\n        - `original`: This is the original file provided. May not be available, depending on permissions\n          and file type.\n        - `stripped-original`: The original file with all metadata (EXIF, XMP, PNG metadata, etc.) removed.\n          This should be used for any application needing the original, uncropped, image.\n        - `regular`: If the image has cropping defined, this is the cropped image.\n          If not, this is a square version of the original.\n        - `thumb`: A square thumbnail of the image with a size of `100x100` pixels.\n        - `square-400`: A square version of the image with a size of `400x400` pixels.\n        - `square-640`: A square version of the image with a size of `640x640` pixels.\n        - `square-888`: A square version of the image with a size of `888x888` pixels.\n        - `square-3000`: A square version of the image with a size of `3000x3000` pixels.\n          This variant is only created if the cropped width \u0026 height are each at least 3000.\n        - `itunes`: A square version of the image with a size of `1400x1400` pixels.\n\n        ### Preferred image used in feeds\n\n        For the main series image used in feeds, it is ideal to use the `square-3000` version.\n        If that is not available, the `itunes` version should be used instead.\n\n\n        ## Styles for Audio\n\n        - `medium`: A medium-quality version of the audio asset in various formats.\n        - `original`: This is the original file provided. May not be available, depending on permissions\n          and file type.\n        - `waveform_data`: The generated BBC Audiowaveform data in JSON or binary format.\n\n      parameters:\n        - description: The ID of the media asset resource to load.\n          example: 7bb0559a-fe12-4909-893d-baaec7b7068b\n          in: path\n          name: id\n          required: true\n          schema:\n            format: uuid\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/MediaAsset\"\n                  links:\n                    $ref: \"#/components/schemas/ResourceLink\"\n                type: object\n          description: Success\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a specific media asset\n      tags:\n        - MediaAsset\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/media_assets/cebb3ce9-d680-4ee2-aa64-7a96e45bba2d\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"e4444d02-a287-4d00-8b68-6dc48646cc23\"'\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/media_assets/cebb3ce9-d680-4ee2-aa64-7a96e45bba2d', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"cfb939ee-3f7e-4a62-b7d6-6fb57c8d0124\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, 'https://art19.com/media_assets/cebb3ce9-d680-4ee2-aa64-7a96e45bba2d');\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"a0356313-650c-4c9e-b8ae-04f33328f737\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/media_assets/cebb3ce9-d680-4ee2-aa64-7a96e45bba2d' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"830b18d5-6e1f-4201-844e-361927e1e633\"' \\\n              --compressed\n  /networks:\n    get:\n      description: |\n        ### Deprecations\n\n        - The attribute `cover_image_id` has been replaced with the relationship `cover_image`\n          and will be removed from the response in a future release.\n      parameters:\n        - description: |\n            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.\n            The brackets *MUST* be percent-encoded, per the requirements in\n            [RFC 3986 § 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).\n          explode: true\n          in: query\n          name: ids[]\n          required: false\n          schema:\n            items:\n              format: uuid\n              type: string\n            type: array\n            uniqueItems: true\n        - description: |+\n            Select which page number to receive results for. Pages are numbered starting at 1.\n\n          in: query\n          name: page[number]\n          schema:\n            minimum: 1\n            type: integer\n        - description: |+\n            Indicate how many records to return per page. The maximum is 100.\n\n          in: query\n          name: page[size]\n          schema:\n            maximum: 100\n            minimum: 1\n            type: integer\n        - description: Limit the result to networks with a name containing this parameter in a case-insensitive way.\n          in: query\n          name: q\n          schema:\n            type: string\n        - description: |\n            Limit the result to networks containing at least one series with an ad deal of this Ad Ops profile.\n          in: query\n          name: ad_rep_account_id\n          schema:\n            format: uuid\n            type: string\n        - description: |\n            Limit the result to networks containing at least one series with an ad deal matching one of the\n            values in this parameter.\n          explode: false\n          in: query\n          name: ad_deal_status\n          schema:\n            items:\n              enum:\n                - active\n                - inactive\n                - pending_active\n                - pending_inactive\n              type: string\n            type: array\n          style: form\n        - description: |\n            Specify how to sort the result. Please refer to either the top section or the\n            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.\n          explode: false\n          in: query\n          name: sort\n          schema:\n            default: name\n            items:\n              enum:\n                - created_at\n                - name\n                - updated_at\n              type: string\n            type: array\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/Network\"\n                    type: array\n                  links:\n                    $ref: \"#/components/schemas/Links\"\n                type: object\n          description: Success\n        \"400\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  errors:\n                    description: |\n                      An error object describing the problem. Please check out the\n                      [JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\n                      description of the returned object.\n                    items:\n                      properties:\n                        code:\n                          description: An application-specific error code, expressed as a string value\n                          type: string\n                        detail:\n                          description: |\n                            A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n                          example: Required query parameter “series_id” is missing\n                          type: string\n                        source:\n                          description: |\n                            An object containing references to the source of the error, optionally including any of the following members.\n                          nullable: true\n                          properties:\n                            parameter:\n                              description: A string indicating which URI query parameter caused the error.\n                              example: series_id\n                              type: string\n                            pointer:\n                              description: |\n                                A JSON Pointer [RFC6901](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute).\n                              example: /data/attributes/name\n                              type: string\n                          type: object\n                        status:\n                          description: \"The HTTP status code applicable to this problem, expressed as a string value: 400\"\n                          example: \"400\"\n                          type: string\n                        title:\n                          description: |\n                            A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\n                            problem, except for purposes of localization.\n                          example: Bad Request\n                          type: string\n                      type: object\n                    type: array\n                type: object\n          description: |\n            Bad Request\n\n            Parameters requiring a specific format must adhere to that format.\n            Pagination must have a positive page number and a page size no larger than 100. \n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a list of networks\n      tags:\n        - Network\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/networks\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"bba8449d-49c6-40bc-8971-771b7555efed\"'\n              },\n              params: {\n                # add filters if desired\n                page: { number: 1, size: 25 }\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/networks?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"4d974200-a449-498b-a6ec-dbe8d649f719\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // The API endpoint to request data from\n              $url = array('https://art19.com/networks');\n\n              // Provide extra parameters like filters or pagination to the request\n              $url[] = http_build_query(array(\n                'page' =\u003e array('number' =\u003e 1, 'size' =\u003e 25)\n              ));\n\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, implode('?', $url));\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"071b7404-dc0e-45dc-ba4f-0a6899162d0a\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/networks?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"6a4251a5-ce86-4283-b4ac-3cffcefab7f0\"' \\\n              --compressed\n  \"/networks/{id}\":\n    get:\n      description: |\n        ### Deprecations\n\n        - The attribute `cover_image_id` has been replaced with the relationship `cover_image`\n          and will be removed from the response in a future release.\n      parameters:\n        - description: The ID of the network resource to load.\n          example: ff702d30-364e-43c6-89bc-c3827f783153\n          in: path\n          name: id\n          required: true\n          schema:\n            format: uuid\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/Network\"\n                  links:\n                    $ref: \"#/components/schemas/ResourceLink\"\n                type: object\n          description: Success\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a specific network\n      tags:\n        - Network\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/networks/781c31b8-e822-41f4-a492-47bf0ef3e8f3\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"987ded10-b8f5-479d-af64-221ce5a2e148\"'\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/networks/781c31b8-e822-41f4-a492-47bf0ef3e8f3', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"4f91f6c9-83a7-4727-8729-660939c3bf77\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, 'https://art19.com/networks/781c31b8-e822-41f4-a492-47bf0ef3e8f3');\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"c0060152-e653-470a-a65e-2c689e1211a9\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/networks/781c31b8-e822-41f4-a492-47bf0ef3e8f3' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"90f3de22-4bba-4b6b-920a-ad3192267187\"' \\\n              --compressed\n  /people:\n    get:\n      description: |\n        Each series, season, and episode has a Credits section where you may add people and roles.\n        This is an internal tool to recognize contributors. It is not related to ART19 users or account permissions.\n        Each Person added will have no additional access or permissions granted as a result of being included in the Credits section.\n      parameters:\n        - description: |\n            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.\n            The brackets *MUST* be percent-encoded, per the requirements in\n            [RFC 3986 § 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).\n          explode: true\n          in: query\n          name: ids[]\n          required: false\n          schema:\n            items:\n              format: uuid\n              type: string\n            type: array\n            uniqueItems: true\n        - description: |+\n            Select which page number to receive results for. Pages are numbered starting at 1.\n\n          in: query\n          name: page[number]\n          schema:\n            minimum: 1\n            type: integer\n        - description: |+\n            Indicate how many records to return per page. The maximum is 100.\n\n          in: query\n          name: page[size]\n          schema:\n            maximum: 100\n            minimum: 1\n            type: integer\n        - description: Limit the result to people with a full name containing this parameter in a case-insensitive way.\n          in: query\n          name: q\n          schema:\n            type: string\n        - description: |\n            Specify how to sort the result. Please refer to either the top section or the\n            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.\n          explode: false\n          in: query\n          name: sort\n          schema:\n            default: last_name,first_name\n            items:\n              enum:\n                - created_at\n                - first_name\n                - last_name\n                - updated_at\n              type: string\n            type: array\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/Person\"\n                    type: array\n                  links:\n                    $ref: \"#/components/schemas/Links\"\n                type: object\n          description: Success\n        \"400\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  errors:\n                    description: |\n                      An error object describing the problem. Please check out the\n                      [JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\n                      description of the returned object.\n                    items:\n                      properties:\n                        code:\n                          description: An application-specific error code, expressed as a string value\n                          type: string\n                        detail:\n                          description: |\n                            A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n                          example: Required query parameter “series_id” is missing\n                          type: string\n                        source:\n                          description: |\n                            An object containing references to the source of the error, optionally including any of the following members.\n                          nullable: true\n                          properties:\n                            parameter:\n                              description: A string indicating which URI query parameter caused the error.\n                              example: series_id\n                              type: string\n                            pointer:\n                              description: |\n                                A JSON Pointer [RFC6901](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute).\n                              example: /data/attributes/name\n                              type: string\n                          type: object\n                        status:\n                          description: \"The HTTP status code applicable to this problem, expressed as a string value: 400\"\n                          example: \"400\"\n                          type: string\n                        title:\n                          description: |\n                            A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\n                            problem, except for purposes of localization.\n                          example: Bad Request\n                          type: string\n                      type: object\n                    type: array\n                type: object\n          description: |\n            Bad Request\n\n            Parameters requiring a specific format must adhere to that format.\n            Pagination must have a positive page number and a page size no larger than 100. \n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a list of people\n      tags:\n        - Person\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/people\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"f7a17037-e089-407c-a3dc-4b170414c903\"'\n              },\n              params: {\n                # add filters if desired\n                page: { number: 1, size: 25 }\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/people?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"594e22cd-c595-4fd2-9965-cc6be99408a6\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // The API endpoint to request data from\n              $url = array('https://art19.com/people');\n\n              // Provide extra parameters like filters or pagination to the request\n              $url[] = http_build_query(array(\n                'page' =\u003e array('number' =\u003e 1, 'size' =\u003e 25)\n              ));\n\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, implode('?', $url));\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"2ff85b46-f604-4b74-9625-b2ba707accc5\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/people?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"d946aab3-018f-477c-b1e4-6e2708471777\"' \\\n              --compressed\n  \"/people/{id}\":\n    get:\n      description: |\n        Each series, season, and episode has a Credits section where you may add people and roles.\n        This is an internal tool to recognize contributors. It is not related to ART19 users or account permissions.\n        Each Person added will have no additional access or permissions granted as a result of being included in the Credits section.\n      parameters:\n        - description: The ID of the person resource to load.\n          example: 267ae3eb-7d08-4974-9ed5-0395e2abbe26\n          in: path\n          name: id\n          required: true\n          schema:\n            format: uuid\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/Person\"\n                  links:\n                    $ref: \"#/components/schemas/ResourceLink\"\n                type: object\n          description: Success\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a specific person\n      tags:\n        - Person\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/people/24405ff9-dbd2-41c0-aa4b-7b488713cdd2\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"0d18cf53-61ef-4bec-96dc-cb488d83273c\"'\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/people/24405ff9-dbd2-41c0-aa4b-7b488713cdd2', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"6fd1181a-7198-48d9-9252-f4a73db5e131\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, 'https://art19.com/people/24405ff9-dbd2-41c0-aa4b-7b488713cdd2');\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"e03bcc9c-2376-4444-9f87-4d8464a230cd\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/people/24405ff9-dbd2-41c0-aa4b-7b488713cdd2' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"176ad731-bb4e-4029-91f4-16341783fb85\"' \\\n              --compressed\n  /seasons:\n    get:\n      description: |\n        When retrieving a list of seasons, the result is automatically filtered depending on the\n        privileges the used credential holds. If there are no specific privileges to a series or network,\n        only active seasons for active series are included.\n      parameters:\n        - description: |\n            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.\n            The brackets *MUST* be percent-encoded, per the requirements in\n            [RFC 3986 § 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).\n          explode: true\n          in: query\n          name: ids[]\n          required: false\n          schema:\n            items:\n              format: uuid\n              type: string\n            type: array\n            uniqueItems: true\n        - description: |+\n            Select which page number to receive results for. Pages are numbered starting at 1.\n\n          in: query\n          name: page[number]\n          schema:\n            minimum: 1\n            type: integer\n        - description: |+\n            Indicate how many records to return per page. The maximum is 100.\n\n          in: query\n          name: page[size]\n          schema:\n            maximum: 100\n            minimum: 1\n            type: integer\n        - description: Limit the result to seasons owned by this series.\n          example: 7ebd702d-07c8-4da9-a7a8-cf18ec414d5c\n          in: query\n          name: series_id\n          schema:\n            format: uuid\n            type: string\n        - description: Limit the result to seasons with a title containing this parameter in a case-insensitive way.\n          in: query\n          name: q\n          schema:\n            type: string\n        - description: |\n            Specify how to sort the result. Please refer to either the top section or the\n            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.\n          explode: false\n          in: query\n          name: sort\n          schema:\n            default: sort_title\n            items:\n              enum:\n                - created_at\n                - sort_title\n                - title\n                - updated_at\n              type: string\n            type: array\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/Season\"\n                    type: array\n                  links:\n                    $ref: \"#/components/schemas/Links\"\n                type: object\n          description: Success\n        \"400\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  errors:\n                    description: |\n                      An error object describing the problem. Please check out the\n                      [JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\n                      description of the returned object.\n                    items:\n                      properties:\n                        code:\n                          description: An application-specific error code, expressed as a string value\n                          type: string\n                        detail:\n                          description: |\n                            A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n                          example: Required query parameter “series_id” is missing\n                          type: string\n                        source:\n                          description: |\n                            An object containing references to the source of the error, optionally including any of the following members.\n                          nullable: true\n                          properties:\n                            parameter:\n                              description: A string indicating which URI query parameter caused the error.\n                              example: series_id\n                              type: string\n                            pointer:\n                              description: |\n                                A JSON Pointer [RFC6901](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute).\n                              example: /data/attributes/name\n                              type: string\n                          type: object\n                        status:\n                          description: \"The HTTP status code applicable to this problem, expressed as a string value: 400\"\n                          example: \"400\"\n                          type: string\n                        title:\n                          description: |\n                            A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\n                            problem, except for purposes of localization.\n                          example: Bad Request\n                          type: string\n                      type: object\n                    type: array\n                type: object\n          description: |\n            Bad Request\n\n            Parameters requiring a specific format must adhere to that format.\n            Pagination must have a positive page number and a page size no larger than 100. \n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a list of seasons\n      tags:\n        - Season\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/seasons\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"224fcee3-ae46-4573-9060-4a1890442b71\"'\n              },\n              params: {\n                # add filters if desired\n                page: { number: 1, size: 25 }\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/seasons?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"6b7e018c-af01-4c0d-b7d7-aefbff23f837\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // The API endpoint to request data from\n              $url = array('https://art19.com/seasons');\n\n              // Provide extra parameters like filters or pagination to the request\n              $url[] = http_build_query(array(\n                'page' =\u003e array('number' =\u003e 1, 'size' =\u003e 25)\n              ));\n\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, implode('?', $url));\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"5de0d3f4-3c7d-4251-bb32-7ee85d21766f\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/seasons?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"d27cbc22-8da2-46d3-b059-20918459a45a\"' \\\n              --compressed\n  \"/seasons/{id}\":\n    get:\n      parameters:\n        - description: The ID of the season resource to load.\n          example: e9f133d9-97f2-4032-8827-2a6d259be364\n          in: path\n          name: id\n          required: true\n          schema:\n            format: uuid\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/Season\"\n                  links:\n                    $ref: \"#/components/schemas/ResourceLink\"\n                type: object\n          description: Success\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a specific season\n      tags:\n        - Season\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/seasons/986f1b45-6434-40bc-adfa-0469ec75039a\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"340e3a62-0922-4de1-af47-577e7a350d23\"'\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/seasons/986f1b45-6434-40bc-adfa-0469ec75039a', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"200e3f32-3709-4de2-b0de-17c8b6c16d33\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, 'https://art19.com/seasons/986f1b45-6434-40bc-adfa-0469ec75039a');\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"6e48e32e-080a-4d51-829e-e768441eaebd\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/seasons/986f1b45-6434-40bc-adfa-0469ec75039a' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"06cde72c-b775-44c5-ab06-256ee944254f\"' \\\n              --compressed\n  /series:\n    get:\n      description: |\n        When retrieving a list of series, the result is automatically filtered depending on the\n        privileges the used credential holds. All credentials will have access to active series\n        with a public page enabled (on ART19). Utilizing a filter to limit the result to series\n        associated with your account is recommended.\n      parameters:\n        - description: |\n            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.\n            The brackets *MUST* be percent-encoded, per the requirements in\n            [RFC 3986 § 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).\n          explode: true\n          in: query\n          name: ids[]\n          required: false\n          schema:\n            items:\n              format: uuid\n              type: string\n            type: array\n            uniqueItems: true\n        - description: |+\n            Select which page number to receive results for. Pages are numbered starting at 1.\n\n          in: query\n          name: page[number]\n          schema:\n            minimum: 1\n            type: integer\n        - description: |+\n            Indicate how many records to return per page. The maximum is 100.\n\n          in: query\n          name: page[size]\n          schema:\n            maximum: 100\n            minimum: 1\n            type: integer\n        - description: |\n            Limit the result to series with an ad deal of this Ad Ops profile.\n          example: 35eb02fc-54db-4650-98e0-4695b101b71d\n          in: query\n          name: ad_rep_account_id\n          schema:\n            format: uuid\n            type: string\n        - description: Limit the result to series owned by this network.\n          example: 5317358a-527e-4365-a343-361854286cc7\n          in: query\n          name: network_id\n          schema:\n            format: uuid\n            type: string\n        - description: Limit the result to series with a title or slug containing this parameter in a case-insensitive way.\n          in: query\n          name: q\n          schema:\n            type: string\n        - description: |\n            Specify how to sort the result. Please refer to either the top section or the\n            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.\n          explode: false\n          in: query\n          name: sort\n          schema:\n            default: sort_title\n            items:\n              enum:\n                - created_at\n                - episode_released_at\n                - sort_title\n                - title\n                - updated_at\n              type: string\n            type: array\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/Series\"\n                    type: array\n                  links:\n                    $ref: \"#/components/schemas/Links\"\n                type: object\n          description: Success\n        \"400\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  errors:\n                    description: |\n                      An error object describing the problem. Please check out the\n                      [JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\n                      description of the returned object.\n                    items:\n                      properties:\n                        code:\n                          description: An application-specific error code, expressed as a string value\n                          type: string\n                        detail:\n                          description: |\n                            A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n                          example: Required query parameter “series_id” is missing\n                          type: string\n                        source:\n                          description: |\n                            An object containing references to the source of the error, optionally including any of the following members.\n                          nullable: true\n                          properties:\n                            parameter:\n                              description: A string indicating which URI query parameter caused the error.\n                              example: series_id\n                              type: string\n                            pointer:\n                              description: |\n                                A JSON Pointer [RFC6901](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute).\n                              example: /data/attributes/name\n                              type: string\n                          type: object\n                        status:\n                          description: \"The HTTP status code applicable to this problem, expressed as a string value: 400\"\n                          example: \"400\"\n                          type: string\n                        title:\n                          description: |\n                            A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\n                            problem, except for purposes of localization.\n                          example: Bad Request\n                          type: string\n                      type: object\n                    type: array\n                type: object\n          description: |\n            Bad Request\n\n            Parameters requiring a specific format must adhere to that format.\n            Pagination must have a positive page number and a page size no larger than 100. \n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a list of series\n      tags:\n        - Series\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/series\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"586f4eef-4928-4ea6-a6e3-15960c594207\"'\n              },\n              params: {\n                # add filters if desired\n                page: { number: 1, size: 25 }\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/series?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"5eabbc90-8a12-4cc1-981d-e9ea5acb1539\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // The API endpoint to request data from\n              $url = array('https://art19.com/series');\n\n              // Provide extra parameters like filters or pagination to the request\n              $url[] = http_build_query(array(\n                'page' =\u003e array('number' =\u003e 1, 'size' =\u003e 25)\n              ));\n\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, implode('?', $url));\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"f2f0407e-dce3-47b8-868e-864b2e19ee67\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/series?page%5Bnumber%5D=1\u0026page%5Bsize%5D=25' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"ab95b887-15b8-45f3-948e-859e410c9e14\"' \\\n              --compressed\n  \"/series/{id}\":\n    get:\n      parameters:\n        - description: The ID of the series resource to load.\n          example: 4856e22a-715a-4769-a948-067d93e5f22a\n          in: path\n          name: id\n          required: true\n          schema:\n            format: uuid\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/vnd.api+json:\n              schema:\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/Series\"\n                  links:\n                    $ref: \"#/components/schemas/ResourceLink\"\n                type: object\n          description: Success\n        \"401\":\n          $ref: \"#/components/responses/unauthorized\"\n        \"403\":\n          $ref: \"#/components/responses/forbidden\"\n        \"404\":\n          $ref: \"#/components/responses/not_found\"\n        \"406\":\n          $ref: \"#/components/responses/not_acceptable\"\n        \"429\":\n          $ref: \"#/components/responses/rate_limit_exceeded\"\n      summary: Get a specific series\n      tags:\n        - Series\n      x-codeSamples:\n        - label: Ruby - Typhoeus\n          lang: ruby\n          source: |\n            response = Typhoeus.get(\n              \"https://art19.com/series/e936d99b-781e-4eb8-beb7-da5c04960774\",\n              accept_encoding: 'gzip',\n              headers: {\n                Accept:        'application/vnd.api+json',\n                Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"36d16d31-0852-4aed-9bed-39ee6e448fb4\"'\n              },\n              timeout: 10\n            )\n            if response.success?\n              # HTTP 2xx - JSON:API available to be parsed in response.body\n            elsif response.timed_out?\n              # Request timed out\n            elsif response.code.zero?\n              # cURL didn't get back an HTTP response, the reason is in response.return_message\n            else\n              # Other HTTP status, check response.code for which\n            end\n        - label: JavaScript - Fetch\n          lang: javascript\n          source: |\n            try {\n              const response = await fetch('https://art19.com/series/e936d99b-781e-4eb8-beb7-da5c04960774', {\n                headers: {\n                  Accept:        'application/vnd.api+json',\n                  Authorization: 'Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"cc0e38f3-208a-426d-bc81-47276090c3d9\"'\n                }\n              });\n\n              if (response.ok) {\n                // Get the response body if HTTP-status is 200-299\n                const json = await response.json();\n              } else {\n                // HTTP request failed, handle error\n              }\n            } catch(err) {\n              // A network error occured\n            }\n        - label: PHP - cURL\n          lang: php\n          source: |\n            \u003c?php\n            // Initialize a cURL resource for a request\n            $request = curl_init();\n\n            try {\n              // Configure the cURL options\n              curl_setopt($request, CURLOPT_URL, 'https://art19.com/series/e936d99b-781e-4eb8-beb7-da5c04960774');\n              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);\n              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);\n              curl_setopt($request, CURLOPT_ENCODING, '');\n              curl_setopt($request, CURLOPT_HTTPHEADER, array(\n                'Accept: application/vnd.api+json',\n                'Authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"66b15f40-d8c8-4387-b0e2-f1d5b441c7d7\"'\n              ));\n\n              // Execute the request and grab all status information\n              $output = curl_exec($request);\n              $info   = curl_getinfo($request);\n              $code   = $info['http_code'];\n\n              if ($code \u003e= 200 \u0026\u0026 $code \u003c 300) {\n                // HTTP 2xx - JSON:API response available to be parsed in $output\n                $json = json_decode($output);\n              } else if ($code \u003e= 400 \u0026\u0026 $code \u003c 500) {\n                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output\n                if (strlen($output) \u003e 0) {\n                  $errors = json_decode($output);\n                }\n              } else {\n                // Other HTTP status, treat according to workflow\n              }\n            } finally {\n              // Free up the resource to clear out memory\n              curl_close($request);\n            }\n            ?\u003e\n        - label: cURL\n          lang: shell\n          source: |\n            curl 'https://art19.com/series/e936d99b-781e-4eb8-beb7-da5c04960774' \\\n              -H 'accept: application/vnd.api+json' \\\n              -H 'authorization: Token token=\"UVd4c0lFTnZjSKbElFSm\", credential=\"9e730ade-04a7-4a60-a6f1-a5ce8418acad\"' \\\n              --compressed\ncomponents:\n  responses:\n    forbidden:\n      description: |\n        Forbidden\n\n        The provided credential is not authorized to access the requested resource or collection.\n        [See RFC 7231 § 6.5.3](https://tools.ietf.org/html/rfc7231#section-6.5.3)\n    not_acceptable:\n      description: |\n        Not Acceptable\n\n        The client requested a response format which cannot be satisfied. Ensure that you specify the\n        correct `Accept` header. [See RFC 7231 § 6.5.6](https://tools.ietf.org/html/rfc7231#section-6.5.6).\n    not_found:\n      description: |\n        Not Found\n\n        The requested resource/collection does not exist. [See RFC 7231 § 6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4).\n    rate_limit_exceeded:\n      description: Rate limit exceeded\n      headers:\n        Retry-After:\n          description: |\n            The number of seconds after which the request can be retried.\n            Since the rate limit is per minute, this value ranges from 1 to 59.\n            Conforms to [RFC 7231 § 7.1.3](https://tools.ietf.org/html/rfc7231#section-7.1.3).\n          schema:\n            type: integer\n    unauthorized:\n      description: |\n        Unauthorized\n\n        A valid credential was not supplied, but one is required.\n        [See RFC 7235 § 3.1](https://tools.ietf.org/html/rfc7235#section-3.1).\n        A `WWW-Authenticate` header is not currently returned.\n  schemas:\n    Classification:\n      description: |\n        A classification, in general, is something that can describe other resources, such as countries, genres or\n        languages. How they're described (included or excluded, and whether they're the primary classification\n        of this type) is handled using other resources. Different functions of ART19 rely on classifications differently,\n        and could have an effect only on directory information, or may have an effect on ad decisioning.\n      properties:\n        attributes:\n          properties:\n            created_at:\n              format: date-time\n              type: string\n            display_name:\n              description: Human readable representation of the classification\n              type: string\n            metadata:\n              description: |\n                An object with more detailed information about the classification.\n                The possible members are different per type of classification.\n              type: object\n            parent_id:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `parent` in a future update.\u003cbr/\u003e\n                For hierarchical classifications, this is the ID of the parent classification\n              format: uuid\n              type: string\n            tree_path:\n              description: |\n                For hierarchical classifications this is the list of IDs reflecting the hierarchy starting\n                with the root level node.\n              example:\n                - 1d142c2e-9562-40ef-8304-9c69540ae60f\n                - 17903d19-b84b-4870-88ba-bfc08f347644\n              items:\n                format: uuid\n                type: string\n              type: array\n            type:\n              description: |\n                The type of classification. The type of retrievable classifications depends on the privileges\n                of the credential being used.\n              enum:\n                - AlternateFeedType\n                - Genre\n                - Industry\n                - Language\n                - MediaRating\n              example: Genre\n              type: string\n            updated_at:\n              format: date-time\n              type: string\n            value:\n              description: |\n                The value the classification represents. The meaning of this attribute depends on the type of classification.\n              type: string\n            value_path:\n              description: |\n                For hierarchical classifications this is a concatenated string of all the classification\n                values from the root to this classification using a `: ` as separator.\n              example: \"Comedy: Standup\"\n              type: string\n          type: object\n        id:\n          example: c1fbb1bf-45b1-4803-986e-123166f7f427\n          format: uuid\n          type: string\n        type:\n          description: The type of resource. This is always `classifications`\n          example: classifications\n          type: string\n      type: object\n    ClassificationInclusion:\n      description: |\n        Connects a Classification with a classified item like a Series, Season or Episode.\n      properties:\n        attributes:\n          properties:\n            classification_id:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `classification` in a future update.\u003cbr/\u003e\n                The ID of the classification linked to the entity\n              example: 497aad13-1c96-41d8-80e2-9a5aa7bc96fa\n              format: uuid\n              type: string\n            classification_type:\n              deprecated: true\n              description: This will be replaced by the relationship `classification` in a future update.\u003cbr/\u003e\n              enum:\n                - AlternateFeedType\n                - Genre\n                - Industry\n                - Language\n                - MediaRating\n              type: string\n            classified_id:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `classified` in a future update.\u003cbr/\u003e\n                The ID of the entity linked to the classification\n              example: 8e9dc5d8-8a16-424e-ba96-6a7261a9a23b\n              format: uuid\n              type: string\n            classified_type:\n              deprecated: true\n              description: This will be replaced by the relationship `classified` in a future update.\u003cbr/\u003e\n              enum:\n                - Series\n                - Season\n                - Episode\n              type: string\n            created_at:\n              format: date-time\n              type: string\n            position:\n              description: The position or order of the linked classification within the classified resource\n              type: integer\n            primary:\n              description: |\n                When `true` it describes the best classification of a specific type for a given\n                classified item\n              type: boolean\n            updated_at:\n              format: date-time\n              type: string\n          type: object\n        id:\n          example: c1fbb1bf-45b1-4803-986e-123166f7f427\n          format: uuid\n          type: string\n        relationships:\n          properties:\n            classification:\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              type: object\n          type: object\n        type:\n          description: The type of resource. This is always `classification_inclusion`\n          example: classification_inclusion\n          type: string\n      type: object\n    Credit:\n      description: |\n        A credit links a specific person to a series, season, or episode in a specific role.\n      properties:\n        attributes:\n          properties:\n            created_at:\n              format: date-time\n              type: string\n            creditable_id:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `creditable` in a future update.\u003cbr/\u003e\n                The ID of the entity this credit is for\n              example: c71c6734-ab34-4464-ae03-d7f677e3b658\n              format: uuid\n              type: string\n            creditable_type:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `creditable` in a future update.\u003cbr/\u003e\n                The type of entitiy this credit is for\n              enum:\n                - Series\n                - Season\n                - Episode\n              type: string\n            position:\n              description: The order of this credit within all credits of the referenced creditable entity\n              type: integer\n            type:\n              description: The type of credit the linked person has on the referenced entity\n              enum:\n                - AnchorCredit\n                - AssociateProducerCredit\n                - AuthorCredit\n                - CastCredit\n                - CoHostCredit\n                - ComposerCredit\n                - CreatorCredit\n                - Credit\n                - DirectorCredit\n                - EditorCredit\n                - EngineerCredit\n                - ExecutiveProducerCredit\n                - GuestCoHostCredit\n                - GuestCredit\n                - GuestHostCredit\n                - HeadWriterCredit\n                - HostCredit\n                - ProducerCredit\n                - ReporterCredit\n                - SeniorProducerCredit\n                - SidekickCredit\n                - VideoProducerCredit\n                - WriterCredit\n              type: string\n            updated_at:\n              format: date-time\n              type: string\n          type: object\n        id:\n          example: c1fbb1bf-45b1-4803-986e-123166f7f427\n          format: uuid\n          type: string\n        relationships:\n          properties:\n            person:\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              type: object\n          type: object\n        type:\n          description: The type of resource. This is always `credits`\n          example: credits\n          type: string\n      type: object\n    Episode:\n      properties:\n        attributes:\n          properties:\n            allow_user_comments:\n              description: |\n                Only visible to credentials having write privileges for the series.\n              type: boolean\n            cascaded_cover_image_id:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `cascaded_cover_image` in a future update.\u003cbr/\u003e\n                The image ID of the cover art for this episode. This is the preferred image ID to use.\n                If there is no specific cover for the episode, the image ID of the season or the\n                series will be returned, whichever has one defined.\n                The `/images` endpoint provides details to the image.\n              example: ec8f13bf-77c0-40fe-933a-8c088c16bc17\n              format: uuid\n              type: string\n            cover_image_id:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `cover_image` in a future update.\u003cbr/\u003e\n                The image ID of the cover art for this episode, if an episode-specific image has been provided.\n                The `/images` endpoint provideds details to the image.\n              example: ec8f13bf-77c0-40fe-933a-8c088c16bc17\n              format: uuid\n              type: string\n            created_at:\n              format: date-time\n              type: string\n            description:\n              description: The description of the episode, possibly in HTML format\n              example: \u003cp\u003e\u003cstrong\u003eSome\u003c/strong\u003e funny example.\u003c/p\u003e\n              type: string\n            description_is_html:\n              description: Determines whether `description` is in HTML format or plain.\n              type: boolean\n            description_plain:\n              description: |\n                The description with all HTML markup removed. If the description does not contain markup,\n                this is identitcal to `description`.\n              example: Some funny example.\n              type: string\n            file_name:\n              description: The file name, without extension, to present users when downloading the episode\n              type: string\n            itunes_type:\n              description: The type of the episode according to Apple's type categorization\n              enum:\n                - full\n                - bonus\n                - trailer\n              type: string\n            listen_count:\n              description: |\n                The number of total downloads all time for this episode.\n                Only visible if the credential has the right privilege on the series.\n              type: integer\n            premium_status:\n              description: The current premium status of the episode\n              enum:\n                - active\n                - inactive\n                - force-active\n                - force-inactive\n              type: string\n            published:\n              description: |\n                If true, the episode will be available for download and included in the feed as soon as its\n                release time is reached. Aside from that, it also needs to have valid media file associated.\n              type: boolean\n            release_immediately:\n              description: |\n                If true, the episode's release time is set in a way it is considered released right away.\n                Only visible if the credential has write privileges on the series.\n              type: boolean\n            released_at:\n              description: |\n                The date \u0026 time when an episode shall be released. It will be available for download and\n                included in the feed, if this time is reached and `published` is set to `true` and the episode\n                has an available media file associated.\n              format: date-time\n              type: string\n            rss_guid:\n              description: |\n                A globally unique identifier describing the episode. This ID is commonly used by podcast applications\n                to determine whether an episode has already been downloaded or not.\n              type: string\n            season_id:\n              deprecated: true\n              description: |\n                Use the relationship `season` instead.\u003cbr /\u003e\n                The ID of the season an episode belongs to. This can be `null`. A series can have episodes with and\n                without seasons at the same time.\n              example: eba5523d-e73a-43ec-bfd9-140ce9db76ac\n              format: uuid\n              type: string\n            series_id:\n              deprecated: true\n              description: |\n                Use the relationship `series` instead.\u003cbr /\u003e\n                The ID of the series an episode belongs to.\n              example: 9897f8cb-ffa7-4674-9529-c6037826c738\n              format: uuid\n              type: string\n            sort_title:\n              description: |\n                The title of the episode modified for sorting. This converts all characters to\n                lower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.\n              example: big hit\n              type: string\n            status:\n              description: The status of an episode\n              enum:\n                - active\n                - inactive\n              type: string\n            title:\n              description: The title of the episode\n              example: The Big Hit\n              type: string\n            updated_at:\n              format: date-time\n              type: string\n          type: object\n        id:\n          example: c1fbb1bf-45b1-4803-986e-123166f7f427\n          format: uuid\n          type: string\n        relationships:\n          properties:\n            cascaded_cover_image:\n              description: |\n                The cover art for this episode. This is the preferred image to use.\n                If there is no specific cover image for the episode, the cover of the season or the\n                series will be returned, whichever has one defined.\n                The `/images` endpoint provides details to the image.\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              type: object\n            classification_inclusions:\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of classifications associated with the episode\n              type: object\n            cover_image:\n              description: |\n                The cover art for this episode, if an episode-specific image has been provided.\n                The `/images` endpoint provideds details to the image.\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              type: object\n            credits:\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of credits given to people in the episode\n              type: object\n            default_marker_points:\n              description: Only visible if the credential has write privileges on the series\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of default (WarpFeed) marker points\n              type: object\n            episode_versions:\n              description: Only visible if the credential has write privileges on the series\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of episode versions for this episode\n              type: object\n            images:\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: Both the cover image and the cascaded cover image for the season\n              type: object\n            season:\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              title: The season the episode belongs to\n              type: object\n            segment_lists:\n              description: Only visible if the credential has write privileges on the series\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of segment lists directly attached to the episode\n              type: object\n            series:\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              title: The series an episode belongs to\n              type: object\n            taggings:\n              deprecated: true\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of associations linking tags to the episodes.\n              type: object\n            tags:\n              deprecated: true\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of tags associated with the episodes\n              type: object\n          type: object\n        type:\n          description: The type of resource. This is always `episodes`\n          example: episodes\n          type: string\n      type: object\n    Image:\n      properties:\n        attributes:\n          properties:\n            bucket_id:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `bucket` in a future update.\u003cbr/\u003e\n                The ID of the owning entity\n              example: 687282a1-faf7-4d37-8f4a-cbddedf6db8f\n              format: uuid\n              type: string\n            bucket_type:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `bucket` in a future update.\u003cbr/\u003e\n                The type of the owning entity\n              enum:\n                - AdRepAccount\n                - Agency\n                - Network\n                - Series\n                - User\n              type: string\n            created_at:\n              format: date-time\n              type: string\n            crop_data:\n              properties:\n                height:\n                  description: The height of the crop area\n                  example: 3000\n                  format: float\n                  type: number\n                left:\n                  description: The left coordinate of the crop area\n                  example: 100\n                  format: float\n                  type: number\n                top:\n                  description: The top coordinate of the crop area\n                  example: 150\n                  format: float\n                  type: number\n                width:\n                  description: The width of the crop area\n                  example: 3000\n                  format: float\n                  type: number\n              title: The crop area within the original media asset\n              type: object\n            status:\n              description: |\n                The current value of the image state machine. It starts with `uploaded` and\n                transitions to `processing` once a worker has picked it up. If all variations and\n                styles of an image have been successfully created, the status becomes `valid`. In\n                case of a problem during the processing it changes to `invalid`.\n              enum:\n                - invalid\n                - processing\n                - uploaded\n                - valid\n              type: string\n            updated_at:\n              format: date-time\n              type: string\n          type: object\n        id:\n          example: c1fbb1bf-45b1-4803-986e-123166f7f427\n          format: uuid\n          type: string\n        relationships:\n          properties:\n            media_assets:\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: All media assets available for this image\n              type: object\n          type: object\n        type:\n          description: The type of resource. This is always `images`\n          example: images\n          type: string\n      type: object\n    Links:\n      properties:\n        first:\n          description: A URL to retrieve the first page of data keeping the provided page size\n          type: string\n        last:\n          description: A URL to retrieve the last page of data keeping the provided page size\n          type: string\n        next:\n          description: A URL to retrieve the next page of data keeping the provided page size\n          type: string\n        prev:\n          description: A URL to retrieve the previous page of keeping using the provided page size\n          type: string\n        self:\n          description: A URL to retrieve the collection as the primary data\n          type: string\n      type: object\n    MediaAsset:\n      properties:\n        attributes:\n          properties:\n            attachment_id:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `attachment` in a future update.\u003cbr/\u003e\n                The ID of the entity this media asset is attached to\n              example: 09a93847-d5bf-47b4-90d6-854e95011951\n              format: uuid\n              type: string\n            attachment_type:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `attachment` in a future update.\u003cbr/\u003e\n                The type of the entity this media asset is attached to\n              enum:\n                - Image\n                - Segment\n                - SegmentList\n              type: string\n            cdn_url:\n              description: The CDN-URL where the media asset is available\n              type: string\n            content_type:\n              description: The MIME type of the media asset\n              example: image/jpeg\n              type: string\n            created_at:\n              format: date-time\n              type: string\n            file_name:\n              description: |\n                The filename of the media asset without any path components.\n              type: string\n            file_size:\n              description: The size in bytes of the media asset\n              example: 2544307\n              type: integer\n            size_height:\n              description: The height in pixels of the media asset, if the media asset is an image\n              example: 1839\n              type: integer\n            size_width:\n              description: The width in pixels of the media asset, if the media asset is an image\n              example: 1839\n              type: integer\n            style:\n              description: |\n                The style of the media asset. A media asset is part of a collection of related media files,\n                for example an image or an episode (audio). Images usually have differently sized versions,\n                and episodes can have different audio formats.\n              enum:\n                - info\n                - itunes\n                - medium\n                - original\n                - regular\n                - square-400\n                - square-640\n                - square-888\n                - square-3000\n                - stripped-original\n                - thumb\n                - waveform_data\n              example: regular\n              type: string\n            updated_at:\n              format: date-time\n              type: string\n          type: object\n        id:\n          example: c1fbb1bf-45b1-4803-986e-123166f7f427\n          format: uuid\n          type: string\n        type:\n          description: The type of resource. This is always `media_assets`\n          example: media_assets\n          type: string\n      type: object\n    Network:\n      properties:\n        attributes:\n          properties:\n            copyright:\n              description: The copyright of the network\n              type: string\n            created_at:\n              format: date-time\n              type: string\n            description:\n              description: The description of the network eventually in HTML format\n              example: \u003cp\u003e\u003cstrong\u003eSome\u003c/strong\u003e funny example.\u003c/p\u003e\n              type: string\n            description_is_html:\n              description: Determines whether `description` is in HTML format or plain.\n              type: boolean\n            description_plain:\n              description: |\n                The description with all HTML markup removed. If the description does not contain markup\n                this is identitcal to `description`.\n              example: Some funny example.\n              type: string\n            facebook_url:\n              description: Where to find this network on Facebook\n              type: string\n            instagram_url:\n              description: Where to find this network on Instagram\n              type: string\n            linkedin_url:\n              description: Where to find the network on LinkedIn\n              type: string\n            name:\n              description: The name of the network\n              type: string\n            public_email:\n              description: A public point of contact through email\n              type: string\n            public_page_enabled:\n              description: |\n                If this is `true`, a public web page for this network is available under\n                `https://art19.com/networks/{slug}`, where `slug` is the value of the corresponding attribute.\n                This public page provides details about the network as well as descriptive links to all its\n                series' public pages. If this is `false`, no such public page is available.\n              type: boolean\n            slug:\n              description: |\n                The unique slug for the network also used on its public page for example.\n                This value is unique system-wide amongst all networks _and_ series.\n              type: string\n            tumblr_url:\n              description: Where to find the network on Tumblr\n              type: string\n            twitter_url:\n              description: Where to find the network on Twitter\n              type: string\n            updated_at:\n              format: date-time\n              type: string\n            website_url:\n              description: A public website for the network\n              type: string\n          type: object\n        id:\n          example: c1fbb1bf-45b1-4803-986e-123166f7f427\n          format: uuid\n          type: string\n        relationships:\n          properties:\n            cover_image:\n              description: The cover image for the network\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              type: object\n            images:\n              description: |\n                A collection of images linked to the network. This currently only includes\n                the cover image for the network.\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              type: object\n            parent:\n              description: The parent network of the network\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              type: object\n            series:\n              description: List of series within the network which are accessible to you\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              type: object\n          type: object\n        type:\n          description: The type of resource. This is always `networks`\n          example: networks\n          type: string\n      type: object\n    Person:\n      properties:\n        attributes:\n          properties:\n            avatar_id:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `avatar` in a future update.\u003cbr/\u003e\n                The image ID of an avatar or head shot of the person. Details can be\n                retrieved using the `/images` endpoint.\n              example: 686ae786-6bbe-42f4-9a51-9e1cf207fc8b\n              format: uuid\n              type: string\n            biography:\n              description: The biography of the person without markup.\n              type: string\n            born:\n              description: The birthday of the person\n              format: date\n              type: string\n            created_at:\n              format: date-time\n              type: string\n            died:\n              description: The day of death of the person\n              format: date\n              type: string\n            first_name:\n              description: The first name of the person\n              type: string\n            from_country:\n              description: The country the person is from\n              type: string\n            from_locality:\n              description: The locality or city the person is from\n              type: string\n            from_region:\n              description: The region/state/province the person is from\n              type: string\n            last_name:\n              description: The last name of the person\n              type: string\n            public_email:\n              description: The public email contact for the person\n              type: string\n            updated_at:\n              format: date-time\n              type: string\n          type: object\n        id:\n          example: c1fbb1bf-45b1-4803-986e-123166f7f427\n          format: uuid\n          type: string\n        relationships:\n          properties:\n            avatar:\n              description: |\n                The avatar or head shot of the person. Details can be retrieved using the `/images` endpoint.\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              type: object\n          type: object\n        type:\n          description: The type of resource. This is always `people`\n          example: people\n          type: string\n      type: object\n    ResourceIdentifier:\n      properties:\n        id:\n          description: The ID of the resource\n          example: 7aa45628-4df2-4f90-8092-2c7a59bf7e9c\n          format: uuid\n          type: string\n        type:\n          description: The type of the resource\n          type: string\n      type: object\n    ResourceLink:\n      description: Links related to the retrieved resource\n      properties:\n        self:\n          description: A URL to retrieve the resource as the primary data\n          type: string\n      title: Links\n      type: object\n    Season:\n      properties:\n        attributes:\n          properties:\n            cascaded_cover_image_id:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `cascaded_cover_image` in a future update.\u003cbr/\u003e\n                The image ID of the cover art for this season. If there is no specific cover for the season,\n                the image ID of the series' cover art will be returned.\n                The `/images` endpoint provideds details to the image.\n              example: ec8f13bf-77c0-40fe-933a-8c088c16bc17\n              format: uuid\n              type: string\n            cover_image_id:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `cover_image` in a future update.\u003cbr/\u003e\n                The image ID of the cover art for this season. The `/images` endpoint provideds details to the image.\n              example: ec8f13bf-77c0-40fe-933a-8c088c16bc17\n              format: uuid\n              type: string\n            created_at:\n              format: date-time\n              type: string\n            description:\n              description: The description of the season eventually in HTML format\n              example: \u003cp\u003e\u003cstrong\u003eSome\u003c/strong\u003e funny example.\u003c/p\u003e\n              type: string\n            description_is_html:\n              description: Determines whether `description` is in HTML format or plain.\n              type: boolean\n            description_plain:\n              description: |\n                The description with all HTML markup removed. If the description does not contain markup\n                this is identitcal to `description`.\n              example: Some funny example.\n              type: string\n            first_released_episode_id:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `first_released_episode` in a future update.\u003cbr/\u003e\n                The ID of the first released episode within the season\n              example: 73a97f1a-5c3c-4226-8ab3-1d7f9e486e4d\n              format: uuid\n              type: string\n            last_released_episode_id:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `last_released_episode` in a future update.\u003cbr/\u003e\n                The ID of the most recently released episode within the season\n              example: a50b7a22-2128-46d7-b3df-2b308df21bf0\n              format: uuid\n              type: string\n            season_number:\n              description: The number of the season. This could be `null` as well.\n              example: 1\n              type: integer\n            sort_title:\n              description: |\n                The title of the season modified for sorting. This converts all characters to\n                lower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.\n              example: awesome season\n              type: string\n            status:\n              description: The current status of the season\n              enum:\n                - active\n                - inactive\n              type: string\n            title:\n              description: The title of the season\n              example: The Aweseom Season\n              type: string\n            updated_at:\n              format: date-time\n              type: string\n          type: object\n        id:\n          example: c1fbb1bf-45b1-4803-986e-123166f7f427\n          format: uuid\n          type: string\n        relationships:\n          properties:\n            cascaded_cover_image:\n              description: |\n                The cover art for this season. If there is no specific cover for the season,\n                the cover image of the series' cover art will be returned.\n                The `/images` endpoint provideds details to the image.\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              type: object\n            classification_inclusions:\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of classifications associated with the season\n              type: object\n            cover_image:\n              description: The cover image for the season\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              type: object\n            credits:\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of credits given to people in the season\n              type: object\n            episodes:\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of published and released episodes with an actual media file within the season\n              type: object\n            first_released_episode:\n              description: The first released episode within the season\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              type: object\n            images:\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: Both the cover image and the cascaded cover image for the season\n              type: object\n            last_released_episode:\n              description: The most recently released episode within the season\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              type: object\n            series:\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              title: The series the season belongs to\n              type: object\n            taggings:\n              deprecated: true\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of associations linking tags to the season.\n              type: object\n            tags:\n              deprecated: true\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of tags associated with the season\n              type: object\n          type: object\n        type:\n          description: The type of resource. This is always `seasons`\n          example: seasons\n          type: string\n      type: object\n    Series:\n      properties:\n        attributes:\n          properties:\n            amazon_subscription_url:\n              description: The Amazon Music subscription URL\n              type: string\n            castbox_subscription_url:\n              description: The CastBox subscription URL\n              type: string\n            cover_image_id:\n              deprecated: true\n              description: |\n                This will be replaced by the relationship `cover_image` in a future update.\u003cbr/\u003e\n                The image ID of the cover art for this series. The `/images` endpoint provideds details to the image.\n              example: ec8f13bf-77c0-40fe-933a-8c088c16bc17\n              format: uuid\n              type: string\n            created_at:\n              format: date-time\n              type: string\n            description:\n              description: The description of the series eventually in HTML format\n              example: \u003cp\u003e\u003cstrong\u003eSome\u003c/strong\u003e funny example.\u003c/p\u003e\n              type: string\n            description_is_html:\n              description: Determines whether `description` is in HTML format or plain.\n              type: boolean\n            description_plain:\n              description: |\n                The description with all HTML markup removed. If the description does not contain markup\n                this is identitcal to `description`.\n              example: Some funny example.\n              type: string\n            facebook_url:\n              description: The URL of the series on Facebook\n              type: string\n            google_subscription_url:\n              description: The Google subscription URL\n              type: string\n            iheart_subscription_url:\n              description: The iHeartRadio subscription URL\n              type: string\n            instagram_url:\n              description: The URL of the series on Instagram\n              type: string\n            itunes_subscription_badge_enabled:\n              description: If `null` or `true`, the ART19 web player will render an iTunes subscription badge\n              type: boolean\n            itunes_subscription_url:\n              description: The Apple iTunes subscription URL\n              type: string\n            linkedin_url:\n              description: The URL of the series on LinkedIn\n              type: string\n            pocket_casts_subscription_url:\n              description: The Pocket Casts subscription URL\n              type: string\n            podcast_subscription_url:\n              description: The URL of the RSS feed\n              example: https://rss.art19.com/greatest-show-ever\n              type: string\n            public_page_enabled:\n              description: |\n                If this is `true`, a public web page for this series is available under\n                `https://art19.com/shows/{slug}`, where `slug` is the value of the corresponding attribute.\n                This public page provides details about the series as well as descriptive links to all its\n                episodes. If this is `false`, no such public page is available.\n              type: boolean\n            public_title:\n              description: If present, this is the preferred title for the series in the RSS Feed\n              type: string\n            radio_public_subscription_url:\n              description: The RadioPublic subscription URL\n              type: string\n            rss_author:\n              description: The author responsible for the RSS feed\n              type: string\n            rss_copyright:\n              description: The copyright disclaimer for the contents of the show, appearing after a © symbol, e.g. `2020 ART19, Inc.`\n              type: string\n            rss_email:\n              description: The pubic point of contact for the show\n              type: string\n            rss_owner:\n              description: The name of the contact for the show\n              type: string\n            slug:\n              description: |\n                This slug is unique over all series and networks system wide and is used to access the series' feed\n                as well as its eventually enabled public page on ART19.\n              example: greatest-show-ever\n              type: string\n            sort_title:\n              description: |\n                The title of the series modified for sorting. This converts all characters to\n                lower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.\n              example: greatest show ever\n              type: string\n            spotify_subscription_badge_enabled:\n              description: If `null` or `true`, the ART19 web player will render a Spotify subscription badge\n              type: boolean\n            spotify_subscription_url:\n              description: The Spotify subscription URL\n              type: string\n            status:\n              description: The status of the series\n              enum:\n                - active\n                - inactive\n              type: string\n            stitcher_subscription_badge_enabled:\n              description: If `null` or `true`, the ART19 web player will render a Stitcher subscription badge\n              type: boolean\n            stitcher_subscription_url:\n              description: The Stitcher subscription URL\n              type: string\n            title:\n              description: The title of the series\n              example: The greatest show ever\n              type: string\n            tumblr_url:\n              description: The URL of the series on Tumblr\n              type: string\n            tune_in_subscription_url:\n              description: The TuneIn subscription URL\n              type: string\n            twitter_url:\n              description: The URL of the series on Twitter\n              type: string\n            type:\n              description: The type of the series\n              enum:\n                - Series\n              type: string\n            updated_at:\n              format: date-time\n              type: string\n            website_url:\n              description: The custom website URL for the series\n              type: string\n          type: object\n        id:\n          example: c1fbb1bf-45b1-4803-986e-123166f7f427\n          format: uuid\n          type: string\n        relationships:\n          properties:\n            classification_inclusions:\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of classifications associated with the series\n              type: object\n            cover_image:\n              description: The cover image for the series\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              type: object\n            credits:\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of credits given to people in the series\n              type: object\n            episodes:\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of published and released episodes with an actual media file\n              type: object\n            images:\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: The cover image for the series\n              type: object\n            network:\n              properties:\n                data:\n                  $ref: \"#/components/schemas/ResourceIdentifier\"\n              title: The network the series belongs to\n              type: object\n            seasons:\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of seasons in the series\n              type: object\n            taggings:\n              deprecated: true\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of associations linking tags to the series\n              type: object\n            tags:\n              deprecated: true\n              properties:\n                data:\n                  items:\n                    $ref: \"#/components/schemas/ResourceIdentifier\"\n                  type: array\n              title: A list of tags associated with the series\n              type: object\n          type: object\n        type:\n          description: The type of resource. This is always `series`\n          example: series\n          type: string\n      type: object\n  securitySchemes:\n    api_key:\n      description: |\n        Authentication is **REQUIRED** for all APIs using an API token, which is placed into an HTTP Authorization header.\n\n        This token is generated by ART19 Support and consists of a shared secret placed in the `token`\n        parameter and a credential ID placed in the `credential` parameter.\n\n        The final Authorization header will look like this:\n\n        ```\n        Authorization: Token token=\"V2h5LCBoZWxsbyB0aGVyZSE=\", credential=\"8f71320c-fdbc-4934-b3b9-f1eda4fb39a9\"\n        ```\n      in: header\n      name: Authorization\n      type: apiKey\n"
		}
	},
	"Error": "parse: paths: /series: get: : parameters: parse parameter \"sort\": schema: parse default: expected type \"array\", got \"string\""
}