{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mrin9/RapiDoc"
		},
		"file": {
			"name": "examples.yaml",
			"path": "docs/specs/examples.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  title: Providing Examples\n  description:  Providing Examples\n  version: 1.0.0\npaths:\n  /multiple-examples-in-request-parameters/{path-param-1}/{path-param-2}:\n    get:\n      tags:\n        - Providing Examples\n      parameters:\n      - name: 'path-param-1'\n        in: 'path'\n        schema:\n          type: 'string'\n          default: \"p1-opt-2\"  \n        examples:\n          example1: \n            value: \"p1-opt-1\"\n          example2:\n            value: \"p1-opt-2\"\n      - name: 'path-param-2'\n        in: 'path'\n        schema:\n          type: 'string'\n        examples:\n          example1: \n            value: \"p2-opt-1\"\n          example2:\n            value: \"p2-opt-2\"\n      - name: 'age'\n        description: Single Example\n        in: 'query'\n        schema:\n          type: 'number'\n        example: 24\n      - name: 'country-code'\n        description: Multiple examples _(Notice `us` do not have a summary)_\n        in: 'query'\n        schema:\n          type: 'string'\n        examples:\n          example1: \n            value: \"uk\"\n            summary: \"United Kingdom\"\n          example2:\n            value: \"us\"\n          example3:\n            value: \"ch\"\n            summary: \"China\"\n      - name: 'marital-status'\n        in: 'query'\n        schema:\n          type: 'string'\n          default: \"unmarried\"  \n        examples:\n          example1: \n            value: \"married\"\n          example2:\n            value: \"unmarried\"\n          example3:\n            value: \"widowed\"\n      - name: luckyNumbers\n        in: query\n        schema:\n          type: array\n          items:\n            type: number\n          minItems: 4\n          maxItems: 4\n          examples:\n            - [10]\n            - [10, 20, 30, 40]\n\n  /multiple-examples-by-response-type:\n    get:\n      description: Multiple Examples provide for each media-type (`application/json` or `application/json`) \n      tags:\n        - Providing Examples\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  age:\n                    description: Person Age\n                    type: integer\n                  fullName:\n                    description: Person Full name\n                    type: object\n                    properties:\n                      firstName:\n                        description: First name\n                        type: string\n                      lastName:\n                        description: Last name\n                        type: string\n              examples:\n                valid-json:\n                  summary: Example with Valid JSON String\n                  description: If valid JSON is provided in the example, It will be displayed in JSON tree form. Allowing copy/expand/collapse functionality\n                  value: |\n                    {\n                      \"person\": {\n                        \"fullName\": {\n                          \"firstName\": \"Mickey\",\n                          \"lastName\": \"Mouse\"\n                        },\n                        \"age\": \"9\"\n                      }\n                    }\n                invalid-json:\n                  summary: Example with Invalid JSON String\n                  description: Invalid JSON is displayed in text-area as is\n                  value: |\n                    {\n                      person: {\n                        fullName: {\n                          firstName: Donald,\n                          lastName: Duck\n                        },\n                        age: 10\n                      }\n                    }\n                as-object:    \n                  summary: Example specified as object\n                  value:\n                    fullName:\n                      firstName: Donald\n                      lastName: Duck       \n                    age: 10\n            application/xml:\n              schema:\n                type: object\n                properties:\n                  age:\n                    description: Person Age\n                    type: integer\n                  fullName:\n                    description: Person Full name\n                    type: object\n                    properties:\n                      firstName:\n                        description: First name\n                        type: string\n                      lastName:\n                        description: Last name\n                        type: string\n              examples:\n                example-1:\n                  description: Exmple 1 Description\n                  value: |\n                    \u003croot\u003e\n                      \u003cperson\u003e\n                        \u003cfullName\u003e\n                          \u003cfirstName\u003e Mickey \u003c/firstName\u003e\n                          \u003clastName\u003e Mouse \u003c/lastName\u003e\n                        \u003c/fullName\u003e\n                        \u003cage\u003e 9 \u003c/age\u003e\n                      \u003c/person\u003e\n                    \u003c/root\u003e\n  /single-example-by-response-type:\n    get:\n      summary: Single Example at schema Level\n      tags:\n        - Providing Examples\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  age:\n                    description: Person Age\n                    type: integer\n                  fullName:\n                    description: Person Full name\n                    type: object\n                    properties:\n                      firstName:\n                        description: First name\n                        type: string\n                      lastName:\n                        description: Last name\n                        type: string\n              example: |\n                {\n                  age: 10,\n                  fullName: {\n                    firstName: Donald,\n                    lastName: Duck\n                  }\n                }\n  /example-with-array-1:\n    get:\n      summary: Single Example at schema Level\n      tags:\n        - Providing Examples\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArrayOfInt-1\"\n  /example-with-array-2:\n    get:\n      summary: Single Example at schema Level\n      tags:\n        - Providing Examples\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArrayOfInt-2\"\n\n  /object-example-for-a-schema:\n    get:\n      summary: Single example having invalid JSON, under a Schema\n      tags:\n        - Providing Examples\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  age:\n                    description: Person Age\n                    type: integer\n                  fullName:\n                    description: Person Full name\n                    type: object\n                    properties:\n                      firstName:\n                        description: First name\n                        type: string\n                      lastName:\n                        description: Last name\n                        type: string\n                example: |\n                  {\n                    person: {\n                      fullName: {\n                        firstName: Donald,\n                        lastName: Duck\n                      },\n                      age: 10\n                    }\n                  }\n  /array-example-for-a-schema:\n    get:\n      summary: Single Example of Type Array Under a Schema\n      tags:\n        - Providing Examples\n      responses:\n        '200':\n          description: An array of currency codes\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/currencies\"\n  /example-with-simple-object:\n    get:\n      summary: Single Example of Type Array Under a Schema\n      tags:\n        - Providing Examples\n      responses:\n        '200':\n          description: An array of currency codes\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PersonObject\"\n  /per-field-example-with-root-as-object:\n    get:\n      summary: Root node of the example is an object. and the object is constituted using field level example\n      tags:\n        - Providing Examples\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  age:\n                    description: Person Age\n                    type: integer\n                    example: 8\n                  fullName:\n                    description: Person Full name\n                    type: object\n                    properties:\n                      firstName:\n                        description: First name\n                        type: string\n                        example: 'Daisy'\n                      lastName:\n                        description: Last name\n                        type: string\n                        example: 'Duck'\n                  dependents:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        dependentName:\n                          type: string\n                        relation:\n                          type: string\n                        age:\n                          type: number\n  /per-field-example-with-root-as-array:\n    get:\n      summary: Root node of the example is an array. and the object is constituted using field level example\n      tags:\n        - Providing Examples\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    dependentName:\n                      type: string\n                    relation:\n                      type: string\n                    age:\n                      type: number\n                  example:\n                    dependentName: Natasha\n                    relation: wife\n                    age: 28    \n  /example-with-refs:\n    get:\n      description: |\n        When a Schema definition is `provided` as a ref  \n        (provide the example at schema-level)\n      tags:\n        - Providing Examples\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/cost'\n              examples:\n                USD:\n                  description: Cost in `US Dollars`\n                  value: |\n                    {\n                      amount: 10,\n                      currency: USD\n                    }\n                INR:\n                  description: Cost in `Indian Rupees`\n                  value: |\n                    {\n                      amount: 700,\n                      currency: INR\n                    }\n  /multiple-example-in-request-body:\n    post:\n      summary: Request body with multiple examples\n      tags:\n        - Providing Examples\n      requestBody:\n        description: Request body containing **multiple** examples\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/cost'\n            examples:\n              USD:\n                description: Cost in `US Dollars`\n                value: |\n                  {\n                    amount: 10,\n                    currency: USD\n                  }\n              INR:\n                description: Cost in `Indian Rupees`\n                value: |\n                  {\n                    amount: 700,\n                    currency: INR\n                  }\n  /object-containg-array-property-with-example:\n    get:\n      summary: Object schema with array type property containing example\n      tags:\n        - Providing Examples\n      responses:\n        200:\n          description: Object with array type property containing example\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ObjectWithArrayPropExample\"\n  /examples-anyOf:\n    get:\n      tags:\n        - Providing Examples\n      summary: AnyOf schemas with examples as part of the subschema\n      responses:\n        '200':\n          description: AnyOf schemas with examples as part of the subschema\n          content:\n            application/problem+json:\n              schema:\n                anyOf:\n                  - title: AnyOf example 1\n                    description: First example\n                    type: object\n                    properties:\n                      foo:\n                        type: string\n                      bar:\n                        type: integer\n                    example:\n                      foo: foo\n                      bar: 42\n                  - title: Second anyOf\n                    description: Another example\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        foo:\n                          type: string\n                        quux:\n                          type: array\n                          items:\n                            type: number\n                    example:\n                      foo: foo\n                      quux: [ 42, 24 ]\n                  - title: No example defined\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        foo:\n                          type: string\n                        quux:\n                          type: array\n                          items:\n                            type: number\n  /examples-anyOf-with-general-properties:\n    get:\n      tags:\n        - Providing Examples\n      summary: AnyOf schemas with general properties \n      responses:\n        '200':\n          description: AnyOf schemas with general properties\n          content:\n            application/problem+json:\n              schema:\n                title: A composed object\n                type: object\n                properties:\n                  common:\n                    type: string\n                  other:\n                    type: number\n                anyOf:\n                  - title: Schema 1\n                    type: object\n                    properties:\n                      foo:\n                        type: string\n                      bar:\n                        type: integer\n                    example:\n                      foo: foo\n                      bar: 42\n                  - title: Second schema\n                    type: object\n                    properties:\n                      baz:\n                        type: string\n                        format: url\n  /examples-oneOf:\n    get:\n      tags:\n        - Providing Examples\n      summary: OneOf schema with examples as part of the subschema\n      responses:\n        '200':\n          description: OneOf schema with examples as part of the subschema\n          content:\n            application/problem+json:\n              schema:\n                oneOf:\n                  - title: Schema 1\n                    type: object\n                    properties:\n                      foo:\n                        type: string\n                      bar:\n                        type: integer\n                    example:\n                      foo: foo\n                      bar: 42\n                  - title: Second schema\n                    type: object\n                    properties:\n                      baz:\n                        type: string\n                        format: url\n  /examples-allOf:\n    get:\n      tags:\n        - Providing Examples\n      summary: AllOf schemas with examples as part of the subschema\n      responses:\n        '200':\n          description: AllOf schemas with examples as part of the subschema\n          content:\n            application/problem+json:\n              schema:\n                allOf:\n                  - title: Schema 1\n                    type: object\n                    properties:\n                      foo:\n                        type: string\n                      bar:\n                        type: integer\n                  - title: Second schema\n                    type: object\n                    properties:\n                      baz:\n                        type: string\n                        format: url\n  /examples-allOf-anyOf:\n    get:\n      tags:\n        - Providing Examples\n      summary: Combination of allOf \u0026 nested anyOf schemas\n      responses:\n        '200':\n          description: Combination of allOf \u0026 nested anyOf schemas\n          content:\n            application/problem+json:\n              schema:\n                allOf:\n                  - title: Schema 1\n                    type: object\n                    properties:\n                      foo:\n                        type: string\n                      bar:\n                        type: integer\n                  - title: Second schema\n                    anyOf:\n                      - type: object\n                        properties:\n                          baz:\n                            type: string\n                            format: url\n                      - type: object\n                        properties:\n                          foobar:\n                            type: string\ncomponents:\n  schemas:\n    cost:\n      type: object\n      properties:\n        amount:\n          type: integer\n          description: Amount\n        currency:\n          description: Currency Code\n          type: string\n    currencies:\n      type: array\n      items:\n        type: object\n        properties:\n          currencyCode:\n            type: string\n          evaluationDate:\n            type: string\n            format: date-time\n      example:\n        - currencyCode: USD\n          evaluationDate: '2017-07-21T17:32:28Z'\n        - currencyCode: INR\n          evaluationDate: '2017-07-21T17:32:28Z'\n    ArrayOfInt-1:\n      type: array\n      items:\n        type: integer\n        format: int64\n      example: [1, 2, 3]\n    ArrayOfInt-2:\n      type: array\n      items:\n        type: integer\n        format: int64\n        example: 1\n    PersonObject:\n      type: object\n      properties:\n        name:\n          type: string\n        age:\n          type: integer\n      example:\n        name: name-1\n        age: 1\n    ObjectWithArrayPropExample:\n      type: object\n      properties:\n        numberProp:\n          type: number\n          example: 1000\n        stringProp:\n          type: string\n          enum: [value0, value1]\n        arrayProp:\n          type: array\n          items:\n            type: number\n          example: [0, 1, 2]\n"
		}
	},
	"Error": "parse: paths: /multiple-example-in-request-body: post: : responses: no responses"
}