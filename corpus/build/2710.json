{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/imfht/flaskapps"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "connexion-master/tests/fixtures/simple/openapi.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  title: '{{title}}'\n  version: '1.0'\npaths:\n  '/greeting/{name}':\n    post:\n      summary: Generate greeting\n      description: Generates a greeting message.\n      operationId: fakeapi.hello.post_greeting\n      responses:\n        '200':\n          description: greeting response\n          content:\n            'application/json':\n              schema:\n                type: object\n      parameters:\n        - name: name\n          in: path\n          description: Name of the person to greet.\n          required: true\n          schema:\n            type: string\n  '/greeting/{name}/{remainder}':\n    post:\n      summary: Generate greeting and collect the remainder of the url\n      description: Generates a greeting message and includes the rest of the url.\n      operationId: fakeapi.hello.post_greeting_url\n      responses:\n        '200':\n          description: greeting response with url\n          content:\n            'application/json':\n              schema:\n                type: object\n      parameters:\n        - name: name\n          in: path\n          description: Name of the person to greet.\n          required: true\n          schema:\n            type: string\n        - name: remainder\n          in: path\n          description: the rest of the url\n          required: true\n          schema:\n            type: string\n            format: path\n  '/greetings/{name}':\n    get:\n      summary: Generate greeting\n      description: Generates a greeting message with custom mimetype\n      operationId: fakeapi.hello.get_greetings\n      responses:\n        '200':\n          description: greeting response\n          content:\n            application/x.connexion+json:\n              schema:\n                type: object\n      parameters:\n        - name: name\n          in: path\n          description: Name of the person to greet.\n          required: true\n          schema:\n            type: string\n  '/bye/{name}':\n    get:\n      summary: Generate goodbye\n      description: Generates a goodbye message.\n      operationId: fakeapi.hello.get_bye\n      responses:\n        '200':\n          description: goodbye response\n          content:\n            text/plain:\n              schema:\n                type: string\n        default:\n          description: unexpected error\n      parameters:\n        - name: name\n          in: path\n          description: Name of the person to say bye.\n          required: true\n          schema:\n            type: string\n  /flask_response_tuple:\n    get:\n      summary: Return flask response tuple\n      description: Test returning a flask response tuple\n      operationId: fakeapi.hello.get_flask_response_tuple\n      responses:\n        '200':\n          description: json response\n          content:\n            application/json:\n              schema:\n                type: object\n  '/list/{name}':\n    get:\n      summary: Generate a greeting in a list\n      description: Generate a greeting in a list\n      operationId: fakeapi.hello.get_list\n      responses:\n        '200':\n          description: a greeting in a list\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n      parameters:\n        - name: name\n          in: path\n          description: Name of the person to say hello to.\n          required: true\n          schema:\n            type: string\n  /test_no_content_response:\n    get:\n      operationId: fakeapi.hello.test_no_content_response\n      responses:\n        '204':\n          description: No content returned\n  /multimime:\n    get:\n      summary: Has multiple content types\n      description: Has multiple content types\n      operationId: fakeapi.hello.multimime\n      responses:\n        '200':\n          description: goodbye response\n          content:\n            application/json:\n              schema:\n                type: string\n            application/xml:\n              schema:\n                type: string\n  /empty:\n    get:\n      summary: Returns empty response\n      description: Returns empty response\n      operationId: fakeapi.hello.empty\n      responses:\n        '204':\n          description: empty\n  /exploded-deep-object-param:\n    get:\n      summary: Returns dict response\n      description: Returns dict response\n      operationId: fakeapi.hello.test_exploded_deep_object_param\n      parameters:\n        - name: id\n          required: true\n          in: query\n          style: deepObject\n          explode: true\n          schema:\n            type: object\n            additionalProperties: false\n            properties:\n              foo:\n                type: string\n              fooint:\n                type: integer\n              fooboo:\n                type: boolean\n              foo4:\n                type: string\n                default: blubb\n      responses:\n        '200':\n          description: object response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  foo:\n                    type: string\n                  foo4:\n                    type: string\n  /exploded-deep-object-param-additional-properties:\n    get:\n      summary: Returns dict response with flexible properties\n      description: Returns dict response with flexible properties\n      operationId: fakeapi.hello.test_exploded_deep_object_param_additional_properties\n      parameters:\n        - name: id\n          required: false\n          in: query\n          style: deepObject\n          explode: true\n          schema:\n            type: object\n            additionalProperties:\n              type: string\n      responses:\n        '200':\n          description: object response\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n  /nested-exploded-deep-object-param:\n    get:\n      summary: Returns nested dict response\n      description: Returns nested dict response\n      operationId: fakeapi.hello.test_nested_exploded_deep_object_param\n      parameters:\n        - name: id\n          required: true\n          in: query\n          style: deepObject\n          explode: true\n          schema:\n            type: object\n            properties:\n              foo:\n                type: object\n                properties:\n                  foo2:\n                    type: string\n                  foo3:\n                    type: string\n                    default: blubb\n              foofoo:\n                type: string\n      responses:\n        '200':\n          description: object response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  foo:\n                    type: object\n                    properties:\n                      foo2:\n                        type: string\n                      foo3:\n                        type: string\n  /test-redirect-endpoint:\n    get:\n      summary: Tests handlers returning flask.Response objects\n      operationId: fakeapi.hello.test_redirect_endpoint\n      responses:\n        '302':\n          description: 302 Found\n  /test-redirect-response-endpoint:\n    get:\n      summary: Tests handlers returning flask.Response objects\n      operationId: fakeapi.hello.test_redirect_response_endpoint\n      responses:\n        '302':\n          description: 302 Found\n  /test-default-object-body:\n    post:\n      summary: Test if default object body param is passed to handler.\n      operationId: fakeapi.hello.test_default_object_body\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              x-body-name: stack\n              $ref: '#/components/schemas/new_stack'\n              default:\n                image_version: default_image\n  /test-nested-additional-properties:\n    post:\n      summary: Test if nested additionalProperties are cast\n      operationId: fakeapi.hello.test_nested_additional_properties\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                nested:\n                  type: object\n                  properties: {}\n                  additionalProperties:\n                    type: boolean\n  /test-default-integer-body:\n    post:\n      summary: Test if default integer body param is passed to handler.\n      operationId: fakeapi.hello.test_default_integer_body\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              x-body-name: stack_version\n              type: integer\n              format: int32\n              example: 1\n              default: 1\n  /test-empty-object-body:\n    post:\n      summary: Test if empty object body param is passed to handler.\n      operationId: fakeapi.hello.test_empty_object_body\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              x-body-name: stack\n              type: object\n  /resolver-test/method:\n    get:\n      summary: Test class instance method\n      operationId: fakeapi.hello.class_instance.test_method\n      responses:\n        '200':\n          description: OK\n  /resolver-test/classmethod:\n    get:\n      summary: Test class instance method\n      operationId: fakeapi.hello.DummyClass.test_classmethod\n      responses:\n        '200':\n          description: OK\n  /test_parameter_validation:\n    get:\n      operationId: fakeapi.hello.test_parameter_validation\n      parameters:\n        - name: date\n          in: query\n          schema:\n            type: string\n            format: date\n        - name: int\n          in: query\n          schema:\n            type: integer\n        - name: bool\n          in: query\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: OK\n  /test_apikey_query_parameter_validation:\n    get:\n      operationId: fakeapi.hello.test_apikey_query_parameter_validation\n      parameters:\n        - name: name\n          in: query\n          schema:\n            type: string\n      security:\n        - api_key: []\n      responses:\n        '200':\n          description: OK\n  /test_required_query_param:\n    get:\n      operationId: fakeapi.hello.test_required_query_param\n      parameters:\n        - name: 'n'\n          in: query\n          required: true\n          schema:\n            type: number\n      responses:\n        '200':\n          description: OK\n\n  /test_array_csv_form_param:\n    post:\n      operationId: fakeapi.hello.test_array_csv_form_param3\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              default:\n                items: [\"squash\", \"banana\"]\n              x-body-name: items\n              properties:\n                items:\n                  type: array\n                  items:\n                    type: string\n            encoding:\n              items:\n                style: form\n                explode: false\n      responses:\n        200:\n          description: OK\n\n  /test_array_pipes_form_param:\n    post:\n      operationId: fakeapi.hello.test_array_pipes_form_param3\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              x-body-name: items\n              properties:\n                items:\n                  type: array\n                  items:\n                    type: integer\n              required:\n              - items\n            encoding:\n              items:\n                style: pipeDelimited\n      responses:\n        200:\n          description: OK\n\n  /test_array_csv_query_param:\n    get:\n      operationId: fakeapi.hello.test_array_csv_query_param\n      parameters:\n        - name: items\n          in: query\n          description: An comma separated array of items\n          style: form\n          explode: false\n          schema:\n            type: array\n            default: [\"squash\", \"banana\"]\n            items:\n              type: string\n      responses:\n        '200':\n          description: OK\n\n\n  /test_array_multi_query_param:\n    get:\n      operationId: fakeapi.hello.test_array_multi_query_param\n      parameters:\n        - name: items\n          in: query\n          description: An comma separated array of items\n          style: form\n          explode: true\n          schema:\n            type: array\n            default: [\"squash\", \"banana\"]\n            items:\n              type: string\n      responses:\n        '200':\n          description: OK\n  /test_array_pipes_query_param:\n    get:\n      operationId: fakeapi.hello.test_array_pipes_query_param\n      parameters:\n        - name: items\n          in: query\n          description: An pipe separated array of items\n          required: true\n          style: pipeDelimited\n          schema:\n            type: array\n            items:\n              type: integer\n      responses:\n        '200':\n          description: OK\n  /test_array_unsupported_query_param:\n    get:\n      operationId: fakeapi.hello.test_array_unsupported_query_param\n      parameters:\n        - name: items\n          in: query\n          description: An pipe separated array of items\n          required: true\n          style: pipeDelimited\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: OK\n  '/test-int-path/{someint}':\n    get:\n      summary: Test type casting of path parameter\n      operationId: fakeapi.hello.test_get_someint\n      parameters:\n        - name: someint\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n  '/test-float-path/{somefloat}':\n    get:\n      summary: Test type casting of path parameter\n      operationId: fakeapi.hello.test_get_somefloat\n      parameters:\n        - name: somefloat\n          in: path\n          required: true\n          schema:\n            type: number\n      responses:\n        '200':\n          description: OK\n  /test-default-query-parameter:\n    get:\n      summary: Test if default parameter is passed to function\n      operationId: fakeapi.hello.test_default_param\n      parameters:\n        - name: name\n          in: query\n          schema:\n            type: string\n            default: connexion\n      responses:\n        '200':\n          description: OK\n  /test-falsy-param:\n    get:\n      summary: Test if default value when argument is falsy.\n      operationId: fakeapi.hello.test_falsy_param\n      parameters:\n        - name: falsy\n          in: query\n          schema:\n            type: integer\n            default: 1\n      responses:\n        '200':\n          description: OK\n  /test-formData-param:\n    post:\n      summary: Test formData parameter\n      operationId: fakeapi.hello.test_formdata_param3\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                formData:\n                  type: string\n              required:\n                - formData\n  /test-formData-missing-param:\n    post:\n      summary: Test formData missing parameter in handler\n      operationId: fakeapi.hello.test_formdata_missing_param\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                missing_formData:\n                  type: string\n              required:\n                - missing_formData\n  /test-formData-file-upload:\n    post:\n      summary: 'Test formData with file type, for file upload'\n      operationId: fakeapi.hello.test_formdata_file_upload\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              x-body-name: formData\n              type: object\n              properties:\n                formData:\n                  type: string\n                  format: binary\n              required:\n                - formData\n  /test-formData-file-upload-missing-param:\n    post:\n      summary: 'Test formData with file type, missing parameter in handler'\n      operationId: fakeapi.hello.test_formdata_file_upload_missing_param\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                missing_formData:\n                  type: string\n                  format: binary\n              required:\n                - missing_formData\n  /test-bool-param:\n    get:\n      summary: Test usage of boolean default value\n      operationId: fakeapi.hello.test_bool_default_param\n      parameters:\n        - name: thruthiness\n          in: query\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: OK\n  /test-bool-array-param:\n    get:\n      summary: Test usage of an array of booleans value\n      operationId: fakeapi.hello.test_bool_array_param\n      parameters:\n        - name: thruthiness\n          in: query\n          schema:\n            type: array\n            items:\n              type: boolean\n      responses:\n        '200':\n          description: OK\n  /test-required-param:\n    get:\n      summary: Test required param without default value\n      operationId: fakeapi.hello.test_required_param\n      parameters:\n        - name: simple\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n  /parameters-in-root-path:\n    parameters:\n      - in: query\n        name: title\n        description: Some parameter in the path\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Test the method GET with parameter from path\n      operationId: fakeapi.hello.path_parameters_in_get_method\n      responses:\n        '200':\n          description: OK\n  '/goodday/{name}':\n    post:\n      summary: Generate good day greeting\n      description: Generates a good day message.\n      operationId: fakeapi.hello.post_goodday\n      responses:\n        '201':\n          description: gooday response\n          headers:\n            Location:\n              description: The URI of the created resource\n              schema:\n                type: string\n          content:\n            'application/json':\n              schema:\n                type: object\n      parameters:\n        - name: name\n          in: path\n          description: Name of the person to greet.\n          required: true\n          schema:\n            type: string\n  /goodday/noheader:\n    post:\n      summary: Generate good day greeting\n      description: Generates a good day message.\n      operationId: fakeapi.hello.post_goodday_no_header\n      responses:\n        '201':\n          description: goodday response\n          headers:\n            Location:\n              description: The URI of the created resource\n              schema:\n                type: string\n          content:\n            'application/json':\n              schema:\n                type: object\n  '/goodevening/{name}':\n    post:\n      summary: Generate good evening\n      description: Generates a good evening message.\n      operationId: fakeapi.hello.post_goodevening\n      responses:\n        '201':\n          description: goodevening response\n          headers:\n            Location:\n              description: The URI of the created resource\n              schema:\n                type: string\n          content:\n            text/plain:\n              schema:\n                type: string\n              examples:\n                justAnExample:\n                  $ref: '#/components/examples/justAnExample'\n      parameters:\n        - name: name\n          in: path\n          description: Name of the person to say good evening.\n          required: true\n          schema:\n            type: string\n  /test-204-with-headers:\n    get:\n      summary: Tests that response code 204 can have headers set\n      operationId: fakeapi.hello.test_204_with_headers\n      responses:\n        '204':\n          headers:\n            X-Something:\n              description: A value that might be send in the response\n              schema:\n                type: string\n          description: 204 no content\n  /test-204-with-headers-nocontent-obj:\n    get:\n      summary: Tests that response code 204 using NoContent obj can have headers set\n      operationId: fakeapi.hello.test_nocontent_obj_with_headers\n      responses:\n        '204':\n          headers:\n            X-Something:\n              description: A value that might be send in the response\n              schema:\n                type: string\n          description: 204 no content\n  '/test-array-in-path/{names}':\n    get:\n      operationId: fakeapi.hello.test_array_in_path\n      parameters:\n        - name: names\n          description: List of names.\n          in: path\n          required: true\n          style: simple\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /nullable-parameters:\n    post:\n      operationId: fakeapi.hello.test_nullable_param_post3\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              nullable: true\n              properties:\n                post_param:\n                  description: Just a testing parameter.\n                  type: number\n                  format: int32\n                  nullable: true\n              required:\n                - post_param\n    put:\n      operationId: fakeapi.hello.test_nullable_param_put\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              nullable: true\n              x-body-name: contents\n              type: object\n              properties:\n                name:\n                  type: string\n        description: Just a testing parameter.\n        required: true\n    get:\n      operationId: fakeapi.hello.test_nullable_parameters\n      parameters:\n        - name: time_start\n          description: Just a testing parameter.\n          in: query\n          required: true\n          schema:\n            nullable: true\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: OK\n  /custom-json-response:\n    get:\n      operationId: fakeapi.hello.test_custom_json_response\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  theResult:\n                    type: string\n                    description: the number we wanna test\n  /blob-response:\n    get:\n      operationId: fakeapi.hello.get_blob_data\n      responses:\n        '200':\n          description: Some blob response\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n  /binary-response:\n    get:\n      operationId: fakeapi.hello.get_data_as_binary\n      responses:\n        '200':\n          description: Everything is ok\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n  /query-params-as-kwargs:\n    get:\n      operationId: fakeapi.hello.test_args_kwargs\n      parameters:\n        - name: foo\n          description: Just a testing parameter.\n          in: query\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Return kwargs\n          content:\n            application/json:\n              schema:\n                type: object\n  /text-request:\n    post:\n      operationId: fakeapi.hello.get_data_as_text\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              x-body-name: post_param\n              type: string\n        description: Just a testing parameter.\n        required: true\n  /param-sanitization:\n    post:\n      operationId: fakeapi.hello.test_param_sanitization3\n      parameters:\n        - name: $query\n          description: Just a testing parameter with an invalid Python name\n          in: query\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Return parameters\n          content:\n            application/json:\n              schema:\n                type: object\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                'form$':\n                  description: Just a testing parameter in the form data\n                  type: string\n  /body-sanitization:\n    post:\n      operationId: fakeapi.hello.test_body_sanitization\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        $ref: '#/components/requestBodies/fakeapi.hello.test_body_sanitization_body'\n  /body-sanitization-additional-properties:\n    post:\n      operationId: fakeapi.hello.test_body_sanitization_additional_properties\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                body1:\n                  type: string\n              additionalProperties: true\n  /body-sanitization-additional-properties-defined:\n    post:\n      operationId: fakeapi.hello.test_body_sanitization_additional_properties_defined\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                body1:\n                  type: string\n              additionalProperties:\n                type: string\n  /body-not-allowed-additional-properties:\n    post:\n      operationId: fakeapi.hello.test_body_not_allowed_additional_properties\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                body1:\n                  type: string\n              additionalProperties: false\n  /get_non_conforming_response:\n    get:\n      operationId: fakeapi.hello.get_empty_dict\n      responses:\n        '200':\n          description: OK\n          content:\n            'application/json':\n              schema:\n                type: object\n                required:\n                  - some\n                properties:\n                  some:\n                    type: string\n  /post_wrong_content_type:\n    post:\n      operationId: fakeapi.hello.post_wrong_content_type\n      responses:\n        '200':\n          description: OK\n        '215':\n          description: NOT-OK\n      requestBody:\n        $ref: '#/components/requestBodies/fakeapi.hello.test_body_sanitization_body'\n  /get_unicode_request:\n    get:\n      summary: Test if a unicode string in query parameter works properly in Python 2\n      operationId: fakeapi.hello.get_unicode_query\n      parameters:\n        - name: price\n          in: query\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n  /get_unicode_response:\n    get:\n      operationId: fakeapi.hello.get_unicode_data\n      responses:\n        '200':\n          description: Some unicode response\n          content:\n            application/json:\n              schema:\n                type: object\n  /get_enum_response:\n    get:\n      operationId: fakeapi.hello.get_enum_response\n      responses:\n        '200':\n          description: Some HTTPStatus response\n          content:\n            application/json:\n              schema:\n                type: object\n  /get_httpstatus_response:\n    get:\n      operationId: fakeapi.hello.get_httpstatus_response\n      responses:\n        '200':\n          description: Some HTTPStatus response\n          content:\n            application/json:\n              schema:\n                type: object\n  '/get_bad_default_response/{response_code}':\n    get:\n      operationId: fakeapi.hello.get_bad_default_response\n      parameters:\n        - name: response_code\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Some object response\n          content:\n            application/json:\n              schema:\n                type: object\n        default:\n          description: Some array response\n          content:\n            application/json:\n              schema:\n                type: array\n                items: {}\n  /add_operation_on_http_methods_only:\n    summary: this is a test\n    description: check if add_operation is called only on http methods field\n    x-test: True\n    servers:\n      - url: http://localhost\n    parameters:\n      - $ref: \"#/components/parameters/Name\"\n    get:\n      operationId: fakeapi.hello.get_add_operation_on_http_methods_only\n      responses:\n        default:\n          description: ''\n    put:\n      operationId: fakeapi.hello.put_add_operation_on_http_methods_only\n      responses:\n        default:\n          description: ''\n    post:\n      operationId: fakeapi.hello.post_add_operation_on_http_methods_only\n      responses:\n        default:\n          description: ''\n    delete:\n      operationId: fakeapi.hello.delete_add_operation_on_http_methods_only\n      responses:\n        default:\n          description: ''\n    options:\n      operationId: fakeapi.hello.options_add_operation_on_http_methods_only\n      responses:\n        default:\n          description: ''\n    head:\n      operationId: fakeapi.hello.head_add_operation_on_http_methods_only\n      responses:\n        default:\n          description: ''\n    patch:\n      operationId: fakeapi.hello.patch_add_operation_on_http_methods_only\n      responses:\n        default:\n          description: ''\n    trace:\n      operationId: fakeapi.hello.trace_add_operation_on_http_methods_only\n      responses:\n        default:\n          description: ''\n  /forward:\n    post:\n      operationId: fakeapi.hello.forward\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n      responses:\n        '200':\n          description: \u003e\n            The response containing the same data as were present in request body.\n          content:\n            application/json:\n              schema:\n                type: object\n\nservers:\n  - url: http://localhost:{port}/{basePath}\n    variables:\n      port:\n        enum:\n         - '4000'\n         - '5000'\n        default: '5000'\n      basePath:\n        enum:\n         - v1.0\n         - v1\n        default: v1.0\n  - url: /v1.0\ncomponents:\n  requestBodies:\n    fakeapi.hello.test_body_sanitization_body:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              body1:\n                type: string\n              body2:\n                type: string\n      description: Just a testing parameter in the body\n      required: true\n  examples:\n    justAnExample:\n      summary: a basic example.\n      value: Good evening, doctor.\n  schemas:\n    new_stack:\n      type: object\n      properties:\n        image_version:\n          type: string\n          description: Docker image version to deploy\n      required:\n        - image_version\n  parameters:\n    Name:\n      name: name\n      in: path\n      description: Name of the person to greet.\n      required: true\n      schema:\n        type: string\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: apikey\n      in: query\n      x-apikeyInfoFunc: fakeapi.hello.apikey_info\n"
		}
	},
	"Error": "parse: paths: /test_array_csv_form_param: post: fakeapi.hello.test_array_csv_form_param3: requestBody: content: application/x-www-form-urlencoded: parse schema: parse default: unexpected type: \"object\""
}