{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/apisearch-io/search-server"
		},
		"file": {
			"name": "openapi.yml",
			"path": "openapi.yml",
			"content": "openapi: \"3.0.3\"\n\ninfo:\n    description: \"Apisearch Server API documentation\"\n    version: \"1.0\"\n    title: \"Apisearch Server\"\n    contact:\n        name: \"Apisearch team\"\n        url: \"https://apisearch.io\"\n        email: \"info@apisearch.io\"\n    license:\n        name: \"MIT\"\n        url: \"https://opensource.org/licenses/MIT\"\n\nexternalDocs:\n    url: \"https://docs.apisearch.io\"\n    description: \"Use the Apisearch documentation for all needed information and recipes\"\n\nservers:\n    - url: \"https://{cluster}.apisearch.io/\"\n      description: \"Use the apisearch cloud clusters\"\n      variables:\n          cluster:\n              description: \"Cluster where to connect\"\n              default: \"eu1\"\n\n    - url: \"https://{endpoint}:{port}/\"\n      description: \"Use your own HTTPs server by using SSL\"\n      variables:\n          endpoint:\n              description: \"Your own server endpoint\"\n              default: \"\"\n          port:\n              description: \"The port to use\"\n              default: \"443\"\n\n    -   url: \"http://{endpoint}:{port}/\"\n        description: \"Use your own HTTP server\"\n        variables:\n            endpoint:\n                description: \"Your own server endpoint\"\n                default: \"\"\n            port:\n                description: \"The port to use\"\n                default: \"80\"\n\npaths:\n\n    #\n    # Server paths\n    #\n    /:\n        head:\n            summary: \"Ping the server. Needs a ping token.\"\n            description: \"This route is named `ping`\"\n            tags: [\"admin\"]\n            responses:\n                204:\n                    description: \"The server is up and running\"\n                401:\n                    $ref: '#/components/responses/invalidToken'\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n    /health:\n        get:\n            summary: \"Check the server health, including all infrastructure dependencies. Needs a health_check token.\"\n            description: \"This route is named `check_health`\"\n            tags: [\"admin\"]\n            responses:\n                200:\n                    $ref: \"#/components/schemas/HealthCheck\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n    /teapot:\n        head:\n            summary: \"Makes a simple server head with GOD authorization. Needs a god token.\"\n            description: \"This route is named `teapot`\"\n            tags: [ \"admin\" ]\n            responses:\n                200:\n                    description: \"I'm a teagod\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n    #\n    # Token paths\n    #\n    /v1/{app_id}/tokens/{token_id}:\n        put:\n            summary: \"Put a token attached to an app\"\n            description: \"This route is named `v1_put_token`\"\n            tags: [\"token\"]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            oneOf:\n                                - $ref: \"#/components/schemas/Token\"\n            responses:\n                200:\n                    description: \"Token put\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        delete:\n            summary: \"Delete a token attached to an app\"\n            description: \"This route is named `v1_delete_token`\"\n            tags: [\"token\"]\n            responses:\n                200:\n                    description: \"Token deleted\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        parameters:\n            -   in: \"path\"\n                name: \"app_id\"\n                required: true\n                description: \"App composed UUID\"\n                schema: {format: \"string\"}\n            -   in: \"path\"\n                name: \"token_id\"\n                required: true\n                description: \"Token composed UUID\"\n                schema: { format: \"string\" }\n\n    /v1/{app_id}/tokens:\n        get:\n            summary: \"Get all app tokens\"\n            description: \"This route is named `v1_get_tokens`\"\n            tags: [\"token\"]\n            responses:\n                200:\n                    description: \"Tokens list\"\n                    content:\n                        application/json:\n                            schema:\n                                type: \"array\"\n                                items:\n                                    $ref: \"#/components/schemas/Token\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        delete:\n            summary: \"Delete all app tokens\"\n            description: \"This route is named `v1_delete_tokens`\"\n            tags: [ \"token\" ]\n            responses:\n                200:\n                    description: \"Tokens deleted\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n        parameters:\n            -   in: \"path\"\n                name: \"app_id\"\n                required: true\n                description: \"App composed UUID\"\n                schema: { format: \"string\" }\n\n\n    #\n    # Index paths\n    #\n    /v1/{app_id}/indices:\n        get:\n            summary: \"Get all app indices\"\n            description: \"This route is named `v1_get_indices`\"\n            tags: [ \"index\" ]\n            responses:\n                200:\n                    description: \"Indices list\"\n                    content:\n                        application/json:\n                            schema:\n                                type: \"array\"\n                                items:\n                                    $ref: \"#/components/schemas/Index\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n        parameters:\n            -   in: \"path\"\n                name: \"app_id\"\n                required: true\n                description: \"App composed UUID\"\n                schema: { format: \"string\" }\n\n    /v1/{app_id}/indices/{index_id}:\n        put:\n            summary: \"Creates an index to an app. This endpoint will only work is the index does not exist.\"\n            description: \"This route is named `v1_put_index`\"\n            tags: [\"index\"]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            oneOf:\n                                -   $ref: \"#/components/schemas/IndexConfig\"\n            responses:\n                200:\n                    description: \"Index created properly\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                409:\n                    description: \"Index exists\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        delete:\n            summary: \"Deletes an index\"\n            description: \"This route is named `v1_delete_index`\"\n            tags: [\"index\"]\n            responses:\n                200:\n                    description: \"Index deleted properly\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                404:\n                    description: \"Index not found\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        head:\n            summary: \"Check the status of an index\"\n            description: \"This route is named `v1_check_index`\"\n            tags: [\"index\"]\n            responses:\n                200:\n                    description: \"Index works properly\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                404:\n                    description: \"Index not found\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        get:\n            summary: \"Query the index\"\n            description: \"This route is named `v1_query`\"\n            tags: [\"query\"]\n            responses:\n                200:\n                    description: \"Query result\"\n                    $ref: \"#/components/schemas/Result\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                404:\n                    description: \"Index not found\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n            parameters:\n                -   in: \"query\"\n                    name: \"query\"\n                    required: false\n                    description: \"This object can be added as well as the body of the request\"\n                    schema:\n                        $ref: \"#/components/schemas/Query\"\n                    examples:\n                        simple-query:\n                            $ref: \"#/components/examples/simple-query\"\n                        query-with-filter:\n                            $ref: \"#/components/examples/query-with-filter\"\n                        query-with-filter-and-aggregation:\n                            $ref: \"#/components/examples/query-with-filter-and-aggregation\"\n\n        parameters:\n            -   in: \"path\"\n                name: \"app_id\"\n                required: true\n                description: \"App composed UUID\"\n                schema: { format: \"string\" }\n            -   in: \"path\"\n                name: \"index_id\"\n                required: true\n                description: \"Index composed UUID\"\n                schema: { format: \"string\" }\n\n\n    /v1/{app_id}/indices/{index_id}/configure:\n        put:\n            summary: \"Configures an existing index.\"\n            description: \"This route is named `v1_configure_index`\"\n            tags: [ \"index\" ]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            oneOf:\n                                -   $ref: \"#/components/schemas/IndexConfig\"\n            responses:\n                200:\n                    description: \"Index configured properly\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                404:\n                    description: \"Index not found\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        parameters:\n            -   in: \"path\"\n                name: \"app_id\"\n                required: true\n                description: \"App composed UUID\"\n                schema: { format: \"string\" }\n            -   in: \"path\"\n                name: \"index_id\"\n                required: true\n                description: \"Index composed UUID\"\n                schema: { format: \"string\" }\n\n    /v1/{app_id}/indices/{index_id}/reset:\n        put:\n            summary: \"Resets an existing index.\"\n            description: \"This route is named `v1_reset_index`\"\n            tags: [ \"index\" ]\n            responses:\n                200:\n                    description: \"Index configured properly\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                404:\n                    description: \"Index not found\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        parameters:\n            -   in: \"path\"\n                name: \"app_id\"\n                required: true\n                description: \"App composed UUID\"\n                schema: { format: \"string\" }\n            -   in: \"path\"\n                name: \"index_id\"\n                required: true\n                description: \"Index composed UUID\"\n                schema: { format: \"string\" }\n\n    #\n    # Items / Catalog\n    #\n    /v1/{app_id}/indices/{index_id}/items:\n        put:\n            summary: \"Put a list of items inside an index\"\n            description: \"This route is named `v1_put_items`\"\n            tags: [\"catalog\"]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            type: array\n                            items:\n                                $ref: \"#/components/schemas/Item\"\n            responses:\n                200:\n                    description: \"Items indexed properly\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                404:\n                    description: \"Index not found\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        delete:\n            summary: \"Delete a list of item uuids from an index\"\n            description: \"This route is named `v1_delete_items`\"\n            tags: [ \"catalog\" ]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            oneOf:\n                                -   type: array\n                                    items:\n                                        $ref: \"#/components/schemas/ItemUUID\"\n            responses:\n                200:\n                    description: \"Items deleted properly\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                404:\n                    description: \"Index not found\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        parameters:\n            -   in: \"path\"\n                name: \"app_id\"\n                required: true\n                description: \"App composed UUID\"\n                schema: { format: \"string\" }\n            -   in: \"path\"\n                name: \"index_id\"\n                required: true\n                description: \"Index composed UUID\"\n                schema: { format: \"string\" }\n\n    /v1/{app_id}/indices/{index_id}/items/by-query:\n        delete:\n            summary: \"Delete a set of items as result of a query\"\n            description: \"This route is named `v1_delete_items_by_query`\"\n            tags: [ \"catalog\" ]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            oneOf:\n                                -   type: array\n                                    items:\n                                        $ref: \"#/components/schemas/Query\"\n            responses:\n                200:\n                    description: \"Items deleted properly\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                404:\n                    description: \"Index not found\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        parameters:\n            -   in: \"path\"\n                name: \"app_id\"\n                required: true\n                description: \"App composed UUID\"\n                schema: { format: \"string\" }\n            -   in: \"path\"\n                name: \"index_id\"\n                required: true\n                description: \"Index composed UUID\"\n                schema: { format: \"string\" }\n\n    /v1/{app_id}/indices/{index_id}/export:\n        get:\n            summary: \"Exports the whole index by using an stream response\"\n            description: \"This route is named `v1_export_index`\"\n            tags: [ \"catalog\" ]\n            responses:\n                200:\n                    description: \"All items collection from this index\"\n                    content:\n                        application/json:\n                            schema:\n                                type: \"array\"\n                                items:\n                                    $ref: \"#/components/schemas/Item\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                404:\n                    description: \"Index not found\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        parameters:\n            -   in: \"path\"\n                name: \"app_id\"\n                required: true\n                description: \"App composed UUID\"\n                schema: { format: \"string\" }\n            -   in: \"path\"\n                name: \"index_id\"\n                required: true\n                description: \"Index composed UUID\"\n                schema: { format: \"string\" }\n\n    /v1/{app_id}/indices/{index_id}/import-by-feed:\n        put:\n            summary: \"Import an index by feed\"\n            description: \"This route is named `v1_import_index_by_feed`\"\n            tags: [ \"catalog\" ]\n            responses:\n                200:\n                    description: \"All items imported or scheduled for being imported\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                404:\n                    description: \"Index not found\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        parameters:\n            -   in: \"path\"\n                name: \"app_id\"\n                required: true\n                description: \"App composed UUID\"\n                schema: { format: \"string\" }\n            -   in: \"path\"\n                name: \"index_id\"\n                required: true\n                description: \"Index composed UUID\"\n                schema: { format: \"string\" }\n            -   in: \"query\"\n                name: \"feed\"\n                required: true\n                schema: { format: \"url\" }\n            -   in: \"query\"\n                name: \"detached\"\n                required: false\n                schema:\n                    enum: [0, 1]\n                    default: 0\n            -   in: \"query\"\n                name: \"delete_old_versions\"\n                description: \"Delete old versions by filtering by a version UUID different than the current one\"\n                required: false\n                schema:\n                    enum: [ 0, 1 ]\n                    default: 0\n            -   in: \"query\"\n                name: \"version\"\n                description: \"Adds this version to each item, related to the import action. By default, a 8-bytes random one\"\n                required: false\n                schema: { format: \"string\" }\n\n    /v1/{app_id}/indices/{index_id}/import-by-stream:\n        put:\n            summary: \"Import an index by stream\"\n            description: \"This route is named `v1_import_index_by_stream`\"\n            tags: [ \"catalog\" ]\n            requestBody:\n                content:\n                    multipart/form-data:\n                        schema:\n                            type: \"array\"\n                            items:\n                                $ref: \"#/components/schemas/Item\"\n            responses:\n                200:\n                    description: \"All items imported or scheduled for being imported\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                404:\n                    description: \"Index not found\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        parameters:\n            -   in: \"path\"\n                name: \"app_id\"\n                required: true\n                description: \"App composed UUID\"\n                schema: { format: \"string\" }\n            -   in: \"path\"\n                name: \"index_id\"\n                required: true\n                description: \"Index composed UUID\"\n                schema: { format: \"string\" }\n            -   in: \"query\"\n                name: \"detached\"\n                required: false\n                schema:\n                    enum: [ 0, 1 ]\n                    default: 0\n            -   in: \"query\"\n                name: \"delete_old_versions\"\n                description: \"Delete old versions by filtering by a version UUID different than the current one\"\n                required: false\n                schema:\n                    enum: [ 0, 1 ]\n                    default: 0\n            -   in: \"query\"\n                name: \"version\"\n                description: \"Adds this version to each item, related to the import action. By default, a 8-bytes random one\"\n                required: false\n                schema: { format: \"string\" }\n\n    /v1/{app_id}:\n        get:\n            summary: \"Query all app indices\"\n            description: \"This route is named `v1_query_all_indices`\"\n            tags: [ \"query\" ]\n            responses:\n                200:\n                    description: \"Query result\"\n                    $ref: \"#/components/schemas/Result\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n        parameters:\n            -   in: \"path\"\n                name: \"app_id\"\n                required: true\n                description: \"App composed UUID\"\n                schema: { format: \"string\" }\n            -   in: \"query\"\n                name: \"query\"\n                required: false\n                description: \"This object can be added as well as the body of the request\"\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/Query\"\n                examples:\n                    simple-query:\n                        $ref: \"#/components/examples/simple-query\"\n                    query-with-filter:\n                        $ref: \"#/components/examples/query-with-filter\"\n                    query-with-filter-and-aggregation:\n                        $ref: \"#/components/examples/query-with-filter-and-aggregation\"\n\n    /v1/{app_id}/indices/{index_id}/similar-items:\n        get:\n            summary: \"By passing an array of existing items, get similar items\"\n            description: \"This route is named `v1_get_similar_items`\"\n            tags: [ \"query\" ]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            properties:\n                                query:\n                                    $ref: \"#/components/schemas/ReducedQuery\"\n                                items_uuid:\n                                    type: array\n                                    items:\n                                        $ref: \"#/components/schemas/ItemUUID\"\n                            example:\n                                query:\n                                    size: 5\n                                    page: 1\n                                items_uuid:\n                                    - { id: \"123\", type: \"product\" }\n                                    - { id: \"456\", type: \"product\" }\n\n            responses:\n                200:\n                    description: \"Result with similar items\"\n                    $ref: \"#/components/schemas/Result\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n            parameters:\n                -   in: \"path\"\n                    name: \"app_id\"\n                    required: true\n                    description: \"App composed UUID\"\n                    schema: { format: \"string\" }\n                -   in: \"path\"\n                    name: \"index_id\"\n                    required: true\n                    description: \"Index composed UUID\"\n                    schema: { format: \"string\" }\n\n\n    /v1/{app_id}/indices/{index_id}/recommended-items:\n        get:\n            summary: \"By passing a possible user ID, and having all internal metrics, get recommended items\"\n            description: \"This route is named `v1_get_recommended_items`\"\n            tags: [ \"query\" ]\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/ReducedQuery\"\n                        example:\n                            size: 5\n                            page: 1\n\n            responses:\n                200:\n                    description: \"Result with recommended items\"\n                    $ref: \"#/components/schemas/Result\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n\n            parameters:\n                -   in: \"path\"\n                    name: \"app_id\"\n                    required: true\n                    description: \"App composed UUID\"\n                    schema: { format: \"string\" }\n                -   in: \"path\"\n                    name: \"index_id\"\n                    required: true\n                    description: \"Index composed UUID\"\n                    schema: { format: \"string\" }\n                -   in: \"query\"\n                    name: \"user_id\"\n                    required: false\n                    description: \"User that makes the call\"\n                    schema: { format: \"string\" }\n\n    /v1/{app_id}/logs:\n        get:\n            summary: \"Get all app associated logs\"\n            description: \"This route is named `v1_get_logs`\"\n            tags: [\"logs\"]\n            responses:\n                200:\n                    description: \"Array of logs\"\n                    content:\n                        application/json:\n                            schema:\n                                type: \"array\"\n                                items:\n                                    $ref: \"#/components/schemas/Log\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n            parameters:\n                -   in: \"path\"\n                    name: \"app_id\"\n                    required: true\n                    description: \"App composed UUID\"\n                    schema: { format: \"string\" }\n                -   in: \"query\"\n                    name: \"from\"\n                    required: false\n                    description: \"Datetime in format YmdHim\"\n                    schema: { format: \"string\" }\n                -   in: \"query\"\n                    name: \"to\"\n                    required: false\n                    description: \"Datetime in format YmdHim.\"\n                    schema: { format: \"string\" }\n                -   in: \"query\"\n                    name: \"type\"\n                    required: false\n                    description: \"Type to filter logs by.\"\n                    schema:\n                        type: \"array\"\n                        items:\n                            enum:\n                                - 'index_created'\n                                - 'index_deleted'\n                                - 'index_configured'\n                                - 'index_reset'\n                                - 'index_imported'\n                                - 'index_exported'\n                                - 'token_put'\n                                - 'token_deleted'\n                                - 'tokens_deleted'\n                                - 'exception'\n                -   in: \"query\"\n                    name: \"limit\"\n                    required: false\n                    description: \"Number of results for the current page\"\n                    schema: { format: \"integer\" }\n                -   in: \"query\"\n                    name: \"page\"\n                    required: false\n                    description: \"Pagination page\"\n                    schema: { format: \"integer\" }\n\n    /v1/{app_id}/indices/{index_id}/logs:\n        get:\n            summary: \"Get all app index associated logs\"\n            description: \"This route is named `v1_get_index_logs`\"\n            tags: [ \"logs\" ]\n            responses:\n                200:\n                    description: \"Array of logs\"\n                    content:\n                        application/json:\n                            schema:\n                                type: \"array\"\n                                items:\n                                    $ref: \"#/components/schemas/Log\"\n                401:\n                    $ref: \"#/components/responses/invalidToken\"\n                500:\n                    $ref: \"#/components/responses/serverDown\"\n            parameters:\n                -   in: \"path\"\n                    name: \"app_id\"\n                    required: true\n                    description: \"App composed UUID\"\n                    schema: { format: \"string\" }\n                -   in: \"path\"\n                    name: \"index_id\"\n                    required: true\n                    description: \"Index composed UUID\"\n                    schema: { format: \"string\" }\n                -   in: \"query\"\n                    name: \"from\"\n                    required: false\n                    description: \"Datetime in format YmdHim\"\n                    schema: { format: \"string\" }\n                -   in: \"query\"\n                    name: \"to\"\n                    required: false\n                    description: \"Datetime in format YmdHim.\"\n                    schema: { format: \"string\"}\n                -   in: \"query\"\n                    name: \"type\"\n                    required: false\n                    description: \"Type to filter logs by.\"\n                    schema:\n                        type: \"array\"\n                        items:\n                            enum:\n                                - 'index_created'\n                                - 'index_deleted'\n                                - 'index_configured'\n                                - 'index_reset'\n                                - 'index_imported'\n                                - 'index_exported'\n                                - 'token_put'\n                                - 'token_deleted'\n                                - 'tokens_deleted'\n                                - 'exception'\n                -   in: \"query\"\n                    name: \"limit\"\n                    required: false\n                    description: \"Number of results for the current page\"\n                    schema: { format: \"integer\" }\n                -   in: \"query\"\n                    name: \"page\"\n                    required: false\n                    description: \"Pagination page\"\n                    schema: { format: \"integer\" }\n\n#\n# Components\n#\ncomponents:\n    securitySchemes:\n        token:\n            type: apiKey\n            in: query\n            name: token\n\n    responses:\n        invalidToken:\n            description: \"Token is missing or is not valid\"\n        serverDown:\n            description: \"Token is missing or is not valid\"\n\n    schemas:\n\n        HealthCheck:\n            type: \"object\"\n            description: \"Health check object with server-related health information and infrastructure dependencies status\"\n            properties:\n                healthy:\n                    type: \"boolean\"\n                status:\n                    type: \"array\"\n                    items: {}\n                info:\n                    type: \"array\"\n                    items: {}\n                process:\n                    type: \"object\"\n                    properties:\n                        memory_user:\n                            type: \"integer\"\n                        real_memory_used:\n                            type: \"integer\"\n\n        Synonym:\n            type: \"object\"\n            description: \"Synonyms representation\"\n            properties:\n                words:\n                    type: \"array\"\n                    items:\n                        type: \"string\"\n\n        AppUUID:\n            type: \"object\"\n            description: \"App UUID representation\"\n            properties:\n                id:\n                    type: \"string\"\n\n        TokenUUID:\n            type: \"object\"\n            description: \"Token UUID representation\"\n            properties:\n                id:\n                    type: \"string\"\n\n        Token:\n            type: \"object\"\n            description: \"Token representation of permissions and properties. No IDs are included inside the body\"\n            properties:\n                uuid:\n                    $ref: \"#/components/schemas/TokenUUID\"\n                    readOnly: true\n                app_uuid:\n                    $ref: \"#/components/schemas/AppUUID\"\n                    readOnly: true\n                indices:\n                    type: \"array\"\n                    description: \"Indices name where this token will have permissions\"\n                    items:\n                        type: string\n                endpoints:\n                    type: \"array\"\n                    description: \"Endpoints where this token is permitted\"\n                    items:\n                        type: string\n                plugins:\n                    type: \"array\"\n                    description: \"Plugins to enable when this token is used\"\n                    items:\n                        type: string\n                ttl:\n                    type: integer\n                    description: \"Seconds that this token will keep responses cached\"\n                metadata:\n                    type: array\n                    description: \"Metadata associated to this token\"\n                    items: { }\n            required:\n                - \"uuid\"\n                - \"app_uuid\"\n\n        IndexUUID:\n            type: \"object\"\n            description: \"Index UUID representation\"\n            properties:\n                id:\n                    type: \"string\"\n\n        IndexConfig:\n            type: \"object\"\n            description: \"Index configuration parameters\"\n            properties:\n                shards:\n                    type: \"integer\"\n                    description: \"Number of shards you want to assign to this index\"\n                    default: 1\n                replicas:\n                    type: \"integer\"\n                    description: \"Number of replicas you want to assign to this index\"\n                    default: 0\n                language:\n                    type: \"string\"\n                    description: \"Specific language for the index. When empty, the index is considered language agnostic\"\n                store_searchable_metadata:\n                    type: \"boolean\"\n                    description: \"Store all searchable metadata. A must if you want to export the index. Increases index size\"\n                    default: true\n                synonyms:\n                    type: \"array\"\n                    description: \"Synonyms to be considered in this index\"\n                    items:\n                        $ref: \"#/components/schemas/Synonym\"\n                metadata:\n                    type: array\n                    items: {}\n\n        Index:\n            allOf:\n                -   $ref: \"#/components/schemas/IndexConfig\"\n                -   type: \"object\"\n                    description: \"Index representation with configuration parameters, including IDs and server completion.\"\n                    properties:\n                        uuid:\n                            $ref: \"#/components/schemas/IndexUUID\"\n                        app_uuid:\n                            $ref: \"#/components/schemas/AppUUID\"\n\n        Coordinate:\n            type: \"object\"\n            description: \"Representation of a coordinate point\"\n            properties:\n                lat:\n                    type: \"number\"\n                lon:\n                    type: \"number\"\n            required:\n                - \"lat\"\n                - \"lon\"\n\n        ItemUUID:\n            type: \"object\"\n            description: \"Item UUID\"\n            properties:\n                id:\n                    type: \"string\"\n                    description: \"ID of the item. Should be unique among its type\"\n                type:\n                    type: \"string\"\n                    description: \"Type of item. That will group items inside a unique index\"\n\n        Item:\n            type: \"object\"\n            description: \"Item representation. You can store different type of fields\"\n            properties:\n                uuid:\n                    $ref: \"#/components/schemas/ItemUUID\"\n                metadata:\n                    description: \"Array with values to only store. These values will not be exposed for searching nor filtering\"\n                    type: \"object\"\n                    items: {}\n                indexed_metadata:\n                    description: \"Array with values to store and filter by.\"\n                    type: \"object\"\n                    items: {}\n                searchable_metadata:\n                    description: \"Array with values to optionally store and expose for searching. Values here must be strings and will be tokenized by the server\"\n                    type: \"object\"\n                    items: { }\n                exact_matching_metadata:\n                    description: \"Array with values to optionally store and expose for searching. Values here must be string and will NOT be tokenized\"\n                    type: \"array\"\n                    items: { }\n                suggests:\n                    description: \"Array of values this item will suggest for searching\"\n                    type: \"array\"\n                    items: {}\n                coordinate:\n                    description: \"Item coordinate. Usable in query for sorting by distance\"\n                    $ref: \"#/components/schemas/Coordinate\"\n            required:\n                - uuid\n            example:\n                uuid:\n                    id: \"123\"\n                    type: \"product\"\n                metadata:\n                    ean13: \"1234567890123\"\n                    name: \"Blue T-shirt\"\n                    description: \"This is my new t-shirt\"\n                indexed_metadata:\n                    price: 9.95\n                    color: [ \"blue\" ]\n                searchable_metadata:\n                    name: \"Blue T-shirt\"\n                exact_matching_metadata:\n                    - \"1234567890123\"\n                suggests:\n                    - \"Blue t-shirt\"\n\n        User:\n            type: \"object\"\n            description: \"User representation\"\n            properties:\n                id:\n                    description: \"User unique id.\"\n                    type: \"string\"\n                attributes:\n                    description: \"Attributes to enrich the representation of the user\"\n                    type: \"object\"\n                    items: {}\n\n        ScoreStrategy:\n            type: \"object\"\n            properties:\n                type:\n                    type: \"string\"\n                configuration:\n                    description: \"Configuration object. Depends on the strategy will require some values\"\n                    type: \"object\"\n                    items: {}\n                weight:\n                    description: \"Weight of this strategy\"\n                    type: \"integer\"\n                score_mode:\n                    description: \"Score mode when working with collections. Can be `none` for no extra score, and `sum`, `avg`, `max` and `min`\"\n                    type: \"string\"\n                filter:\n                    description: \"Some strategies need a filter\"\n                    $ref: \"#/components/schemas/QueryFilter\"\n\n        ScoreStrategies:\n            type: \"object\"\n            properties:\n                score_mode:\n                    description: \"How scores are combined when working with several score strategies. Can be `multiply`, `sum`, `avg`, `max` and `min`\"\n                    type: \"string\"\n                score_strategies:\n                    type: array\n                    items:\n                        $ref: \"#/components/schemas/ScoreStrategy\"\n\n        QueryFilter:\n            type: \"object\"\n            description: \"Filter representation for a Query.\"\n            properties:\n                field:\n                    type: \"string\"\n                values:\n                    type: \"array\"\n                    items: {}\n                application_type:\n                    description: \"When having multiple values, how are they combined. Possible values are [4] for `all values must match`, [5] for `all values must match by using levels`, [8] for `at least one must match`, [16] for excluding them and [32] for promoting them\"\n                    default: 8\n                filter_type:\n                    description: \"Type of filter. Can be `field` for a simple field inside indexed_metadata, `range` for a range of 2 values [X..Y], `date_range` for a range of 2 dates and `geo` for a coordinate range`\"\n                    default: \"field\"\n\n        QueryAggregation:\n            type: \"object\"\n            description: \"Aggregation representation for a Query.\"\n            properties:\n                name:\n                    description: \"This name will be important for the result object, as will allow you to match with the results\"\n                    type: \"string\"\n                field:\n                    description: \"Field for the aggregation\"\n                    type: \"string\"\n                application_type:\n                    description: \"When having multiple values, how are they combined. Possible values are [4] for `all values must match`, [5] for `all values must match by using levels`, [8] for `at least one must match`, [16] for excluding them and [32] for promoting them\"\n                    type: \"integer\"\n                    enum: [4, 5, 8, 16, 32]\n                    default: 8\n                filter_type:\n                    description: \"Type of filter. Can be `field` for a simple field inside indexed_metadata, `range` for a range of 2 values [X..Y], `date_range` for a range of 2 dates and `geo` for a coordinate range`\"\n                    default: \"field\"\n                sort:\n                    description: \"What order aggregations should follow.\"\n                    type: \"object\"\n                    enum: [{0: '_count', 1: 'asc'}, {0: '_count', 1: 'desc'}, {0: '_term', 1: 'asc'}, {0: '_term', 1: 'desc'}]\n                    default: {0: '_count', 1: 'desc'}\n                limit:\n                    description: \"Number of aggregations to return for given field. 0 means no limit.\"\n                    default: 0\n\n        QuerySortBy:\n            type: \"object\"\n            description: \"Sort by representation for a query\"\n            properties:\n                type:\n                    type: \"string\"\n                    enum: [\"score\", \"field\", \"nested\", \"random\", \"distance\", \"function\"]\n                    default: \"score\"\n                field:\n                    type: \"string\"\n                order:\n                    type: \"string\"\n                    enum: [ \"asc\", \"desc\" ]\n                    default: \"desc\"\n\n        Query:\n            type: \"object\"\n            description: \"Query representation. Find among all your items\"\n            properties:\n                coordinate:\n                    $ref: \"#/components/schemas/Coordinate\"\n                q:\n                    type: \"string\"\n                page:\n                    type: \"integer\"\n                    default: 1\n                size:\n                    type: \"integer\"\n                    default: 10\n                fields:\n                    type: \"array\"\n                    items: {type: \"string\"}\n                aggregations:\n                    type: \"array\"\n                    items:\n                        $ref: \"#/components/schemas/QueryAggregation\"\n                filters:\n                    type: \"array\"\n                    items:\n                        $ref: \"#/components/schemas/QueryFilter\"\n                universe_filters:\n                    type: \"array\"\n                    items:\n                        $ref: \"#/components/schemas/QueryFilter\"\n                results_enabled:\n                    type: \"boolean\"\n                    default: true\n                suggestions_enabled:\n                    type: \"boolean\"\n                    default: true\n                aggregations_enabled:\n                    type: \"boolean\"\n                    default: true\n                highlights_enabled:\n                    type: \"boolean\"\n                    default: true\n                items_promoted:\n                    type: \"array\"\n                    items:\n                        $ref: \"#/components/schemas/ItemUUID\"\n                fuzziness:\n                    description: \"Values can be `Auto` or an integer higher or equal than 1\"\n                    type: \"string\"\n                searchable_fields:\n                    description: \"Fields to use for searching. By default, all of them from searchable_metadata and exact_matching_metadata, with an extra weight on this second one\"\n                    type: \"array\"\n                    items: {type: \"string\" }\n                sort:\n                    description: \"Sort by definitions\"\n                    type: \"array\"\n                    items:\n                        $ref: \"#/components/schemas/QuerySortBy\"\n                score_strategies:\n                    description: \"Score strategies to apply during the search\"\n                    $ref: \"#/components/schemas/ScoreStrategies\"\n                min_score:\n                    description: \"Min score to apply when filtering result items\"\n                    type: \"number\"\n                    default: 0.0\n                metadata:\n                    description: \"Metadata values used in some plugins. Adds some context inside the query action\"\n                    type: \"object\"\n                    items: {}\n                user:\n                    description: \"User that is performing this query\"\n                    $ref: \"#/components/schemas/User\"\n                subqueries:\n                    description: \"When this query is a multi-query, you should add all your sub-queries here\"\n                    type: \"array\"\n                    items:\n                        $ref: \"#/components/schemas/Query\"\n                uuid:\n                    description: \"Represents a unique identifier for this query\"\n                    type: \"string\"\n                index_uuid:\n                    description: \"Represents the index UUID where to perform this query\"\n                    $ref: \"#/components/schemas/IndexUUID\"\n\n        ReducedQuery:\n            type: \"object\"\n            description: \"Reduced Query representation. Specifically for pagination, sort-by and limit\"\n            properties:\n                coordinate:\n                    $ref: \"#/components/schemas/Coordinate\"\n                page:\n                    type: \"integer\"\n                    default: 1\n                size:\n                    type: \"integer\"\n                    default: 10\n                fields:\n                    type: \"array\"\n                    items: { type: \"string\" }\n                universe_filters:\n                    type: \"array\"\n                    items:\n                        $ref: \"#/components/schemas/QueryFilter\"\n                results_enabled:\n                    type: \"boolean\"\n                    default: true\n                suggestions_enabled:\n                    type: \"boolean\"\n                    default: true\n                highlights_enabled:\n                    type: \"boolean\"\n                    default: true\n                fuzziness:\n                    description: \"Values can be `Auto` or an integer higher or equal than 1\"\n                    type: \"string\"\n                sort:\n                    description: \"Sort by definitions\"\n                    type: \"array\"\n                    items:\n                        $ref: \"#/components/schemas/QuerySortBy\"\n                score_strategies:\n                    description: \"Score strategies to apply during the search\"\n                    $ref: \"#/components/schemas/ScoreStrategies\"\n                min_score:\n                    description: \"Min score to apply when filtering result items\"\n                    type: \"number\"\n                    default: 0.0\n                metadata:\n                    description: \"Metadata values used in some plugins. Adds some context inside the query action\"\n                    type: \"object\"\n                    items: { }\n                user:\n                    description: \"User that is performing this query\"\n                    $ref: \"#/components/schemas/User\"\n                uuid:\n                    description: \"Represents a unique identifier for this query\"\n                    type: \"string\"\n                index_uuid:\n                    description: \"Represents the index UUID where to perform this query\"\n                    $ref: \"#/components/schemas/IndexUUID\"\n\n        ResultAggregations:\n            type: \"object\"\n            description: \"A set of result aggregations\"\n            properties:\n                aggregations:\n                    type: \"array\"\n                    items:\n                        $ref: \"#/components/schemas/ResultAggregation\"\n\n        ResultAggregation:\n            type: \"object\"\n            description: \"A representation of a result aggregation\"\n            properties:\n                name:\n                    description: \"Name of the aggregation. Linkable with the name of the query aggregation\"\n                    type: \"string\"\n                counters:\n                    description: \"Aggregation counters that are not active\"\n                    type: \"array\"\n                    items:\n                        $ref: \"#/components/schemas/ResultAggregationCounter\"\n                active_elements:\n                    description: \"Aggregation counters that are currently active\"\n                    type: \"array\"\n                    items:\n                        $ref: \"#/components/schemas/ResultAggregationCounter\"\n                highest_active_level:\n                    description: \"When working with levels, like categories, this value will give you the current level\"\n                    type: \"integer\"\n\n        ResultAggregationCounter:\n            type: \"object\"\n            description: \"A single result aggregation counter\"\n            properties:\n                values:\n                    description: \"Counter values\"\n                    type: \"object\"\n                    properties:\n                        id:\n                            description: \"Identifier of the value. Usable for filtering\"\n                            type: \"string\"\n                        name:\n                            description: \"Name of the value. Usable for printing\"\n                            type: \"string\"\n                used:\n                    description: \"Is this counter used for filtering?\"\n                    type: \"boolean\"\n                n:\n                    description: \"Number of times this counter appears in the result subset\"\n                    type: \"integer\"\n\n\n        Result:\n            type: \"object\"\n            description: \"Result representation.\"\n            properties:\n                query_uuid:\n                    description: \"Unique identifier of the source query\"\n                    type: \"string\"\n                total_items:\n                    description: \"Number of the items in the index\"\n                    type: \"integer\"\n                total_hits:\n                    description: \"Number of the hits given by the query\"\n                    type: \"integer\"\n                items:\n                    description: \"Result items\"\n                    type: array\n                    items:\n                        $ref: \"#/components/schemas/Item\"\n                aggregations:\n                    description: \"Result aggregations\"\n                    type: array\n                    items:\n                        $ref: \"#/components/schemas/ResultAggregations\"\n                suggests:\n                    description: \"Suggestions given by the index\"\n                    type: array\n                    items:\n                        type: \"string\"\n                subresults:\n                    description: \"When the query has sub-queries, the result has sub-results\"\n                    type: array\n                    items:\n                        $ref: \"#/components/schemas/Result\"\n\n        Log:\n            type: \"object\"\n            description: \"Log representation.\"\n            properties:\n                app_uuid:\n                    description: \"Unique identifier of app\"\n                    type: \"string\"\n                index_uuid:\n                    description: \"If exists, unique identifier of app\"\n                    type: \"string\"\n                n:\n                    description: \"Number of times this action did occur\"\n                    type: \"integer\"\n                when:\n                    description: \"When this action happened, in format timestamp\"\n                    type: \"string\"\n                text:\n                    description: \"Body of the log\"\n                    type: \"string\"\n                code:\n                    description: \"Code representation of the log. Can represent internal exception code\"\n                    type: \"string\"\n\n    #\n    # Examples\n    #\n    examples:\n        simple-query:\n            summary: \"Query text\"\n            description: \"You can filter by specifying a simple text query\"\n            value: { q: \"house\" }\n\n        query-with-filter:\n            summary: \"Query text + one filter\"\n            value:\n                q: \"house\"\n                filters:\n                    brand:\n                        field: \"indexed_metadata.brand\"\n                        values: [1, 2]\n                        application_type: 4\n                        filter_type: \"field\"\n\n        query-with-filter-and-aggregation:\n            summary: \"Query text + one filter + one aggregation\"\n            value:\n                q: \"house\"\n                filters:\n                    brand:\n                        field: \"indexed_metadata.brand\"\n                        values: [ 1, 2 ]\n                        application_type: 4\n                        filter_type: \"field\"\n                aggregations:\n                    brand:\n                        name: \"brand\"\n                        field: \"indexed_metadata.brand\"\n                        application_type: 4\n                        filter_type: \"field\"\n                        sort: {0: \"_count\", 1: \"desc\"}\n                        limit: 10\n\n        query-with-page-and-size:\n            summary: \"Pagination and number of elements\"\n            value:\n                page: 1\n                size: 10\n#\n# Security\n#\nsecurity:\n    -\n        token: []\n"
		}
	},
	"Error": "parse: paths: /v1/{app_id}/indices/{index_id}/items/by-query: delete: : requestBody: content: application/json: parse schema: parse schema: oneOf: [0]: parse schema: item: parse schema: reference \"#/components/schemas/Query\": parse schema: aggregations: parse schema: item: parse schema: reference \"#/components/schemas/QueryAggregation\": parse schema: sort: parse enum values: parse value \"{\\\"0\\\":\\\"_count\\\",\\\"1\\\":\\\"asc\\\"}\": unexpected type: \"object\""
}