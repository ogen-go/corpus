{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Radi85/Comment"
		},
		"file": {
			"name": "openapi.yml",
			"path": "docs/source/specs/openapi.yml",
			"content": "openapi: 3.0.0\n\ninfo:\n  title: Django Comments DAB\n  description: Django Comments DAB - openapi\n  version: 2.7.0\n\nservers:\n  - url: http://localhost:8001/api\n    description: local development\n\ntags: []\n\npaths:\n  /comments/:\n    get:\n      description: Get all comments for a specific model object\n      parameters:\n        - $ref: \"#/components/parameters/app_name\"\n        - $ref: \"#/components/parameters/model_name\"\n        - $ref: \"#/components/parameters/model_id\"\n      responses:\n        \"200\":\n          description: Returns list of all comments for a specific model. object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CommentsList\"\n        \"400\":\n          $ref: \"#/components/responses/ContentTypeError\"\n  /comments/create/:\n    post:\n      description: Create a comment for a model object. This action can be performed anonymously when providing the email in the requestBody.\n      parameters:\n        - $ref: \"#/components/parameters/app_name\"\n        - $ref: \"#/components/parameters/model_name\"\n        - $ref: \"#/components/parameters/model_id\"\n        - $ref: \"#/components/parameters/parent_id\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CommentInput\"\n      responses:\n        \"201\":\n          description: Returns created comment object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Comment\"\n        \"403\":\n          $ref: \"#/components/responses/CreateCommentForbiddenError\"\n        \"400\":\n          $ref: \"#/components/responses/CreateCommentError\"\n  /comments/confirm/{key}/:\n    get:\n      description: Confirm created comment anonymously.\n      parameters:\n        - $ref: \"#/components/parameters/key\"\n      responses:\n        \"200\":\n          description: Returns created comment anonymously.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullComment\"\n        \"400\":\n          $ref: \"#/components/responses/InvalidCommentKeyError\"\n  /comments/{id}/:\n    get:\n      description: Get comment object.\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        \"200\":\n          description: Returns comment object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullComment\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    put:\n      description: Update comment content.\n      security:\n        - owner: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        \"200\":\n          description: Returns updated comment (content) object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullComment\"\n        \"400\":\n          $ref: \"#/components/responses/CommentPayloadError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n    delete:\n      description: Delete comment object.\n      security:\n        - owner: []\n        - comment_admin: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        \"204\":\n          description: Delete comment object (No Content).\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /comments/{id}/react/{reaction}/:\n    post:\n      description: React to a comment.\n      security:\n        - user: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n        - $ref: \"#/components/parameters/reaction\"\n      responses:\n        \"200\":\n          description: Returns comment object with updated reactions object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullComment\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /comments/{id}/flag/:\n    post:\n      description: Report (flag) a comment.\n      security:\n        - user: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FlagInput\"\n      responses:\n        \"200\":\n          description: Returns comment object with updated flags object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullComment\"\n        \"400\":\n          $ref: \"#/components/responses/FlagError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /comments/{id}/flag/state/change/:\n    post:\n      description: Toggle resolve or reject a falgged comment.\n      security:\n        - comment_admin: []\n        - comment_moderator: []\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ChangeFlagStateInput\"\n      responses:\n        \"200\":\n          description: Returns comment object with updated flags object.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullComment\"\n        \"400\":\n          $ref: \"#/components/responses/FlagError\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n  /comments/toggle-subscription/:\n    post:\n      description: Toggle comment subscription.\n      security:\n        - user: []\n      parameters:\n        - $ref: \"#/components/parameters/app_name\"\n        - $ref: \"#/components/parameters/model_name\"\n        - $ref: \"#/components/parameters/model_id\"\n      responses:\n        \"200\":\n          description: Returns subscription data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Subscribe\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"400\":\n          $ref: \"#/components/responses/SubscribeError\"\n  /comments/subscribers/:\n    get:\n      description: Get subscribers for a model object.\n      security:\n        - comment_admin: []\n        - comment_moderator: []\n      parameters:\n        - $ref: \"#/components/parameters/app_name\"\n        - $ref: \"#/components/parameters/model_name\"\n        - $ref: \"#/components/parameters/model_id\"\n      responses:\n        \"200\":\n          description: Returns subscribers data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Subscribers\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n        \"400\":\n          $ref: \"#/components/responses/ContentTypeError\"\n  /comments/toggle-blocking/:\n    post:\n      description: Toggle blocking comment user/email.\n      security:\n        - comment_admin: []\n        - comment_moderator: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BlockingInput\"\n      responses:\n        \"200\":\n          description: Returns subscribers data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Blocking\"\n        \"400\":\n          $ref: \"#/components/responses/InvalidInput\"\n        \"403\":\n          $ref: \"#/components/responses/ForbiddenError\"\n\ncomponents:\n  securitySchemes:\n    user:\n      description: Normal user without any comment moderation privileges. Schema is based on your app level schema.\n      scheme: basic\n      type: http\n    owner:\n      description: User who owns the comment. Schema is based on your app level schema.\n      scheme: basic\n      type: http\n    comment_admin:\n      description: User with role comment_admin. Schema is based on your app level schema.\n      scheme: basic\n      type: http\n    comment_moderator:\n      description: User with role comment_moderator. Schema is based on your app level schema.\n      scheme: basic\n      type: http\n  schemas:\n    EntityId:\n      type: object\n      properties:\n        id:\n          type: integer\n      required:\n        - id\n    User:\n      description: User model\n      allOf:\n        - $ref: \"#/components/schemas/EntityId\"\n        - type: object\n          properties:\n            username:\n              type: string\n            email:\n              type: string\n    BaseComment:\n      description: Comment model with basic fields\n      allOf:\n        - $ref: \"#/components/schemas/EntityId\"\n        - type: object\n          properties:\n            user:\n              $ref: \"#/components/schemas/User\"\n            email:\n              type: string\n            content:\n              type: string\n            posted:\n              type: string\n              format: date-time\n            edited:\n              type: string\n              format: date-time\n            urlhashe:\n              type: string\n    Comment:\n      description: Comment model with basic fields\n      allOf:\n        - $ref: \"#/components/schemas/BaseComment\"\n        - type: object\n          properties:\n            reply_count:\n              type: integer\n            parent:\n              $ref: \"#/components/schemas/BaseComment\"\n            replies:\n              type: array\n              items:\n                $ref: \"#/components/schemas/BaseComment\"\n\n    ReactionUsers:\n      description: Users who reacted to a comment.\n      type: object\n      properties:\n        likes:\n          type: array\n          items:\n            $ref: \"#/components/schemas/User\"\n        dislikes:\n          type: array\n          items:\n            $ref: \"#/components/schemas/User\"\n    Reactions:\n      description: Comment reactions data.\n      type: object\n      properties:\n        like:\n          type: integer\n        dislike:\n          type: integer\n        users:\n          $ref: \"#/components/schemas/ReactionUsers\"\n\n    Flags:\n      description: Comment flags data.\n      type: object\n      properties:\n        count:\n          type: integer\n        moderator:\n          $ref: \"#/components/schemas/User\"\n        state:\n          type: integer\n          enum: [1, 2, 3, 4]\n        verbose_state:\n          type: string\n          enum: [Unflagged, Flagged, Rejected, Resolved]\n        reporters:\n          type: array\n          items:\n            $ref: \"#/components/schemas/User\"\n\n    FullComment:\n      description: Comment object.\n      allOf:\n        - $ref: \"#/components/schemas/Comment\"\n        - type: object\n          properties:\n            reactions:\n              $ref: \"#/components/schemas/Reactions\"\n            is_flagged:\n              type: boolean\n            flags:\n              $ref: \"#/components/schemas/Flags\"\n    CommentsList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/FullComment\"\n    Subscribe:\n      description: Subscription data.\n      type: object\n      properties:\n        following:\n          type: boolean\n        app_name:\n          type: string\n        model_name:\n          type: string\n        model_id:\n          type: integer\n        model_object:\n          type: string\n    Subscribers:\n      description: Subscribers data. Followers is a list of emails.\n      type: object\n      properties:\n        app_name:\n          type: string\n        model_name:\n          type: string\n        model_id:\n          type: integer\n        followers:\n          type: array\n          items:\n            type: string\n    Blocking:\n      description: Blocking data.\n      type: object\n      properties:\n        blocked_user:\n          type: string\n        blocked:\n          type: boolean\n        urlhash:\n          type: string\n\n    CommentInput:\n      type: object\n      properties:\n        content:\n          type: string\n          description: Comment content (body)\n        email:\n          type: string\n          description: Email is required when posting comment anonymously\n      required:\n        - content\n    FlagInput:\n      type: object\n      properties:\n        reason:\n          type: integer\n          enum: [1, 2, 100]\n          description: \u003e\n            Reason for flagging (reporting) a comment. Default values:\n              * (`1`, 'Spam | Exists only to promote a service')\n              * (`2`, 'Abusive | Intended at promoting hatred')\n              * (`100`, 'Something else')\n        info:\n          type: string\n          description: Email is required when posting comment anonymously\n      required:\n        - reason\n    ChangeFlagStateInput:\n      type: object\n      properties:\n        state:\n          type: integer\n          enum: [3, 4]\n          description: \u003e\n            state:\n              * `3` - REJECTED state\n              * `4` - RESOLVED state\n      required:\n        - state\n    BlockingInput:\n      type: object\n      properties:\n        comment_id:\n          type: integer\n          description: Comment id\n      required:\n        - comment_id\n    ContentTypeError:\n      type: object\n      properties:\n        detail:\n          type: string\n    CommentPayloadError:\n      type: object\n      properties:\n        content:\n          type: array\n          items:\n            type: string\n    EmailPayloadError:\n      type: object\n      properties:\n        email:\n          type: array\n          items:\n            type: string\n    CreateCommentPayloadError:\n      type: object\n      oneOf:\n        - $ref: \"#/components/schemas/CommentPayloadError\"\n        - $ref: \"#/components/schemas/EmailPayloadError\"\n\n    GeneralError:\n      type: object\n      properties:\n        detail:\n          oneOf:\n            - type: string\n            - type: array\n              items:\n                type: string\n      additionalProperties: true\n\n  parameters:\n    id:\n      name: id\n      in: path\n      required: true\n      schema:\n        type: number\n      description: model (Comment) id\n    model_name:\n      name: model_name\n      in: query\n      required: true\n      schema:\n        type: string\n      description: The model name of the content type that has comments associated with it.\n    model_id:\n      name: model_id\n      required: true\n      in: query\n      schema:\n        type: number\n      description: The id of an object of that model.\n    app_name:\n      name: app_name\n      required: true\n      in: query\n      schema:\n        type: string\n      description: The name of the app that contains the model.\n    parent_id:\n      name: parent_id\n      required: false\n      in: query\n      schema:\n        type: number\n      description: The id of the parent comment. Used with child comments.\n    reaction:\n      name: reaction\n      in: path\n      required: true\n      schema:\n        type: string\n        enum: [like, dislike]\n      description: \u003e\n        reaction type:\n         * `like` - Toggling like reaction\n         * `dislike` - Toggling dislike reaction\n    key:\n      name: key\n      in: path\n      required: true\n      schema:\n        type: string\n      description: The encrypted key that contains the comment.\n\n  responses:\n    ContentTypeError:\n      description: \u003e\n        One or more of the content type is missing in the url query:\n          * `app_name`\n          * `model_name`\n          * `model_id`\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ContentTypeError\"\n          example:\n            detail: app name must be provided\n    CommentPayloadError:\n      description: Content field is missing. Or email field is missing when creating comment anonymously.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CommentPayloadError\"\n          example:\n            content:\n              - This field may not be blank.\n    CreateCommentError:\n      description: \u003e\n        One of the following error:\n          - One or more of the content type is missing in the url query:\n            * `app_name`\n            * `model_name`\n            * `model_id`\n          - Content field is missing in the requestBod.\n          - Email field is missing or invalid when creating comment anonymously.\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: \"#/components/schemas/ContentTypeError\"\n              - $ref: \"#/components/schemas/CreateCommentPayloadError\"\n          example:\n            content:\n              - This field may not be blank.\n    SubscribeError:\n      description: \u003e\n        One of the following error:\n          - One or more of the content type is missing in the url query:\n            * `app_name`\n            * `model_name`\n            * `model_id`\n          - Email field is missing or invalid.\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: \"#/components/schemas/ContentTypeError\"\n              - $ref: \"#/components/schemas/EmailPayloadError\"\n          example:\n            email:\n              - Email is required to subscribe {model_object}.\n    FlagError:\n      description: Invalid reason or comment is already flagged.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            detail:\n              - REASON is an invalid reason.\n    InvalidCommentKeyError:\n      description: Invalid key for anonymous comment.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            detail: The link seems to be broken.\n\n    NotFoundError:\n      description: Comment not found.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            detail: Not found.\n\n    InvalidInput:\n      description: Invalid input data.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            detail: Invalid input data.\n\n    UnauthenticatedError:\n      description: Unauthenticated user.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            detail: Authentication credentials were not provided.\n    BlockedUserError:\n      description: Blocked user.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            detail: You cannot perform this action at the moment! Contact the admin for more details.\n    PermissionDeniedError:\n      description: User does not have sufficient privileges.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GeneralError\"\n          example:\n            detail: You do not have permission to perform this action.\n\n    CreateCommentForbiddenError:\n      description: \u003e\n        One of the following reasons:\n          - Unauthenticated user (When commenting anonymously is not allowed).\n          - Blocked user.\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: \"#/components/responses/UnauthenticatedError\"\n              - $ref: \"#/components/responses/BlockedUserError\"\n          example:\n            detail: You cannot perform this action at the moment! Contact the admin for more details.\n    ForbiddenError:\n      description: \u003e\n        One of the following reasons:\n          - Unauthenticated user.\n          - Blocked user.\n          - User does not have sufficient privileges.\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: \"#/components/responses/UnauthenticatedError\"\n              - $ref: \"#/components/responses/BlockedUserError\"\n              - $ref: \"#/components/responses/PermissionDeniedError\"\n          example:\n            detail: You do not have permission to perform this action.\n"
		}
	},
	"Error": "parse: paths: /comments/create/: post: : responses: 403: resolve \"#/components/responses/CreateCommentForbiddenError\" reference: content: application/json: schema: parse schema: oneOf: [0]: parse schema: reference \"#/components/responses/UnauthenticatedError\": resolve reference \"#/components/responses/UnauthenticatedError\": invalid schema reference \"#/components/responses/UnauthenticatedError\""
}