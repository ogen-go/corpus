{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Chuanhsing/poe-api"
		},
		"file": {
			"name": "poe.yaml",
			"path": "poe.yaml",
			"content": "openapi: 3.0.0\n# Added by API Auto Mocking Plugin\nservers:\n# Added by API Auto Mocking Plugin\n  - description: PathofExile Official Site\n    url: https://www.pathofexile.com\n  - description: PathofExile Official Site Russian\n    url: https://ru.pathofexile.com\n  - description: Garena Taiwan Site\n    url: https://web.poe.garena.tw\n  - description: Tencent China Site\n    url: https://poe.game.qq.com\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/Chuanhsing/poe/1.0.0\ninfo:\n  description: |\n    This is a sample PathofExile API.\n    You can get new API updates from https://www.pathofexile.com/forum/view-forum/674 and\n    https://www.pathofexile.com/developer/docs/\n  version: \"1.0.0\"\n  title: PathofExile API\n  contact:\n    url: 'https://github.com/Chuanhsing/poe-api/'\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ncomponents:\n  securitySchemes:\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: POESESSID  # cookie name\n      description: Priavte mode account need session to get information\n  schemas:\n    AccountName:\n      type: string\n      example: Chris\n    AccessToken:\n      type: string\n      description: access token from OAuth\n      example: 0123456789012345678901234567890123456789\n    UserAgent:\n      type: string\n      description: |\n        requested by ggg https://www.pathofexile.com/forum/view-thread/3019033/page/1#p23790007\n      default: \"OAuth mypoeapp/1.0.0 (contact: mypoeapp@gmail.com)\"\n    Realms:\n      description: |\n        The realm of the leagues\n      type: string\n      enum:\n        - pc\n        - xbox\n        - sony\n      default: pc\n    LeagueNames:\n      type: string\n      enum:\n        - Standard\n        - Hardcore\n        - Scourge\n        - Hardcore Scourge\n        - SSF Standard\n        - SSF Hardcore\n        - SSF Scourge\n        - SSF Scourge HC\n    League:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/LeagueNames'\n        realm:\n          $ref: '#/components/schemas/Realms'\n        description:\n          type: string\n          example: The default game mode\n        registerAt:\n          type: string\n          example: \"2019-09-06T19:00:00Z\"\n        url:\n          type: string\n          example: https://www.pathofexile.com/forum/view-thread/71278\n        startAt:\n          type: string\n          example: \"2013-01-23T21:00:00Z\"\n        endAt:\n          type: string\n        delveEvent:\n          type: boolean\n        rules:\n          type: array\n          items:\n            $ref: \"#/components/schemas/LeagueRule\"\n    LeagueRule:\n      type: object\n      properties:\n        id:\n          type: string\n          example: Hardcore\n        name:\n          type: string\n          example: Hardcore\n        description:\n          type: string\n          example: A character killed in Hardcore is moved to its parent league.\n    Characters:\n      type: array\n      items:\n        type: object\n        properties:\n          name:\n            type: string\n          league:\n            $ref: \"#/components/schemas/LeagueNames\"\n          classId:\n            type: integer\n            example: 3\n          ascendancyClass:\n            type: integer\n            example: 3\n          class:\n            type: string\n            example: Necromancer\n          level:\n            type: integer\n            example: 92\n          experience:\n            type: integer\n            example: 2273293803\n    PublicStashTab:\n      type: object\n      properties:\n        next_change_id:\n          type: string\n        stashes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Stash'\n    Stash:\n      type: object\n      properties:\n        accountName:\n          $ref: \"#/components/schemas/AccountName\"\n        lastCharacterName:\n          type: string\n        id:\n          type: string\n        stash:\n          type: string\n        items:\n          $ref: \"#/components/schemas/Items\"\n        public:\n          type: boolean\n    StashItems:\n      type: object\n      properties:\n        numTabs:\n          type: integer\n        items:\n          $ref: \"#/components/schemas/Items\"\n    Guild:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        tag:\n          type: string\n    PointTransaction:\n      type: object\n      properties:\n        total:\n          type: integer\n        entries:\n          type: array\n          items:\n            type: object\n    StashHistory:\n      type: object\n      properties:\n        total:\n          type: integer\n        entries:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n              time:\n                type: integer\n              league:\n                type: string\n              item:\n                type: string\n              action:\n                type: string\n              account:\n                type: object\n                properties:\n                  name:\n                    type: string\n                  realm:\n                    $ref: '#/components/schemas/Realms'\n                  guild:\n                    $ref: '#/components/schemas/Guild'\n    Season:\n      type: object\n      properties:\n        id:\n          type: string\n          example: Race Season One\n        startAt:\n          type: string\n          example: \"2013-02-20T05:47:21Z\"\n        endAt:\n          type: string\n          example: \"2013-02-20T05:47:21Z\"\n        htmlId:\n          type: string\n          example: race-season-one\n        htmlContent:\n          type: string\n          nullable: true\n        rewards:\n          type: array\n          items:\n            type: object\n            properties:\n              requiredPoints:\n                type: integer\n              item:\n                $ref: \"#/components/schemas/Item\"\n              itemOffsetX:\n                type: integer\n              itemOffsetY:\n                type: integer\n    Ladder:\n      type: object\n      properties:\n        rank:\n          type: integer\n        dead:\n          type: boolean\n        online:\n          type: boolean\n        character:\n          type: object\n          properties:\n            id:\n              type: string\n            name:\n              type: string\n            level:\n              type: integer\n            class:\n              type: string\n            time:\n              type: integer\n            score:\n              type: integer\n            experience:\n              type: integer\n        account:\n          type: object\n          properties:\n            name:\n              $ref: '#/components/schemas/AccountName'\n            realm:\n              $ref: '#/components/schemas/Realms'\n            challenges:\n              type: object\n              properties:\n                total:\n                  type: integer\n    Ladders:\n      type: object\n      properties:\n        total:\n          type: integer\n        entrie:\n          type: array\n          items:\n            type: array\n            items:\n              $ref: \"#/components/schemas/Ladder\"\n    Items:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Item\"\n    Item:\n      type: object\n      properties:\n        verified: \n          type: boolean\n          description: true if the item has not changed since it was linked.\n        w:\n          type: number\n          description: Width of the item in inventory tiles.\n        h:\n          type: number\n          description: Height of the item in inventory tiles.\n        ilvl:\n          type: number\n          description: item level\n        icon:\n          type: string\n          description: url to the image of the item\n        league:\n          type: string\n          description: league identifier\n        id:\n          type: string\n          format: uuid\n        elder:\n          type: boolean\n          description: true if the item can have elder mods (elder background).\n        shaper:\n          type: boolean\n          description: true if the item can have shaper mods (shaper background).\n        fractured:\n          type: boolean\n          description: true if the item can have fractured mods (fractured background).\n        sockets:\n          type: object\n          properties:\n            group:\n              type: number\n              description: Every socket that has the same group is linked.\n            attr:\n              description: attributes e.g. dex, int, strength\n              anyOf:\n                - type: string\n                  enum: \n                    - D\n                    - I\n                    - S\n                  description: \u003e\n                    Possible values:\n                      * `D` - dexterity\n                      * `I` - intelligence\n                      * `S` - strength\n                - type: boolean\n                  description: abyss sockets don't have attributes\n            sColour:\n              type: string\n              enum:\n                - B\n                - G\n                - R\n                - W\n                - A\n              description: \u003e\n                Possible values:\n                  - `B` - blue\n                  - `G` - green\n                  - `R` - red\n                  - `W` - white\n                  - `A` - abyss\n        name:\n          type: string\n          description: unique name of the item\n        typeLine:\n          type: string\n          description: name of the baseitem (+prefix/suffix if existing)\n        identified:\n          type: boolean\n          description: true if the item is identified\n        corrupted:\n          type: boolean\n          description: true if the item is corrupted\n        properties:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ItemLineContent\"\n        utilityMods:\n          type: array\n          description: \\\"Implicit\\\" mods for flasks.\n          items:\n            type: string\n        explicitMods:\n          type: array\n          items:\n            type: string\n        craftedMods:\n          type: array\n          items:\n            type: string\n          description: master crafted mods\n        enchantMods:\n          type: array\n          items:\n            type: string\n          description: enchantments\n        fracturedMods:\n          type: array\n          items:\n            type: string\n          description: fractured mods\n        flavourText:\n          type: array\n          items:\n            type: string\n          description: Array of lines of the flavour text of e.g. unique items.\n        descrText:\n          type: string\n          description: description\n        secDescrText:\n          type: string\n          description: secondary description\n        frameType:\n          type: number\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n            - 4\n          description: \u003e \n            Frame \"color\" of the item depending on rarity, item type (e.g. gem) etc.\n\n            Possible values with examples:\n              * `0` - normal items\n              * `1` - magic items\n              * `2` - rare items\n              * `3` - unique items\n              * `4` - gems\n        category:\n          description: \u003e \n            Should only contain one property which is the \"superclass\" and an array\n            where the only member is the \"subclass\"\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n        x:\n          type: number\n          description: \"X coordinate in the specified frame.\"\n        y:\n          type: number\n          description: \"Y coordinate in the specified frame.\"\n        inventoryId:\n          type: string\n          description: \u003e\n            Id of the slot where this item is located. `StashX` for stash number `X`.\n            `BodyArmour`, `Flask` etc for actual inventory slots.\n        isRelic:\n          type: boolean\n          description: true if the item is a relic item (introduced in Legacy league).\n        socketetedItems:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Item\"\n          description: \u003e\n            List of items that are socketed into the sockets of the item. The \n            schema has an additional property __socket__ which contains the \n            socket index.\n        socket:\n          type: number\n          description: Socket index in the parent item in which this item is socketed.\n        colour:\n          type: string\n          description: \u003e\n            gem colour (originates from attribute requirement):\n              * `D` - green\n              * `I` - blue\n              * `S` - red \n              * `G` - white\n          enum:\n            - D\n            - I\n            - S\n            - G\n    ItemLineContent:\n      type: object\n      properties:\n        name:\n          type: string\n        values:\n          type: array\n          description: \u003e\n            Tuple where the first value is the display string.\n            The second value describes how the value should be displayed:\n              * 0 - white (simple) text\n              * 1 - blue (augmented) text\n              * 4 - red (fire damage) text\n              * 5 - blue (cold damage) text\n              * 6 - yellow (lightning damage) text\n              * 7 - red-violet (chaos damage) text\n          items:\n            type: array\n            minItems: 2\n            maxItems: 2\n            items:\n              anyOf:\n                - type: string\n                - type: number\n        displayMode:\n          type: number\n          description: \u003e\n            Possible values:\n              * 0 - `name` should be displayed as \\`${name}: ${values.join(', ')}\\` if \n                  values.length \u003e 0 otherwise just '${name}'\n              * 1 - `name` should be displayed as \\`${values[0]} ${name}\\`\n              * 2 - `name__ should be display as \\`${progressBar(values[0])} ${values[0]}\\`\n                    i.e. `name` is not displayed\n              * 3 - `name` field contains placeholders for the values in\n                      the format of `%\\d`. The number nth value in `values` (0-based)\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n        type:\n          type: number\n          description: The order in which the lines should be displayed\n    ShowCasePins:\n      type: object\n      properties:\n        total:\n          type: integer\n        account:\n          type: string\n        entries:\n          type: array\n          items:\n            $ref: '#/components/schemas/ShowCasePin'\n    ShowCasePin:\n      type: object\n      properties:\n        character_id:\n          type: string\n        foreign_id:\n          type: string\n        position:\n          type: integer\n        type:\n          type: string\n        label:\n          type: string\n        id:\n          type: string\n        icon:\n          type: string\n    AccountAvatars:\n      type: object\n      properties:\n        total:\n          type: integer\n          example: 69\n        collection:\n          type: array\n          items:\n            $ref: '#/components/schemas/AccountAvatar'\n    AccountAvatar:\n      type: object\n      properties:\n        custom:\n          type: boolean\n        avatar_id:\n          type: integer\n          example: 69\n        image:\n          type: string\n          example: https://www.pathofexile.com/gen/image/WzAsMSx7ImlkIjo2OSwic2l6ZSI6ImF2YXRhciJ9XQ/3121a0cc75/Path_of_Exile_Gallery_Image.jpg\n        current:\n          type: boolean\n    Stream:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Mathil1\n        image:\n          type: string\n          example: https://static-cdn.jtvnw.net/previews-ttv/live_user_mathil1-320x180.jpg\n        status:\n          type: string\n          example: Mathil - Crit bleed/rupture Puncture Deadeye, crafting/figuring it out\n        viewers:\n          type: integer\n          example: 4025\n        id:\n          type: string\n          example: 25575995\n        url:\n          type: string\n          example: https://twitch.tv/mathil1\n    Profile:\n      type: object\n      properties:\n        uuid:\n          type: string\n          nullable: true\n        name:\n          $ref: '#/components/schemas/AccountName'\n        realm:\n          $ref: '#/components/schemas/Realms'\n        guild:\n          type: object\n          properties:\n            name:\n              type: string\n    Specials:\n      type: object\n      properties:\n        total:\n          type: integer\n        entries:\n          type: array\n          items:\n            $ref: '#/components/schemas/Microtransaction'\n    Microtransaction:\n      type: object\n      properties:\n        id:\n          type: integer\n        startAt:\n          type: string\n        endAt:\n          type: string\n        imageUrl:\n          type: string\n        url:\n          type: string\n        description:\n          type: string\n        specialType:\n          type: string\n        cost:\n          type: integer\n        countdownSpecial:\n          type: boolean\n        countdownImage:\n          type: string\n        priority:\n          type: integer\n        platform:\n          type: string\n        microtransaction:\n          type: object\n          properties:\n            id:\n              type: string\n            name:\n              type: string\n            description:\n              type: string\n            cost:\n              type: integer\n            guild:\n              type: boolean\n        category:\n          type: boolean\n    TradeDataLeagues:\n      type: object\n      properties:\n        result:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                example: Standard\n              text:\n                type: string\n                example: Standard\n    TradeDataItems:\n      type: object\n      properties:\n        result:\n          type: array\n          items:\n            type: object\n            properties:\n              label:\n                type: string\n                example: Accessories\n              entries:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                      example: Ahkeli's Meadow\n                    type:\n                      type: string\n                      example: Ruby Ring\n                    text:\n                      type: string\n                      example: Ahkeli's Meadow Ruby Ring\n                    flags:\n                      type: object\n                      properties:\n                        unique:\n                          type: boolean\n                        prophecy:\n                          type: boolean\n                          example: false\n    TradeDataStats:\n      type: object\n      properties:\n        result:\n          type: array\n          items:\n            type: object\n            properties:\n              label:\n                type: string\n                example: Pseudo\n              entries:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      example: pseudo.pseudo_total_cold_resistance\n                    text:\n                      type: string\n                      example: +#% total to Cold Resistance\n                    type:\n                      type: string\n                      example: pseudo\n    TradeDataStatic:\n      type: object\n      properties:\n        result:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                example: Currency\n              label:\n                type: string\n                example: Currency\n              entries:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      example: alt\n                    text:\n                      type: string\n                      example: Orb of Alteration\n                    image:\n                      type: string\n                      example: /image/Art/2DItems/Currency/CurrencyRerollMagic.png?v=6d9520174f6643e502da336e76b730d3\n    TradeChangeIDS:\n      type: object\n      properties:\n        psapi:\n          type: string\n          example: \"1227105106-1231696377-1189586900-1330788009-1278983122\"\n        forum:\n          type: string\n          example: \"23702876\"\n    SearchSource:\n      type: object\n      properties:\n        query:\n          type: object\n          properties:\n            filters:\n              type: object\n              description: not required\n              properties:\n                trade_filters:\n                  type: object\n                  properties:\n                    disabled:\n                      type: boolean\n                      enum: [false, true]\n                    filters:\n                      type: object\n                      properties:\n                        price:\n                          type: object\n                          properties:\n                            min:\n                              type: integer\n                              example: 1\n                            max:\n                              type: integer\n                              example: 30\n            status:\n              type: object\n              description: not required\n              properties:\n                option:\n                  type: string\n                  enum: [online,any]\n                  default: online\n            stats:\n              type: array\n              description: not required\n              items:\n                $ref: \"#/components/schemas/SearchSourceStats\"\n            name:\n              type: string\n              example: Tabula Rasa\n            type:\n              type: string\n              example: Simple Robe\n        sort:\n          type: object\n          description: not required\n          properties:\n            price:\n              type: string\n              example: asc\n              default: asc\n    SearchSourceStats:\n      type: object\n      properties:\n        type:\n          type: string\n          example: and\n        filters:\n          type: array\n          items:\n            type: string\n          example: []\n    SearchResult:\n      type: object\n      properties:\n        id:\n          type: string\n          example: Wqn2LKFm\n        result:\n          type: array\n          items:\n            type: string\n          example: [c593ccc98580e892eb0745048a8378927b452070e91da03139a00d450eca7477,e1105792ac87113b20487d7cb2d5b9fd43f40b3bdd8a55780acbaaad513c9b65]\n        total:\n          type: integer\n          example: 1\npaths:\n  /oauth/authorize:\n    get:\n      tags:\n        - OAuth\n      description: Generate an authorization URL and allow the user to navigate to it\n      parameters:\n        - name: client_id\n          in: query\n          description: is your registered application's client id.\n          schema:\n            type: string\n            example: example\n        - name: response_type\n          in: query\n          description: is always `code`.\n          schema:\n            type: string\n            enum: [code]\n            default: code\n        - name: scope\n          in: query\n          description: is a space-separated list of requested scopes.\n          schema:\n            type: string\n            example: account:profile\n        - name: state\n          in: query\n          description: is a code or hash that you generate to validate the request.\n          schema:\n            type: string\n            example: 10ceb8104963e91e47a95f4138448ecf\n        - name: redirect_uri\n          in: query\n          description: is the URL that you want the result of the authorization request to be sent to.\n          schema:\n            type: string\n            example: https://example.com\n        - name: prompt\n          in: query\n          description: |\n            can either be `consent` (the default) or `none`:\n            * `consent` will ask the user for consent after making sure they're logged in.\n            * `none` will attempt to re-authorize the request with existing consent. If this is not possible then an error response is immediately returned without the user being prompted.\n          schema:\n            type: string\n            example: consent\n            default: consent\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: {}\n  /oauth/token:\n    post:\n      tags:\n        - OAuth\n      description: use client_id and client_secret to get oauth token\n      parameters:\n        - name: grant_type\n          in: query\n          required: true\n          schema:\n            type: string\n            enum: [authorization_code, client_credentials, refresh_token]\n        - name: code\n          description: client code, used when grant_type equal client_credentials\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: refresh_token\n          description: used when grant_type equal refresh_token\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: client_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: client_secret\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: redirect_uri\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  access_token:\n                    $ref: '#/components/schemas/AccessToken'\n                  expires_in:\n                    type: integer\n                    example: 2419200\n                  token_type:\n                    type: string\n                    example: bearer\n                  scope:\n                    type: string\n                    example: service:psapi\n  /oauth/token/revoke:\n    post:\n      tags:\n        - OAuth\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: {}\n  /oauth/token/introspect:\n    post:\n      tags:\n        - OAuth\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: {}\n  /character-window/get-characters:\n    get:\n      tags:\n        - Characters\n      security:\n        - cookieAuth: []\n      summary: Get Characters\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n        - name: accountName\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/AccountName'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Characters'\n  /character-window/get-items:\n    get:\n      tags:\n        - Characters\n      security:\n        - cookieAuth: []\n      summary: Get Equipment Items\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n        - name: accountName\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/AccountName'\n        - name: character\n          in: query\n          required: true\n          schema:\n            type: string\n            example: Morrigan\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Items\"\n  /character-window/get-passive-skills:\n    get:\n      tags:\n        - Characters\n      security:\n        - cookieAuth: []\n      summary: Get Passive Skills\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n        - name: accountName\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/AccountName'\n        - name: character\n          in: query\n          required: true\n          schema:\n            type: string\n            example: Morrigan\n        - name: reqData\n          in: query\n          required: true\n          schema:\n            type: number\n            enum: [0, 1]\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: {}\n  /character-window/get-stash-items:\n    get:\n      tags:\n        - Account\n      security:\n        - cookieAuth: []\n      summary: Get Stash Items\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n        - name: league\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/LeagueNames'\n        - name: realm\n          in: query\n          required: false\n          schema:\n            $ref: '#/components/schemas/Realms'\n        - name: accountName\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/AccountName'\n        - name: tabs\n          in: query\n          description: '{0,1} 1 to shows tabs name, position, colors'\n          required: true\n          schema:\n            type: number\n            enum: [0, 1]\n        - name: tabIndex\n          in: query\n          description: '{0,...,N}'\n          required: true\n          schema:\n            type: number\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StashItems'\n  /character-window/get-mtx-stash-items:\n    get:\n      tags:\n        - Account\n      security:\n        - cookieAuth: []\n      summary: Get MTXs\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n        - name: realm\n          in: query\n          required: false\n          schema:\n            $ref: '#/components/schemas/Realms'\n        - name: sortOrder\n          in: query\n          required: true\n          schema:\n            type: string\n            enum: [category, theme]\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: {}\n  /character-window/get-account-name-by-character:\n    get:\n      tags:\n        - Account\n      security:\n        - cookieAuth: []\n      summary: Get Account Name\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n        - name: character\n          in: query\n          required: true\n          schema:\n            type: string\n          example: QuillHitman\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  accountName:\n                    $ref: '#/components/schemas/AccountName'\n  /api/account-avatar:\n    get:\n      tags:\n        - Account\n      security:\n        - cookieAuth: []\n      summary: Get Account Acatar\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n        - name: page\n          in: query\n          required: true\n          schema:\n            type: integer\n            default: 1\n            minimum: 1\n        - name: perPage\n          in: query\n          required: true\n          schema:\n            type: integer\n            default: 16\n            maximum: 16\n        - name: custom\n          description: true only custom avatars (supporter avatars) of the account will be fetched\n          in: query\n          required: true\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountAvatars'\n  /api/account/showcase-pins:\n    get:\n      tags:\n        - Account\n      security:\n        - cookieAuth: []\n      summary: Get Showcase Pins\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n        - name: offset\n          in: query\n          required: true\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          required: true\n          schema:\n            type: integer\n        - name: realm\n          in: query\n          required: false\n          schema:\n            $ref: '#/components/schemas/Realms'\n        - name: account\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShowCasePins'\n  /api/profile:\n    get:\n      tags:\n        - Account\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n        - name: access_token\n          in: query\n          required: false\n          schema:\n            $ref: '#/components/schemas/AccessToken'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Profile'\n  /account/view-profile/{accountName}/stashes:\n    get:\n      summary: unique stash\n      description: parse stashId from html and request /account/view-stash/{accountName}/{stashId}\n      tags:\n        - Account\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: accountName\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/AccountName'\n      responses:\n        '200':\n          description: OK\n          content:\n            text/html: {}\n  /account/view-stash/{accountName}/{stashId}:\n    get:\n      summary: unique stash\n      description: parse items from html\n      tags:\n        - Account\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: accountName\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/AccountName'\n        - name: stashId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            text/html: {}\n  /api/guild:\n    get:\n      summary: Get Guild\n      tags:\n        - Guild\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Guild\"\n  /api/account/guild/point-transactions:\n    get:\n      tags:\n        - Guild\n      summary: Get Account Point Transactions\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PointTransaction'\n  /api/guild/point-transactions:\n    get:\n      tags:\n        - Guild\n      summary: Get Point Transactions\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PointTransaction'\n  /api/guild/{guildid}/stash/history:\n    get:\n      tags:\n        - Guild\n      summary: List guild stash history\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: guildid\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: from\n          in: query\n          required: false\n          description: unix timestamp\n          schema:\n            type: string\n        - name: fromid\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StashHistory'\n  /character-window/get-guild-stash-items:\n    get:\n      tags:\n        - Guild\n      security:\n        - cookieAuth: []\n      summary: Get Guild Stash Items\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n        - name: league\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/LeagueNames'\n        - name: realm\n          in: query\n          required: false\n          schema:\n            $ref: '#/components/schemas/Realms'\n        - name: accountName\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/AccountName'\n        - name: tabs\n          in: query\n          description: '{0,1} 1 to shows tabs name, position, colors'\n          required: true\n          schema:\n            type: number\n            enum: [0, 1]\n        - name: tabIndex\n          in: query\n          description: '{0,...,N}'\n          required: true\n          schema:\n            type: number\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StashItems'\n  /api/seasons:\n    get:\n      tags:\n        - Seasons\n      summary: Get Seasons\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Season\"\n  /api/season-player-history:\n    get:\n      tags:\n        - Seasons\n      security:\n        - cookieAuth: []\n      summary: Get Season Player History\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n        - name: page\n          in: query\n          required: true\n          schema:\n            type: integer\n        - name: perPage\n          in: query\n          required: true\n          schema:\n            type: integer\n        - name: seasonId\n          in: query\n          required: true\n          schema:\n            type: string\n            default: Medallion Race Season\n        - name: realm\n          in: query\n          required: false\n          schema:\n            $ref: '#/components/schemas/Realms'\n        - name: id\n          description: accountName\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/AccountName'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: {}\n  /api/leagues:\n    get:\n      tags:\n        - Leagues\n      summary: Get a list of current and past leagues.\n      description: |\n        * https://www.pathofexile.com/developer/docs/api-resource-leagues\n      parameters:\n        - name: type\n          in: query\n          description: \u003e\n            Possible values:\n              * `main` - retrieves main leagues (ones from the character screen)\n              * `event` - retrieves event leagues\n              * `season` - retrieves leagues in a particular season\n          schema:\n            type: string\n            enum: [main, event, season]\n        - name: realm\n          in: query\n          description: |\n            The realm of the leagues\n          schema:\n            $ref: '#/components/schemas/Realms'\n        - name: season\n          in: query\n          description: |\n            A particular season id. Required when type=season.\n          schema:\n            type: string\n        - name: compat\n          in: query\n          description: |\n            Possible values:\n              * `0` - Displays the full info for leagues retrieved (will only retrieve a maximum of 50 leagues) (the default)\n              * `1` - Display compact info for leagues retrieved (will retrieve up to 230 leagues)\n          schema:\n            type: number\n            enum: [0, 1]\n        - name: limit\n          in: query\n          description: |\n            This specifies the number of league entries to include. By default this is the maximum, which depends on the setting above.\n          schema:\n            type: number\n        - name: offset\n          in: query\n          description: |\n            This specifies the offset to the first league entry to include.\n          schema:\n            type: number\n            default: 0\n        - name: callback\n          in: query\n          description: |\n            jsonp callback\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/League\"\n  /api/leagues/{id}:\n    get:\n      tags:\n        - Leagues\n      summary: Get a single league by id.\n      parameters:\n        - name: id\n          in: path\n          description: |\n            The id (name) of the league.\n          required: true\n          schema:\n            $ref: '#/components/schemas/LeagueNames'\n        - name: realm\n          in: query\n          description: |\n            The realm of the leagues\n          schema:\n            $ref: '#/components/schemas/Realms'\n        - name: limit\n          in: query\n          description: |\n            When including the ladder with ladder=1, this specifies the number of ladder entries to include.\n          schema:\n            type: number\n            default: 20\n            maximum: 200\n        - name: offset\n          in: query\n          description: |\n            When including the ladder with ladder=1, this specifies the offset to the first ladder entry to include.\n          schema:\n            type: number\n            default: 0\n        - name: track\n          in: query\n          description: |\n            When including the ladder with ladder=1, this setting adds unique IDs for each character returned. These can be used when name conflicts occur.\n          schema:\n            type: number\n        - name: accountName\n          in: query\n          description: |\n            League only: Filters by account name within the first 15000 results.\n          schema:\n            $ref: '#/components/schemas/AccountName'\n        - name: difficulty\n          in: query\n          description: |\n            Labyrinth only: Standard (1), Cruel (2), or Merciless (3)\n          schema:\n            type: string\n            enum: [Standard, Cruel, Merciless]\n        - name: start\n          in: query\n          description: |\n            Labyrinth only: Timestamp of the ladder you want.\n          schema:\n            type: string\n        - name: sort\n          in: query\n          schema:\n            type: string\n            enum: [depth, depthsolo]\n        - name: callback\n          in: query\n          description: |\n            jsonp callback\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/League\"\n  /api/league-rules:\n    get:\n      tags:\n        - Leagues\n      summary: Get a list of all possible league rules.\n      description: |\n        https://www.pathofexile.com/developer/docs/api-resource-league-rules\n      parameters:\n        - name: callback\n          in: query\n          description: |\n            jsonp callback\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/LeagueRule\"\n  /api/league-rules/{id}:\n    get:\n      tags:\n        - Leagues\n      summary: Get a single league rule by id.\n      description: |\n        https://www.pathofexile.com/developer/docs/api-resource-league-rules\n      parameters:\n        - name: id\n          in: path\n          description: The rule id.\n          required: true\n          schema:\n            type: number\n        - name: callback\n          in: query\n          description: |\n            jsonp callback\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LeagueRule\"\n  /api/private-league-member/{id}:\n    get:\n      tags:\n        - PrivateLeagues\n      parameters:\n        - name: id\n          in: path\n          description: private league without PL prefix\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: {}\n  /api/ladders/{id}:\n    get:\n      tags:\n        - Ladder\n      summary: Get a ladder by league id. There is a restriction in place on the last ladder entry you are able to retrieve which is set to 15000.\n      description: \u003e\n        * https://www.pathofexile.com/developer/docs/api-resource-ladders\n      parameters:\n        - name: id\n          in: path\n          description: |\n            The id (name) of the league for the ladder you want to retrieve.\n          required: true\n          schema:\n            $ref: '#/components/schemas/LeagueNames'\n        - name: limit\n          in: query\n          description: |\n            Specifies the number of ladder entries to include.\n          schema:\n            type: number\n            default: 20\n            maximum: 200\n        - name: offset\n          in: query\n          description: |\n            Specifies the offset to the first ladder entry to include.\n          schema:\n            type: number\n            default: 0\n            maximum: 15000\n        - name: type\n          in: query\n          description: |\n            Specifies the type of ladder\n          schema:\n            type: string\n            default: league\n            enum: [league, pvp, labyrinth]\n        - name: track\n          in: query\n          description: |\n            Adds unique IDs for each character returned. These can be used when name conflicts occur. Default: true\n          schema:\n            type: string\n        - name: accountName\n          in: query\n          description: |\n            League only: Filters by account name within the first 15000 results.\n          schema:\n            $ref: '#/components/schemas/AccountName'\n        - name: difficulty\n          in: query\n          description: |\n            Labyrinth only: Standard (1), Cruel (2) or Merciless (3)\n          schema:\n            type: string\n            enum: [Normal]\n        - name: start\n          in: query\n          description: |\n            Labyrinth only: Timestamp of the ladder you want.\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: |\n            jsonp callback\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ladders'\n  /api/pvp-matches:\n    get:\n      tags:\n        - PVP\n      summary: Get a list of PvP matches.\n      parameters:\n        - name: type\n          in: query\n          required: true\n          schema:\n            type: string\n            enum: [season]\n        - name: seasonId\n          in: query\n          description: |\n            Set this to get PvP matches for a particular season. Leave this unset to retrieve all upcoming PvP matches.\n          schema:\n            type: string\n        - name: realm\n          in: query\n          description: |\n            The realm to fetch PvP matches from\n          schema:\n            $ref: '#/components/schemas/Realms'\n        - name: callback\n          in: query\n          description: |\n            jsonp callback\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: {}\n  /api/public-stash-tabs:\n    get:\n      tags:\n        - PublicStashTabs\n      summary: Retrieves a list of stashes, accounts, and items as described above in the Introduction section.\n      description: |\n        * https://www.pathofexile.com/developer/docs/api-resource-public-stash-tabs\n        * https://pathofexile.gamepedia.com/Public_stash_tab_API\n        * API doesn't contain any historical data and always returns the current state of stash tabs.\n      parameters:\n        - name: User-Agent\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/UserAgent'\n        - name: id\n          in: query\n          description: |\n            The next change ID you recieved from previously fetching changes.\n          schema:\n            type: string\n            default: 0\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PublicStashTab'\n  /api/shop/microtransactions/specials:\n    get:\n      tags:\n        - MTX\n      summary: get today special deals\n      parameters:\n        - name: type\n          in: query\n          schema:\n            type: string\n            enum: [active]\n        - name: limit\n          in: query\n          schema:\n            type: number\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Specials'\n  /api/streams:\n    get:\n      tags:\n        - Streams\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  streams:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Stream'\n  /api/trade/data/leagues:\n    get:\n      tags:\n        - Trade\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TradeDataLeagues'\n  /api/trade/data/items:\n    get:\n      tags:\n        - Trade\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TradeDataItems'\n  /api/trade/data/stats:\n    get:\n      tags:\n        - Trade\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TradeDataStats'\n  /api/trade/data/static:\n    get:\n      tags:\n        - Trade\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TradeDataStatic'\n  /api/trade/data/change-ids:\n    get:\n      tags:\n        - Trade\n      summary: trade last change ids\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TradeChangeIDS'\n  /api/trade/search/{league}:\n    post:\n      tags:\n        - Trade\n      summary: trade search function\n      parameters:\n        - name: league\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/LeagueNames'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchSource'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResult'\n  /api/trade/fetch/{items}:\n    get:\n      tags:\n        - Trade\n      summary: fetch items using search result\n      parameters:\n        - name: items\n          in: path\n          required: true\n          description: Search Results in ,\n          schema:\n            type: string\n          example: c593ccc98580e892eb0745048a8378927b452070e91da03139a00d450eca7477,e1105792ac87113b20487d7cb2d5b9fd43f40b3bdd8a55780acbaaad513c9b65\n        - name: query\n          in: query\n          description: Search id\n          schema:\n            type: string\n          example: Wqn2LKFm\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    $ref: '#/components/schemas/Items'\n  /api/trade/ignore:\n    get:\n      tags:\n        - Trade\n      summary: List ignored trade accounts\n      security:\n        - cookieAuth: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  result:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                  pagination:\n                    type: object\n                    properties:\n                      page:\n                        type: integer\n                        default: 1\n                        minimum: 1\n                      per_page:\n                        type: integer\n                        default: 50\n                      total:\n                        type: integer\n  /api/trade/ignore/{account}:\n    put:\n      tags:\n        - Trade\n      summary: Ignore a trade account\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: account\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n    delete:\n      tags:\n        - Trade\n      summary: Unignore a trade account\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: account\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: {}\n  /ladder/export-csv/league/{league}:\n    get:\n      description: 2000 per page\n      tags:\n        - Ladder\n      parameters:\n        - name: league\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/LeagueNames'\n        - name: realm\n          in: query\n          required: true\n          description: |\n            The realm to fetch PvP matches from\n          schema:\n            $ref: '#/components/schemas/Realms'\n        - name: index\n          in: query\n          required: true\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 8\n      responses:\n        '200':\n          description: OK\n          content:\n            text/csv: {}\n  /api/league:\n    get:\n      tags:\n        - Leagues\n      summary: New OAuth API\n      responses:\n        '200':\n          description: OK\n  /api/league/{id}:\n    get:\n      tags:\n        - Leagues\n      summary: New OAuth API\n      parameters:\n        - name: id\n          in: path\n          description: The league id.\n          required: true\n          schema:\n            type: number\n      responses:\n        '200':\n          description: OK\n  /api/league/{id}/ladder:\n    get:\n      tags:\n        - Ladder\n      summary: New OAuth API\n      parameters:\n        - name: id\n          in: path\n          description: The league id.\n          required: true\n          schema:\n            type: number\n      responses:\n        '200':\n          description: OK\n  /api/pvp-match:\n    get:\n      tags:\n        - PVP\n      summary: New OAuth API\n      responses:\n        '200':\n          description: OK\n  /api/pvp-match/{match}:\n    get:\n      tags:\n        - PVP\n      summary: New OAuth API\n      parameters:\n        - name: match\n          in: path\n          description: The league id.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n  /api/character:\n    get:\n      tags:\n        - Account\n      summary: New OAuth API\n      responses:\n        '200':\n          description: OK\n  /api/character/{name}:\n    get:\n      tags:\n        - Account\n      summary: New OAuth API\n      parameters:\n        - name: name\n          in: path\n          description: name of one of the account's characters\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n  /api/stash/{league}:\n    get:\n      tags:\n        - Account\n      summary: New OAuth API\n      parameters:\n        - name: league\n          in: path\n          description: name of a Path of Exile league\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n  /api/stash/{league}/{stash_id}:\n    get:\n      tags:\n        - Account\n      summary: New OAuth API\n      parameters:\n        - name: league\n          in: path\n          description: name of a Path of Exile league\n          required: true\n          schema:\n            type: string\n        - name: stash_id\n          in: path\n          description: public identifier of a stash tab\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n  /api/item-filter:\n    get:\n      tags:\n        - ItemFilter\n      summary: New OAuth API\n      responses:\n        '200':\n          description: OK\n    post:\n      tags:\n        - ItemFilter\n      summary: New OAuth API\n      responses:\n        '200':\n          description: OK\n  /api/item-filter/{id}:\n    get:\n      tags:\n        - ItemFilter\n      summary: New OAuth API\n      parameters:\n        - name: id\n          in: path\n          description: The league id.\n          required: true\n          schema:\n            type: number\n      responses:\n        '200':\n          description: OK\n"
		}
	},
	"Error": "parse: paths: /api/public-stash-tabs: get: operation \"\": parameters: parse parameter \"id\": schema: parse default: expected type \"string\", got \"number\""
}