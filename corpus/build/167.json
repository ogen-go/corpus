{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/deepmipt/dp-agent"
		},
		"file": {
			"name": "agent_v0.12.0.yml",
			"path": "docs/source/_static/apispec/agent_v0.12.0.yml",
			"content": "openapi: 3.0.1\ninfo:\n  title: DeepPavlov Agent State API\n  version: 0.12.0\n  description: \u003e-\n    Agents built with DeepPavlov Agent communicate with their Services via HTTP, so\n    endpoints should be specified.\nservers:\n  - url: 'http://localhost:{port}/'\n    description: Local development server\n    variables:\n      port:\n        default: '4242'\npaths:\n  /:\n    get:\n      summary: Root path\n      responses:\n        '200':\n          description: Go to /apidocs/ to see graphical web UI for this API.\n  '/api/v0/{skill_endpoint}/':\n    post:\n      parameters:\n        - name: skill_endpoint\n          in: path\n          required: true\n          schema:\n            enum:\n              - model\n      summary: Generic skill endpoint\n      description: \u003e-\n        An agent built with DeepPavlov Agent sends requests to the services endpoints in\n        order to retrieve the answers.\n      requestBody:\n        description: Description of the request to be executed\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestBodySchema'\n            examples:\n              general:\n                $ref: '#/components/examples/GenericRequestBody'\n      responses:\n        '200':\n          description: Request finished succesfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ODQAResponse200Schema\"\n              examples:\n                odqa:\n                  $ref: \"#/components/examples/ODQAResponse\"\n        '404':\n          description: This skill doesn't exsits.\ncomponents:\n  schemas:\n    RequestBodySchema:\n      type: object\n      properties:\n        id:\n          description: REQUIRED. A unique id of the dialog.\n          type: string\n        location:\n          description: 'REQUIRED. A free-formatted location where the dialog is happening.'\n          type: string\n        utterances:\n          description: \u003e-\n            REQUIRED. A list of all utterances of the dialog. The last utterance always belongs\n            to a human user.\n          type: array\n          items:\n             oneOf:\n              - $ref: '#/components/schemas/HumanUtterance'\n              - $ref: '#/components/schemas/BotUtterance'\n        human:\n          $ref: '#/components/schemas/Human'\n        bot:\n          $ref: '#/components/schemas/Bot'\n        channel_type:\n          description: \u003e-\n            REQUIRED. A channel where the communication is happening. For example, \"telegram\",\n            \"facebook\", \"http\".\n          type: string\n    Human:\n      description: 'REQUIRED. A human user in the dialog.'\n      type: object\n      properties:\n        id:\n          description: REQUIRED. A unique is of the human user.\n          type: string\n        user_telegram_id:\n          description:  REQUIRED. A unique Telegram id of the human user.\n          type: string\n        user_type:\n          description: REQUIRED. A user type. Here it is always “human”.\n          type: string\n        device_type:\n          description: \u003e-\n            REQUIRED. A name of the device which is used by the user. For example, it can be \"iphone\" or \"android\".\n          type: string\n        persona:\n          description: REQUIRED. A persona of the human user. It is stored as an array of sentences characterizing the human user. By default this is an empty array.\n          type: array\n          items:\n            type: string\n        profile:\n          $ref: '#/components/schemas/Profile'\n        attributes:\n          description: Generic key-value attributes.\n          type: object\n          items:\n            type: object\n    Bot:\n      description: \u003e-\n        REQUIRED. A bot user of the dialog. A bot is an agent with a particular skill set.\n      type: object\n      properties:\n        id:\n          description: REQUIRED.  A unique is of the bot user.\n          type: string\n        user_type:\n          description: REQUIRED. A user type. Here it is always “human”.\n          type: string\n        persona:\n          description: REQUIRED. A persona of the bot user. It is stored as an array of sentences characterizing the human user. By default this is an empty array.\n          type: array\n          items:\n            type: string\n        attributes:\n          description: Generic key-value attributes.\n          type: object\n          items:\n            type: object\n    Profile:\n      description: REQUIRED. A personal information about the human user.\n      type: object\n      properties:\n        gender:\n          description: REQUIRED. A gender of the human user.\n          type: string\n        birthdate:\n          description: REQUIRED. Birthdate\n          type: string\n          format: date\n        name:\n          description: REQUIRED. A name of the human user.\n          type: string\n        location:\n          description: REQUIRED. A location of the human user.\n          type: object\n        home_coordinates:\n          description: REQUIRED. Home coordinates of the human user.\n          type: object\n        work_coordinates:\n          description: REQUIRED. Workplace coordinates of the human user.\n          type: object\n        occupation:\n          description: REQUIRED. A profession of the human user.\n          type: string\n        income_per_year:\n          description: REQUIRED. An income of the human user.\n          type: number\n    HumanUtterance:\n      description: RESUIRED. An utterance of the human user.\n      type: object\n      properties:\n        id:\n          type: string\n          description: REQUIRED. A unique id of the human utterance.\n        text:\n          type: string\n          description: \u003e-\n            REQUIRED. Text of the human utterance. If this is the very first utterance of the dialog,\n            it has the \"/start\" value.\n        user:\n          $ref: '#/components/schemas/Human'\n        annotations:\n          $ref: '#/components/schemas/Annotations'\n        date_time:\n          type: string\n          format: datetime\n          description: REQUIRED. A time of the utterance receiving by the agent server.\n        hypotheses:\n          type: array\n          items:\n            type: object\n          description: \u003e-\n            Response candidates to this particular Utterance, generated by Skills.\n    BotUtterance:\n      description: RESUIRED. An utterance of the bot user.\n      type: object\n      properties:\n        id:\n          type: string\n          description: REQUIRED. A unique id of the bot utterance.\n        text:\n          type: string\n          description: \u003e-\n            REQUIRED. Text of the bot utterance.\n        orig_text:\n          type: string\n          description: \u003e-\n            An original reponse given by the skill which can be transformed later by ResponseSelector\n            or Postprocessor. If it was transformed, the transformed response goes to the \"text\" field\n            and the original response is stored to the \"orig_text\" field. The field has value None by default.\n        user:\n            $ref: '#/components/schemas/Bot'\n        annotations:\n          $ref: '#/components/schemas/Annotations'\n        date_time:\n          type: string\n          format: datetime\n          description: REQUIRED. A time of the utterance receiving by the agent server.\n        confidence:\n          type: number\n          description: Skill confidence in its response.\n        active_skill:\n          type: string\n          description: \u003e-\n            A name of the skill which was responsible for the final bot response generation.\n    Annotations:\n      description: \u003e-\n        REQUIRED. The utterances annotations, or tags. The default values of the field is an empty array: []. If the dialog starts with \"/start\" utterance, this utterance is not being annotated.\n      type: object\n    ODQAResponse200Unit:\n      description: \u003e-\n        A list of skill responses. Each response here is a hypothetical response to the same human utterance. So s skill should generate a number of possible reponses for each incoming human utterance.\n      type: array\n      items:\n        type: object\n        properties:\n          text:\n            description: A text reponse of the skill.\n            type: string\n          confidence:\n            description: \u003e-\n              Skill confidence in its reponse.\n            type: number\n    ODQAResponse200Schema:\n      description: \u003e-\n        A batch of lists or skill responses. A skill should provide a list of hypothetical answers for each incoming human utterance.\n      properties:\n        responses:\n          type: array\n          items:\n            $ref: '#/components/schemas/ODQAResponse200Unit'\n  examples:\n    GenericRequestBody:\n      description: one exaustive example\n      value:\n        id: 5d9b755eb8cd280022907f27\n        location: lab\n        utterances:\n          - id: 5d9b755eb8cd280022907f29\n            text: Hello\n            user:\n              id: 5d9b755eb8cd280022907f25\n              user_telegram_id: vasily\n              user_type: human\n              device_type: cmd\n              persona: []\n              profile:\n                name: None\n                gender: None\n                birthdate: None\n                location: None\n                home_coordinates: None\n                work_coordinates: None\n                occupation: None\n                income_per_year: None\n              attributes: {}\n            annotations:\n              ner:\n                tokens:\n                  - Hello\n                tags:\n                  - O\n            date_time: '2019-10-07 20:26:54.409000'\n            hypotheses:\n              - skill_name: chitchat\n                text: Hi!\n                confidence: 0.6\n              - skill_name: odqa\n                text: to my friends\n                confidence: 0.23\n          - id: 5d9b755eb8cd280022907f28\n            active_skill: chitchat\n            confidence: 0.6\n            text: Hi!\n            orig_text: None\n            user:\n              id: 5d9b755eb8cd280022907f26\n              user_type: bot\n              persona: []\n              attributes: {}\n            annotations:\n              bot_ner:\n                tokens:\n                  - Hi\n                  - '!'\n                tags:\n                  - O\n                  - O\n            date_time: '2019-10-07 20:26:54.856000'\n          - id: 5d9b7565b8cd280022907f2b\n            text: What is your name?\n            user:\n              id: 5d9b755eb8cd280022907f25\n              user_telegram_id: к5698\n              user_type: human\n              device_type: cmd\n              persona: []\n              profile:\n                name: None\n                gender: None\n                birthdate: None\n                location: None\n                home_coordinates: None\n                work_coordinates: None\n                occupation: None\n                income_per_year: None\n              attributes: {}\n            annotations:\n              ner:\n                tokens:\n                  - What\n                  - is\n                  - your\n                  - name\n                  - '?'\n                tags:\n                  - O\n                  - O\n                  - O\n                  - O\n                  - O\n            date_time: '2019-10-07 20:27:01.193000'\n            hypotheses:\n              - skill_name: chitchat\n                text: My name is DeepPavlov Agent!\n                confidence: 0.9\n              - skill_name: odqa\n                text: Alexander the Great\n                confidence: 0.5\n          - id: 5d9b7565b8cd280022907f2a\n            active_skill: chitchat\n            confidence: 0.6\n            text: My name is DeepPavlov Agent!\n            orig_text: None\n            user:\n              id: 5d9b755eb8cd280022907f26\n              user_type: bot\n              persona: []\n              attributes: {}\n            annotations:\n              bot_ner:\n                tokens:\n                  - My\n                  - name\n                  - is\n                  - DeepPavlov\n                  - Agent\n                  - '!'\n                tags:\n                  - O\n                  - O\n                  - O\n                  - O\n                  - O\n                  - O\n            date_time: '2019-10-07 20:27:01.367000'\n        channel_type: cmd_client\n        human:\n          id: 5d9b755eb8cd280022907f25\n          user_telegram_id: к5698\n          user_type: human\n          device_type: cmd\n          persona: []\n          profile:\n            name: None\n            gender: None\n            birthdate: None\n            location: None\n            home_coordinates: None\n            work_coordinates: None\n            occupation: None\n            income_per_year: None\n          attributes: {}\n        bot:\n          id: 5d9b755eb8cd280022907f26\n          user_type: bot\n          persona: []\n          attributes: {}\n        version: 0.12.0\n    ODQAResponse:\n      description: An example of Open Domain Question Answering (ODQA) skill.\n      value:\n        responses:\n          -\n            - text: Peter the Great was born at 1672.\n              confidence: 0.947\n            - text: at 1672\n              confidence: 0.998\n          -\n            - text: The Earth population is 7 billions.\n              confidence: 0.3333\n            - text: 7 billions\n              confidence: 0.36"
		}
	},
	"Error": "parse: paths: /api/v0/{skill_endpoint}/: post: : requestBody: content: application/json: parse schema: parse schema: reference \"#/components/schemas/RequestBodySchema\": parse schema: bot: parse schema: reference \"#/components/schemas/Bot\": parse schema: attributes: parse schema: object cannot contain 'items' field"
}