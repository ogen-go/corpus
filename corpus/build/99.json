{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vanilla/vanilla"
		},
		"file": {
			"name": "search.yml",
			"path": "applications/dashboard/openapi/search.yml",
			"content": "openapi: 3.0.2\ninfo:\npaths:\n    /search:\n        get:\n            parameters:\n                - description: |\n                      Filter the records using the supplied terms.\n                  in: query\n                  name: query\n                  schema:\n                      type: string\n                  x-search-filter: true\n                - description: |\n                      Restrict the search to the specified main type(s) of records.\n                  in: query\n                  name: recordTypes[]\n                  schema:\n                      items:\n                          enum:\n                              - article\n                              - discussion\n                              - comment\n                              - group\n                          type: string\n                      type: array\n                  style: form\n                - description: |\n                      Restrict the search to the specified type(s) of records.\n                  in: query\n                  name: types[]\n                  schema:\n                      items:\n                          enum:\n                              - article\n                              - discussion\n                              - comment\n                              - question\n                              - answer\n                              - group\n                              - poll\n                          type: string\n                      type: array\n                  style: form\n                - description: \u003e\n                      Set the scope of the search to the comments of a discussion.\n                      Incompatible with recordType and type.\n                  in: query\n                  name: discussionID\n                  schema:\n                      type: integer\n                  x-search-scope: true\n                - description: |\n                      Set the scope of the search to a specific category.\n                  in: query\n                  name: categoryID\n                  schema:\n                      type: integer\n                  x-search-scope: true\n                - description: |\n                      Set the scope of the search to followed categories only.\n                  in: query\n                  name: followedCategories\n                  schema:\n                      default: false\n                      type: boolean\n                  x-search-scope: true\n                - description: \u003e\n                      Search the specified category's subtree. Works with\n                      categoryID\n                  in: query\n                  name: includeChildCategories\n                  schema:\n                      default: false\n                      type: boolean\n                - description: |\n                      Allow search in archived categories.\n                  in: query\n                  name: includeArchivedCategories\n                  schema:\n                      default: false\n                      type: boolean\n                - description: |\n                      Filter the records by KnowledgeBase ID\n                  in: query\n                  name: knowledgeBaseID\n                  schema:\n                      type: integer\n                  x-search-scope: true\n                - description: |\n                      Filter the records by KnowledgeCategory ID\n                  in: query\n                  name: knowledgeCategoryIDs[]\n                  schema:\n                      items:\n                          type: integer\n                      type: array\n                  x-search-scope: true\n                - description: |\n                      Filter the records by matching part of their name.\n                  in: query\n                  name: name\n                  schema:\n                      type: string\n                  x-search-filter: true\n                - description: |\n                      Filter the records by their featured status.\n                  in: query\n                  name: featured\n                  schema:\n                      type: boolean\n                  x-search-filter: true\n                - description: |\n                      Filter the records by their locale.\n                  in: query\n                  name: locale\n                  schema:\n                      type: string\n                  x-search-filter: true\n                - description: |\n                      Filter the records by their site-section-group.\n                  in: query\n                  name: siteSiteSectionGroup\n                  schema:\n                      type: string\n                  x-search-filter: true\n                - description: |\n                      Filter the records by inserted user names.\n                  in: query\n                  name: insertUserNames[]\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                  style: form\n                  x-search-filter: true\n                - description: |\n                      Filter the records by inserted userIDs.\n                  in: query\n                  name: insertUserIDs[]\n                  schema:\n                      items:\n                          type: integer\n                      type: array\n                  style: form\n                  x-search-filter: true\n                - $ref: \"#/components/parameters/DateInserted\"\n                - description: |\n                      Filter discussions by matching tags.\n                  in: query\n                  name: tags[]\n                  schema:\n                      items:\n                          type: string\n                      type: array\n                  style: form\n                  x-search-filter: true\n                - description: |\n                      Tags search condition.\n                      Must be one of: \"and\", \"or\".\n                  in: query\n                  name: tagOperator\n                  schema:\n                      type: string\n                      default: or\n                      enum:\n                          - and\n                          - or\n                - description: |\n                      Set the default search type.\n                  in: query\n                  name: queryOperator\n                  schema:\n                      type: string\n                      default: and\n                      enum:\n                          - and\n                          - or\n                - $ref: \"#/components/parameters/Page\"\n                - description: |\n                      Desired number of items per page.\n                  in: query\n                  name: limit\n                  schema:\n                      type: integer\n                      default: 30\n                      maximum: 100\n                      minimum: 1\n                - description: \u003e\n                      Expand the results to include a rendered body field.\n                  in: query\n                  name: expandBody\n                  schema:\n                      type: boolean\n                      default: true\n                - description: \u003e\n                      Expand associated records using one or more valid field names. A\n                      value of \"all\" will expand all expandable fields.\n                  in: query\n                  name: expand[]\n                  schema:\n                      items:\n                          enum:\n                              - insertUser\n                              - breadcrumbs\n                              - excerpt\n                              - image\n                          type: string\n                      type: array\n                  style: form\n            responses:\n                \"200\":\n                    content:\n                        \"application/json\":\n                            schema:\n                                items:\n                                    $ref: \"#/components/schemas/SearchResult\"\n                                type: array\n                    description: Success\n            tags:\n                - Search\n            summary: Search for records matching specific criteria.\ncomponents:\n    schemas:\n        SearchResult:\n            properties:\n                url:\n                    description: The URL of the record.\n                    type: string\n                body:\n                    description: The content of the record.\n                    minLength: 1\n                    nullable: true\n                    type: string\n                excerpt:\n                    description: An excerpt of the record.\n                    type: string\n                categoryID:\n                    description: The category containing the record.\n                    type: integer\n                commentID:\n                    description: The id of the comment.\n                    type: integer\n                dateInserted:\n                    description: When the record was created.\n                    format: date-time\n                    type: string\n                dateUpdated:\n                    description: When the user was updated.\n                    format: date-time\n                    nullable: true\n                    type: string\n                discussionID:\n                    description: The id of the discussion.\n                    type: integer\n                groupID:\n                    description: The id of the group or the id of the group containing the record.\n                    nullable: true\n                    type: integer\n                insertUserID:\n                    description: The user that created the record.\n                    type: integer\n                insertUser:\n                    $ref: \"schemas.yml#/components/schemas/UserFragment\"\n                name:\n                    description: 'The title of the record. A comment would be \"RE: {DiscussionTitle}\".'\n                    minLength: 1\n                    type: string\n                recordID:\n                    description: The identifier of the record.\n                    type: integer\n                recordType:\n                    description: The main type of record.\n                    enum:\n                        - discussion\n                        - comment\n                        - group\n                    minLength: 1\n                    type: string\n                score:\n                    description: Score of the record.\n                    type: integer\n                type:\n                    description: Sub-type of the discussion.\n                    enum:\n                        - discussion\n                        - comment\n                        - question\n                        - group\n                    minLength: 1\n                    type: string\n                updateUserID:\n                    description: The user that updated the record.\n                    nullable: true\n                    type: integer\n                image:\n                    description: The url of the first image in the record.\n                    type: string\n                breadcrumbs:\n                    description: \"List of breadcrumbs objects. Only returned if: expand[] = breadcrumbs.\"\n                    items:\n                        properties:\n                            name:\n                                description: Breadcrumb element name.\n                                minLength: 1\n                                type: string\n                                example: User Feedback\n                            url:\n                                description: Breadcrumb element url.\n                                minLength: 1\n                                type: string\n                                example: \"https://vanilla.com/forum/user-feedback/\"\n                        type: object\n                    type: array\n            required:\n                - recordID\n                - recordType\n                - type\n                - name\n                - body\n                - score\n                - insertUserID\n                - dateInserted\n                - updateUserID\n                - dateUpdated\n            type: object\n"
		}
	},
	"Error": "parse: paths: /search: get: operation \"\": parameters: parse parameter \"\": resolve \"#/components/parameters/DateInserted\" reference: component by reference \"#/components/parameters/DateInserted\" not found"
}