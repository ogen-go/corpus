{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dod-ccpo/atat-web-api"
		},
		"file": {
			"name": "atat_internal_api.yaml",
			"path": "atat_internal_api.yaml",
			"content": "openapi: 3.0.2\ninfo:\n  description: \u003e-\n    This is the ATAT Internal API. It has operations for creating, updating and destroying ATAT resources, as well as\n    for obtaining reporting data about provisioned Portfolios.\n  version: 1.0.0\n  title: ATAT Internal API\n  contact:\n    email: atat-dev+provisioning_api@ccpo.mil\ntags:\n  - name: CRUD\n    description: \u003e-\n      Operations related to managing Portfolios, Applications and Environments\npaths:\n  /portfolios:\n    get:\n      operationId: getPortfolios\n      parameters:\n        - $ref: '#/components/parameters/offsetParam'\n        - $ref: '#/components/parameters/limitParam'\n      responses:\n        '400':\n          description: Invalid request parameter\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        '200':\n          description: Should return up to {limitParam} items\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PortfolioSummary\"\n              examples:\n                PortfolioSummaries:\n                  $ref: '#/components/examples/PortfolioSummaries'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    post:\n      operationId: createPortfolio\n      requestBody:\n        description: Use an empty request body to create an empty Portfolio or pass a complete object to create a complete version.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Portfolio'\n          text/plain:\n            schema:\n              type: string\n              example: ''\n      responses:\n        '201':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Portfolio\"\n              examples:\n                PortfolioRequestBody:\n                  $ref: '#/components/examples/PortfolioResponseBody'\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePortfolioFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolios/{portfolioId}:\n    get:\n      description: Gets a detailed view of a Portfolio\n      operationId: getPortfolio\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortfolioDetail'\n              examples:\n                PortfolioDraftEx:\n                  $ref: '#/components/examples/PortfolioResponseBody'\n        '404':\n          description: Portfolio with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    put:\n      operationId: updatePortfolio\n      parameters:\n        - name: portfolioId\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Update an existing Portfolio\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Portfolio'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PortfolioBase\"\n              examples:\n                PortfolioEx:\n                  $ref: '#/components/examples/PortfolioResponseBody'\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    delete:\n      description: Deletes a Portfolio (soft delete if provisioned, hard delete otherwise)\n      operationId: deletePortfolio\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortfolioDetail'\n        '404':\n          description: Portfolio with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    patch:\n      description: Used to update operators for this Portfolio\n      operationId: patchPortfolio\n      parameters:\n        - name: portfolioId\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PortfolioAccess'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortfolioDetail'\n              examples:\n                PortfolioEx:\n                  $ref: '#/components/examples/PortfolioResponseBody'\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolios/{portfolioId}/applications:\n    get:\n      description: Gets a detailed view of all Applications within a Portfolio\n      operationId: getApplications\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Application\"\n        '404':\n          description: Portfolio with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    post:\n      operationId: createApplication\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Application'\n      responses:\n        '201':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Application\"\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateApplicationFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolios/{portfolioId}/applications/{applicationId}:\n    get:\n      description: Gets a detailed view of an Application within a Portfolio\n      operationId: getApplication\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: applicationId\n          in: path\n          description: ID of the Application\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Application'\n        '404':\n          description: Portfolio or Application with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    put:\n      operationId: updateApplication\n      description: Updates an existing Application\n      parameters:\n        - name: portfolioId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: applicationId\n          in: path\n          description: ID of the Application\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Update an existing Portfolio\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Application'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Application\"\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    delete:\n      description: Deletes an Application (hard delete if not provisioned, soft delete otherwise)\n      operationId: deleteApplication\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: applicationId\n          in: path\n          description: ID of the Application\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Application'\n        '404':\n          description: Portfolio or Application with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    patch:\n      description: Used to update operators for this Application\n      operationId: patchApplication\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: applicationId\n          in: path\n          description: ID of the Application\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppEnvAccess'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Application'\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolios/{portfolioId}/applications/{applicationId}/environments:\n    get:\n      description: Gets a detailed view of all Environments within an Application\n      operationId: getEnvironments\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: applicationId\n          in: path\n          description: ID of the Application\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Environment\"\n        '404':\n          description: Portfolio or Application with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    post:\n      operationId: createEnvironment\n      description: Creates a new Environment as a child under the given Application\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: applicationId\n          in: path\n          description: ID of the Application\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Environment'\n      responses:\n        '201':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Environment\"\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        '404':\n          description: Portfolio or Application with the given ID does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateEnvironmentFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolios/{portfolioId}/applications/{applicationId}/environments/{environmentId}:\n    get:\n      description: Gets a detailed view of an Environment within an Application\n      operationId: getEnvironment\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: applicationId\n          in: path\n          description: ID of the Application\n          required: true\n          schema:\n            type: string\n        - name: environmentId\n          in: path\n          description: ID of the Environment\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Environment'\n        '404':\n          description: Portfolio, Application or Environment with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    put:\n      operationId: updateEnvironment\n      description: Updates an existing Environment\n      parameters:\n        - name: portfolioId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: applicationId\n          in: path\n          description: ID of the Application\n          required: true\n          schema:\n            type: string\n        - name: environmentId\n          in: path\n          description: ID of the Environment\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Update an existing Environment\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Environment'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Environment\"\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        '404':\n          description: Portfolio, Application or Environment with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateEnvironmentFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    delete:\n      description: Deletes an Environment (hard delete if not provisioned, soft delete otherwise)\n      operationId: deleteEnvironment\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: applicationId\n          in: path\n          description: ID of the Application\n          required: true\n          schema:\n            type: string\n        - name: environmentId\n          in: path\n          description: ID of the Environment\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Environment'\n        '404':\n          description: Portfolio, Application or Environment with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    patch:\n      description: Used to update operators for this Environment\n      operationId: patchEnvironment\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: applicationId\n          in: path\n          description: ID of the Application\n          required: true\n          schema:\n            type: string\n        - name: environmentId\n          in: path\n          description: ID of the Environment\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppEnvAccess'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Environment'\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolios/{portfolioId}/taskOrders:\n    get:\n      description: Gets a detailed view of all Task Orders within a Portfolio\n      operationId: getTaskOrders\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TaskOrder\"\n        '404':\n          description: Portfolio with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    post:\n      operationId: createTaskOrder\n      description: Creates a new Task Order under the given Portfolio\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskOrder'\n      responses:\n        '201':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TaskOrder\"\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolios/{portfolioId}/taskOrders/{taskOrderId}:\n    get:\n      description: Gets a detailed view of a Task Order within a Portfolio\n      operationId: getTaskOrder\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: taskOrderId\n          in: path\n          description: ID of the TaskOrder\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskOrder'\n        '404':\n          description: Portfolio or TaskOrder with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    put:\n      operationId: updateTaskOrder\n      description: Updates an existing Task Order\n      parameters:\n        - name: portfolioId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: taskOrderId\n          in: path\n          description: ID of the TaskOrder\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Update an existing Task Order\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskOrder'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TaskOrder\"\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    delete:\n      description: Deletes a Task Order (hard delete if not provisioned, soft delete otherwise)\n      operationId: deleteTaskOrder\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: taskOrderId\n          in: path\n          description: ID of the TaskOrder\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskOrder'\n        '404':\n          description: Portfolio or Task Order with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolios/{portfolioId}/taskOrders/{taskOrderId}/clins:\n    get:\n      description: Gets a detailed view of all CLINs within a Task Order\n      operationId: getClins\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: taskOrderId\n          in: path\n          description: ID of the TaskOrder\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Clin\"\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        '404':\n          description: Portfolio or Task Order with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    post:\n      operationId: createClin\n      description: Creates a new CLIN within the given Task Order\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: taskOrderId\n          in: path\n          description: ID of the TaskOrder\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskOrder'\n      responses:\n        '201':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TaskOrder\"\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolios/{portfolioId}/taskOrders/{taskOrderId}/clins/{clin}:\n    get:\n      description: Gets a detailed view of a CLIN within a Task Order\n      operationId: getClin\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: taskOrderId\n          in: path\n          description: ID of the TaskOrder\n          required: true\n          schema:\n            type: string\n        - name: clin\n          in: path\n          description: Contract Line Item Number (CLIN)\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Clin'\n        '404':\n          description: Portfolio or TaskOrder with the given ID does not exist, or the given CLIN is not a part of the given Task Order\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    put:\n      description: Updates a CLIN. Not allowed on provisioned portfolios.\n      operationId: updateClin\n      parameters:\n        - name: portfolioId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: taskOrderId\n          in: path\n          description: ID of the TaskOrder\n          required: true\n          schema:\n            type: string\n        - name: clin\n          in: path\n          description: Contract Line Item Number (CLIN)\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Update an existing CLIN\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Clin'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Clin\"\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    delete:\n      description: Deletes a CLIN. Not allowed on provisioned portfolios, hard delete on draft Portfolios.\n      operationId: deleteClin\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n        - name: taskOrderId\n          in: path\n          description: ID of the TaskOrder\n          required: true\n          schema:\n            type: string\n        - name: clin\n          in: path\n          description: Contract Line Item Number (CLIN)\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Clin'\n        '404':\n          description: Portfolio or Task Order with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /portfolios/{portfolioId}/submit:\n    post:\n      description: Submits all pending resources within the given Portfolio for Provisioning\n      operationId: submitPortfolio\n      parameters:\n        - name: portfolioId\n          in: path\n          description: ID of the Portfolio\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n              example: '{}'\n          text/plain:\n            schema:\n              type: string\n              example: ''\n      responses:\n        '201':\n          description: TBD - this will likely return a representation of all the provisioning jobs\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /taskOrderFiles:\n    post:\n      tags:\n        - taskOrder\n      description: Uploads a Task Order PDF file\n      operationId: uploadTaskOrderFile\n      responses:\n        '201':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileMetadata'\n        '404':\n          description: Task Order with the given number does not exist\n      requestBody:\n        required: true\n        content:\n          application/pdf:\n            schema:\n              type: string\n              format: binary\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadTaskOrderFileFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /taskOrderFiles/{taskOrderId}:\n    get:\n      tags:\n        - taskOrder\n      description: Gets metadata for a Task Order PDF file\n      operationId: getTaskOrderFileMetadata\n      parameters:\n        - name: taskOrderId\n          in: path\n          description: Task Order ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileMetadata'\n        '404':\n          description: Task Order with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    delete:\n      tags:\n        - taskOrder\n      description: Deletes a Task Order PDF file\n      operationId: deleteTaskOrderFile\n      parameters:\n        - name: taskOrderId\n          in: path\n          description: Task Order ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful operation\n        '404':\n          description: Task Order with the given ID does not exist\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTaskOrderFileFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\n  /taskOrderFiles/{taskOrderId}/file:\n    get:\n      tags:\n        - taskOrder\n      description: Downloads a Task Order PDF file\n      operationId: downloadTaskOrderFile\n      parameters:\n        - name: taskOrderId\n          in: path\n          description: Task Order ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/pdf:\n              schema:\n                type: string\n                format: binary\n        '404':\n          description: Task Order with the given ID does not exist or is pending processing\n      x-amazon-apigateway-request-validator: \"request-params-validator\"\n      x-amazon-apigateway-integration:\n        httpMethod: \"POST\"\n        uri:\n          Fn::Sub: \"arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations\"\n        type: \"aws_proxy\"\n      security:\n        Fn::If:\n          - IsAuthorizationRequired\n          -\n            - cognitoAuthorizer: []\n          - Ref: AWS::NoValue\n    options:\n      tags:\n        - cors\n      description: CORS headers\n      responses:\n        '200':\n          $ref: '#/components/responses/CorsHeaders'\n      x-amazon-apigateway-integration:\n        type: mock\n        requestTemplates:\n          application/json: |\n            {\n              \"statusCode\" : 200\n            }\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''*'''\n              method.response.header.Access-Control-Allow-Methods: '''*'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            responseTemplates:\n              application/json: \"{}\"\ncomponents:\n  parameters:\n    offsetParam:\n      in: query\n      name: offset\n      required: false\n      schema:\n        type: integer\n        minimum: 0\n      description: The number of items to skip before starting to collect the result set.\n    limitParam:\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 50\n        default: 20\n      description: The numbers of items to return.\n  responses:\n    CorsHeaders:\n      description: Default response for CORS method\n      headers:\n        Access-Control-Allow-Origin:\n          schema:\n            type: string\n        Access-Control-Allow-Methods:\n          schema:\n            type: string\n        Access-Control-Allow-Headers:\n          schema:\n            type: string\n      content: {}\n  schemas:\n    BaseObject:\n      type: object\n      properties:\n        updatedAt:\n          type: string\n          format: \"date-time\"\n          readOnly: true\n        createdAt:\n          type: string\n          format: \"date-time\"\n          readOnly: true\n        archivedAt:\n          type: string\n          format: \"date-time\"\n          readOnly: true\n        id:\n          type: string\n          readOnly: true\n      additionalProperties: false\n      description: \"Base model common to all first-class objects (those with IDs)\"\n    Error:\n      type: object\n      additionalProperties: false\n      description: Generic error model\n      properties:\n        code:\n          type: string\n          enum:\n            - INVALID_INPUT\n            - OTHER\n        message:\n          type: string\n      required:\n        - code\n        - message\n    ValidationError:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - type: object\n          additionalProperties: false\n          required:\n            - errorMap\n          properties:\n            errorMap:\n              type: object\n              description: 'Maps form input IDs to validation error messages so that clients can display in-line errors'\n    FileMetadata:\n      type: object\n      additionalProperties: false\n      description: \"Metadata describing an uploaded file\"\n      allOf:\n        - $ref: \"#/components/schemas/BaseObject\"\n        - $ref: \"#/components/schemas/FileMetadataSummary\"\n        - type: object\n          properties:\n            size:\n              type: number\n              description: \"file size in bytes\"\n            status:\n              type: string\n              description: \"status of uploaded file scans and review\"\n              enum:\n                - PENDING\n                - ACCEPTED\n                - REJECTED\n    PortfolioBase:\n      type: object\n      required:\n        - csp\n        - dodComponents\n        - name\n      allOf:\n        - $ref: \"#/components/schemas/BaseObject\"\n      properties:\n        csp:\n          type: string\n          enum:\n            - \"CSP A\"\n            - \"CSP B\"\n        dodComponents:\n          type: array\n          items:\n            type: string\n            enum:\n              - AIR_FORCE\n              - ARMY\n              - MARINE_CORPS\n              - NAVY\n              - SPACE_FORCE\n              - COMBATANT_COMMAND\n              - JOINT_STAFF\n              - DAFA\n              - OSD_PSAS\n              - NSA\n        name:\n          pattern: \"^[a-zA-Z\\\\d -]{4,100}$\"\n          type: string\n      additionalProperties: false\n    Portfolio:\n      type: object\n      required:\n        - portfolioManagers\n      allOf:\n        - $ref: \"#/components/schemas/PortfolioBase\"\n        - $ref: \"#/components/schemas/PortfolioAccess\"\n      properties:\n        portfolioManagers:\n          type: array\n          items:\n            type: string\n            format: email\n        description:\n          type: string\n        owner:\n          # This will be a string for now until the ATAT User design is further fleshed out\n          #$ref: '#/components/schemas/User'\n          type: string\n          readOnly: true\n        applications:\n          type: array\n          readOnly: true\n          items:\n            $ref: \"#/components/schemas/Application\"\n      additionalProperties: false\n    PortfolioSummary:\n      type: object\n      additionalProperties: false\n      description: \"Portfolio Draft parent object\"\n      allOf:\n        - $ref: \"#/components/schemas/PortfolioBase\"\n      properties:\n        totalObligated:\n          minimum: 0\n          type: number\n        fundsSpent:\n          minimum: 0\n          type: number\n        earliestPopStartDate:\n          type: string\n          description: \"Earliest popStartDate of all active CLINs in this Portfolio\"\n          format: date\n        latestPopEndDate:\n          type: string\n          description: \"Latest popEndDate of all active CLINs in this Portfolio\"\n          format: date\n        popMessage:\n          type: string\n          description: \"Message displayed to the user regarding the imminence of PoP dates\"\n        popStatus:\n          type: string\n          description: \"Portfolio status relative to Period of Performance of active CLINs\"\n          enum:\n            - EXPIRING\n            - DELINQUENT\n        fundingStatus:\n          type: string\n          description: \"Portfolio status relative to available funds in active CLINs\"\n          enum:\n            - AT_RISK\n            - DELINQUENT\n        provisioningStatus:\n          type: string\n          description: \"CSP Provisioning Status\"\n          enum:\n            - PENDING\n            - IN_PROGRESS\n            - COMPLETE\n            - FAILED\n        lifecycleStatus:\n          type: string\n          description: \"Portfolio status relative to the lifecycle of the object in ATAT and the CSP\"\n          enum:\n            - DRAFT\n            - ACTIVE\n            - ARCHIVED\n    PortfolioDetail:\n      allOf:\n        - $ref: \"#/components/schemas/Portfolio\"\n        - $ref: '#/components/schemas/PortfolioSummary'\n    Application:\n      required:\n        - environments\n        - name\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/BaseObject\"\n        - $ref: '#/components/schemas/AppEnvAccess'\n      properties:\n        environments:\n          minItems: 1\n          type: array\n          items:\n            $ref: \"#/components/schemas/Environment\"\n        name:\n          pattern: \"^[a-zA-Z\\\\d _-]{4,100}$\"\n          type: string\n        description:\n          pattern: \"^[\\\\w\\\\d !@#$%^\u0026*_|:;,'.-]{0,300}$\"\n          type: string\n      additionalProperties: false\n      description: \"Represents an Application in a Portfolio\"\n    Environment:\n      required:\n        - name\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/BaseObject\"\n        - $ref: '#/components/schemas/AppEnvAccess'\n      properties:\n        name:\n          pattern: \"^[a-zA-Z\\\\d _-]{1,100}$\"\n          type: string\n      additionalProperties: false\n      description: \"Represents an Environment for a specific Application\"\n    Clin:\n      required:\n        - clin_number\n        - idiq_clin\n        - obligatedFunds\n        - popEndDate\n        - popStartDate\n        - totalClinValue\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/BaseObject\"\n      properties:\n        clinNumber:\n          pattern: \"(?!^0{4}$)^\\\\d{4}$\"\n          type: string\n          description: \"Contract Line Item Number (CLIN), 0001 through 9999\"\n        obligatedFunds:\n          type: number\n        idiqClin:\n          type: string\n        popStartDate:\n          type: string\n          description: \"Start of period of performance\"\n          format: date\n        popEndDate:\n          type: string\n          description: \"End of period of performance\"\n          format: date\n        totalClinValue:\n          type: number\n      additionalProperties: false\n      description: \"Represents a Clin in a Task Order\"\n    TaskOrder:\n      required:\n        - clins\n        - taskOrderFile\n        - taskOrderNumber\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/BaseObject\"\n      properties:\n        clins:\n          minItems: 1\n          type: array\n          items:\n            $ref: \"#/components/schemas/Clin\"\n        taskOrderFile:\n          description: \u003e-\n            Metadata associated with file which was previously uploaded\n            by POST /taskOrderFiles\n          allOf:\n            - $ref: \"#/components/schemas/FileMetadataSummary\"\n        taskOrderNumber:\n          pattern: \"^[\\\\d]{13,17}$\"\n          type: string\n          description: \"TO numbers are 13 characters. TO modifications are 17 characters.\"\n      additionalProperties: false\n      description: \"Represents a Task Order in the Funding Step\"\n    FileMetadataSummary:\n      required:\n        - id\n        - name\n      type: object\n      properties:\n        name:\n          type: string\n          description: \"name of file when uploaded\"\n        id:\n          type: string\n          description: \"Should be a UUID. Will be the S3 Object Key.\"\n      additionalProperties: false\n      description: \"Metadata describing an uploaded file\"\n    PortfolioAccess:\n      description: \u003e-\n        Represents a set of Operators who should be granted access to\n        a Portfolio at a specific access level. Uses an enum construct for forward\n        compatibility should other access levels be specified.\n      properties:\n        administrators:\n          type: array\n          items:\n            type: string\n            format: email\n    AppEnvAccess:\n      description: \u003e-\n        Represents a set of Operators who should be granted access to\n        an Application or Environment at a specific access level. The same access\n        levels are available for both Applications \u0026 Environments.\n      properties:\n        administrators:\n          type: array\n          items:\n            type: string\n            format: email\n        contributors:\n          type: array\n          items:\n            type: string\n            format: email\n        readOnlyOperators:\n          type: array\n          items:\n            type: string\n            format: email\n  #    User:\n  #      required:\n  #      - email\n  #      - firstName\n  #      - lastName\n  #      properties:\n  #        email:\n  #          type: string\n  #          format: email\n  #        firstName:\n  #          type: string\n  #        lastName:\n  #          type: string\n  examples:\n    PortfolioSummaries:\n      value:\n        - id: \"dc2bbee6-8cdb-477e-a363-f9f1593a0a9b\"\n          createdAt: \"2021-08-03T16:19:51.686Z\"\n          updatedAt: \"2021-08-03T16:19:51.686Z\"\n          status: \"notStarted\"\n          name: \"Mock Portfolio\"\n          description: \"Mock portfolio description\"\n    PortfolioRequestBody:\n      value:\n        name: \"This is a Portfolio request\"\n        description: \"A description\"\n    PortfolioResponseBody:\n      value:\n        id: \"dc2bbee6-8cdb-477e-a363-f9f1593a0a9b\"\n        createdAt: \"2021-08-03T16:19:51.686Z\"\n        updatedAt: \"2021-08-03T16:19:51.686Z\"\n        name: \"This Portfolio exists\"\n        description: \"Mock portfolio description\"\n  securitySchemes:\n    Fn::If:\n      - IsAuthorizationRequired\n      - cognitoAuthorizer:\n          description: \u003e-\n            Authorizes API access by token. Token obtained from custom IdP and provided in subsequent API requests.\n          type: apiKey\n          name: Authorization\n          in: header\n          x-amazon-apigateway-authtype: cognito_user_pools\n          x-amazon-apigateway-authorizer:\n            type: cognito_user_pools\n            providerARNs:\n              - Fn::GetAtt: AtatUserPool.Arn\n      - Ref: AWS::NoValue\n\nx-amazon-apigateway-request-validators:\n  full-request-validator:\n    validateRequestParameters: true\n    validateRequestBody: true\n  request-body-validator:\n    validateRequestParameters: false\n    validateRequestBody: true\n  request-params-validator:\n    validateRequestParameters: true\n    validateRequestBody: false\n\nx-amazon-apigateway-gateway-responses:\n  # Gateway response types are documented at\n  # https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.html\n  # The ordering is preserved here as well as comments highlighting which\n  # response handler will be used for responses we are not explicitly customizing.\n  ACCESS_DENIED:\n    statusCode: 403\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\",\n          \"message\": \"The requested resource could not be accessed\"\n        }\n  # API_CONFIGURATION_ERROR is handled by DEFAULT_5XX\n  # AUTHORIZER_CONFIGURATION_ERROR is handled by DEFAULT_5XX\n  # AUTHORIZER_FAILURE is handled by DEFAULT_5XX\n  BAD_REQUEST_PARAMETERS:\n    statusCode: 400\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\",\n          \"message\": \"Required path parameter is missing\"\n        }\n  BAD_REQUEST_BODY:\n    statusCode: 400\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\"\n          \"message\": \"A valid request body must be provided\"\n        }\n  DEFAULT_4XX:\n    # Use the original status code for 4XX errors\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\",\n          \"message\": \"The request is not valid\"\n        }\n  DEFAULT_5XX:\n    # Rewrite all 5XX errors as a 500\n    statusCode: 500\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\",\n          \"message\": \"There was an error processing the request\"\n        }\n  # EXPIRED_TOKEN is handled by DEFAULT_4XX\n  # INTEGRATION_FAILURE is handled by DEFAULT_5XX\n  # INTEGRATION_TIMEOUT is handled by DEFAULT_5XX\n  # INVALID_API_KEY is handled by DEFAULT_4XX\n  # INVALID_SIGNATURE is handled by DEFAULT_4XX\n  MISSING_AUTHENTICATION_TOKEN:\n    # Treat this the same way as a 404/403 would be treated\n    statusCode: 403\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\",\n          \"message\": \"The requested resource could not be accessed\"\n        }\n  # QUOTA_EXCEEDED is handled by DEFAULT_4XX\n  # REQUEST_TOO_LARGE is handled by DEFAULT_4XX\n  RESOURCE_NOT_FOUND:\n    # Mask gateway-level 404s as a 403 to prevent \"guessing\" whether\n    # a particular endpoint exists or not.\n    statusCode: 403\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\",\n          \"message\": \"The requested resource could not be accessed\"\n        }\n  # THROTTLED is handled by DEFAULT_4XX\n  UNAUTHORIZED:\n    statusCode: 401\n    responseParameters:\n      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''\n      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n    responseTemplates:\n      application/json: |\n        {\n          \"code\": \"OTHER\",\n          \"message\": \"Authentication is required for this endpoint\"\n        }\n  # UNSUPPORTED_MEDIA_TYPE is handled by DEFAULT_4XX\n  # WAF_FILTERED is handled by DEFAULT_4XX\nservers:\n  # Added by API Auto Mocking Plugin\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/CCPO-ATAT/atat/1.0.0"
		}
	},
	"Error": "parse: paths: /portfolios/{portfolioId}/submit: options: operation \"\": parse path: path parameter not specified: \"portfolioId\""
}