{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/fusiondirectory/fusiondirectory-plugins"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "webservice/html/openapi.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  description: The FusionDirectory REST API\n  version: 1.0.0\n  title: FusionDirectory\n  contact:\n    email: contact@fusiondirectory.org\n  license:\n    name: GPL2+\nservers:\n  - url: 'http://localhost/fusiondirectory/rest.php/v1'\nsecurity:\n  - session: []\ntags:\n  - name: authentification\n    description: Authentification methods\n  - name: objects\n    description: 'List, get, create, delete objects'\n  - name: attributes\n    description: 'List, get, create, delete attributes'\n  - name: multivaluated\n    description: 'List, get, create, delete attributes'\n  - name: types\n    description: Get information on object types and tabs\n  - name: recovery\n    description: Use password recovery mecanism\npaths:\n  /login:\n    post:\n      operationId: login\n      summary: Login to the API\n      security: []\n      tags:\n        - authentification\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: LoginRequest\n              type: object\n              properties:\n                directory:\n                  description: The LDAP directory to log into. Use /directories to get possible values.\n                  type: string\n                  example: \"default\"\n                user:\n                  description: The user to login as\n                  type: string\n                  example: \"fd-admin\"\n                password:\n                  description: The password to use\n                  type: string\n                  example: \"password\"\n              required:\n                - user\n                - password\n      responses:\n        '200':\n          description: An API token\n          content:\n            application/json:\n              schema:\n                type: string\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /directories:\n    get:\n      summary: List possible values for directory parameter for login action\n      operationId: listDirectories\n      security: []\n      tags:\n        - authentification\n      responses:\n        '200':\n          description: The list of LDAP directories that can be specified as directory parameter for /login endpoint\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n              example: {\n                        'default': 'default'\n                      }\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /logout:\n    post:\n      operationId: logout\n      summary: End the currently opened session\n      tags:\n        - authentification\n      responses:\n        '204':\n          description: success\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /token:\n    get:\n      summary: Get session token for current session\n      operationId: getToken\n      tags:\n        - authentification\n      responses:\n        '200':\n          description: An API token\n          content:\n            application/json:\n              schema:\n                type: string\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /types:\n    get:\n      summary: List all types\n      operationId: listTypes\n      tags:\n        - types\n      responses:\n        '200':\n          description: A list of types\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TypeList'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/types/{type}':\n    get:\n      summary: Get informations on a type\n      operationId: getTypeInfo\n      tags:\n        - types\n      parameters:\n        - $ref: '#/components/parameters/type'\n      responses:\n        '200':\n          description: Information about the type\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Type'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/types/{type}/{tab}':\n    get:\n      summary: Get informations on a tab\n      operationId: getTabInfo\n      tags:\n        - types\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/tab'\n      responses:\n        '200':\n          description: Information about the tab\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TabInfo'\n              example: {\n                        \"sections\": {\n                          \"main\": {\n                            \"name\": \"Personal info\",\n                            \"attrs\": [\n                              \"personalTitle\",\n                              \"fdNickName\",\n                              \"fdBadge\",\n                              \"dateOfBirth\",\n                              \"gender\",\n                              \"co\",\n                              \"fdContractStartDate\",\n                              \"fdContractEndDate\",\n                              \"fdPhotoVisible\"\n                            ]\n                          },\n                          \"contact\": {\n                            \"name\": \"Contact\",\n                            \"attrs\": [\n                              \"fdSocialAccount\",\n                              \"fdPrivateMail\"\n                            ]\n                          }\n                        },\n                        \"sections_order\": [\n                          \"main\",\n                          \"contact\"\n                        ]\n                      }\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/objects/{type}':\n    get:\n      summary: Search objects of specific type\n      operationId: listObjects\n      tags:\n        - objects\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/base'\n        - $ref: '#/components/parameters/filter'\n        - name: attrs\n          in: query\n          required: false\n          description: \"The attributes to return: the keys must be the wanted attributes,\n            and the values can be either 1, '*', 'b64' or 'raw' depending if you want a\n            single value or an array of values. Other values are considered to be 1.\n            'raw' means untouched LDAP value and is only useful for dns.\n            'b64' means an array of base64 encoded values and is mainly useful for binary attributes.\"\n          schema:\n            type: object\n          style: deepObject\n          explode: true\n          example:\n            sn: 1\n            title: \"*\"\n        - name: scope\n          in: query\n          required: false\n          description: The scope, defaults to subtree\n          schema:\n            type: string\n            default: \"subtree\"\n          example: \"subtree\"\n        - name: templates\n          in: query\n          required: false\n          description: Whether to search for templates instead of standard objects, defaults to false\n          schema:\n            type: boolean\n            default: false\n          example: false\n      responses:\n        '200':\n          description: Search results\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResult'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Create an object of specific type\n      operationId: createObject\n      tags:\n        - objects\n      parameters:\n        - $ref: '#/components/parameters/type'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: ObjectCreationRequest\n              type: object\n              properties:\n                attrs:\n                  description: The attributes of the object to create, grouped by tab\n                  type: object\n                  example: {\n                            \"user\": {\n                              \"givenName\": \"John\",\n                              \"sn\": \"Smith\"\n                            },\n                            \"personalInfo\": {\n                              \"personalTitle\": \"Dr\"\n                            }\n                          }\n                template:\n                  description: The template to use to create the object\n                  type: string\n                  example: \"cn=user-template,ou=templates,ou=people,dc=example,dc=com\"\n              required:\n                - attrs\n      responses:\n        '201':\n          description: DN of the created object\n          content:\n            application/json:\n              schema:\n                type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/objects/{type}/{dn}':\n    get:\n      summary: List tabs of the object, with name and status\n      operationId: listObjectTabs\n      tags:\n        - objects\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/dn'\n      responses:\n        '200':\n          description: Tab list\n          content:\n            application/json:\n              schema:\n                title: TabStateList\n                type: array\n                items:\n                  title: TabState\n                  type: object\n                  required: [class,name,active]\n                  properties:\n                    class:\n                      type: string\n                    name:\n                      type: string\n                    active:\n                      type: boolean\n                example: [\n                            {\n                              \"class\": \"roleGeneric\",\n                              \"name\": \"Role\",\n                              \"active\": true\n                            },\n                            {\n                              \"class\": \"applicationRights\",\n                              \"name\": \"Applications\",\n                              \"active\": false\n                            },\n                            {\n                              \"class\": \"reference\",\n                              \"name\": \"References\",\n                              \"active\": true\n                            },\n                            {\n                              \"class\": \"ldapDump\",\n                              \"name\": \"LDAP\",\n                              \"active\": true\n                            }\n                          ]\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Delete the object\n      operationId: deleteObject\n      tags:\n        - objects\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/dn'\n      responses:\n        '204':\n          description: success\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      summary: Set the object attributes\n      operationId: modifyObject\n      tags:\n        - objects\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/dn'\n      requestBody:\n        description: The new values for the attributes, grouped by tab\n        content:\n          application/json:\n            schema:\n              type: object\n            example: {\n                      \"user\": {\n                        \"givenName\": \"John\",\n                        \"sn\": \"Smith\"\n                      },\n                      \"posixAccount\": {\n                        \"homeDirectory\": \"/home/john\"\n                      }\n                    }\n      responses:\n        '200':\n          description: DN of the modified object\n          content:\n            application/json:\n              schema:\n                type: string\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/objects/{type}/{dn}/templatefields':\n    get:\n      summary: List fields asked to use a specific template\n      operationId: getTemplateFields\n      tags:\n        - objects\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/dn'\n      responses:\n        '200':\n          description: Attribute list grouped by tab\n          content:\n            application/json:\n              schema:\n                type: object\n              example: {\n                        \"user\": [\n                          \"sn\",\n                          \"givenName\",\n                          \"base\",\n                          \"uid\"\n                        ]\n                      }\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/objects/{type}/{dn}/{tab}':\n    get:\n      summary: Get attributes values from object specific tab\n      operationId: getObjectTab\n      tags:\n        - attributes\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/dn'\n        - $ref: '#/components/parameters/tab'\n      responses:\n        '200':\n          description: Attribute values\n          content:\n            application/json:\n              schema:\n                type: object\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      summary: Set the object attributes of a specific tab\n      operationId: modifyObjectTab\n      tags:\n        - objects\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/dn'\n        - $ref: '#/components/parameters/tab'\n      requestBody:\n        description: The new values for the attributes\n        content:\n          application/json:\n            schema:\n              type: object\n            example: {\n                      \"fdNickName\": [\"Jonny\"]\n                    }\n      responses:\n        '200':\n          description: DN of the modified object\n          content:\n            application/json:\n              schema:\n                type: string\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Deactivate the tab\n      operationId: disableTab\n      tags:\n        - objects\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/dn'\n        - $ref: '#/components/parameters/tab'\n      responses:\n        '204':\n          description: success\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/objects/{type}/{dn}/{tab}/{attribute}':\n    get:\n      summary: Get a single attribute value(s)\n      operationId: getAttributeValues\n      tags:\n        - attributes\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/dn'\n        - $ref: '#/components/parameters/tab'\n        - $ref: '#/components/parameters/attribute'\n      responses:\n        '200':\n          description: The attribute value(s)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnyThing'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Set attribute value(s)\n      operationId: setAttributeValues\n      tags:\n        - attributes\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/dn'\n        - $ref: '#/components/parameters/tab'\n        - $ref: '#/components/parameters/attribute'\n      requestBody:\n        description: The new value(s)\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnyThing'\n            example: [\"jsmith@example.com\"]\n      responses:\n        '200':\n          description: DN of the modified object\n          content:\n            application/json:\n              schema:\n                type: string\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Reset the attribute to its default value\n      operationId: resetAttributeValue\n      tags:\n        - attributes\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/dn'\n        - $ref: '#/components/parameters/tab'\n        - $ref: '#/components/parameters/attribute'\n      responses:\n        '200':\n          description: The attribute new value(s)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnyThing'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/objects/{type}/{dn}/{tab}/{attribute}/values':\n    patch:\n      summary: Add attribute values. Only on multivaluated attributes.\n      operationId: addAttributeValues\n      tags:\n        - multivaluated\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/dn'\n        - $ref: '#/components/parameters/tab'\n        - $ref: '#/components/parameters/attribute'\n      requestBody:\n        description: The values to add\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/AnyThing'\n            example: ['jsmith2@example.com']\n      responses:\n        '200':\n          description: DN of the modified object\n          content:\n            application/json:\n              schema:\n                type: string\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Delete attribute values. Only on multivaluated attributes.\n      operationId: deleteAttributeValues\n      tags:\n        - multivaluated\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/dn'\n        - $ref: '#/components/parameters/tab'\n        - $ref: '#/components/parameters/attribute'\n      requestBody:\n        description: The values to remove\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/AnyThing'\n            example: ['jsmith2@example.com']\n      responses:\n        '204':\n          description: success\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/userlock/{dn}':\n    get:\n      summary: Get lock state of a user\n      operationId: getLockState\n      tags:\n        - objects\n      parameters:\n        - $ref: '#/components/parameters/dn'\n      responses:\n        '200':\n          description: Whether the user is locked\n          content:\n            application/json:\n              schema:\n                type: boolean\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Set lock state of a user\n      operationId: setLockState\n      tags:\n        - objects\n      parameters:\n        - $ref: '#/components/parameters/dn'\n      requestBody:\n        description: Whether to lock or unlock the user\n        content:\n          application/json:\n            schema:\n              type: boolean\n            example: true\n      responses:\n        '204':\n          description: Success\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/archive/{type}/{dn}':\n    post:\n      summary: Archive an object (delete it)\n      operationId: archiveObject\n      tags:\n        - objects\n      parameters:\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/dn'\n      responses:\n        '204':\n          description: Success\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/recovery':\n    get:\n      summary: Generate recovery token for a user\n      operationId: getRecoveryToken\n      tags:\n        - recovery\n      parameters:\n        - name: email\n          in: query\n          required: true\n          description: The email address of the user\n          schema:\n            type: string\n          example: \"email@example.com\"\n      responses:\n        '200':\n          description: Token and login\n          content:\n            application/json:\n              schema:\n                title: RecoveryResponse\n                type: object\n                properties:\n                  token:\n                    description: Recovery token\n                    type: string\n                    example: \"opaquetokenstring\"\n                  login:\n                    description: The login of the user\n                    type: string\n                    example: \"fd-admin\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Change a user password using a recovery token\n      operationId: confirmRecoveryPasswordChange\n      tags:\n        - recovery\n      requestBody:\n        description: User information\n        content:\n          application/json:\n            schema:\n              title: RecoveryRequest\n              type: object\n              properties:\n                token:\n                  description: Recovery token\n                  type: string\n                  example: \"opaquetokenstring\"\n                login:\n                  description: The login of the user\n                  type: string\n                  example: \"fd-admin\"\n                password1:\n                  description: First password entered by the user\n                  type: string\n                  example: \"newpassword\"\n                password2:\n                  description: Second password entered by the user\n                  type: string\n                  example: \"newpassword\"\n              required:\n                - login\n                - password1\n                - password2\n                - token\n      responses:\n        '204':\n          description: Success\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    AnyThing:\n      anyOf:\n        - type: string\n        - type: array\n          items:\n            $ref: '#/components/schemas/AnyThing'\n        - type: object\n    Object:\n      type: object\n      additionalProperties:\n        anyOf:\n          - type: string\n          - type: array\n            items:\n              type: string\n          - type: object\n    SearchResult:\n      type: object\n      additionalProperties:\n        anyOf:\n          - type: string\n          - type: array\n            items:\n              type: string\n    Type:\n      type: object\n      properties:\n        name:\n          type: string\n          example: \"Role\"\n        description:\n          type: string\n          example: \"Organizational role\"\n        mainAttr:\n          type: string\n          example: \"cn\"\n        nameAttr:\n          type: string\n          example: \"cn\"\n        icon:\n          type: string\n          example: \"geticon.php?context=types\u0026icon=role\u0026size=16\"\n        ou:\n          type: string\n          example: \"ou=roles,\"\n        mainTab:\n          type: string\n          example: \"roleGeneric\"\n        templateActive:\n          type: boolean\n        snapshotActive:\n          type: boolean\n        aclCategory:\n          type: string\n          example: \"role\"\n        filter:\n          type: string\n          example: \"(\u0026(objectClass=organizationalRole)(!(objectClass=simpleSecurityObject)))\"\n        management:\n          type: string\n          example: \"groupManagement\"\n        filterRDN:\n          type: string\n          example: \"(ou:dn:=roles)\"\n        tabs:\n          type: array\n          items:\n            $ref: '#/components/schemas/TabDef'\n          example: [{\n                      \"class\": \"roleGeneric\",\n                      \"name\": \"Role\"\n                    },\n                    {\n                      \"class\": \"applicationRights\",\n                      \"name\": \"Applications\"\n                    }]\n    TypeList:\n      type: object\n      additionalProperties:\n        type: string\n      example: {\"CONFIGURATION\":\"FusionDirectory configuration\",\"DASHBOARD\":\"Dashboard\",\"OGROUP\":\"Group\",\"SPECIAL\":\"special\",\"ROLE\":\"Role\",\"USER\":\"User\",\"LOCALITY\":\"Locality\",\"DEPARTMENT\":\"Department\",\"DCOBJECT\":\"Domain Component\",\"COUNTRY\":\"Country\",\"ACLROLE\":\"ACL role\",\"ACLASSIGNMENT\":\"ACL assignment\",\"ORGANIZATION\":\"Organization\",\"DOMAIN\":\"Domain\"}\n    TabDef:\n      type: object\n      required: [class,name]\n      properties:\n        class:\n          type: string\n        name:\n          type: string\n    TabInfo:\n      type: object\n      properties:\n        sections:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/SectionInfo'\n        sections_order:\n          type: array\n          example: [\"main\",\"members\"]\n          items:\n            type: string\n    SectionInfo:\n      type: object\n      properties:\n        name:\n          type: string\n          example: \"Information\"\n        attrs:\n          type: array\n          example: [\"base\",\"cn\",\"description\",\"telephoneNumber\",\"facsimileTelephoneNumber\"]\n          items:\n            type: string\n    Error:\n      required:\n        - message\n      properties:\n        message:\n          type: string\n  parameters:\n    base:\n      name: base\n      example: \"dc=example,dc=com\"\n      description: The LDAP base to use\n      in: query\n      schema:\n        type: string\n    filter:\n      name: filter\n      example: \"(cn=a*)\"\n      description: An LDAP filter to search with\n      in: query\n      schema:\n        type: string\n    type:\n      name: type\n      in: path\n      example: \"user\"\n      required: true\n      description: An object type\n      schema:\n        type: string\n    dn:\n      name: dn\n      in: path\n      example: \"uid=jsmith,ou=people,dc=example,dc=com\"\n      required: true\n      description: The dn of an existing object\n      schema:\n        type: string\n    tab:\n      name: tab\n      in: path\n      example: \"personalInfo\"\n      required: true\n      description: An existing tab class\n      schema:\n        type: string\n    attribute:\n      name: attribute\n      in: path\n      example: \"fdPrivateMail\"\n      required: true\n      description: The attribute\n      schema:\n        type: string\n  securitySchemes:\n    session:\n      type: apiKey\n      name: Session-Token\n      in: header\n"
		}
	},
	"Error": "parse: paths: /objects/{type}/{dn}/{tab}/{attribute}: get: getAttributeValues: responses: 200: content: application/json: schema: parse schema: reference \"#/components/schemas/AnyThing\": parse schema: anyOf: [1]: parse schema: item: parse schema: reference \"#/components/schemas/AnyThing\": infinite recursion: \"#/components/schemas/AnyThing\""
}