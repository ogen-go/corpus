{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ramnes/sftpgo-client"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "generator/openapi.yaml",
			"content": "openapi: 3.0.3\ntags:\n  - name: healthcheck\n  - name: token\n  - name: maintenance\n  - name: admins\n  - name: connections\n  - name: defender\n  - name: quota\n  - name: folders\n  - name: users\n  - name: users API\ninfo:\n  title: SFTPGo\n  description: |\n    SFTPGo allows to securely share your files over SFTP and optionally FTP/S and WebDAV too.\n    Several storage backends are supported and they are configurable per user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one.\n    SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, an S3 user that exposes a GCS bucket (or part of it) on a specified path and an encrypted local filesystem on another one.\n    Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user.\n  version: 2.1.0-dev\n  contact:\n    name: API support\n    url: 'https://github.com/drakkan/sftpgo'\n  license:\n    name: AGPLv3\n    url: 'https://www.gnu.org/licenses/agpl-3.0.en.html'\nservers:\n  - url: /api/v2\nsecurity:\n  - BearerAuth: []\npaths:\n  /healthz:\n    get:\n      security: []\n      servers:\n        - url: /\n      tags:\n        - healthcheck\n      summary: health check\n      description: This endpoint can be used to check if the application is running and responding to requests\n      operationId: healthz\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: ok\n  /token:\n    get:\n      security:\n        - BasicAuth: []\n      tags:\n        - token\n      summary: Get a new admin access token\n      description: Returns an access token and its expiration\n      operationId: get_token\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /logout:\n    get:\n      tags:\n        - token\n      summary: Invalidate an admin access token\n      description: Allows to invalidate an admin token before its expiration\n      operationId: logout\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/token:\n    get:\n      security:\n        - BasicAuth: []\n      tags:\n        - token\n      summary: Get a new user access token\n      description: Returns an access token and its expiration\n      operationId: get_user_token\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/logout:\n    get:\n      tags:\n        - token\n      summary: Invalidate a user access token\n      description: Allows to invalidate a client token before its expiration\n      operationId: client_logout\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /version:\n    get:\n      tags:\n        - maintenance\n      summary: Get version details\n      description: 'Returns version details such as the version number, build date, commit hash and enabled features'\n      operationId: get_version\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VersionInfo'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /changepwd/admin:\n    put:\n      tags:\n        - admins\n      summary: Change admin password\n      description: Changes the password for the logged in admin. Please use '/admin/changepwd' instead\n      operationId: change_admin_password_deprecated\n      deprecated: true\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PwdChange'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /admin/changepwd:\n    put:\n      tags:\n        - admins\n      summary: Change admin password\n      description: Changes the password for the logged in admin\n      operationId: change_admin_password\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PwdChange'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /connections:\n    get:\n      tags:\n        - connections\n      summary: Get connections details\n      description: Returns the active users and info about their current uploads/downloads\n      operationId: get_connections\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConnectionStatus'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/connections/{connectionID}':\n    delete:\n      tags:\n        - connections\n      summary: Close connection\n      description: Terminates an active connection\n      operationId: close_connection\n      parameters:\n        - name: connectionID\n          in: path\n          description: ID of the connection to close\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Connection closed\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /defender/hosts:\n    get:\n      tags:\n        - defender\n      summary: Get hosts\n      description: Returns hosts that are banned or for which some violations have been detected\n      operationId: get_defender_hosts\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DefenderEntry'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /defender/hosts/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: host id\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - defender\n      summary: Get host by id\n      description: Returns the host with the given id, if it exists\n      operationId: get_defender_host_by_id\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefenderEntry'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      tags:\n        - defender\n      summary: Removes a host from the defender lists\n      description: Unbans the specified host or clears its violations\n      operationId: delete_defender_host_by_id\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /defender/bantime:\n    get:\n      deprecated: true\n      tags:\n        - defender\n      summary: Get ban time\n      description: Deprecated, please use '/defender/hosts', '/defender/hosts/{id}' instead\n      operationId: get_ban_time\n      parameters:\n        - in: query\n          name: ip\n          required: true\n          description: IPv4/IPv6 address\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BanStatus'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /defender/unban:\n    post:\n      deprecated: true\n      tags:\n        - defender\n      summary: Unban\n      description: Deprecated, please use '/defender/hosts/{id}' instead\n      operationId: unban_host\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ip:\n                  type: string\n                  description: IPv4/IPv6 address to remove\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /defender/score:\n    get:\n      deprecated: true\n      tags:\n        - defender\n      summary: Get score\n      description: Deprecated, please use '/defender/hosts', '/defender/hosts/{id}' instead\n      operationId: get_score\n      parameters:\n        - in: query\n          name: ip\n          required: true\n          description: IPv4/IPv6 address\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScoreStatus'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quotas/users/scans:\n    get:\n      tags:\n        - quota\n      summary: Get active user quota scans\n      description: Returns the active user quota scans\n      operationId: get_users_quota_scans\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/QuotaScan'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quotas/users/{username}/scan:\n    parameters:\n      - name: username\n        in: path\n        description: the username\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - quota\n      summary: Start a user quota scan\n      description: Starts a new quota scan for the given user. A quota scan updates the number of files and their total size for the specified user and the virtual folders, if any, included in his quota\n      operationId: start_user_quota_scan\n      responses:\n        '202':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Scan started\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quotas/users/{username}/usage:\n    parameters:\n      - name: username\n        in: path\n        description: the username\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: mode\n        required: false\n        description: the update mode specifies if the given quota usage values should be added or replace the current ones\n        schema:\n          type: string\n          enum:\n            - add\n            - reset\n          description: |\n            Update type:\n                * `add` - add the specified quota limits to the current used ones\n                * `reset` - reset the values to the specified ones. This is the default\n          example: reset\n    put:\n      tags:\n        - quota\n      summary: Update quota usage limits\n      description: Sets the current used quota limits for the given user\n      operationId: user_quota_update_usage\n      parameters:\n        - in: query\n          name: mode\n          required: false\n          description: the update mode specifies if the given quota usage values should be added or replace the current ones\n          schema:\n            type: string\n            enum:\n              - add\n              - reset\n            description: |\n              Update type:\n                * `add` - add the specified quota limits to the current used ones\n                * `reset` - reset the values to the specified ones. This is the default\n            example: reset\n      requestBody:\n        required: true\n        description: 'If used_quota_size and used_quota_files are missing they will default to 0, this means that if mode is \"add\" the current value, for the missing field, will remain unchanged, if mode is \"reset\" the missing field is set to 0'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QuotaUsage'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Quota updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quotas/folders/scans:\n    get:\n      tags:\n        - quota\n      summary: Get active folder quota scans\n      description: Returns the active folder quota scans\n      operationId: get_folders_quota_scans\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FolderQuotaScan'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quotas/folders/{name}/scan:\n    parameters:\n      - name: name\n        in: path\n        description: folder name\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - quota\n      summary: Start a folder quota scan\n      description: Starts a new quota scan for the given folder. A quota scan update the number of files and their total size for the specified folder\n      operationId: start_folder_quota_scan\n      responses:\n        '202':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Scan started\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quotas/folders/{name}/usage:\n    parameters:\n      - name: name\n        in: path\n        description: folder name\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: mode\n        required: false\n        description: the update mode specifies if the given quota usage values should be added or replace the current ones\n        schema:\n          type: string\n          enum:\n            - add\n            - reset\n          description: |\n            Update type:\n                * `add` - add the specified quota limits to the current used ones\n                * `reset` - reset the values to the specified ones. This is the default\n          example: reset\n    put:\n      tags:\n        - quota\n      summary: Update folder quota usage limits\n      description: Sets the current used quota limits for the given folder\n      operationId: folder_quota_update_usage\n      parameters:\n        - in: query\n          name: mode\n          required: false\n          description: the update mode specifies if the given quota usage values should be added or replace the current ones\n          schema:\n            type: string\n            enum:\n              - add\n              - reset\n            description: |\n              Update type:\n                * `add` - add the specified quota limits to the current used ones\n                * `reset` - reset the values to the specified ones. This is the default\n            example: reset\n      requestBody:\n        required: true\n        description: 'If used_quota_size and used_quota_files are missing they will default to 0, this means that if mode is \"add\" the current value, for the missing field, will remain unchanged, if mode is \"reset\" the missing field is set to 0'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QuotaUsage'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Quota updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quota-scans:\n    get:\n      deprecated: true\n      tags:\n        - quota\n      summary: Get quota scans\n      description: Deprecated, please use '/quotas/users/scans' instead\n      operationId: get_users_quota_scans_deprecated\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/QuotaScan'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      deprecated: true\n      tags:\n        - quota\n      summary: Start user quota scan\n      description: Deprecated, please use '/quotas/users/{username}/scan' instead\n      operationId: start_user_quota_scan_deprecated\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '202':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Scan started\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /quota-update:\n    put:\n      deprecated: true\n      tags:\n        - quota\n      summary: Update quota usage limits\n      description: Deprecated, please use '/quotas/users/{username}/usage' instead\n      operationId: user_quota_update_usage_deprecated\n      parameters:\n        - in: query\n          name: mode\n          required: false\n          description: the update mode specifies if the given quota usage values should be added or replace the current ones\n          schema:\n            type: string\n            enum:\n              - add\n              - reset\n            description: |\n              Update type:\n                * `add` - add the specified quota limits to the current used ones\n                * `reset` - reset the values to the specified ones. This is the default\n            example: reset\n      requestBody:\n        required: true\n        description: 'The only user mandatory fields are username, used_quota_size and used_quota_files. Please note that if the quota fields are missing they will default to 0, this means that if mode is \"add\" the current value will remain unchanged, if mode is \"reset\" the missing field is set to 0'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Quota updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /folder-quota-update:\n    put:\n      deprecated: true\n      tags:\n        - quota\n      summary: Update folder quota limits\n      description: Deprecated, please use '/quotas/folders/{name}/usage' instead\n      operationId: folder_quota_update_usage_deprecated\n      parameters:\n        - in: query\n          name: mode\n          required: false\n          description: the update mode specifies if the given quota usage values should be added or replace the current ones\n          schema:\n            type: string\n            enum:\n              - add\n              - reset\n            description: |\n              Update type:\n                * `add` - add the specified quota limits to the current used ones\n                * `reset` - reset the values to the specified ones. This is the default\n            example: reset\n      requestBody:\n        required: true\n        description: 'The only folder mandatory fields are mapped_path,used_quota_size and used_quota_files. Please note that if the used quota fields are missing they will default to 0, this means that if mode is \"add\" the current value will remain unchanged, if mode is \"reset\" the missing field is set to 0'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BaseVirtualFolder'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Quota updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /folder-quota-scans:\n    get:\n      deprecated: true\n      tags:\n        - quota\n      summary: Get folders quota scans\n      description: Deprecated, please use '/quotas/folders/scans' instead\n      operationId: get_folders_quota_scans_deprecated\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FolderQuotaScan'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      deprecated: true\n      tags:\n        - quota\n      summary: Start a folder quota scan\n      description: Deprecated, please use '/quotas/folders/{name}/scan' instead\n      operationId: start_folder_quota_scan_deprecated\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BaseVirtualFolder'\n      responses:\n        '202':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Scan started\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /folders:\n    get:\n      tags:\n        - folders\n      summary: Get folders\n      description: Returns an array with one or more folders\n      operationId: get_folders\n      parameters:\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n          required: false\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 100\n          required: false\n          description: 'The maximum number of items to return. Max value is 500, default is 100'\n        - in: query\n          name: order\n          required: false\n          description: Ordering folders by path. Default ASC\n          schema:\n            type: string\n            enum:\n              - ASC\n              - DESC\n            example: ASC\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BaseVirtualFolder'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      tags:\n        - folders\n      summary: Add folder\n      operationId: add_folder\n      description: Adds a new folder. A quota scan is required to update the used files/size\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BaseVirtualFolder'\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseVirtualFolder'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/folders/{name}':\n    parameters:\n      - name: name\n        in: path\n        description: folder name\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - folders\n      summary: Find folders by name\n      description: Returns the folder with the given name if it exists.\n      operationId: get_folder_by_name\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseVirtualFolder'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    put:\n      tags:\n        - folders\n      summary: Update folder\n      description: Updates an existing folder\n      operationId: update_folder\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BaseVirtualFolder'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: User updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      tags:\n        - folders\n      summary: Delete folder\n      description: Deletes an existing folder\n      operationId: delete_folder\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: User deleted\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /admins:\n    get:\n      tags:\n        - admins\n      summary: Get admins\n      description: Returns an array with one or more admins. For security reasons hashed passwords are omitted in the response\n      operationId: get_admins\n      parameters:\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n          required: false\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 100\n          required: false\n          description: 'The maximum number of items to return. Max value is 500, default is 100'\n        - in: query\n          name: order\n          required: false\n          description: Ordering admins by username. Default ASC\n          schema:\n            type: string\n            enum:\n              - ASC\n              - DESC\n            example: ASC\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Admin'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      tags:\n        - admins\n      summary: Add admin\n      description: Adds a new admin\n      operationId: add_admin\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Admin'\n            examples:\n              example-1:\n                value:\n                  id: 1\n                  status: 0\n                  username: string\n                  description: string\n                  password: pa$$word\n                  email: user@example.com\n                  permissions:\n                    - '*'\n                  filters:\n                    allow_list:\n                      - 192.0.2.0/24\n                      - '2001:db8::/32'\n                  additional_info: string\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Admin'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/admins/{username}':\n    parameters:\n      - name: username\n        in: path\n        description: the admin username\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - admins\n      summary: Find admins by username\n      description: Returns the admin with the given username, if it exists. For security reasons the hashed password is omitted in the response\n      operationId: get_admin_by_username\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Admin'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    put:\n      tags:\n        - admins\n      summary: Update admin\n      description: Updates an existing admin\n      operationId: update_admin\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Admin'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Admin updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      tags:\n        - admins\n      summary: Delete admin\n      description: Deletes an existing admin\n      operationId: delete_admin\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Admin deleted\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /users:\n    get:\n      tags:\n        - users\n      summary: Get users\n      description: Returns an array with one or more users. For security reasons hashed passwords are omitted in the response\n      operationId: get_users\n      parameters:\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n          required: false\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 100\n          required: false\n          description: 'The maximum number of items to return. Max value is 500, default is 100'\n        - in: query\n          name: order\n          required: false\n          description: Ordering users by username. Default ASC\n          schema:\n            type: string\n            enum:\n              - ASC\n              - DESC\n            example: ASC\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      tags:\n        - users\n      summary: Add user\n      description: Adds a new user\n      operationId: add_user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  '/users/{username}':\n    parameters:\n      - name: username\n        in: path\n        description: the username\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - users\n      summary: Find users by username\n      description: Returns the user with the given username if it exists. For security reasons the hashed password is omitted in the response\n      operationId: get_user_by_username\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    put:\n      tags:\n        - users\n      summary: Update user\n      description: 'Updates an existing user and optionally disconnects it, if connected, to apply the new settings'\n      operationId: update_user\n      parameters:\n        - in: query\n          name: disconnect\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n          description: |\n            Disconnect:\n              * `0` The user will not be disconnected and it will continue to use the old configuration until connected. This is the default\n              * `1` The user will be disconnected after a successful update. It must login again and so it will be forced to use the new configuration\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: User updated\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      tags:\n        - users\n      summary: Delete user\n      description: Deletes an existing user\n      operationId: delete_user\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: User deleted\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /status:\n    get:\n      tags:\n        - maintenance\n      summary: Get status\n      description: Retrieves the status of the active services\n      operationId: get_status\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServicesStatus'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /dumpdata:\n    get:\n      tags:\n        - maintenance\n      summary: Dump data\n      description: 'Backups data as data provider independent JSON. The backup can be saved in a local file on the server, to avoid exposing sensitive data over the network, or returned as response body. The output of dumpdata can be used as input for loaddata'\n      operationId: dumpdata\n      parameters:\n        - in: query\n          name: output-file\n          schema:\n            type: string\n          description: Path for the file to write the JSON serialized data to. This path is relative to the configured \"backups_path\". If this file already exists it will be overwritten. To return the backup as response body set `output_data` to true instead.\n        - in: query\n          name: output-data\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n          description: |\n            output data:\n              * `0` or any other value != 1, the backup will be saved to a file on the server, `output_file` is required\n              * `1` the backup will be returned as response body\n        - in: query\n          name: indent\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n          description: |\n            indent:\n              * `0` no indentation. This is the default\n              * `1` format the output JSON\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/ApiResponse'\n                  - $ref: '#/components/schemas/BackupData'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /loaddata:\n    parameters:\n      - in: query\n        name: scan-quota\n        schema:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n        description: |\n          Quota scan:\n            * `0` no quota scan is done, the imported users/folders will have used_quota_size and used_quota_files = 0 or the existing values if they already exists. This is the default\n            * `1` scan quota\n            * `2` scan quota if the user has quota restrictions\n          required: false\n      - in: query\n        name: mode\n        schema:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n        description: |\n          Mode:\n            * `0` New users/admins are added, existing users/admins are updated. This is the default\n            * `1` New users/admins are added, existing users/admins are not modified\n            * `2` New users are added, existing users are updated and, if connected, they are disconnected and so forced to use the new configuration\n    get:\n      tags:\n        - maintenance\n      summary: Load data from path\n      description: 'Restores SFTPGo data from a JSON backup file on the server. Users, folders and admins will be restored one by one and the restore is stopped if a user/folder/admin cannot be added or updated, so it could happen a partial restore'\n      operationId: loaddata_from_file\n      parameters:\n        - in: query\n          name: input-file\n          schema:\n            type: string\n          required: true\n          description: Path for the file to read the JSON serialized data from. This can be an absolute path or a path relative to the configured \"backups_path\". The max allowed file size is 10MB\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Data restored\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      tags:\n        - maintenance\n      summary: Load data\n      description: 'Restores SFTPGo data from a JSON backup. Users, folders and admins will be restored one by one and the restore is stopped if a user/folder/admin cannot be added or updated, so it could happen a partial restore'\n      operationId: loaddata_from_request_body\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BackupData'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n              example:\n                message: Data restored\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/changepwd:\n    put:\n      tags:\n        - users API\n      summary: Change user password\n      description: Changes the password for the logged in user\n      operationId: change_user_password\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PwdChange'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/publickeys:\n    get:\n      tags:\n        - users API\n      summary: Get the user's public keys\n      description: Returns the public keys for the logged in user\n      operationId: get_user_public_keys\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    put:\n      tags:\n        - users API\n      summary: Set the user's public keys\n      description: Sets the public keys for the logged in user. Public keys must be in OpenSSH format\n      operationId: set_user_public_keys\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n                description: Public key in OpenSSH format\n                example: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPVILdH2u3yV5SAeE6XksD1z1vXRg0E4hJUov8ITDAZ2 user@host\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/folder:\n    get:\n      tags:\n        - users API\n      summary: Read folders contents\n      description: Returns the contents of the specified folder for the logged in user. Please use '/user/dirs' instead\n      operationId: get_user_folder_contents\n      deprecated: true\n      parameters:\n        - in: query\n          name: path\n          description: Path to the folder to read. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\". If empty or missing the root folder is assumed\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DirEntry'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/dirs:\n    get:\n      tags:\n        - users API\n      summary: Read directory contents\n      description: Returns the contents of the specified directory for the logged in user\n      operationId: get_user_dir_contents\n      parameters:\n        - in: query\n          name: path\n          description: Path to the folder to read. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\". If empty or missing the root folder is assumed\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DirEntry'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      tags:\n        - users API\n      summary: Create a directory\n      description: Create a directory for the logged in user\n      operationId: create_user_dir\n      parameters:\n        - in: query\n          name: path\n          description: Path to the folder to create. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\"\n          schema:\n            type: string\n          required: true\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    patch:\n      tags:\n        - users API\n      summary: Rename a directory\n      description: Rename a directory for the logged in user. The rename is allowed for empty directory or for non empty, local directories, with no virtual folders inside\n      operationId: rename_user_dir\n      parameters:\n        - in: query\n          name: path\n          description: Path to the folder to rename. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\"\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: target\n          description: New name. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\"\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      tags:\n        - users API\n      summary: Delete a directory\n      description: Delete a directory for the logged in user. Only empty directories can be deleted\n      operationId: delete_user_dir\n      parameters:\n        - in: query\n          name: path\n          description: Path to the folder to delete. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\"\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/file:\n    get:\n      tags:\n        - users API\n      summary: Download a single file\n      description: Returns the file contents as response body. Please use '/user/files' instead\n      operationId: get_user_file\n      deprecated: true\n      parameters:\n        - in: query\n          name: path\n          required: true\n          description: Path to the file to download. It must be URL encoded, for example the path \"my dir/àdir/file.txt\" must be sent as \"my%20dir%2F%C3%A0dir%2Ffile.txt\"\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: string\n                format: binary\n        '206':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/files:\n    get:\n      tags:\n        - users API\n      summary: Download a single file\n      description: Returns the file contents as response body\n      operationId: download_user_file\n      parameters:\n        - in: query\n          name: path\n          required: true\n          description: Path to the file to download. It must be URL encoded, for example the path \"my dir/àdir/file.txt\" must be sent as \"my%20dir%2F%C3%A0dir%2Ffile.txt\"\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: string\n                format: binary\n        '206':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    post:\n      tags:\n        - users API\n      summary: Upload files\n      description: Upload one or more files for the logged in user\n      operationId: create_user_files\n      parameters:\n        - in: query\n          name: path\n          description: Parent directory for the uploaded files. It must be URL encoded, for example the path \"my dir/àdir\" must be sent as \"my%20dir%2F%C3%A0dir\". If empty or missing the root path is assumed. If a file with the same name already exists, it will be overwritten\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                filename:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n                  minItems: 1\n                  uniqueItems: true\n        required: true\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    patch:\n      tags:\n        - users API\n      summary: Rename a file\n      description: Rename a file for the logged in user\n      operationId: rename_user_file\n      parameters:\n        - in: query\n          name: path\n          description: Path to the file to rename. It must be URL encoded\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: target\n          description: New name. It must be URL encoded\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n    delete:\n      tags:\n        - users API\n      summary: Delete a file\n      description: Delete a file for the logged in user.\n      operationId: delete_user_file\n      parameters:\n        - in: query\n          name: path\n          description: Path to the file to delete. It must be URL encoded\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\n  /user/streamzip:\n    post:\n      tags:\n        - users API\n      summary: Download multiple files and folders as a single zip file\n      description: A zip file, containing the specified files and folders, will be generated on the fly and returned as response body. Only folders and regular files will be included in the zip\n      operationId: streamzip\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n                description: Absolute file or folder path\n      responses:\n        '200':\n          description: successful operation\n          content:\n            'application/zip':\n              schema:\n                type: string\n                format: binary\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        default:\n          $ref: '#/components/responses/DefaultResponse'\ncomponents:\n  responses:\n    BadRequest:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n    Forbidden:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n    NotFound:\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n    Conflict:\n      description: Conflict\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n    InternalServerError:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n    DefaultResponse:\n      description: Unexpected Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiResponse'\n  schemas:\n    Permission:\n      type: string\n      enum:\n        - '*'\n        - list\n        - download\n        - upload\n        - overwrite\n        - delete\n        - rename\n        - create_dirs\n        - create_symlinks\n        - chmod\n        - chown\n        - chtimes\n      description: |\n        Permissions:\n          * `*` - all permissions are granted\n          * `list` - list items is allowed\n          * `download` - download files is allowed\n          * `upload` - upload files is allowed\n          * `overwrite` - overwrite an existing file, while uploading, is allowed. upload permission is required to allow file overwrite\n          * `delete` - delete files or directories is allowed\n          * `rename` - rename files or directories is allowed\n          * `create_dirs` - create directories is allowed\n          * `create_symlinks` - create links is allowed\n          * `chmod` changing file or directory permissions is allowed\n          * `chown` changing file or directory owner and group is allowed\n          * `chtimes` changing file or directory access and modification time is allowed\n    DirPermissions:\n      type: object\n      additionalProperties:\n        type: array\n        items:\n          $ref: '#/components/schemas/Permission'\n        minItems: 1\n      minProperties: 1\n      description: 'hash map with directory as key and an array of permissions as value. Directories must be absolute paths, permissions for root directory (\"/\") are required'\n    AdminPermissions:\n      type: string\n      enum:\n        - '*'\n        - add_users\n        - edit_users\n        - del_users\n        - view_users\n        - view_conns\n        - close_conns\n        - view_status\n        - manage_admins\n        - quota_scans\n        - manage_system\n        - manage_defender\n        - view_defender\n      description: |\n        Admin permissions:\n          * `*` - all permissions are granted\n          * `add_users` - add new users is allowed\n          * `edit_users` - change existing users is allowed\n          * `del_users` - remove users is allowed\n          * `view_users` - list users is allowed\n          * `view_conns` - list active connections is allowed\n          * `close_conns` - close active connections is allowed\n          * `view_status` - view the server status is allowed\n          * `manage_admins` - manage other admins is allowed\n          * `manage_defender` - remove ip from the dynamic blocklist is allowed\n          * `view_defender` - list the dynamic blocklist is allowed\n    LoginMethods:\n      type: string\n      enum:\n        - publickey\n        - password\n        - keyboard-interactive\n        - publickey+password\n        - publickey+keyboard-interactive\n        - TLSCertificate\n        - TLSCertificate+password\n      description: |\n        Available login methods. To enable multi-step authentication you have to allow only multi-step login methods\n          * `publickey`\n          * `password`\n          * `keyboard-interactive`\n          * `publickey+password` - multi-step auth: public key and password\n          * `publickey+keyboard-interactive` - multi-step auth: public key and keyboard interactive\n          * `TLSCertificate`\n          * `TLSCertificate+password` - multi-step auth: TLS client certificate and password\n    SupportedProtocols:\n      type: string\n      enum:\n        - SSH\n        - FTP\n        - DAV\n        - HTTP\n      description: |\n        Protocols:\n          * `SSH` - includes both SFTP and SSH commands\n          * `FTP` - plain FTP and FTPES/FTPS\n          * `DAV` - WebDAV over HTTP/HTTPS\n          * `HTTP` - WebClient\n    WebClientOptions:\n      type: string\n      enum:\n        - publickey-change-disabled\n        - write-disabled\n      description: |\n        Options:\n          * `publickey-change-disabled` - changing SSH public keys is not allowed\n          * `write-disabled` - upload, rename, delete are not allowed even if the user has permissions for these actions\n    PatternsFilter:\n      type: object\n      properties:\n        path:\n          type: string\n          description: 'exposed virtual path, if no other specific filter is defined, the filter apply for sub directories too. For example if filters are defined for the paths \"/\" and \"/sub\" then the filters for \"/\" are applied for any file outside the \"/sub\" directory'\n        allowed_patterns:\n          type: array\n          items:\n            type: string\n          description: 'list of, case insensitive, allowed shell like file patterns.'\n          example:\n            - '*.jpg'\n            - a*b?.png\n        denied_patterns:\n          type: array\n          items:\n            type: string\n          description: 'list of, case insensitive, denied shell like file patterns. Denied patterns are evaluated before the allowed ones'\n          example:\n            - '*.zip'\n    HooksFilter:\n      type: object\n      properties:\n        external_auth_disabled:\n          type: boolean\n          example: false\n          description: If true, the external auth hook, if defined, will not be executed\n        pre_login_disabled:\n          type: boolean\n          example: false\n          description: If true, the pre-login hook, if defined, will not be executed\n        check_password_disabled:\n          type: boolean\n          example: false\n          description: If true, the check password hook, if defined, will not be executed\n      description: User specific hook overrides\n    UserFilters:\n      type: object\n      properties:\n        allowed_ip:\n          type: array\n          items:\n            type: string\n          description: 'only clients connecting from these IP/Mask are allowed. IP/Mask must be in CIDR notation as defined in RFC 4632 and RFC 4291, for example \"192.0.2.0/24\" or \"2001:db8::/32\"'\n          example:\n            - 192.0.2.0/24\n            - '2001:db8::/32'\n        denied_ip:\n          type: array\n          items:\n            type: string\n          description: clients connecting from these IP/Mask are not allowed. Denied rules are evaluated before allowed ones\n          example:\n            - 172.16.0.0/16\n        denied_login_methods:\n          type: array\n          items:\n            $ref: '#/components/schemas/LoginMethods'\n          description: if null or empty any available login method is allowed\n        denied_protocols:\n          type: array\n          items:\n            $ref: '#/components/schemas/SupportedProtocols'\n          description: if null or empty any available protocol is allowed\n        file_patterns:\n          type: array\n          items:\n            $ref: '#/components/schemas/PatternsFilter'\n          description: 'filters based on shell like file patterns. These restrictions do not apply to files listing for performance reasons, so a denied file cannot be downloaded/overwritten/renamed but it will still be in the list of files. Please note that these restrictions can be easily bypassed'\n        max_upload_file_size:\n          type: integer\n          format: int64\n          description: 'maximum allowed size, as bytes, for a single file upload. The upload will be aborted if/when the size of the file being sent exceeds this limit. 0 means unlimited. This restriction does not apply for SSH system commands such as `git` and `rsync`'\n        tls_username:\n          type: string\n          enum:\n            - None\n            - CommonName\n          description: 'defines the TLS certificate field to use as username. For FTP clients it must match the name provided using the \"USER\" command. For WebDAV, if no username is provided, the CN will be used as username. For WebDAV clients it must match the implicit or provided username. Ignored if mutual TLS is disabled'\n        hooks:\n          $ref: '#/components/schemas/HooksFilter'\n        disable_fs_checks:\n          type: boolean\n          example: false\n          description: Disable checks for existence and automatic creation of home directory and virtual folders. SFTPGo requires that the user's home directory, virtual folder root, and intermediate paths to virtual folders exist to work properly. If you already know that the required directories exist, disabling these checks will speed up login. You could, for example, disable these checks after the first login\n        web_client:\n          type: array\n          items:\n            $ref: '#/components/schemas/WebClientOptions'\n          description: WebClient/user REST API related configuration options\n      description: Additional user options\n    Secret:\n      type: object\n      properties:\n        status:\n          type: string\n          enum:\n            - Plain\n            - AES-256-GCM\n            - Secretbox\n            - GCP\n            - AWS\n            - VaultTransit\n            - Redacted\n          description: 'Set to \"Plain\" to add or update an existing secret, set to \"Redacted\" to preserve the existing value'\n        payload:\n          type: string\n        key:\n          type: string\n        additional_data:\n          type: string\n        mode:\n          type: integer\n          description: 1 means encrypted using a master key\n      description: The secret is encrypted before saving, so to set a new secret you must provide a payload and set the status to \"Plain\". The encryption key and additional data will be generated automatically. If you set the status to \"Redacted\" the existig secret will be preserved\n    S3Config:\n      type: object\n      properties:\n        bucket:\n          type: string\n          minLength: 1\n        region:\n          type: string\n          minLength: 1\n        access_key:\n          type: string\n        access_secret:\n          $ref: '#/components/schemas/Secret'\n        endpoint:\n          type: string\n          description: optional endpoint\n        storage_class:\n          type: string\n        upload_part_size:\n          type: integer\n          description: 'the buffer size (in MB) to use for multipart uploads. The minimum allowed part size is 5MB, and if this value is set to zero, the default value (5MB) for the AWS SDK will be used. The minimum allowed value is 5.'\n        upload_concurrency:\n          type: integer\n          description: 'the number of parts to upload in parallel. If this value is set to zero, the default value (5) will be used'\n        download_part_size:\n          type: integer\n          description: 'the buffer size (in MB) to use for multipart downloads. The minimum allowed part size is 5MB, and if this value is set to zero, the default value (5MB) for the AWS SDK will be used. The minimum allowed value is 5. Ignored for partial downloads'\n        download_concurrency:\n          type: integer\n          description: 'the number of parts to download in parallel. If this value is set to zero, the default value (5) will be used. Ignored for partial downloads'\n        download_part_max_time:\n          type: integer\n          description: 'the maximum time allowed, in seconds, to download a single chunk (the chunk is defined via \"download_part_size\"). 0 means no timeout. Ignored for partial downloads.'\n        force_path_style:\n          type: boolean\n          description: 'Set this to \"true\" to force the request to use path-style addressing, i.e., \"http://s3.amazonaws.com/BUCKET/KEY\". By default, the S3 client will use virtual hosted bucket addressing when possible (\"http://BUCKET.s3.amazonaws.com/KEY\")'\n        key_prefix:\n          type: string\n          description: 'key_prefix is similar to a chroot directory for a local filesystem. If specified the user will only see contents that starts with this prefix and so you can restrict access to a specific virtual folder. The prefix, if not empty, must not start with \"/\" and must end with \"/\". If empty the whole bucket contents will be available'\n          example: folder/subfolder/\n      description: S3 Compatible Object Storage configuration details\n    GCSConfig:\n      type: object\n      properties:\n        bucket:\n          type: string\n          minLength: 1\n        credentials:\n          $ref: '#/components/schemas/Secret'\n        automatic_credentials:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            Automatic credentials:\n              * `0` - disabled, explicit credentials, using a JSON credentials file, must be provided. This is the default value if the field is null\n              * `1` - enabled, we try to use the Application Default Credentials (ADC) strategy to find your application's credentials\n        storage_class:\n          type: string\n        key_prefix:\n          type: string\n          description: 'key_prefix is similar to a chroot directory for a local filesystem. If specified the user will only see contents that starts with this prefix and so you can restrict access to a specific virtual folder. The prefix, if not empty, must not start with \"/\" and must end with \"/\". If empty the whole bucket contents will be available'\n          example: folder/subfolder/\n      description: 'Google Cloud Storage configuration details. The \"credentials\" field must be populated only when adding/updating a user. It will be always omitted, since there are sensitive data, when you search/get users'\n    AzureBlobFsConfig:\n      type: object\n      properties:\n        container:\n          type: string\n        account_name:\n          type: string\n          description: 'Storage Account Name, leave blank to use SAS URL'\n        account_key:\n          $ref: '#/components/schemas/Secret'\n        sas_url:\n          $ref: '#/components/schemas/Secret'\n        endpoint:\n          type: string\n          description: 'optional endpoint. Default is \"blob.core.windows.net\". If you use the emulator the endpoint must include the protocol, for example \"http://127.0.0.1:10000\"'\n        upload_part_size:\n          type: integer\n          description: 'the buffer size (in MB) to use for multipart uploads. If this value is set to zero, the default value (4MB) will be used.'\n        upload_concurrency:\n          type: integer\n          description: 'the number of parts to upload in parallel. If this value is set to zero, the default value (2) will be used'\n        access_tier:\n          type: string\n          enum:\n            - ''\n            - Archive\n            - Hot\n            - Cool\n        key_prefix:\n          type: string\n          description: 'key_prefix is similar to a chroot directory for a local filesystem. If specified the user will only see contents that starts with this prefix and so you can restrict access to a specific virtual folder. The prefix, if not empty, must not start with \"/\" and must end with \"/\". If empty the whole container contents will be available'\n          example: folder/subfolder/\n        use_emulator:\n          type: boolean\n      description: Azure Blob Storage configuration details\n    CryptFsConfig:\n      type: object\n      properties:\n        passphrase:\n          $ref: '#/components/schemas/Secret'\n      description: Crypt filesystem configuration details\n    SFTPFsConfig:\n      type: object\n      properties:\n        endpoint:\n          type: string\n          description: 'remote SFTP endpoint as host:port'\n        username:\n          type: string\n          description: you can specify a password or private key or both. In the latter case the private key will be tried first.\n        password:\n          $ref: '#/components/schemas/Secret'\n        private_key:\n          $ref: '#/components/schemas/Secret'\n        fingerprints:\n          type: array\n          items:\n            type: string\n          description: 'SHA256 fingerprints to use for host key verification. If you don''t provide any fingerprint the remote host key will not be verified, this is a security risk'\n        prefix:\n          type: string\n          description: Specifying a prefix you can restrict all operations to a given path within the remote SFTP server.\n        disable_concurrent_reads:\n          type: boolean\n          description: Concurrent reads are safe to use and disabling them will degrade performance. Some servers automatically delete files once they are downloaded. Using concurrent reads is problematic with such servers.\n        buffer_size:\n          type: integer\n          minimum: 0\n          maximum: 16\n          example: 2\n          description: The size of the buffer (in MB) to use for transfers. By enabling buffering, the reads and writes, from/to the remote SFTP server, are split in multiple concurrent requests and this allows data to be transferred at a faster rate, over high latency networks, by overlapping round-trip times. With buffering enabled, resuming uploads is not supported and a file cannot be opened for both reading and writing at the same time. 0 means disabled.\n    FilesystemConfig:\n      type: object\n      properties:\n        provider:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n            - 4\n            - 5\n          description: |\n            Providers:\n              * `0` - Local filesystem\n              * `1` - S3 Compatible Object Storage\n              * `2` - Google Cloud Storage\n              * `3` - Azure Blob Storage\n              * `4` - Local filesystem encrypted\n              * `5` - SFTP\n        s3config:\n          $ref: '#/components/schemas/S3Config'\n        gcsconfig:\n          $ref: '#/components/schemas/GCSConfig'\n        azblobconfig:\n          $ref: '#/components/schemas/AzureBlobFsConfig'\n        cryptconfig:\n          $ref: '#/components/schemas/CryptFsConfig'\n        sftpconfig:\n          $ref: '#/components/schemas/SFTPFsConfig'\n      description: Storage filesystem details\n    BaseVirtualFolder:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          minimum: 1\n        name:\n          type: string\n          description: unique name for this virtual folder\n        mapped_path:\n          type: string\n          description: absolute filesystem path to use as virtual folder\n        description:\n          type: string\n          description: optional description\n        used_quota_size:\n          type: integer\n          format: int64\n        used_quota_files:\n          type: integer\n          format: int32\n        last_quota_update:\n          type: integer\n          format: int64\n          description: Last quota update as unix timestamp in milliseconds\n        users:\n          type: array\n          items:\n            type: string\n          description: list of usernames associated with this virtual folder\n        filesystem:\n          $ref: '#/components/schemas/FilesystemConfig'\n      description: Defines the filesystem for the virtual folder and the used quota limits. The same folder can be shared among multiple users and each user can have different quota limits or a different virtual path.\n    VirtualFolder:\n      allOf:\n        - $ref: '#/components/schemas/BaseVirtualFolder'\n        - type: object\n          properties:\n            virtual_path:\n              type: string\n            quota_size:\n              type: integer\n              format: int64\n              description: 'Quota as size in bytes. 0 menas unlimited, -1 means included in user quota. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed'\n            quota_files:\n              type: integer\n              format: int32\n              description: 'Quota as number of files. 0 menas unlimited, , -1 means included in user quota. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed'\n          required:\n            - virtual_path\n      description: 'A virtual folder is a mapping between a SFTPGo virtual path and a filesystem path outside the user home directory. The specified paths must be absolute and the virtual path cannot be \"/\", it must be a sub directory. The parent directory for the specified virtual path must exist. SFTPGo will try to automatically create any missing parent directory for the configured virtual folders at user login.'\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          minimum: 1\n        status:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            status:\n              * `0` user is disabled, login is not allowed\n              * `1` user is enabled\n        username:\n          type: string\n          description: username is unique\n        description:\n          type: string\n          description: 'optional description, for example the user full name'\n        expiration_date:\n          type: integer\n          format: int64\n          description: expiration date as unix timestamp in milliseconds. An expired account cannot login. 0 means no expiration\n        password:\n          type: string\n          format: password\n          description: password or public key/SSH user certificate are mandatory. If the password has no known hashing algo prefix it will be stored, by default, using bcrypt, argon2id is supported too. You can send a password hashed as bcrypt ($2a$ prefix), argon2id, pbkdf2 or unix crypt and it will be stored as is. For security reasons this field is omitted when you search/get users\n        public_keys:\n          type: array\n          items:\n            type: string\n            example: ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEUWwDwEWhTbF0MqAsp/oXK1HR2cElhM8oo1uVmL3ZeDKDiTm4ljMr92wfTgIGDqIoxmVqgYIkAOAhuykAVWBzc= user@host\n          description: Public keys in OpenSSH format. A password or at least one public key/SSH user certificate are mandatory.\n        home_dir:\n          type: string\n          description: path to the user home directory. The user cannot upload or download files outside this directory. SFTPGo tries to automatically create this folder if missing. Must be an absolute path\n        virtual_folders:\n          type: array\n          items:\n            $ref: '#/components/schemas/VirtualFolder'\n          description: mapping between virtual SFTPGo paths and filesystem paths outside the user home directory. Supported for local filesystem only. If one or more of the specified folders are not inside the dataprovider they will be automatically created. You have to create the folder on the filesystem yourself\n        uid:\n          type: integer\n          format: int32\n          minimum: 0\n          maximum: 2147483647\n          description: 'if you run SFTPGo as root user, the created files and directories will be assigned to this uid. 0 means no change, the owner will be the user that runs SFTPGo. Ignored on windows'\n        gid:\n          type: integer\n          format: int32\n          minimum: 0\n          maximum: 2147483647\n          description: 'if you run SFTPGo as root user, the created files and directories will be assigned to this gid. 0 means no change, the group will be the one of the user that runs SFTPGo. Ignored on windows'\n        max_sessions:\n          type: integer\n          format: int32\n          description: Limit the sessions that a user can open. 0 means unlimited\n        quota_size:\n          type: integer\n          format: int64\n          description: Quota as size in bytes. 0 menas unlimited. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed\n        quota_files:\n          type: integer\n          format: int32\n          description: Quota as number of files. 0 menas unlimited. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed\n        permissions:\n          type: object\n          items:\n            $ref: '#/components/schemas/DirPermissions'\n          minItems: 1\n          example:\n            /:\n              - '*'\n            /somedir:\n              - list\n              - download\n        used_quota_size:\n          type: integer\n          format: int64\n        used_quota_files:\n          type: integer\n          format: int32\n        last_quota_update:\n          type: integer\n          format: int64\n          description: Last quota update as unix timestamp in milliseconds\n        upload_bandwidth:\n          type: integer\n          format: int32\n          description: 'Maximum upload bandwidth as KB/s, 0 means unlimited'\n        download_bandwidth:\n          type: integer\n          format: int32\n          description: 'Maximum download bandwidth as KB/s, 0 means unlimited'\n        last_login:\n          type: integer\n          format: int64\n          description: Last user login as unix timestamp in milliseconds. It is saved at most once every 10 minutes\n        filters:\n          $ref: '#/components/schemas/UserFilters'\n        filesystem:\n          $ref: '#/components/schemas/FilesystemConfig'\n        additional_info:\n          type: string\n          description: Free form text field for external systems\n    AdminFilters:\n      type: object\n      properties:\n        allow_list:\n          type: array\n          items:\n            type: string\n          description: 'only clients connecting from these IP/Mask are allowed. IP/Mask must be in CIDR notation as defined in RFC 4632 and RFC 4291, for example \"192.0.2.0/24\" or \"2001:db8::/32\"'\n          example:\n            - 192.0.2.0/24\n            - '2001:db8::/32'\n    Admin:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          minimum: 1\n        status:\n          type: integer\n          enum:\n            - 0\n            - 1\n          description: |\n            status:\n              * `0` user is disabled, login is not allowed\n              * `1` user is enabled\n        username:\n          type: string\n          description: username is unique\n        description:\n          type: string\n          description: 'optional description, for example the admin full name'\n        password:\n          type: string\n          format: password\n          description: Admin password. For security reasons this field is omitted when you search/get admins\n        email:\n          type: string\n          format: email\n        permissions:\n          type: array\n          items:\n            $ref: '#/components/schemas/AdminPermissions'\n        filters:\n          $ref: '#/components/schemas/AdminFilters'\n        additional_info:\n          type: string\n          description: Free form text field\n    QuotaUsage:\n      type: object\n      properties:\n        used_quota_size:\n          type: integer\n          format: int64\n        used_quota_files:\n          type: integer\n          format: int32\n    Transfer:\n      type: object\n      properties:\n        operation_type:\n          type: string\n          enum:\n            - upload\n            - download\n          description: |\n            Operations:\n              * `upload`\n              * `download`\n        path:\n          type: string\n          description: file path for the upload/download\n        start_time:\n          type: integer\n          format: int64\n          description: start time as unix timestamp in milliseconds\n        size:\n          type: integer\n          format: int64\n          description: bytes transferred\n    ConnectionStatus:\n      type: object\n      properties:\n        username:\n          type: string\n          description: connected username\n        connection_id:\n          type: string\n          description: unique connection identifier\n        client_version:\n          type: string\n          description: client version\n        remote_address:\n          type: string\n          description: Remote address for the connected client\n        connection_time:\n          type: integer\n          format: int64\n          description: connection time as unix timestamp in milliseconds\n        command:\n          type: string\n          description: Last SSH/FTP command or WebDAV method\n        last_activity:\n          type: integer\n          format: int64\n          description: last client activity as unix timestamp in milliseconds\n        protocol:\n          type: string\n          enum:\n            - SFTP\n            - SCP\n            - SSH\n            - FTP\n            - DAV\n        active_transfers:\n          type: array\n          items:\n            $ref: '#/components/schemas/Transfer'\n    QuotaScan:\n      type: object\n      properties:\n        username:\n          type: string\n          description: username with an active scan\n        start_time:\n          type: integer\n          format: int64\n          description: scan start time as unix timestamp in milliseconds\n    FolderQuotaScan:\n      type: object\n      properties:\n        name:\n          type: string\n          description: folder name with an active scan\n        start_time:\n          type: integer\n          format: int64\n          description: scan start time as unix timestamp in milliseconds\n    DefenderEntry:\n      type: object\n      properties:\n        id:\n          type: string\n        ip:\n          type: string\n        score:\n          type: integer\n          description: the score increases whenever a violation is detected, such as an attempt to log in using an incorrect password or invalid username. If the score exceeds the configured threshold, the IP is banned. Omitted for banned IPs\n        ban_time:\n          type: string\n          format: date-time\n          description: date time until the IP is banned. For already banned hosts, the ban time is increased each time a new violation is detected. Omitted if the IP is not banned\n    SSHHostKey:\n      type: object\n      properties:\n        path:\n          type: string\n        fingerprint:\n          type: string\n    SSHBinding:\n      type: object\n      properties:\n        address:\n          type: string\n          description: TCP address the server listen on\n        port:\n          type: integer\n          description: the port used for serving requests\n        apply_proxy_config:\n          type: boolean\n          description: 'apply the proxy configuration, if any'\n    WebDAVBinding:\n      type: object\n      properties:\n        address:\n          type: string\n          description: TCP address the server listen on\n        port:\n          type: integer\n          description: the port used for serving requests\n        enable_https:\n          type: boolean\n        client_auth_type:\n          type: integer\n          description: 1 means that client certificate authentication is required in addition to HTTP basic authentication\n    FTPDBinding:\n      type: object\n      properties:\n        address:\n          type: string\n          description: TCP address the server listen on\n        port:\n          type: integer\n          description: the port used for serving requests\n        apply_proxy_config:\n          type: boolean\n          description: 'apply the proxy configuration, if any'\n        tls_mode:\n          type: integer\n          enum:\n            - 0\n            - 1\n            - 2\n          description: |\n            * `0` - clear or explicit TLS * `1` - explicit TLS required * `2` - implicit TLS\n        force_passive_ip:\n          type: string\n          description: External IP address to expose for passive connections\n        client_auth_type:\n          type: integer\n          description: 1 means that client certificate authentication is required in addition to FTP authentication\n    SSHServiceStatus:\n      type: object\n      properties:\n        is_active:\n          type: boolean\n        bindings:\n          type: array\n          items:\n            $ref: '#/components/schemas/SSHBinding'\n          nullable: true\n        host_keys:\n          type: array\n          items:\n            $ref: '#/components/schemas/SSHHostKey'\n          nullable: true\n        ssh_commands:\n          type: array\n          items:\n            type: string\n    FTPPassivePortRange:\n      type: object\n      properties:\n        start:\n          type: integer\n        end:\n          type: integer\n    FTPServiceStatus:\n      type: object\n      properties:\n        is_active:\n          type: boolean\n        bindings:\n          type: array\n          items:\n            $ref: '#/components/schemas/FTPDBinding'\n          nullable: true\n        passive_port_range:\n          $ref: '#/components/schemas/FTPPassivePortRange'\n    WebDAVServiceStatus:\n      type: object\n      properties:\n        is_active:\n          type: boolean\n        bindings:\n          type: array\n          items:\n            $ref: '#/components/schemas/WebDAVBinding'\n          nullable: true\n    DataProviderStatus:\n      type: object\n      properties:\n        is_active:\n          type: boolean\n        driver:\n          type: string\n        error:\n          type: string\n    ServicesStatus:\n      type: object\n      properties:\n        ssh:\n          $ref: '#/components/schemas/SSHServiceStatus'\n        ftp:\n          $ref: '#/components/schemas/FTPServiceStatus'\n        webdav:\n          $ref: '#/components/schemas/WebDAVServiceStatus'\n        data_provider:\n          $ref: '#/components/schemas/DataProviderStatus'\n        defender:\n          type: object\n          properties:\n            is_active:\n              type: boolean\n    BanStatus:\n      type: object\n      properties:\n        date_time:\n          type: string\n          format: date-time\n          nullable: true\n          description: if null the host is not banned\n    ScoreStatus:\n      type: object\n      properties:\n        score:\n          type: integer\n          description: if 0 the host is not listed\n    BackupData:\n      type: object\n      properties:\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        folders:\n          type: array\n          items:\n            $ref: '#/components/schemas/BaseVirtualFolder'\n        admins:\n          type: array\n          items:\n            $ref: '#/components/schemas/Admin'\n        version:\n          type: integer\n    PwdChange:\n      type: object\n      properties:\n        current_password:\n          type: string\n        new_password:\n          type: string\n    DirEntry:\n      type: object\n      properties:\n        name:\n          type: string\n          description: name of the file (or subdirectory) described by the entry. This name is the final element of the path (the base name), not the entire path\n        size:\n          type: integer\n          format: int64\n          description: file size, omitted for folders and non regular files\n        mode:\n          type: integer\n          description: |\n            File mode and permission bits. More details here: https://golang.org/pkg/io/fs/#FileMode.\n            Let's see some examples:\n            - for a directory mode\u00262147483648 != 0\n            - for a symlink mode\u0026134217728 != 0\n            - for a regular file mode\u00262401763328 == 0\n        last_modified:\n          type: string\n          format: date-time\n    ApiResponse:\n      type: object\n      properties:\n        message:\n          type: string\n          description: 'message, can be empty'\n        error:\n          type: string\n          description: error description if any\n    VersionInfo:\n      type: object\n      properties:\n        version:\n          type: string\n        build_date:\n          type: string\n        commit_hash:\n          type: string\n        features:\n          type: array\n          items:\n            type: string\n          description: 'Features for the current build. Available features are \"portable\", \"bolt\", \"mysql\", \"sqlite\", \"pgsql\", \"s3\", \"gcs\", \"metrics\". If a feature is available it has a \"+\" prefix, otherwise a \"-\" prefix'\n    Token:\n      type: object\n      properties:\n        access_token:\n          type: string\n        expires_at:\n          type: string\n          format: date-time\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n"
		}
	},
	"Error": "parse: paths: /dumpdata: get: dumpdata: responses: 200: content: application/json: schema: parse schema: oneOf: [1]: parse schema: reference \"#/components/schemas/BackupData\": parse schema: users: parse schema: item: parse schema: reference \"#/components/schemas/User\": parse schema: permissions: parse schema: object cannot contain 'items' field"
}