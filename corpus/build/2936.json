{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gbrueckl/Databricks.API.PowerShell"
		},
		"file": {
			"name": "repos-2.0-aws.yaml",
			"path": "Docs/OpenAPISpecs/repos-2.0-aws.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  version: 2.0.0\n  title: Repos API\n  description: \u003e-\n    The repos API allows users to manage their\n    [repos](https://docs.databricks.com/repos.html). Users can use the API to\n    access all repos that they have manage permissions on.\nservers:\n  - url: https://\u003cdatabricks-instance\u003e/api/2.0\n    description: \u003e-\n      In the URL, substitute `\u003cdatabricks-instance\u003e` with the domain name of\n      your deployment. Use the form `\u003caccount\u003e.cloud.databricks.com`.\npaths:\n  /repos:\n    description: This endpoint manages repos for a workspace.\n    get:\n      summary: Get repos\n      description: \u003e-\n        Returns repos that the calling user has Manage permissions on. Results\n        are paginated with each page containing twenty repos.\n      operationId: get-repos\n      parameters:\n        - in: query\n          name: path_prefix\n          schema:\n            type: string\n          description: Filters repos that have paths starting with the given path prefix.\n        - in: query\n          name: next_page_token\n          schema:\n            type: string\n          description: \u003e-\n            Token used to get the next page of results. If not specified,\n            returns the first page of results as well as a next page token if\n            there are more results.\n      responses:\n        '200':\n          description: Repos were successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetReposResponse'\n        '404':\n          $ref: '#/components/responses/ReposNotEnabled'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    post:\n      summary: Create a repo\n      description: \u003e-\n        Creates a repo in the workspace and links it to the remote Git repo\n        specified. Note that repos created programmatically must be linked to a\n        remote Git repo, unlike repos created in the browser.\n      operationId: create-repo\n      requestBody:\n        description: Details required to create and clone a repo object\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateRepoRequest'\n      responses:\n        '200':\n          description: The repo was successfully created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetRepoResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/DirectoryNotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /repos/{repo_id}:\n    description: This endpoint manages a specific repo.\n    parameters:\n      - name: repo_id\n        in: path\n        schema:\n          type: string\n        description: The ID for the corresponding repo to access.\n        required: true\n    get:\n      summary: Get a repo\n      description: Returns the repo with the given repo ID.\n      operationId: get-repo\n      responses:\n        '200':\n          description: The repo was successfully returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetRepoResponse'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/RepoNotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    patch:\n      summary: Updates the repo to a different branch or tag\n      description: Updates the repo to the given branch or tag.\n      operationId: update-repo\n      requestBody:\n        description: Details required to update the repo\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/Branch'\n                - $ref: '#/components/schemas/Tag'\n      responses:\n        '200':\n          description: The repo was successfully updated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetRepoResponse'\n        '400':\n          $ref: '#/components/responses/UnknownRef'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/RepoNotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n    delete:\n      summary: Deletes the repo\n      description: Deletes the specified repo\n      operationId: delete-repo\n      responses:\n        '200':\n          description: The repo was successfully deleted.\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/RepoNotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\ncomponents:\n  schemas:\n    id:\n      type: integer\n      format: int64\n      description: ID of the repo object in the workspace.\n      example: 5249608814509279\n    url:\n      type: string\n      description: URL of the Git repository to be linked.\n      example: https://github.com/jsmith/test\n    provider:\n      type: string\n      description: \u003e-\n        Git provider. This field is case-insensitive. The available Git\n        providers are gitHub, bitbucketCloud, gitLab, azureDevOpsServices,\n        gitHubEnterprise, bitbucketServer and gitLabEnterpriseEdition.\n      example: gitHub\n    path:\n      type: string\n      description: \u003e-\n        Desired path for the repo in the workspace. Must be in the format\n        /Repos/{folder}/{repo-name}.\n      example: /Repos/Production/testrepo\n    branch:\n      type: string\n      description: Branch that the local version of the repo is checked out to.\n      example: main\n    tag:\n      type: string\n      description: \u003e-\n        Tag that the local version of the repo is checked out to. Updating the\n        repo to a tag puts the repo in a detached HEAD state. Before committing\n        new changes, you must update the repo to a branch instead of the\n        detached HEAD.\n      example: v1.0\n    head_commit_id:\n      type: string\n      description: SHA-1 hash representing the commit ID of the current HEAD of the repo.\n      example: 7e0847ede61f07adede22e2bcce6050216489171\n    next_page_token:\n      type: string\n      description: \u003e-\n        Token that can be specified as a query parameter to the GET /repos\n        endpoint to retrieve the next page of results.\n      example: eyJyZXBvX3RyZWVub2RlX2lkIjo1MjQ5NjA4ODE0NTA5Mjc5fQ==\n    GetRepoResponse:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        url:\n          $ref: '#/components/schemas/url'\n        provider:\n          $ref: '#/components/schemas/provider'\n        path:\n          $ref: '#/components/schemas/path'\n        branch:\n          $ref: '#/components/schemas/branch'\n        head_commit_id:\n          $ref: '#/components/schemas/head_commit_id'\n    GetReposResponse:\n      type: object\n      properties:\n        repos:\n          type: array\n          items:\n            $ref: '#/components/schemas/GetRepoResponse'\n        next_page_token:\n          $ref: '#/components/schemas/next_page_token'\n    CreateRepoRequest:\n      type: object\n      required:\n        - url\n        - provider\n      properties:\n        url:\n          $ref: '#/components/schemas/url'\n        provider:\n          $ref: '#/components/schemas/provider'\n        path:\n          $ref: '#/components/schemas/path'\n    Branch:\n      type: object\n      required:\n        - branch\n      properties:\n        branch:\n          $ref: '#/components/schemas/branch'\n    Tag:\n      type: object\n      required:\n        - tag\n      properties:\n        tag:\n          $ref: '#/components/schemas/tag'\n    Error:\n      type: object\n      properties:\n        error_code:\n          type: string\n          description: Error code\n        message:\n          type: string\n          description: Human-readable error message describing the cause of the error.\n  responses:\n    BadRequest:\n      description: The request is invalid.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          examples:\n            invalid_repo_path:\n              value:\n                error_code: BAD_REQUEST\n                message: Invalid repo path specified\n    UnknownRef:\n      description: The specified ref is invalid.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          examples:\n            unknown_ref:\n              value:\n                error_code: GIT_UNKNOWN_REF\n                message: Remote branch does not exist\n    Forbidden:\n      description: The user does not have access to the requested resource.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          examples:\n            bad_request:\n              value:\n                error_code: PERMISSION_DENIED\n                message: \u003e-\n                  PERMISSION_DENIED: jsmith@example.com does not have Manage\n                  permissions on /Repos/Production/testrepo. Please contact the\n                  owner or an administrator for access.\n    RepoNotFound:\n      description: The specified repo does not exist.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          examples:\n            repo_not_found:\n              value:\n                error_code: RESOURCE_DOES_NOT_EXIST\n                message: Repo could not be found\n    DirectoryNotFound:\n      description: The specified directory does not exist.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          examples:\n            directory_not_found:\n              value:\n                error_code: RESOURCE_DOES_NOT_EXIST\n                message: \u003e-\n                  RESOURCE_DOES_NOT_EXIST: Parent directory /Repos/testfolder\n                  does not exist.\n    ReposNotEnabled:\n      description: Repos is not enabled for the workspace.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          examples:\n            bad_request:\n              value:\n                error_code: FEATURE_DISABLED\n                message: 'FEATURE_DISABLED: Repos is not enabled.'\n    InternalError:\n      description: The request is not handled correctly due to a server error.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          examples:\n            internal_error:\n              value:\n                error_code: INTERNAL_ERROR\n                message: \u003e-\n                  There was an error performing the operation. Please try again\n                  or open a support ticket.\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: String\n      in: header\n      name: Token\n      description: \u003e-\n        You can authenticate with a Databricks personal access token that you\n        create for yourself within the application user interface.\n    basicAuth:\n      type: http\n      scheme: basic\n      in: header\n      name: HTTP Basic authentication\n      description: \u003e-\n        HTTP Basic authentication with a name and password for non-SSO\n        authentication.\nsecurity:\n  - bearerAuth: []\n  - basicAuth: []\n"
		}
	},
	"Error": "make ir: path \"/repos/{repo_id}\": patch: requestBody: contents: application/json: schema: save referenced type: reference \"#/components/schemas/Tag\" type name conflict: \"Tag\""
}