{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/devisle/devisle-tutorial-site"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "backend/openapi.yaml",
			"content": "openapi: 3.0.2\ninfo:\n    title: Tutorial site API\n    description: The API for the NextJS tutorial site developed by DevIsle. \n    version: 1.0.0\n    contact: \n        name: DevIsle Team\n        \ntags: \n  - name: CMS\n    description: All CMS related endpoints\n\npaths:\n  /cms/auth/login:\n    post:\n      tags: \n        - CMS\n      summary: Logs into the CMS\n      description: Verifies credentials and returns some meta data of the user, alongside a 2 day JWT in the body.\n      operationId: cmsUserLogin\n      requestBody:\n        $ref: \"#/components/requestBodies/CMSUserLoginBody\"\n      responses:\n        200:\n          description: A confirmed login\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CMSUserLoginRespModel\"\n        401:\n          $ref: \"#/components/responses/Unauthorised\"\n        503:\n          $ref: \"#/components/responses/ServiceUnavailable\"\n\n  /cms/auth/confirm:\n    get:\n      tags: \n      - CMS\n      summary: Verifys the users JWT\n      description: Performs a verification check of the users JWT and responds accordingly.\n      operationId: verifyCmsUsersJWT\n      responses:\n        200:\n          description: Responds with the **username** of the user and their **userId** if the token is successfully verified.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/requestBodies/CMSUserLoginBody\"\n              example: \n                {\n                  username: \"Alex\",\n                  userId: \"5ech7083300gh30f202efaf9\"\n                }\n        401:\n          $ref: \"#/components/responses/Unauthorised\"\n      security:\n      - BearerAuth: []\n\n  /cms/tutorials/all:\n    get:\n      tags:\n      - CMS\n      summary: Get all tutorials\n      description: Gets all the tutorials in their **full** format.\n      operationId: getAllTutorialsCMS\n      responses:\n        200:\n          description: Responds with a list of **full** tutorials.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CMSAllTutorialsArrayModel\"\n        500:\n          description: Internal server error, will occur under external services failing\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: \"Something went wrong on our side! See here: Example Error\"\n      security:\n      - BearerAuth: []\n\n  /cms/tutorials/create:\n    post:\n      tags:\n      - CMS\n      summary: Create tutorial\n      description: Creates a tutorial.\n      operationId: createATutorialCMS\n      requestBody:\n        $ref: \"#/components/requestBodies/CMSCreateUpdateTutorialBody\"\n      responses:\n        201:\n          description: \"Tutorial created *successfully*.  \\n - `ok` is boolean, in values 0/1.  \\n\\n - `n` is document affected, in boolean, values 0/1.\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MongoUpdateResponse\"\n        400:\n          description: Bad request, will occur if the request body is incorrect\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: \"Server cannot process this request!\"\n        500:\n          description: Internal server error, will occur under external services failing\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: \"Something went wrong on our side! See here: Example Error\"\n      security:\n      - BearerAuth: []\n  \n  /cms/tutorials/update:\n    put:\n      tags:\n      - CMS\n      summary: Update a tutorial\n      description: Updates a tutorial by it's `ObjectId(id)`\n      operationId: updateATutorialCMS\n      parameters:\n        - in: query\n          description: The `ObjectId(id)` of the tutorial we wish to update.\n          name: tutId\n          required: true\n          schema:\n            type: string\n          example: /cms/tutorials/update?tutId=5ec6aa4993014b10402122b2\n      requestBody:\n        $ref: \"#/components/requestBodies/CMSCreateUpdateTutorialBody\"\n      responses:\n        200:\n          description: \"Tutorial updated *successfully*.  \\n - `ok` is boolean, in values 0/1.  \\n\\n - `n` is document affected, in boolean, values 0/1.  \\n - `nModified` is the amount of documents updated/changed.\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExtendedMongoUpdateResponse\"\n        400:\n          description: \"Bad request, will occur if:  \\n - the request body is incorrect  \\n\\n - the `ObjectId(id)` string byte size is incorrect\"\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: \"Server cannot process this request!\"\n      security:\n      - BearerAuth: []\n\n  # PUBLIC RESOURCES\n  #\n  # Get tutorials\n  #\n  #    Get tut by id\n  #       /public/tutorials/{ID}\n  #\n  /public/tutorials/{tutId}:\n    get:\n      tags:\n      - PUBLIC\n      summary: Get a tutorial by it's ID\n      description: Gets a tutorial by it's `ObjectId(id)` (represented as a string)\n      operationId: getTutById\n      parameters:\n        - in: path\n          description: The `ObjectId(id)` of the tutorial we wish retreive\n          name: tutId\n          required: true\n          schema:\n            type: string\n          example: /public/tutorials/5ec6aa4993014b10402122b2\n      responses:\n        200:\n          description: \"Returns a `PublicTutorial` formatted object.\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PublicTutorialModel\"\n        204:\n          description: \"Returns 204 if tutorial does not exist\"\n        400:\n          description: \"Bad request, will occur when the `ObjectId(id)` path param string byte size is incorrect\"\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: \"ObjectID argument passed in [the query] must be a single String of 12 bytes or a string of 24 hex\"\n  \n  /public/tutorials/cards/{category}:\n    get:\n      tags:\n      - PUBLIC\n      summary: Get a an array of tutorial cards\n      description: \"Gets all the tutorial cards of a given category, alternatively,\n                    if passed query params offset/outset, this will grab a specific portion of the card list\"\n      operationId: getTutCardsByCategory\n      parameters:\n        - in: path\n          description: The tutorial category we wish to use for our card filter\n          name: category\n          required: true\n          schema:\n            type: string\n          example: /public/tutorials/cards/javascript\n        - in: query\n          description: The offset to begin at when filtering the card list\n          name: offset\n          required: false\n          schema:\n            type: number\n          example: /public/tutorials/cards/javascript?offset=0\u0026outset=50\n        - in: query\n          description: The outset to begin at when filtering the card list\n          name: outset\n          required: false\n          schema:\n            type: number\n          example: /public/tutorials/cards/javascript?offset=0\u0026outset=50\n      responses:\n        200:\n          description: \"Returns an array of `TutorialCard`s\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PublicTutorialCardModel\"\n        400:\n          description: \"Bad request will occur when the query params are the wrong type\"\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: \"Query params for the category request must be integers.\"\n        404:\n          description: \"404 Occurs when the passed path param category doesn't exist\"\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: \"The given category does not exist.\"\n\n  /public/tutorials/categories/all:\n    get:\n      tags:\n      - PUBLIC\n      summary: Gets all of the categories in an array\n      operationId: getAllCategories\n      responses:\n        200:\n          description: \"Returns an array of category strings\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  example: javascript\n\n  /public/tutorials/paths/all:\n    get:\n      tags:\n      - PUBLIC\n      summary: Gets all of the potential paths to a tutorial\n      operationId: getAllPaths\n      responses:\n        200:\n          description: \"Returns an array of path strings\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    tutId:\n                      type: string\n                    tutName:\n                      type: string\n\n  #\n  #    Get all tutorials cards for this category\n  #       /public/tutorials/cards/{category}?offset=*\u0026outset=*\n  #\n  # Categories\n  #     Get cat by id\n  #       /public/tutorials/categories?catId=*\n  #\n  #     Get cats in offset/outset -\u003e this endpoint will also be used by the CMS lol\n  #       /public/tutorials/categories?offset=*\u0026outset=*\n  #\n  # Svg assets to be stored in NextJS server, not here.\n  # Asset should be named after category name, i.e., Learn JS = learn-js.png/svg/jpeg w/e\n  #\n\ncomponents:\n  schemas:\n    PublicTutorialCardModel:\n      type: object\n      properties:\n        _id:\n          type: string\n        cardTutName:\n          type: string\n        category:\n          type: string\n        cardText:\n          type: string\n        authorName:\n          type: string\n        isAvailable:\n          type: boolean\n    PublicTutorialModel:\n      type: object\n      properties:\n        name:\n          type: string\n        category:\n          type: string\n        authorName:\n          type: string\n        isAvailable:\n          type: boolean\n        content:\n          type: array\n          items:\n            type: object\n            properties:\n              sectionTitle:\n                type: string\n              sectionBody:\n                type: string\n    MongoUpdateResponse:\n      type: object\n      properties:\n        ok:\n          type: integer\n        n:\n          type: integer\n      required:\n        - ok\n        - \"n\"\n    ExtendedMongoUpdateResponse:\n      allOf:\n        - $ref: \"#/components/schemas/MongoUpdateResponse\"\n        - type: object\n          properties:\n            nModified: \n              type: integer\n          required:\n            - nModified\n    CMSUserLoginModel:\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n      required: \n        - username\n        - password\n    CMSUserLoginRespModel:\n      allOf:\n        - type: object\n          properties:\n            successfulLogin:\n              type: boolean\n            jwt:\n              type: string\n          required:\n            - successfulLogin\n            - jwt\n        - $ref: \"#/components/schemas/CMSUserLoginModel\"\n    CMSTutorialModel:\n      type: object\n      properties:\n        _id:\n          type: string\n        name:\n          type: string\n        html:\n          type: string\n        markdown:\n          type: string\n        category:\n          type: string\n        authorId:\n          type: string\n        authorName:\n          type: string\n        isAvailable:\n          type: boolean\n      required:\n        - _id\n        - name\n        - html\n        - markdown\n        - category\n        - authorId\n        - authorName\n        - isAvailable\n    CMSAllTutorialsArrayModel:\n      type: array\n      items: \n        $ref: \"#/components/schemas/CMSTutorialModel\"\n    TutorialCreateUpdateModel:\n      type: object\n      properties:\n        name:\n          type: string\n        html:\n          type: string\n        markdown:\n          type: string\n        # TODO: Limit the categories to reference a category collection\n        category:\n          type: string\n      required:\n        - name\n        - html\n        - markdown\n        - category\n\n  responses:\n    ServiceUnavailable:\n      description: Service unavailable\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: Error object schema todo\n    Unauthorised:\n      description: Unauthorised\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: Access denied! Unauthorised.\n\n  requestBodies:\n    CMSCreateUpdateTutorialBody:\n      description: The schema to create/update a tutorial, a.k.a *PartialTutorial* in app.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/TutorialCreateUpdateModel\"\n    CMSUserLoginBody:\n      description: The login credential schema\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/CMSUserLoginModel\"\n            \n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n    \nservers:\n    - url: http://127.0.0.1:3000/\n      description: Development\n\n"
		}
	},
	"Error": "parse: paths: /cms/auth/confirm: get: operation \"verifyCmsUsersJWT\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/requestBodies/CMSUserLoginBody\": resolve reference \"#/components/requestBodies/CMSUserLoginBody\": invalid schema reference \"#/components/requestBodies/CMSUserLoginBody\""
}