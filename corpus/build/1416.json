{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/EpiLink/EpiLink"
		},
		"file": {
			"name": "epilink.yaml",
			"path": "swagger/epilink.yaml",
			"content": "openapi: 3.0.1\ninfo:\n  title: EpiLink API (beta)\n  description: |\n    This is the API for EpiLink, a server authentication system for Discord. It is still WIP.\n\n    This will be the replacement for the old Docsify.js-based API documentation.\n\n    **This document may contain mistakes. Please report them [on our GitHub repo](https://github.com/EpiLink/EpiLink). Thanks!**\n\n    For more information on EpiLink, check out:\n\n    - The EpiLink website: \u003chttps://epilink.zoroark.guru\u003e\n\n    - Additional API documentation: [here](/#/Api?). Has thorough information on topics not covered by this document.\n\n    Please note that, unless your instance administrators decided to enable this Swagger via the EpiLink CORS whitelist, all of the APIs will fail.\n  license:\n    name: Mozilla Public License version 2 - no copyleft exception (Exhibit B)\n    url: https://www.mozilla.org/en-US/MPL/2.0/\n  version: \"0.7\"\nservers:\n  - url: \"{protocol}://{backendHost}/api/v1\"\n    variables:\n      backendHost:\n        default: my.epilinkinstance.example.org\n        description: The host name for your EpiLink instance\n      protocol:\n        enum:\n          - http\n          - https\n        default: https\n        description: The protocol to use.\ntags:\n  - name: meta\n    description: Endpoints for discovering information about an instance\n  - name: user\n    description: Endpoints for retrieving information on the currently logged in user.\n  - name: register\n    description: Endpoints for the registration procedure\n  - name: admin\n    description: Endpoints for administrative tasks. Admin permissions are required.\npaths:\n  /meta/info:\n    get:\n      tags: [ meta ]\n      summary: Returns information about the EpiLink instance\n      responses:\n        '200':\n          description: A JSON ApiResponse containing an InstanceInformation object.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/ApiResponse'\n                  - type: object\n                    properties:\n                      data:\n                        $ref: '#/components/schemas/InstanceInformation'\n              example:\n                success: true\n                message: null\n                message_i18n: null\n                message_i18n_data: { }\n                data:\n                  title: \"My Instance\"\n                  logo: \"https://raw.githubusercontent.com/EpiLink/EpiLink/dev/assets/epilink256.png\"\n                  background: null\n                  authorizeStub_idProvider: \"https://...\"\n                  authorizeStub_discord: \"https://...\"\n                  providerName: \"My Identity Provider\"\n                  providerIcon: null\n                  idPrompt: \"\u003cp\u003ePizza will be ordered and robots will invade if you give us your identity\u003c/p\u003e\"\n                  footerUrls:\n                    - name: My website\n                      url: https://zoroark.guru\n                    - name: Another website\n                      url: https://litarvan.com\n                  contacts:\n                    - name: Xavier Loginard\n                      email: xavier.loginard@school.edu\n                    - name: Mestel Bural-Nesfa\n                      email: mester@lab.school.edu\n                  showFullAbout: false\n\n  /meta/{legalText}:\n    get:\n      tags: [ meta ]\n      summary: Returns the requested legal text document for this instance.\n      description: The terms of services or privacy policy for this EpiLink instance are returned. This can be inline HTML or a PDF document. Clients should differentiate between the two using the returned Content-Type header.\n      parameters:\n        - in: path\n          name: legalText\n          schema:\n            type: string\n            enum: [ \"tos\", \"privacy\" ]\n            default: tos\n          required: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/pdf:\n              schema:\n                type: string\n                format: binary\n              example: A PDF document\n            text/html:\n              schema:\n                type: string\n                format: html\n              example: \u003cp\u003eSome HTML\u003c/p\u003e\n\n  /meta/{resource}:\n    get:\n      tags: [ meta ]\n      summary: Returns the requested resource only if said resource is configured to be self-hosted\n      description: |\n        This endpoint only works if the resource is set to be hosted directly the back-end instead of being hosted somewhere else. You should not use this endpoint directly, use the corresponding field in the `/meta/info` endpoint instead.\n\n        The content type returned by this endpoint heavily depends on the server's configuration.\n\n        Possible values are:\n\n        - `logo`: The logo for this instance.\n\n        - `background`: The background image for this instance\n\n        - `idpLogo`: The identity provider's logo for this instance\n      parameters:\n        - in: path\n          name: resource\n          schema:\n            type: string\n            enum: [ \"logo\", \"background\", \"ipdLogo\" ]\n            default: logo\n          required: true\n      responses:\n        '200':\n          description: OK, resource is returned.\n          content:\n            \"*/*\":\n              schema:\n                type: string\n                format: binary\n              example: Something that corresponds to the requested resource.\n\n  /user:\n    get:\n      tags: [ \"user\" ]\n      summary: Retrieve information on the logged in user\n      description: |\n        Use this endpoint to retrive information on the currently logged in user.\n\n        As the session ID parameter is fully opaque, you cannot use it to know \"stuff\" on the user. Use this endpoint to\n        discover information on them.\n      security:\n        - SessionId: [ ]\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/ApiResponse'\n                  - type: object\n                    properties:\n                      data:\n                        $ref: '#/components/schemas/UserInformation'\n              example:\n                success: true\n                message: null\n                message_i18n: null\n                message_i18n_data: { }\n                data:\n                  discordId: \"1234567890\"\n                  username: \"TheUser#1324\"\n                  avatarUrl: null\n                  identifiable: true\n                  privileged: false\n        '401':\n          $ref: '#/components/responses/UserUnauthorized'\n\n  /user/logout:\n    post:\n      tags: [ user ]\n      summary: Log a user out and invalidate their session\n      description: |\n        Log a user out and invalidate the given `SessionId`. A new session ID can be obtained through the Registration\n        flow.\n      security:\n        - SessionId: [ ]\n      responses:\n        '200':\n          description: OK -- User was logged out and SessionId is no longer valid. Data is always null in this case.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiEmptyResponse'\n        '401':\n          $ref: '#/components/responses/UserUnauthorized'\n\n  /user/idaccesslogs:\n    get:\n      tags: [ \"user\" ]\n      summary: Retrieve the identity access logs for the logged in user\n      description: |\n        This endpoint returns a list of all the identity accesses made against this user.\n      security:\n        - SessionId: [ ]\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/ApiResponse'\n                  - type: object\n                    properties:\n                      data:\n                        $ref: '#/components/schemas/IdAccessLogs'\n              example:\n                success: true\n                message: null\n                message_i18n: null\n                message_i18n_data: { }\n                data:\n                  manualAuthorsDisclosed: false\n                  accesses:\n                    - automated: true\n                      author: EpiLink Bot Services\n                      reason: Used your name to order pizza\n                      timestamp: '2020-12-23T10:15:30Z'\n                    - automated: false\n                      author: Someone\n                      reason: You looked sus\n                      timestamp: '2020-12-11T20:12:23Z'\n\n        '401':\n          $ref: '#/components/responses/UserUnauthorized'\n\n  /user/identity:\n    post:\n      tags: [ user ]\n      security:\n        - SessionId: [ ]\n      summary: Add an identity to the account\n      description: |\n        This endpoint uses the provided ID Provider authorization code to record the e-mail address of the account in\n        the database. Note that the ID Provider account retrieved via the authorization code must be the one that was\n        used for creating the account in the first place -- otherwise, the operation fails with a 112 error code.\n\n        Note that the back-end will always consume the authorization code, although it will discard the retrieved token\n        immediately in case of an error (e.g. identity already known).\n\n        Triggers a global role update for the user on success.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegistrationAuthCode'\n      responses:\n        '200':\n          description: OK -- Identity was linked to the account and the account is now identifiable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiEmptyResponse'\n        '401':\n          $ref: '#/components/responses/UserUnauthorized'\n        '400':\n          description: An error happened, usually error codes 102, 110 or 112.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiErrorResponse'\n              examples:\n                '102':\n                  summary: 102 - Invalid authorization code\n                  description: The provided authorization code was invalid or rejected.\n                  value:\n                    success: false\n                    message: \"Invalid authorization code\"\n                    message_i18n: \"err.102\"\n                    message_i18n_data: { }\n                    data:\n                      code: 102\n                      message: \"Invalid authorization code\"\n                '110':\n                  summary: 110 - Identity already there\n                  description: Can't set the identity for this account as one was already present.\n                  value:\n                    success: false\n                    message: \"The identity of this account is already registered in the database\"\n                    message_i18n: \"err.110\"\n                    message_i18n_data: { }\n                    data:\n                      code: 110\n                      message: \"The identity of this account is already registered in the database\"\n                '112':\n                  summary: 112 - Account mismatch\n                  description: |\n                    The account used here is not the same as the one that was used to create this account and was thus\n                    rejected.\n                  value:\n                    success: false\n                    message: \"This account's identity does not match the new one\"\n                    message_i18n: \"err.112\"\n                    message_i18n_data: { }\n                    data:\n                      code: 112\n                      message: \"This account's identity does not match the new one\"\n    delete:\n      tags: [ user ]\n      security:\n        - SessionId: [ ]\n      summary: Removes a user's identity from the database\n      description: |\n        This request does not have a body.\n\n        Deletes a user's identity from the instance. The instance will \"forget\" about the user's identity.\n\n        Updates the Discord roles of the user if successful.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiEmptyResponse'\n        '401':\n          $ref: '#/components/responses/UserUnauthorized'\n        '400':\n          description: An error occured. This will usually be in the form of a 111 error (identity was already absent)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiErrorResponse'\n              example:\n                success: false\n                message: \"The identity of this account already does not exist in the database\"\n                message_i18n: \"err.111\"\n                message_i18n_data: { }\n                data:\n                  code: 111\n                  message: \"The identity of this account already does not exist in the database\"\n\n  /register/info:\n    get:\n      # TODO document behavior if RegisterSessionId doesn't work\n      tags: [ register ]\n      summary: Get the state of the registration\n      description: |\n        Returns the current state of the registration for the given `RegisterSessionId`. If no value or an invalid value is provided for this\n        header, a new registration session is created and its header is returned.\n\n        More examples for the 200 response can be found at `POST /register/authcode`.\n      parameters:\n        - $ref: '#/components/parameters/RegisterSessionId'\n      responses:\n        '200':\n          description: OK -- Registration session information is returned\n          headers:\n            RegisterSessionId:\n              schema:\n                type: string\n                format: base64url\n              description: The registration session's ID.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/ApiResponse'\n                  - type: object\n                    properties:\n                      data:\n                        $ref: '#/components/schemas/RegistrationInformation'\n              example:\n                success: true\n                message: null\n                message_i18n: null\n                message_i18n_data: { }\n                data:\n                  discordUsername: \"Hello#1234\"\n                  discordAvatarUrl: \"https://my.discord.example.org/avatar.png\"\n                  email: \"myemail.com\"\n\n  /register:\n    post:\n      # TODO document error behavior\n      tags: [ register ]\n      summary: Complete the registration procedure\n      description: |\n        Completes the registration procedure associated with the given `RegisterSessionId`.\n\n        This directly logs the user in upon success.\n      parameters:\n        - $ref: '#/components/parameters/RegisterSessionIdRequired'\n      requestBody:\n        required: true\n        description: Additional registration information\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdditionalRegistrationOptions'\n            example:\n              keepIdentity: true\n      responses:\n        '200':\n          description: OK -- Registration is successful.\n          headers:\n            SessionId:\n              description: The newly created session ID that corresponds to the created account.\n              schema:\n                type: string\n                format: base64url\n              required: true\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/ApiResponse'\n                  - $ref: '#/components/schemas/NullDataContainer'\n              example:\n                success: true\n                message: \"Account created, logged in.\"\n                message_i18n: \"reg.acc\"\n                message_i18n_data: { }\n                data: null\n\n    delete:\n      # TODO document error behavior\n      tags: [ register ]\n      summary: Cancel the registration procedure\n      description: |\n        Aborts the registration procedure associated with the given `RegisterSessionId`. Clears all session information from the back-end.\n      parameters:\n        - $ref: '#/components/parameters/RegisterSessionIdRequired'\n      responses:\n        '200':\n          description: OK -- Registration session has been deleted.\n\n  /register/authcode/{service}:\n    post:\n      # TODO document error cases\n      tags: [ register ]\n      summary: Submit an authorization code\n      description: |\n        Submit an authorization code as part of the registration procedure.\n\n        In order to complete the submission procedure, two authorization codes must be provided:\n\n        - One from the identity provider\n\n        - One from Discord\n\n        You basically have to do the first part of the authorization code flow. The URL to use to acquire the\n        authorization code is provided in `GET /meta/info`.\n\n        Check the EpiLink documentation for more information on the procedure.\n      parameters:\n        - name: service\n          description: |\n            The service that should be used. Possible values are:\n              - idProvider: The identity provider for this instance\n              - discord: Discord for this instance.\n          required: true\n          in: path\n          schema:\n            type: string\n            enum:\n              - idProvider\n              - discord\n      requestBody:\n        required: true\n        description: The authorization code.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegistrationAuthCode'\n      responses:\n        '200':\n          description: |\n            OK -- See attached object for info on procedure.\n\n            - If `next` is `login`, the user has been logged in, check the `SessionId` header.\n\n            - If `next` is `continue`, the procedure can continue.\n          headers:\n            SessionId:\n              description: If `next` is `login`, this is the newly created user session.\n              schema:\n                type: string\n                format: base64url\n              required: false\n            RegisterSessionId:\n              description: |\n                If `next` is `continue` and no `RegisterSessionId` was provided, this is the new registration session\n              schema:\n                type: string\n                format: base64url\n              required: false\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/ApiResponse'\n                  - type: object\n                    properties:\n                      data:\n                        $ref: '#/components/schemas/RegistrationContinuation'\n              examples:\n                Discord:\n                  summary: Discord only, continue\n                  description: |\n                    This value can be found upon a successful connection to Discord.\n\n                    EpiLink does not know about the account, so `next` is set to `continue`.\n                  value:\n                    success: true\n                    message: null\n                    message_i18n: null\n                    message_i18n_data: { }\n                    data:\n                      next: continue\n                      attachment:\n                        discordUsername: 'me#1234'\n                        discordAvatarUrl: 'https://...'\n                        email: null\n                DiscordLoggedIn:\n                  summary: Logged in\n                  description: |\n                    Happens upon a successful connection to Discord, but EpiLink already know this account\n                    (`next` = `login`)\n\n                    The registration session is deleted and a new regular user session is opened with the `SessionId`\n                    resonse header.\n                  value:\n                    success: true\n                    message: Logged in\n                    message_i18n: \"reg.lgi\"\n                    message_i18n_data: { }\n                    data:\n                      next: login\n                      attachment: null\n                IdProvider:\n                  summary: Identity provider only, continue\n                  description: |\n                    This value can be found after logging into the identity provider account.\n                  value:\n                    success: true\n                    message: null\n                    message_i18n: null\n                    message_i18n_data: { }\n                    data:\n                      next: continue\n                      attachment:\n                        discordUsername: null\n                        discordAvatarUrl: null\n                        email: 'this.is.my.email@example.edu'\n                BothOk:\n                  summary: Identity provider and Discord both OK\n                  description: |\n                    At this point, the server knows about both the Identity Provider identity and Discord identity.\n                    The registration procedure can be concluded.\n                  value:\n                    success: true\n                    message: null\n                    message_i18n: null\n                    message_i18n_data: { }\n                    data:\n                      next: continue\n                      attachment:\n                        discordUsername: 'me#1234'\n                        discordAvatarUrl: 'https://...'\n                        email: 'this.is.my.email@example.edu'\n\n  /admin/idrequest:\n    post:\n      tags: [ admin ]\n      summary: Request the identity of a user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IdRequest'\n            example:\n              target: \"1234567890912934\"\n              reason: \"Checking your identity for our hand-made procedure 17-B.\"\n      security:\n        - SessionId: [ ]\n      responses:\n        '200':\n          description: OK -- Here's the identity.\n          content:\n            application/json:\n              # TODO no, this returns an ApiResponse, not the object directly\n              # TODO this mistake is also in other places RIP\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/ApiResponse'\n                  - type: object\n                    properties:\n                      data:\n                        $ref: '#/components/schemas/IdRequestResult'\n              example:\n                message: null\n                message_i18n: null\n                message_i18n_data: [ ]\n                data:\n                  target: \"1234567890912934\"\n                  identity: \"someone@example.com\"\n        '401':\n          $ref: '#/components/responses/AdminOrUserUnauthorized'\n        '404':\n          $ref: '#/components/responses/AdminEndpointsDisabled'\n\n  /admin/user/{userId}:\n    parameters:\n      - name: userId\n        in: path\n        required: true\n        schema:\n          type: string\n          format: snowflake\n    get:\n      # TODO document behavior with unknown user\n      tags: [ admin ]\n      security:\n        - SessionId: [ ]\n      summary: Retrieve information about a user\n      description: |\n        Get information about a registered user. The returned data is not the same as what's returned by the\n        `GET /user` operation, which relies on some session-based info.\n      responses:\n        '200':\n          description: OK -- here is the information for this user.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RegisteredUserInformation\"\n              example:\n                discordId: '1234568819283754'\n                idpIdHash: 'haeyhEx34=='\n                created: '2014-09-02T08:05:23.653Z' # not a realistic date but i was too lazy to find a real one\n                identifiable: true\n        '400':\n          $ref: '#/components/responses/TargetUserDoesNotExist'\n        '401':\n          $ref: '#/components/responses/AdminOrUserUnauthorized'\n        '404':\n          $ref: '#/components/responses/AdminEndpointsDisabled'\n\n    delete:\n      tags: [ admin ]\n      security:\n        - SessionId: [ ]\n      summary: Delete a user account\n      description: |\n        Deletes the given user's account from this instance. This does not ban the user -- they will be\n        able to recreate one.\n\n        Upon success, triggers a role update for the user.\n      responses:\n        '200':\n          description: OK -- User was deleted\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/ApiResponse'\n                  - $ref: '#/components/schemas/NullDataContainer'\n              example:\n                success: true\n                message: \"User deleted\"\n                message_i18n: \"adm.ud\"\n                message_i18n_data: { }\n                data: null\n        '400':\n          $ref: '#/components/responses/TargetUserDoesNotExist'\n        '401':\n          $ref: '#/components/responses/AdminOrUserUnauthorized'\n        '404':\n          $ref: '#/components/responses/AdminEndpointsDisabled'\n\n  /admin/ban/{idpIdHash}:\n    parameters:\n      - name: idpIdHash\n        description: An identity hash\n        in: path\n        required: true\n        schema:\n          type: string\n          format: base64url\n    get:\n      tags: [ admin ]\n      summary: Get the bans of a user\n      security:\n        - SessionId: [ ]\n      responses:\n        '200':\n          description: OK -- Here are the bans for this user\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/ApiResponse'\n                  - type: object\n                    properties:\n                      data:\n                        $ref: '#/components/schemas/UserBans'\n        '400':\n          $ref: '#/components/responses/TargetUserDoesNotExist'\n        '401':\n          $ref: '#/components/responses/AdminOrUserUnauthorized'\n        '404':\n          $ref: '#/components/responses/AdminEndpointsDisabled'\n\n    post:\n      tags: [ admin ]\n      summary: Create a ban against a user\n      description: |\n        Creates a ban against a user. If said ban succeeds, refreshes the user's roles. The user may be notified\n        depending on the instance settings.\n\n        Bans are made against an identity hash.\n      security:\n        - SessionId: [ ]\n      requestBody:\n        $ref: '#/components/schemas/BanRequest'\n      responses:\n        '200':\n          description: OK -- Ban has been created\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/ApiResponse'\n                  - type: object\n                    properties:\n                      data:\n                        $ref: '#/components/schemas/BanInfo'\n        '400':\n          $ref: '#/components/responses/TargetUserDoesNotExist'\n        '401':\n          $ref: '#/components/responses/AdminOrUserUnauthorized'\n        '404':\n          $ref: '#/components/responses/AdminEndpointsDisabled'\n\n  /admin/ban/{idpIdHash}/{banId}:\n    parameters:\n      - name: idpIdHash\n        description: An identity hash\n        in: path\n        required: true\n        schema:\n          type: string\n          format: base64url\n      - name: banId\n        description: The ID of the ban\n        in: path\n        required: true\n        schema:\n          type: string\n          format: base64url\n    get:\n      tags: [admin]\n      summary: Get a single ban of a specific user\n      security:\n        - SessionId: [ ]\n      responses:\n        '200':\n          description: OK -- Here is the ban\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/ApiResponse'\n                  - type: object\n                    properties:\n                      data:\n                        $ref: '#/components/schemas/BanInfo'\n        '400':\n          $ref: '#/components/responses/TargetUserDoesNotExist'\n        '401':\n          $ref: '#/components/responses/AdminOrUserUnauthorized'\n        '404':\n          $ref: '#/components/responses/AdminEndpointsDisabled'\n\n  /admin/ban/{idpIdHash}/{banId}/revoke:\n    parameters:\n      - name: idpIdHash\n        description: An identity hash\n        in: path\n        required: true\n        schema:\n          type: string\n          format: base64url\n      - name: banId\n        description: The ID of the ban\n        in: path\n        required: true\n        schema:\n          type: string\n          format: base64url\n    post:\n      tags: [admin]\n      summary: Revokes a ban\n      security:\n        - SessionId: [ ]\n      responses:\n        '200':\n          description: OK -- Ban revoked. The user's roles are re-evaluated if this ban was currently in effect.\n        '400':\n          $ref: '#/components/responses/TargetUserDoesNotExist'\n        '401':\n          $ref: '#/components/responses/AdminOrUserUnauthorized'\n        '404':\n          $ref: '#/components/responses/AdminEndpointsDisabled'\n\n  /admin/search/{criteria}/{term}:\n    parameters:\n      - name: criteria\n        description: The criteria to choose from\n        in: path\n        required: true\n        schema:\n          type: string\n          enum: [ hash16 ]\n      - name: term\n        description: The words the search will be done on\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      tags: [admin]\n      summary: Search users\n      security:\n        - SessionId: [ ]\n      description: |\n        Looks for users based on the given criteria and term. The criteria can be:\n\n        - hash16: Search users by a hex representation of their identity hash. The search term can be a substring of the\n          actual id.\n      responses:\n        '200':\n          description: OK -- Results below\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResult'\n        '401':\n          $ref: '#/components/responses/AdminOrUserUnauthorized'\n        '404':\n          $ref: '#/components/responses/AdminEndpointsDisabled'\n\n  /admin/gdprreport/{targetId}:\n    parameters:\n      - name: idpIdHash\n        description: An identity hash\n        in: path\n        required: true\n        schema:\n          type: string\n          format: base64url\n    post:\n      tags: [admin]\n      summary: Generate a GDPR report about the target\n      security:\n        - SessionId: [ ]\n      description: |\n        Returns a GDPR report for the given person, directly as a Markdown document. This generates an identity access notification for manual access.\n      responses:\n        '200':\n          description: OK -- Results below\n          content:\n            text/markdown:\n              example: |\n                Here is the GDPR report.\n        '401':\n          $ref: '#/components/responses/AdminOrUserUnauthorized'\n        '404':\n          $ref: '#/components/responses/AdminEndpointsDisabled'\ncomponents:\n  schemas:\n    # ---------------------- general schemas ----------------------\n    ApiResponse:\n      type: object\n      description: Almost all API endpoints return something of this form. Endpoints will inject their resulting data in an additional \"data\" property\n      properties:\n        success:\n          type: boolean\n        message:\n          type: string\n        message_i18n:\n          type: string\n        message_i18n_data:\n          type: object\n          additionalProperties:\n            type: string\n    NullDataContainer:\n      type: object\n      properties:\n        data:\n          type: object\n          nullable: true\n    ErrorData:\n      type: object\n      description: The \"data\" field for errors (when success is false in an apiresponse)\n      properties:\n        code:\n          type: integer\n        description:\n          type: string\n    ApiErrorResponse:\n      allOf:\n        - $ref: '#/components/schemas/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/ErrorData'\n    ApiEmptyResponse:\n      allOf:\n        - $ref: '#/components/schemas/ApiResponse'\n        - type: object\n          properties:\n            data:\n              type: object\n              nullable: true\n          example:\n            success: true\n            message: null\n            message_i18n: null\n            message_i18n_data: { }\n            data: null\n\n    # ---------------------- /meta schemas ----------------------\n    InstanceInformation:\n      type: object\n      properties:\n        title:\n          type: string\n          description: The name of the instance\n        logo:\n          type: string\n          format: url\n          description: A URL to the logo of the instance, either absolute (`https://...`) or with a leading /, indicating that it is under the back-end's hostname.\n          nullable: true\n        background:\n          type: string\n          format: url\n          description: A URL to the background image for this instance, same format as for the logo.\n          nullable: true\n        authorizeStub_idProvider:\n          type: string\n          format: url\n          description: |\n            The value for both `authorizeStub` properties are OAuth2 authorization links (the ones you use for retrieving an authorization code) that are only missing a redirect URI. Append your own URI there. Don't forget to encode it as a URI component to properly escape special characters! (i.e. append `\u0026redirect_uri=https://myexample.com/...` to the `authorizeStub` field).\n\n            This property is for the identity provider (e.g. Microsoft, Google, ...)\n        authorizeStub_discord:\n          type: string\n          format: url\n          description: |\n            Same use as `authorizeStub_idProvider`, but this one is for Discord.\n        providerName:\n          type: string\n          description: |\n            The display name for the identity provider. Human-friendly.\n        providerIcon:\n          type: string\n          format: url\n          description: |\n            The icon for the identity provider, same format as for `logo`.\n          nullable: true\n        idPrompt:\n          type: string\n          format: html\n          description: |\n            The text that should be shown below the \"I want EpiLink to rememver my identity\" checkbox.\n            This is inline HTML that is meant to be embedded within a web page.\n        footerUrls:\n          type: array\n          items:\n            $ref: '#/components/schemas/FooterUrl'\n          description: |\n            Footer URL's that should be displayed on the front-end.\n        contacts:\n          type: array\n          items:\n            $ref: '#/components/schemas/ContactInformation'\n          description: |\n            Contact information for the maintainers of the EpiLink instance\n        showFullAbout:\n          type: boolean\n          description: |\n            True if both the \"about this instance\" and \"about EpiLink\" pages should be available, false if \"about this instance\" should be the only one.\n    FooterUrl:\n      type: object\n      properties:\n        name:\n          type: string\n        url:\n          type: string\n    ContactInformation:\n      type: object\n      properties:\n        name:\n          type: string\n        email:\n          type: string\n    # ---------------------- /user schemas ----------------------\n    UserInformation:\n      description: Information about the currently logged in user\n      type: object\n      properties:\n        discordId:\n          type: string\n          description: The ID of the user. This is stored in the instance's database.\n        username:\n          type: string\n          description: The user's Discord username (Hello#1234). This is stored as part of the session and is not stored in the instance's database.\n        avatarUrl:\n          type: string\n          format: url\n          nullable: true\n          description: The possibly null URL for the Discord avatar of the user\n        identifiable:\n          type: boolean\n          description: If true, the user has their identity recorded in the database, false otherwise.\n        privileged:\n          type: boolean\n          description: |\n            True if the user is privileged (i.e. is recorded as an administrators in the instance configuration).\n\n            This does not necessarily indicate that the user can actually perform administration actions, as additional\n            checks are performed when an admin tries to user their privileges. This should only be used for displaying\n            some sort of \"admin\" badge on the user.\n    IdAccessLogs:\n      description: List of idenity accesses made against a user\n      type: object\n      properties:\n        manualAuthorsDisclosed:\n          type: boolean\n          description: |\n            This value is only intended to be used for displaying a message to tell the user that not seeing the name of\n            who made the identity access is normal (true if so, false otherwise). This does not actually determine\n            whether the author of all the listed accesses is actually available or not.\n        accesses:\n          type: array\n          items:\n            $ref: '#/components/schemas/IdAccess'\n          description: Identity accesses made against this account.\n    IdAccess:\n      description: Details for a single identity access\n      type: object\n      properties:\n        automated:\n          type: boolean\n          description: True if the access was made by a bot, false if it was made manually by a administrator\n        author:\n          type: string\n          nullable: true\n          description: |\n            The name of the author\n\n            No particular format is guaranteed, but this name should be enough for a human to distinguish who made the\n            request. Null if the author is not available to the user -- while the author is always logged on the\n            back-end, a policy can be set to prevent users from accessing the identity of the requester in specific\n            cases.\n        reason:\n          type: string\n          description: The human-readable reason for the access. Again, no particular format is guaranteed.\n        timestamp:\n          type: string\n          format: 'date-time'\n          description: An ISO-8601 timestamp of when the request happened, always in UTC (`z` or `Z` at the end)\n    # ---------------------- /register schemas ----------------------\n    RegistrationAuthCode:\n      description: Used for sending an OAuth2 authentication code\n      type: object\n      properties:\n        code:\n          type: string\n          description: The OAuth2 authentication code itself\n        redirectUri:\n          type: string\n          format: url\n          description: |\n            The exact `redirect_uri` that was used for the original authentication request that obtained the code. This is\n            required for security reasons, the back-end does not redirect anything to this URI.\n      example:\n        code: \"123code456\"\n        redirectUri: \"https://some.website.com/oauth2/somethingsomething\"\n\n    RegistrationInformation:\n      description: |\n        This object provides information on the current registration process' status and information. It can be obtained by\n        calling  `GET /register/info` and can be found in the responses of most registration endpoints.\n      type: object\n      properties:\n        discordUsername:\n          type: string\n          nullable: true\n          description: |\n            The discord username associated with the current registration process, or null if no Discord account is recorded in\n            the current regsitration process.\n        discordAvatarUrl:\n          type: string\n          format: url\n          nullable: true\n          description: |\n            The URL to the avatar of the Discord user. This may be null if the user does not have an avatar, or if no Discord\n            account is recorded in the current registration process.\n        email:\n          type: string\n          format: url\n          nullable: true\n          description: |\n            The user's email address, as provided by the OpenID Connect ID Token, or null if the ID Provider account has not\n            been recorded in the current registration process.\n    AdditionalRegistrationOptions:\n      description: |\n        These options are provided to finalize the registration process.\n      type: object\n      properties:\n        keepIdentity:\n          type: boolean\n          description: |\n            True if the identity of the user should be kept once their account has been created, false otherwise.\n    RegistrationContinuation:\n      description: |\n        Gives information on what to do next in the registration process.\n        The attachment field is `null` if `next` is `login` or a `RegistrationInformation` object otherwise.\n      type: object\n      properties:\n        next:\n          type: string\n          enum:\n            - continue\n            - login\n          description: |\n            \"continue\" if the registratino process should continue, \"login\" if the user has been logged in.\n        attachment:\n          allOf:\n            - nullable: true\n            - $ref: '#/components/schemas/RegistrationInformation'\n\n    # ---------------------- /admin schemas ----------------------\n    IdRequest:\n      description: |\n        A request for an identity\n      type: object\n      properties:\n        target:\n          type: string\n          format: snowflake\n          description: The Discord ID of the user whose identity should be retrieved\n        reason:\n          type: string\n          description: The reason for the identity access.\n    IdRequestResult:\n      description: The result for an identity request\n      type: object\n      properties:\n        target:\n          type: string\n          format: snowflake\n          description: The Discord ID of the user whose identity should be retrieved\n        identity:\n          type: string\n          format: email\n          description: The identity (i.e. identity provider email address) of the user.\n    RegisteredUserInformation:\n      description: Information for a registered user\n      type: object\n      properties:\n        discordId:\n          type: string\n          format: snowflake\n          description: The Discord ID of the user\n        idpIdHash:\n          type: string\n          format: base64url\n          description: |\n            The URL-safe Base64 encodeded hash of the user identity from the identity provider.\n\n            Note that this does not correspond to a hash of the user's email.\n        created:\n          type: string\n          format: date-time\n          description: |\n            The time at which the user's account was created on this EpiLink instance.\n        identifiable:\n          type: boolean\n          description: |\n            True if the user has their identity recorded in the database.\n    UserBans:\n      description: Bans against a specific user\n      type: object\n      properties:\n        banned:\n          type: boolean\n          description: True if there are any bans considered active against this user, false otherwise.\n        bans:\n          type: array\n          items:\n            $ref: '#/components/schemas/BanInfo'\n          description: Possibly empty array of all the bans against a user.\n    BanInfo:\n      description: Information on a specific ban\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The internal ID of this ban. Used in several API paths.\n        revoked:\n          type: boolean\n          description: |\n            True if the ban was manually revoked, false otherwise\n        author:\n          type: string\n          description: |\n            The author of the ban in a human-readable format. This may not always be disclosed to a user.\n        reason:\n          type: string\n          description: |\n            The (human-readable) reason for the ban\n        issuedAt:\n          type: string\n          format: date-time\n          description: |\n            The timestamp of when the ban was issued.\n        expiresOn:\n          type: string\n          format: date-time\n          nullable: true\n          description: |\n            The timestamp of when the ban will expire, or null if the ban does not expire.\n    BanRequest:\n      description: A request for banning someone\n      type: object\n      properties:\n        reason:\n          type: string\n          description: The reason for the ban\n        expiresOn:\n          type: string\n          format: date-time\n          nullable: true\n          description: |\n            The timestamp at which the ban should expire, or null if the ban should never expire.\n    SearchResult:\n      description: The results of a search.\n      type: object\n      properties:\n        result:\n          type: array\n          items:\n            type: string\n            format: snowflake\n          description: |\n            A list of all matching user Discord ID's\n\n  examples:\n    UserUnauthorized:\n      summary: \"300 - Authentication required\"\n      description: Missing or invalid `SessionId`\n      value:\n        success: false\n        message: \"You need authentication to be able to access this resource\"\n        message_i18n: \"err.300\"\n        message_i18n_data: { }\n        data:\n          code: 300\n          description: \"You need authentication to be able ot access this resource\"\n    AdminUnauthorized:\n      summary: \"301 - Not an admin\"\n      description: The logged in user is not an administrator\n      value:\n        success: false\n        message: \"You do not have permission to do that.\"\n        message_i18n: \"err.301\"\n        message_i18n_data: { }\n        data:\n          code: 301\n          description: \"You do not have permission to do that\"\n    AdminNotIdentifiable:\n      summary: \"301 - Admin not identifiable\"\n      description: The logged in user is an administrator but does not have their identity recorded.\n      value:\n        success: false\n        message: \"You need to have your identity recorded to perform administrative tasks\"\n        message_i18n: \"sc.ani\"\n        message_i18n_data: { }\n        data:\n          code: 301\n          description: \"You do not have permission to do that\"\n  responses:\n    UserUnauthorized:\n      description: Missing or invalid `SessionId`\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiErrorResponse'\n          examples:\n            UserUnauthorized:\n              $ref: '#/components/examples/UserUnauthorized'\n    AdminOrUserUnauthorized:\n      description: |\n        Authentication failure.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiErrorResponse'\n          examples:\n            UserUnauthorized:\n              $ref: '#/components/examples/UserUnauthorized'\n            AdminUnauthorized:\n              $ref: '#/components/examples/AdminUnauthorized'\n            AdminNotIdentifiable:\n              $ref: '#/components/examples/AdminNotIdentifiable'\n    AdminEndpointsDisabled:\n      description: |\n        Admin endpoints are disabled in the instance's config.\n    TargetUserDoesNotExist:\n      description: |\n        The given target user does not exist.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ApiErrorResponse'\n          example:\n            success: false\n            message: \"Target user does not exist.\"\n            message_i18n: \"err.402\"\n            message_i18n_data: { }\n            data:\n              code: 402\n              description: \"Target user does not exist.\"\n  securitySchemes:\n    SessionId:\n      type: apiKey\n      in: header\n      name: SessionId\n\n  parameters:\n    RegisterSessionId:\n      name: RegisterSessionId\n      in: header\n      schema:\n        type: string\n        format: base64url\n      required: false\n    RegisterSessionIdRequired:\n      name: RegisterSessionId\n      in: header\n      schema:\n        type: string\n        format: base64url\n      required: true\n"
		}
	},
	"Error": "parse: paths: /admin/ban/{idpIdHash}: post: : requestBody: resolve \"#/components/schemas/BanRequest\" reference: invalid requestBody reference: \"#/components/schemas/BanRequest\""
}