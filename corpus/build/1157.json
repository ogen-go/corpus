{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "APIs/shutterstock.com/1.1.5/openapi.yaml",
			"content": "openapi: 3.0.0\nservers:\n  - url: https://api.shutterstock.com\ninfo:\n  contact:\n    x-twitter: Shutterstock\n  description: The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.\n  title: Shutterstock API Explorer\n  version: 1.1.5\n  x-apisguru-categories:\n    - media\n  x-logo:\n    url: https://twitter.com/Shutterstock/profile_image?size=original\n  x-origin:\n    - format: openapi\n      url: https://api-explorer.shutterstock.com/openapi.json\n      version: \"3.0\"\n  x-providerName: shutterstock.com\npaths:\n  /v2/ai/audio/descriptors:\n    get:\n      description: This endpoint lists the descriptors that you can use in the audio regions in an audio render.\n      operationId: listCustomDescriptors\n      parameters:\n        - description: Show descriptors with an average render speed that is greater than or equal to the specified value\n          example: 5\n          in: query\n          name: render_speed_over\n          schema:\n            type: number\n        - description: Show descriptors that contain the specified band (case-sentsitive)\n          example: Corporate Folk Bonfire Band 1\n          in: query\n          name: band_id\n          schema:\n            type: string\n        - description: Show descriptors with the specified band name (case-sensitive)\n          example: Documentary Underscore Heartfelt Band 1\n          in: query\n          name: band_name\n          schema:\n            type: string\n        - description: Page number\n          example: \"1\"\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          example: \"1\"\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 100\n            minimum: 1\n            type: integer\n        - description: Show descriptors with the specified IDs (case-sensitive)\n          example: documentary_underscore_heartfelt\n          in: query\n          name: id\n          schema:\n            items:\n              type: string\n            maxItems: 20\n            type: array\n        - description: Show descriptors with the specified instrument name (case-sensitive)\n          example: Precision Bass - Full\n          in: query\n          name: instrument_name\n          schema:\n            type: string\n        - description: Show descriptors with the specified instrument ID (case-sensitive)\n          example: direct_fluorescent_synth_lead\n          in: query\n          name: instrument_id\n          schema:\n            type: string\n        - description: Show descriptors whose tempo range includes the specified tempo in beats per minute\n          example: 90\n          in: query\n          name: tempo\n          schema:\n            type: number\n        - description: Show descriptors with a tempo that is less than or equal to the specified number\n          example: 120\n          in: query\n          name: tempo_to\n          schema:\n            type: number\n        - description: Show descriptors that have a tempo range that includes the specified tempo in beats per minute\n          example: 60\n          in: query\n          name: tempo_from\n          schema:\n            type: number\n        - description: Show descriptors with the specified name (case-sensitive)\n          example: Corporate Pop Inspirational High Energy\n          in: query\n          name: name\n          schema:\n            type: string\n        - description: Show descriptors with the specified tag, such as Cinematic or Roomy (case-sensitive)\n          example: Cinematic\n          in: query\n          name: tag\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - average_render_speed: 5.176429988784402\n                        bands:\n                          - id: documentary_underscore_heartfelt_band_1\n                            name: Documentary Underscore Heartfelt Band 1\n                          - id: documentary_underscore_heartfelt_band_3\n                            name: Documentary Underscore Heartfelt Band 3\n                        id: documentary_underscore_heartfelt\n                        instruments:\n                          - id: documentary_underscore_heartfelt_high_aux_perc\n                            name: Documentary Underscore Heartfelt High Aux Perc\n                        max_tempo: 80\n                        min_tempo: 65\n                        name: Documentary Underscore Heartfelt\n                        previews:\n                          - content_type: audio/mp3\n                            url: https://public-cdn.ampermusic.com/bands/previews/documentary_underscore_heartfelt_band_3_v1.mp3\n                        tags:\n                          - Neutral\n                    page: 1\n                    per_page: 1\n              schema:\n                $ref: \"#/components/schemas/DescriptorsListResult\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List computer audio descriptors\n      tags:\n        - custom_music\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET https://api.shutterstock.com/v2/ai/audio/descriptors \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const customMusicApi = new sstk.CustomMusicApi();\n\n            const queryParams = {\n              \"tag\": \"Cinematic\"\n            };\n\n            customMusicApi.listDescriptors(queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/ai/audio/descriptors\",\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock ai-audio list-custom-descriptors --tag Cinematic\n  /v2/ai/audio/instruments:\n    get:\n      description: This endpoint lists the instruments that you can include in computer audio. If you specify more than one search parameter, the API uses an AND condition.\n      operationId: listCustomInstruments\n      parameters:\n        - description: Show instruments with the specified ID\n          example: wood_blocks\n          in: query\n          name: id\n          schema:\n            items:\n              type: string\n            type: array\n        - description: Number of results per page\n          example: 1\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 100\n            minimum: 1\n            type: integer\n        - description: Page number\n          example: \"1\"\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Show instruments with the specified name (case-sensitive)\n          example: Precision Bass - Full\n          in: query\n          name: name\n          schema:\n            type: string\n        - description: Show instruments with the specified tag, such as Percussion or Strings (case-sensitive)\n          example: Percussion\n          in: query\n          name: tag\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - id: roomy_kit\n                        name: Roomy Kit\n                        previews:\n                          - content_type: audio/mp3\n                            url: https://public-cdn.ampermusic.com/instruments/previews/roomy_kit_v1.mp3\n                        tags:\n                          - Percussion\n                          - Aux Percs\n                    page: 1\n                    per_page: 1\n              schema:\n                $ref: \"#/components/schemas/InstrumentsListResult\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List computer audio instruments\n      tags:\n        - custom_music\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET https://api.shutterstock.com/v2/ai/audio/instruments \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const customMusicApi = new sstk.CustomMusicApi();\n\n            const queryParams = {\n              \"tag\": \"Percussion\"\n            };\n\n            customMusicApi.listCustomInstruments(queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/ai/audio/instruments\",\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock ai-audio list-custom-instruments --tag Percussion\n  /v2/ai/audio/renders:\n    get:\n      description: This endpoint shows the status of one or more audio renders, including download links for completed audio.\n      operationId: fetchRenders\n      parameters:\n        - description: One or more render IDs\n          example:\n            - L2w7h9VNFlkzpllSUunSYayenKjN\n            - BeHx3UNXzMBB4dGsC9aa6VxnpcWl\n          in: query\n          name: id\n          required: true\n          schema:\n            items:\n              type: string\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    audio_renders:\n                      - created_date: 2021-01-26T12:10:22-05:00\n                        files: []\n                        id: njlpYoWWmb1AYs2nZyw7EcNWbAkZ\n                        preset: MASTER_MP3\n                        progress_percent: 0\n                        status: WAITING_COMPOSE\n                        timeline: {}\n                        updated_date: 2021-01-26T13:10:22-05:00\n                      - files:\n                          - bits_sample: 16\n                            content_type: audio/mp3\n                            download_url: https://s3-us-west-2.amazonaws.com/amper-ephemeral/renders/2021/02/10/amper-api-azQhRPBD9nh6vL8TM767yfGrygv5/0.mp3\n                            filename: my_custom_audio.mp3\n                            frequency_hz: 44100\n                            kbits_second: 192\n                            size_bytes: 3601830\n                            tracks:\n                              - master\n                        id: azQhRPBD9nh6vL8TM767yfGrygv5\n                        preset: MASTER_MP3\n                        progress_percent: 100\n                        status: CREATED\n              schema:\n                $ref: \"#/components/schemas/AudioRendersListResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get details about audio renders\n      tags:\n        - custom_music\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET https://api.shutterstock.com/v2/ai/audio/renders \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -G \\\n            --data-urlencode \"id=L2w7h9VNFlkzpllSUunSYayenKjN\" \\\n            --data-urlencode \"id=BeHx3UNXzMBB4dGsC9aa6VxnpcWl\" \n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const customMusicApi = new sstk.CustomMusicApi();\n\n            const renders = [\n              \"L2w7h9VNFlkzpllSUunSYayenKjN\",\n              \"BeHx3UNXzMBB4dGsC9aa6VxnpcWl\"\n            ];\n\n            customMusicApi.fetchRenders(renders)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/ai/audio/renders?id=L2w7h9VNFlkzpllSUunSYayenKjN\u0026id=BeHx3UNXzMBB4dGsC9aa6VxnpcWl\",\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock ai-audio fetch-renders --id L2w7h9VNFlkzpllSUunSYayenKjN --id BeHx3UNXzMBB4dGsC9aa6VxnpcWl\n    post:\n      description: This endpoint creates rendered audio from timeline data. It returns a render ID that you can use to download the finished audio when it is ready. The render ID is valid for up to 48 hours.\n      operationId: createAudioRenders\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateAudioRendersRequest\"\n        description: Parameters for the audio, including the timeline and information about the output file\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    audio_renders:\n                      - created_date: 2021-01-26T12:10:22-05:00\n                        files: []\n                        id: njlpYoWWmb1AYs2nZyw7EcNWbAkZ\n                        preset: MASTER_MP3\n                        progress_percent: 0\n                        status: WAITING_COMPOSE\n                        timeline: {}\n                        updated_date: 2021-01-26T13:10:22-05:00\n              schema:\n                $ref: \"#/components/schemas/AudioRendersListResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Create rendered audio\n      tags:\n        - custom_music\n      x-code-samples:\n        - lang: shell\n          source: |\n            DATA='{\n              \"audio_renders\": [\n                {\n                  \"preset\": \"MASTER_MP3\",\n                  \"filename\": \"My_audio_ai.mp3\",\n                  \"timeline\": {\n                    \"spans\": [\n                      {\n                        \"id\": 111,\n                        \"span_type\": \"metered\",\n                        \"time\": 0,\n                        \"tempo\": 80,\n                        \"regions\": [\n                          {\n                            \"id\": 222,\n                            \"descriptor\": \"documentary_underscore_heartfelt\",\n                            \"beat\": 0,\n                            \"end_type\": {\n                              \"beat\": 17,\n                              \"event\": \"ending\",\n                              \"type\": \"ringout\"\n                            },\n                            \"region\": \"music\"\n                          }\n                        ],\n                        \"instrument_groups\": [\n                          {\n                            \"instrument_group\": \"full_aw_nylon_acoustic_lead_guitar\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"nice_scoring_viola_ensemble\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"warm_devonshire_upright_acoustic_piano\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"nice_scoring_first_violin_ensemble\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"nice_scoring_second_violin_ensemble\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"warm_kawai_grand_acoustic_piano_dreamy\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"sweet_kawai_grand_acoustic_piano\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"nice_scoring_cello_ensemble\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          }\n                        ]\n                      },\n                      {\n                        \"span_type\": \"unmetered\",\n                        \"time\": 15\n                      }\n                    ]\n                  }\n                }\n              ]\n            }'\n\n            curl -X POST \"https://api.shutterstock.com/v2/ai/audio/renders\" \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const customMusicApi = new sstk.CustomMusicApi();\n\n            const body = {\n              \"audio_renders\": [\n                {\n                  \"preset\": \"MASTER_MP3\",\n                  \"filename\": \"My_audio_ai.mp3\",\n                  \"timeline\": {\n                    \"spans\": [\n                      {\n                        \"id\": 111,\n                        \"span_type\": \"metered\",\n                        \"time\": 0,\n                        \"tempo\": 80,\n                        \"regions\": [\n                          {\n                            \"id\": 222,\n                            \"descriptor\": \"documentary_underscore_heartfelt\",\n                            \"beat\": 0,\n                            \"end_type\": {\n                              \"beat\": 17,\n                              \"event\": \"ending\",\n                              \"type\": \"ringout\"\n                            },\n                            \"region\": \"music\"\n                          }\n                        ],\n                        \"instrument_groups\": [\n                          {\n                            \"instrument_group\": \"full_aw_nylon_acoustic_lead_guitar\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"nice_scoring_viola_ensemble\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"warm_devonshire_upright_acoustic_piano\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"nice_scoring_first_violin_ensemble\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"nice_scoring_second_violin_ensemble\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"warm_kawai_grand_acoustic_piano_dreamy\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"sweet_kawai_grand_acoustic_piano\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"nice_scoring_cello_ensemble\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          }\n                        ]\n                      },\n                      {\n                        \"span_type\": \"unmetered\",\n                        \"time\": 15\n                      }\n                    ]\n                  }\n                }\n              ]\n            };\n\n            customMusicApi.createAudioRenders(body)\n              .then(async (data) =\u003e {\n                const { id } = data.audio_renders[0];\n                console.log(id);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $body = [\n              \"audio_renders\" =\u003e [\n                [\n                  \"preset\" =\u003e \"MASTER_MP3\",\n                  \"filename\" =\u003e \"My_audio_ai.mp3\",\n                  \"timeline\" =\u003e [\n                    \"spans\" =\u003e [\n                      [\n                        \"id\" =\u003e 111,\n                        \"span_type\" =\u003e \"metered\",\n                        \"time\" =\u003e 0,\n                        \"tempo\" =\u003e 80,\n                        \"regions\" =\u003e [\n                          [\n                            \"id\" =\u003e 222,\n                            \"descriptor\" =\u003e \"documentary_underscore_heartfelt\",\n                            \"beat\" =\u003e 0,\n                            \"end_type\" =\u003e [\n                              \"beat\" =\u003e 17,\n                              \"event\" =\u003e \"ending\",\n                              \"type\" =\u003e \"ringout\"\n                            ],\n                            \"region\" =\u003e \"music\"\n                          ]\n                        ],\n                        \"instrument_groups\" =\u003e [\n                          [\n                            \"instrument_group\" =\u003e \"full_aw_nylon_acoustic_lead_guitar\",\n                            \"statuses\" =\u003e [\n                              [\n                                \"beat\" =\u003e 0,\n                                \"status\" =\u003e \"active\"\n                              ]\n                            ]\n                          ],\n                          [\n                            \"instrument_group\" =\u003e \"nice_scoring_viola_ensemble\",\n                            \"statuses\" =\u003e [\n                              [\n                                \"beat\" =\u003e 0,\n                                \"status\" =\u003e \"active\"\n                              ]\n                            ]\n                          ],\n                          [\n                            \"instrument_group\" =\u003e \"warm_devonshire_upright_acoustic_piano\",\n                            \"statuses\" =\u003e [\n                              [\n                                \"beat\" =\u003e 0,\n                                \"status\" =\u003e \"active\"\n                              ]\n                            ]\n                          ],\n                          [\n                            \"instrument_group\" =\u003e \"nice_scoring_first_violin_ensemble\",\n                            \"statuses\" =\u003e [\n                              [\n                                \"beat\" =\u003e 0,\n                                \"status\" =\u003e \"active\"\n                              ]\n                            ]\n                          ],\n                          [\n                            \"instrument_group\" =\u003e \"nice_scoring_second_violin_ensemble\",\n                            \"statuses\" =\u003e [\n                              [\n                                \"beat\" =\u003e 0,\n                                \"status\" =\u003e \"active\"\n                              ]\n                            ]\n                          ],\n                          [\n                            \"instrument_group\" =\u003e \"warm_kawai_grand_acoustic_piano_dreamy\",\n                            \"statuses\" =\u003e [\n                              [\n                                \"beat\" =\u003e 0,\n                                \"status\" =\u003e \"active\"\n                              ]\n                            ]\n                          ],\n                          [\n                            \"instrument_group\" =\u003e \"sweet_kawai_grand_acoustic_piano\",\n                            \"statuses\" =\u003e [\n                              [\n                                \"beat\" =\u003e 0,\n                                \"status\" =\u003e \"active\"\n                              ]\n                            ]\n                          ],\n                          [\n                            \"instrument_group\" =\u003e \"nice_scoring_cello_ensemble\",\n                            \"statuses\" =\u003e [\n                              [\n                                \"beat\" =\u003e 0,\n                                \"status\" =\u003e \"active\"\n                              ]\n                            ]\n                          ]\n                        ]\n                      ],\n                      [\n                        \"span_type\" =\u003e \"unmetered\",\n                        \"time\" =\u003e 15\n                      ]\n                    ]\n                  ]\n                ]\n              ]\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/ai/audio/renders\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"audio_renders\": [\n                {\n                  \"preset\": \"MASTER_MP3\",\n                  \"filename\": \"My_audio_ai.mp3\",\n                  \"timeline\": {\n                    \"spans\": [\n                      {\n                        \"id\": 111,\n                        \"span_type\": \"metered\",\n                        \"time\": 0,\n                        \"tempo\": 80,\n                        \"regions\": [\n                          {\n                            \"id\": 222,\n                            \"descriptor\": \"documentary_underscore_heartfelt\",\n                            \"beat\": 0,\n                            \"end_type\": {\n                              \"beat\": 17,\n                              \"event\": \"ending\",\n                              \"type\": \"ringout\"\n                            },\n                            \"region\": \"music\"\n                          }\n                        ],\n                        \"instrument_groups\": [\n                          {\n                            \"instrument_group\": \"full_aw_nylon_acoustic_lead_guitar\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"nice_scoring_viola_ensemble\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"warm_devonshire_upright_acoustic_piano\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"nice_scoring_first_violin_ensemble\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"nice_scoring_second_violin_ensemble\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"warm_kawai_grand_acoustic_piano_dreamy\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"sweet_kawai_grand_acoustic_piano\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          },\n                          {\n                            \"instrument_group\": \"nice_scoring_cello_ensemble\",\n                            \"statuses\": [\n                              {\n                                \"beat\": 0,\n                                \"status\": \"active\"\n                              }\n                            ]\n                          }\n                        ]\n                      },\n                      {\n                        \"span_type\": \"unmetered\",\n                        \"time\": 15\n                      }\n                    ]\n                  }\n                }\n              ]\n            }' \u003e data.json\n\n            shutterstock ai-audio create-audio-renders data.json\n  /v2/audio:\n    get:\n      description: This endpoint lists information about one or more audio tracks, including the description and publication date.\n      operationId: getTrackList\n      parameters:\n        - description: One or more audio IDs\n          example:\n            - \"442583\"\n            - \"434750\"\n          in: query\n          name: id\n          required: true\n          schema:\n            items:\n              type: string\n            minItems: 1\n            type: array\n        - description: Amount of detail to render in the response\n          example: full\n          in: query\n          name: view\n          schema:\n            default: minimal\n            enum:\n              - minimal\n              - full\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - added_date: 2016-04-12\n                        album:\n                          id: \"\"\n                          title: \"\"\n                        artists:\n                          - name: Fin Productions\n                        assets:\n                          clean_audio:\n                            file_size: 30760372\n                          preview_mp3:\n                            file_size: 3846606\n                            url: https://ak.picdn.net/shutterstock/audio/434750/preview/preview.mp3\n                          preview_ogg:\n                            file_size: 4402608\n                            url: https://ak.picdn.net/shutterstock/audio/434750/preview/preview.ogg\n                          waveform:\n                            file_size: 19822\n                            url: https://ak.picdn.net/shutterstock/audio/434750/waveform/waveform.png\n                        bpm: 100\n                        contributor:\n                          id: \"2847971\"\n                        description: Pulsing and feel-good, featuring slick electric guitar, synthesizer, bass, electronic drum pads and drums that create a positive, celebratory mood.\n                        duration: 160\n                        genres:\n                          - Dance/Electronic\n                          - Electro Pop\n                          - Pop/Rock\n                        id: \"434750\"\n                        instruments:\n                          - Bass\n                          - Drums\n                          - Electric guitar\n                          - Pads\n                          - Percussion\n                          - Synthesizer\n                        is_adult: false\n                        is_instrumental: true\n                        isrc: \"\"\n                        keywords:\n                          - breezy\n                          - celebration\n                          - festive\n                          - good times\n                          - hopeful\n                          - optimistic\n                          - party\n                          - positive\n                          - reflective\n                        language: en\n                        lyrics: \"\"\n                        media_type: audio\n                        moods:\n                          - Bright\n                          - Confident\n                          - Fun\n                          - Happy\n                          - Inspiring\n                          - Optimistic\n                          - Playful\n                          - Sophisticated\n                          - Stylish\n                          - Uplifting\n                        published_time: 2016-04-12T17:45:29-04:00\n                        recording_version: \"\"\n                        releases: []\n                        similar_artists: []\n                        title: Fresh Love\n                        updated_time: 2016-08-18T18:03:11-04:00\n                        url: \"\"\n                        vocal_description: \"\"\n              schema:\n                $ref: \"#/components/schemas/AudioDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List audio tracks\n      tags:\n        - audio\n  /v2/audio/collections:\n    get:\n      description: This endpoint lists your collections of audio tracks and their basic attributes.\n      operationId: getTrackCollectionList\n      parameters:\n        - description: Page number\n          example: \"1\"\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          example: \"100\"\n          in: query\n          name: per_page\n          schema:\n            default: 100\n            maximum: 150\n            minimum: 1\n            type: integer\n        - description: Which sharing information to include in the response, such as a URL to the collection\n          example: share_code\n          in: query\n          name: embed\n          schema:\n            items:\n              enum:\n                - share_code\n                - share_url\n              type: string\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - created_time: 2014-11-05T19:29:56-05:00\n                        id: \"5747953\"\n                        name: Test Collection cdad\n                        total_item_count: 0\n                        updated_time: 2014-11-05T19:29:56-05:00\n                      - created_time: 2014-11-05T19:29:56-05:00\n                        id: \"5747955\"\n                        name: Test Collection ff5f\n                        total_item_count: 0\n                        updated_time: 2014-11-05T19:29:56-05:00\n                      - created_time: 2014-11-05T19:29:58-05:00\n                        id: \"5747957\"\n                        name: Updated Collection ebc4\n                        total_item_count: 0\n                        updated_time: 2014-11-05T19:29:58-05:00\n                      - cover_item:\n                          added_time: 2021-07-21T16:55:17.000Z\n                          id: \"4928041\"\n                          media_type: audio\n                        created_time: 2014-11-05T19:32:13-05:00\n                        id: \"5747971\"\n                        name: Test Collection 0072\n                        total_item_count: 11\n                        updated_time: 2014-11-05T19:32:13-05:00\n                      - created_time: 2014-11-05T19:32:13-05:00\n                        id: \"5747973\"\n                        name: Test Collection d332\n                        total_item_count: 0\n                        updated_time: 2014-11-05T19:32:13-05:00\n                    page: 1\n                    per_page: 100\n                    total_count: 5\n              schema:\n                $ref: \"#/components/schemas/CollectionDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - collections.view\n      summary: List audio collections\n      tags:\n        - audio\n    post:\n      description: This endpoint creates one or more collections (soundboxes). To add tracks, use `POST /v2/audio/collections/{id}/items`.\n      operationId: createTrackCollection\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                description: Create a soundbox\n                value:\n                  name: Best rock music\n            schema:\n              $ref: \"#/components/schemas/CollectionCreateRequest\"\n        description: Collection metadata\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    id: \"48433105\"\n              schema:\n                $ref: \"#/components/schemas/CollectionCreateResponse\"\n          description: Successfully created audio collection\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Create audio collections\n      tags:\n        - audio\n      x-code-samples:\n        - lang: shell\n          source: |-\n            DATA='{\n              \"name\": \"Best rock music\"\n            }'\n\n            curl -X POST https://api.shutterstock.com/v2/audio/collections \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const audioApi = new sstk.AudioApi();\n\n            const body = {\n              \"name\": \"Best rock music\"\n            };\n\n            audioApi.createTrackCollection(body)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $body = [\n              \"name\" =\u003e \"Best rock music\"\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/audio/collections\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"name\": \"Best rock music\"\n            }' \u003e data.json\n\n            shutterstock images create-image-collection data.json\n  \"/v2/audio/collections/{id}\":\n    delete:\n      description: This endpoint deletes a collection.\n      operationId: deleteTrackCollection\n      parameters:\n        - description: Collection ID\n          example: \"48433111\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Successfully deleted collection\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Delete audio collections\n      tags:\n        - audio\n      x-code-samples:\n        - lang: shell\n          source: |-\n            curl -X DELETE https://api.shutterstock.com/v2/audio/collections/48433111 \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const audioApi = new sstk.AudioApi();\n\n            const collectionId = \"48433107\";\n\n            audioApi.deleteTrackCollection(collectionId)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/audio/collections/48433111\",\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"DELETE\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock audio delete-track-collection 48433111\n    get:\n      description: This endpoint gets more detailed information about a collection, including the number of items in it and when it was last updated. To get the tracks in collections, use `GET /v2/audio/collections/{id}/items`.\n      operationId: getTrackCollection\n      parameters:\n        - description: Collection ID\n          example: \"48433107\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Which sharing information to include in the response, such as a URL to the collection\n          in: query\n          name: embed\n          schema:\n            items:\n              enum:\n                - share_code\n                - share_url\n              type: string\n            type: array\n        - description: Code to retrieve a shared collection\n          in: query\n          name: share_code\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    cover_item:\n                      added_time: 2018-07-21T16:55:17.000Z\n                      id: \"4928431\"\n                      media_type: audio\n                    created_time: 2016-06-09T17:13:17.000Z\n                    id: \"48433107\"\n                    name: Test Collection c28c\n                    total_item_count: 10\n                    updated_time: 2016-08-18T18:52:56-04:00\n              schema:\n                $ref: \"#/components/schemas/Collection\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.view\n      summary: Get the details of audio collections\n      tags:\n        - audio\n    post:\n      description: This endpoint sets a new name for a collection.\n      operationId: renameTrackCollection\n      parameters:\n        - description: Collection ID\n          example: \"48433107\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                description: Renaming a soundbox\n                value:\n                  name: Best rock music\n            schema:\n              $ref: \"#/components/schemas/CollectionUpdateRequest\"\n        description: Collection changes\n        required: true\n      responses:\n        \"204\":\n          description: Successfully updated collection\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Rename audio collections\n      tags:\n        - audio\n      x-code-samples:\n        - lang: shell\n          source: |-\n            DATA='{\n              \"name\": \"Best rock music\"\n            }'\n\n            curl -X POST https://api.shutterstock.com/v2/audio/collections/48433107 \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const audioApi = new sstk.AudioApi();\n\n            const collectionId = \"48433107\";\n\n            const body = {\n              \"name\": \"Best rock music\"\n            };\n\n            audioApi.renameTrackCollection(collectionId, body)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $body = [\n              \"name\" =\u003e \"Best rock music\"\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/audio/collections/48433107\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"name\": \"Best rock music\"\n            }' \u003e data.json\n\n            shutterstock audio rename-collection 48433107 data.json\n  \"/v2/audio/collections/{id}/items\":\n    delete:\n      description: This endpoint removes one or more tracks from a collection.\n      operationId: deleteTrackCollectionItems\n      parameters:\n        - description: Collection ID\n          example: \"48433119\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: One or more item IDs to remove from the collection\n          example:\n            - \"76688182\"\n            - \"40005859\"\n          in: query\n          name: item_id\n          schema:\n            items:\n              type: string\n            type: array\n      responses:\n        \"204\":\n          description: Successfully removed collection items\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Remove audio tracks from collections\n      tags:\n        - audio\n      x-code-samples:\n        - lang: shell\n          source: |-\n            curl -X DELETE https://api.shutterstock.com/v2/audio/collections/48433119/items?item_id=36345523 \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const audioApi = new sstk.AudioApi();\n\n            const collectionId = \"48433119\";\n\n            // Array of tracks to remove\n            const tracksToRemove = {\n              \"item_id\": [\n                \"76688182\",\n                \"40005859\"\n              ]\n            };\n\n            audioApi.deleteTrackCollectionItems(collectionId, tracksToRemove)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/audio/collections/48433119/items?item_id=495863218\",\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"DELETE\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock audio delete-track-collection-items 48433119 --item-id 36345523\n    get:\n      description: This endpoint lists the IDs of tracks in a collection and the date that each was added.\n      operationId: getTrackCollectionItems\n      parameters:\n        - description: Collection ID\n          example: \"126351027\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 100\n            maximum: 150\n            minimum: 1\n            type: integer\n        - description: Code to retrieve the contents of a shared collection\n          in: query\n          name: share_code\n          schema:\n            type: string\n        - description: Sort order\n          in: query\n          name: sort\n          schema:\n            default: oldest\n            enum:\n              - newest\n              - oldest\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - added_time: 2016-08-18T18:52:59-04:00\n                        id: \"76688182\"\n                        media_type: audio\n                      - added_time: 2016-08-18T18:52:59-04:00\n                        id: \"40005859\"\n                        media_type: audio\n                    page: 1\n                    per_page: 100\n                    total_count: 2\n              schema:\n                $ref: \"#/components/schemas/CollectionItemDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.view\n      summary: Get the contents of audio collections\n      tags:\n        - audio\n    post:\n      description: This endpoint adds one or more tracks to a collection by track IDs.\n      operationId: addTrackCollectionItems\n      parameters:\n        - description: Collection ID\n          example: \"48433115\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                description: Adds tracks to a soundbox\n                value:\n                  items:\n                    - id: \"442583\"\n                    - id: \"7491192\"\n            schema:\n              $ref: \"#/components/schemas/CollectionItemRequest\"\n        description: List of items to add to collection\n        required: true\n      responses:\n        \"204\":\n          description: Successfully added collection items\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Add audio tracks to collections\n      tags:\n        - audio\n      x-code-samples:\n        - lang: shell\n          source: |-\n            DATA='{\n              \"items\": [\n                {\n                  \"id\": \"442583\"\n                },\n                {\n                  \"id\": \"7491192\"\n                }\n              ]\n            }'\n\n            curl -X POST https://api.shutterstock.com/v2/audio/collections/48433115/items \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const audioApi = new sstk.AudioApi();\n\n            const collectionId = \"48433115\";\n\n            const body = {\n              \"items\": [\n                {\n                  \"id\": \"442583\"\n                },\n                {\n                  \"id\": \"7491192\"\n                }\n              ]\n            };\n\n            audioApi.addTrackCollectionItems(collectionId, body)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $body = [\n              \"items\" =\u003e [\n                [\n                  \"id\" =\u003e \"442583\"\n                ],\n                [\n                  \"id\" =\u003e \"7491192\"\n                ]\n              ]\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/audio/collections/48433115/items\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"items\": [\n                {\n                  \"id\": \"442583\"\n                },\n                {\n                  \"id\": \"7491192\"\n                }\n              ]\n            }' \u003e data.json\n\n            shutterstock audio add-collection-items 48433115 data.json\n  /v2/audio/genres:\n    get:\n      description: This endpoint returns a list of all audio genres.\n      operationId: listGenres\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - Pop \u003e Singer-Songwriter\n                      - Pop \u003e Synth Pop\n                      - Production / Film Scores\n              schema:\n                $ref: \"#/components/schemas/GenreList\"\n          description: OK\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List audio genres\n      tags:\n        - audio\n  /v2/audio/instruments:\n    get:\n      description: This endpoint returns a list of all audio instruments.\n      operationId: listInstruments\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - Orchestra\n                      - Organ\n                      - Oud\n                      - Pads\n              schema:\n                $ref: \"#/components/schemas/InstrumentList\"\n          description: OK\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List audio instruments\n      tags:\n        - audio\n  /v2/audio/licenses:\n    get:\n      description: This endpoint lists existing licenses. You can filter the results according to the track ID to see if you have an existing license for a specific track.\n      operationId: getTrackLicenseList\n      parameters:\n        - description: Show licenses for the specified track ID\n          example: \"1\"\n          in: query\n          name: audio_id\n          schema:\n            type: string\n        - description: Restrict results by license. Prepending a `-` sign will exclude results by license\n          example: \"48433107\"\n          in: query\n          name: license\n          schema:\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 200\n            minimum: 0\n            type: integer\n        - description: Sort order\n          in: query\n          name: sort\n          schema:\n            default: newest\n            enum:\n              - newest\n              - oldest\n            type: string\n        - description: Filter licenses by username of licensee\n          example: aUniqueUsername\n          in: query\n          name: username\n          schema:\n            type: string\n        - description: Show licenses created on or after the specified date\n          example: 2021-03-29T13:25:13.521Z\n          in: query\n          name: start_date\n          schema:\n            format: date-time\n            type: string\n        - description: Show licenses created before the specified date\n          example: 2021-03-29T13:25:13.521Z\n          in: query\n          name: end_date\n          schema:\n            format: date-time\n            type: string\n          x-relationships:\n            - in: query\n              name: start_date\n              relationship: \"\u003e\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - audio:\n                          format:\n                            size: clean_audio\n                          id: \"420298\"\n                        download_time: 2020-11-11T16:15:20.000Z\n                        id: a10b7a7a5a02113a928f13e5ba196151d6\n                        is_downloadable: true\n                        license: premier_music_extended\n                        metadata:\n                          purchase_order: \"123\"\n                        user:\n                          username: jsmith\n                    page: 1\n                    per_page: 20\n                    total_count: 1\n              schema:\n                $ref: \"#/components/schemas/DownloadHistoryDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - licenses.view\n      summary: List audio licenses\n      tags:\n        - audio\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET https://api.shutterstock.com/v2/audio/licenses \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n            -G \\\n            --data-urlencode \"start_date=2016-10-03T01:25:13.521Z\" \\\n            --data-urlencode \"end_date=2016-10-04T13:25:13.521Z\" \\\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const audioApi = new sstk.AudioApi();\n\n            const queryParams = {\n              \"start_date\": \"2016-10-03T01:25:13.521Z\",\n              \"end_date\": \"2016-10-04T13:25:13.521Z\"\n            };\n\n            audioApi.getTrackLicenseList(queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $queryFields = [\n              \"start_date\" =\u003e \"2016-10-03T01:25:13.521Z\",\n              \"end_date\" =\u003e \"2016-10-04T13:25:13.521Z\"\n            ];\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/audio/licenses\" . http_build_query($queryFields),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock audio get-track-license-list --start-date \"2016-10-03T01:25:13.521Z\" --end-date \"2016-10-04T13:25:13.521Z\"\n    post:\n      description: This endpoint gets licenses for one or more tracks.\n      operationId: licenseTrack\n      parameters:\n        - description: License type\n          example: audio_platform\n          in: query\n          name: license\n          schema:\n            enum:\n              - audio_platform\n              - premier_music_basic\n              - premier_music_extended\n              - premier_music_pro\n              - premier_music_comp\n            type: string\n        - description: The ID of the search that led to licensing this track\n          example: p5S6QwRikdFJTHXwsoiqTg\n          in: query\n          name: search_id\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                description: Overwrite content of soundbox with new items\n                value:\n                  audio:\n                    - audio_id: \"591623\"\n                      license: audio_platform\n                      metadata:\n                        customer_id: \"12345\"\n            schema:\n              $ref: \"#/components/schemas/LicenseAudioRequest\"\n        description: Tracks to license\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - audio_id: \"1\"\n                        download:\n                          url: http://download2.dev.shutterstock.com/gatekeeper/abc/original.wav\n              schema:\n                $ref: \"#/components/schemas/LicenseAudioResultDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - licenses.create\n      summary: License audio tracks\n      tags:\n        - audio\n      x-code-samples:\n        - lang: shell\n          source: |\n            DATA='{\n              \"audio\": [\n                {\n                  \"audio_id\": \"591623\",\n                  \"license\": \"audio_platform\",\n                  \"metadata\": {\n                    \"customer_id\": \"12345\"\n                  }\n                }\n              ]\n            }'\n\n            curl -X POST https://api.shutterstock.com/v2/audio/licenses \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const audioApi = new sstk.AudioApi();\n\n            const body = {\n              \"audio\": [\n                {\n                  \"audio_id\": \"446348\",\n                  \"license\": \"audio_platform\",\n                  \"metadata\": {\n                    \"customer_id\": \"12345\"\n                  }\n                }\n              ]\n            };\n\n            audioApi.licenseTrack(body)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $body = [\n              \"audio\" =\u003e [\n                [\n                  \"audio_id\" =\u003e \"591623\",\n                  \"license\" =\u003e \"audio_platform\",\n                  \"metadata\" =\u003e [\n                  \"customer_id\" =\u003e \"12345\"\n                  ]\n                ]\n              ]\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/audio/licenses\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"audio\": [\n                {\n                  \"audio_id\": \"591623\",\n                  \"license\": \"audio_platform\",\n                  \"metadata\": {\n                    \"customer_id\": \"12345\"\n                  }\n                }\n              ]\n            }' \u003e data.json\n\n            shutterstock audio license-track data.json\n  \"/v2/audio/licenses/{id}/downloads\":\n    post:\n      description: This endpoint redownloads tracks that you have already received a license for.\n      operationId: downloadTracks\n      parameters:\n        - description: License ID\n          example: e123\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    url: http://download2.dev.shutterstock.com/gatekeeper/abc/original.wav\n              schema:\n                $ref: \"#/components/schemas/Url\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - licenses.view\n      summary: Download audio tracks\n      tags:\n        - audio\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X POST https://api.shutterstock.com/v2/audio/licenses/e123/downloads \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const audioApi = new sstk.AudioApi();\n\n            const licenseId = \"e123\"; // license ID, not track ID\n\n            audioApi.downloadTracks(licenseId)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/audio/licenses/e123/downloads\",\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock audio download-tracks e123\n  /v2/audio/moods:\n    get:\n      description: This endpoint returns a list of all audio moods.\n      operationId: listMoods\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - Action / Sports\n                      - Adventure / Discovery\n                      - Aerobics / Workout\n                      - Aggressive\n              schema:\n                $ref: \"#/components/schemas/MoodList\"\n          description: OK\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List audio moods\n      tags:\n        - audio\n  /v2/audio/search:\n    get:\n      description: This endpoint searches for tracks. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter.\n      operationId: searchTracks\n      parameters:\n        - description: Show tracks with one of the specified artist names or IDs\n          in: query\n          name: artists\n          schema:\n            items:\n              type: string\n            type: array\n            uniqueItems: false\n        - deprecated: true\n          description: (Deprecated; use bpm_from and bpm_to instead) Show tracks with the specified beats per minute\n          in: query\n          name: bpm\n          schema:\n            type: integer\n            uniqueItems: true\n        - description: Show tracks with the specified beats per minute or faster\n          example: 80\n          in: query\n          name: bpm_from\n          schema:\n            type: integer\n            uniqueItems: true\n        - description: Show tracks with the specified beats per minute or slower\n          example: 120\n          in: query\n          name: bpm_to\n          schema:\n            type: integer\n            uniqueItems: true\n        - description: Show tracks with the specified duration in seconds\n          example: 180\n          in: query\n          name: duration\n          schema:\n            type: integer\n            uniqueItems: true\n        - description: Show tracks with the specified duration or longer in seconds\n          example: 30\n          in: query\n          name: duration_from\n          schema:\n            type: integer\n            uniqueItems: true\n        - description: Show tracks with the specified duration or shorter in seconds\n          example: 180\n          in: query\n          name: duration_to\n          schema:\n            type: integer\n            uniqueItems: true\n        - description: Show tracks with each of the specified genres; to get the list of genres, use `GET /v2/audio/genres`\n          example:\n            - Classical\n            - Holiday\n          explode: true\n          in: query\n          name: genre\n          schema:\n            items:\n              type: string\n            type: array\n            uniqueItems: false\n        - description: Show instrumental music only\n          example: true\n          in: query\n          name: is_instrumental\n          schema:\n            type: boolean\n            uniqueItems: true\n        - description: Show tracks with each of the specified instruments; to get the list of instruments, use `GET /v2/audio/instruments`\n          example:\n            - Trumpet\n            - Percussion\n          explode: true\n          in: query\n          name: instruments\n          schema:\n            items:\n              type: string\n            type: array\n            uniqueItems: false\n        - description: Show tracks with each of the specified moods; to get the list of moods, use `GET /v2/audio/moods`\n          example:\n            - Confident\n            - Playful\n          explode: true\n          in: query\n          name: moods\n          schema:\n            items:\n              type: string\n            type: array\n            uniqueItems: false\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n            uniqueItems: true\n        - description: Number of results per page\n          example: 1\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 500\n            minimum: 0\n            type: integer\n            uniqueItems: true\n        - description: One or more search terms separated by spaces\n          example: drum\n          in: query\n          name: query\n          schema:\n            type: string\n            uniqueItems: true\n        - description: Sort by\n          example: score\n          in: query\n          name: sort\n          schema:\n            enum:\n              - score\n              - ranking_all\n              - artist\n              - title\n              - bpm\n              - freshness\n              - duration\n            type: string\n            uniqueItems: true\n        - description: Sort order\n          in: query\n          name: sort_order\n          schema:\n            default: desc\n            enum:\n              - asc\n              - desc\n            type: string\n            uniqueItems: true\n        - description: Show tracks with the specified vocal description (male, female)\n          example: female\n          in: query\n          name: vocal_description\n          schema:\n            type: string\n            uniqueItems: true\n        - description: Amount of detail to render in the response\n          example: full\n          in: query\n          name: view\n          schema:\n            default: minimal\n            enum:\n              - minimal\n              - full\n            type: string\n            uniqueItems: true\n        - description: Fields to display in the response; see the documentation for the fields parameter in the overview section\n          in: query\n          name: fields\n          schema:\n            type: string\n            uniqueItems: true\n        - description: Which library to search\n          in: query\n          name: library\n          schema:\n            default: premier\n            enum:\n              - shutterstock\n              - premier\n            type: string\n            uniqueItems: true\n        - description: Which language to search in\n          in: query\n          name: language\n          schema:\n            type: string\n            uniqueItems: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - added_date: 2016-08-16\n                        album:\n                          id: \"\"\n                          title: \"\"\n                        artists:\n                          - name: Klimenko Music\n                        assets:\n                          clean_audio:\n                            file_size: 35188408\n                          preview_mp3:\n                            file_size: 4400203\n                            url: https://ak.picdn.net/shutterstock/audio/442583/preview/preview.mp3\n                          preview_ogg:\n                            file_size: 4453197\n                            url: https://ak.picdn.net/shutterstock/audio/442583/preview/preview.ogg\n                          waveform:\n                            file_size: 18778\n                            url: https://ak.picdn.net/shutterstock/audio/442583/waveform/waveform.png\n                        bpm: 110\n                        contributor:\n                          id: \"2847971\"\n                        description: Pulsing and feel-good, featuring soaring synthesizer, groovy synth bass drums and synth drums that create a euphoric, upbeat mood.\n                        duration: 183\n                        genres:\n                          - Dance/Electronic\n                          - Electro Pop\n                          - Pop/Rock\n                        id: \"442583\"\n                        instruments:\n                          - Piano\n                          - Synth bass\n                          - Synth drums\n                          - Synthesizer\n                        is_adult: false\n                        is_instrumental: true\n                        isrc: \"\"\n                        keywords:\n                          - celebratory\n                          - chic\n                          - euphoric\n                          - good times\n                          - hip\n                          - optimistic\n                          - party\n                          - soaring\n                          - upbeat\n                        language: en\n                        lyrics: \"\"\n                        media_type: audio\n                        moods:\n                          - Bright\n                          - Confident\n                          - Fun\n                          - Happy\n                          - Inspiring\n                          - Optimistic\n                          - Playful\n                          - Sophisticated\n                          - Stylish\n                          - Uplifting\n                        published_time: 2016-08-16T14:30:03-04:00\n                        recording_version: \"\"\n                        releases: []\n                        similar_artists: []\n                        title: Another Tomorrow\n                        updated_time: 2016-08-18T17:59:33-04:00\n                        url: \"\"\n                        vocal_description: \"\"\n                    page: 1\n                    per_page: 5\n                    search_id: c298887c-6f3e-45df-b6cd-41b246e4a104\n                    total_count: 25\n              schema:\n                $ref: \"#/components/schemas/AudioSearchResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Search for tracks\n      tags:\n        - audio\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET \"https://api.shutterstock.com/v2/audio/search\" \\\n            --header \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -G \\\n            --data-urlencode \"query=bluegrass\" \\\n            --data-urlencode \"duration_from=60\" \\\n            --data-urlencode \"moods=uplifting\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const audioApi = new sstk.AudioApi();\n\n            const queryParams = {\n              \"query\": \"bluegrass\",\n              \"duration_from\": 60,\n              \"moods\": [\"uplifting\"]\n            };\n\n            audioApi.searchTracks(queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $queryFields = [\n              \"query\" =\u003e \"bluegrass\",\n              \"duration_from\" =\u003e 60,\n              \"moods\" =\u003e \"uplifting\"\n            ];\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/audio/search?\" . http_build_query($queryFields),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock audio search-tracks --query bluegrass --duration-from 60 --moods uplifting\n  \"/v2/audio/{id}\":\n    get:\n      description: This endpoint shows information about a track, including its genres, instruments, and other attributes.\n      operationId: getTrack\n      parameters:\n        - description: Audio track ID\n          example: \"442583\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - description: Amount of detail to render in the response\n          example: full\n          in: query\n          name: view\n          schema:\n            default: full\n            enum:\n              - minimal\n              - full\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    added_date: 2016-08-16\n                    album:\n                      id: \"\"\n                      title: \"\"\n                    artists:\n                      - name: Klimenko Music\n                    assets:\n                      clean_audio:\n                        file_size: 35188408\n                      preview_mp3:\n                        file_size: 4400203\n                        url: https://ak.picdn.net/shutterstock/audio/442583/preview/preview.mp3\n                      preview_ogg:\n                        file_size: 4453197\n                        url: https://ak.picdn.net/shutterstock/audio/442583/preview/preview.ogg\n                      waveform:\n                        file_size: 18778\n                        url: https://ak.picdn.net/shutterstock/audio/442583/waveform/waveform.png\n                    bpm: 110\n                    contributor:\n                      id: \"2847971\"\n                    description: Pulsing and feel-good, featuring soaring synthesizer, groovy synth bass drums and synth drums that create a euphoric, upbeat mood.\n                    duration: 183\n                    genres:\n                      - Dance/Electronic\n                      - Electro Pop\n                      - Pop/Rock\n                    id: \"442583\"\n                    instruments:\n                      - Piano\n                      - Synth bass\n                      - Synth drums\n                      - Synthesizer\n                    is_adult: false\n                    is_instrumental: true\n                    isrc: \"\"\n                    keywords:\n                      - celebratory\n                      - chic\n                      - euphoric\n                      - good times\n                      - hip\n                      - optimistic\n                      - party\n                      - soaring\n                      - upbeat\n                    language: en\n                    lyrics: \"\"\n                    media_type: audio\n                    moods:\n                      - Bright\n                      - Confident\n                      - Fun\n                      - Happy\n                      - Inspiring\n                      - Optimistic\n                      - Playful\n                      - Sophisticated\n                      - Stylish\n                      - Uplifting\n                    published_time: 2016-08-16T14:30:03-04:00\n                    recording_version: \"\"\n                    releases: []\n                    similar_artists: []\n                    title: Another Tomorrow\n                    updated_time: 2016-08-18T17:59:33-04:00\n                    url: \"\"\n                    vocal_description: \"\"\n              schema:\n                $ref: \"#/components/schemas/Audio\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get details about audio tracks\n      tags:\n        - audio\n  /v2/contributors:\n    get:\n      description: This endpoint lists information about one or more contributors, including contributor type, equipment they use and other attributes.\n      operationId: getContributorList\n      parameters:\n        - description: One or more contributor IDs\n          example:\n            - 800506\n            - 1653538\n          in: query\n          name: id\n          required: true\n          schema:\n            items:\n              type: string\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - about: Dave is a self confessed emotional photographer, capturing, keeping and sharing images for the stories of the wild that they convey.\n                        contributor_type:\n                          - illustrator\n                          - videographer\n                        display_name: Dave Pusey\n                        equipment:\n                          - Both Canon \u0026 Nikon\n                        id: \"800506\"\n                        location: za\n                        portfolio_url: http://www.shutterstock.com/g/davep\n                        social_media:\n                          facebook: pages/Dave-Pusey-Photography/131399733564475\n                        styles:\n                          - black_and_white\n                          - landscape\n                          - nature\n                        subjects:\n                          - animals\n                          - holiday\n                          - nature\n                          - travel\n                          - wildlife\n                        website: leovantage.com\n              schema:\n                $ref: \"#/components/schemas/ContributorProfileDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode: []\n        - basic: []\n      summary: Get details about multiple contributors\n      tags:\n        - contributors\n  \"/v2/contributors/{contributor_id}\":\n    get:\n      description: This endpoint shows information about a single contributor, including contributor type, equipment they use, and other attributes.\n      operationId: getContributor\n      parameters:\n        - description: Contributor ID\n          example: 1653538\n          in: path\n          name: contributor_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    about: A 18 year old photographer living in Amsterdam.\n                    contributor_type:\n                      - photographer\n                      - illustrator\n                      - videographer\n                    display_name: Mees Kuiper\n                    equipment:\n                      - Nikon D7000\n                      - Nikkor 70-300mm\n                      - Nikkor 24-70mm\n                    id: \"1653538\"\n                    location: nl\n                    portfolio_url: http://www.shutterstock.com/g/Mees Kuiper\n                    social_media: {}\n                    styles: []\n                    subjects:\n                      - animals\n                      - buildings\n                      - nature\n                      - people\n                      - wildlife\n              schema:\n                $ref: \"#/components/schemas/ContributorProfile\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode: []\n        - basic: []\n      summary: Get details about a single contributor\n      tags:\n        - contributors\n  \"/v2/contributors/{contributor_id}/collections\":\n    get:\n      description: This endpoint lists collections based on contributor ID.\n      operationId: getContributorCollectionsList\n      parameters:\n        - description: Contributor ID\n          example: 800506\n          in: path\n          name: contributor_id\n          required: true\n          schema:\n            type: string\n        - description: Sort order\n          in: query\n          name: sort\n          schema:\n            enum:\n              - newest\n              - last_updated\n              - item_count\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - cover_item:\n                          id: \"87672997\"\n                          media_type: image\n                        created_time: 2012-04-07T02:07:28-04:00\n                        id: \"135931\"\n                        name: Lion Cubs\n                        total_item_count: 10\n                        updated_time: 2014-05-01T05:22:07-04:00\n                      - cover_item:\n                          id: \"79489261\"\n                          media_type: image\n                        created_time: 2014-05-01T05:23:20-04:00\n                        id: \"1991564\"\n                        name: African Landscapes\n                        total_item_count: 5\n                        updated_time: 2014-05-01T05:38:34-04:00\n              schema:\n                $ref: \"#/components/schemas/CollectionDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Contributor not found\n      security:\n        - customer_accessCode: []\n        - basic: []\n      summary: List contributors' collections\n      tags:\n        - contributors\n  \"/v2/contributors/{contributor_id}/collections/{id}\":\n    get:\n      description: This endpoint gets more detailed information about a contributor's collection, including its cover image, timestamps for its creation, and most recent update. To get the items in collections, use GET /v2/contributors/{contributor_id}/collections/{id}/items.\n      operationId: getContributorCollections\n      parameters:\n        - description: Contributor ID\n          example: 800506\n          in: path\n          name: contributor_id\n          required: true\n          schema:\n            type: string\n        - description: Collection ID that belongs to the contributor\n          example: 1991678\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    cover_item:\n                      id: \"168592952\"\n                      media_type: image\n                    id: \"1991678\"\n                    name: Baby Elephants\n                    total_item_count: 3\n                    updated_time: 2014-05-01T05:50:21-04:00\n              schema:\n                $ref: \"#/components/schemas/Collection\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Set not found\n      security:\n        - customer_accessCode: []\n        - basic: []\n      summary: Get details about contributors' collections\n      tags:\n        - contributors\n  \"/v2/contributors/{contributor_id}/collections/{id}/items\":\n    get:\n      description: This endpoint lists the IDs of items in a contributor's collection and the date that each was added.\n      operationId: getContributorCollectionItems\n      parameters:\n        - description: Contributor ID\n          example: 800506\n          in: path\n          name: contributor_id\n          required: true\n          schema:\n            type: string\n        - description: Collection ID that belongs to the contributor\n          example: 1991678\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 50\n            minimum: 1\n            type: integer\n        - description: Sort order\n          in: query\n          name: sort\n          schema:\n            enum:\n              - newest\n              - oldest\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - added_time: 2014-05-01T05:49:46-04:00\n                        id: \"168592952\"\n                        media_type: image\n                      - added_time: 2014-05-01T05:49:59-04:00\n                        id: \"88269310\"\n                        media_type: image\n                      - added_time: 2014-05-01T05:50:21-04:00\n                        id: \"94373977\"\n                        media_type: image\n              schema:\n                $ref: \"#/components/schemas/CollectionItemDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Set not found\n      security:\n        - customer_accessCode: []\n        - basic: []\n      summary: Get the items in contributors' collections\n      tags:\n        - contributors\n  /v2/cv/images:\n    post:\n      description: This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.\n      operationId: uploadImage\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  base64_image: R0lGODlhgACAAPcAAEwiBLyaLOzNUNmWFNjOrNSuN7x6PPzqeOTMgfKSDMyuTPzwsdi2dHwuBPzbVu\n            schema:\n              $ref: \"#/components/schemas/ImageCreateRequest\"\n        description: A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    upload_id: Udb14e1c3540bdbf82b4b3fe12d3a44f2\n              schema:\n                $ref: \"#/components/schemas/ComputerVisionImageCreateResponse\"\n          description: Created\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"413\":\n          description: Payload Too Large\n        \"415\":\n          description: Unsupported Media Type\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Upload images\n      tags:\n        - computer_vision\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X POST 'https://api.shutterstock.com/v2/cv/images' \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -H 'Content-Type: application/json' \\\n            -d \"{\\\"base64_image\\\":\\\"`base64 myImage.jpg | tr -d '\\n'`\\\"}\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const computerVisionApi = new sstk.ComputerVisionApi();\n\n            const imageFile = fs.readFileSync(\"./myImage.jpg\");\n            const base64File = Buffer.from(imageFile).toString(\"base64\");\n\n            const body = new sstk.ImageCreateRequest(base64File);\n\n            computerVisionApi.uploadImage(body)\n              .then((data) =\u003e {\n                console.log(data.upload_id);\n              });\n        - lang: php\n          source: |\n            $imageData = file_get_contents(\"myImage.jpg\");\n            $encodedImageData = base64_encode($imageData);\n\n            $uploadBody = [\n              \"base64_image\" =\u003e $encodedImageData\n            ];\n            $uploadEncodedBody = json_encode($uploadBody);\n\n            $uploadOptions = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/cv/images\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $uploadEncodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $uploadOptions);\n            $uploadResponse = curl_exec($handle);\n            curl_close($handle);\n\n            $uploadDecodedResponse = json_decode($uploadResponse);\n            print_r($uploadDecodedResponse-\u003eupload_id);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo \"{\\\"base64_image\\\":\\\"`base64 myImage.jpg  | tr -d '\\n'`\\\"}\" \u003e data.json\n\n            shutterstock cv upload-image data.json\n  /v2/cv/keywords:\n    get:\n      description: This endpoint returns a list of suggested keywords for a media item that you specify or upload.\n      operationId: getKeywords\n      parameters:\n        - description: The asset ID or upload ID to suggest keywords for\n          example: U6ba16262e3bc2db470b8e3cfa8aaab25\n          in: query\n          name: asset_id\n          required: true\n          schema:\n            oneOf:\n              - format: asset-upload-id\n                type: string\n              - format: asset-id\n                type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - nature\n                      - wildlife\n                      - animal\n                      - cute\n                      - bamboo\n                      - panda\n                      - china\n                      - wild\n                      - endangered\n                      - black\n                      - bear\n              schema:\n                $ref: \"#/components/schemas/KeywordDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"415\":\n          description: Unsupported Media Type\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List suggested keywords\n      tags:\n        - computer_vision\n      x-code-samples:\n        - lang: shell\n          source: |-\n            RESPONSE=$(curl -X POST 'https://api.shutterstock.com/v2/cv/images' \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -H 'Content-Type: application/json' \\\n            -d \"{\\\"base64_image\\\":\\\"`base64 myImage.jpg | tr -d '\\n'`\\\"}\")\n\n            echo \"The next step requires the jq program.\"\n\n            UPLOAD_ID=$(jq -r .upload_id \u003c\u003c\u003c $RESPONSE)\n\n            curl -X GET https://api.shutterstock.com/v2/cv/keywords \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -G \\\n            --data-urlencode \"asset_id=$UPLOAD_ID\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n            const fs = require(\"fs\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const computerVisionApi = new sstk.ComputerVisionApi();\n\n            const imageFile = fs.readFileSync(\"./myImage.jpg\");\n            const base64File = Buffer.from(imageFile).toString(\"base64\");\n\n            const body = new sstk.ImageCreateRequest(base64File);\n\n            computerVisionApi.uploadImage(body)\n              .then((data) =\u003e {\n                console.log(data.upload_id);\n                return computerVisionApi.getKeywords(data.upload_id);\n              })\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $imageData = file_get_contents(\"myImage.jpg\");\n            $encodedImageData = base64_encode($imageData);\n\n            $uploadBody = [\n              \"base64_image\" =\u003e $encodedImageData\n            ];\n            $uploadEncodedBody = json_encode($uploadBody);\n\n            $uploadOptions = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/cv/images\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $uploadEncodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $uploadOptions);\n            $uploadResponse = curl_exec($handle);\n            curl_close($handle);\n\n            $uploadDecodedResponse = json_decode($uploadResponse);\n            print_r($uploadDecodedResponse-\u003eupload_id);\n\n            $keywordsQuery = [\n              \"asset_id\" =\u003e $uploadDecodedResponse-\u003eupload_id,\n            ];\n\n            $keywordsOptions = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/cv/keywords?\" . http_build_query($keywordsQuery),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $keywordsOptions);\n            $keywordsResponse = curl_exec($handle);\n            curl_close($handle);\n\n            print_r($keywordsResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo \"{\\\"base64_image\\\":\\\"`base64 myImage.jpg  | tr -d '\\n'`\\\"}\" \u003e data.json\n\n            shutterstock cv upload-image data.json \u003e response.json\n\n            echo \"The next step requires the jq program.\"\n\n            UPLOAD_ID=$(jq -r .upload_id response.json)\n\n            shutterstock cv get-keywords --asset-id $UPLOAD_ID\n  /v2/cv/similar/images:\n    get:\n      description: This endpoint returns images that are visually similar to an image that you specify or upload.\n      parameters:\n        - description: The asset ID or upload ID to find similar images for\n          example: U6ba16262e3bc2db470b8e3cfa8aaab25\n          in: query\n          name: asset_id\n          required: true\n          schema:\n            type: string\n        - description: Show only images with the specified license\n          in: query\n          name: license\n          schema:\n            default: commercial\n            items:\n              enum:\n                - commercial\n                - editorial\n              type: string\n            type: array\n        - description: Enable or disable safe search\n          in: query\n          name: safe\n          schema:\n            default: true\n            type: boolean\n        - description: Language for the keywords and categories in the response\n          example: es\n          in: query\n          name: language\n          schema:\n            $ref: \"#/components/schemas/Language\"\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 500\n            minimum: 1\n            type: integer\n        - description: Amount of detail to render in the response\n          in: query\n          name: view\n          schema:\n            default: minimal\n            enum:\n              - minimal\n              - full\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 1\n                        assets:\n                          huge_thumb:\n                            height: 260\n                            url: https://image.shutterstock.com/image-vector/happy-halloween-vector-260nw-224429596.jpg\n                            width: 260\n                          large_thumb:\n                            height: 150\n                            url: https://thumb1.shutterstock.com/thumb_large/302287/224429596/stock-vector-happy-halloween-vector-224429596.jpg\n                            width: 150\n                          preview:\n                            height: 450\n                            url: https://image.shutterstock.com/display_pic_with_logo/302287/224429596/stock-vector-happy-halloween-vector-224429596.jpg\n                            width: 450\n                          preview_1000:\n                            height: 1000\n                            url: https://ak.picdn.net/shutterstock/photos/224429596/watermark_1000/9b5c88b67f10298f7b5340f21dffc953/preview_1000-224429596.jpg\n                            width: 1000\n                          preview_1500:\n                            height: 1500\n                            url: https://image.shutterstock.com/z/stock-vector-happy-halloween-vector-224429596.jpg\n                            width: 1500\n                          small_thumb:\n                            height: 100\n                            url: https://thumb1.shutterstock.com/thumb_small/302287/224429596/stock-vector-happy-halloween-vector-224429596.jpg\n                            width: 100\n                        contributor:\n                          id: \"302287\"\n                        description: Happy Halloween - vector\n                        id: \"224429596\"\n                        image_type: vector\n                        media_type: image\n                    page: 1\n                    per_page: 1\n                    search_id: \"\"\n                    total_count: 200\n              schema:\n                $ref: \"#/components/schemas/ImageSearchResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List similar images\n      tags:\n        - computer_vision\n      x-code-samples:\n        - lang: shell\n          source: |\n            RESPONSE=$(curl -X POST 'https://api.shutterstock.com/v2/cv/images' \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -H 'Content-Type: application/json' \\\n            -d \"{\\\"base64_image\\\":\\\"`base64 myImage.jpg | tr -d '\\n'`\\\"}\")\n\n            echo \"The next step requires the jq program.\"\n\n            UPLOAD_ID=$(jq -r .upload_id \u003c\u003c\u003c $RESPONSE)\n\n            curl -X GET https://api.shutterstock.com/v2/cv/similar/images \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -G \\\n            --data-urlencode \"asset_id=$UPLOAD_ID\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const computerVisionApi = new sstk.ComputerVisionApi();\n\n            const imageFile = fs.readFileSync(\"./myImage.jpg\");\n            const base64File = Buffer.from(imageFile).toString(\"base64\");\n\n            const body = new sstk.ImageCreateRequest(base64File);\n\n            computerVisionApi.uploadImage(body)\n              .then((data) =\u003e {\n                console.log(data.upload_id);\n                return computerVisionApi.getSimilarImages(data.upload_id);\n              })\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $imageData = file_get_contents(\"myImage.jpg\");\n            $encodedImageData = base64_encode($imageData);\n\n            $uploadBody = [\n              \"base64_image\" =\u003e $encodedImageData\n            ];\n            $uploadEncodedBody = json_encode($uploadBody);\n\n            $uploadOptions = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/cv/images\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $uploadEncodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $uploadOptions);\n            $uploadResponse = curl_exec($handle);\n            curl_close($handle);\n\n            $uploadDecodedResponse = json_decode($uploadResponse);\n            print_r($uploadDecodedResponse-\u003eupload_id);\n\n            $similarQuery = [\n              \"asset_type\" =\u003e \"images\",\n              \"asset_id\" =\u003e $uploadDecodedResponse-\u003eupload_id,\n            ];\n\n            $similarOptions = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/cv/similar/images?\" . http_build_query($similarQuery),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $similarOptions);\n            $similarResponse = curl_exec($handle);\n            curl_close($handle);\n\n            print_r($similarResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo \"{\\\"base64_image\\\":\\\"`base64 myImage.jpg  | tr -d '\\n'`\\\"}\" \u003e data.json\n\n            shutterstock cv upload-image data.json \u003e response.json\n\n            echo \"The next step requires the jq program.\"\n\n            UPLOAD_ID=$(jq -r .upload_id response.json)\n\n            shutterstock cv get-similar-images --asset-id $UPLOAD_ID\n  /v2/cv/similar/videos:\n    get:\n      description: This endpoint returns videos that are visually similar to an image that you specify or upload.\n      parameters:\n        - description: The asset ID or upload ID to find similar videos for\n          example: U6ba16262e3bc2db470b8e3cfa8aaab25\n          in: query\n          name: asset_id\n          required: true\n          schema:\n            type: string\n        - description: Show only videos with the specified license\n          in: query\n          name: license\n          schema:\n            default: commercial\n            items:\n              enum:\n                - commercial\n                - editorial\n              type: string\n            type: array\n        - description: Enable or disable safe search\n          in: query\n          name: safe\n          schema:\n            default: true\n            type: boolean\n        - description: Language for the keywords and categories in the response\n          example: es\n          in: query\n          name: language\n          schema:\n            $ref: \"#/components/schemas/Language\"\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 500\n            minimum: 1\n            type: integer\n        - description: Amount of detail to render in the response\n          in: query\n          name: view\n          schema:\n            default: minimal\n            enum:\n              - minimal\n              - full\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 1.778\n                        aspect_ratio: 16:9\n                        assets:\n                          preview_jpg:\n                            url: https://ak8.picdn.net/shutterstock/videos/33248488/thumb/12.jpg\n                          preview_mp4:\n                            url: https://ak8.picdn.net/shutterstock/videos/33248488/preview/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.mp4\n                          preview_webm:\n                            url: https://ak8.picdn.net/shutterstock/videos/33248488/preview/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.webm\n                          thumb_jpg:\n                            url: https://ak8.picdn.net/shutterstock/videos/33248488/thumb/12.jpg\n                          thumb_mp4:\n                            url: https://ak8.picdn.net/shutterstock/videos/33248488/thumb/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.mp4\n                          thumb_webm:\n                            url: https://ak8.picdn.net/shutterstock/videos/33248488/thumb/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.webm\n                        contributor:\n                          id: \"178456\"\n                        description: \"The Concept of: Digitalization of Information Flow Moving Through Rack Servers in Data Center. Shot on RED EPIC-W 8K Helium Cinema Camera.\"\n                        duration: 19\n                        id: \"33248488\"\n                        media_type: video\n                        url: https://www.shutterstock.com/video/clip-33248488\n                    page: 1\n                    per_page: 1\n                    search_id: \"\"\n                    total_count: 200\n              schema:\n                $ref: \"#/components/schemas/VideoSearchResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List similar videos\n      tags:\n        - computer_vision\n      x-code-samples:\n        - lang: shell\n          source: |\n            RESPONSE=$(curl -X POST 'https://api.shutterstock.com/v2/cv/images' \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -H 'Content-Type: application/json' \\\n            -d \"{\\\"base64_image\\\":\\\"`base64 myImage.jpg | tr -d '\\n'`\\\"}\")\n\n            echo \"The next step requires the jq program.\"\n\n            UPLOAD_ID=$(jq -r .upload_id \u003c\u003c\u003c $RESPONSE)\n\n            curl -X GET https://api.shutterstock.com/v2/cv/similar/videos \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -G \\\n            --data-urlencode \"asset_id=$UPLOAD_ID\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const computerVisionApi = new sstk.ComputerVisionApi();\n\n            const imageFile = fs.readFileSync(\"./myImage.jpg\");\n            const base64File = Buffer.from(imageFile).toString(\"base64\");\n\n            const body = new sstk.ImageCreateRequest(base64File);\n\n            computerVisionApi.uploadImage(body)\n              .then((data) =\u003e {\n                console.log(data.upload_id);\n                return computerVisionApi.getSimilarVideos(data.upload_id);\n              })\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $imageData = file_get_contents(\"myImage.jpg\");\n            $encodedImageData = base64_encode($imageData);\n\n            $uploadBody = [\n              \"base64_image\" =\u003e $encodedImageData\n            ];\n            $uploadEncodedBody = json_encode($uploadBody);\n\n            $uploadOptions = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/cv/images\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $uploadEncodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $uploadOptions);\n            $uploadResponse = curl_exec($handle);\n            curl_close($handle);\n\n            $uploadDecodedResponse = json_decode($uploadResponse);\n            print_r($uploadDecodedResponse-\u003eupload_id);\n\n            $similarQuery = [\n              \"asset_type\" =\u003e \"images\",\n              \"asset_id\" =\u003e $uploadDecodedResponse-\u003eupload_id,\n            ];\n\n            $similarOptions = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/cv/similar/videos?\" . http_build_query($similarQuery),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $similarOptions);\n            $similarResponse = curl_exec($handle);\n            curl_close($handle);\n\n            print_r($similarResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo \"{\\\"base64_image\\\":\\\"`base64 myImage.jpg  | tr -d '\\n'`\\\"}\" \u003e data.json\n\n            shutterstock cv upload-image data.json \u003e response.json\n\n            echo \"The next step requires the jq program.\"\n\n            UPLOAD_ID=$(jq -r .upload_id response.json)\n\n            shutterstock cv get-similar-videos --asset-id $UPLOAD_ID\n  /v2/editor/auth:\n    post:\n      operationId: authVideoEditor\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  userId: \"123\"\n            schema:\n              $ref: \"#/components/schemas/VideoEditorTokenRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    token:\n                      expirationDate: 1624559827\n                      value: 123456789.ABCDEFHIJ.A1B2C3D4\n              schema:\n                $ref: \"#/components/schemas/VideoEditorTokenResponse\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode: []\n      summary: Get video editor access tokens\n      tags:\n        - video_editor\n  /v2/editor/customers:\n    patch:\n      operationId: updateEditorInstance\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  imageSubscriptionId: s2345671\n                  videoSubscriptionId: s6543217\n                  webhookUrl: http://example.com:3009/updatedVideoCompleteCallback\n            schema:\n              $ref: \"#/components/schemas/UpdateVideoEditorRequest\"\n      responses:\n        \"204\":\n          content: {}\n          description: Modified\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode: []\n      summary: Update instances of the video editor\n      tags:\n        - video_editor\n    post:\n      operationId: registerEditorInstance\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  imageSubscriptionId: s1234567\n                  videoSubscriptionId: s7654321\n                  webhookUrl: http://example.com:3009/videoCompleteCallback\n            schema:\n              $ref: \"#/components/schemas/RegisterVideoEditorRequest\"\n      responses:\n        \"201\":\n          content: {}\n          description: Created\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode: []\n      summary: Register instances of the video editor\n      tags:\n        - video_editor\n  /v2/editorial/categories:\n    get:\n      deprecated: true\n      description: Deprecated; use `GET /v2/editorial/images/categories` instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.\n      operationId: getEditorialCategories\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - name: Animal\n                      - name: Awards\n                      - name: Art\n                      - name: Film Stills\n              schema:\n                $ref: \"#/components/schemas/EditorialCategoryResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: (Deprecated) List editorial categories\n      tags:\n        - editorial_images\n  /v2/editorial/images/categories:\n    get:\n      description: This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.\n      operationId: listEditorialImageCategories\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - name: Animal\n                      - name: Awards\n                      - name: Art\n                      - name: Film Stills\n              schema:\n                $ref: \"#/components/schemas/EditorialImageCategoryResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List editorial categories\n      tags:\n        - editorial_images\n  /v2/editorial/images/licenses:\n    get:\n      description: This endpoint lists existing editorial image licenses.\n      operationId: getEditorialImageLicenseList\n      parameters:\n        - description: Show licenses for the specified editorial image ID\n          example: \"12345678\"\n          in: query\n          name: image_id\n          schema:\n            type: string\n        - description: Show editorial images that are available with the specified license name\n          example: premier_editorial_all_digital\n          in: query\n          name: license\n          schema:\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 200\n            minimum: 0\n            type: integer\n        - description: Sort order\n          in: query\n          name: sort\n          schema:\n            default: newest\n            enum:\n              - newest\n              - oldest\n            type: string\n        - description: Filter licenses by username of licensee\n          example: aUniqueUsername\n          in: query\n          name: username\n          schema:\n            type: string\n        - description: Show licenses created on or after the specified date\n          example: 2021-03-29T13:25:13.521Z\n          in: query\n          name: start_date\n          schema:\n            format: date-time\n            type: string\n        - description: Show licenses created before the specified date\n          example: 2021-03-29T13:25:13.521Z\n          in: query\n          name: end_date\n          schema:\n            format: date-time\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - download_time: 2020-12-18T02:22:56.000Z\n                        id: e1dbb15d5384725d292cf64f793ac45062\n                        image:\n                          format:\n                            size: original\n                          id: 11231389im\n                        is_downloadable: false\n                        license: premier_editorial_all_digital\n                        metadata:\n                          client: Company A\n                          job: Important project\n                          other: Important media\n                          purchase_order: \"457234\"\n                        subscription_id: 1221a491741j1k41yd91dh37al324\n                        user:\n                          username: username1\n                      - download_time: 2020-12-11T01:24:22.000Z\n                        id: e1dbb15d5384725d292cf64f793ac45114\n                        image:\n                          format:\n                            size: original\n                          id: 11231442aa\n                        is_downloadable: false\n                        license: premier_editorial_all_digital\n                        metadata:\n                          client: Company B\n                          job: Important project\n                          other: Important image\n                          purchase_order: \"5583831\"\n                        subscription_id: 1221a491741j1k41yd91dh37al324\n                        user:\n                          username: username2\n                    page: 1\n                    per_page: 2\n              schema:\n                $ref: \"#/components/schemas/DownloadHistoryDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - licenses.view\n      summary: List editorial image licenses\n      tags:\n        - editorial_images\n    post:\n      description: This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license.\n      operationId: licenseEditorialImages\n      requestBody:\n        content:\n          application/json:\n            example:\n              country: USA\n              editorial:\n                - editorial_id: 8594090h\n                  license: premier_editorial_comp\n            schema:\n              $ref: \"#/components/schemas/LicenseEditorialContentRequest\"\n        description: License editorial content\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - download:\n                          url: https://s3-eu-west-1.amazonaws.com/api-downloads.rexfeatures.com/[random-characters].jpg?Expires=1524717323\n                        editorial_id: \"69656358\"\n              schema:\n                $ref: \"#/components/schemas/LicenseEditorialContentResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"406\":\n          description: Not Acceptable\n      security:\n        - customer_accessCode:\n            - licenses.create\n            - purchases.view\n      summary: License editorial content\n      tags:\n        - editorial_images\n      x-code-samples:\n        - lang: shell\n          source: |\n            DATA='{\n              \"editorial\": [\n                {\n                  \"editorial_id\": \"8594090h\",\n                  \"license\": \"premier_editorial_comp\"\n                }\n              ],\n              \"country\": \"USA\"\n            }'\n\n            curl -X POST https://api.shutterstock.com/v2/editorial/images/licenses \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const editorialApi = new sstk.EditorialApi();\n\n            const body = {\n              \"editorial\": [\n                {\n                  \"editorial_id\": \"8594090h\",\n                  \"license\": \"premier_editorial_comp\"\n                }\n              ],\n              \"country\": \"USA\"\n            };\n\n            editorialApi.licenseEditorialImage(body)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $body = [\n              \"editorial\" =\u003e [\n                [\n                  \"editorial_id\" =\u003e \"8594090h\",\n                  \"license\" =\u003e \"premier_editorial_comp\"\n                ]\n              ],\n              \"country\" =\u003e \"USA\"\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/editorial/images/licenses\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"editorial\": [\n                {\n                  \"editorial_id\": \"8594090h\",\n                  \"license\": \"premier_editorial_comp\"\n                }\n              ],\n              \"country\": \"USA\"\n            }' \u003e data.json\n\n            shutterstock editorial license-editorial-images data.json\n  /v2/editorial/images/livefeeds:\n    get:\n      operationId: getEditorialImageLivefeedList\n      parameters:\n        - description: Returns only livefeeds that are available for distribution in a certain country\n          example: USA\n          in: query\n          name: country\n          required: true\n          schema:\n            format: country-code-3\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 50\n            minimum: 1\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - cover_item:\n                          height: 170\n                          id: 9938080a\n                          url: https://editorial01.shutterstock.com/thumb/9938080a/532b2be1/Shutterstock_9938080a.jpg\n                          width: 113\n                        created_time: 2018-10-19T20:27:26+00:00\n                        id: 2018%2F10%2F19%2F'Butterfly'%20photocall%2C%20Rome%20Film%20Festival\n                        name: \"'Butterfly' photocall, Rome Film Festival\"\n                        total_item_count: 24\n                    page: 1\n                    per_page: 1\n                    total_count: 6011\n              schema:\n                $ref: \"#/components/schemas/EditorialImageLivefeedList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get editorial livefeed list\n      tags:\n        - editorial_images\n  \"/v2/editorial/images/livefeeds/{id}\":\n    get:\n      operationId: getEditorialImageLivefeed\n      parameters:\n        - description: Editorial livefeed ID; must be an URI encoded string\n          example: 2018%2F10%2F15%2FWomen%20of%20the%20Year%20Lunch%20%26%20Awards%2C%20London\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Returns only if the livefeed is available for distribution in a certain country\n          example: USA\n          in: query\n          name: country\n          required: true\n          schema:\n            format: country-code-3\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    cover_item:\n                      height: 170\n                      id: 9938511p\n                      url: https://editorial01.shutterstock.com/thumb/9938511p/7d1f17d9/Shutterstock_9938511p.jpg\n                      width: 114\n                    id: 2018%2F10%2F19%2F'The%20House%20with%20a%20Clock%20in%20Its%20Walls'%20premiere%2C%20Rome%20Film%20Festival\n                    name: \"'The House with a Clock in Its Walls' premiere, Rome Film Festival\"\n                    total_item_count: 100\n              schema:\n                $ref: \"#/components/schemas/EditorialImageLivefeed\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get editorial livefeed\n      tags:\n        - editorial_images\n  \"/v2/editorial/images/livefeeds/{id}/items\":\n    get:\n      operationId: getEditorialImageLivefeedItems\n      parameters:\n        - description: Editorial livefeed ID; must be an URI encoded string\n          example: 2018%2F10%2F15%2FWomen%20of%20the%20Year%20Lunch%20%26%20Awards%2C%20London\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Returns only if the livefeed items are available for distribution in a certain country\n          example: USA\n          in: query\n          name: country\n          required: true\n          schema:\n            format: country-code-3\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 0.666\n                        assets:\n                          medium_jpg:\n                            display_name: Med\n                            height: 1000\n                            is_licensable: true\n                            width: 660\n                          original:\n                            display_name: Original\n                            height: 4928\n                            is_licensable: true\n                            width: 3280\n                          small_jpg:\n                            display_name: Small\n                            height: 500\n                            is_licensable: true\n                            width: 332\n                          thumb_170:\n                            height: 170\n                            url: https://editorial01.shutterstock.com/thumb/9938573m/4d5708ce/Shutterstock_9938573m.jpg\n                            width: 113\n                          thumb_220:\n                            height: 220\n                            url: https://editorial01.shutterstock.com/thumb-220/9938573m/b78aabde/Shutterstock_9938573m.jpg\n                            width: 146\n                          watermark_1500:\n                            height: 1500\n                            url: https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg\n                            width: 1040\n                          watermark_450:\n                            height: 450\n                            url: https://editorial01.shutterstock.com/wm-preview-450/9938573m/4a9a4add/Shutterstock_9938573m.jpg\n                            width: 300\n                        byline: Maurizio D'Avanzo/IPA/Shutterstock\n                        caption: \"\"\n                        categories:\n                          - name: Actor\n                          - name: Female\n                          - name: Personality\n                        date_taken: 2018-10-19\n                        description: Christian Marazziti and Ariadna Romero\n                        id: 9938573m\n                        keywords: []\n                        title: \"'The House with a Clock in Its Walls' premiere, Rome Film Festival, Italy - 19 Oct 2018\"\n              schema:\n                $ref: \"#/components/schemas/EditorialImageContentDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get editorial livefeed items\n      tags:\n        - editorial_images\n  /v2/editorial/images/search:\n    get:\n      description: This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.\n      operationId: searchEditorialImages\n      parameters:\n        - description: One or more search terms separated by spaces\n          example: The Academy Awards\n          in: query\n          name: query\n          schema:\n            type: string\n        - description: Sort by\n          in: query\n          name: sort\n          schema:\n            default: relevant\n            enum:\n              - relevant\n              - newest\n              - oldest\n            type: string\n        - description: Show editorial content within a certain editorial category; specify by category name\n          in: query\n          name: category\n          schema:\n            type: string\n        - description: Show only editorial content that is available for distribution in a certain country\n          example: USA\n          in: query\n          name: country\n          required: true\n          schema:\n            format: country-code-3\n            type: string\n        - description: Show only editorial content from certain suppliers\n          in: query\n          name: supplier_code\n          schema:\n            items:\n              type: string\n            type: array\n        - description: Show only editorial content generated on or after a specific date\n          example: 2020-05-29\n          in: query\n          name: date_start\n          schema:\n            format: date\n            type: string\n        - description: Show only editorial content generated on or before a specific date\n          example: 2021-05-29\n          in: query\n          name: date_end\n          schema:\n            format: date\n            type: string\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 50\n            minimum: 1\n            type: integer\n        - description: The cursor of the page with which to start fetching results; this cursor is returned from previous requests\n          example: eyJ2IjoxLCJzIjoxfQ==\n          in: query\n          name: cursor\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 1.481\n                        assets:\n                          medium_jpg:\n                            display_name: Med\n                            height: 675\n                            is_licensable: true\n                            width: 1000\n                          original:\n                            display_name: Original\n                            height: 3263\n                            is_licensable: true\n                            width: 4831\n                          small_jpg:\n                            display_name: Small\n                            height: 337\n                            is_licensable: true\n                            width: 500\n                          thumb_170:\n                            height: 115\n                            url: https://editorial01.shutterstock.com/thumb/9804979n/c4377a53/Shutterstock_9804979n.jpg\n                            width: 170\n                          thumb_220:\n                            height: 149\n                            url: https://editorial01.shutterstock.com/thumb-220/9804979n/c57a68c7/Shutterstock_9804979n.jpg\n                            width: 220\n                          watermark_1500:\n                            height: 1500\n                            url: https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg\n                            width: 1040\n                          watermark_450:\n                            height: 304\n                            url: https://editorial01.shutterstock.com/wm-preview-450/9804979n/37d19dce/Shutterstock_9804979n.jpg\n                            width: 450\n                        byline: ALEX HOFFORD/EPA-EFE/Shutterstock\n                        caption: \"\"\n                        categories: []\n                        date_taken: 2018-08-24\n                        description: Members of the TyLoo e-Sports team from China prepare to face off against the Kinguin e-Sports team from Poland at the ICBC (Asia) e-Sports and Music Festival Hong Kong 2018, Hong Kong, China, 24 August 2018. The festival runs from 24 to 26 August with professional gamers from around the world competing in international e-sports tournaments.\n                        id: 9804979n\n                        keywords: []\n                        title: Hong Kong kicks off international e-Sports competition, China - 24 Aug 2018\n                    next: eyJ2IjoxLCJzIjoxfQ==\n                    per_page: 1\n                    prev: \"\"\n                    search_id: q8igACM5gqQY75owjLoVvw\n                    total_count: 1556949\n              schema:\n                $ref: \"#/components/schemas/EditorialSearchResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"406\":\n          description: Not Acceptable\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Search editorial images\n      tags:\n        - editorial_images\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET https://api.shutterstock.com/v2/editorial/images/search \\\n            -H \"Accept: application/json\" \\\n            -G \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            --data-urlencode \"query=football\" \\\n            --data-urlencode \"country=USA\" \\\n            --data-urlencode \"sort=newest\" \\\n            --data-urlencode \"date_start=2018-10-23\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const editorialApi = new sstk.EditorialApi();\n\n            const queryParams = {\n              \"query\": \"football\",\n              \"country\": \"USA\",\n              \"sort\": \"newest\",\n              \"date_start\": \"2018-10-23\"\n            };\n\n            const country = \"USA\";\n\n            editorialApi.editorialImagesSearch(country, queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $queryFields = [\n              \"query\" =\u003e \"football\",\n              \"country\" =\u003e \"USA\",\n              \"date_start\" =\u003e \"2018-10-23\",\n              \"sort\" =\u003e \"newest\"\n            ];\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/editorial/images/search?\" . http_build_query($queryFields),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock editorial search-editorial-images --country USA --sort newest --query football --date-start 2018-10-23\n  /v2/editorial/images/updated:\n    get:\n      description: This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.\n      operationId: getUpdatedEditorialImages\n      parameters:\n        - description: Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted\n          example: edit\n          in: query\n          name: type\n          required: true\n          schema:\n            enum:\n              - edit\n              - addition\n            type: string\n        - description: Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.\n          example: 2021-03-29T13:25:13.521Z\n          in: query\n          name: date_updated_start\n          required: true\n          schema:\n            format: date-time\n            type: string\n        - description: Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.\n          example: 2021-03-29T13:25:13.521Z\n          in: query\n          name: date_updated_end\n          required: true\n          schema:\n            format: date-time\n            type: string\n        - description: Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets\n          example: 2020-02-04\n          in: query\n          name: date_taken_start\n          schema:\n            pattern: ^[0-9]{4}-[0-1][0-9]-[0-3][0-9]$\n            type: string\n        - description: Show images that were taken before the specified date\n          example: 2020-02-05\n          in: query\n          name: date_taken_end\n          schema:\n            pattern: ^[0-9]{4}-[0-1][0-9]-[0-3][0-9]$\n            type: string\n        - description: The cursor of the page with which to start fetching results; this cursor is returned from previous requests\n          example: eyJ2IjoxLCJzIjoyfQ==\n          in: query\n          name: cursor\n          schema:\n            type: string\n        - description: Sort by\n          example: newest\n          in: query\n          name: sort\n          schema:\n            default: newest\n            enum:\n              - newest\n              - oldest\n            type: string\n        - description: Show only editorial content from certain suppliers\n          example: ABC\n          in: query\n          name: supplier_code\n          schema:\n            items:\n              maxLength: 5\n              type: string\n            type: array\n        - description: Show only editorial content that is available for distribution in a certain country\n          example: USA\n          in: query\n          name: country\n          required: true\n          schema:\n            format: country-code-3\n            type: string\n        - description: Number of results per page\n          example: 200\n          in: query\n          name: per_page\n          schema:\n            default: 500\n            maximum: 500\n            minimum: 100\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 1.481\n                        assets:\n                          medium_jpg:\n                            display_name: Med\n                            height: 675\n                            is_licensable: true\n                            width: 1000\n                          original:\n                            display_name: Original\n                            height: 3263\n                            is_licensable: true\n                            width: 4831\n                          small_jpg:\n                            display_name: Small\n                            height: 337\n                            is_licensable: true\n                            width: 500\n                          thumb_170:\n                            height: 115\n                            url: https://editorial01.shutterstock.com/thumb/9804979n/c4377a53/Shutterstock_9804979n.jpg\n                            width: 170\n                          thumb_220:\n                            height: 149\n                            url: https://editorial01.shutterstock.com/thumb-220/9804979n/c57a68c7/Shutterstock_9804979n.jpg\n                            width: 220\n                          watermark_1500:\n                            height: 1500\n                            url: https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg\n                            width: 1040\n                          watermark_450:\n                            height: 304\n                            url: https://editorial01.shutterstock.com/wm-preview-450/9804979n/37d19dce/Shutterstock_9804979n.jpg\n                            width: 450\n                        byline: ALEX HOFFORD/EPA-EFE/Shutterstock\n                        caption: \"\"\n                        categories: []\n                        commercial_status:\n                          status: available\n                        date_taken: 2018-08-24\n                        description: Members of the TyLoo e-Sports team from China prepare to face off against the Kinguin e-Sports team from Poland at the ICBC (Asia) e-Sports and Music Festival Hong Kong 2018, Hong Kong, China, 24 August 2018. The festival runs from 24 to 26 August with professional gamers from around the world competing in international e-sports tournaments.\n                        id: 9804979n\n                        keywords: []\n                        rights:\n                          countries: CAN,+DEU,+GBR,+USA,-*\n                        special_instructions: Minimum price 50 EUR\n                        supplier_code: EPA\n                        title: Hong Kong kicks off international e-Sports competition, China - 24 Aug 2018\n                        updated_time: 2019-07-15T20:04:44-04:00\n                        updates:\n                          - addition\n                    next: eyJ2IjoxLCJzIjoxfQ==\n                    per_page: 1\n                    prev: \"\"\n              schema:\n                $ref: \"#/components/schemas/EditorialUpdatedResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"406\":\n          description: Not Acceptable\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List updated content\n      tags:\n        - editorial_images\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET https://api.shutterstock.com/v2/editorial/images/updated \\\n            -H \"Accept: application/json\" \\\n            -G \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            --data-urlencode \"type=edit\" \\\n            --data-urlencode \"country=USA\" \\\n            --data-urlencode \"date_updated_start=2020-02-02T13:00:00Z\" \\\n            --data-urlencode \"date_updated_end=2020-02-02T15:00:00Z\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const editorialApi = new sstk.EditorialApi();\n\n            const type = \"edit\";\n            const dateUpdatedStart = \"2020-02-02T13:00:00Z\";\n            const dateUpdatedEnd = \"2020-02-02T15:00:00Z\";\n            const country = \"USA\";\n\n            editorialApi.getUpdatedImages(type, dateUpdatedStart, dateUpdatedEnd, country)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $queryFields = [\n              \"type\" =\u003e \"edit\",\n              \"country\" =\u003e \"USA\",\n              \"date_updated_start\" =\u003e \"2020-02-02T13:00:00Z\",\n              \"date_updated_end\" =\u003e \"2020-02-02T15:00:00Z\",\n            ];\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/editorial/images/updated?\" . http_build_query($queryFields),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock editorial get-updated-editorial-images --type edit --country USA --date-updated-start 2020-02-02T13:00:00Z --date-updated-end 2020-02-02T15:00:00Z\n  \"/v2/editorial/images/{id}\":\n    get:\n      description: This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.\n      operationId: getEditorialImage\n      parameters:\n        - description: Editorial ID\n          example: 9926131a\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Returns only if the content is available for distribution in a certain country\n          example: USA\n          in: query\n          name: country\n          required: true\n          schema:\n            format: country-code-3\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    aspect: 1.33\n                    assets:\n                      medium_jpg:\n                        display_name: Med\n                        height: 751\n                        is_licensable: true\n                        width: 1000\n                      original:\n                        display_name: Original\n                        height: 3447\n                        is_licensable: true\n                        width: 4586\n                      small_jpg:\n                        display_name: Small\n                        height: 375\n                        is_licensable: true\n                        width: 500\n                      thumb_170:\n                        height: 128\n                        url: https://editorial01.shutterstock.com/thumb/9767412v/36aeb953/Shutterstock_9767412v.jpg\n                        width: 170\n                      thumb_220:\n                        height: 165\n                        url: https://editorial01.shutterstock.com/thumb-220/9767412v/b786b189/Shutterstock_9767412v.jpg\n                        width: 220\n                      watermark_1500:\n                        height: 1500\n                        url: https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg\n                        width: 1040\n                      watermark_450:\n                        height: 338\n                        url: https://editorial01.shutterstock.com/wm-preview-450/9767412v/f75b6680/Shutterstock_9767412v.jpg\n                        width: 450\n                    byline: KIMIMASA MAYAMA/EPA-EFE/Shutterstock\n                    caption: \"\"\n                    categories: []\n                    date_taken: 2018-07-22\n                    description: Tokyo 2020 Olympics mascot Miraitowa greets with former Japanese prime minister Yoshiko Mori, President of Tokyo 2020 Olympics Committee, as mascots of Tokyo 2020 Olympics and Paralympics debut in Tokyo, Japan, 22 July 2018. Tokyo 2020 Olympics will start on 24 July 2020 and run until 09 August 2020.\n                    id: 9767412v\n                    keywords: []\n                    special_instructions: MINIMUM FEE $250 per image.\n                    title: Tokyo 2020 Olympics mascot Miraitowa and Paralympics mascot Someity debut, Japan - 22 Jul 2018\n              schema:\n                $ref: \"#/components/schemas/EditorialContent\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get editorial content details\n      tags:\n        - editorial_images\n  /v2/editorial/licenses:\n    post:\n      deprecated: true\n      description: Deprecated; use `POST /v2/editorial/images/licenses` instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license.\n      operationId: licenseEditorialImage\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  country: USA\n                  editorial:\n                    - editorial_id: 8594090h\n                      license: premier_editorial_comp\n            schema:\n              $ref: \"#/components/schemas/LicenseEditorialContentRequest\"\n        description: License editorial content\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - download:\n                          url: https://s3-eu-west-1.amazonaws.com/api-downloads.rexfeatures.com/[random-characters].jpg?Expires=1524717323\n                        editorial_id: \"69656358\"\n              schema:\n                $ref: \"#/components/schemas/LicenseEditorialContentResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"406\":\n          description: Not Acceptable\n      security:\n        - customer_accessCode:\n            - licenses.create\n      summary: (Deprecated) License editorial content\n      tags:\n        - editorial_images\n      x-code-samples:\n        - lang: shell\n          source: |-\n            DATA='{\n              \"editorial\": [\n                {\n                  \"editorial_id\": \"8594090h\",\n                  \"license\": \"premier_editorial_comp\"\n                }\n              ],\n              \"country\": \"USA\"\n            }'\n\n            curl -X POST https://api.shutterstock.com/v2/editorial/licenses \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const editorialApi = new sstk.EditorialApi();\n\n            const body = {\n              \"editorial\": [\n                {\n                  \"editorial_id\": \"8594090h\",\n                  \"license\": \"premier_editorial_comp\"\n                }\n              ],\n              \"country\": \"USA\"\n            };\n\n            editorialApi.licenseEditorialImage(body)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $body = [\n              \"editorial\" =\u003e [\n                [\n                  \"editorial_id\" =\u003e \"8594090h\",\n                  \"license\" =\u003e \"premier_editorial_comp\"\n                ]\n              ],\n              \"country\" =\u003e \"USA\"\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/editorial/licenses\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"editorial\": [\n                {\n                  \"editorial_id\": \"8594090h\",\n                  \"license\": \"premier_editorial_comp\"\n                }\n              ],\n              \"country\": \"USA\"\n            }' \u003e data.json\n\n\n            shutterstock editorial license-editorial-image data.json\n  /v2/editorial/livefeeds:\n    get:\n      deprecated: true\n      description: Deprecated; use `GET /v2/editorial/images/livefeeds` instead to get a list of editorial livefeeds.\n      operationId: getEditorialLivefeedList\n      parameters:\n        - description: Returns only livefeeds that are available for distribution in a certain country\n          example: USA\n          in: query\n          name: country\n          required: true\n          schema:\n            format: country-code-3\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 50\n            minimum: 1\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - cover_item:\n                          height: 170\n                          id: 9938080a\n                          url: https://editorial01.shutterstock.com/thumb/9938080a/532b2be1/Shutterstock_9938080a.jpg\n                          width: 113\n                        created_time: 2018-10-19T20:27:26+00:00\n                        id: 2018%2F10%2F19%2F'Butterfly'%20photocall%2C%20Rome%20Film%20Festival\n                        name: \"'Butterfly' photocall, Rome Film Festival\"\n                        total_item_count: 24\n                    page: 1\n                    per_page: 1\n                    total_count: 6011\n              schema:\n                $ref: \"#/components/schemas/EditorialLivefeedList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"406\":\n          description: Not Acceptable\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: (Deprecated) Get editorial livefeed list\n      tags:\n        - editorial_images\n  \"/v2/editorial/livefeeds/{id}\":\n    get:\n      deprecated: true\n      description: \"Deprecated: use `GET /v2/editorial/images/livefeeds/{id}` instead to get an editorial livefeed.\"\n      operationId: getEditorialLivefeed\n      parameters:\n        - description: Editorial livefeed ID; must be an URI encoded string\n          example: 2018%2F10%2F15%2FWomen%20of%20the%20Year%20Lunch%20%26%20Awards%2C%20London\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Returns only if the livefeed is available for distribution in a certain country\n          example: USA\n          in: query\n          name: country\n          required: true\n          schema:\n            format: country-code-3\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    cover_item:\n                      height: 170\n                      id: 9938511p\n                      url: https://editorial01.shutterstock.com/thumb/9938511p/7d1f17d9/Shutterstock_9938511p.jpg\n                      width: 114\n                    id: 2018%2F10%2F19%2F'The%20House%20with%20a%20Clock%20in%20Its%20Walls'%20premiere%2C%20Rome%20Film%20Festival\n                    name: \"'The House with a Clock in Its Walls' premiere, Rome Film Festival\"\n                    total_item_count: 100\n              schema:\n                $ref: \"#/components/schemas/EditorialLivefeed\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"406\":\n          description: Not Acceptable\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: (Deprecated) Get editorial livefeed\n      tags:\n        - editorial_images\n  \"/v2/editorial/livefeeds/{id}/items\":\n    get:\n      deprecated: true\n      description: Deprecated; use `GET /v2/editorial/images/livefeeds/{id}/items` instead to get editorial livefeed items.\n      operationId: getEditorialLivefeedItems\n      parameters:\n        - description: Editorial livefeed ID; must be an URI encoded string\n          example: 2018%2F10%2F15%2FWomen%20of%20the%20Year%20Lunch%20%26%20Awards%2C%20London\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Returns only if the livefeed items are available for distribution in a certain country\n          example: USA\n          in: query\n          name: country\n          required: true\n          schema:\n            format: country-code-3\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 0.666\n                        assets:\n                          medium_jpg:\n                            display_name: Med\n                            height: 1000\n                            is_licensable: true\n                            width: 660\n                          original:\n                            display_name: Original\n                            height: 4928\n                            is_licensable: true\n                            width: 3280\n                          small_jpg:\n                            display_name: Small\n                            height: 500\n                            is_licensable: true\n                            width: 332\n                          thumb_170:\n                            height: 170\n                            url: https://editorial01.shutterstock.com/thumb/9938573m/4d5708ce/Shutterstock_9938573m.jpg\n                            width: 113\n                          thumb_220:\n                            height: 220\n                            url: https://editorial01.shutterstock.com/thumb-220/9938573m/b78aabde/Shutterstock_9938573m.jpg\n                            width: 146\n                          watermark_1500:\n                            height: 1500\n                            url: https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg\n                            width: 1040\n                          watermark_450:\n                            height: 450\n                            url: https://editorial01.shutterstock.com/wm-preview-450/9938573m/4a9a4add/Shutterstock_9938573m.jpg\n                            width: 300\n                        byline: Maurizio D'Avanzo/IPA/Shutterstock\n                        caption: \"\"\n                        categories:\n                          - name: Actor\n                          - name: Female\n                          - name: Personality\n                        date_taken: 2018-10-19\n                        description: Christian Marazziti and Ariadna Romero\n                        id: 9938573m\n                        keywords: []\n                        title: \"'The House with a Clock in Its Walls' premiere, Rome Film Festival, Italy - 19 Oct 2018\"\n              schema:\n                $ref: \"#/components/schemas/EditorialContentDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"406\":\n          description: Not Acceptable\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: (Deprecated) Get editorial livefeed items\n      tags:\n        - editorial_images\n  /v2/editorial/search:\n    get:\n      deprecated: true\n      description: Deprecated; use `GET /v2/editorial/images/search` instead to search for editorial images.\n      operationId: searchEditorial\n      parameters:\n        - description: One or more search terms separated by spaces\n          in: query\n          name: query\n          schema:\n            type: string\n        - description: Sort by\n          in: query\n          name: sort\n          schema:\n            default: relevant\n            enum:\n              - relevant\n              - newest\n              - oldest\n            type: string\n        - description: Show editorial content within a certain editorial category; specify by category name\n          in: query\n          name: category\n          schema:\n            type: string\n        - description: Show only editorial content that is available for distribution in a certain country\n          example: USA\n          in: query\n          name: country\n          required: true\n          schema:\n            format: country-code-3\n            type: string\n        - description: Show only editorial content from certain suppliers\n          in: query\n          name: supplier_code\n          schema:\n            items:\n              type: string\n            type: array\n        - description: Show only editorial content generated on or after a specific date\n          in: query\n          name: date_start\n          schema:\n            format: date\n            type: string\n        - description: Show only editorial content generated on or before a specific date\n          in: query\n          name: date_end\n          schema:\n            format: date\n            type: string\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 50\n            minimum: 1\n            type: integer\n        - description: The cursor of the page with which to start fetching results; this cursor is returned from previous requests\n          in: query\n          name: cursor\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 1.481\n                        assets:\n                          medium_jpg:\n                            display_name: Med\n                            height: 675\n                            is_licensable: true\n                            width: 1000\n                          original:\n                            display_name: Original\n                            height: 3263\n                            is_licensable: true\n                            width: 4831\n                          small_jpg:\n                            display_name: Small\n                            height: 337\n                            is_licensable: true\n                            width: 500\n                          thumb_170:\n                            height: 115\n                            url: https://editorial01.shutterstock.com/thumb/9804979n/c4377a53/Shutterstock_9804979n.jpg\n                            width: 170\n                          thumb_220:\n                            height: 149\n                            url: https://editorial01.shutterstock.com/thumb-220/9804979n/c57a68c7/Shutterstock_9804979n.jpg\n                            width: 220\n                          watermark_1500:\n                            height: 1500\n                            url: https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg\n                            width: 1040\n                          watermark_450:\n                            height: 304\n                            url: https://editorial01.shutterstock.com/wm-preview-450/9804979n/37d19dce/Shutterstock_9804979n.jpg\n                            width: 450\n                        byline: ALEX HOFFORD/EPA-EFE/Shutterstock\n                        caption: \"\"\n                        categories: []\n                        date_taken: 2018-08-24\n                        description: Members of the TyLoo e-Sports team from China prepare to face off against the Kinguin e-Sports team from Poland at the ICBC (Asia) e-Sports and Music Festival Hong Kong 2018, Hong Kong, China, 24 August 2018. The festival runs from 24 to 26 August with professional gamers from around the world competing in international e-sports tournaments.\n                        id: 9804979n\n                        keywords: []\n                        title: Hong Kong kicks off international e-Sports competition, China - 24 Aug 2018\n                    next: eyJ2IjoxLCJzIjoxfQ==\n                    per_page: 1\n                    prev: \"\"\n                    search_id: q8igACM5gqQY75owjLoVvw\n                    total_count: 1556949\n              schema:\n                $ref: \"#/components/schemas/EditorialSearchResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"406\":\n          description: Not Acceptable\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: (Deprecated) Search editorial content\n      tags:\n        - editorial_images\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET https://api.shutterstock.com/v2/editorial/search \\\n            -H \"Accept: application/json\" \\\n            -G \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            --data-urlencode \"query=football\" \\\n            --data-urlencode \"country=USA\" \\\n            --data-urlencode \"sort=newest\" \\\n            --data-urlencode \"date_start=2018-10-23\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const editorialApi = new sstk.EditorialApi();\n\n            const queryParams = {\n              \"query\": \"football\",\n              \"country\": \"USA\",\n              \"sort\": \"newest\",\n              \"date_start\": \"2018-10-23\"\n            };\n\n            const country = \"USA\";\n\n            editorialApi.searchEditorial(country, queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $queryFields = [\n              \"query\" =\u003e \"football\",\n              \"country\" =\u003e \"USA\",\n              \"date_start\" =\u003e \"2018-10-23\",\n              \"sort\" =\u003e \"newest\"\n            ];\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/editorial/search?\" . http_build_query($queryFields),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock editorial search-editorial --country USA --sort newest --query football --date-start 2018-10-23\n  /v2/editorial/updated:\n    get:\n      deprecated: true\n      description: Deprecated; use `GET /v2/editorial/images/updated` instead to get recently updated items.\n      parameters:\n        - description: Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted\n          example: edit\n          in: query\n          name: type\n          required: true\n          schema:\n            enum:\n              - edit\n              - addition\n            type: string\n        - description: Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.\n          example: 2021-03-29T13:25:13.521Z\n          in: query\n          name: date_updated_start\n          required: true\n          schema:\n            format: date-time\n            type: string\n        - description: Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.\n          example: 2021-03-29T13:25:13.521Z\n          in: query\n          name: date_updated_end\n          required: true\n          schema:\n            format: date-time\n            type: string\n        - description: Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets\n          example: 2020-02-04\n          in: query\n          name: date_taken_start\n          schema:\n            pattern: ^[0-9]{4}-[0-1][0-9]-[0-3][0-9]$\n            type: string\n        - description: Show images that were taken before the specified date\n          example: 2020-02-05\n          in: query\n          name: date_taken_end\n          schema:\n            pattern: ^[0-9]{4}-[0-1][0-9]-[0-3][0-9]$\n            type: string\n        - description: The cursor of the page with which to start fetching results; this cursor is returned from previous requests\n          example: eyJ2IjoxLCJzIjoyfQ==\n          in: query\n          name: cursor\n          schema:\n            type: string\n        - description: Sort by\n          example: newest\n          in: query\n          name: sort\n          schema:\n            default: newest\n            enum:\n              - newest\n              - oldest\n            type: string\n        - description: Show only editorial content from certain suppliers\n          example: ABC\n          in: query\n          name: supplier_code\n          schema:\n            items:\n              maxLength: 5\n              type: string\n            type: array\n        - description: Show only editorial content that is available for distribution in a certain country\n          example: USA\n          in: query\n          name: country\n          required: true\n          schema:\n            format: country-code-3\n            type: string\n        - description: Number of results per page\n          example: 200\n          in: query\n          name: per_page\n          schema:\n            default: 500\n            maximum: 500\n            minimum: 100\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 1.481\n                        assets:\n                          medium_jpg:\n                            display_name: Med\n                            height: 675\n                            is_licensable: true\n                            width: 1000\n                          original:\n                            display_name: Original\n                            height: 3263\n                            is_licensable: true\n                            width: 4831\n                          small_jpg:\n                            display_name: Small\n                            height: 337\n                            is_licensable: true\n                            width: 500\n                          thumb_170:\n                            height: 115\n                            url: https://editorial01.shutterstock.com/thumb/9804979n/c4377a53/Shutterstock_9804979n.jpg\n                            width: 170\n                          thumb_220:\n                            height: 149\n                            url: https://editorial01.shutterstock.com/thumb-220/9804979n/c57a68c7/Shutterstock_9804979n.jpg\n                            width: 220\n                          watermark_1500:\n                            height: 1500\n                            url: https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg\n                            width: 1040\n                          watermark_450:\n                            height: 304\n                            url: https://editorial01.shutterstock.com/wm-preview-450/9804979n/37d19dce/Shutterstock_9804979n.jpg\n                            width: 450\n                        byline: ALEX HOFFORD/EPA-EFE/Shutterstock\n                        caption: \"\"\n                        categories: []\n                        commercial_status:\n                          status: available\n                        date_taken: 2018-08-24\n                        description: Members of the TyLoo e-Sports team from China prepare to face off against the Kinguin e-Sports team from Poland at the ICBC (Asia) e-Sports and Music Festival Hong Kong 2018, Hong Kong, China, 24 August 2018. The festival runs from 24 to 26 August with professional gamers from around the world competing in international e-sports tournaments.\n                        id: 9804979n\n                        keywords: []\n                        rights:\n                          countries: CAN,+DEU,+GBR,+USA,-*\n                        supplier_code: EPA\n                        title: Hong Kong kicks off international e-Sports competition, China - 24 Aug 2018\n                        updated_time: 2019-07-15T20:04:44-04:00\n                        updates:\n                          - addition\n                    next: eyJ2IjoxLCJzIjoxfQ==\n                    per_page: 1\n                    prev: \"\"\n              schema:\n                $ref: \"#/components/schemas/EditorialUpdatedResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"406\":\n          description: Not Acceptable\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: (Deprecated) List updated content\n      tags:\n        - editorial_images\n      x-code-samples:\n        - lang: shell\n          source: |-\n            curl -X GET https://api.shutterstock.com/v2/editorial/updated \\\n            -H \"Accept: application/json\" \\\n            -G \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            --data-urlencode \"type=edit\" \\\n            --data-urlencode \"country=USA\" \\\n            --data-urlencode \"date_updated_start=2020-02-02T13:00:00Z\" \\\n            --data-urlencode \"date_updated_end=2020-02-02T15:00:00Z\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const editorialApi = new sstk.EditorialApi();\n\n            const type = \"edit\";\n            const dateUpdatedStart = \"2020-02-02T13:00:00Z\";\n            const dateUpdatedEnd = \"2020-02-02T15:00:00Z\";\n            const country = \"USA\";\n\n            editorialApi.getUpdatedImages(type, dateUpdatedStart, dateUpdatedEnd, country)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $queryFields = [\n              \"type\" =\u003e \"edit\",\n              \"country\" =\u003e \"USA\",\n              \"date_updated_start\" =\u003e \"2020-02-02T13:00:00Z\",\n              \"date_updated_end\" =\u003e \"2020-02-02T15:00:00Z\",\n            ];\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/editorial/updated?\" . http_build_query($queryFields),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock editorial get-updated-images --type edit --country USA --date-updated-start 2020-02-02T13:00:00Z --date-updated-end 2020-02-02T15:00:00Z\n  /v2/editorial/videos/categories:\n    get:\n      description: This endpoint lists the categories that editorial videos can belong to, which are separate from the categories that other types of assets can belong to.\n      operationId: listEditorialVideoCategories\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - name: Animal\n                      - name: Awards\n                      - name: Art\n                      - name: Film Stills\n              schema:\n                $ref: \"#/components/schemas/EditorialVideoCategoryResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List editorial video categories\n      tags:\n        - editorial_video\n  /v2/editorial/videos/licenses:\n    get:\n      description: This endpoint lists existing editorial video licenses.\n      operationId: getEditorialVideoLicenseList\n      parameters:\n        - description: Show licenses for the specified editorial video ID\n          example: \"12345678\"\n          in: query\n          name: video_id\n          schema:\n            type: string\n        - description: Show editorial videos that are available with the specified license name\n          example: premier_editorial_all_media\n          in: query\n          name: license\n          schema:\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 200\n            minimum: 0\n            type: integer\n        - description: Sort order\n          in: query\n          name: sort\n          schema:\n            default: newest\n            enum:\n              - newest\n              - oldest\n            type: string\n        - description: Filter licenses by username of licensee\n          example: aUniqueUsername\n          in: query\n          name: username\n          schema:\n            type: string\n        - description: Show licenses created on or after the specified date\n          example: 2021-03-29T13:25:13.521Z\n          in: query\n          name: start_date\n          schema:\n            format: date-time\n            type: string\n        - description: Show licenses created before the specified date\n          example: 2021-03-29T13:25:13.521Z\n          in: query\n          name: end_date\n          schema:\n            format: date-time\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - download_time: 2020-12-18T02:22:56.000Z\n                        id: e1dbb15d5384725d292cf64f793ac45062\n                        image:\n                          format:\n                            size: original\n                          id: 11231389im\n                        is_downloadable: false\n                        license: premier_editorial_all_digital\n                        metadata:\n                          client: Company A\n                          job: Important project\n                          other: Important media\n                          purchase_order: \"457234\"\n                        subscription_id: 1221a491741j1k41yd91dh37al324\n                        user:\n                          username: username1\n                      - download_time: 2020-12-11T01:24:22.000Z\n                        id: e1dbb15d5384725d292cf64f793ac45114\n                        is_downloadable: false\n                        license: premier_editorial_all_digital\n                        metadata:\n                          client: Company B\n                          job: Important project\n                          other: Important image\n                          purchase_order: \"5583831\"\n                        subscription_id: 1221a491741j1k41yd91dh37al324\n                        user:\n                          username: username2\n                        video:\n                          format:\n                            size: original\n                          id: 11231442aa\n                    page: 1\n                    per_page: 2\n              schema:\n                $ref: \"#/components/schemas/DownloadHistoryDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - licenses.view\n      summary: List editorial video licenses\n      tags:\n        - editorial_video\n    post:\n      description: This endpoint gets licenses for one or more editorial videos. You must specify the country and one or more editorial videos to license.\n      operationId: licenseEditorialVideo\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  country: USA\n                  editorial:\n                    - editorial_id: 8594090h\n                      license: premier_editorial_video_comp\n            schema:\n              $ref: \"#/components/schemas/LicenseEditorialVideoContentRequest\"\n        description: License editorial video content\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - download:\n                          url: https://s3-eu-west-1.amazonaws.com/api-downloads.rexfeatures.com/[random-characters].mov?Expires=1524717323\n                        editorial_id: \"69656358\"\n              schema:\n                $ref: \"#/components/schemas/LicenseEditorialContentResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - licenses.create\n            - purchases.view\n      summary: License editorial video content\n      tags:\n        - editorial_video\n      x-code-samples:\n        - lang: shell\n          source: |-\n            DATA='{\n              \"editorial\": [\n                {\n                  \"editorial_id\": \"8594090h\",\n                  \"license\": \"premier_editorial_video_comp\"\n                }\n              ],\n              \"country\": \"USA\"\n            }'\n\n            curl -X POST https://api.shutterstock.com/v2/editorial/videos/licenses \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const editorialApi = new sstk.EditorialApi();\n\n            const body = {\n              \"editorial\": [\n                {\n                  \"editorial_id\": \"10687492a\",\n                  \"license\": \"premier_editorial_video_comp\"\n                }\n              ],\n              \"country\": \"USA\"\n            };\n\n            editorialApi.licenseEditorialVideo(body)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $body = [\n              \"editorial\" =\u003e [\n                [\n                  \"editorial_id\" =\u003e \"10687492a\",\n                  \"license\" =\u003e \"premier_editorial_video_comp\"\n                ]\n              ],\n              \"country\" =\u003e \"USA\"\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/editorial/videos/licenses\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"editorial\": [\n                {\n                  \"editorial_id\": \"8594090h\",\n                  \"license\": \"premier_editorial_video_comp\"\n                }\n              ],\n              \"country\": \"USA\"\n            }' \u003e data.json\n\n            shutterstock editorial license-editorial-video data.json\n  /v2/editorial/videos/search:\n    get:\n      description: This endpoint searches for editorial videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.\n      operationId: searchEditorialVideos\n      parameters:\n        - description: One or more search terms separated by spaces\n          example: The Academy Awards\n          in: query\n          name: query\n          schema:\n            type: string\n        - description: Sort by\n          in: query\n          name: sort\n          schema:\n            default: relevant\n            enum:\n              - relevant\n              - newest\n              - oldest\n            type: string\n        - description: Show editorial video content within a certain editorial category; specify by category name\n          in: query\n          name: category\n          schema:\n            type: string\n        - description: Show only editorial video content that is available for distribution in a certain country\n          example: USA\n          in: query\n          name: country\n          required: true\n          schema:\n            format: country-code-3\n            type: string\n        - description: Show only editorial video content from certain suppliers\n          in: query\n          name: supplier_code\n          schema:\n            items:\n              type: string\n            type: array\n        - description: Show only editorial video content generated on or after a specific date\n          example: 2020-05-29\n          in: query\n          name: date_start\n          schema:\n            format: date\n            type: string\n        - description: Show only editorial video content generated on or before a specific date\n          example: 2021-05-29\n          in: query\n          name: date_end\n          schema:\n            format: date\n            type: string\n        - description: Show only editorial video content with specific resolution\n          example: 4k\n          in: query\n          name: resolution\n          schema:\n            enum:\n              - 4k\n              - high_definition\n              - standard_definition\n            type: string\n        - description: Show only editorial video content generated with specific frames per second\n          example: 24\n          in: query\n          name: fps\n          schema:\n            type: number\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 50\n            minimum: 1\n            type: integer\n        - description: The cursor of the page with which to start fetching results; this cursor is returned from previous requests\n          example: eyJ2IjoxLCJzIjoxfQ==\n          in: query\n          name: cursor\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 1.778\n                        assets:\n                          original:\n                            display_name: HD\n                            file_size: 124452018\n                            format: avc1\n                            fps: 29.937\n                            height: 1080\n                            is_licensable: true\n                            width: 1920\n                          preview_mp4:\n                            url: https://qa.editorial-cdn.shuttercorp.net/wm-preview-mp4/10679336a/M8TbAb3aNaj2g5w4ODgwMzg=/Shutterstock_10679336a.mp4\n                          preview_webm:\n                            url: https://qa.editorial-cdn.shuttercorp.net/wm-preview-webm/10679336a/M5T3Ab36N4jbgcwbODgwMzg=/Shutterstock_10679336a.webm\n                          thumb_jpg:\n                            url: https://qa.editorial-cdn.shuttercorp.net/thumb-1/10679336a/M5T6Ad37Ncj5g3w1ODgwMzg=/Shutterstock_10679336a.jpg\n                        byline: ViralHog/Shutterstock\n                        caption: \"\"\n                        categories: []\n                        date_taken: 2020-10-28\n                        description: 'Info from Licensor: \"In June, we rescued this 2 year old male boxer from spending most of his days in a crate. Our 2 adult female boxers helped him adjust to living a good boxer life with our family. He \"thanked\" us with this surprise litter of 8 puppies! He has really done amazingly well with playing with all the puppies, and I think he will miss them when they go to their \"fur-ever\" homes. It was a perfect day of playing in the backyard at the end of October 2020.\"'\n                        id: 10679336a\n                        keywords:\n                          - adorable\n                          - cute\n                          - doggo\n                          - doggy\n                          - dogs\n                          - domesticated animals\n                          - entertainment\n                          - feel good\n                          - grass\n                          - new oxford\n                          - pennsylvania\n                          - pets\n                          - played\n                          - playing\n                          - plays\n                          - pup\n                          - puppies\n                          - puppy\n                          - sweet\n                          - usa\n                          - viralhog\n                          - virals\n                          - yard\n                        title: Proud Papa Playing with His Puppies, New Oxford, Pennsylvania, USA - 28 Oct 2020\n                    next: eyJ2IjoxLCJzIjoxfQ==\n                    per_page: 1\n                    prev: \"\"\n                    search_id: q8igACM5gqQY75owjLoVvw\n                    total_count: 1556949\n              schema:\n                $ref: \"#/components/schemas/EditorialVideoSearchResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"406\":\n          description: Not Acceptable\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Search editorial video content\n      tags:\n        - editorial_video\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET https://api.shutterstock.com/v2/editorial/videos/search \\\n            -H \"Accept: application/json\" \\\n            -G \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            --data-urlencode \"query=football\" \\\n            --data-urlencode \"country=USA\" \\\n            --data-urlencode \"sort=newest\" \\\n            --data-urlencode \"date_start=2018-10-23\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const editorialApi = new sstk.EditorialVideoApi();\n\n            const queryParams = {\n              \"query\": \"football\",\n              \"country\": \"USA\",\n              \"sort\": \"newest\",\n              \"date_start\": \"2018-10-23\"\n            };\n\n            const country = \"USA\";\n\n            editorialApi.searchEditorialVideos(country, queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $queryFields = [\n              \"query\" =\u003e \"football\",\n              \"country\" =\u003e \"USA\",\n              \"date_start\" =\u003e \"2018-10-23\",\n              \"sort\" =\u003e \"newest\"\n            ];\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/editorial/videos/search?\" . http_build_query($queryFields),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock editorial search-editorial-videos --country USA --sort newest --query football --date-start 2018-10-23\n  \"/v2/editorial/videos/{id}\":\n    get:\n      description: This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.\n      operationId: getEditorialVideo\n      parameters:\n        - description: Editorial ID\n          example: 9926131a\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Returns only if the content is available for distribution in a certain country\n          example: USA\n          in: query\n          name: country\n          required: true\n          schema:\n            format: country-code-3\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    aspect: 1.778\n                    assets:\n                      original:\n                        display_name: HD\n                        file_size: 124452018\n                        format: avc1\n                        fps: 29.937\n                        height: 1080\n                        is_licensable: true\n                        width: 1920\n                      preview_mp4:\n                        url: https://qa.editorial-cdn.shuttercorp.net/wm-preview-mp4/10679336a/M8TbAb3aNaj2g5w4ODgwMzg=/Shutterstock_10679336a.mp4\n                      preview_webm:\n                        url: https://qa.editorial-cdn.shuttercorp.net/wm-preview-webm/10679336a/M5T3Ab36N4jbgcwbODgwMzg=/Shutterstock_10679336a.webm\n                      thumb_jpg:\n                        url: https://qa.editorial-cdn.shuttercorp.net/thumb-1/10679336a/M5T6Ad37Ncj5g3w1ODgwMzg=/Shutterstock_10679336a.jpg\n                    byline: ViralHog/Shutterstock\n                    caption: \"\"\n                    categories: []\n                    date_taken: 2020-10-28\n                    description: 'Info from Licensor: \"In June, we rescued this 2 year old male boxer from spending most of his days in a crate. Our 2 adult female boxers helped him adjust to living a good boxer life with our family. He \"thanked\" us with this surprise litter of 8 puppies! He has really done amazingly well with playing with all the puppies, and I think he will miss them when they go to their \"fur-ever\" homes. It was a perfect day of playing in the backyard at the end of October 2020.\"'\n                    id: 10679336a\n                    keywords:\n                      - adorable\n                      - cute\n                      - doggo\n                      - doggy\n                      - dogs\n                      - domesticated animals\n                      - entertainment\n                      - feel good\n                      - grass\n                      - new oxford\n                      - pennsylvania\n                      - pets\n                      - played\n                      - playing\n                      - plays\n                      - pup\n                      - puppies\n                      - puppy\n                      - sweet\n                      - usa\n                      - viralhog\n                      - virals\n                      - yard\n                    title: Proud Papa Playing with His Puppies, New Oxford, Pennsylvania, USA - 28 Oct 2020\n              schema:\n                $ref: \"#/components/schemas/EditorialVideoContent\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"406\":\n          description: Not Acceptable\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get editorial video content details\n      tags:\n        - editorial_video\n  \"/v2/editorial/{id}\":\n    get:\n      deprecated: true\n      description: Deprecated; use `GET /v2/editorial/images/{id}` instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.\n      parameters:\n        - description: Editorial ID\n          example: 9926131a\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Returns only if the content is available for distribution in a certain country\n          example: USA\n          in: query\n          name: country\n          required: true\n          schema:\n            format: country-code-3\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    aspect: 1.33\n                    assets:\n                      medium_jpg:\n                        display_name: Med\n                        height: 751\n                        is_licensable: true\n                        width: 1000\n                      original:\n                        display_name: Original\n                        height: 3447\n                        is_licensable: true\n                        width: 4586\n                      small_jpg:\n                        display_name: Small\n                        height: 375\n                        is_licensable: true\n                        width: 500\n                      thumb_170:\n                        height: 128\n                        url: https://editorial01.shutterstock.com/thumb/9767412v/36aeb953/Shutterstock_9767412v.jpg\n                        width: 170\n                      thumb_220:\n                        height: 165\n                        url: https://editorial01.shutterstock.com/thumb-220/9767412v/b786b189/Shutterstock_9767412v.jpg\n                        width: 220\n                      watermark_1500:\n                        height: 1500\n                        url: https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg\n                        width: 1040\n                      watermark_450:\n                        height: 338\n                        url: https://editorial01.shutterstock.com/wm-preview-450/9767412v/f75b6680/Shutterstock_9767412v.jpg\n                        width: 450\n                    byline: KIMIMASA MAYAMA/EPA-EFE/Shutterstock\n                    caption: \"\"\n                    categories: []\n                    date_taken: 2018-07-22\n                    description: Tokyo 2020 Olympics mascot Miraitowa greets with former Japanese prime minister Yoshiko Mori, President of Tokyo 2020 Olympics Committee, as mascots of Tokyo 2020 Olympics and Paralympics debut in Tokyo, Japan, 22 July 2018. Tokyo 2020 Olympics will start on 24 July 2020 and run until 09 August 2020.\n                    id: 9767412v\n                    keywords: []\n                    title: Tokyo 2020 Olympics mascot Miraitowa and Paralympics mascot Someity debut, Japan - 22 Jul 2018\n              schema:\n                $ref: \"#/components/schemas/EditorialContent\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: (Deprecated) Get editorial content details\n      tags:\n        - editorial_images\n  /v2/images:\n    get:\n      description: This endpoint lists information about one or more images, including the available sizes.\n      operationId: getImageList\n      parameters:\n        - description: One or more image IDs\n          example:\n            - \"1110335168\"\n            - \"465011609\"\n          in: query\n          name: id\n          required: true\n          schema:\n            items:\n              type: string\n            type: array\n        - description: Amount of detail to render in the response\n          example: minimal\n          in: query\n          name: view\n          schema:\n            default: minimal\n            enum:\n              - minimal\n              - full\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 0.8501\n                        assets:\n                          huge_thumb:\n                            height: 260\n                            url: https://image.shutterstock.com/image-vector/happy-mid-autumn-festival-background-260nw-465011609.jpg\n                            width: 221\n                          large_thumb:\n                            height: 150\n                            url: https://thumb7.shutterstock.com/thumb_large/1384888/465011609/stock-vector-happy-mid-autumn-festival-background-with-golden-glitter-moon-and-hand-drawn-moon-rabbits-vector-465011609.jpg\n                            width: 128\n                          preview:\n                            height: 450\n                            url: https://image.shutterstock.com/display_pic_with_logo/1384888/465011609/stock-vector-happy-mid-autumn-festival-background-with-golden-glitter-moon-and-hand-drawn-moon-rabbits-vector-465011609.jpg\n                            width: 382\n                          preview_1000:\n                            height: 1000\n                            url: https://ak.picdn.net/shutterstock/photos/465011609/watermark_1000/e80e64e55f14aeb951feaf93ea337dc0/preview_1000-465011609.jpg\n                            width: 850\n                          preview_1500:\n                            height: 1500\n                            url: https://image.shutterstock.com/z/stock-vector-happy-mid-autumn-festival-background-with-golden-glitter-moon-and-hand-drawn-moon-rabbits-vector-465011609.jpg\n                            width: 1275\n                          small_thumb:\n                            height: 100\n                            url: https://thumb7.shutterstock.com/thumb_small/1384888/465011609/stock-vector-happy-mid-autumn-festival-background-with-golden-glitter-moon-and-hand-drawn-moon-rabbits-vector-465011609.jpg\n                            width: 85\n                        contributor:\n                          id: \"1384888\"\n                        description: Happy Mid Autumn Festival background with golden glitter Moon and hand drawn Moon Rabbits. Vector illustration\n                        has_model_release: false\n                        has_property_release: true\n                        id: \"465011609\"\n                        image_type: vector\n                        is_adult: false\n                        is_editorial: false\n                        is_illustration: true\n                        media_type: image\n                        url: https://www.shutterstock.com/image-photo/465011609\n              schema:\n                $ref: \"#/components/schemas/ImageDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List images\n      tags:\n        - images\n    post:\n      deprecated: true\n      description: Deprecated; use `POST /v2/cv/images` instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the `GET /v2/images/{id}/similar` endpoint.\n      operationId: uploadEphemeralImage\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  base64_image: R0lGODlhgACAAPcAAEwiBLyaLOzNUNmWFNjOrNSuN7x6PPzqeOTMgfKSDMyuTPzwsdi2dHwuBPzbVu\n            schema:\n              $ref: \"#/components/schemas/ImageCreateRequest\"\n        description: The image data in JPEG or PNG format\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    id: Udb14e1c3540bdbf82b4b3fe12d3a44f2\n              schema:\n                $ref: \"#/components/schemas/ImageCreateResponse\"\n          description: Created\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"413\":\n          description: Payload Too Large\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Upload ephemeral images\n      tags:\n        - computer_vision\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X POST 'https://api.shutterstock.com/v2/images' \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -H 'Content-Type: application/json' \\\n            -d \"{\\\"base64_image\\\":\\\"`base64 myImage.jpg | tr -d '\\n'`\\\"}\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const imagesApi = new sstk.ImagesApi();\n\n            const imageFile = fs.readFileSync(\"./myImage.jpg\");\n            const base64File = Buffer.from(imageFile).toString(\"base64\");\n\n            const body = new sstk.ImageCreateRequest(base64File);\n\n            const queryParams = {\n              \"page\": 1,\n              \"per_page\": 20,\n              \"view\": \"minimal\"\n            };\n\n            imagesApi.uploadEphemeralImage(body)\n              .then((data) =\u003e {\n                console.log(data.id);\n                return imagesApi.getSimilarImages(data.id, queryParams);\n              })\n              .then((similarImageData) =\u003e {\n                console.log(similarImageData);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $imageData = file_get_contents(\"myImage.jpg\");\n            $encodedImageData = base64_encode($imageData);\n\n            $body = [\n              \"base64_image\" =\u003e $encodedImageData\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/images\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo \"{\\\"base64_image\\\":\\\"`base64 myImage.jpg  | tr -d '\\n'`\\\"}\" \u003e data.json\n\n            shutterstock images upload-ephemeral-image data.json\n  /v2/images/categories:\n    get:\n      description: This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.\n      operationId: listImageCategories\n      parameters:\n        - description: Language for the keywords and categories in the response\n          example: es\n          in: query\n          name: language\n          schema:\n            $ref: \"#/components/schemas/Language\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - id: \"15\"\n                        name: Science\n                      - id: \"17\"\n                        name: Signs/Symbols\n                      - id: \"18\"\n                        name: Sports/Recreation\n                      - id: \"16\"\n                        name: Technology\n                      - id: \"0\"\n                        name: Transportation\n              schema:\n                $ref: \"#/components/schemas/CategoryDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List image categories\n      tags:\n        - images\n  /v2/images/collections:\n    get:\n      description: This endpoint lists your collections of images and their basic attributes.\n      operationId: getImageCollectionList\n      parameters:\n        - description: Which sharing information to include in the response, such as a URL to the collection\n          example: share_code\n          in: query\n          name: embed\n          schema:\n            items:\n              enum:\n                - share_code\n                - share_url\n              type: string\n            type: array\n        - description: Page number\n          example: 1\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          example: 2\n          in: query\n          name: per_page\n          schema:\n            default: 100\n            maximum: 150\n            minimum: 1\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - cover_item:\n                          added_time: 2018-09-11T15:55:23.000Z\n                          id: \"1715788\"\n                          media_type: image\n                        created_time: 2018-09-11T11:55:23-04:00\n                        id: \"21663574\"\n                        name: Kittens and puppies\n                        total_item_count: 1\n                        updated_time: 2018-09-11T11:55:51-04:00\n                      - created_time: 2021-06-09T17:13:17.000Z\n                        id: \"21663571\"\n                        name: young couples\n                        total_item_count: 0\n                        updated_time: 2018-08-02T07:33:22-04:00\n                    page: 1\n                    per_page: 100\n                    total_count: 2\n              schema:\n                $ref: \"#/components/schemas/CollectionDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - collections.view\n      summary: List image collections\n      tags:\n        - images\n    post:\n      description: This endpoint creates one or more image collections (lightboxes). To add images to the collections, use `POST /v2/images/collections/{id}/items`.\n      operationId: createImageCollection\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  name: My collection\n            schema:\n              $ref: \"#/components/schemas/CollectionCreateRequest\"\n        description: The names of the new collections\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    id: \"101202664\"\n              schema:\n                $ref: \"#/components/schemas/CollectionCreateResponse\"\n          description: Successfully created image collection\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Create image collections\n      tags:\n        - images\n      x-code-samples:\n        - lang: shell\n          source: |-\n            DATA='{\n              \"name\": \"My collection\"\n            }'\n\n            curl -X POST https://api.shutterstock.com/v2/images/collections \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const imagesApi = new sstk.ImagesApi();\n\n            const body = {\n              \"name\": \"My collection\"\n            };\n\n            imagesApi.createImageCollection(body)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $body = [\n              \"name\" =\u003e \"My collection\"\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/images/collections\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"name\": \"My collection\"\n            }' \u003e data.json\n\n            shutterstock images create-image-collection data.json\n  /v2/images/collections/featured:\n    get:\n      description: This endpoint lists featured collections of specific types and a name and cover image for each collection.\n      operationId: getFeaturedImageCollectionList\n      parameters:\n        - description: Which sharing information to include in the response, such as a URL to the collection\n          example: share_url\n          in: query\n          name: embed\n          schema:\n            enum:\n              - share_url\n            type: string\n        - description: The types of collections to return\n          example: photo\n          in: query\n          name: type\n          schema:\n            items:\n              enum:\n                - photo\n                - editorial\n                - vector\n              type: string\n            type: array\n        - description: Cover image size\n          example: 1x\n          in: query\n          name: asset_hint\n          schema:\n            default: 1x\n            enum:\n              - 1x\n              - 2x\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - cover_item:\n                          url: https://ak.picdn.net/assets/cms/ecedf10e57824db9516560f7523f084b445c1672-shutterstock_104947832.jpg\n                        created_time: 2018-03-06T19:19:02.000Z\n                        id: \"73497710\"\n                        items_updated_time: 2018-01-30T09:49:22-05:00\n                        name: Flower Still Lifes\n                        share_url: http://www.shutterstock.com/collections/73497710-flower-still-lifes.html\n                        total_item_count: 50\n                        updated_time: 2018-03-06T21:28:06.000Z\n                      - cover_item:\n                          url: https://ak.picdn.net/assets/cms/3aa67c2b92c7cead79da08b955f409269553fade-shutterstock_343681901.jpg\n                        created_time: 2018-03-06T18:54:19.000Z\n                        id: \"45566855\"\n                        items_updated_time: 2016-05-18T10:49:02-04:00\n                        name: Feeling Down\n                        share_url: http://www.shutterstock.com/collections/45566855-feeling-down.html\n                        total_item_count: 100\n                        updated_time: 2018-03-07T13:58:21.000Z\n              schema:\n                $ref: \"#/components/schemas/FeaturedCollectionDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List featured image collections\n      tags:\n        - images\n  \"/v2/images/collections/featured/{id}\":\n    get:\n      description: This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use `GET /v2/images/collections/featured/{id}/items`.\n      operationId: getFeaturedImageCollection\n      parameters:\n        - description: Collection ID\n          example: \"136351027\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Which sharing information to include in the response, such as a URL to the collection\n          in: query\n          name: embed\n          schema:\n            enum:\n              - share_url\n            type: string\n        - description: Cover image size\n          in: query\n          name: asset_hint\n          schema:\n            default: 1x\n            enum:\n              - 1x\n              - 2x\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    cover_item:\n                      url: https://ak.picdn.net/assets/cms/3aa67c2b92c7ceadd79da08b95d5f409269553fade-shutterstock_343681901.jpg\n                    created_time: 2018-03-06T18:54:19.000Z\n                    id: \"136351027\"\n                    items_updated_time: 2016-05-18T10:49:02-04:00\n                    name: Feeling Down\n                    total_item_count: 100\n                    updated_time: 2018-03-07T13:58:21.000Z\n              schema:\n                $ref: \"#/components/schemas/FeaturedCollection\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Featured collection not found\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get the details of featured image collections\n      tags:\n        - images\n  \"/v2/images/collections/featured/{id}/items\":\n    get:\n      description: This endpoint lists the IDs of images in a featured collection and the date that each was added.\n      operationId: getFeaturedImageCollectionItems\n      parameters:\n        - description: Collection ID\n          example: \"136351027\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 100\n            maximum: 150\n            minimum: 1\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - added_time: 2016-05-18T10:49:02-04:00\n                        id: \"2931777093\"\n                      - added_time: 2016-05-18T10:39:06-04:00\n                        id: \"4101383321\"\n                      - added_time: 2016-05-18T10:31:04-04:00\n                        id: \"1821077001\"\n                      - added_time: 2016-05-18T10:21:54-04:00\n                        id: \"3451984902\"\n              schema:\n                $ref: \"#/components/schemas/CollectionItemDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Featured collection not found\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get the contents of featured image collections\n      tags:\n        - images\n  \"/v2/images/collections/{id}\":\n    delete:\n      description: This endpoint deletes an image collection.\n      operationId: deleteImageCollection\n      parameters:\n        - description: Collection ID\n          example: \"136351027\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Successfully deleted collection\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Delete image collections\n      tags:\n        - images\n      x-code-samples:\n        - lang: shell\n          source: |-\n            curl -X DELETE https://api.shutterstock.com/v2/images/collections/136351027 \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const imagesApi = new sstk.ImagesApi();\n\n            const collectionId = \"136351027\"; // Collection ID\n\n            imagesApi.deleteImageCollection(collectionId)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/images/collections/136351027\",\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"DELETE\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock images delete-image-collection 136351027\n    get:\n      description: This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use `GET /v2/images/collections/{id}/items`.\n      operationId: getImageCollection\n      parameters:\n        - description: Collection ID\n          example: \"126351027\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Which sharing information to include in the response, such as a URL to the collection\n          in: query\n          name: embed\n          schema:\n            items:\n              enum:\n                - share_code\n                - share_url\n              type: string\n            type: array\n        - description: Code to retrieve a shared collection\n          in: query\n          name: share_code\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    cover_item:\n                      added_time: 2018-09-11T15:55:23.000Z\n                      id: \"954500\"\n                      media_type: image\n                    id: \"336351027\"\n                    name: My collection\n                    total_item_count: 1\n                    updated_time: 2017-05-17T16:28:39-04:00\n              schema:\n                $ref: \"#/components/schemas/Collection\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.view\n      summary: Get the details of image collections\n      tags:\n        - images\n    post:\n      description: This endpoint sets a new name for an image collection.\n      operationId: renameImageCollection\n      parameters:\n        - description: Collection ID\n          example: \"126351027\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  name: My new collection name\n            schema:\n              $ref: \"#/components/schemas/CollectionUpdateRequest\"\n        description: The new name for the collection\n        required: true\n      responses:\n        \"204\":\n          description: Successfully updated collection\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Rename image collections\n      tags:\n        - images\n      x-code-samples:\n        - lang: shell\n          source: |-\n            DATA='{\n              \"name\": \"My new collection name\"\n            }'\n\n            curl -X POST https://api.shutterstock.com/v2/images/collections/126351027 \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const imagesApi = new sstk.ImagesApi();\n\n            const collectionId = \"126351027\"; // Collection ID\n\n            const body = {\n              \"name\": \"My new collection name\"\n            };\n\n            imagesApi.renameImageCollection(collectionId, body)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $body = [\n              \"name\" =\u003e \"My new collection name\"\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/images/collections/126351027\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"name\": \"My new collection name\"\n            }' \u003e data.json\n\n            shutterstock images rename-image-collection 48433107 data.json\n  \"/v2/images/collections/{id}/items\":\n    delete:\n      description: This endpoint removes one or more images from a collection.\n      operationId: deleteImageCollectionItems\n      parameters:\n        - description: Collection ID\n          example: \"126351027\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: One or more image IDs to remove from the collection\n          in: query\n          name: item_id\n          schema:\n            items:\n              type: string\n            type: array\n      responses:\n        \"204\":\n          description: Successfully removed collection items\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Remove images from collections\n      tags:\n        - images\n      x-code-samples:\n        - lang: shell\n          source: |-\n            curl -X DELETE https://api.shutterstock.com/v2/images/collections/186726599/items?item_id=495863218 \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const imagesApi = new sstk.ImagesApi();\n\n            const collectionId = \"126351027\"; // Collection ID\n\n            // Array of images to remove\n            const imagesToRemove = {\n              \"item_id\": [\n                \"495863218\"\n              ]\n            };\n\n            imagesApi.deleteImageCollectionItems(collectionId, imagesToRemove)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/images/collections/126351027/items?item_id=495863218\",\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"DELETE\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock images delete-image-collection-items 186726599 --item-id 495863218\n    get:\n      description: This endpoint lists the IDs of images in a collection and the date that each was added.\n      operationId: getImageCollectionItems\n      parameters:\n        - description: Collection ID\n          example: \"126351027\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 100\n            maximum: 150\n            minimum: 1\n            type: integer\n        - description: Code to retrieve the contents of a shared collection\n          in: query\n          name: share_code\n          schema:\n            type: string\n        - description: Sort order\n          in: query\n          name: sort\n          schema:\n            default: oldest\n            enum:\n              - newest\n              - oldest\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - added_time: 2016-11-25T16:44:25-05:00\n                        id: \"38162050\"\n                        media_type: image\n                      - added_time: 2016-11-25T16:44:22-05:00\n                        id: \"38139676\"\n                        media_type: image\n                      - added_time: 2016-11-25T16:44:19-05:00\n                        id: \"787905\"\n                        media_type: image\n                      - added_time: 2016-11-25T16:44:16-05:00\n                        id: \"826197\"\n                        media_type: image\n                      - added_time: 2016-11-25T16:44:14-05:00\n                        id: \"38124508\"\n                        media_type: image\n                      - added_time: 2016-11-25T16:44:02-05:00\n                        id: \"126445388\"\n                        media_type: image\n                    page: 1\n                    per_page: 100\n                    total_count: 6\n              schema:\n                $ref: \"#/components/schemas/CollectionItemDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.view\n      summary: Get the contents of image collections\n      tags:\n        - images\n    post:\n      description: This endpoint adds one or more images to a collection by image IDs.\n      operationId: addImageCollectionItems\n      parameters:\n        - description: Collection ID\n          example: \"126351027\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  items:\n                    - id: \"49572945\"\n                      media_type: image\n            schema:\n              $ref: \"#/components/schemas/CollectionItemRequest\"\n        description: Array of image IDs to add to the collection\n        required: true\n      responses:\n        \"204\":\n          description: Successfully added collection items\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Add images to collections\n      tags:\n        - images\n      x-code-samples:\n        - lang: shell\n          source: |-\n            DATA='{\n              \"items\": [\n                {\n                  \"id\": \"49572945\",\n                  \"media_type\": \"image\"\n                }\n              ]\n            }'\n\n            curl -X POST https://api.shutterstock.com/v2/images/collections/126351027/items \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const imagesApi = new sstk.ImagesApi();\n\n            const collectionId = \"126351027\"; // Collection ID\n\n            const body = {\n              \"items\": [\n                {\n                  \"id\": \"495863218\",\n                  \"media_type\": \"image\"\n                }\n              ]\n            };\n\n            imagesApi.addImageCollectionItems(collectionId, body)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $body = [\n              \"items\" =\u003e [\n                [\n                  \"id\" =\u003e \"49572945\",\n                  \"media_type\" =\u003e \"image\"\n                ]\n              ]\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/images/collections/126351027/items\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"items\": [\n                {\n                  \"id\": \"49572945\",\n                  \"media_type\": \"image\"\n                }\n              ]\n            }' \u003e data.json\n\n            shutterstock images add-image-collection-items 126351027 data.json\n  /v2/images/licenses:\n    get:\n      description: This endpoint lists existing licenses.\n      operationId: getImageLicenseList\n      parameters:\n        - description: Show licenses for the specified image ID\n          example: \"12345678\"\n          in: query\n          name: image_id\n          schema:\n            pattern: ^[1-9]\\d*$\n            type: string\n        - description: Show images that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license\n          example: standard\n          in: query\n          name: license\n          schema:\n            pattern: ^.+$\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 200\n            minimum: 1\n            type: integer\n        - description: Sort order\n          in: query\n          name: sort\n          schema:\n            default: newest\n            enum:\n              - newest\n              - oldest\n            type: string\n        - description: Filter licenses by username of licensee\n          example: aUniqueUsername\n          in: query\n          name: username\n          schema:\n            type: string\n        - description: Show licenses created on or after the specified date\n          example: 2021-03-29T13:25:13.521Z\n          in: query\n          name: start_date\n          schema:\n            format: date-time\n            type: string\n        - description: Show licenses created before the specified date\n          example: 2021-03-29T13:25:13.521Z\n          in: query\n          name: end_date\n          schema:\n            format: date-time\n            type: string\n          x-relationships:\n            - in: query\n              name: start_date\n              relationship: \"\u003e\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - download_time: 2016-10-03T15:58:18-04:00\n                        id: e121\n                        image:\n                          format:\n                            size: huge\n                          id: \"114350371\"\n                        license: standard\n                        metadata:\n                          client: Company A\n                          job: Important project\n                          other: Important media\n                          purchase_order: \"457234\"\n                        subscription_id: s18382630\n                        user:\n                          username: userone\n                      - download_time: 2016-10-03T16:01:12-04:00\n                        id: e122\n                        image:\n                          format:\n                            size: medium\n                          id: \"135658703\"\n                        license: standard\n                        metadata:\n                          client: Company A\n                          job: Important project\n                          other: Important media\n                          purchase_order: \"457234\"\n                        subscription_id: s18382630\n                        user:\n                          username: userone\n                      - download_time: 2016-10-03T16:01:18-04:00\n                        id: e123\n                        image:\n                          format:\n                            size: vector\n                          id: \"107771801\"\n                        license: standard\n                        metadata:\n                          client: Company A\n                          job: Important project\n                          other: Important media\n                          purchase_order: \"457234\"\n                        subscription_id: s18382630\n                        user:\n                          username: userone\n                    page: 1\n                    per_page: 3\n              schema:\n                $ref: \"#/components/schemas/DownloadHistoryDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - licenses.view\n      summary: List image licenses\n      tags:\n        - images\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET https://api.shutterstock.com/v2/images/licenses \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n            -G \\\n            --data-urlencode \"start_date=2016-10-03T01:25:13.521Z\" \\\n            --data-urlencode \"end_date=2016-10-04T13:25:13.521Z\" \\\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const imagesApi = new sstk.ImagesApi();\n\n            const queryParams = {\n              \"start_date\": \"2016-10-03T01:25:13.521Z\",\n              \"end_date\": \"2016-10-04T13:25:13.521Z\"\n            };\n\n            imagesApi.getImageLicenseList(queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $queryFields = [\n              \"start_date\" =\u003e \"2016-10-03T01:25:13.521Z\",\n              \"end_date\" =\u003e \"2016-10-04T13:25:13.521Z\"\n            ];\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/images/licenses\" . http_build_query($queryFields),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock images get-image-license-list --start-date \"2021-01-03T01:25:13.521Z\" --end-date \"2021-05-04T13:25:13.521Z\"\n    post:\n      description: This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters.\n      operationId: licenseImages\n      parameters:\n        - description: Subscription ID to use to license the image\n          in: query\n          name: subscription_id\n          schema:\n            type: string\n        - description: Image format\n          in: query\n          name: format\n          schema:\n            default: jpg\n            enum:\n              - eps\n              - jpg\n            type: string\n        - description: Image size\n          in: query\n          name: size\n          schema:\n            default: huge\n            enum:\n              - small\n              - medium\n              - huge\n              - vector\n              - custom\n            type: string\n        - description: Search ID that was provided in the results of an image search\n          in: query\n          name: search_id\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  images:\n                    - format: jpg\n                      image_id: \"59656357\"\n                      metadata:\n                        customer_id: \"12345\"\n                        geo_location: US\n                        number_viewed: \"15\"\n                        search_term: dog\n                    - editorial_acknowledgement: true\n                      format: jpg\n                      image_id: \"75359656\"\n                      metadata:\n                        customer_id: \"12345\"\n                        geo_location: US\n                        number_viewed: \"15\"\n                        search_term: dog\n            schema:\n              $ref: \"#/components/schemas/LicenseImageRequest\"\n        description: List of images to request licenses for and information about each license transaction; these values override the defaults in the query parameters\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - allotment_charge: 1\n                        download:\n                          url: https://download.shutterstock.com/gatekeeper/[random-characters]/shutterstock_547233985.jpg\n                        image_id: \"547233985\"\n              schema:\n                $ref: \"#/components/schemas/LicenseImageResultDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - licenses.create\n            - purchases.view\n      summary: License images\n      tags:\n        - images\n      x-code-samples:\n        - lang: shell\n          source: |\n            DATA='{\n              \"images\": [\n                {\n                  \"image_id\": \"59656357\",\n                  \"price\": 12.50,\n                  \"metadata\": {\n                    \"customer_id\": \"12345\"\n                  }\n                }\n              ]\n            }'\n\n            curl -X POST \"https://api.shutterstock.com/v2/images/licenses?subscription_id=$SUBSCRIPTION_ID\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -H 'Content-Type: application/json' \\\n            -d \"$DATA\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const imagesApi = new sstk.ImagesApi();\n\n            const body = {\n              \"images\": [\n                {\n                  \"image_id\": \"419235589\",\n                  \"price\": 12.50,\n                  \"metadata\": {\n                    \"customer_id\": \"12345\"\n                  }\n                }\n              ]\n            };\n\n            const queryParams = {\n              \"format\": \"jpg\",\n              \"size\": \"huge\",\n              \"subscription_id\": process.env.SUBSCRIPTION_ID\n            };\n\n            imagesApi.licenseImages(body, queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $body = [\n              \"images\" =\u003e [\n                [\n                  \"image_id\" =\u003e \"539753938\",\n                  \"price\" =\u003e 12.50,\n                  \"metadata\" =\u003e [\n                    \"customer_id\" =\u003e \"12345\"\n                  ]\n                ]\n              ]\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/images/licenses?subscription_id=$SUBSCRIPTION_ID\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"images\": [\n                {\n                  \"image_id\": \"59656357\",\n                  \"price\": 12.50,\n                  \"metadata\": {\n                    \"customer_id\": \"12345\"\n                  }\n                }\n              ]\n            }' \u003e data.json\n\n            shutterstock images license-images --subscription-id $SUBSCRIPTION_ID data.json\n  \"/v2/images/licenses/{id}/downloads\":\n    post:\n      description: This endpoint redownloads images that you have already received a license for.\n      operationId: downloadImage\n      parameters:\n        - description: License ID\n          example: e123\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            example:\n              size: huge\n            schema:\n              $ref: \"#/components/schemas/RedownloadImage\"\n        description: Information about the images to redownload\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    url: https://download.qa.shutterstock.com/gatekeeper/LzEyMy9odWdlLmpwZyIsIm0iOjEsvdjNsbFNWbVNEQ2FhcHV1VlhhSU9VeUpVIl0/shutterstock_60447496.jpg\n              schema:\n                $ref: \"#/components/schemas/Url\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - licenses.view\n      summary: Download images\n      tags:\n        - images\n      x-code-samples:\n        - lang: shell\n          source: |\n            DATA='{\n              \"size\": \"huge\"\n            }'\n\n            curl -X POST https://api.shutterstock.com/v2/images/licenses/e123/downloads \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const imagesApi = new sstk.ImagesApi();\n\n            const licenseId = \"e123\"; // license ID, not image ID\n\n            const body = {\n              \"size\": \"huge\"\n            };\n\n            imagesApi.downloadImage(licenseId, body)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $body = [\n              \"size\" =\u003e \"huge\"\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/images/licenses/e123/downloads\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |+\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"size\": \"huge\"\n            }' \u003e data.json\n\n            shutterstock images download-image e123 data.json\n\n  /v2/images/recommendations:\n    get:\n      description: This endpoint returns images that customers put in the same collection as the specified image IDs.\n      operationId: getImageRecommendations\n      parameters:\n        - description: Image IDs\n          example:\n            - 465011609\n          in: query\n          name: id\n          required: true\n          schema:\n            items:\n              type: string\n            type: array\n        - description: Maximum number of results returned in the response\n          in: query\n          name: max_items\n          schema:\n            default: 20\n            maximum: 500\n            minimum: 1\n            type: integer\n        - description: Restrict results to safe images\n          in: query\n          name: safe\n          schema:\n            default: true\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - id: \"106363526\"\n                      - id: \"113284498\"\n                      - id: \"107390756\"\n                      - id: \"99379946\"\n                      - id: \"133918412\"\n              schema:\n                $ref: \"#/components/schemas/RecommendationDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List recommended images\n      tags:\n        - images\n  /v2/images/search:\n    get:\n      description: This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.\n      operationId: searchImages\n      parameters:\n        - description: Show images added on the specified date\n          example: 2021-03-29\n          in: query\n          name: added_date\n          schema:\n            format: date\n            type: string\n        - description: Show images added on or after the specified date\n          example: 2021-03-29\n          in: query\n          name: added_date_start\n          schema:\n            format: date\n            type: string\n        - description: Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image\n          example: 1.7778\n          in: query\n          name: aspect_ratio_min\n          schema:\n            exclusiveMinimum: true\n            minimum: 0\n            type: number\n        - description: Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image\n          example: 1.7778\n          in: query\n          name: aspect_ratio_max\n          schema:\n            exclusiveMinimum: true\n            minimum: 0\n            type: number\n        - description: Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image\n          example: 1.7778\n          in: query\n          name: aspect_ratio\n          schema:\n            exclusiveMinimum: true\n            minimum: 0\n            type: number\n        - description: Show images added before the specified date\n          example: 2021-03-29\n          in: query\n          name: added_date_end\n          schema:\n            format: date\n            type: string\n        - description: Show images with the specified Shutterstock-defined category; specify a category name or ID\n          in: query\n          name: category\n          schema:\n            type: string\n        - description: Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors\n          example: 4F21EA\n          in: query\n          name: color\n          schema:\n            type: string\n        - description: Show images with the specified contributor names or IDs, allows multiple\n          example:\n            - \"123456\"\n          in: query\n          name: contributor\n          schema:\n            items:\n              type: string\n            type: array\n        - description: Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search\n          example: US\n          in: query\n          name: contributor_country\n          schema:\n            oneOf:\n              - items:\n                  format: country-code-2\n                  type: string\n                type: array\n              - items:\n                  format: negated-country-code-2\n                  type: string\n                type: array\n        - description: Fields to display in the response; see the documentation for the fields parameter in the overview section\n          in: query\n          name: fields\n          schema:\n            type: string\n            uniqueItems: true\n        - deprecated: true\n          description: (Deprecated; use height_from and height_to instead) Show images with the specified height\n          in: query\n          name: height\n          schema:\n            type: integer\n        - description: Show images with the specified height or larger, in pixels\n          example: 1080\n          in: query\n          name: height_from\n          schema:\n            type: integer\n        - description: Show images with the specified height or smaller, in pixels\n          example: 1080\n          in: query\n          name: height_to\n          schema:\n            type: integer\n        - description: Show images of the specified type\n          example: photo\n          in: query\n          name: image_type\n          schema:\n            items:\n              enum:\n                - photo\n                - illustration\n                - vector\n              type: string\n            type: array\n        - description: Hide results with potentially unsafe keywords\n          in: query\n          name: keyword_safe_search\n          schema:\n            default: true\n            type: boolean\n        - description: Set query and result language (uses Accept-Language header if not set)\n          example: fr\n          in: query\n          name: language\n          schema:\n            $ref: \"#/components/schemas/Language\"\n        - description: Show only images with the specified license\n          in: query\n          name: license\n          schema:\n            items:\n              default: commercial\n              enum:\n                - commercial\n                - editorial\n                - enhanced\n              type: string\n            type: array\n        - description: Show image results with the specified model IDs\n          example:\n            - \"12345\"\n            - \"67890\"\n          in: query\n          name: model\n          schema:\n            items:\n              type: string\n            type: array\n        - description: Show image results with horizontal or vertical orientation\n          example: vertical\n          in: query\n          name: orientation\n          schema:\n            enum:\n              - horizontal\n              - vertical\n            type: string\n        - description: Page number\n          example: 1\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          example: 50\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 500\n            minimum: 0\n            type: integer\n        - description: Show images of people with a signed model release\n          example: true\n          in: query\n          name: people_model_released\n          schema:\n            type: boolean\n        - description: Show images that feature people of the specified age category\n          example: 20s\n          in: query\n          name: people_age\n          schema:\n            enum:\n              - infants\n              - children\n              - teenagers\n              - 20s\n              - 30s\n              - 40s\n              - 50s\n              - 60s\n              - older\n            type: string\n        - description: Show images with people of the specified ethnicities\n          example: hispanic\n          in: query\n          name: people_ethnicity\n          schema:\n            items:\n              enum:\n                - african\n                - african_american\n                - black\n                - brazilian\n                - chinese\n                - caucasian\n                - east_asian\n                - hispanic\n                - japanese\n                - middle_eastern\n                - native_american\n                - pacific_islander\n                - south_asian\n                - southeast_asian\n                - other\n              type: string\n            type: array\n        - description: Show images with people of the specified gender\n          example: both\n          in: query\n          name: people_gender\n          schema:\n            enum:\n              - male\n              - female\n              - both\n            type: string\n        - description: Show images with the specified number of people\n          example: 2\n          in: query\n          name: people_number\n          schema:\n            maximum: 4\n            minimum: 0\n            type: integer\n        - description: One or more search terms separated by spaces; you can use NOT to filter out images that match a term\n          example: dogs on the beach\n          in: query\n          name: query\n          schema:\n            type: string\n        - description: Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country\n          example: US\n          in: query\n          name: region\n          schema:\n            anyOf:\n              - format: country-code-2\n                type: string\n              - format: ipv4\n                type: string\n        - description: Enable or disable safe search\n          in: query\n          name: safe\n          schema:\n            default: true\n            type: boolean\n        - description: Sort by\n          in: query\n          name: sort\n          schema:\n            default: popular\n            enum:\n              - newest\n              - popular\n              - relevance\n              - random\n            type: string\n        - description: Spellcheck the search query and return results on suggested spellings\n          in: query\n          name: spellcheck_query\n          schema:\n            default: true\n            type: boolean\n        - description: Amount of detail to render in the response\n          in: query\n          name: view\n          schema:\n            default: minimal\n            enum:\n              - minimal\n              - full\n            type: string\n        - deprecated: true\n          description: (Deprecated; use width_from and width_to instead) Show images with the specified width\n          in: query\n          name: width\n          schema:\n            type: integer\n        - description: Show images with the specified width or larger, in pixels\n          example: 1920\n          in: query\n          name: width_from\n          schema:\n            type: integer\n        - description: Show images with the specified width or smaller, in pixels\n          example: 1920\n          in: query\n          name: width_to\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 1.6667\n                        assets:\n                          huge_thumb:\n                            height: 260\n                            url: https://image.shutterstock.com/image-vector/minimal-geometric-background-dynamic-shapes-260nw-1120280123.jpg\n                            width: 435\n                          large_thumb:\n                            height: 90\n                            url: https://thumb10.shutterstock.com/thumb_large/3673637/1120280123/stock-vector-minimal-geometric-background-dynamic-shapes-composition-eps-vector-1120280123.jpg\n                            width: 150\n                          preview:\n                            height: 269\n                            url: https://image.shutterstock.com/display_pic_with_logo/3673637/1120280123/stock-vector-minimal-geometric-background-dynamic-shapes-composition-eps-vector-1120280123.jpg\n                            width: 450\n                          preview_1000:\n                            height: 600\n                            url: https://ak.picdn.net/shutterstock/photos/1120280123/watermark_1000/f4954f705e782cc12cd13910137e3555/preview_1000-1120280123.jpg\n                            width: 1000\n                          preview_1500:\n                            height: 900\n                            url: https://image.shutterstock.com/z/stock-vector-minimal-geometric-background-dynamic-shapes-composition-eps-vector-1120280123.jpg\n                            width: 1500\n                          small_thumb:\n                            height: 60\n                            url: https://thumb10.shutterstock.com/thumb_small/3673637/1120280123/stock-vector-minimal-geometric-background-dynamic-shapes-composition-eps-vector-1120280123.jpg\n                            width: 100\n                        contributor:\n                          id: \"3673637\"\n                        description: Minimal geometric background. Dynamic shapes composition. Eps10 vector.\n                        has_model_release: false\n                        id: \"1120280123\"\n                        image_type: vector\n                        media_type: image\n                        url: https://www.shutterstock.com/image-photo/1120280123\n                    page: 1\n                    per_page: 1\n                    search_id: p5S6QwRikdFJTHXwsoiqTg\n                    total_count: 193097419\n              schema:\n                $ref: \"#/components/schemas/ImageSearchResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Search for images\n      tags:\n        - images\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET https://api.shutterstock.com/v2/images/search \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -G \\\n            --data-urlencode \"query=Vienna\" \\\n            --data-urlencode \"orientation=horizontal\" \\\n            --data-urlencode \"sort=popular\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const imagesApi = new sstk.ImagesApi();\n\n            const queryParams = {\n              \"query\": \"New York\",\n              \"sort\": \"popular\",\n              \"orientation\": \"horizontal\"\n            };\n\n            imagesApi.searchImages(queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $queryFields = [\n              \"query\" =\u003e \"New York\",\n              \"sort\" =\u003e \"popular\",\n              \"orientation\" =\u003e \"horizontal\"\n            ];\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/images/search?\" . http_build_query($queryFields),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock images search-images --query Vienna --orientation horizontal --sort popular\n  /v2/images/search/suggestions:\n    get:\n      description: This endpoint provides autocomplete suggestions for partial search terms.\n      operationId: getImageSuggestions\n      parameters:\n        - description: Search term for which you want keyword suggestions\n          example: cats\n          in: query\n          name: query\n          required: true\n          schema:\n            type: string\n        - description: Limit the number of suggestions\n          in: query\n          name: limit\n          schema:\n            default: 10\n            maximum: 25\n            minimum: 1\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - cats\n                      - catwalk\n                      - cat and dog\n                      - cat dog\n                      - cat silhouette\n              schema:\n                $ref: \"#/components/schemas/Suggestions\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get suggestions for a search term\n      tags:\n        - images\n    post:\n      description: This endpoint returns up to 10 important keywords from a block of plain text.\n      operationId: getImageKeywordSuggestions\n      requestBody:\n        content:\n          application/json:\n            example:\n              text: The beach is a wonderful place to visit. It has beautiful sand and ocean waves.\n            schema:\n              $ref: \"#/components/schemas/SearchEntitiesRequest\"\n        description: Plain text to extract keywords from\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - beach\n                      - place\n                      - sand\n                      - ocean\n              schema:\n                $ref: \"#/components/schemas/SearchEntitiesResponse\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get keywords from text\n      tags:\n        - images\n      x-code-samples:\n        - lang: shell\n          source: |\n            DATA='{\"text\": \"The beach is a wonderful place to visit. It has beautiful sand and ocean waves.\"}'\n\n            curl -X POST https://api.shutterstock.com/v2/images/search/suggestions \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const imagesApi = new sstk.ImagesApi();\n\n            const body = {\n              \"text\": \"The beach is a wonderful place to visit. It has beautiful sand and ocean waves.\"\n            };\n\n            imagesApi.getImageKeywordSuggestions(body)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $body = [\n              \"text\" =\u003e \"The beach is a wonderful place to visit. It has beautiful sand and ocean waves.\"\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/images/search/suggestions\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\"text\": \"The beach is a wonderful place to visit. It has beautiful sand and ocean waves.\"}' \u003e data.json\n\n            shutterstock images get-image-keyword-suggestions data.json\n  /v2/images/updated:\n    get:\n      description: This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show images that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.\n      operationId: getUpdatedImages\n      parameters:\n        - description: Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways\n          example: addition\n          in: query\n          name: type\n          schema:\n            items:\n              enum:\n                - addition\n                - deletion\n                - edit\n              type: string\n            type: array\n        - description: Show images updated on or after the specified date\n          example: 2021-03-29\n          in: query\n          name: start_date\n          schema:\n            format: date\n            type: string\n        - description: Show images updated before the specified date\n          example: 2021-03-29\n          in: query\n          name: end_date\n          schema:\n            format: date\n            type: string\n        - description: Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request\n          in: query\n          name: interval\n          schema:\n            default: 1 HOUR\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 100\n            maximum: 2000\n            minimum: 1\n            type: integer\n        - description: Sort order\n          in: query\n          name: sort\n          schema:\n            default: newest\n            enum:\n              - newest\n              - oldest\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - id: \"1398917399\"\n                        updated_time: 2019-06-04T15:56:44-04:00\n                        updates:\n                          - edit\n                      - id: \"1398978491\"\n                        updated_time: 2019-06-04T15:56:44-04:00\n                        updates:\n                          - edit\n                      - id: \"1414537214\"\n                        updated_time: 2019-06-04T15:56:44-04:00\n                        updates:\n                          - edit\n              schema:\n                $ref: \"#/components/schemas/UpdatedMediaDataList\"\n          description: OK\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List updated images\n      tags:\n        - images\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET https://api.shutterstock.com/v2/images/updated \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -G \\\n            --data-urlencode \"interval=30 MINUTE\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const imagesApi = new sstk.ImagesApi();\n\n            const queryParams = {\n              \"interval\": \"30 MINUTE\"\n            };\n\n            imagesApi.getUpdatedImages(queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $queryFields = [\n              \"interval\" =\u003e \"30 MINUTE\"\n            ];\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/images/updated?\" . http_build_query($queryFields),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock images get-updated-images --interval \"30 MINUTE\"\n  \"/v2/images/{id}\":\n    get:\n      description: This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.\n      operationId: getImage\n      parameters:\n        - description: Image ID\n          example: \"465011609\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Language for the keywords and categories in the response\n          example: es\n          in: query\n          name: language\n          schema:\n            $ref: \"#/components/schemas/Language\"\n        - description: Amount of detail to render in the response\n          in: query\n          name: view\n          schema:\n            default: full\n            enum:\n              - minimal\n              - full\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    added_date: 2016-08-07\n                    aspect: 0.8501\n                    assets:\n                      huge_jpg:\n                        display_name: Huge\n                        dpi: 300\n                        file_size: 6980608\n                        format: jpg\n                        height: 4902\n                        is_licensable: true\n                        width: 4167\n                      huge_thumb:\n                        height: 260\n                        url: https://image.shutterstock.com/image-vector/happy-mid-autumn-festival-background-260nw-465011609.jpg\n                        width: 221\n                      large_thumb:\n                        height: 150\n                        url: https://thumb7.shutterstock.com/thumb_large/1384888/465011609/stock-vector-happy-mid-autumn-festival-background-with-golden-glitter-moon-and-hand-drawn-moon-rabbits-vector-465011609.jpg\n                        width: 128\n                      preview:\n                        height: 450\n                        url: https://image.shutterstock.com/display_pic_with_logo/1384888/465011609/stock-vector-happy-mid-autumn-festival-background-with-golden-glitter-moon-and-hand-drawn-moon-rabbits-vector-465011609.jpg\n                        width: 382\n                      preview_1000:\n                        height: 1000\n                        url: https://ak.picdn.net/shutterstock/photos/465011609/watermark_1000/e80e64e55f14aeb951feaf93ea337dc0/preview_1000-465011609.jpg\n                        width: 850\n                      preview_1500:\n                        height: 1500\n                        url: https://image.shutterstock.com/z/stock-vector-happy-mid-autumn-festival-background-with-golden-glitter-moon-and-hand-drawn-moon-rabbits-vector-465011609.jpg\n                        width: 1275\n                      small_thumb:\n                        height: 100\n                        url: https://thumb7.shutterstock.com/thumb_small/1384888/465011609/stock-vector-happy-mid-autumn-festival-background-with-golden-glitter-moon-and-hand-drawn-moon-rabbits-vector-465011609.jpg\n                        width: 85\n                      vector_eps:\n                        display_name: Vector\n                        format: eps\n                        is_licensable: true\n                    categories:\n                      - id: \"8\"\n                        name: Holidays\n                      - id: \"11\"\n                        name: The Arts\n                    contributor:\n                      id: \"1384888\"\n                    description: Happy Mid Autumn Festival background with golden glitter Moon and hand drawn Moon Rabbits. Vector illustration\n                    has_model_release: false\n                    has_property_release: true\n                    id: \"465011609\"\n                    image_type: vector\n                    is_adult: false\n                    is_editorial: false\n                    is_illustration: true\n                    keywords:\n                      - abstract\n                      - art\n                      - artistic\n                      - asian\n                      - autumn\n                      - background\n                      - bunny\n                      - calligraphy\n                      - celebration\n                      - china\n                    media_type: image\n                    url: https://www.shutterstock.com/image-photo/465011609\n              schema:\n                $ref: \"#/components/schemas/Image\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get details about images\n      tags:\n        - images\n  \"/v2/images/{id}/similar\":\n    get:\n      description: This endpoint returns images that are visually similar to an image that you specify.\n      operationId: getSimilarImages\n      parameters:\n        - description: Image ID\n          example: \"465011609\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Language for the keywords and categories in the response\n          example: es\n          in: query\n          name: language\n          schema:\n            $ref: \"#/components/schemas/Language\"\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 500\n            minimum: 1\n            type: integer\n        - description: Amount of detail to render in the response\n          in: query\n          name: view\n          schema:\n            default: minimal\n            enum:\n              - minimal\n              - full\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 1\n                        assets:\n                          huge_thumb:\n                            height: 260\n                            url: https://image.shutterstock.com/image-vector/happy-halloween-vector-260nw-224429596.jpg\n                            width: 260\n                          large_thumb:\n                            height: 150\n                            url: https://thumb1.shutterstock.com/thumb_large/302287/224429596/stock-vector-happy-halloween-vector-224429596.jpg\n                            width: 150\n                          preview:\n                            height: 450\n                            url: https://image.shutterstock.com/display_pic_with_logo/302287/224429596/stock-vector-happy-halloween-vector-224429596.jpg\n                            width: 450\n                          preview_1000:\n                            height: 1000\n                            url: https://ak.picdn.net/shutterstock/photos/224429596/watermark_1000/9b5c88b67f10298f7b5340f21dffc953/preview_1000-224429596.jpg\n                            width: 1000\n                          preview_1500:\n                            height: 1500\n                            url: https://image.shutterstock.com/z/stock-vector-happy-halloween-vector-224429596.jpg\n                            width: 1500\n                          small_thumb:\n                            height: 100\n                            url: https://thumb1.shutterstock.com/thumb_small/302287/224429596/stock-vector-happy-halloween-vector-224429596.jpg\n                            width: 100\n                        contributor:\n                          id: \"302287\"\n                        description: Happy Halloween - vector\n                        id: \"224429596\"\n                        image_type: vector\n                        media_type: image\n                    page: 1\n                    per_page: 1\n                    search_id: \"\"\n                    total_count: 200\n              schema:\n                $ref: \"#/components/schemas/ImageSearchResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List similar images\n      tags:\n        - images\n  /v2/oauth/access_token:\n    post:\n      description: This endpoint returns an access token for the specified user and with the specified scopes. The token does not expire until the user changes their password. The body parameters must be encoded as form data.\n      operationId: createAccessToken\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  client_id: 141024g14g28104gff1h\n            schema:\n              properties:\n                client_id:\n                  description: Client ID (Consumer Key) of your application\n                  type: string\n                client_secret:\n                  description: Client Secret (Consumer Secret) of your application\n                  type: string\n                code:\n                  description: Response code from the /oauth/authorize flow; required if grant_type=authorization_code\n                  type: string\n                expires:\n                  default: false\n                  description: Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token\n                  type: boolean\n                grant_type:\n                  description: \"Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants\"\n                  enum:\n                    - authorization_code\n                    - client_credentials\n                    - refresh_token\n                  type: string\n                realm:\n                  default: customer\n                  description: User type to be authorized (usually 'customer')\n                  enum:\n                    - customer\n                    - contributor\n                  type: string\n                refresh_token:\n                  description: Pass this along with grant_type=refresh_token to get a fresh access token\n                  type: string\n              required:\n                - client_id\n                - grant_type\n              type: object\n          application/x-www-form-urlencoded:\n            examples:\n              default:\n                value:\n                  client_id: 141024g14g28104gff1h\n            schema:\n              properties:\n                client_id:\n                  description: Client ID (Consumer Key) of your application\n                  type: string\n                client_secret:\n                  description: Client Secret (Consumer Secret) of your application\n                  type: string\n                code:\n                  description: Response code from the /oauth/authorize flow; required if grant_type=authorization_code\n                  type: string\n                expires:\n                  default: \"false\"\n                  description: Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token\n                  enum:\n                    - \"true\"\n                    - \"false\"\n                  type: string\n                grant_type:\n                  description: \"Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants\"\n                  enum:\n                    - authorization_code\n                    - client_credentials\n                    - refresh_token\n                  type: string\n                realm:\n                  default: customer\n                  description: User type to be authorized (usually 'customer')\n                  enum:\n                    - customer\n                    - contributor\n                  type: string\n                refresh_token:\n                  description: Pass this along with grant_type=refresh_token to get a fresh access token\n                  type: string\n              required:\n                - client_id\n                - grant_type\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    access_token: v2/NmQwOTc0NTBiMjA5YzZkY2Q4NTkvMTA4OTg1MDk5L2N1c3RvbWVyLzIvZjB2a0RseGo4Rkt6ZjRmVWJNMm10V2VzcHh1NTBlZWJ6andUQU1NeTVYYnNFTDVWOFRJakItS2RnZTlmbEY1Y3haNWdXLUtYc2JhaXo5djk0V0p2QzZUUWZ4c2FNWm41NkdLYUgyVWlCaVUtQTNVMV9YQWpzd3lpblI3SlZEem8wSG1qQ2NzSkJlX3VQTnNXenBIdkd4SXViVi1rRGJTVENCV0g1U3U0RXRJSV9rSm5lQkl5QXlvbm5JN241UUhv\n                    token_type: Bearer\n              schema:\n                $ref: \"#/components/schemas/OauthAccessTokenResponse\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      summary: Get access tokens\n      tags:\n        - oauth\n      x-code-samples:\n        - lang: shell\n          source: |-\n            curl \"https://api.shutterstock.com/v2/oauth/access_token\" \\\n            -X POST \\\n            --data-urlencode \"client_id=$CLIENT_ID\" \\\n            --data-urlencode \"client_secret=$CLIENT_SECRET\" \\\n            --data-urlencode \"grant_type=authorization_code\" \\\n            --data-urlencode \"code=$CODE\"\n        - lang: javascript--nodejs\n          source: |\n            const axios = require(\"axios\");\n\n            const body = {\n              \"client_id\": clientId,\n              \"client_secret\": clientSecret,\n              \"grant_type\": \"authorization_code\",\n              \"code\": code,\n            };\n\n            axios.post(\"https://api.shutterstock.com/v2/oauth/access_token\", body)\n              .then((res) =\u003e {\n                console.log(res);\n              });\n        - lang: php\n          source: |\n            $body = [\n              \"client_id\" =\u003e $clientId,\n              \"client_secret\" =\u003e $clientSecret,\n              \"grant_type\" =\u003e \"authorization_code\",\n              \"code\" =\u003e $code\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/oauth/access_token\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Content-Type: application/json\",\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            curl \"https://api.shutterstock.com/v2/oauth/access_token\" \\\n            -X POST \\\n            --data-urlencode \"client_id=$CLIENT_ID\" \\\n            --data-urlencode \"client_secret=$CLIENT_SECRET\" \\\n            --data-urlencode \"grant_type=authorization_code\" \\\n            --data-urlencode \"code=$CODE\"\n  /v2/oauth/authorize:\n    get:\n      description: This endpoint returns a redirect URI (in the 'Location' header) that the customer uses to authorize your application and, together with POST /v2/oauth/access_token, generate an access token that represents that authorization.\n      operationId: authorize\n      parameters:\n        - description: Client ID (Consumer Key) of your application\n          example: 6d097450b209c6dcd859\n          in: query\n          name: client_id\n          required: true\n          schema:\n            type: string\n        - description: User type to be authorized (usually 'customer')\n          example: customer\n          in: query\n          name: realm\n          schema:\n            default: customer\n            enum:\n              - customer\n              - contributor\n            type: string\n        - description: The callback URI to send the request to after authorization; must use a host name that is registered with your application\n          example: localhost\n          in: query\n          name: redirect_uri\n          required: true\n          schema:\n            type: string\n        - description: Type of temporary authorization code that will be used to generate an access code; the only valid value is 'code'\n          example: code\n          in: query\n          name: response_type\n          required: true\n          schema:\n            enum:\n              - code\n            type: string\n        - description: Space-separated list of scopes to be authorized\n          example: user.view\n          in: query\n          name: scope\n          schema:\n            default: user.view\n            type: string\n        - description: Unique value used by the calling app to verify the request\n          example: \"1540290465000\"\n          in: query\n          name: state\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: No response was specified\n        \"302\":\n          content:\n            text/html:\n              examples:\n                default:\n                  description: Redirect user to authenticate with Shutterstock\n                  value: https://accounts.shutterstock.com/login?next=%2Foauth%2Fauthorize%3Fresponse_type%3Dcode%26state%3D1539619928633%26scope%3Dlicenses.create%20licenses.view%20purchases.view%26client_id%3D6d097450b209c6dcd859%26redirect_uri%3Dhttp%3A%2F%2Flocalhost%3A3000%2Fmyapp%2Fauth%2Fcallback%26realm%3Dcustomer\n              schema:\n                $ref: \"#/components/schemas/AuthorizeResponse\"\n          description: Redirect user to authenticate with Shutterstock\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      summary: Authorize applications\n      tags:\n        - oauth\n      x-code-samples:\n        - lang: shell\n          source: |-\n            curl \"https://api.shutterstock.com/v2/oauth/authorize\" \\\n            -X GET \\\n            -G \\\n            --data-urlencode \"scope=licenses.create licenses.view purchases.view\" \\\n            --data-urlencode \"state=demo_`date +%s`\" \\\n            --data-urlencode \"response_type=code\" \\\n            --data-urlencode \"redirect_uri=http://localhost:3000/callback\" \\\n            --data-urlencode \"client_id=$CLIENT_ID\"\n        - lang: javascript--nodejs\n          source: |\n            const axios = require(\"axios\");\n\n            axios.get(\"https://api.shutterstock.com/v2/oauth/authorize\", {\n              \"params\": {\n                \"scope\": \"licenses.create licenses.view purchases.view\",\n                \"state\": \"demo_\" + Math.round(new Date() / 1000),\n                \"response_type\": \"code\",\n                \"redirect_uri\": \"http://localhost:3000/callback\",\n                \"client_id\": clientId\n              },\n              // Don't follow the redirect because this program is not running in a browser\n              \"maxRedirects\": 0,\n            })\n              .catch(({ response }) =\u003e {\n                // HTTP 302: Redirect\n                console.log(response.data);\n              });\n        - lang: php\n          source: |-\n            $queryFields = [ \"client_id\" =\u003e $clientId, \"redirect_uri\" =\u003e \"http://localhost:3000/callback\", \"response_type\" =\u003e \"code\", \"scope\" =\u003e \"licenses.create licenses.view purchases.view\", \"state\" =\u003e time() ];\n            $options = [ CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/oauth/authorize?\" . http_build_query($queryFields), CURLOPT_USERAGENT =\u003e \"php/curl\", CURLOPT_RETURNTRANSFER =\u003e 1 ];\n            $handle = curl_init(); curl_setopt_array($handle, $options); $response = curl_exec($handle); curl_close($handle);\n            $decodedResponse = json_decode($response); print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            curl \"https://api.shutterstock.com/v2/oauth/authorize\" \\\n            -X GET \\\n            -G \\\n            --data-urlencode \"scope=licenses.create licenses.view purchases.view\" \\\n            --data-urlencode \"state=demo_`date +%s`\" \\\n            --data-urlencode \"response_type=code\" \\\n            --data-urlencode \"redirect_uri=http://localhost:3000/callback\" \\\n            --data-urlencode \"client_id=$CLIENT_ID\"\n  /v2/test:\n    get:\n      operationId: echo\n      parameters:\n        - description: Text to echo\n          in: query\n          name: text\n          schema:\n            default: ok\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    text: ok\n              schema:\n                $ref: \"#/components/schemas/TestEcho\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      summary: Echo text\n      tags:\n        - test\n  /v2/test/validate:\n    get:\n      operationId: validate\n      parameters:\n        - description: Integer ID\n          example: 123\n          in: query\n          name: id\n          required: true\n          schema:\n            type: integer\n        - description: List of tags\n          in: query\n          name: tag\n          schema:\n            items:\n              type: string\n            type: array\n        - description: User agent\n          in: header\n          name: user-agent\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    header:\n                      user-agent: PostmanRuntime/7.1.1\n                    query:\n                      id: 12\n              schema:\n                $ref: \"#/components/schemas/TestValidate\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      summary: Validate input\n      tags:\n        - test\n  /v2/user:\n    get:\n      operationId: getUser\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    contributor_id: \"212\"\n                    first_name: John\n                    full_name: John Doe\n                    id: \"101782699\"\n                    language: es\n                    last_name: Doe\n                    username: jdoe\n              schema:\n                $ref: \"#/components/schemas/UserDetails\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - user.view\n      summary: Get user details\n      tags:\n        - users\n  /v2/user/access_token:\n    get:\n      operationId: getAccessToken\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    client_id: bf6e5dabd4rc1d770dc8\n                    customer_id: \"148363\"\n                    expires_in: 361354404\n                    realm: customer\n                    scopes:\n                      - user.view\n                      - user.edit\n                    user_id: \"120229367\"\n                    username: testuser\n              schema:\n                $ref: \"#/components/schemas/AccessTokenDetails\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode: []\n      summary: Get access token details\n      tags:\n        - users\n  /v2/user/subscriptions:\n    get:\n      operationId: getUserSubscriptionList\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - asset_type: images\n                        description: 25-A-Day Subscription\n                        expiration_time: 2016-11-17T16:46:36-05:00\n                        formats:\n                          - description: Huge\n                            format: jpg\n                            media_type: image\n                            min_resolution: 4000000\n                            size: huge\n                          - description: Med\n                            format: jpg\n                            media_type: image\n                            min_resolution: 1000\n                            size: medium\n                          - description: Super\n                            format: jpg\n                            media_type: image\n                            min_resolution: 16000000\n                            size: supersize\n                          - description: Small\n                            format: jpg\n                            media_type: image\n                            min_resolution: 500\n                            size: small\n                          - description: Vector\n                            format: eps\n                            media_type: image\n                            size: vector\n                        id: s1729\n                        license: standard\n              schema:\n                $ref: \"#/components/schemas/SubscriptionDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - purchases.view\n      summary: List user subscriptions\n      tags:\n        - users\n  /v2/videos:\n    get:\n      description: This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.\n      operationId: getVideoList\n      parameters:\n        - description: One or more video IDs\n          example:\n            - \"639703\"\n            - \"993721\"\n          in: query\n          name: id\n          required: true\n          schema:\n            items:\n              type: string\n            type: array\n        - description: Amount of detail to render in the response\n          in: query\n          name: view\n          schema:\n            default: minimal\n            enum:\n              - minimal\n              - full\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 1.481\n                        aspect_ratio: 3:2\n                        assets:\n                          preview_jpg:\n                            url: https://ak3.picdn.net/shutterstock/videos/639703/thumb/1.jpg\n                          preview_mp4:\n                            url: https://ak3.picdn.net/shutterstock/videos/639703/preview/stock-footage-a-family-of-african-forest-elephants-play-in-the-mud-in-the-jungle-of-the-congo-river-basin.mp4\n                          preview_webm:\n                            url: https://ak3.picdn.net/shutterstock/videos/639703/preview/stock-footage-a-family-of-african-forest-elephants-play-in-the-mud-in-the-jungle-of-the-congo-river-basin.webm\n                          thumb_jpg:\n                            url: https://ak3.picdn.net/shutterstock/videos/639703/thumb/1.jpg\n                          thumb_mp4:\n                            url: https://ak3.picdn.net/shutterstock/videos/639703/thumb/stock-footage-a-family-of-african-forest-elephants-play-in-the-mud-in-the-jungle-of-the-congo-river-basin.mp4\n                          thumb_webm:\n                            url: https://ak3.picdn.net/shutterstock/videos/639703/thumb/stock-footage-a-family-of-african-forest-elephants-play-in-the-mud-in-the-jungle-of-the-congo-river-basin.webm\n                        contributor:\n                          id: \"335419\"\n                        description: A family of African Forest Elephants play in the mud in the jungle of the Congo River basin.\n                        duration: 11\n                        has_model_release: false\n                        id: \"639703\"\n                        media_type: video\n                        url: https://www.shutterstock.com/video/clip-639703\n              schema:\n                $ref: \"#/components/schemas/VideoDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List videos\n      tags:\n        - videos\n  /v2/videos/categories:\n    get:\n      description: This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.\n      operationId: listVideoCategories\n      parameters:\n        - description: Language for the keywords and categories in the response\n          example: es\n          in: query\n          name: language\n          schema:\n            $ref: \"#/components/schemas/Language\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - id: \"1\"\n                        name: Animals/Wildlife\n                      - id: \"2\"\n                        name: Buildings/Landmarks\n                      - id: \"3\"\n                        name: Backgrounds/Textures\n                      - id: \"4\"\n                        name: Business/Finance\n                      - id: \"5\"\n                        name: Education\n              schema:\n                $ref: \"#/components/schemas/CategoryDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List video categories\n      tags:\n        - videos\n  /v2/videos/collections:\n    get:\n      description: This endpoint lists your collections of videos and their basic attributes.\n      operationId: getVideoCollectionList\n      parameters:\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 100\n            maximum: 150\n            minimum: 1\n            type: integer\n        - description: Which sharing information to include in the response, such as a URL to the collection\n          example: share_code\n          in: query\n          name: embed\n          schema:\n            items:\n              enum:\n                - share_code\n                - share_url\n              type: string\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - created_time: 2017-07-05T08:51:00-04:00\n                        id: \"17553374\"\n                        name: kittens and puppies\n                        total_item_count: 0\n                        updated_time: 2017-07-05T08:51:00-04:00\n                      - created_time: 2017-07-05T08:51:00-04:00\n                        id: \"17553375\"\n                        name: wild life\n                        total_item_count: 0\n                        updated_time: 2017-07-05T08:51:00-04:00\n                      - created_time: 2017-07-06T08:50:57-04:00\n                        id: \"17555175\"\n                        name: young couples\n                        total_item_count: 2\n                        updated_time: 2017-07-06T08:50:57-04:00\n                      - cover_item:\n                          added_time: 2018-09-11T15:55:23.000Z\n                          id: \"1715778\"\n                          media_type: video\n                        created_time: 2017-07-06T08:50:58-04:00\n                        id: \"17555176\"\n                        name: sky timelapses\n                        total_item_count: 2\n                        updated_time: 2017-07-06T08:50:58-04:00\n                    page: 1\n                    per_page: 100\n                    total_count: 4\n              schema:\n                $ref: \"#/components/schemas/CollectionDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - collections.view\n      summary: List video collections\n      tags:\n        - videos\n    post:\n      description: This endpoint creates one or more collections (clipboxes). To add videos to collections, use `POST /v2/videos/collections/{id}/items`.\n      operationId: createVideoCollection\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  name: New collection name\n            schema:\n              $ref: \"#/components/schemas/CollectionCreateRequest\"\n        description: Collection metadata\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    id: \"10120264\"\n              schema:\n                $ref: \"#/components/schemas/CollectionCreateResponse\"\n          description: Successfully created video collection\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Create video collections\n      tags:\n        - videos\n      x-code-samples:\n        - lang: shell\n          source: |-\n            DATA='{\n              \"name\": \"New collection name\"\n            }'\n\n            curl -X POST https://api.shutterstock.com/v2/videos/collections \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const videosApi = new sstk.VideosApi();\n\n            const body = {\n              \"name\": \"New collection name\"\n            };\n\n            videosApi.createVideoCollection(body)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $body = [\n              \"name\" =\u003e \"New collection name\"\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/videos/collections\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"name\": \"New collection name\"\n            }' \u003e data.json\n\n            shutterstock videos create-video-collection data.json\n  /v2/videos/collections/featured:\n    get:\n      description: This endpoint lists featured video collections and a name and cover video for each collection.\n      operationId: getFeaturedVideoCollectionList\n      parameters:\n        - description: What information to include in the response, such as a URL to the collection\n          example: share_url\n          in: query\n          name: embed\n          schema:\n            enum:\n              - share_url\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - cover_item:\n                          url: https://ak.picdn.net/assets/cms/ecedf10e57824db9516560f7523f084b445c1672-shutterstock_104947832.jpg\n                        created_time: 2018-03-06T19:19:02.000Z\n                        id: \"73497710\"\n                        items_updated_time: 2018-01-30T09:49:22-05:00\n                        name: Flower Still Lifes\n                        share_url: http://www.shutterstock.com/collections/73497710-flower-still-lifes.html\n                        total_item_count: 50\n                        updated_time: 2018-03-06T21:28:06.000Z\n                      - cover_item:\n                          url: https://ak.picdn.net/assets/cms/3aa67c2b92c7cead79da08b955f409269553fade-shutterstock_343681901.jpg\n                        created_time: 2018-03-06T18:54:19.000Z\n                        id: \"45566855\"\n                        items_updated_time: 2016-05-18T10:49:02-04:00\n                        name: Feeling Down\n                        share_url: http://www.shutterstock.com/collections/45566855-feeling-down.html\n                        total_item_count: 100\n                        updated_time: 2018-03-07T13:58:21.000Z\n              schema:\n                $ref: \"#/components/schemas/FeaturedCollectionDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List featured video collections\n      tags:\n        - videos\n  \"/v2/videos/collections/featured/{id}\":\n    get:\n      description: This endpoint gets more detailed information about a featured video collection, including its cover video and timestamps for its creation and most recent update. To get the videos, use `GET /v2/videos/collections/featured/{id}/items`.\n      operationId: getFeaturedVideoCollection\n      parameters:\n        - description: Collection ID\n          example: \"136351027\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: What information to include in the response, such as a URL to the collection\n          in: query\n          name: embed\n          schema:\n            enum:\n              - share_url\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    cover_item:\n                      url: https://ak.picdn.net/assets/cms/3aa67c2b92c7ceadd79da08b95d5f409269553fade-shutterstock_343681901.jpg\n                    created_time: 2018-03-06T18:54:19.000Z\n                    id: \"136351027\"\n                    items_updated_time: 2016-05-18T10:49:02-04:00\n                    name: Feeling Down\n                    total_item_count: 100\n                    updated_time: 2018-03-07T13:58:21.000Z\n              schema:\n                $ref: \"#/components/schemas/FeaturedCollection\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Featured collection not found\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get the details of featured video collections\n      tags:\n        - videos\n  \"/v2/videos/collections/featured/{id}/items\":\n    get:\n      description: This endpoint lists the IDs of videos in a featured collection and the date that each was added.\n      operationId: getFeaturedVideoCollectionItems\n      parameters:\n        - description: Collection ID\n          example: \"136351027\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 100\n            maximum: 150\n            minimum: 1\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - added_time: 2016-05-18T10:49:02-04:00\n                        id: \"2931777093\"\n                      - added_time: 2016-05-18T10:39:06-04:00\n                        id: \"4101383321\"\n                      - added_time: 2016-05-18T10:31:04-04:00\n                        id: \"1821077001\"\n                      - added_time: 2016-05-18T10:21:54-04:00\n                        id: \"3451984902\"\n              schema:\n                $ref: \"#/components/schemas/VideoCollectionItemDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Featured collection not found\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get the contents of featured video collections\n      tags:\n        - videos\n  \"/v2/videos/collections/{id}\":\n    delete:\n      description: This endpoint deletes a collection.\n      operationId: deleteVideoCollection\n      parameters:\n        - description: The ID of the collection to delete\n          example: \"17555176\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Successfully deleted collection\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Delete video collections\n      tags:\n        - videos\n      x-code-samples:\n        - lang: shell\n          source: |-\n            curl -X DELETE https://api.shutterstock.com/v2/videos/collections/17555176 \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const videosApi = new sstk.VideosApi();\n\n            const collectionId = \"17555176\";\n\n            videosApi.deleteVideoCollection(collectionId)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/videos/collections/17555176\",\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock videos delete-video-collection 17555176\n    get:\n      description: This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.\n      operationId: getVideoCollection\n      parameters:\n        - description: The ID of the collection to return\n          example: \"17555176\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Which sharing information to include in the response, such as a URL to the collection\n          in: query\n          name: embed\n          schema:\n            items:\n              enum:\n                - share_code\n                - share_url\n              type: string\n            type: array\n        - description: Code to retrieve a shared collection\n          in: query\n          name: share_code\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    cover_item:\n                      added_time: 2018-09-11T15:55:23.000Z\n                      id: \"1713788\"\n                      media_type: video\n                    created_time: 2018-09-11T15:55:23.000Z\n                    id: \"17555176\"\n                    name: cats and dogs\n                    total_item_count: 3\n                    updated_time: 2018-09-11T15:55:51.000Z\n              schema:\n                $ref: \"#/components/schemas/Collection\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.view\n      summary: Get the details of video collections\n      tags:\n        - videos\n    post:\n      description: This endpoint sets a new name for a collection.\n      operationId: renameVideoCollection\n      parameters:\n        - description: The ID of the collection to rename\n          example: \"17555176\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  name: Updated collection name\n            schema:\n              $ref: \"#/components/schemas/CollectionUpdateRequest\"\n        description: The new name for the collection\n        required: true\n      responses:\n        \"204\":\n          description: Successfully updated collection\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Rename video collections\n      tags:\n        - videos\n      x-code-samples:\n        - lang: shell\n          source: |-\n            DATA='{\n              \"name\": \"Updated collection name\"\n            }'\n\n            curl -X POST https://api.shutterstock.com/v2/videos/collections/17555176 \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const videosApi = new sstk.VideosApi();\n\n            const collectionId = \"186765119\";\n\n            const body = {\n              \"name\": \"My new collection name\"\n            };\n\n            videosApi.renameVideoCollection(collectionId, body)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $body = [\n              \"name\" =\u003e \"Updated collection name\"\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/videos/collections/17555176\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"name\": \"Updated collection name\"\n            }' \u003e data.json\n\n            shutterstock videos rename-video-collection 17555176 data.json\n  \"/v2/videos/collections/{id}/items\":\n    delete:\n      description: This endpoint removes one or more videos from a collection.\n      operationId: deleteVideoCollectionItems\n      parameters:\n        - description: The ID of the Collection from which items will be deleted\n          example: \"17555176\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: One or more video IDs to remove from the collection\n          in: query\n          name: item_id\n          schema:\n            items:\n              type: string\n            type: array\n      responses:\n        \"204\":\n          description: Successfully removed collection items\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Remove videos from collections\n      tags:\n        - videos\n      x-code-samples:\n        - lang: shell\n          source: |-\n            curl -X DELETE https://api.shutterstock.com/v2/videos/collections/17555176/items?item_id=495863218 \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const videosApi = new sstk.VideosApi();\n\n            const collectionId = \"17555176\";\n\n            // Array of videos to remove\n            const videosToRemove = {\n              \"item_id\": [\n                \"10120264\"\n              ]\n            };\n\n            videosApi.deleteVideoCollectionItems(collectionId, videosToRemove)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/videos/collections/17555176/items?item_id=495863218\",\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"DELETE\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock videos delete-video-collection-items 17555176 --item-id 495863218\n    get:\n      description: This endpoint lists the IDs of videos in a collection and the date that each was added.\n      operationId: getVideoCollectionItems\n      parameters:\n        - description: Collection ID\n          example: \"17555176\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 100\n            maximum: 150\n            minimum: 1\n            type: integer\n        - description: Code to retrieve the contents of a shared collection\n          in: query\n          name: share_code\n          schema:\n            type: string\n        - description: Sort order\n          in: query\n          name: sort\n          schema:\n            default: oldest\n            enum:\n              - newest\n              - oldest\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - added_time: 2017-07-06T14:33:42-04:00\n                        id: \"123123\"\n                        media_type: video\n                      - added_time: 2017-07-06T14:33:42-04:00\n                        id: \"654654\"\n                        media_type: video\n                    page: 1\n                    per_page: 100\n                    total_count: 2\n              schema:\n                $ref: \"#/components/schemas/CollectionItemDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.view\n      summary: Get the contents of video collections\n      tags:\n        - videos\n    post:\n      description: This endpoint adds one or more videos to a collection by video IDs.\n      operationId: addVideoCollectionItems\n      parameters:\n        - description: The ID of the collection to which items should be added\n          example: \"17555176\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  items:\n                    - id: \"10120264\"\n                    - id: \"24419024\"\n            schema:\n              $ref: \"#/components/schemas/CollectionItemRequest\"\n        description: Array of video IDs to add to the collection\n        required: true\n      responses:\n        \"204\":\n          description: Successfully added collection items\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Collection not found\n      security:\n        - customer_accessCode:\n            - collections.edit\n      summary: Add videos to collections\n      tags:\n        - videos\n      x-code-samples:\n        - lang: shell\n          source: |-\n            DATA='{\n              \"items\": [\n                {\n                  \"id\": \"10120264\"\n                },\n                {\n                  \"id\": \"24419024\"\n                }\n              ]\n            }'\n\n            curl -X POST https://api.shutterstock.com/v2/videos/collections/17555176/items \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const videosApi = new sstk.VideosApi();\n\n            const collectionId = \"17555176\"; // Collection ID\n\n            // Array of videos to add\n            const body = {\n              \"items\": [\n                {\n                  \"id\": \"10120264\",\n                  \"media_type\": \"video\"\n                }\n              ]\n            };\n\n            videosApi.addImageCollectionItems(collectionId, body)\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |-\n            $body = [\n              \"items\" =\u003e [\n                [\n                  \"id\" =\u003e \"10120264\"\n                ],\n                [\n                  \"id\" =\u003e \"24419024\"\n                ]\n              ]\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/videos/collections/17555176/items\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"items\": [\n                {\n                  \"id\": \"10120264\"\n                },\n                {\n                  \"id\": \"24419024\"\n                }\n              ]\n            }' \u003e data.json\n\n            shutterstock videos add-video-collection-items 17555176 data.json\n  /v2/videos/licenses:\n    get:\n      description: This endpoint lists existing licenses.\n      operationId: getVideoLicenseList\n      parameters:\n        - description: Show licenses for the specified video ID\n          example: \"12345678\"\n          in: query\n          name: video_id\n          schema:\n            pattern: ^[1-9]\\d*$\n            type: string\n        - description: Show videos that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license\n          example: standard\n          in: query\n          name: license\n          schema:\n            pattern: ^.+$\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 200\n            minimum: 1\n            type: integer\n        - description: Sort by oldest or newest videos first\n          in: query\n          name: sort\n          schema:\n            default: newest\n            enum:\n              - newest\n              - oldest\n            type: string\n        - description: Filter licenses by username of licensee\n          example: aUniqueUsername\n          in: query\n          name: username\n          schema:\n            type: string\n        - description: Show licenses created on or after the specified date\n          example: 2021-03-29T13:25:13.521Z\n          in: query\n          name: start_date\n          schema:\n            format: date-time\n            type: string\n        - description: Show licenses created before the specified date\n          example: 2021-03-29T13:25:13.521Z\n          in: query\n          name: end_date\n          schema:\n            format: date-time\n            type: string\n          x-relationships:\n            - in: query\n              name: start_date\n              relationship: \"\u003e\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - download_time: 2018-05-24T14:26:25-04:00\n                        id: e121\n                        license: footage_premier\n                        metadata:\n                          customer_id: \"12345\"\n                          geo_location: US\n                          number_viewed: \"15\"\n                          search_term: dog\n                        subscription_id: s8907043\n                        user:\n                          username: myusername\n                        video:\n                          format:\n                            size: sd\n                          id: \"2140697\"\n                      - download_time: 2018-05-23T10:10:24-04:00\n                        id: e122\n                        license: footage_premier\n                        metadata:\n                          customer_id: \"12345\"\n                          geo_location: US\n                          number_viewed: \"15\"\n                          search_term: dog\n                        subscription_id: s8907043\n                        user:\n                          username: myusername\n                        video:\n                          format:\n                            size: sd\n                          id: \"2140697\"\n                      - download_time: 2018-05-22T07:51:17-04:00\n                        id: e123\n                        license: footage_premier\n                        metadata:\n                          customer_id: \"12345\"\n                          geo_location: US\n                          number_viewed: \"15\"\n                          search_term: dog\n                        subscription_id: s8907043\n                        user:\n                          username: myusername\n                        video:\n                          format:\n                            size: sd\n                          id: \"2140697\"\n                      - download_time: 2018-05-21T12:01:07-04:00\n                        id: e124\n                        license: footage_premier\n                        metadata:\n                          customer_id: \"12345\"\n                          geo_location: US\n                          number_viewed: \"15\"\n                          search_term: dog\n                        subscription_id: s8907043\n                        user:\n                          username: myusername\n                        video:\n                          format:\n                            size: sd\n                          id: \"2140697\"\n                      - download_time: 2018-05-21T11:59:43-04:00\n                        id: e125\n                        license: footage_premier\n                        metadata:\n                          customer_id: \"12345\"\n                          geo_location: US\n                          number_viewed: \"15\"\n                          search_term: dog\n                        subscription_id: s8907043\n                        user:\n                          username: myusername\n                        video:\n                          format:\n                            size: sd\n                          id: \"2140697\"\n                      - download_time: 2018-05-15T10:53:10-04:00\n                        id: e126\n                        license: footage_premier\n                        metadata:\n                          customer_id: \"12345\"\n                          geo_location: US\n                          number_viewed: \"15\"\n                          search_term: dog\n                        subscription_id: s8907043\n                        user:\n                          username: myusername\n                        video:\n                          format:\n                            size: sd\n                          id: \"2140697\"\n                      - download_time: 2018-05-14T23:31:59-04:00\n                        id: e127\n                        license: footage_premier\n                        metadata:\n                          customer_id: \"12345\"\n                          geo_location: US\n                          number_viewed: \"15\"\n                          search_term: dog\n                        subscription_id: s8907043\n                        user:\n                          username: myusername\n                        video:\n                          format:\n                            size: sd\n                          id: \"2140697\"\n                      - download_time: 2018-05-14T12:52:40-04:00\n                        id: e128\n                        license: footage_premier\n                        metadata:\n                          customer_id: \"12345\"\n                          geo_location: US\n                          number_viewed: \"15\"\n                          search_term: dog\n                        subscription_id: s8907043\n                        user:\n                          username: myusername\n                        video:\n                          format:\n                            size: sd\n                          id: \"2140697\"\n                      - download_time: 2018-05-10T15:38:20-04:00\n                        id: e129\n                        license: footage_premier\n                        metadata:\n                          customer_id: \"12345\"\n                          geo_location: US\n                          number_viewed: \"15\"\n                          search_term: dog\n                        subscription_id: s8907043\n                        user:\n                          username: myusername\n                        video:\n                          format:\n                            size: sd\n                          id: \"2140697\"\n                      - download_time: 2018-05-10T15:24:28-04:00\n                        id: e130\n                        license: footage_premier\n                        metadata:\n                          customer_id: \"12345\"\n                          geo_location: US\n                          number_viewed: \"15\"\n                          search_term: dog\n                        subscription_id: s8907043\n                        user:\n                          username: myusername\n                        video:\n                          format:\n                            size: sd\n                          id: \"2140697\"\n                    page: 1\n                    per_page: 20\n              schema:\n                $ref: \"#/components/schemas/DownloadHistoryDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - licenses.view\n      summary: List video licenses\n      tags:\n        - videos\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET https://api.shutterstock.com/v2/videos/licenses \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n            -G \\\n            --data-urlencode \"start_date=2016-10-03T01:25:13.521Z\" \\\n            --data-urlencode \"end_date=2016-10-04T13:25:13.521Z\" \\\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const videosApi = new sstk.VideosApi();\n\n            const queryParams = {\n              \"start_date\": \"2016-10-03T01:25:13.521Z\",\n              \"end_date\": \"2016-10-04T13:25:13.521Z\"\n            };\n\n            videosApi.getVideoLicenseList(queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $queryFields = [\n              \"start_date\" =\u003e \"2016-10-03T01:25:13.521Z\",\n              \"end_date\" =\u003e \"2016-10-04T13:25:13.521Z\"\n            ];\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/videos/licenses\" . http_build_query($queryFields),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock videos get-video-license-list --start-date \"2021-01-03T01:25:13.521Z\" --end-date \"2021-05-04T13:25:13.521Z\"\n    post:\n      description: This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters.\n      operationId: licenseVideos\n      parameters:\n        - description: The subscription ID to use for licensing\n          example: s1234567\n          in: query\n          name: subscription_id\n          schema:\n            type: string\n        - description: The size of the video to license\n          in: query\n          name: size\n          schema:\n            default: web\n            enum:\n              - web\n              - sd\n              - hd\n              - 4k\n            type: string\n        - description: The Search ID that led to this licensing event\n          in: query\n          name: search_id\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            examples:\n              default:\n                value:\n                  videos:\n                    - size: hd\n                      subscription_id: s8906043\n                      video_id: \"2140697\"\n                    - size: 4k\n                      subscription_id: s8241443\n                      video_id: \"5613314\"\n            schema:\n              $ref: \"#/components/schemas/LicenseVideoRequest\"\n        description: List of videos to request licenses for and information about each license transaction; these values override the defaults in the query parameters\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - allotment_charge: 1\n                        download:\n                          url: https://download.shutterstock.com/gatekeeper/W3siZSI6MTQ5NzAyNjU1MiwiayI6InZpZGVvLzIxNDA2OTcvc2QubW92IiwibSI6IjEiLCJkIjoic2h1dHRlcnN0b2NrLW1lZGlhIn0sInVsOFY1dElzb3lWZHNxb3JyWlJjS1dyb016TSJd/shutterstock_v2140697.mov\n                        video_id: \"2140697\"\n              schema:\n                $ref: \"#/components/schemas/LicenseVideoResultDataList\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - licenses.create\n            - purchases.view\n      summary: License videos\n      tags:\n        - videos\n      x-code-samples:\n        - lang: shell\n          source: |\n            DATA='{\n              \"videos\": [\n                {\n                  \"video_id\": \"2140697\",\n                  \"size\": \"hd\"\n                },\n                {\n                  \"video_id\": \"5613314\",\n                  \"size\": \"4k\"\n                }\n              ]\n            }'\n\n            curl -X POST 'https://api.shutterstock.com/v2/videos/licenses?subscription_id='$SUBSCRIPTION_ID \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const videosApi = new sstk.VideosApi();\n\n            const body = {\n              \"videos\": [\n                {\n                  \"video_id\": \"419235589\"\n                },\n                {\n                  \"video_id\": \"1079756147\"\n                }\n              ]\n            };\n\n            const queryParams = {\n              \"subscription_id\": SHUTTERSTOCK_SUBSCRIPTION_ID,\n              \"size\": \"web\"\n            };\n\n            videosApi.licenseVideos(body, queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $body = [\n              \"videos\" =\u003e [\n                [\n                  \"video_id\" =\u003e \"2140697\",\n                  \"size\" =\u003e \"hd\"\n                ],\n                [\n                  \"video_id\" =\u003e \"5613314\",\n                  \"size\" =\u003e \"4k\"\n                ]\n              ]\n            ];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/videos/licenses?subscription_id=$SUBSCRIPTION_ID\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{\n              \"videos\": [\n                {\n                  \"video_id\": \"2140697\",\n                  \"size\": \"hd\"\n                },\n                {\n                  \"video_id\": \"5613314\",\n                  \"size\": \"4k\"\n                }\n              ]\n            }' \u003e data.json\n\n            shutterstock videos license-videos --subscription-id $SUBSCRIPTION_ID data.json\n  \"/v2/videos/licenses/{id}/downloads\":\n    post:\n      description: This endpoint redownloads videos that you have already received a license for.\n      operationId: downloadVideos\n      parameters:\n        - description: The license ID of the item to (re)download\n          example: e123\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            example:\n              size: 4k\n            schema:\n              $ref: \"#/components/schemas/RedownloadVideo\"\n        description: Information about the videos to redownload\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    url: https://download1.shutterstock.com/gatekeeper/W3siZSI6MTUzMzMzMzUzMCwiayI6InZpZGVvLzM5NjU4ODEvaGQubW92IiwibSI6MSwiZCI6InNodXR0ZXJzdG9jay1tZWRpYSJ9LCJjZ2lvRU14T09hNWZGTHZsN21iTWVPRVQ3MFEiXQ/shutterstock_v3965881.mov\n              schema:\n                $ref: \"#/components/schemas/Url\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - customer_accessCode:\n            - licenses.view\n      summary: Download videos\n      tags:\n        - videos\n      x-code-samples:\n        - lang: shell\n          source: |\n            DATA='{}'\n\n            curl -X POST https://api.shutterstock.com/v2/videos/licenses/e123/downloads \\\n            -d \"$DATA\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const videosApi = new sstk.VideosApi();\n\n            const licenseId = \"e123\";\n\n            const body = {};\n\n            videosApi.downloadVideos(licenseId, body)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $body = [];\n            $encodedBody = json_encode($body);\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/videos/licenses/e123/downloads\",\n              CURLOPT_CUSTOMREQUEST =\u003e \"POST\",\n              CURLOPT_POSTFIELDS =\u003e $encodedBody,\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\",\n                \"Content-Type: application/json\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            echo '{}' \u003e data.json\n\n            shutterstock videos download-videos e123 data.json\n  /v2/videos/search:\n    get:\n      description: This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.\n      operationId: searchVideos\n      parameters:\n        - description: Show videos added on the specified date\n          example: 2020-05-29\n          in: query\n          name: added_date\n          schema:\n            format: date\n            type: string\n        - description: Show videos added on or after the specified date\n          example: 2020-05-29\n          in: query\n          name: added_date_start\n          schema:\n            format: date\n            type: string\n        - description: Show videos added before the specified date\n          example: 2020-05-29\n          in: query\n          name: added_date_end\n          schema:\n            format: date\n            type: string\n        - description: Show videos with the specified aspect ratio\n          example: 4_3\n          in: query\n          name: aspect_ratio\n          schema:\n            enum:\n              - 4_3\n              - 16_9\n              - nonstandard\n            type: string\n        - description: Show videos with the specified Shutterstock-defined category; specify a category name or ID\n          in: query\n          name: category\n          schema:\n            type: string\n        - description: Show videos with the specified artist names or IDs\n          example: \"[12345678]\"\n          in: query\n          name: contributor\n          schema:\n            items:\n              type: string\n            type: array\n        - description: Show videos from contributors in one or more specified countries\n          example: US\n          in: query\n          name: contributor_country\n          schema:\n            items:\n              format: country-code-2\n              type: string\n            type: array\n        - deprecated: true\n          description: (Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds\n          in: query\n          name: duration\n          schema:\n            type: integer\n        - description: Show videos with the specified duration or longer in seconds\n          example: 60\n          in: query\n          name: duration_from\n          schema:\n            type: integer\n        - description: Show videos with the specified duration or shorter in seconds\n          example: 180\n          in: query\n          name: duration_to\n          schema:\n            type: integer\n        - deprecated: true\n          description: (Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second\n          in: query\n          name: fps\n          schema:\n            type: number\n        - description: Show videos with the specified frames per second or more\n          example: 24\n          in: query\n          name: fps_from\n          schema:\n            type: number\n        - description: Show videos with the specified frames per second or fewer\n          example: 60\n          in: query\n          name: fps_to\n          schema:\n            type: number\n        - description: Hide results with potentially unsafe keywords\n          in: query\n          name: keyword_safe_search\n          schema:\n            default: true\n            type: boolean\n        - description: Set query and result language (uses Accept-Language header if not set)\n          in: query\n          name: language\n          schema:\n            $ref: \"#/components/schemas/Language\"\n        - description: Show only videos with the specified license or licenses\n          example:\n            - commercial\n            - editorial\n          explode: true\n          in: query\n          name: license\n          schema:\n            items:\n              default: commercial\n              enum:\n                - commercial\n                - editorial\n              type: string\n            type: array\n        - description: Show videos with each of the specified models\n          example:\n            - \"442583\"\n            - \"434750\"\n          explode: true\n          in: query\n          name: model\n          schema:\n            items:\n              type: string\n            type: array\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 500\n            minimum: 0\n            type: integer\n        - description: Show videos that feature people of the specified age range\n          example: 20s\n          in: query\n          name: people_age\n          schema:\n            enum:\n              - infants\n              - children\n              - teenagers\n              - 20s\n              - 30s\n              - 40s\n              - 50s\n              - 60s\n              - older\n            type: string\n        - description: Show videos with people of the specified ethnicities\n          example: hispanic\n          in: query\n          name: people_ethnicity\n          schema:\n            items:\n              enum:\n                - african\n                - african_american\n                - black\n                - brazilian\n                - chinese\n                - caucasian\n                - east_asian\n                - hispanic\n                - japanese\n                - middle_eastern\n                - native_american\n                - pacific_islander\n                - south_asian\n                - southeast_asian\n                - other\n              type: string\n            type: array\n        - description: Show videos with people with the specified gender\n          example: female\n          in: query\n          name: people_gender\n          schema:\n            enum:\n              - male\n              - female\n              - both\n            type: string\n        - description: Show videos with the specified number of people\n          example: 2\n          in: query\n          name: people_number\n          schema:\n            maximum: 4\n            minimum: 0\n            type: integer\n        - description: Show only videos of people with a signed model release\n          example: true\n          in: query\n          name: people_model_released\n          schema:\n            type: boolean\n        - description: One or more search terms separated by spaces; you can use NOT to filter out videos that match a term\n          example: dogs running on the beach\n          in: query\n          name: query\n          schema:\n            type: string\n        - description: Show videos with the specified resolution\n          example: 4k\n          in: query\n          name: resolution\n          schema:\n            enum:\n              - 4k\n              - standard_definition\n              - high_definition\n            type: string\n        - description: Enable or disable safe search\n          in: query\n          name: safe\n          schema:\n            default: true\n            type: boolean\n        - description: Sort by one of these categories\n          in: query\n          name: sort\n          schema:\n            default: popular\n            enum:\n              - newest\n              - popular\n              - relevance\n              - random\n            type: string\n        - description: Amount of detail to render in the response\n          in: query\n          name: view\n          schema:\n            default: minimal\n            enum:\n              - minimal\n              - full\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 1.778\n                        aspect_ratio: 16:9\n                        assets:\n                          preview_jpg:\n                            url: https://ak8.picdn.net/shutterstock/videos/33248488/thumb/12.jpg\n                          preview_mp4:\n                            url: https://ak8.picdn.net/shutterstock/videos/33248488/preview/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.mp4\n                          preview_webm:\n                            url: https://ak8.picdn.net/shutterstock/videos/33248488/preview/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.webm\n                          thumb_jpg:\n                            url: https://ak8.picdn.net/shutterstock/videos/33248488/thumb/12.jpg\n                          thumb_mp4:\n                            url: https://ak8.picdn.net/shutterstock/videos/33248488/thumb/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.mp4\n                          thumb_webm:\n                            url: https://ak8.picdn.net/shutterstock/videos/33248488/thumb/stock-footage-the-concept-of-digitalization-of-information-flow-moving-through-rack-servers-in-data-center-shot.webm\n                        contributor:\n                          id: \"178456\"\n                        description: \"The Concept of: Digitalization of Information Flow Moving Through Rack Servers in Data Center. Shot on RED EPIC-W 8K Helium Cinema Camera.\"\n                        duration: 19\n                        has_model_release: false\n                        id: \"33248488\"\n                        media_type: video\n                        url: https://www.shutterstock.com/video/clip-33248488\n                    page: 1\n                    per_page: 1\n                    search_id: 4LseqIiX-nIW7_vx8-jhWQ\n                    total_count: 9488747\n              schema:\n                $ref: \"#/components/schemas/VideoSearchResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Search for videos\n      tags:\n        - videos\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET \"https://api.shutterstock.com/v2/videos/search\" \\\n            --header \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -G \\\n            --data-urlencode \"query=hot air balloon\" \\\n            --data-urlencode \"duration_from=30\" \\\n            --data-urlencode \"sort=popular\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const videosApi = new sstk.VideosApi();\n\n            const queryParams = {\n              \"query\": \"hot air balloon\",\n              \"duration_from\": 30,\n              \"sort\": \"popular\"\n            };\n\n            videosApi.searchVideos(queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $queryFields = [\n              \"query\" =\u003e \"hot air balloon\",\n              \"duration_from\" =\u003e 30,\n              \"sort\" =\u003e \"popular\"\n            ];\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/videos/search?\" . http_build_query($queryFields),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock videos search-videos --query \"hot air balloon\" --duration-from 30 --sort popular\n  /v2/videos/search/suggestions:\n    get:\n      description: This endpoint provides autocomplete suggestions for partial search terms.\n      operationId: getVideoSuggestions\n      parameters:\n        - description: Search term for which you want keyword suggestions\n          example: cats\n          in: query\n          name: query\n          required: true\n          schema:\n            type: string\n        - description: Limit the number of the suggestions\n          in: query\n          name: limit\n          schema:\n            default: 10\n            maximum: 25\n            minimum: 1\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - cat scan\n                      - cats and dogs\n                      - cats playing\n                      - catsuit\n                      - cat silhouette\n                      - catskills\n                      - cats eyes\n                      - cat sitting\n                      - cat sleeping\n                      - cats eye\n              schema:\n                $ref: \"#/components/schemas/Suggestions\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get suggestions for a search term\n      tags:\n        - videos\n  /v2/videos/updated:\n    get:\n      description: This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show videos that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.\n      operationId: getUpdatedVideos\n      parameters:\n        - description: Show videos updated on or after the specified date\n          example: 2020-05-29\n          in: query\n          name: start_date\n          schema:\n            format: date\n            type: string\n        - description: Show videos updated before the specified date\n          example: 2021-05-29\n          in: query\n          name: end_date\n          schema:\n            format: date\n            type: string\n        - description: Show videos updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows videos that were updated in the hour preceding the request\n          in: query\n          name: interval\n          schema:\n            default: 1 HOUR\n            type: string\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 100\n            maximum: 2000\n            minimum: 1\n            type: integer\n        - description: Sort by oldest or newest videos first\n          in: query\n          name: sort\n          schema:\n            default: newest\n            enum:\n              - newest\n              - oldest\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - id: \"1030611710\"\n                        updated_time: 2019-06-04T15:57:31-04:00\n                        updates:\n                          - addition\n                          - edit\n                      - id: \"1030611713\"\n                        updated_time: 2019-06-04T15:57:31-04:00\n                        updates:\n                          - addition\n                          - edit\n                      - id: \"1030611719\"\n                        updated_time: 2019-06-04T15:57:31-04:00\n                        updates:\n                          - addition\n                          - edit\n              schema:\n                $ref: \"#/components/schemas/UpdatedMediaDataList\"\n          description: OK\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List updated videos\n      tags:\n        - videos\n      x-code-samples:\n        - lang: shell\n          source: |\n            curl -X GET https://api.shutterstock.com/v2/videos/updated \\\n            -H \"Accept: application/json\" \\\n            -H \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\" \\\n            -G \\\n            --data-urlencode \"interval=30 MINUTE\"\n        - lang: javascript--nodejs\n          source: |\n            const sstk = require(\"shutterstock-api\");\n\n            sstk.setAccessToken(process.env.SHUTTERSTOCK_API_TOKEN);\n\n            const videosApi = new sstk.VideosApi();\n\n            const queryParams = {\n              \"interval\": \"30 MINUTE\"\n            };\n\n            videosApi.getUpdatedVideos(queryParams)\n              .then((data) =\u003e {\n                console.log(data);\n              })\n              .catch((error) =\u003e {\n                console.error(error);\n              });\n        - lang: php\n          source: |\n            $queryFields = [\n              \"interval\" =\u003e \"30 MINUTE\"\n            ];\n\n            $options = [\n              CURLOPT_URL =\u003e \"https://api.shutterstock.com/v2/videos/updated?\" . http_build_query($queryFields),\n              CURLOPT_USERAGENT =\u003e \"php/curl\",\n              CURLOPT_HTTPHEADER =\u003e [\n                \"Authorization: Bearer $SHUTTERSTOCK_API_TOKEN\"\n              ],\n              CURLOPT_RETURNTRANSFER =\u003e 1\n            ];\n\n            $handle = curl_init();\n            curl_setopt_array($handle, $options);\n            $response = curl_exec($handle);\n            curl_close($handle);\n\n            $decodedResponse = json_decode($response);\n            print_r($decodedResponse);\n        - lang: bash\n          source: |-\n            export SHUTTERSTOCK_API_TOKEN=v2/ODYwYmRlNzBiYjMzNTE2M2UyZTQvMTc4NzI2OTM4L2N1c3RvbWVyLzIvWEtXR01HQ1FaVHRLOG85a\n\n            shutterstock videos get-updated-videos --interval \"30 MINUTE\"\n  \"/v2/videos/{id}\":\n    get:\n      description: This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.\n      operationId: getVideo\n      parameters:\n        - description: Video ID\n          example: \"639703\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Language for the keywords and categories in the response\n          example: es\n          in: query\n          name: language\n          schema:\n            $ref: \"#/components/schemas/Language\"\n        - description: Amount of detail to render in the response\n          in: query\n          name: view\n          schema:\n            default: full\n            enum:\n              - minimal\n              - full\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    added_date: 2017-09-18\n                    aspect: 1.896\n                    aspect_ratio: 1.90:1\n                    assets:\n                      4k:\n                        display_name: Original UltraHD 4K\n                        file_size: 1859655680\n                        format: apch\n                        fps: 25\n                        height: 2160\n                        is_licensable: true\n                        width: 4096\n                      hd:\n                        display_name: HD MPEG\n                        file_size: 92101632\n                        format: mov\n                        fps: 25\n                        height: 1080\n                        is_licensable: true\n                        width: 2046\n                      preview_jpg:\n                        url: https://ak3.picdn.net/shutterstock/videos/30867073/thumb/1.jpg\n                      preview_mp4:\n                        url: https://ak3.picdn.net/shutterstock/videos/30867073/preview/stock-footage-fans-cheering-for-sports-team-on-the-bleachers-of-a-professional-stadium.mp4\n                      preview_webm:\n                        url: https://ak3.picdn.net/shutterstock/videos/30867073/preview/stock-footage-fans-cheering-for-sports-team-on-the-bleachers-of-a-professional-stadium.webm\n                      sd:\n                        display_name: Standard Definition MPEG\n                        file_size: 18221056\n                        format: mov\n                        fps: 25\n                        height: 480\n                        is_licensable: true\n                        width: 910\n                      thumb_jpg:\n                        url: https://ak3.picdn.net/shutterstock/videos/30867073/thumb/1.jpg\n                      thumb_jpgs:\n                        urls:\n                          - https://ak3.picdn.net/shutterstock/videos/30867073/thumb/1.jpg\n                          - https://ak3.picdn.net/shutterstock/videos/30867073/thumb/2.jpg\n                          - https://ak3.picdn.net/shutterstock/videos/30867073/thumb/3.jpg\n                          - https://ak3.picdn.net/shutterstock/videos/30867073/thumb/12.jpg\n                      thumb_mp4:\n                        url: https://ak3.picdn.net/shutterstock/videos/30867073/thumb/stock-footage-fans-cheering-for-sports-team-on-the-bleachers-of-a-professional-stadium.mp4\n                      thumb_webm:\n                        url: https://ak3.picdn.net/shutterstock/videos/30867073/thumb/stock-footage-fans-cheering-for-sports-team-on-the-bleachers-of-a-professional-stadium.webm\n                      web:\n                        display_name: Low Resolution MPEG\n                        file_size: 6441984\n                        format: mov\n                        fps: 25\n                        height: 240\n                        is_licensable: true\n                        width: 454\n                    categories:\n                      - id: \"13\"\n                        name: People\n                      - id: \"18\"\n                        name: Sports/Recreation\n                    contributor:\n                      id: \"907171\"\n                    description: Fans cheering for sports team on the bleachers of a professional stadium\n                    duration: 19\n                    has_model_release: true\n                    has_property_release: true\n                    id: \"30867073\"\n                    is_adult: false\n                    keywords:\n                      - 4k resolution\n                      - adult\n                      - adults only\n                      - american football - sport\n                      - applauding\n                      - arms raised\n                    media_type: video\n                    models:\n                      - id: \"22793203\"\n                    url: https://www.shutterstock.com/video/clip-30867073\n              schema:\n                $ref: \"#/components/schemas/Video\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not found\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: Get details about videos\n      tags:\n        - videos\n  \"/v2/videos/{id}/similar\":\n    get:\n      description: This endpoint searches for videos that are similar to a video that you specify.\n      operationId: getSimilarVideos\n      parameters:\n        - description: The ID of a video for which similar videos should be returned\n          example: \"2140697\"\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: Language for the keywords and categories in the response\n          example: es\n          in: query\n          name: language\n          schema:\n            $ref: \"#/components/schemas/Language\"\n        - description: Page number\n          in: query\n          name: page\n          schema:\n            default: 1\n            minimum: 1\n            type: integer\n        - description: Number of results per page\n          in: query\n          name: per_page\n          schema:\n            default: 20\n            maximum: 500\n            minimum: 1\n            type: integer\n        - description: Amount of detail to render in the response\n          in: query\n          name: view\n          schema:\n            default: minimal\n            enum:\n              - minimal\n              - full\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - aspect: 1.778\n                        aspect_ratio: 16:9\n                        assets:\n                          preview_jpg:\n                            url: https://ak8.picdn.net/shutterstock/videos/6658088/thumb/1.jpg\n                          preview_mp4:\n                            url: https://ak8.picdn.net/shutterstock/videos/6658088/preview/stock-footage-caucasian-parents-wearing-casual-clothes-standing-watching-ocean-waves-summer-daughters-carrying.mp4\n                          preview_webm:\n                            url: https://ak8.picdn.net/shutterstock/videos/6658088/preview/stock-footage-caucasian-parents-wearing-casual-clothes-standing-watching-ocean-waves-summer-daughters-carrying.webm\n                          thumb_jpg:\n                            url: https://ak8.picdn.net/shutterstock/videos/6658088/thumb/1.jpg\n                          thumb_mp4:\n                            url: https://ak8.picdn.net/shutterstock/videos/6658088/thumb/stock-footage-caucasian-parents-wearing-casual-clothes-standing-watching-ocean-waves-summer-daughters-carrying.mp4\n                          thumb_webm:\n                            url: https://ak8.picdn.net/shutterstock/videos/6658088/thumb/stock-footage-caucasian-parents-wearing-casual-clothes-standing-watching-ocean-waves-summer-daughters-carrying.webm\n                        contributor:\n                          id: \"87721\"\n                        description: Caucasian parents wearing casual clothes standing watching ocean waves summer daughters carrying bodyboards surfboards slow motion\n                        duration: 23\n                        id: \"6658088\"\n                        media_type: video\n                    page: 1\n                    per_page: 1\n                    search_id: \"\"\n                    total_count: 200\n              schema:\n                $ref: \"#/components/schemas/VideoSearchResults\"\n          description: OK\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n      security:\n        - basic: []\n        - customer_accessCode: []\n      summary: List similar videos\n      tags:\n        - videos\ncomponents:\n  schemas:\n    AccessTokenDetails:\n      description: Access token details that are currently associated with this user\n      example:\n        client_id: c456b-26230-fa8ed-d19ab-05ce2-bf0aa\n        customer_id: \"123456789\"\n        expires_in: 3600\n        realm: customer\n        scopes:\n          - user.view\n          - user.email\n          - user.address\n          - user.edit\n          - organization.view\n          - organization.address\n          - collections.view\n          - collections.edit\n          - licenses.view\n          - licenses.create\n          - media.upload\n          - media.submit\n          - media.edit\n          - purchases.view\n          - purchases.create\n        user_id: \"123456789\"\n        username: jdoe\n      properties:\n        client_id:\n          description: Client ID that is associated with the user\n          type: string\n        contributor_id:\n          description: Contributor ID that is associated with the user\n          type: string\n        customer_id:\n          description: Customer ID that is associated with the user\n          type: string\n        expires_in:\n          description: Number of seconds until the access token expires; no expiration if this value is null\n          type: integer\n        organization_id:\n          description: Organization ID that is associated with the user\n          type: string\n        realm:\n          description: Type of access token\n          enum:\n            - customer\n            - contributor\n          type: string\n        scopes:\n          description: Scopes that this access token provides when used as authentication\n          items:\n            type: string\n          type: array\n        user_id:\n          description: User ID that is associated with the user\n          type: string\n        username:\n          description: User name that is associated with the user\n          type: string\n      type: object\n    Album:\n      additionalProperties: false\n      description: Album metadata\n      example:\n        id: \"1234567\"\n        title: Happy Music\n      properties:\n        id:\n          description: The album ID\n          type: string\n        title:\n          description: The album title\n          type: string\n      required:\n        - id\n        - title\n      type: object\n    Allotment:\n      description: An allotment of credits as part of a subscription\n      example:\n        downloads_left: 5\n        downloads_limit: 10\n        end_time: 2020-05-29T12:10:22-05:00\n        start_time: 2020-05-29T12:10:22-05:00\n      properties:\n        downloads_left:\n          description: Number of credits remaining in the subscription\n          type: integer\n        downloads_limit:\n          description: Total number of credits available to this subscription\n          type: integer\n        end_time:\n          description: Date the subscription ends\n          format: date-time\n          type: string\n        start_time:\n          description: Date the subscription started\n          format: date-time\n          type: string\n      type: object\n    Artist:\n      description: Metadata about the artist that created the media\n      example:\n        name: The Happy Tunes Band\n      properties:\n        name:\n          description: The artist's name\n          type: string\n      required:\n        - name\n      type: object\n    Audio:\n      additionalProperties: false\n      description: Audio metadata\n      example:\n        added_date: 2016-08-16\n        artists:\n          - name: Klimenko Music\n        assets:\n          clean_audio:\n            file_size: 35188408\n          preview_mp3:\n            file_size: 4400203\n            url: https://ak.picdn.net/shutterstock/audio/442583/preview/preview.mp3\n          preview_ogg:\n            file_size: 4453197\n            url: https://ak.picdn.net/shutterstock/audio/442583/preview/preview.ogg\n          waveform:\n            file_size: 18778\n            url: https://ak.picdn.net/shutterstock/audio/442583/waveform/waveform.png\n        bpm: 110\n        contributor:\n          id: \"2847971\"\n        description: Pulsing and feel-good, featuring soaring synthesizer, groovy synth bass drums and synth drums that create a euphoric, upbeat mood.\n        duration: 183\n        genres:\n          - Dance/Electronic\n          - Electro Pop\n          - Pop/Rock\n        id: \"442583\"\n        instruments:\n          - Piano\n          - Synth bass\n          - Synth drums\n          - Synthesizer\n        is_adult: false\n        is_instrumental: true\n        isrc: \"\"\n        keywords:\n          - celebratory\n          - chic\n          - euphoric\n          - good times\n          - hip\n          - optimistic\n          - party\n          - soaring\n          - upbeat\n        language: en\n        lyrics: \"\"\n        media_type: audio\n        moods:\n          - Bright\n          - Confident\n          - Fun\n          - Happy\n          - Inspiring\n          - Optimistic\n          - Playful\n          - Sophisticated\n          - Stylish\n          - Uplifting\n        published_time: 2016-08-16T14:30:03-04:00\n        recording_version: \"\"\n        releases: []\n        similar_artists: []\n        title: Another Tomorrow\n        updated_time: 2016-08-18T17:59:33-04:00\n        url: \"\"\n        vocal_description: \"\"\n      properties:\n        added_date:\n          description: Date this track was added to the Shutterstock library\n          format: date\n          type: string\n        affiliate_url:\n          description: Affiliate referral link; appears only for registered affiliate partners\n          type: string\n        album:\n          $ref: \"#/components/schemas/Album\"\n        artists:\n          description: List of artists\n          items:\n            $ref: \"#/components/schemas/Artist\"\n          type: array\n        assets:\n          $ref: \"#/components/schemas/AudioAssets\"\n        bpm:\n          description: BPM (beats per minute) of this track\n          type: integer\n        contributor:\n          $ref: \"#/components/schemas/Contributor\"\n        deleted_time:\n          format: date-time\n          type: string\n        description:\n          description: Description of this track\n          type: string\n        duration:\n          description: Duration of this track in seconds\n          type: integer\n        genres:\n          description: List of all genres for this track\n          items:\n            description: Genre that is associated with this track\n            type: string\n          type: array\n        id:\n          description: Shutterstock ID of this track\n          type: string\n        instruments:\n          description: List of all instruments that appear in this track\n          items:\n            description: Instrument that appears in this track\n            type: string\n          type: array\n        is_adult:\n          description: Whether or not this track contains adult content\n          type: boolean\n        is_instrumental:\n          description: Whether or not this track is purely instrumental (lacking lyrics)\n          type: boolean\n        isrc:\n          description: \"\"\n          type: string\n        keywords:\n          description: List of all keywords for this track\n          items:\n            description: Keyword for this track\n            type: string\n          type: array\n        language:\n          description: Language of this track's lyrics\n          type: string\n        lyrics:\n          description: Lyrics of this track\n          type: string\n        media_type:\n          description: Media type of this track; should always be \"audio\"\n          type: string\n        model_releases:\n          description: List of all model releases for this track\n          items:\n            $ref: \"#/components/schemas/ModelRelease\"\n          type: array\n        moods:\n          description: List of all moods of this track\n          items:\n            description: Mood of this track\n            type: string\n          type: array\n        published_time:\n          description: Time this track was published\n          format: date-time\n          type: string\n        recording_version:\n          description: Recording version of this track\n          type: string\n        releases:\n          description: List of all releases of this track\n          items:\n            description: Release of this track\n            type: string\n          type: array\n        similar_artists:\n          description: List of all similar artists of this track\n          items:\n            $ref: \"#/components/schemas/Artist\"\n          type: array\n        submitted_time:\n          description: Time this track was submitted\n          format: date-time\n          type: string\n        title:\n          description: Title of this track\n          type: string\n        updated_time:\n          description: Time this track was last updated\n          format: date-time\n          type: string\n        url:\n          description: \"\"\n          type: string\n        vocal_description:\n          description: Vocal description of this track\n          type: string\n      required:\n        - id\n        - media_type\n        - contributor\n      type: object\n    AudioAssetDetails:\n      description: Information about a file that is part of an audio asset\n      example:\n        file_size: 4453197\n        url: https://ak.picdn.net/shutterstock/audio/442583/preview/preview.mp3\n      properties:\n        file_size:\n          description: File size of the track\n          type: integer\n        url:\n          description: URL the track is available at\n          type: string\n      type: object\n    AudioAssets:\n      description: Files that are available as part of an audio asset\n      example:\n        clean_audio:\n          file_size: 35188408\n        preview_mp3:\n          file_size: 4400203\n          url: https://ak.picdn.net/shutterstock/audio/442583/preview/preview.mp3\n        preview_ogg:\n          file_size: 4453197\n          url: https://ak.picdn.net/shutterstock/audio/442583/preview/preview.ogg\n        waveform:\n          file_size: 18778\n          url: https://ak.picdn.net/shutterstock/audio/442583/waveform/waveform.png\n      properties:\n        album_art:\n          $ref: \"#/components/schemas/AudioAssetDetails\"\n        clean_audio:\n          $ref: \"#/components/schemas/AudioAssetDetails\"\n        original_audio:\n          $ref: \"#/components/schemas/AudioAssetDetails\"\n        preview_mp3:\n          $ref: \"#/components/schemas/AudioAssetDetails\"\n        preview_ogg:\n          $ref: \"#/components/schemas/AudioAssetDetails\"\n        waveform:\n          $ref: \"#/components/schemas/AudioAssetDetails\"\n      type: object\n    AudioDataList:\n      description: List of tracks\n      example:\n        data:\n          - added_date: 2016-04-12\n            artists:\n              - name: Fin Productions\n            assets:\n              clean_audio:\n                file_size: 30760372\n              preview_mp3:\n                file_size: 3846606\n                url: https://ak.picdn.net/shutterstock/audio/434750/preview/preview.mp3\n              preview_ogg:\n                file_size: 4402608\n                url: https://ak.picdn.net/shutterstock/audio/434750/preview/preview.ogg\n              waveform:\n                file_size: 19822\n                url: https://ak.picdn.net/shutterstock/audio/434750/waveform/waveform.png\n            bpm: 100\n            contributor:\n              id: \"2847971\"\n            description: Pulsing and feel-good, featuring slick electric guitar, synthesizer, bass, electronic drum pads and drums that create a positive, celebratory mood.\n            duration: 160\n            genres:\n              - Dance/Electronic\n              - Electro Pop\n              - Pop/Rock\n            id: \"434750\"\n            instruments:\n              - Bass\n              - Drums\n              - Electric guitar\n              - Pads\n              - Percussion\n              - Synthesizer\n            is_adult: false\n            is_instrumental: true\n            isrc: \"\"\n            keywords:\n              - breezy\n              - celebration\n              - festive\n              - good times\n              - hopeful\n              - optimistic\n              - party\n              - positive\n              - reflective\n            language: en\n            lyrics: \"\"\n            media_type: audio\n            moods:\n              - Bright\n              - Confident\n              - Fun\n              - Happy\n              - Inspiring\n              - Optimistic\n              - Playful\n              - Sophisticated\n              - Stylish\n              - Uplifting\n            published_time: 2016-04-12T17:45:29-04:00\n            recording_version: \"\"\n            releases: []\n            similar_artists: []\n            title: Fresh Love\n            updated_time: 2016-08-18T18:03:11-04:00\n            vocal_description: \"\"\n      properties:\n        data:\n          description: Tracks\n          items:\n            $ref: \"#/components/schemas/Audio\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: Current page that is returned\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        total_count:\n          description: Total count of all results across all pages\n          type: integer\n    AudioRenderResult:\n      description: The output of an audio render in WAV or MP3 format\n      example:\n        created_date: 2021-07-13T16:19:30-04:00\n        files: []\n        id: 2yZp13IhLqnjfh2KquDTOHUHzTiP\n        preset: MASTER_MP3\n        progress_percent: 0\n        status: WAITING_COMPOSE\n        timeline: {}\n        updated_date: 2021-07-13T16:19:30-04:00\n      properties:\n        created_date:\n          description: The time the render was submitted to the API\n          format: date-time\n          type: string\n        files:\n          description: The files associated with the render\n          items:\n            $ref: \"#/components/schemas/AudioRendersFilesList\"\n          type: array\n        id:\n          description: The alphanumeric ID of the simple render\n          type: string\n        preset:\n          description: The file format preset\n          enum:\n            - MASTER_MP3\n            - MASTER_WAV\n            - STEMS_WAV\n          type: string\n        progress_percent:\n          description: The current progress of the render as a percentage\n          type: integer\n        status:\n          description: A coarse progress indicator\n          enum:\n            - WAITING_COMPOSE\n            - RUNNING_COMPOSE\n            - WAITING_RENDER\n            - RUNNING_RENDER\n            - CREATED\n            - FAILED_CREATE\n          type: string\n        timeline:\n          $ref: \"#/components/schemas/AudioRenderTimeline\"\n        updated_date:\n          description: The time that the audio output was uploaded\n          format: date-time\n          type: string\n      required:\n        - id\n        - timeline\n        - status\n      type: object\n    AudioRenderTimeline:\n      description: A timeline object that represents either a request for music to be created or an entire music composition\n      example:\n        spans:\n          - id: 123456\n            instrument_groups:\n              - instrument_group: The instrument ID\n                statuses:\n                  - beat: 12\n                    status: active\n            regions:\n              - beat: 12\n                descriptor: The descriptor ID needed to compose the music\n                end_type:\n                  beat: 12\n                  event: ending\n                  type: ringout\n                id: 123456\n                key:\n                  tonic_accidental: double flat\n                  tonic_note: c\n                  tonic_quality: major\n                region: music\n            span_type: metered\n            tempo: 12345\n            tempo_changes:\n              - tempo: 12345\n                time: 5\n            time: 5\n      properties:\n        spans:\n          description: A span object that represents the beginning of a period of absolute time\n          items:\n            $ref: \"#/components/schemas/AudioRenderTimelineSpan\"\n          type: array\n      type: object\n    AudioRenderTimelineSpan:\n      description: The beginning of a non-overlapping period of absolute time\n      example:\n        id: 111\n        regions:\n          - beat: 12\n            descriptor: cinematic_minimal_tense\n            end_type:\n              beat: 24\n              event: ending\n              type: ringout\n            id: 222\n            key:\n              tonic_note: c\n              tonic_quality: major\n            region: music\n        span_type: metered\n        tempo: 76\n        time: 0\n      properties:\n        id:\n          description: An identifier which must be unique within the parent span\n          type: number\n        instrument_groups:\n          description: An array of instrument_group objects that are used in this span\n          items:\n            $ref: \"#/components/schemas/AudioRenderTimelineSpanInstrumentGroup\"\n          type: array\n        regions:\n          description: An array of region objects within the span\n          items:\n            $ref: \"#/components/schemas/AudioRenderTimelineSpanRegion\"\n          type: array\n        span_type:\n          description: Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span\n          enum:\n            - metered\n            - unmetered\n          type: string\n        tempo:\n          description: The tempo, in beats per minute, at the start of the span; if not provided, the API selects a random tempo\n          type: integer\n        tempo_changes:\n          description: Two or more inflection points in a tempo curve; the API creates a smoothly changing tempo by using a linear interpolation of the time between each tempo change\n          items:\n            $ref: \"#/components/schemas/AudioRenderTimelineSpanTempoChanges\"\n          type: array\n        time:\n          description: The absolute time, in seconds, at which the span starts\n          type: integer\n      required:\n        - span_type\n        - time\n      type: object\n    AudioRenderTimelineSpanInstrumentGroup:\n      description: An instrument and the status objects that specify when that instrument plays\n      example:\n        instrument_group: bright_roomy_kit\n        statuses:\n          - beat: 12\n            status: active\n      properties:\n        instrument_group:\n          description: The instrument ID\n          type: string\n        statuses:\n          description: An array of status objects\n          items:\n            $ref: \"#/components/schemas/AudioRenderTimelineSpanInstrumentGroupStatus\"\n          type: array\n      required:\n        - instrument_group\n      type: object\n    AudioRenderTimelineSpanInstrumentGroupStatus:\n      description: The status of an instrument at a specific beat\n      example:\n        beat: 12\n        status: active\n      properties:\n        beat:\n          description: The beat, relative to the span, at which the status begins\n          type: number\n        status:\n          description: Whether the instrument is playing or not\n          enum:\n            - active\n            - inactive\n          type: string\n      required:\n        - beat\n        - status\n      type: object\n    AudioRenderTimelineSpanRegion:\n      description: A period of music or silence, measured in beats\n      example:\n        beat: 12\n        descriptor: cinematic_minimal_tense\n        end_type:\n          beat: 24\n          event: ending\n          type: ringout\n        id: 222\n        key:\n          tonic_note: c\n          tonic_quality: major\n        region: music\n      properties:\n        beat:\n          description: The beat, relative to the span, at which the region object's music begins\n          type: integer\n        descriptor:\n          description: The descriptor ID needed to compose the music\n          type: string\n        end_type:\n          description: A high-level description of how a region ends\n          properties:\n            beat:\n              description: The beat, relative to the start of the active region, at which the end_type begins; in other words, the ending starts on this beat of the region\n              type: number\n            event:\n              description: The type of event\n              enum:\n                - ending\n                - transition\n              type: string\n            type:\n              description: The specific action to perform; if the event type is \"ending\" then this must be \"ringout\" and if event type is \"transition\" this must be \"cut\"\n              enum:\n                - ringout\n                - cut\n              type: string\n          required:\n            - beat\n            - event\n            - type\n          type: object\n        id:\n          description: An identifier which must be unique within the parent span\n          type: number\n        key:\n          description: The key signature active at the beginning of the region\n          properties:\n            tonic_accidental:\n              description: A text representation of the accidental; if this field is specified, the tonic_note field should also be specified\n              enum:\n                - double flat\n                - flat\n                - natural\n                - sharp\n                - double sharp\n              type: string\n            tonic_note:\n              description: A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified\n              enum:\n                - c\n                - d\n                - e\n                - f\n                - g\n                - a\n                - b\n              type: string\n            tonic_quality:\n              description: The scale quality; if this field is not specified, the API selects the quality automatically\n              enum:\n                - major\n                - natural_minor\n                - harmonic_minor\n                - melodic_minor\n                - ionian\n                - dorian\n                - phrygian\n                - lydian\n                - mixolydian\n                - aeolian\n                - locrian\n              example: major\n              type: string\n          type: object\n        region:\n          description: The type of region\n          enum:\n            - music\n            - silence\n          type: string\n      required:\n        - id\n        - region\n        - descriptor\n        - beat\n      type: object\n    AudioRenderTimelineSpanTempoChanges:\n      description: An inflection point in a tempo curve; the API creates the overall tempo by using a linear interpolation of the time between each tempo change\n      example:\n        tempo: 86\n        time: 5\n      properties:\n        tempo:\n          description: The tempo, in beats per minute, active at this time\n          type: number\n        time:\n          description: The time, in seconds, at which the tempo exists\n          type: number\n      required:\n        - time\n        - tempo\n      type: object\n    AudioRendersFilesList:\n      description: Files associated with the render\n      example:\n        bits_sample: 16\n        content_type: audio/mp3\n        download_url: https://s3.amazonaws.com/prod-amper-inferno-ephemeral/renders/2021/07/13/amper-api-QwAgKqXQAzr622KuXYZ25C9WRH3a/0.mp3\n        filename: My_audio_ai.mp3\n        frequency_hz: 44100\n        kbits_second: 192\n        size_bytes: 481556\n        tracks:\n          - master\n      properties:\n        bits_sample:\n          description: The bit depth of the audio files in bits/sample\n          type: number\n        content_type:\n          description: The content-type of the file\n          type: string\n        download_url:\n          description: The internet-accessible URL from which the file can be downloaded. Any redirects encountered when using this URL must be followed\n          type: string\n        filename:\n          description: The user-specified file name suggestion from the render request; this file name becomes the filename property of the Content-Disposition header when the user downloads the rendered audio file\n          type: string\n        frequency_hz:\n          description: The Sample rate of the audio files in Hertz (Hz)\n          type: number\n        kbits_second:\n          description: The data rate of the audio files in kilobits/second\n          type: number\n        size_bytes:\n          description: Size of the file in bytes\n          type: number\n        tracks:\n          description: An array of track names included in the file\n          items:\n            type: string\n          type: array\n      required:\n        - filename\n        - bits_sample\n        - content_type\n        - download_url\n        - frequency_hz\n        - kbits_second\n        - size_bytes\n        - tracks\n      type: object\n    AudioRendersListResults:\n      description: Audio render data\n      example:\n        audio_renders:\n          - created_date: 2021-07-13T16:19:30-04:00\n            files: []\n            id: 2yZp13IhLqnjfh2KquDTOHUHzTiP\n            preset: MASTER_MP3\n            progress_percent: 20\n            status: WAITING_COMPOSE\n            timeline: {}\n            updated_date: 2021-07-13T16:19:30-04:00\n          - created_date: 2021-07-12T16:39:59-04:00\n            files:\n              - bits_sample: 16\n                content_type: audio/mp3\n                download_url: https://s3.amazonaws.com/prod-amper-inferno-ephemeral/renders/2021/07/13/amper-api-QwAgKqXQAzr622KuXYZ25C9WRH3a/0.mp3\n                filename: My_audio_ai.mp3\n                frequency_hz: 44100\n                kbits_second: 192\n                size_bytes: 481556\n                tracks:\n                  - master\n              - bits_sample: 0\n                content_type: application/vnd.amper.waveform+json\n                download_url: https://s3.amazonaws.com/prod-amper-inferno-ephemeral/renders/2021/07/13/amper-api-QwAgKqXQAzr622KuXYZ25C9WRH3a/1.json\n                filename: render.json\n                frequency_hz: 42\n                kbits_second: 0\n                size_bytes: 4420\n                tracks:\n                  - master\n            id: QwAgKqXQAzr622KuXYZ25C9WRH3a\n            preset: MASTER_MP3\n            progress_percent: 100\n            status: CREATED\n            timeline: {}\n            updated_date: 2021-07-12T16:46:26-04:00\n      properties:\n        audio_renders:\n          description: Audio render results\n          items:\n            $ref: \"#/components/schemas/AudioRenderResult\"\n          type: array\n      required:\n        - audio_renders\n    AudioSearchResults:\n      additionalProperties: false\n      description: Audio search results\n      example:\n        data:\n          - added_date: 2016-08-16\n            artists:\n              - name: Klimenko Music\n            assets:\n              clean_audio:\n                file_size: 35188408\n              preview_mp3:\n                file_size: 4400203\n                url: https://ak.picdn.net/shutterstock/audio/442583/preview/preview.mp3\n              preview_ogg:\n                file_size: 4453197\n                url: https://ak.picdn.net/shutterstock/audio/442583/preview/preview.ogg\n              waveform:\n                file_size: 18778\n                url: https://ak.picdn.net/shutterstock/audio/442583/waveform/waveform.png\n            bpm: 110\n            contributor:\n              id: \"2847971\"\n            description: Pulsing and feel-good, featuring soaring synthesizer, groovy synth bass drums and synth drums that create a euphoric, upbeat mood.\n            duration: 183\n            genres:\n              - Dance/Electronic\n              - Electro Pop\n              - Pop/Rock\n            id: \"442583\"\n            instruments:\n              - Piano\n              - Synth bass\n              - Synth drums\n              - Synthesizer\n            is_adult: false\n            is_instrumental: true\n            isrc: \"\"\n            keywords:\n              - celebratory\n              - chic\n              - euphoric\n              - good times\n              - hip\n              - optimistic\n              - party\n              - soaring\n              - upbeat\n            language: en\n            lyrics: \"\"\n            media_type: audio\n            moods:\n              - Bright\n              - Confident\n              - Fun\n              - Happy\n              - Inspiring\n              - Optimistic\n              - Playful\n              - Sophisticated\n              - Stylish\n              - Uplifting\n            published_time: 2016-08-16T14:30:03-04:00\n            recording_version: \"\"\n            releases: []\n            similar_artists: []\n            title: Another Tomorrow\n            updated_time: 2016-08-18T17:59:33-04:00\n            url: \"\"\n            vocal_description: \"\"\n        page: 1\n        per_page: 5\n        search_id: 749090bb-2967-4a20-b22e-c800dc845e10\n        total_count: 123455\n      properties:\n        data:\n          description: List of tracks\n          items:\n            $ref: \"#/components/schemas/Audio\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: Current page that is returned\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        search_id:\n          description: ID of the search\n          type: string\n        total_count:\n          description: Total count of all results across all pages\n          type: integer\n      required:\n        - data\n        - total_count\n        - search_id\n      type: object\n    AuthorizeResponse:\n      description: Response to Authorize requests\n      example:\n        body: https://accounts.shutterstock.com/login?next=%2Foauth%2Fauthorize%3Fresponse_type%3Dcode%26state%3D1539619928633%26scope%3Dlicenses.create%20licenses.view%20purchases.view%26client_id%3D6d097450b209c6dcd859%26redirect_uri%3Dhttp%3A%2F%2Flocalhost%3A3000%2Fmyapp%2Fauth%2Fcallback%26realm%3Dcustomer\n      properties:\n        body:\n          description: HTML redirect URL that contains the application authorization 'code'\n          type: string\n      required:\n        - body\n      type: object\n    Bands:\n      description: A band that can be used to generate music\n      example:\n        id: \"1234567\"\n        name: The Happy Tunes Band\n      properties:\n        id:\n          description: The ID of the band\n          type: string\n        name:\n          description: The name of the band\n          type: string\n      type: object\n    Category:\n      description: Category information\n      example:\n        id: \"1\"\n        name: Animals/Wildlife\n      properties:\n        id:\n          description: Category ID\n          type: string\n        name:\n          description: Category name\n          type: string\n      type: object\n    CategoryDataList:\n      description: List of categories that images can belong to\n      example:\n        data:\n          - id: \"1\"\n            name: Animals/Wildlife\n          - id: \"11\"\n            name: The Arts\n          - id: \"15\"\n            name: Science\n        page: 1\n        per_page: 5\n        total_count: 13\n      properties:\n        data:\n          description: Categories\n          items:\n            $ref: \"#/components/schemas/Category\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: The current page of results\n          type: integer\n        per_page:\n          description: The number of results per page\n          type: integer\n        total_count:\n          description: The total number of results across all pages\n          type: integer\n    Collection:\n      description: Metadata about a collection of assets\n      example:\n        cover_item:\n          id: \"297886754\"\n        id: \"293542904\"\n        items_updated_time: 2021-05-20T16:15:22-04:00\n        name: My collection\n        total_item_count: 85\n      properties:\n        cover_item:\n          $ref: \"#/components/schemas/CollectionItem\"\n        created_time:\n          description: When the collection was created\n          format: date-time\n          type: string\n        id:\n          description: The collection ID\n          type: string\n        items_updated_time:\n          description: The last time this collection's items were updated\n          format: date-time\n          type: string\n        name:\n          description: The name of the collection\n          type: string\n        share_code:\n          description: A code that can be used to share the collection (optional)\n          type: string\n        share_url:\n          description: The browser URL that can be used to share the collection (optional)\n          type: string\n        total_item_count:\n          description: The number of items in the collection\n          type: integer\n        updated_time:\n          description: The last time the collection was update (other than changes to the items in it)\n          format: date-time\n          type: string\n      required:\n        - id\n        - name\n        - total_item_count\n      type: object\n    CollectionCreateRequest:\n      description: Collection creation request\n      example:\n        name: Test Collection 19cf\n      properties:\n        name:\n          description: The name of the collection\n          type: string\n      required:\n        - name\n      type: object\n    CollectionCreateResponse:\n      description: Collection creation response\n      example:\n        id: \"48433105\"\n      properties:\n        id:\n          description: ID of the new collection\n          type: string\n      required:\n        - id\n      type: object\n    CollectionDataList:\n      description: List of collections\n      example:\n        data:\n          - cover_item:\n              id: \"297886754\"\n            id: \"293542904\"\n            items_updated_time: 2021-05-20T16:15:22-04:00\n            name: My collection\n            total_item_count: 85\n        page: 1\n        per_page: 100\n        total_count: 1\n      properties:\n        data:\n          description: Collections\n          items:\n            $ref: \"#/components/schemas/Collection\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: The current page of results\n          type: integer\n        per_page:\n          description: The number of results per page\n          type: integer\n        total_count:\n          description: The total number of results across all pages\n          type: integer\n    CollectionItem:\n      description: Metadata about an item that is part of a collection\n      example:\n        added_time: 2020-05-29T12:10:22-05:00\n        id: \"1690105108\"\n        media_type: image\n      properties:\n        added_time:\n          description: The date the item was added to the collection\n          format: date-time\n          type: string\n        id:\n          description: ID of the item\n          type: string\n        media_type:\n          description: The media type of the item, such as image, video, or audio\n          type: string\n      required:\n        - id\n      type: object\n    CollectionItemDataList:\n      description: List of items in a collection\n      example:\n        data:\n          - added_time: 2021-07-08T12:33:37.000Z\n            id: \"1690105108\"\n            media_type: image\n          - added_time: 2021-07-08T12:31:43.000Z\n            id: \"1468703072\"\n            media_type: image\n        page: 1\n        per_page: 2\n        total_count: 82\n      properties:\n        data:\n          description: Assets in the collection\n          items:\n            $ref: \"#/components/schemas/CollectionItem\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: The current page of results\n          type: integer\n        per_page:\n          description: The number of results per page\n          type: integer\n        total_count:\n          description: The total number of results across all pages\n          type: integer\n    CollectionItemRequest:\n      description: Request to get a list of items in a collection\n      example:\n        items:\n          - added_time: 2020-05-29T12:10:22-05:00\n            id: \"1690105108\"\n            media_type: image\n      properties:\n        items:\n          description: List of items\n          items:\n            $ref: \"#/components/schemas/CollectionItem\"\n          type: array\n      required:\n        - items\n      type: object\n    CollectionUpdateRequest:\n      description: Collection update request\n      example:\n        name: My collection with a new name\n      properties:\n        name:\n          description: The new name of the collection\n          type: string\n      required:\n        - name\n      type: object\n    ComputerVisionImageCreateResponse:\n      description: Asset upload information\n      example:\n        upload_id: Udb14e1c3540bdbf82b4b3fe12d3a44f2\n      properties:\n        upload_id:\n          type: string\n      required:\n        - upload_id\n      type: object\n    Contributor:\n      description: Information about a contributor\n      example:\n        id: \"12345678\"\n      properties:\n        id:\n          description: ID of the contributor\n          type: string\n      required:\n        - id\n      type: object\n    ContributorProfile:\n      description: Contributor profile data\n      example:\n        about: John Doe's photographs\n        contributor_type:\n          - photographer\n        display_name: John Doe\n        equipment:\n          - Nikon\n          - Fuji\n        id: \"12345678\"\n        location: US\n        portfolio_url: https://www.shutterstock.com/g/jdoe\n        social_media:\n          facebook: http://example.com/jdoe\n          google_plus: http://example.com/jdoe\n          linkedin: http://example.com/jdoe\n          pinterest: http://example.com/jdoe\n          tumblr: http://example.com/jdoe\n          twitter: http://example.com/jdoe\n        styles:\n          - landscape\n          - nature\n          - footage_travel\n        subjects:\n          - animals\n          - landmarks\n          - nature\n          - objects\n          - recreation\n        website: http://example.com/profiles/jdoe\n      properties:\n        about:\n          description: Short description of the contributors' library\n          type: string\n        contributor_type:\n          description: Type of content that the contributor specializes in (photographer, illustrator, etc)\n          items:\n            type: string\n          type: array\n        display_name:\n          description: Preferred name to be displayed for the contributor\n          type: string\n        equipment:\n          description: List of equipment used by the contributor (Canon EOS 5D Mark II, etc)\n          items:\n            type: string\n          type: array\n        id:\n          description: Contributor ID\n          type: string\n        location:\n          description: Country code representing the contributor's locale\n          format: country-code-2\n          type: string\n        portfolio_url:\n          description: Web URL for the contributors' profile\n          type: string\n        social_media:\n          $ref: \"#/components/schemas/ContributorProfileSocialMedia\"\n        styles:\n          description: List of styles that the contributor specializes in (lifestyle, mixed media, etc)\n          items:\n            type: string\n          type: array\n        subjects:\n          description: Generic list of subjects for contributors' work (food_and_drink, holiday, people, etc)\n          items:\n            type: string\n          type: array\n        website:\n          description: Personal website for the contributor\n          type: string\n      required:\n        - id\n      type: object\n    ContributorProfileDataList:\n      description: List of contributor profiles\n      example:\n        data:\n          - about: John Doe's photographs\n            contributor_type:\n              - photographer\n            display_name: John Doe\n            equipment:\n              - Nikon\n              - Fuji\n            id: \"12345678\"\n            location: US\n            portfolio_url: https://www.shutterstock.com/g/jdoe\n            social_media:\n              facebook: http://example.com/jdoe\n              google_plus: http://example.com/jdoe\n              linkedin: http://example.com/jdoe\n              pinterest: http://example.com/jdoe\n              tumblr: http://example.com/jdoe\n              twitter: http://example.com/jdoe\n            styles:\n              - landscape\n              - nature\n              - footage_travel\n            subjects:\n              - animals\n              - landmarks\n              - nature\n              - objects\n              - recreation\n            website: http://example.com/profiles/jdoe\n        page: 1\n        per_page: 5\n        total_count: 15\n      properties:\n        data:\n          description: Conributor profiles\n          items:\n            $ref: \"#/components/schemas/ContributorProfile\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Error message\n          type: string\n        page:\n          description: Page of response\n          type: integer\n        per_page:\n          description: Number of contributors per page\n          type: integer\n        total_count:\n          description: Total count of contributors for this request\n          type: integer\n    ContributorProfileSocialMedia:\n      description: Contributor profile social media links\n      example:\n        facebook: http://example.com/jdoe\n        google_plus: http://example.com/jdoe\n        linkedin: http://example.com/jdoe\n        pinterest: http://example.com/jdoe\n        tumblr: http://example.com/jdoe\n        twitter: http://example.com/jdoe\n      properties:\n        facebook:\n          description: Facebook link for contributor\n          type: string\n        google_plus:\n          description: Google+ link for contributor\n          type: string\n        linkedin:\n          description: LinkedIn link for contributor\n          type: string\n        pinterest:\n          description: Pinterest page for contributor\n          type: string\n        tumblr:\n          description: Tumblr link for contributor\n          type: string\n        twitter:\n          description: Twitter link for contributor\n          type: string\n      type: object\n    Cookie:\n      description: Cookie object\n      example:\n        name: The name of the cookie\n        value: The value of the cookie\n      properties:\n        name:\n          description: The name of the cookie\n          type: string\n        value:\n          description: The value of the cookie\n          type: string\n      required:\n        - name\n        - value\n      type: object\n    CreateAudioRender:\n      description: Data required to create an audio render\n      example:\n        filename: My Project.mp3\n        preset: MASTER_MP3\n        timeline:\n          spans:\n            - id: 111\n              instrument_groups:\n                - instrument_group: roomy_kit\n                  statuses:\n                    - beat: 12\n                      status: active\n              regions:\n                - beat: 12\n                  descriptor: cinematic_minimal_tense\n                  end_type:\n                    beat: 24\n                    event: ending\n                    type: ringout\n                  id: 222\n                  key:\n                    tonic_note: c\n                    tonic_quality: major\n                  region: music\n              span_type: metered\n              tempo: 76\n              tempo_changes:\n                - tempo: 86\n                  time: 5\n              time: 5\n            - span_type: unmetered\n              time: 20\n      properties:\n        filename:\n          description: A user-specified file name suggestion; this file name becomes the filename property of the Content-Disposition header when the user downloads the rendered audio file\n          example: My Project.mp3\n          type: string\n        preset:\n          description: File format, such as MP3 file, combined WAV file, or individual track WAV files\n          enum:\n            - MASTER_MP3\n            - MASTER_WAV\n            - STEMS_WAV\n          example: MASTER_MP3\n          type: string\n        timeline:\n          $ref: \"#/components/schemas/AudioRenderTimeline\"\n          description: The timeline data with which to generate the render\n      required:\n        - preset\n        - timeline\n        - filename\n      type: object\n    CreateAudioRendersRequest:\n      description: Render request data\n      example:\n        audio_renders:\n          - filename: My Project.mp3\n            preset: MASTER_MP3\n            timeline:\n              spans:\n                - id: 111\n                  instrument_groups:\n                    - instrument_group: roomy_kit\n                      statuses:\n                        - beat: 12\n                          status: active\n                  regions:\n                    - beat: 12\n                      descriptor: cinematic_minimal_tense\n                      end_type:\n                        beat: 24\n                        event: ending\n                        type: ringout\n                      id: 222\n                      key:\n                        tonic_note: c\n                        tonic_quality: major\n                      region: music\n                  span_type: metered\n                  tempo: 76\n                  tempo_changes:\n                    - tempo: 86\n                      time: 5\n                  time: 5\n                - span_type: unmetered\n                  time: 20\n      properties:\n        audio_renders:\n          description: Parameters to create computer audio renders\n          items:\n            $ref: \"#/components/schemas/CreateAudioRender\"\n          type: array\n      required:\n        - audio_renders\n      type: object\n    CustomSizeDimensions:\n      description: A custom height or a custom width to resize the image to, but not both (experimental)\n      example:\n        height: 600\n        width: 800\n      properties:\n        height:\n          description: Custom height to resize the image to\n          minimum: 100\n          type: integer\n        width:\n          description: Custom width to resize the image to\n          minimum: 100\n          type: integer\n      type: object\n    Descriptors:\n      description: Information about a descriptor\n      example:\n        average_render_speed: 8.242664029014177\n        bands:\n          - id: cinematic_minimal_tense_band_1\n            name: Cinematic Minimal Tense Band 1\n          - id: cinematic_minimal_tense_band_2\n            name: Cinematic Minimal Tense Band 2\n        id: cinematic_minimal_tense\n        instruments:\n          - id: blue_synth_pad\n            name: Warm Pad - Lush\n          - id: direct_round_1_synth_bass\n            name: Direct Round 1 Synth Bass\n          - id: direct_crystal_breath_mid_pad\n            name: Direct Crystal Breath Mid Pad\n        max_tempo: 76\n        min_tempo: 58\n        name: Cinematic Minimal Tense\n        previews:\n          - content_type: audio/mp3\n            url: https://public-cdn.ampermusic.com/bands/previews/cinematic_minimal_tense_band_1_v1.mp3\n          - content_type: audio/mp3\n            url: https://public-cdn.ampermusic.com/bands/previews/cinematic_minimal_tense_band_2_v1.mp3\n        tags:\n          - Tense\n          - Cinematic\n          - Negative\n          - Simple Meter\n          - 4/4\n          - Natural Minor\n          - Dorian\n          - Minimal\n          - Adagio\n          - Single Region\n          - Main\n          - Entertainment\n          - Politics\n          - Keys\n          - Mid Pads\n          - Fast\n          - Slow\n          - Slow\n          - Voice\n          - Medium Bright\n          - Non Noisy\n          - Medium Thick\n          - Angelic\n          - Direct\n          - Percussion\n          - Perc FX\n          - Misc\n          - Acoustic Pianos\n          - Grand\n          - Nice\n          - Roomy\n          - Pop\n          - Upright\n          - Clean\n          - Classic\n          - Keyboards\n          - Digital Keyboard\n          - Strings\n          - Synth Basses\n          - Fast\n          - Dark\n          - Thick\n          - Sub\n          - Synth Mallets\n          - Dull\n          - Mid Synth Beds\n          - Slow\n          - None\n          - Medium Noisy\n          - Harsh\n          - Fast\n          - Airy\n          - Long Textures\n          - Ambience\n          - Synth Texture\n          - Ethereal\n          - Set Kicks\n          - Processed\n          - Hubcap Mallet\n          - Wide\n          - Tickie\n          - Airy\n          - Chamber\n          - Thin\n          - Organ\n          - Cello Ensemble\n          - Sweet\n          - Big\n          - Di\n          - Raw\n          - Bright\n          - Tight\n          - Chorus\n          - Buzzy\n          - Huge\n          - Warm\n          - Jazz\n          - Brass\n          - String\n          - Hollow\n          - Woodwind\n          - Breathy\n          - Crystal\n          - Rhodes\n          - Synth Piano\n          - Noisy\n          - Woody\n          - Metallic\n          - Reverse Piano\n          - Full\n          - Foley\n          - Piano\n          - Clean\n          - Delayed\n          - Reverb\n          - Low Passed\n          - Large\n          - Medium\n          - Small\n      properties:\n        average_render_speed:\n          description: The average ratio of the length of the music to the time it takes to render; for example, a render speed of 3.0 generates 30 seconds of music in about 10 seconds\n          type: number\n        bands:\n          description: The bands that are available to use this descriptor\n          items:\n            $ref: \"#/components/schemas/Bands\"\n          type: array\n        id:\n          description: The ID of the descriptor\n          type: string\n        instruments:\n          description: The instruments that can play with this descriptor\n          items:\n            $ref: \"#/components/schemas/Instruments\"\n          type: array\n        max_tempo:\n          description: The maximum beats per minute that the descriptor is intended to be used with\n          type: number\n        min_tempo:\n          description: The minimum beats per minute that the descriptor is intended to be used with\n          type: number\n        name:\n          description: The name of the descriptor\n          type: string\n        previews:\n          description: Preview of the descriptor\n          items:\n            $ref: \"#/components/schemas/Preview\"\n          type: array\n        tags:\n          description: Tags that describe the descriptor\n          items:\n            type: string\n          type: array\n      type: object\n    DescriptorsListResult:\n      description: List Descriptors results\n      example:\n        data:\n          - average_render_speed: 8.242664029014177\n            bands:\n              - id: cinematic_minimal_tense_band_1\n                name: Cinematic Minimal Tense Band 1\n              - id: cinematic_minimal_tense_band_2\n                name: Cinematic Minimal Tense Band 2\n            id: cinematic_minimal_tense\n            instruments:\n              - id: blue_synth_pad\n                name: Warm Pad - Lush\n              - id: direct_round_1_synth_bass\n                name: Direct Round 1 Synth Bass\n              - id: direct_crystal_breath_mid_pad\n                name: Direct Crystal Breath Mid Pad\n            max_tempo: 76\n            min_tempo: 58\n            name: Cinematic Minimal Tense\n            previews:\n              - content_type: audio/mp3\n                url: https://public-cdn.ampermusic.com/bands/previews/cinematic_minimal_tense_band_1_v1.mp3\n              - content_type: audio/mp3\n                url: https://public-cdn.ampermusic.com/bands/previews/cinematic_minimal_tense_band_2_v1.mp3\n            tags:\n              - Tense\n              - Cinematic\n              - Negative\n              - Simple Meter\n              - 4/4\n              - Natural Minor\n              - Dorian\n              - Minimal\n              - Adagio\n              - Single Region\n              - Main\n              - Entertainment\n              - Politics\n              - Keys\n              - Mid Pads\n              - Fast\n              - Slow\n              - Slow\n              - Voice\n              - Medium Bright\n              - Non Noisy\n              - Medium Thick\n              - Angelic\n              - Direct\n              - Percussion\n              - Perc FX\n              - Misc\n              - Acoustic Pianos\n              - Grand\n              - Nice\n              - Roomy\n              - Pop\n              - Upright\n              - Clean\n              - Classic\n              - Keyboards\n              - Digital Keyboard\n              - Strings\n              - Synth Basses\n              - Fast\n              - Dark\n              - Thick\n              - Sub\n              - Synth Mallets\n              - Dull\n              - Mid Synth Beds\n              - Slow\n              - None\n              - Medium Noisy\n              - Harsh\n              - Fast\n              - Airy\n              - Long Textures\n              - Ambience\n              - Synth Texture\n              - Ethereal\n              - Set Kicks\n              - Processed\n              - Hubcap Mallet\n              - Wide\n              - Tickie\n              - Airy\n              - Chamber\n              - Thin\n              - Organ\n              - Cello Ensemble\n              - Sweet\n              - Big\n              - Di\n              - Raw\n              - Bright\n              - Tight\n              - Chorus\n              - Buzzy\n              - Huge\n              - Warm\n              - Jazz\n              - Brass\n              - String\n              - Hollow\n              - Woodwind\n              - Breathy\n              - Crystal\n              - Rhodes\n              - Synth Piano\n              - Noisy\n              - Woody\n              - Metallic\n              - Reverse Piano\n              - Full\n              - Foley\n              - Piano\n              - Clean\n              - Delayed\n              - Reverb\n              - Low Passed\n              - Large\n              - Medium\n              - Small\n        page: 1\n        per_page: 5\n      properties:\n        data:\n          description: List of descriptors\n          items:\n            $ref: \"#/components/schemas/Descriptors\"\n          type: array\n        page:\n          description: Current page that is returned\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n      type: object\n    DownloadHistory:\n      description: Information about a downloaded media item. Applicable for all media types, only one of 'audio', 'image' or 'video' will be in a single DownloadHistory object\n      example:\n        download_time: 2021-05-20T20:31:46.000Z\n        id: a24499ca3ccd912a6d8316d45f953ef092\n        image:\n          format:\n            size: medium\n          id: \"1234567\"\n        is_downloadable: true\n        license: standard\n        subscription_id: s1234567\n        user:\n          username: jdoe\n      properties:\n        audio:\n          $ref: \"#/components/schemas/DownloadHistoryMediaDetails\"\n        download_time:\n          description: Date the media was downloaded the first time\n          format: date-time\n          type: string\n        id:\n          description: ID of the download\n          type: string\n        image:\n          $ref: \"#/components/schemas/DownloadHistoryMediaDetails\"\n        is_downloadable:\n          description: Specifies if the media is downloadable via its respective downloads endpoint\n          type: boolean\n        license:\n          description: The name of the license of this download\n          type: string\n        metadata:\n          description: The metadata that was passed in the original licensing request\n          type: object\n        subscription_id:\n          description: ID of the subscription used to perform this download\n          type: string\n        user:\n          $ref: \"#/components/schemas/DownloadHistoryUserDetails\"\n        video:\n          $ref: \"#/components/schemas/DownloadHistoryMediaDetails\"\n      required:\n        - id\n        - download_time\n        - license\n      type: object\n    DownloadHistoryDataList:\n      description: List of download events\n      example:\n        data:\n          - download_time: 2021-07-15T15:46:34.000Z\n            id: e1eba3833793e77188d22caae8bac9f2cd\n            image:\n              format:\n                size: original\n              id: 9763363ao\n            is_downloadable: false\n            license: shutterstock_license\n            metadata:\n              client: Company A\n              job: Important project\n              other: Important media\n              purchase_order: \"12345\"\n            subscription_id: 1df5d8cfe8394bbebb849a69943b9a7c\n            user:\n              username: jsmith\n        page: 1\n        per_page: 1\n        total_count: 2890\n      properties:\n        data:\n          description: Download events\n          items:\n            $ref: \"#/components/schemas/DownloadHistory\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: The current page of results\n          type: integer\n        per_page:\n          description: The number of results per page\n          type: integer\n        total_count:\n          description: The total number of results across all pages\n          type: integer\n    DownloadHistoryFormatDetails:\n      description: Information about the format of a download\n      example:\n        format: jpg\n        size: medium\n      properties:\n        format:\n          description: The format of the downloaded media\n          type: string\n        size:\n          description: The size of the downloaded media\n          type: string\n      type: object\n    DownloadHistoryMediaDetails:\n      description: Information about the downloaded media\n      example:\n        format:\n          format: jpg\n          size: medium\n        id: \"1234567\"\n      properties:\n        format:\n          $ref: \"#/components/schemas/DownloadHistoryFormatDetails\"\n        id:\n          description: ID of the download history media details\n          type: string\n      required:\n        - id\n      type: object\n    DownloadHistoryUserDetails:\n      description: Information about a user\n      example:\n        username: jdoe\n      properties:\n        username:\n          description: The name of the user who downloaded the item\n          type: string\n      required:\n        - username\n      type: object\n    EditorialAssets:\n      description: Asset information, including size and thumbnail URLs\n      example:\n        medium_jpg:\n          display_name: Med\n          height: 617\n          is_licensable: true\n          width: 1000\n        original:\n          display_name: Original\n          height: 3693\n          is_licensable: true\n          width: 5985\n        small_jpg:\n          display_name: Small\n          height: 309\n          is_licensable: true\n          width: 500\n        thumb_170:\n          height: 105\n          url: https://editorial01.qa.shuttercorp.net/thumb/10687730b/272a999e/Shutterstock_10687730b.jpg\n          width: 170\n        thumb_220:\n          height: 136\n          url: https://editorial01.qa.shuttercorp.net/thumb-220/10687730b/927a6ebe/Shutterstock_10687730b.jpg\n          width: 220\n        watermark_1500:\n          height: 926\n          url: https://editorial01.qa.shuttercorp.net/wm-preview-1500/10687730b/ee2d7ae1/Shutterstock_10687730b.jpg\n          width: 1500\n        watermark_450:\n          height: 278\n          url: https://editorial01.qa.shuttercorp.net/wm-preview-450/10687730b/ff2443ad/Shutterstock_10687730b.jpg\n          width: 450\n      properties:\n        medium_jpg:\n          $ref: \"#/components/schemas/ImageSizeDetails\"\n        original:\n          $ref: \"#/components/schemas/ImageSizeDetails\"\n        small_jpg:\n          $ref: \"#/components/schemas/ImageSizeDetails\"\n        thumb_170:\n          $ref: \"#/components/schemas/Thumbnail\"\n        thumb_220:\n          $ref: \"#/components/schemas/Thumbnail\"\n        watermark_1500:\n          $ref: \"#/components/schemas/Thumbnail\"\n        watermark_450:\n          $ref: \"#/components/schemas/Thumbnail\"\n      type: object\n    EditorialCategory:\n      description: Name of an editorial category\n      example:\n        name: Awards\n      properties:\n        name:\n          type: string\n      type: object\n    EditorialCategoryResults:\n      description: List of editorial categories\n      example:\n        data:\n          - name: Animal\n          - name: Awards\n          - name: Art\n      properties:\n        data:\n          description: List of editorial categories\n          items:\n            $ref: \"#/components/schemas/EditorialCategory\"\n          type: array\n      type: object\n    EditorialContent:\n      description: Metadata about editorial content\n      example:\n        aspect: 1.621\n        assets:\n          medium_jpg:\n            display_name: Med\n            height: 617\n            is_licensable: true\n            width: 1000\n          original:\n            display_name: Original\n            height: 3693\n            is_licensable: true\n            width: 5985\n          small_jpg:\n            display_name: Small\n            height: 309\n            is_licensable: true\n            width: 500\n          thumb_170:\n            height: 105\n            url: https://editorial01.qa.shuttercorp.net/thumb/10687730b/272a999e/Shutterstock_10687730b.jpg\n            width: 170\n          thumb_220:\n            height: 136\n            url: https://editorial01.qa.shuttercorp.net/thumb-220/10687730b/927a6ebe/Shutterstock_10687730b.jpg\n            width: 220\n          watermark_1500:\n            height: 926\n            url: https://editorial01.qa.shuttercorp.net/wm-preview-1500/10687730b/ee2d7ae1/Shutterstock_10687730b.jpg\n            width: 1500\n          watermark_450:\n            height: 278\n            url: https://editorial01.qa.shuttercorp.net/wm-preview-450/10687730b/ff2443ad/Shutterstock_10687730b.jpg\n            width: 450\n        byline: Jon Super/AP/Shutterstock\n        caption: \"\"\n        categories:\n          - name: Sport\n        date_taken: 2021-05-11\n        description: Security and stewards stand outside the Old Trafford stadium in Manchester, England, ahead of the English Premier League soccer match between Manchester United and Leicester City. This is the first Manchester United home match since fans protested against American owner Joel Glazer, forcing the postponement of the team's Premier League game against Liverpool. The protests prompted Glazer to publish a letter in which he pledged to accelerate discussions with fans about supporters being able to have a greater say at the club\n        id: 10687730b\n        keywords:\n          - england\n          - europe\n          - leicester city fc\n          - manchester\n          - manchester united fc\n          - men's soccer\n          - men's sports\n          - premier league\n          - professional soccer\n          - soccer\n          - sports\n          - united kingdom\n          - western europe\n          - wsoc\n        title: Soccer Premier League, Manchester, United Kingdom - 11 May 2021\n      properties:\n        aspect:\n          type: number\n        assets:\n          $ref: \"#/components/schemas/EditorialAssets\"\n        byline:\n          type: string\n        caption:\n          type: string\n        categories:\n          description: List of categories\n          items:\n            $ref: \"#/components/schemas/EditorialCategory\"\n          type: array\n        date_taken:\n          format: date\n          type: string\n        description:\n          type: string\n        id:\n          type: string\n        keywords:\n          items:\n            type: string\n          type: array\n        special_instructions:\n          type: string\n        title:\n          type: string\n      required:\n        - id\n      type: object\n    EditorialContentDataList:\n      description: List of editorial items\n      example:\n        data:\n          - aspect: 1.621\n            assets:\n              medium_jpg:\n                display_name: Med\n                height: 617\n                is_licensable: true\n                width: 1000\n              original:\n                display_name: Original\n                height: 3693\n                is_licensable: true\n                width: 5985\n              small_jpg:\n                display_name: Small\n                height: 309\n                is_licensable: true\n                width: 500\n              thumb_170:\n                height: 105\n                url: https://editorial01.qa.shuttercorp.net/thumb/10687730b/272a999e/Shutterstock_10687730b.jpg\n                width: 170\n              thumb_220:\n                height: 136\n                url: https://editorial01.qa.shuttercorp.net/thumb-220/10687730b/927a6ebe/Shutterstock_10687730b.jpg\n                width: 220\n              watermark_1500:\n                height: 926\n                url: https://editorial01.qa.shuttercorp.net/wm-preview-1500/10687730b/ee2d7ae1/Shutterstock_10687730b.jpg\n                width: 1500\n              watermark_450:\n                height: 278\n                url: https://editorial01.qa.shuttercorp.net/wm-preview-450/10687730b/ff2443ad/Shutterstock_10687730b.jpg\n                width: 450\n            byline: Jon Super/AP/Shutterstock\n            caption: \"\"\n            categories:\n              - name: Sport\n            date_taken: 2021-05-11\n            description: Security and stewards stand outside the Old Trafford stadium in Manchester, England, ahead of the English Premier League soccer match between Manchester United and Leicester City. This is the first Manchester United home match since fans protested against American owner Joel Glazer, forcing the postponement of the team's Premier League game against Liverpool. The protests prompted Glazer to publish a letter in which he pledged to accelerate discussions with fans about supporters being able to have a greater say at the club\n            id: 10687730b\n            keywords:\n              - england\n              - europe\n              - leicester city fc\n              - manchester\n              - manchester united fc\n              - men's soccer\n              - men's sports\n              - premier league\n              - professional soccer\n              - soccer\n              - sports\n              - united kingdom\n              - western europe\n              - wsoc\n            title: Soccer Premier League, Manchester, United Kingdom - 11 May 2021\n        page: 1\n        per_page: 5\n        total_count: 16\n      properties:\n        data:\n          description: Editorial items\n          items:\n            $ref: \"#/components/schemas/EditorialContent\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Optional error message\n          type: string\n        page:\n          description: Current page of the response\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        total_count:\n          description: Total count of all results\n          type: integer\n    EditorialCoverItem:\n      description: Cover image for editorial livefeed\n      example:\n        height: 117\n        id: 9763363q\n        url: https://editorial01.qa.shuttercorp.net/thumb/9763363q/51e28f39/Shutterstock_9763363q.jpg\n        width: 170\n      properties:\n        height:\n          type: integer\n        id:\n          type: string\n        url:\n          type: string\n        width:\n          type: integer\n      required:\n        - id\n        - url\n      type: object\n    EditorialImageCategoryResults:\n      description: List of editorial categories\n      example:\n        data:\n          - name: Animal\n          - name: Awards\n          - name: Art\n          - name: Film Stills\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/EditorialCategory\"\n          type: array\n      type: object\n    EditorialImageContentDataList:\n      description: List of editorial items\n      example:\n        data:\n          - aspect: 1.621\n            assets:\n              medium_jpg:\n                display_name: Med\n                height: 617\n                is_licensable: true\n                width: 1000\n              original:\n                display_name: Original\n                height: 3693\n                is_licensable: true\n                width: 5985\n              small_jpg:\n                display_name: Small\n                height: 309\n                is_licensable: true\n                width: 500\n              thumb_170:\n                height: 105\n                url: https://editorial01.qa.shuttercorp.net/thumb/10687730b/272a999e/Shutterstock_10687730b.jpg\n                width: 170\n              thumb_220:\n                height: 136\n                url: https://editorial01.qa.shuttercorp.net/thumb-220/10687730b/927a6ebe/Shutterstock_10687730b.jpg\n                width: 220\n              watermark_1500:\n                height: 926\n                url: https://editorial01.qa.shuttercorp.net/wm-preview-1500/10687730b/ee2d7ae1/Shutterstock_10687730b.jpg\n                width: 1500\n              watermark_450:\n                height: 278\n                url: https://editorial01.qa.shuttercorp.net/wm-preview-450/10687730b/ff2443ad/Shutterstock_10687730b.jpg\n                width: 450\n            byline: Jon Super/AP/Shutterstock\n            caption: \"\"\n            categories:\n              - name: Sport\n            date_taken: 2021-05-11\n            description: Security and stewards stand outside the Old Trafford stadium in Manchester, England, ahead of the English Premier League soccer match between Manchester United and Leicester City. This is the first Manchester United home match since fans protested against American owner Joel Glazer, forcing the postponement of the team's Premier League game against Liverpool. The protests prompted Glazer to publish a letter in which he pledged to accelerate discussions with fans about supporters being able to have a greater say at the club\n            id: 10687730b\n            keywords:\n              - england\n              - europe\n              - leicester city fc\n              - manchester\n              - manchester united fc\n              - men's soccer\n              - men's sports\n              - premier league\n              - professional soccer\n              - soccer\n              - sports\n              - united kingdom\n              - western europe\n              - wsoc\n            title: Soccer Premier League, Manchester, United Kingdom - 11 May 2021\n        page: 1\n        per_page: 1\n        total_count: 23\n      properties:\n        data:\n          description: Editorial items\n          items:\n            $ref: \"#/components/schemas/EditorialContent\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Optional error message\n          type: string\n        page:\n          description: Current page of the response\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        total_count:\n          description: Total count of all results\n          type: integer\n    EditorialImageLivefeed:\n      description: Metadata about editorial livefeed\n      example:\n        cover_item:\n          height: 117\n          id: 9763363q\n          url: https://editorial01.qa.shuttercorp.net/thumb/9763363q/51e28f39/Shutterstock_9763363q.jpg\n          width: 170\n        created_time: 2018-07-17T12:42:03+00:00\n        id: 2018%2F07%2F17%2FPrince%20Charles%20and%20Camilla%20Duchess%20of%20Cornwall%20visit%20to%20Cornwall%2C%20Day%202\n        name: Prince Charles and Camilla Duchess of Cornwall visit to Cornwall, Day 2\n        total_item_count: 38\n      properties:\n        cover_item:\n          $ref: \"#/components/schemas/EditorialCoverItem\"\n        created_time:\n          description: When the livefeed was initially created\n          format: date-time\n          type: string\n        id:\n          description: Livefeed ID\n          type: string\n        name:\n          description: Name of the livefeed\n          type: string\n        total_item_count:\n          description: Total count of items in the livefeed\n          type: integer\n      required:\n        - id\n        - name\n        - total_item_count\n      type: object\n    EditorialImageLivefeedList:\n      description: List of editorial livefeeds\n      example:\n        data:\n          - cover_item:\n              height: 117\n              id: 9763363q\n              url: https://editorial01.qa.shuttercorp.net/thumb/9763363q/51e28f39/Shutterstock_9763363q.jpg\n              width: 170\n            created_time: 2018-07-17T12:42:03+00:00\n            id: 2018%2F07%2F17%2FPrince%20Charles%20and%20Camilla%20Duchess%20of%20Cornwall%20visit%20to%20Cornwall%2C%20Day%202\n            name: Prince Charles and Camilla Duchess of Cornwall visit to Cornwall, Day 2\n            total_item_count: 38\n        page: 1\n        per_page: 1\n        total_count: 5300\n      properties:\n        data:\n          description: Editorial livefeeds\n          items:\n            $ref: \"#/components/schemas/EditorialLivefeed\"\n          type: array\n        message:\n          description: Optional error message\n          type: string\n        page:\n          description: Current page of the response\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        total_count:\n          description: Total count of all results\n          type: integer\n      required:\n        - data\n        - total_count\n      type: object\n    EditorialLivefeed:\n      description: Metadata about editorial livefeed\n      example:\n        cover_item:\n          height: 117\n          id: 9763363q\n          url: https://editorial01.qa.shuttercorp.net/thumb/9763363q/51e28f39/Shutterstock_9763363q.jpg\n          width: 170\n        created_time: 2018-07-17T12:42:03+00:00\n        id: 2018%2F07%2F17%2FPrince%20Charles%20and%20Camilla%20Duchess%20of%20Cornwall%20visit%20to%20Cornwall%2C%20Day%202\n        name: Prince Charles and Camilla Duchess of Cornwall visit to Cornwall, Day 2\n        total_item_count: 38\n      properties:\n        cover_item:\n          $ref: \"#/components/schemas/EditorialCoverItem\"\n        created_time:\n          description: When the livefeed was initially created\n          format: date-time\n          type: string\n        id:\n          description: Livefeed ID\n          type: string\n        name:\n          description: Name of the livefeed\n          type: string\n        total_item_count:\n          description: Total count of items in the livefeed\n          type: integer\n      required:\n        - id\n        - name\n        - total_item_count\n      type: object\n    EditorialLivefeedList:\n      description: List of editorial livefeeds\n      example:\n        data:\n          - cover_item:\n              height: 117\n              id: 9763363q\n              url: https://editorial01.qa.shuttercorp.net/thumb/9763363q/51e28f39/Shutterstock_9763363q.jpg\n              width: 170\n            created_time: 2018-07-17T12:42:03+00:00\n            id: 2018%2F07%2F17%2FPrince%20Charles%20and%20Camilla%20Duchess%20of%20Cornwall%20visit%20to%20Cornwall%2C%20Day%202\n            name: Prince Charles and Camilla Duchess of Cornwall visit to Cornwall, Day 2\n            total_item_count: 38\n        page: 1\n        per_page: 1\n        total_count: 56\n      properties:\n        data:\n          description: Editorial livefeeds\n          items:\n            $ref: \"#/components/schemas/EditorialLivefeed\"\n          type: array\n        message:\n          description: Optional error message\n          type: string\n        page:\n          description: Current page of the response\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        total_count:\n          description: Total count of all results\n          type: integer\n      required:\n        - data\n        - total_count\n      type: object\n    EditorialSearchResults:\n      description: Editorial search results\n      example:\n        data:\n          - aspect: 1.621\n            assets:\n              medium_jpg:\n                display_name: Med\n                height: 617\n                is_licensable: true\n                width: 1000\n              original:\n                display_name: Original\n                height: 3693\n                is_licensable: true\n                width: 5985\n              small_jpg:\n                display_name: Small\n                height: 309\n                is_licensable: true\n                width: 500\n              thumb_170:\n                height: 105\n                url: https://editorial01.qa.shuttercorp.net/thumb/10687730b/272a999e/Shutterstock_10687730b.jpg\n                width: 170\n              thumb_220:\n                height: 136\n                url: https://editorial01.qa.shuttercorp.net/thumb-220/10687730b/927a6ebe/Shutterstock_10687730b.jpg\n                width: 220\n              watermark_1500:\n                height: 926\n                url: https://editorial01.qa.shuttercorp.net/wm-preview-1500/10687730b/ee2d7ae1/Shutterstock_10687730b.jpg\n                width: 1500\n              watermark_450:\n                height: 278\n                url: https://editorial01.qa.shuttercorp.net/wm-preview-450/10687730b/ff2443ad/Shutterstock_10687730b.jpg\n                width: 450\n            byline: Jon Super/AP/Shutterstock\n            caption: \"\"\n            categories:\n              - name: Sport\n            date_taken: 2021-05-11\n            description: Security and stewards stand outside the Old Trafford stadium in Manchester, England, ahead of the English Premier League soccer match between Manchester United and Leicester City. This is the first Manchester United home match since fans protested against American owner Joel Glazer, forcing the postponement of the team's Premier League game against Liverpool. The protests prompted Glazer to publish a letter in which he pledged to accelerate discussions with fans about supporters being able to have a greater say at the club\n            id: 10687730b\n            keywords:\n              - england\n              - europe\n              - leicester city fc\n              - manchester\n              - manchester united fc\n              - men's soccer\n              - men's sports\n              - premier league\n              - professional soccer\n              - soccer\n              - sports\n              - united kingdom\n              - western europe\n              - wsoc\n            title: Soccer Premier League, Manchester, United Kingdom - 11 May 2021\n        next: eyJ2IjoyLCJzIjoxLCJwIjpbMF19\n        per_page: 1\n        prev: \"\"\n        search_id: BaMzOAkpHIvfnuWVRFs1ag\n        total_count: 46845\n      properties:\n        data:\n          description: Editorial items\n          items:\n            $ref: \"#/components/schemas/EditorialContent\"\n          type: array\n        message:\n          description: Optional error message\n          type: string\n        next:\n          description: Cursor value that represents the next page of results\n          type: string\n        page:\n          description: Current page of the response\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        prev:\n          description: Cursor value that represents the previous page of results\n          type: string\n        search_id:\n          description: Unique identifier for the search request\n          type: string\n        total_count:\n          description: Total count of all results\n          type: integer\n      required:\n        - data\n        - total_count\n      type: object\n    EditorialUpdatedContent:\n      description: Metadata about updated editorial content\n      example:\n        aspect: 1.481\n        assets:\n          medium_jpg:\n            display_name: Med\n            height: 675\n            is_licensable: true\n            width: 1000\n          original:\n            display_name: Original\n            height: 3263\n            is_licensable: true\n            width: 4831\n          small_jpg:\n            display_name: Small\n            height: 337\n            is_licensable: true\n            width: 500\n          thumb_170:\n            height: 115\n            url: https://editorial01.shutterstock.com/thumb/9804979n/c4377a53/Shutterstock_9804979n.jpg\n            width: 170\n          thumb_220:\n            height: 149\n            url: https://editorial01.shutterstock.com/thumb-220/9804979n/c57a68c7/Shutterstock_9804979n.jpg\n            width: 220\n          watermark_1500:\n            height: 1500\n            url: https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg\n            width: 1040\n          watermark_450:\n            height: 304\n            url: https://editorial01.shutterstock.com/wm-preview-450/9804979n/37d19dce/Shutterstock_9804979n.jpg\n            width: 450\n        byline: ALEX HOFFORD/EPA-EFE/Shutterstock\n        caption: \"\"\n        categories: []\n        commercial_status:\n          status: available\n        date_taken: 2018-08-24\n        description: Members of the TyLoo e-Sports team from China prepare to face off against the Kinguin e-Sports team from Poland at the ICBC (Asia) e-Sports and Music Festival Hong Kong 2018, Hong Kong, China, 24 August 2018. The festival runs from 24 to 26 August with professional gamers from around the world competing in international e-sports tournaments.\n        id: 9804979n\n        keywords: []\n        rights:\n          countries: CAN,+DEU,+GBR,+USA,-*\n        supplier_code: EPA\n        title: Hong Kong kicks off international e-Sports competition, China - 24 Aug 2018\n        updated_time: 2019-07-15T20:04:44-04:00\n        updates:\n          - addition\n      properties:\n        aspect:\n          type: number\n        assets:\n          $ref: \"#/components/schemas/EditorialAssets\"\n        byline:\n          type: string\n        caption:\n          type: string\n        categories:\n          description: List of categories\n          items:\n            $ref: \"#/components/schemas/EditorialCategory\"\n          type: array\n        commercial_status:\n          properties:\n            reason:\n              type: string\n            status:\n              type: string\n        created_time:\n          format: date-time\n          type: string\n        date_taken:\n          format: date\n          type: string\n        description:\n          type: string\n        id:\n          type: string\n        keywords:\n          items:\n            type: string\n          type: array\n        rights:\n          properties:\n            countries:\n              type: string\n          type: object\n        special_instructions:\n          type: string\n        supplier_code:\n          type: string\n        title:\n          type: string\n        updated_time:\n          format: date-time\n          type: string\n        updates:\n          items:\n            type: string\n          type: array\n      required:\n        - id\n      type: object\n    EditorialUpdatedResults:\n      description: Editorial updated results\n      example:\n        data:\n          - aspect: 1.481\n            assets:\n              medium_jpg:\n                display_name: Med\n                height: 675\n                is_licensable: true\n                width: 1000\n              original:\n                display_name: Original\n                height: 3263\n                is_licensable: true\n                width: 4831\n              small_jpg:\n                display_name: Small\n                height: 337\n                is_licensable: true\n                width: 500\n              thumb_170:\n                height: 115\n                url: https://editorial01.shutterstock.com/thumb/9804979n/c4377a53/Shutterstock_9804979n.jpg\n                width: 170\n              thumb_220:\n                height: 149\n                url: https://editorial01.shutterstock.com/thumb-220/9804979n/c57a68c7/Shutterstock_9804979n.jpg\n                width: 220\n              watermark_1500:\n                height: 1500\n                url: https://editorial01.shutterstock.com/wm-preview-1500/9933285a/ab82fea4/Shutterstock_9933285a.jpg\n                width: 1040\n              watermark_450:\n                height: 304\n                url: https://editorial01.shutterstock.com/wm-preview-450/9804979n/37d19dce/Shutterstock_9804979n.jpg\n                width: 450\n            byline: ALEX HOFFORD/EPA-EFE/Shutterstock\n            caption: \"\"\n            categories: []\n            commercial_status:\n              status: available\n            date_taken: 2018-08-24\n            description: Members of the TyLoo e-Sports team from China prepare to face off against the Kinguin e-Sports team from Poland at the ICBC (Asia) e-Sports and Music Festival Hong Kong 2018, Hong Kong, China, 24 August 2018. The festival runs from 24 to 26 August with professional gamers from around the world competing in international e-sports tournaments.\n            id: 9804979n\n            keywords: []\n            rights:\n              countries: CAN,+DEU,+GBR,+USA,-*\n            supplier_code: EPA\n            title: Hong Kong kicks off international e-Sports competition, China - 24 Aug 2018\n            updated_time: 2019-07-15T20:04:44-04:00\n            updates:\n              - addition\n        next: eyJ2IjoxLCJzIjoxfQ==\n        per_page: 1\n        prev: \"\"\n      properties:\n        data:\n          description: Editorial updated items\n          items:\n            $ref: \"#/components/schemas/EditorialUpdatedContent\"\n          type: array\n        message:\n          description: Optional error message\n          type: string\n        next:\n          description: Cursor value that represents the next page of results\n          type: string\n        per_page:\n          description: Number of results per page\n          type: integer\n        prev:\n          description: Cursor value that represents the previous page of results\n          type: string\n      required:\n        - data\n      type: object\n    EditorialVideoAssets:\n      description: Asset information, including size and thumbnail URLs\n      example:\n        original:\n          display_name: HD\n          file_size: 82233387\n          format: avc1\n          fps: 30\n          height: 1080\n          is_licensable: true\n          width: 1080\n        preview_mp4:\n          url: https://qa.editorial-cdn.shuttercorp.net/wm-preview-mp4/10679854a/M0T7A13aNej2g82bMTI4NjY=/Shutterstock_10679854a.mp4\n        preview_webm:\n          url: https://qa.editorial-cdn.shuttercorp.net/wm-preview-webm/10679854a/M4T6A63fN2j5g929MTI4NjY=/Shutterstock_10679854a.webm\n        thumb_jpg:\n          url: https://qa.editorial-cdn.shuttercorp.net/thumb-1/10679854a/M5TcAf30Ncjcge2eMTI4NjY=/Shutterstock_10679854a.jpg\n      properties:\n        original:\n          $ref: \"#/components/schemas/VideoSizeDetails\"\n        preview_mp4:\n          $ref: \"#/components/schemas/VideoPreviewUrl\"\n        preview_webm:\n          $ref: \"#/components/schemas/VideoPreviewUrl\"\n        thumb_jpg:\n          $ref: \"#/components/schemas/VideoPreviewUrl\"\n      type: object\n    EditorialVideoCategoryResults:\n      description: List of editorial video categories\n      example:\n        data:\n          - name: Animal\n          - name: Awards\n          - name: Art\n          - name: Film Stills\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/EditorialCategory\"\n          type: array\n      type: object\n    EditorialVideoContent:\n      description: Metadata about editorial content\n      example:\n        aspect: 1\n        assets:\n          original:\n            display_name: HD\n            file_size: 82233387\n            format: avc1\n            fps: 30\n            height: 1080\n            is_licensable: true\n            width: 1080\n          preview_mp4:\n            url: https://qa.editorial-cdn.shuttercorp.net/wm-preview-mp4/10679854a/M0T7A13aNej2g82bMTI4NjY=/Shutterstock_10679854a.mp4\n          preview_webm:\n            url: https://qa.editorial-cdn.shuttercorp.net/wm-preview-webm/10679854a/M4T6A63fN2j5g929MTI4NjY=/Shutterstock_10679854a.webm\n          thumb_jpg:\n            url: https://qa.editorial-cdn.shuttercorp.net/thumb-1/10679854a/M5TcAf30Ncjcge2eMTI4NjY=/Shutterstock_10679854a.jpg\n        byline: ViralHog/Shutterstock\n        caption: \"\"\n        categories: []\n        date_taken: 2020-11-13\n        description: \"Info from Licensor: \\\"Peeps the Canadian Goose has been raised with our family since a gosling. Peeps has made appearances on our local news channels, TV shows, and local newspapers. He has been trained to fly next to four wheelers, jet ski's, and boats. He has brought joy to many people during the pandemic including those with cancer.\\\"\"\n        id: 10679854a\n        keywords:\n          - \"2020\"\n          - adorable\n          - birds\n          - bizarre\n          - canadian goose\n          - cute\n          - domesticated animals\n          - entertainment\n          - feel good\n          - flew\n          - flies\n          - fly\n          - flying\n          - fun\n          - goose\n          - jet skis\n          - nature\n          - odd\n          - pets\n          - played\n          - playing\n          - plays\n          - prior lake\n          - sports\n          - strange\n          - sweet\n          - usa\n          - viralhog\n          - virals\n          - water sports\n          - weird\n        title: Peeps the Goose Has a Blast on a Jet Ski, Prior Lake, Minnesota, USA - 13 Nov 2020\n      properties:\n        aspect:\n          type: number\n        assets:\n          $ref: \"#/components/schemas/EditorialVideoAssets\"\n        byline:\n          type: string\n        caption:\n          type: string\n        categories:\n          description: List of categories\n          items:\n            $ref: \"#/components/schemas/EditorialCategory\"\n          type: array\n        date_taken:\n          format: date\n          type: string\n        description:\n          type: string\n        id:\n          type: string\n        keywords:\n          items:\n            type: string\n          type: array\n        title:\n          type: string\n      required:\n        - id\n      type: object\n    EditorialVideoSearchResults:\n      description: Editorial search results\n      example:\n        data:\n          - aspect: 1\n            assets:\n              original:\n                display_name: HD\n                file_size: 82233387\n                format: avc1\n                fps: 30\n                height: 1080\n                is_licensable: true\n                width: 1080\n              preview_mp4:\n                url: https://qa.editorial-cdn.shuttercorp.net/wm-preview-mp4/10679854a/M0T7A13aNej2g82bMTI4NjY=/Shutterstock_10679854a.mp4\n              preview_webm:\n                url: https://qa.editorial-cdn.shuttercorp.net/wm-preview-webm/10679854a/M4T6A63fN2j5g929MTI4NjY=/Shutterstock_10679854a.webm\n              thumb_jpg:\n                url: https://qa.editorial-cdn.shuttercorp.net/thumb-1/10679854a/M5TcAf30Ncjcge2eMTI4NjY=/Shutterstock_10679854a.jpg\n            byline: ViralHog/Shutterstock\n            caption: \"\"\n            categories: []\n            date_taken: 2020-11-13\n            description: \"Info from Licensor: \\\"Peeps the Canadian Goose has been raised with our family since a gosling. Peeps has made appearances on our local news channels, TV shows, and local newspapers. He has been trained to fly next to four wheelers, jet ski's, and boats. He has brought joy to many people during the pandemic including those with cancer.\\\"\"\n            id: 10679854a\n            keywords:\n              - \"2020\"\n              - adorable\n              - birds\n              - bizarre\n              - canadian goose\n              - cute\n              - domesticated animals\n              - entertainment\n              - feel good\n              - flew\n              - flies\n              - fly\n              - flying\n              - fun\n              - goose\n              - jet skis\n              - nature\n              - odd\n              - pets\n              - played\n              - playing\n              - plays\n              - prior lake\n              - sports\n              - strange\n              - sweet\n              - usa\n              - viralhog\n              - virals\n              - water sports\n              - weird\n            title: Peeps the Goose Has a Blast on a Jet Ski, Prior Lake, Minnesota, USA - 13 Nov 2020\n        next: eyJ2IjoyLCJzIjoyMCwicCI6WzBdfQ==\n        per_page: 1\n        prev: \"\"\n        search_id: zhmz9zLmpQehdTPvg8cacQ\n        total_count: 331\n      properties:\n        data:\n          description: Editorial items\n          items:\n            $ref: \"#/components/schemas/EditorialVideoContent\"\n          type: array\n        message:\n          description: Optional error message\n          type: string\n        next:\n          description: Cursor value that represents the next page of results\n          type: string\n        page:\n          description: Current page of the response\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        prev:\n          description: Cursor value that represents the previous page of results\n          type: string\n        search_id:\n          description: Unique identifier for the search request\n          type: string\n        total_count:\n          description: Total count of all results\n          type: integer\n      required:\n        - data\n        - total_count\n      type: object\n    Error:\n      description: Error object\n      example:\n        code: VALIDATION_INVALID_TYPE\n        data: \"'10'\"\n        message: \"Invalid type: string should be integer\"\n        path: $.query.page\n      properties:\n        code:\n          description: The error code of this error\n          type: string\n        data:\n          description: Debugging information about the error\n          type: string\n        items:\n          description: A list of items that produced the error\n          items:\n            type: object\n          type: array\n        message:\n          description: Specific details about this error\n          type: string\n        path:\n          description: Internal code reference to the source of the error\n          type: string\n      required:\n        - message\n      type: object\n    FeaturedCollection:\n      description: Metadata about a featured collection\n      example:\n        cover_item:\n          url: https://ak.picdn.net/assets/cms/b467415246debdab45825d915a548f8f79b57882-Collection_1_Thumnail.jpg\n        created_time: 2021-07-07T13:10:24.000Z\n        id: \"19853\"\n        items_updated_time: 2021-07-08T12:33:37.000Z\n        name: Exercise \u0026 Fitness\n        total_item_count: 82\n        updated_time: 2021-07-07T13:10:24.000Z\n      properties:\n        cover_item:\n          $ref: \"#/components/schemas/FeaturedCollectionCoverItem\"\n        created_time:\n          description: Date that the collection was created\n          format: date-time\n          type: string\n        hero_item:\n          $ref: \"#/components/schemas/FeaturedCollectionCoverItem\"\n          description: Top-level item that is meant as a cover asset, as the first asset seen to represent the collection\n        id:\n          description: Collection ID\n          type: string\n        items_updated_time:\n          description: Date that an item in the collection was last added or removed\n          format: date-time\n          type: string\n        name:\n          description: Name of the collection\n          type: string\n        share_url:\n          description: Unique share url for the collection\n          type: string\n        total_item_count:\n          description: Total number of items in the collection\n          type: integer\n        updated_time:\n          description: Date that the collection was last modified\n          format: date-time\n          type: string\n      required:\n        - id\n        - name\n        - total_item_count\n      type: object\n    FeaturedCollectionCoverItem:\n      description: Featured collection cover item metadata\n      example:\n        url: https://ak.picdn.net/assets/cms/b467415246debdab45825d915a548f8f79b57882-Collection_1_Thumnail.jpg\n      properties:\n        url:\n          description: URL of the collection cover item\n          type: string\n      required:\n        - url\n      type: object\n    FeaturedCollectionDataList:\n      description: List of featured collections\n      example:\n        data:\n          - cover_item:\n              url: https://ak.picdn.net/assets/cms/b467415246debdab45825d915a548f8f79b57882-Collection_1_Thumnail.jpg\n            created_time: 2021-07-07T13:10:24.000Z\n            id: \"19853\"\n            items_updated_time: 2021-07-08T12:33:37.000Z\n            name: Exercise \u0026 Fitness\n            total_item_count: 82\n            updated_time: 2021-07-07T13:10:24.000Z\n        page: 1\n        per_page: 5\n        total_count: 123455\n      properties:\n        data:\n          description: Featured collections\n          items:\n            $ref: \"#/components/schemas/FeaturedCollection\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: Current page that is returned\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        total_count:\n          description: Total count of all results across all pages\n          type: integer\n    GenreList:\n      additionalProperties: false\n      description: List of audio genres\n      example:\n        data:\n          - Rock\n          - Pop \u003e Singer-Songwriter\n          - Pop \u003e Synth Pop\n          - Production / Film Scores\n      properties:\n        data:\n          description: List of genres\n          items:\n            type: string\n          type: array\n      required:\n        - data\n      type: object\n    Image:\n      description: Information about an image\n      example:\n        aspect: 1.5\n        assets:\n          huge_thumb:\n            height: 260\n            url: https://image.shutterstock.com/image-photo/cropped-image-woman-gardening-260nw-1572478477.jpg\n            width: 390\n          large_thumb:\n            height: 100\n            url: https://thumb7.shutterstock.com/thumb_large/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n            width: 150\n          preview:\n            height: 300\n            url: https://image.shutterstock.com/display_pic_with_logo/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n            width: 450\n          preview_1000:\n            height: 667\n            url: https://ak.picdn.net/shutterstock/photos/1572478477/watermark_1000/1706028c641ea2f443057287c67d9b91/preview_1000-1572478477.jpg\n            width: 1000\n          preview_1500:\n            height: 1000\n            url: https://image.shutterstock.com/z/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n            width: 1500\n          small_thumb:\n            height: 67\n            url: https://thumb7.shutterstock.com/thumb_small/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n            width: 100\n        contributor:\n          id: \"250738318\"\n        description: cropped image of woman gardening\n        has_model_release: true\n        id: \"1572478477\"\n        image_type: photo\n        media_type: image\n      properties:\n        added_date:\n          description: Date that the image was added by the contributor\n          format: date\n          type: string\n        affiliate_url:\n          description: Affiliate referral link; appears only for registered affiliate partners\n          format: uri\n          type: string\n        aspect:\n          description: Aspect ratio of the image in decimal format, such as 0.6667\n          type: number\n        assets:\n          $ref: \"#/components/schemas/ImageAssets\"\n          description: Image asset information\n        categories:\n          description: Categories that this image is a part of\n          items:\n            $ref: \"#/components/schemas/Category\"\n          type: array\n        contributor:\n          $ref: \"#/components/schemas/Contributor\"\n        description:\n          description: Detailed description of the image\n          type: string\n        has_model_release:\n          description: Indicates whether there are model releases for the image\n          type: boolean\n        has_property_release:\n          description: Indicates whether there are property releases for the image\n          type: boolean\n        id:\n          description: Image ID\n          type: string\n        image_type:\n          description: Type of image\n          type: string\n        is_adult:\n          description: Whether or not this image contains adult content\n          type: boolean\n        is_editorial:\n          description: Whether or not this image is editorial content\n          type: boolean\n        is_illustration:\n          description: Whether or not this image is an illustration\n          type: boolean\n        keywords:\n          description: Keywords associated with the content of this image\n          items:\n            type: string\n          type: array\n        media_type:\n          description: Media type of this image, should always be \"image\"\n          type: string\n        model_releases:\n          description: List of model releases\n          items:\n            $ref: \"#/components/schemas/ModelRelease\"\n          type: array\n        models:\n          description: List of models\n          items:\n            $ref: \"#/components/schemas/Model\"\n          type: array\n        releases:\n          description: List of all releases of this image\n          items:\n            type: string\n          type: array\n        url:\n          description: Link to image information page; included only for certain accounts\n          type: string\n      required:\n        - id\n        - media_type\n        - contributor\n      type: object\n    ImageAssets:\n      description: Information about the assets that are part of an image\n      example:\n        huge_thumb:\n          height: 260\n          url: https://image.shutterstock.com/image-photo/cropped-image-woman-gardening-260nw-1572478477.jpg\n          width: 390\n        large_thumb:\n          height: 100\n          url: https://thumb7.shutterstock.com/thumb_large/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n          width: 150\n        preview:\n          height: 300\n          url: https://image.shutterstock.com/display_pic_with_logo/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n          width: 450\n        preview_1000:\n          height: 667\n          url: https://ak.picdn.net/shutterstock/photos/1572478477/watermark_1000/1706028c641ea2f443057287c67d9b91/preview_1000-1572478477.jpg\n          width: 1000\n        preview_1500:\n          height: 1000\n          url: https://image.shutterstock.com/z/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n          width: 1500\n        small_thumb:\n          height: 67\n          url: https://thumb7.shutterstock.com/thumb_small/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n          width: 100\n      properties:\n        huge_jpg:\n          $ref: \"#/components/schemas/ImageSizeDetails\"\n        huge_thumb:\n          $ref: \"#/components/schemas/Thumbnail\"\n        large_thumb:\n          $ref: \"#/components/schemas/Thumbnail\"\n        medium_jpg:\n          $ref: \"#/components/schemas/ImageSizeDetails\"\n        preview:\n          $ref: \"#/components/schemas/Thumbnail\"\n        preview_1000:\n          $ref: \"#/components/schemas/Thumbnail\"\n        preview_1500:\n          $ref: \"#/components/schemas/Thumbnail\"\n        small_jpg:\n          $ref: \"#/components/schemas/ImageSizeDetails\"\n        small_thumb:\n          $ref: \"#/components/schemas/Thumbnail\"\n        supersize_jpg:\n          $ref: \"#/components/schemas/ImageSizeDetails\"\n        vector_eps:\n          $ref: \"#/components/schemas/ImageSizeDetails\"\n      type: object\n    ImageCreateRequest:\n      description: Request to upload an image\n      example:\n        base64_image: R0lGODlhgACAAPcAAEwiBLyaLOzNUNmWFNjOrNSuN7x6PPzqeOTMgfKSDMyuTPzwsdi2dHwuBPzbVu\n      properties:\n        base64_image:\n          description: A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height\n          type: string\n      required:\n        - base64_image\n      type: object\n    ImageCreateResponse:\n      description: Image upload information\n      example:\n        id: Udb14e1c3540bdbf82b4b3fe12d3a44f2\n      properties:\n        id:\n          type: string\n      required:\n        - id\n      type: object\n    ImageDataList:\n      description: List of images\n      example:\n        data:\n          - aspect: 1.5\n            assets:\n              huge_thumb:\n                height: 260\n                url: https://image.shutterstock.com/image-photo/cropped-image-woman-gardening-260nw-1572478477.jpg\n                width: 390\n              large_thumb:\n                height: 100\n                url: https://thumb7.shutterstock.com/thumb_large/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n                width: 150\n              preview:\n                height: 300\n                url: https://image.shutterstock.com/display_pic_with_logo/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n                width: 450\n              preview_1000:\n                height: 667\n                url: https://ak.picdn.net/shutterstock/photos/1572478477/watermark_1000/1706028c641ea2f443057287c67d9b91/preview_1000-1572478477.jpg\n                width: 1000\n              preview_1500:\n                height: 1000\n                url: https://image.shutterstock.com/z/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n                width: 1500\n              small_thumb:\n                height: 67\n                url: https://thumb7.shutterstock.com/thumb_small/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n                width: 100\n            contributor:\n              id: \"250738318\"\n            description: cropped image of woman gardening\n            has_model_release: true\n            id: \"1572478477\"\n            image_type: photo\n            media_type: image\n        page: 1\n        per_page: 5\n        total_count: 123455\n      properties:\n        data:\n          description: Images\n          items:\n            $ref: \"#/components/schemas/Image\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: Current page that is returned\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        total_count:\n          description: Total count of all results across all pages\n          type: integer\n    ImageSearchResults:\n      description: Image search results\n      example:\n        data:\n          - aspect: 1.5\n            assets:\n              huge_thumb:\n                height: 260\n                url: https://image.shutterstock.com/image-photo/cropped-image-woman-gardening-260nw-1572478477.jpg\n                width: 390\n              large_thumb:\n                height: 100\n                url: https://thumb7.shutterstock.com/thumb_large/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n                width: 150\n              preview:\n                height: 300\n                url: https://image.shutterstock.com/display_pic_with_logo/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n                width: 450\n              preview_1000:\n                height: 667\n                url: https://ak.picdn.net/shutterstock/photos/1572478477/watermark_1000/1706028c641ea2f443057287c67d9b91/preview_1000-1572478477.jpg\n                width: 1000\n              preview_1500:\n                height: 1000\n                url: https://image.shutterstock.com/z/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n                width: 1500\n              small_thumb:\n                height: 67\n                url: https://thumb7.shutterstock.com/thumb_small/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n                width: 100\n            contributor:\n              id: \"250738318\"\n            description: cropped image of woman gardening\n            has_model_release: true\n            id: \"1572478477\"\n            image_type: photo\n            media_type: image\n        page: 1\n        per_page: 5\n        search_id: 749090bb-2967-4a20-b22e-c800dc845e10\n        spellcheck_info: {}\n        total_count: 45\n      properties:\n        data:\n          description: List of images\n          items:\n            $ref: \"#/components/schemas/Image\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: Current page that is returned\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        search_id:\n          description: Unique identifier for the search request\n          type: string\n        spellcheck_info:\n          description: Returns information if search phrase has potentially been mistyped or another query would lead to better search results\n          type: object\n        total_count:\n          description: Total count of all results across all pages\n          type: integer\n      required:\n        - data\n        - total_count\n        - search_id\n      type: object\n    ImageSizeDetails:\n      description: Image size information\n      example:\n        display_name: Med\n        dpi: 300\n        file_size: 860200\n        format: jpg\n        height: 667\n        is_licensable: true\n        width: 1000\n      properties:\n        display_name:\n          description: Display name of this image size\n          type: string\n        dpi:\n          type: integer\n        file_size:\n          description: File size (in bytes) of this image size\n          type: integer\n        format:\n          description: Format of this image size\n          type: string\n        height:\n          description: Height of this image size\n          type: integer\n        is_licensable:\n          description: Whether or not this image can be licensed in this image size\n          type: boolean\n        width:\n          description: Width of this image size\n          type: integer\n      type: object\n    Instrument:\n      description: Information about an musical instrument\n      example:\n        id: bright_roomy_kit\n        name: Bright Roomy Kit\n        previews:\n          - content_type: audio/mp3\n            url: https://public-cdn.ampermusic.com/instruments/previews/bright_roomy_kit_v1.mp3\n        tags:\n          - Percussion\n          - Aux Percs\n          - Set Cymbals\n          - Crash\n          - Open\n          - Ride\n          - Set Hi-Hat\n          - Set Kicks\n          - Stick Snare\n          - Quad Toms\n          - Roto Toms\n      properties:\n        id:\n          description: The id of the instrument\n          type: string\n        name:\n          description: Name of the instrument\n          type: string\n        previews:\n          description: Preview of the instrument\n          items:\n            $ref: \"#/components/schemas/Preview\"\n          type: array\n        tags:\n          description: List of tags\n          items:\n            type: string\n          type: array\n      type: object\n    InstrumentList:\n      additionalProperties: false\n      description: List of instruments\n      example:\n        data:\n          - Orchestra\n          - Organ\n          - Oud\n          - Pads\n          - Electric Guitar\n      properties:\n        data:\n          description: List of instruments\n          items:\n            type: string\n          type: array\n      required:\n        - data\n      type: object\n    Instruments:\n      description: Instruments\n      example:\n        id: bright_roomy_kit\n        name: Bright Roomy Kit\n      properties:\n        id:\n          description: The string id of the instrument\n          type: string\n        name:\n          description: The string name of the instrument\n          type: string\n      type: object\n    InstrumentsListResult:\n      description: Image search results\n      example:\n        data:\n          - id: bright_roomy_kit\n            name: Bright Roomy Kit\n            previews:\n              - content_type: audio/mp3\n                url: https://public-cdn.ampermusic.com/instruments/previews/bright_roomy_kit_v1.mp3\n            tags:\n              - Percussion\n              - Aux Percs\n              - Set Cymbals\n              - Crash\n              - Open\n              - Ride\n              - Set Hi-Hat\n              - Set Kicks\n              - Stick Snare\n              - Quad Toms\n              - Roto Toms\n        page: 1\n        per_page: 5\n      properties:\n        data:\n          description: List of instrumnets\n          items:\n            $ref: \"#/components/schemas/Instrument\"\n          type: array\n        page:\n          description: Current page that is returned\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n      type: object\n    KeywordDataList:\n      description: List of keywords\n      example:\n        data:\n          - nature\n          - wildlife\n          - animal\n          - cute\n          - bamboo\n          - panda\n          - china\n          - wild\n          - endangered\n          - black\n          - bear\n      properties:\n        data:\n          description: Keywords\n          items:\n            type: string\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n    Language:\n      description: Language code\n      enum:\n        - cs\n        - da\n        - de\n        - el\n        - en\n        - es\n        - fi\n        - fr\n        - hu\n        - id\n        - it\n        - ja\n        - ko\n        - nb\n        - nl\n        - pl\n        - pt\n        - ro\n        - ru\n        - sv\n        - th\n        - tr\n        - vi\n        - zh\n        - zh-Hant\n      example: cs\n      title: language\n      type: string\n    LicenseAudio:\n      description: An audio track in a licensing request\n      example:\n        audio_id: \"123456789\"\n        license: audio_platform\n        search_id: \"987654321\"\n      properties:\n        audio_id:\n          description: ID of the track being licensed\n          type: string\n        license:\n          description: Type of license\n          enum:\n            - audio_platform\n            - premier_music_basic\n            - premier_music_extended\n            - premier_music_pro\n            - premier_music_comp\n          type: string\n        search_id:\n          description: ID of the search that led to this licensing event\n          type: string\n      required:\n        - audio_id\n      type: object\n    LicenseAudioRequest:\n      description: Audio license request data\n      example:\n        audio:\n          - audio_id: \"591623\"\n            license: audio_platform\n            metadata:\n              customer_id: \"12345\"\n      properties:\n        audio:\n          description: List of audio tracks to license\n          items:\n            $ref: \"#/components/schemas/LicenseAudio\"\n          maxItems: 50\n          type: array\n      required:\n        - audio\n      type: object\n    LicenseAudioResult:\n      description: The response to a licensing request for an audio track\n      example:\n        audio_id: \"123456789\"\n        download:\n          url: http://download2.dev.shutterstock.com/gatekeeper/abc/original.wav\n      properties:\n        audio_id:\n          description: ID of the track that was licensed\n          type: string\n        download:\n          $ref: \"#/components/schemas/Url\"\n        error:\n          description: Error information if applicable\n          type: string\n      required:\n        - audio_id\n      type: object\n    LicenseAudioResultDataList:\n      description: List of audio license results\n      example:\n        data:\n          - audio_id: \"123456789\"\n            download:\n              url: http://download2.dev.shutterstock.com/gatekeeper/abc/original.wav\n      properties:\n        data:\n          description: License results\n          items:\n            $ref: \"#/components/schemas/LicenseAudioResult\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: Current page that is returned\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        total_count:\n          description: Total count of all results across all pages\n          type: integer\n    LicenseEditorialContent:\n      description: Individual editorial content to license\n      example:\n        editorial_id: 10687730b\n        license: premier_editorial_comp\n        metadata:\n          customer_id: \"12345\"\n          geo_location: US\n          number_viewed: \"15\"\n          search_term: dog\n        size: original\n      properties:\n        editorial_id:\n          description: Editorial ID\n          type: string\n        license:\n          description: License agreement to use for licensing\n          type: string\n        metadata:\n          $ref: \"#/components/schemas/LicenseRequestMetadata\"\n        size:\n          default: original\n          description: Asset size to download\n          enum:\n            - small\n            - medium\n            - original\n          type: string\n      required:\n        - editorial_id\n        - license\n      type: object\n    LicenseEditorialContentRequest:\n      description: License editorial content request\n      example:\n        country: USA\n        editorial:\n          - editorial_id: 10687730b\n            license: premier_editorial_comp\n            metadata:\n              customer_id: \"12345\"\n              geo_location: US\n              number_viewed: \"15\"\n              search_term: dog\n            size: original\n      properties:\n        country:\n          anyOf:\n            - format: country-code-3\n              type: string\n            - format: country-code-2\n              type: string\n          description: Mandatory country code for where the editorial content will be distributed; this value is used for rights checks\n          example: USA\n        editorial:\n          description: Editorial content to license\n          items:\n            $ref: \"#/components/schemas/LicenseEditorialContent\"\n          type: array\n      required:\n        - country\n        - editorial\n      type: object\n    LicenseEditorialContentResult:\n      description: The response to a licensing request for editorial content\n      example:\n        allotment_charge: 1\n        download:\n          url: https://s3-eu-west-1.amazonaws.com/api-downloads.rexfeatures.com/[random-characters].jpg?Expires=1524717323\n        editorial_id: \"69656358\"\n      properties:\n        allotment_charge:\n          description: For pre-paid plans, how many credits were used for the item license\n          type: integer\n        download:\n          $ref: \"#/components/schemas/Url\"\n          description: Information that is needed to download the image\n        editorial_id:\n          description: Editorial ID\n          type: string\n        error:\n          type: string\n      required:\n        - editorial_id\n      type: object\n    LicenseEditorialContentResults:\n      description: List of editorial license results\n      example:\n        data:\n          - allotment_charge: 1\n            download:\n              url: https://s3-eu-west-1.amazonaws.com/api-downloads.rexfeatures.com/[random-characters].jpg?Expires=1524717323\n            editorial_id: \"69656358\"\n        page: 1\n        per_page: 1\n        total_count: 12\n      properties:\n        data:\n          description: License results\n          items:\n            $ref: \"#/components/schemas/LicenseEditorialContentResult\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Optional error message\n          type: string\n        page:\n          description: Current page of the response\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        total_count:\n          description: Total count of all results\n          type: integer\n    LicenseEditorialVideoContent:\n      description: Individual editorial video content to license\n      example:\n        editorial_id: 10679854a\n        license: premier_editorial_video_digital_only\n        metadata:\n          purchase_order: \"12345\"\n        size: original\n      properties:\n        editorial_id:\n          description: Editorial ID\n          type: string\n        license:\n          description: License agreement to use for licensing\n          enum:\n            - premier_editorial_video_digital_only\n            - premier_editorial_video_all_media\n            - premier_editorial_video_all_media_single_territory\n            - premier_editorial_video_comp\n          type: string\n        metadata:\n          $ref: \"#/components/schemas/LicenseRequestMetadata\"\n        size:\n          default: original\n          description: Asset size to download\n          enum:\n            - original\n          type: string\n      required:\n        - editorial_id\n        - license\n      type: object\n    LicenseEditorialVideoContentRequest:\n      description: License editorial video content request\n      example:\n        country: USA\n        editorial:\n          - editorial_id: 10679854a\n            license: premier_editorial_video_digital_only\n            metadata:\n              purchase_order: \"12345\"\n            size: original\n      properties:\n        country:\n          anyOf:\n            - format: country-code-3\n              type: string\n            - format: country-code-2\n              type: string\n          description: Mandatory country code for where the editorial content will be distributed; this value is used for rights checks\n          example: USA\n        editorial:\n          description: Editorial content to license\n          items:\n            $ref: \"#/components/schemas/LicenseEditorialVideoContent\"\n          type: array\n      required:\n        - country\n        - editorial\n      type: object\n    LicenseFormat:\n      description: Description of a license\n      example:\n        description: Med\n        format: jpg\n        media_type: image\n        min_resolution: 1000\n        size: medium\n      properties:\n        description:\n          description: Description of the license\n          type: string\n        format:\n          description: Format or extension of the media, such as mpeg for videos or jpeg for images\n          type: string\n        media_type:\n          description: Media type of the license\n          enum:\n            - image\n            - video\n            - audio\n            - editorial\n          type: string\n        min_resolution:\n          description: Width of the media, in pixels, allowed by this license\n          type: integer\n        size:\n          description: Keyword that details the size of the media, such as hd or sd for video, huge or vector for images\n          type: string\n      type: object\n    LicenseImage:\n      description: Data required to license an image\n      example:\n        custom_dimensions:\n          height: 600\n          width: 800\n        editorial_acknowledgement: true\n        format: jpg\n        image_id: \"123456789\"\n        metadata:\n          customer_id: \"12345\"\n          geo_location: US\n          number_viewed: \"15\"\n          search_term: dog\n        price: 12.34\n        show_modal: true\n        size: small\n        subscription_id: s8906043\n      properties:\n        auth_cookie:\n          $ref: \"#/components/schemas/Cookie\"\n          description: Cookie object\n        custom_dimensions:\n          $ref: \"#/components/schemas/CustomSizeDimensions\"\n        editorial_acknowledgement:\n          description: Set to true to acknowledge the editorial agreement\n          type: boolean\n        format:\n          description: Image format to download\n          enum:\n            - jpg\n            - eps\n          type: string\n        image_id:\n          description: Image ID\n          type: string\n        metadata:\n          $ref: \"#/components/schemas/LicenseRequestMetadata\"\n        price:\n          description: For revenue-sharing transactions, the final cost to the end customer as a floating-point number in the transaction currency, such as 12.34\n          type: number\n        search_id:\n          description: ID of the search that led to this licensing transaction\n          type: string\n        show_modal:\n          deprecated: true\n          description: (Deprecated)\n          type: boolean\n        size:\n          description: Image size to download\n          enum:\n            - small\n            - medium\n            - huge\n            - vector\n            - custom\n          type: string\n        subscription_id:\n          description: ID of the subscription to use for the download.\n          type: string\n        verification_code:\n          deprecated: true\n          description: (Deprecated)\n          type: string\n      required:\n        - image_id\n      type: object\n    LicenseImageRequest:\n      description: Image license request data\n      example:\n        images:\n          - custom_dimensions:\n              height: 600\n              width: 800\n            editorial_acknowledgement: true\n            format: jpg\n            image_id: \"123456789\"\n            metadata:\n              customer_id: \"12345\"\n              geo_location: US\n              number_viewed: \"15\"\n              search_term: dog\n            price: 12.34\n            show_modal: true\n            size: small\n            subscription_id: s8906043\n      properties:\n        images:\n          description: Images to create licenses for\n          items:\n            $ref: \"#/components/schemas/LicenseImage\"\n          maxItems: 50\n          type: array\n      required:\n        - images\n      type: object\n    LicenseImageResult:\n      description: The response to a licensing request for an image\n      example:\n        allotment_charge: 1\n        download:\n          url: https://download.shutterstock.com/gatekeeper/[random-characters]/shutterstock_59656357.jpg\n        image_id: \"59656357\"\n        price:\n          local_amount: 12.34\n          local_currency: EUR\n      properties:\n        allotment_charge:\n          description: Number of credits that this licensing event used\n          type: integer\n        download:\n          $ref: \"#/components/schemas/Url\"\n          description: Information that is needed to download the image\n        error:\n          description: Error message, appears only if there was an error\n          type: string\n        image_id:\n          description: Image ID that was licensed\n          type: string\n        price:\n          $ref: \"#/components/schemas/Price\"\n          description: Wholesale price information; only for rev-share partners\n      required:\n        - image_id\n      type: object\n    LicenseImageResultDataList:\n      description: List of information about licensed images\n      example:\n        data:\n          - allotment_charge: 1\n            download:\n              url: https://download.shutterstock.com/gatekeeper/[random-characters]/shutterstock_59656357.jpg\n            image_id: \"59656357\"\n        page: 1\n        per_page: 5\n        total_count: 23\n      properties:\n        data:\n          description: License results\n          items:\n            $ref: \"#/components/schemas/LicenseImageResult\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: Current page that is returned\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        total_count:\n          description: Total count of all results across all pages\n          type: integer\n    LicenseRequestMetadata:\n      description: Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder\n      example:\n        customer_id: \"12345\"\n        geo_location: US\n        number_viewed: \"15\"\n        search_term: dog\n      maxProperties: 4\n      properties: {}\n      type: object\n    LicenseVideo:\n      description: Data required to license a video\n      example:\n        size: hd\n        subscription_id: s8241143\n        video_id: \"2140697\"\n      properties:\n        auth_cookie:\n          $ref: \"#/components/schemas/Cookie\"\n        editorial_acknowledgement:\n          description: Whether or not this item is editorial content\n          type: boolean\n        metadata:\n          $ref: \"#/components/schemas/LicenseRequestMetadata\"\n        price:\n          description: Retail price amount as a floating-point number in the transaction currency, such as 12.34; only for rev-share partners\n          type: number\n        search_id:\n          description: ID of the search that led to this licensing event\n          type: string\n        show_modal:\n          deprecated: true\n          description: (Deprecated)\n          type: boolean\n        size:\n          description: Size of the video being licensed\n          enum:\n            - web\n            - sd\n            - hd\n            - 4k\n          type: string\n        subscription_id:\n          description: ID of the subscription used for this license\n          type: string\n        video_id:\n          description: ID of the video being licensed\n          type: string\n      required:\n        - video_id\n      type: object\n    LicenseVideoRequest:\n      description: List of videos to license\n      example:\n        videos:\n          - size: hd\n            subscription_id: s8241143\n            video_id: \"2140697\"\n      properties:\n        videos:\n          description: Videos to license\n          items:\n            $ref: \"#/components/schemas/LicenseVideo\"\n          maxItems: 50\n          type: array\n      required:\n        - videos\n      type: object\n    LicenseVideoResult:\n      description: The response to a licensing request for a video\n      example:\n        allotment_charge: 1\n        download:\n          url: https://download.shutterstock.com/gatekeeper/[random-characters]/shutterstock_59656357.mp4\n        price:\n          local_amount: 12.34\n          local_currency: EUR\n        video_id: \"123456789\"\n      properties:\n        allotment_charge:\n          description: Number of credits that this licensing event used\n          type: integer\n        download:\n          $ref: \"#/components/schemas/Url\"\n        error:\n          description: Potential error that occurred during licensing\n          type: string\n        price:\n          $ref: \"#/components/schemas/Price\"\n          description: Wholesale price information; only for rev-share partners only\n        video_id:\n          description: ID of the video that was licensed\n          type: string\n      required:\n        - video_id\n      type: object\n    LicenseVideoResultDataList:\n      description: List of video license results\n      example:\n        data:\n          - allotment_charge: 1\n            download:\n              url: https://download.shutterstock.com/gatekeeper/[random-characters]/shutterstock_59656357.mp4\n            price:\n              local_amount: 12.34\n              local_currency: EUR\n            video_id: \"123456789\"\n        page: 1\n        per_page: 5\n        total_count: 123455\n      properties:\n        data:\n          description: License results\n          items:\n            $ref: \"#/components/schemas/LicenseVideoResult\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: Current page that is returned\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        total_count:\n          description: Total count of all results across all pages\n          type: integer\n    Model:\n      description: Information about a human model or property that appears in media; used to search for assets that this model is in\n      example:\n        id: \"123456789\"\n      properties:\n        id:\n          description: ID of the model\n          type: string\n      required:\n        - id\n      type: object\n    ModelRelease:\n      description: Model and property release metadata\n      example:\n        id: \"123456789\"\n      properties:\n        id:\n          description: ID of the model or property release\n          type: string\n      type: object\n    MoodList:\n      additionalProperties: false\n      description: List of audio moods\n      example:\n        data:\n          - Action / Sports\n          - Adventure / Discovery\n          - Aerobics / Workout\n          - Aggressive\n      properties:\n        data:\n          description: List of audio moods\n          items:\n            type: string\n          type: array\n      required:\n        - data\n      type: object\n    OauthAccessTokenResponse:\n      description: Access token response to client apps\n      example:\n        access_token: v2/NmQwOTc0NTBiMjA5YzZkY2Q4NTkvMTA4OTg1MDk5L2N1c3RvbWVyLzIvZjB2a0RseGo4Rkt6ZjRmVWJNMm10V2VzcHh1NTBlZWJ6andUQU1NeTVYYnNFTDVWOFRJakItS2RnZTlmbEY1Y3haNWdXLUtYc2JhaXo5djk0V0p2QzZUUWZ4c2FNWm41NkdLYUgyVWlCaVUtQTNVMV9YQWpzd3lpblI3SlZEem8wSG1qQ2NzSkJlX3VQTnNXenBIdkd4SXViVi1rRGJTVENCV0g1U3U0RXRJSV9rSm5lQkl5QXlvbm5JN241UUhv\n        token_type: Bearer\n      properties:\n        access_token:\n          description: Access token that can be used for future requests\n          type: string\n        expires_in:\n          description: Number of seconds before token expires, only present for expiring tokens\n          type: integer\n        refresh_token:\n          description: A refresh token that can be used to renew the access_token when it expires, only present for expiring tokens\n          type: string\n        token_type:\n          default: Bearer\n          description: Type of token\n          type: string\n        user_token:\n          description: Metadata about the access_token, only present for expiring tokens\n          type: string\n      required:\n        - access_token\n        - token_type\n      type: object\n    Preview:\n      description: Preview information\n      example:\n        content_type: audio/mp3\n        url: https://public-cdn.ampermusic.com/instruments/previews/roomy_kit_v1.mp3\n      properties:\n        content_type:\n          description: Content type of the preview, currently audio/mp3\n          enum:\n            - audio/mp3\n          type: string\n        url:\n          description: Url of the instrument's preview file\n          type: string\n      type: object\n    Price:\n      description: Price\n      example:\n        local_amount: 12.34\n        local_currency: EUR\n      properties:\n        local_amount:\n          description: Floating-point amount of the calculated rev-share price in the currency local_currency\n          type: number\n        local_currency:\n          description: Currency of the rev-share price that was calculated\n          type: string\n      type: object\n    Recommendation:\n      description: Media Recommendation\n      example:\n        id: \"123456789\"\n      properties:\n        id:\n          description: Media ID\n          type: string\n      required:\n        - id\n      type: object\n    RecommendationDataList:\n      description: List of recommended images\n      example:\n        data:\n          - id: \"123456789\"\n          - id: \"99379946\"\n          - id: \"133918412\"\n        page: 1\n        per_page: 5\n        total_count: 12\n      properties:\n        data:\n          description: Recommended images\n          items:\n            $ref: \"#/components/schemas/Recommendation\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: Current page that is returned\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        total_count:\n          description: Total count of all results across all pages\n          type: integer\n    RedownloadImage:\n      description: Data required to redownload an image\n      example:\n        size: small\n      properties:\n        auth_cookie:\n          $ref: \"#/components/schemas/Cookie\"\n          deprecated: true\n          description: (Deprecated)\n        show_modal:\n          deprecated: true\n          description: (Deprecated)\n          type: boolean\n        size:\n          description: Size of the image\n          enum:\n            - small\n            - medium\n            - huge\n            - supersize\n            - vector\n          type: string\n        verification_code:\n          deprecated: true\n          description: (Deprecated)\n          type: string\n      type: object\n    RedownloadVideo:\n      description: Data required to redownload a video\n      example:\n        size: web\n      properties:\n        auth_cookie:\n          $ref: \"#/components/schemas/Cookie\"\n          deprecated: true\n          description: (Deprecated)\n        show_modal:\n          deprecated: true\n          description: (Deprecated)\n          type: boolean\n        size:\n          description: Size of the video\n          enum:\n            - web\n            - sd\n            - hd\n            - 4k\n          type: string\n        verification_code:\n          deprecated: true\n          description: (Deprecated)\n          type: string\n      type: object\n    RegisterVideoEditorRequest:\n      description: Request to register a new instance of the video editor\n      example:\n        imageSubscriptionId: s1234567\n        videoSubscriptionId: s7654321\n        webhookUrl: http://example.com:3009/videoCompleteCallback\n      properties:\n        imageSubscriptionId:\n          description: The ID of the subscription to use for licensing images\n          type: string\n        videoSubscriptionId:\n          description: The ID of the subscription to use for licensing videos\n          type: string\n        webhookUrl:\n          description: The callback URL of the application that receives completed videos\n          type: string\n      required:\n        - webhookUrl\n        - imageSubscriptionId\n        - videoSubscriptionId\n      type: object\n    SearchEntitiesRequest:\n      description: Search entity request data\n      example:\n        text: Planting flowers is a great way to make springtime more beautiful.\n      properties:\n        text:\n          description: Plain text to extract keywords from\n          maxLength: 100000\n          minLength: 1\n          type: string\n      required:\n        - text\n      type: object\n    SearchEntitiesResponse:\n      description: The response to a request for keyword analysis\n      example:\n        keywords:\n          - planting\n          - flowers\n          - springtime\n          - beautiful\n      properties:\n        keywords:\n          description: The top keywords from the submitted text\n          items:\n            type: string\n          type: array\n    Subscription:\n      description: Subscription information\n      example:\n        allotment:\n          downloads_left: 5\n          downloads_limit: 10\n          end_time: 2020-05-29T12:10:22-05:00\n          start_time: 2020-05-29T12:10:22-05:00\n        asset_type: images\n        description: Annual Subscription\n        expiration_time: 2020-05-29T12:10:22-05:00\n        formats:\n          - description: Small\n            format: jpg\n            media_type: image\n            min_resolution: 500\n            size: small\n          - description: Med\n            format: jpg\n            media_type: image\n            min_resolution: 1000\n            size: medium\n          - description: Vector\n            format: eps\n            media_type: image\n            size: vector\n        id: s8906043\n        license: standard\n        metadata: {}\n      properties:\n        allotment:\n          $ref: \"#/components/schemas/Allotment\"\n        asset_type:\n          description: Identifier for the type of assets associated with this subscription (images, videos, audio, editorial)\n          type: string\n        description:\n          description: Description of the subscription\n          type: string\n        expiration_time:\n          description: Date the subscription ends\n          format: date-time\n          type: string\n        formats:\n          description: List of formats that are licensable for the subscription\n          items:\n            $ref: \"#/components/schemas/LicenseFormat\"\n          type: array\n        id:\n          description: Unique internal identifier for the subscription\n          type: string\n        license:\n          description: Internal identifier for the type of subscription\n          type: string\n        metadata:\n          $ref: \"#/components/schemas/SubscriptionMetadata\"\n        price_per_download:\n          $ref: \"#/components/schemas/Price\"\n      required:\n        - id\n      type: object\n    SubscriptionDataList:\n      description: List of subscriptions\n      example:\n        data:\n          - allotment:\n              downloads_left: 5\n              downloads_limit: 10\n              end_time: 2020-05-29T12:10:22-05:00\n              start_time: 2020-05-29T12:10:22-05:00\n            asset_type: images\n            description: Annual Subscription\n            expiration_time: 2020-05-29T12:10:22-05:00\n            formats:\n              - description: Small\n                format: jpg\n                media_type: image\n                min_resolution: 500\n                size: small\n              - description: Med\n                format: jpg\n                media_type: image\n                min_resolution: 1000\n                size: medium\n              - description: Vector\n                format: eps\n                media_type: image\n                size: vector\n            id: s8906043\n            license: standard\n            metadata: {}\n        page: 1\n        per_page: 5\n        total_count: 123455\n      properties:\n        data:\n          description: Subscriptions retrieved from this user\n          items:\n            $ref: \"#/components/schemas/Subscription\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Optional error message\n          type: string\n        page:\n          description: Current page that is being queried\n          type: integer\n        per_page:\n          description: Amount of subscriptions to show per page\n          type: integer\n        total_count:\n          description: Total number of subscriptions for this user\n          type: integer\n    SubscriptionMetadata:\n      description: Subscription metadata; different for each customer\n      example:\n        client:\n          is_required: false\n          name: purchase_order\n        job:\n          is_required: true\n          name: client_name\n        other:\n          is_required: false\n          name: custom_value\n      type: object\n    Suggestions:\n      description: List of search suggestions\n      example:\n        data:\n          - cat scan\n          - cats and dogs\n          - cats playing\n          - catsuit\n          - cat silhouette\n          - catskills\n          - cats eyes\n          - cat sitting\n          - cat sleeping\n          - cats eye\n      properties:\n        data:\n          description: Search suggestions\n          items:\n            type: string\n          type: array\n      type: object\n    TestEcho:\n      description: Text to echo in the response\n      example:\n        text: Test string\n      properties:\n        text:\n          type: string\n      type: object\n    TestValidate:\n      description: Validation results\n      example:\n        header:\n          user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\n        query:\n          id: 123456\n          tag:\n            - Test string\n      properties:\n        header:\n          $ref: \"#/components/schemas/TestValidateHeader\"\n          description: Headers as included in the request\n        query:\n          $ref: \"#/components/schemas/TestValidateQuery\"\n          description: Query as included in the request\n      type: object\n    TestValidateHeader:\n      description: Validation results\n      example:\n        user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\n      properties:\n        user-agent:\n          description: User agent to expect in the response\n          type: string\n      type: object\n    TestValidateQuery:\n      description: Validation results\n      example:\n        id: 123456\n        tag:\n          - string\n      properties:\n        id:\n          description: Integer ID that was passed in the request\n          type: integer\n        tag:\n          description: List of tags that were passed in the request\n          items:\n            type: string\n          type: array\n      required:\n        - id\n      type: object\n    Thumbnail:\n      description: Image thumbnail information\n      example:\n        height: 100\n        url: https://thumb7.shutterstock.com/thumb_large/250738318/1572478477/stock-photo-cropped-image-of-woman-gardening-1572478477.jpg\n        width: 150\n      properties:\n        height:\n          description: Height in pixels of the image thumbnail\n          type: integer\n        url:\n          description: Direct URL to the image\n          type: string\n        width:\n          description: Width in pixels of the image thumbnail\n          type: integer\n      required:\n        - url\n        - height\n        - width\n      type: object\n    UpdateVideoEditorRequest:\n      description: Request to update an existing instance of the video editor\n      example:\n        imageSubscriptionId: s2345671\n        videoSubscriptionId: s6543217\n        webhookUrl: http://example.com:3009/updatedVideoCompleteCallback\n      properties:\n        imageSubscriptionId:\n          description: The ID of the subscription to use for licensing images\n          type: string\n        videoSubscriptionId:\n          description: The ID of the subscription to use for licensing videos\n          type: string\n        webhookUrl:\n          description: The callback URL of the application that receives completed videos\n          type: string\n      type: object\n    UpdatedMedia:\n      description: Information about a piece of updated media\n      example:\n        id: \"123456789\"\n        updated_time: 2020-05-29T12:10:22-05:00\n        updates:\n          - addition\n          - edit\n      properties:\n        id:\n          description: ID of the media\n          type: string\n        updated_time:\n          description: Date that the media was updated\n          format: date-time\n          type: string\n        updates:\n          description: Types of updates that were made to the piece of media\n          items:\n            type: string\n          type: array\n      required:\n        - id\n        - updated_time\n        - updates\n      type: object\n    UpdatedMediaDataList:\n      description: List of updated media\n      example:\n        data:\n          - id: \"123456789\"\n            updated_time: 2020-05-29T12:10:22-05:00\n            updates:\n              - addition\n              - edit\n        page: 1\n        per_page: 5\n        total_count: 13\n      properties:\n        data:\n          description: Updated media items\n          items:\n            $ref: \"#/components/schemas/UpdatedMedia\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: Current page that is returned\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        total_count:\n          description: Total count of all results across all pages\n          type: integer\n    Url:\n      description: URL object\n      example:\n        url: https://download.shutterstock.com/gatekeeper/[random-characters]/shutterstock_59656357.jpg\n      properties:\n        url:\n          description: URL that can be used to download the unwatermarked, licensed asset\n          type: string\n      required:\n        - url\n      type: object\n    Urls:\n      description: List of URLs\n      example:\n        urls:\n          - string\n      properties:\n        urls:\n          description: URLs\n          items:\n            type: string\n          type: array\n      required:\n        - urls\n      type: object\n    UserDetails:\n      description: User details\n      example:\n        contributor_id: \"212\"\n        first_name: John\n        full_name: John Doe\n        id: \"101782699\"\n        language: es\n        last_name: Doe\n        username: jdoe\n      properties:\n        contributor_id:\n          description: Unique internal identifier of the user, as a contributor\n          type: string\n        customer_id:\n          description: Unique internal identifier of the user, as a purchaser\n          type: string\n        email:\n          description: Email address of the user\n          type: string\n        first_name:\n          description: First name of the user\n          type: string\n        full_name:\n          description: Full name including first, middle, and last name of the user\n          type: string\n        id:\n          description: Unique internal identifier for the user, not tied to contributor or purchasing customer\n          type: string\n        is_premier:\n          description: True if the user has access to the Premier collection, false otherwise\n          type: boolean\n        is_premier_parent:\n          description: True if the user has access to the Premier collection and also has child users\n          type: boolean\n        language:\n          description: Main language of the user account\n          type: string\n        last_name:\n          description: Last name of the user\n          type: string\n        only_enhanced_license:\n          description: True if the user has an enterprise license, false otherwise\n          type: boolean\n        only_sensitive_use:\n          description: True if the user has access to sensitive use only, false otherwise\n          type: boolean\n        organization_id:\n          description: Unique internal identifier for the user's organization, specific to Premier users\n          type: string\n        premier_permissions:\n          description: List of permissions allowed through the Premier client\n          items:\n            type: string\n          type: array\n        username:\n          description: User name associated to the user\n          type: string\n      type: object\n    Video:\n      description: Information about a video\n      example:\n        added_date: 2019-07-13\n        aspect: 1.778\n        aspect_ratio: 16:9\n        assets:\n          hd:\n            display_name: Original HD\n            file_size: 110359552\n            format: avc1\n            fps: 29.97\n            height: 1080\n            is_licensable: true\n            width: 1920\n          preview_jpg:\n            url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg\n          preview_mp4:\n            url: https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4\n          preview_webm:\n            url: https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm\n          sd:\n            display_name: Standard Definition MPEG\n            file_size: 4577280\n            format: mov\n            fps: 29.97\n            height: 480\n            is_licensable: true\n            width: 852\n          thumb_jpg:\n            url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg\n          thumb_jpgs:\n            urls:\n              - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/1.jpg\n              - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/2.jpg\n              - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/3.jpg\n              - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/4.jpg\n              - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/5.jpg\n              - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/6.jpg\n              - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/7.jpg\n              - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/8.jpg\n              - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/9.jpg\n              - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/10.jpg\n              - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/11.jpg\n              - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg\n          thumb_mp4:\n            url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4\n          thumb_webm:\n            url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm\n          web:\n            display_name: Low Resolution MPEG\n            file_size: 1291264\n            format: mov\n            fps: 29.97\n            height: 240\n            is_licensable: true\n            width: 426\n        categories:\n          - id: \"12\"\n            name: Nature\n          - id: \"13\"\n            name: People\n        contributor:\n          id: \"4411978\"\n        description: Camera follows hipster millennial young woman in orange jacket running up on top of mountain summit at sunset, jumps on top of rocks, raises arms into air, happy and drunk on life, youth and happiness\n        duration: 14.081\n        has_model_release: true\n        has_property_release: false\n        id: \"1033184651\"\n        is_adult: false\n        is_editorial: false\n        keywords:\n          - active\n          - activity\n          - adventure\n          - arms\n          - backpacker\n          - carefree\n          - celebrating\n          - cliff\n          - climate\n          - cloud\n          - discovery\n          - escape\n          - explore\n          - extreme\n          - free\n          - freedom\n          - girl\n          - happy\n          - high\n          - hiker\n          - hiking\n          - hill\n          - independent\n          - inspiration\n          - landscape\n          - leisure\n          - lifestyle\n          - mountain\n          - mountains\n          - nature\n          - outdoor\n          - peak\n          - person\n          - rock\n          - scenic\n          - sky\n          - sport\n          - success\n          - summer\n          - summit\n          - sun\n          - sunset\n          - top\n          - tourism\n          - travel\n          - trekking\n          - vacation\n          - view\n          - winning\n          - woman\n        media_type: video\n        models:\n          - id: \"33233810\"\n          - id: \"25487168\"\n      properties:\n        added_date:\n          description: Date this video was added to the Shutterstock library\n          format: date\n          type: string\n        affiliate_url:\n          description: Affiliate referral link; appears only for registered affiliate partners\n          format: uri\n          type: string\n        aspect:\n          description: Aspect ratio of this video in decimal format, such as 0.6667\n          type: number\n        aspect_ratio:\n          description: Aspect ratio of the video as a ratio, such as 16:9\n          type: string\n        assets:\n          $ref: \"#/components/schemas/VideoAssets\"\n        categories:\n          description: List of categories\n          items:\n            $ref: \"#/components/schemas/Category\"\n          type: array\n        contributor:\n          $ref: \"#/components/schemas/Contributor\"\n        description:\n          description: Description of this video\n          type: string\n        duration:\n          description: Duration of this video, in seconds\n          type: number\n        has_model_release:\n          description: Whether or not this video has been released for use by the model appearing in it\n          type: boolean\n        has_property_release:\n          description: Whether or not this video has received a release to show the landmark or property appearing in it\n          type: boolean\n        id:\n          description: ID of the video\n          type: string\n        is_adult:\n          description: Whether or not this video contains adult content\n          type: boolean\n        is_editorial:\n          description: Whether or not this video is editorial content\n          type: boolean\n        keywords:\n          description: Keywords associated with the content of this video\n          items:\n            type: string\n          type: array\n        media_type:\n          description: Media type of this video, should always be \"video\"\n          type: string\n        models:\n          description: List of models in this video\n          items:\n            $ref: \"#/components/schemas/Model\"\n          type: array\n        url:\n          description: Link to video information page; included only for certain accounts\n          type: string\n      required:\n        - id\n        - media_type\n        - contributor\n      type: object\n    VideoAssets:\n      description: Video asset information\n      example:\n        hd:\n          display_name: Original HD\n          file_size: 110359552\n          format: avc1\n          fps: 29.97\n          height: 1080\n          is_licensable: true\n          width: 1920\n        preview_jpg:\n          url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg\n        preview_mp4:\n          url: https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4\n        preview_webm:\n          url: https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm\n        sd:\n          display_name: Standard Definition MPEG\n          file_size: 4577280\n          format: mov\n          fps: 29.97\n          height: 480\n          is_licensable: true\n          width: 852\n        thumb_jpg:\n          url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg\n        thumb_jpgs:\n          urls:\n            - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/1.jpg\n            - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/2.jpg\n            - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/3.jpg\n            - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/4.jpg\n            - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/5.jpg\n            - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/6.jpg\n            - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/7.jpg\n            - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/8.jpg\n            - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/9.jpg\n            - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/10.jpg\n            - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/11.jpg\n            - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg\n        thumb_mp4:\n          url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4\n        thumb_webm:\n          url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm\n        web:\n          display_name: Low Resolution MPEG\n          file_size: 1291264\n          format: mov\n          fps: 29.97\n          height: 240\n          is_licensable: true\n          width: 426\n      properties:\n        4k:\n          $ref: \"#/components/schemas/VideoSizeDetails\"\n        hd:\n          $ref: \"#/components/schemas/VideoSizeDetails\"\n        preview_jpg:\n          $ref: \"#/components/schemas/Url\"\n        preview_mp4:\n          $ref: \"#/components/schemas/Url\"\n        preview_webm:\n          $ref: \"#/components/schemas/Url\"\n        sd:\n          $ref: \"#/components/schemas/VideoSizeDetails\"\n        thumb_jpg:\n          $ref: \"#/components/schemas/Url\"\n        thumb_jpgs:\n          $ref: \"#/components/schemas/Urls\"\n        thumb_mp4:\n          $ref: \"#/components/schemas/Url\"\n        thumb_webm:\n          $ref: \"#/components/schemas/Url\"\n        web:\n          $ref: \"#/components/schemas/VideoSizeDetails\"\n      type: object\n    VideoCollectionItemDataList:\n      description: List of items in a collection\n      example:\n        data:\n          - added_time: 2016-08-18T18:52:59-04:00\n            id: \"76688182\"\n            media_type: video\n          - added_time: 2016-08-18T18:52:59-04:00\n            id: \"40005859\"\n            media_type: video\n        page: 1\n        per_page: 100\n      properties:\n        data:\n          description: Assets in the collection\n          items:\n            $ref: \"#/components/schemas/CollectionItem\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: The current page of results\n          type: integer\n        per_page:\n          description: The number of results per page\n          type: integer\n        total_count:\n          description: The total number of results across all pages\n          type: integer\n    VideoDataList:\n      description: List of videos\n      example:\n        data:\n          - added_date: 2019-07-13\n            aspect: 1.778\n            aspect_ratio: 16:9\n            assets:\n              hd:\n                display_name: Original HD\n                file_size: 110359552\n                format: avc1\n                fps: 29.97\n                height: 1080\n                is_licensable: true\n                width: 1920\n              preview_jpg:\n                url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg\n              preview_mp4:\n                url: https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4\n              preview_webm:\n                url: https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm\n              sd:\n                display_name: Standard Definition MPEG\n                file_size: 4577280\n                format: mov\n                fps: 29.97\n                height: 480\n                is_licensable: true\n                width: 852\n              thumb_jpg:\n                url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg\n              thumb_jpgs:\n                urls:\n                  - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/1.jpg\n                  - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/2.jpg\n                  - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/3.jpg\n                  - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/4.jpg\n                  - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/5.jpg\n                  - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/6.jpg\n                  - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/7.jpg\n                  - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/8.jpg\n                  - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/9.jpg\n                  - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/10.jpg\n                  - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/11.jpg\n                  - https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg\n              thumb_mp4:\n                url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4\n              thumb_webm:\n                url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm\n              web:\n                display_name: Low Resolution MPEG\n                file_size: 1291264\n                format: mov\n                fps: 29.97\n                height: 240\n                is_licensable: true\n                width: 426\n            categories:\n              - id: \"12\"\n                name: Nature\n              - id: \"13\"\n                name: People\n            contributor:\n              id: \"4411978\"\n            description: Camera follows hipster millennial young woman in orange jacket running up on top of mountain summit at sunset, jumps on top of rocks, raises arms into air, happy and drunk on life, youth and happiness\n            duration: 14.081\n            has_model_release: true\n            has_property_release: false\n            id: \"1033184651\"\n            is_adult: false\n            is_editorial: false\n            keywords:\n              - active\n              - activity\n              - adventure\n              - arms\n              - backpacker\n              - carefree\n              - celebrating\n              - cliff\n              - climate\n              - cloud\n              - discovery\n              - escape\n              - explore\n              - extreme\n              - free\n              - freedom\n              - girl\n              - happy\n              - high\n              - hiker\n              - hiking\n              - hill\n              - independent\n              - inspiration\n              - landscape\n              - leisure\n              - lifestyle\n              - mountain\n              - mountains\n              - nature\n              - outdoor\n              - peak\n              - person\n              - rock\n              - scenic\n              - sky\n              - sport\n              - success\n              - summer\n              - summit\n              - sun\n              - sunset\n              - top\n              - tourism\n              - travel\n              - trekking\n              - vacation\n              - view\n              - winning\n              - woman\n            media_type: video\n            models:\n              - id: \"33233810\"\n              - id: \"25487168\"\n        page: 1\n        per_page: 5\n        total_count: 25\n      properties:\n        data:\n          description: Videos\n          items:\n            $ref: \"#/components/schemas/Video\"\n          type: array\n        errors:\n          description: Error list; appears only if there was an error\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: Current page that is returned\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        total_count:\n          description: Total count of all results across all pages\n          type: integer\n    VideoEditorTokenRequest:\n      description: Request for a video editor user access token\n      example:\n        userId: \"123\"\n      properties:\n        userId:\n          description: A unique user ID that your app assigns to the user that is loading the video editor\n          type: string\n      required:\n        - userId\n      type: object\n    VideoEditorTokenResponse:\n      description: The response that includes the user access token and its expiration date\n      example:\n        token:\n          expirationDate: 1624559827\n          value: 123456789.ABCDEFHIJ.A1B2C3D4\n      properties:\n        token:\n          description: The user access token\n          properties:\n            expirationDate:\n              description: The date that the token expires, in seconds since epoch\n              type: number\n            value:\n              description: The token\n              type: string\n          type: object\n      required:\n        - token\n      type: object\n    VideoPreviewUrl:\n      description: Video preview information\n      example:\n        url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4\n      properties:\n        url:\n          description: Direct URL to the image\n          type: string\n      required:\n        - url\n      type: object\n    VideoSearchResults:\n      description: Video search results\n      example:\n        data:\n          - aspect: 1.778\n            aspect_ratio: 16:9\n            assets:\n              preview_jpg:\n                url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg\n              preview_mp4:\n                url: https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4\n              preview_webm:\n                url: https://ak.picdn.net/shutterstock/videos/1033184651/preview/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm\n              thumb_jpg:\n                url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/12.jpg\n              thumb_mp4:\n                url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.mp4\n              thumb_webm:\n                url: https://ak.picdn.net/shutterstock/videos/1033184651/thumb/stock-footage-camera-follows-hipster-millennial-young-woman-in-orange-jacket-running-up-on-top-of-mountain-summit.webm\n            contributor:\n              id: \"4411978\"\n            description: Camera follows hipster millennial young woman in orange jacket running up on top of mountain summit at sunset, jumps on top of rocks, raises arms into air, happy and drunk on life, youth and happiness\n            duration: 14.081\n            has_model_release: true\n            id: \"1033184651\"\n            media_type: video\n        page: 1\n        per_page: 5\n        search_id: 749090bb-2967-4a20-b22e-c800dc845e10\n        total_count: 123\n      properties:\n        data:\n          description: List of videos\n          items:\n            $ref: \"#/components/schemas/Video\"\n          type: array\n        message:\n          description: Server-generated message, if any\n          type: string\n        page:\n          description: Current page that is returned\n          type: integer\n        per_page:\n          description: Number of results per page\n          type: integer\n        search_id:\n          description: Unique identifier for the search request\n          type: string\n        total_count:\n          description: Total count of all results across all pages\n          type: integer\n      required:\n        - data\n        - total_count\n        - search_id\n      type: object\n    VideoSizeDetails:\n      description: Video asset information\n      example:\n        display_name: Original HD\n        file_size: 110359552\n        format: avc1\n        fps: 29.97\n        height: 1080\n        is_licensable: true\n        width: 1920\n      properties:\n        display_name:\n          description: Display name of this video size\n          type: string\n        file_size:\n          description: File size (in bytes) of this video size\n          type: integer\n        format:\n          description: Format of this video size\n          type: string\n        fps:\n          description: Frames per second of this video size\n          type: number\n        height:\n          description: Height of this video size\n          type: integer\n        is_licensable:\n          description: Whether or not videos can be licensed in this video size\n          type: boolean\n        width:\n          description: Width of this video size\n          type: integer\n      type: object\n  securitySchemes:\n    basic:\n      scheme: basic\n      type: http\n    customer_accessCode:\n      flows:\n        authorizationCode:\n          authorizationUrl: https://accounts.shutterstock.com/oauth/authorize\n          scopes:\n            collections.edit: Grant the ability to create new collections, edit a collection, and modify the contents of a collection\n            collections.view: Grant read-only access to a collection and its contents.\n            licenses.create: Grant the ability to download and license media on behalf of the user.\n            licenses.view: Grant read-only access to a user's licenses.\n            purchases.view: Grant read-only access to a user's purchase history.\n            user.view: \"*Originally missing*\"\n          tokenUrl: https://api.shutterstock.com/v2/oauth/access_token\n      type: oauth2\n      x-shutterstock-realm: customer\n  x-string-formats:\n    asset-id:\n      example: \"18765466\"\n      format: A Shutterstock asset ID that starts with a nonzero digit and has any number of other digits\n    asset-upload-id:\n      example: U6ba16262e3bc2db470b8e3cfa8aaab25\n      format: A Shutterstock upload ID consisting of the letter U followed by one or more other characters\n    country-code-2:\n      example: US\n      format: A two-character (ISO 3166 Alpha-2) country code\n    country-code-3:\n      example: USA\n      format: A three-character (ISO 3166 Alpha-3) country code\n    date:\n      example: 2020-05-29\n      format: YYYY-MM-DD\n    date-time:\n      example: 2020-05-29T12:10:22-05:00\n      format: YYYY-MM-DDTHH:mm:ssZ\n    ipv4:\n      example: 1.1.1.1\n      format: A valid IPv4 address\n    negated-country-code-2:\n      example: NOT US\n      format: A NOT followed by a two-character (ISO 3166 Alpha-2) country code\n    uri:\n      example: https://wwww.shutterstock.com\n      format: A valid URI\n"
		}
	},
	"Error": "parse: paths: /v2/videos/search: get: searchVideos: parameters: parse parameter \"aspect_ratio\": schema: parse enum values: parse value \"43\": expected type \"string\", got \"number\""
}