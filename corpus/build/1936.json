{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/AssetStorm/AssetStorm"
		},
		"file": {
			"name": "AssetStormAPI.yaml",
			"path": "src/AssetStormAPI.yaml",
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: AssetStorm\n  license:\n    name: GPLv3\nservers:\n  - url: http://assetstorm.pinae.net\npaths:\n  /:\n    get:\n      tags:\n        - asset\n      parameters:\n        - $ref: \"#/paths/~1load/get/parameters/0\"\n      responses:\n        '200':\n          $ref: \"#/paths/~1load/get/responses/200\"\n        default:\n          $ref: \"#/paths/~1load/get/responses/default\"\n    post:\n      tags:\n        - asset\n      requestBody:\n        $ref: \"#/paths/~1save/post/requestBody\"\n      responses:\n        '200':\n          $ref: \"#/paths/~1save/post/responses/200\"\n        default:\n          $ref: \"#/paths/~1save/post/responses/default\"\n  /load:\n    get:\n      summary: Load one asset by ID\n      operationId: load_asset\n      tags:\n        - asset\n      parameters:\n        - name: id\n          in: query\n          description: ID as a UUIDv4 string identifying the desired asset\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: Returns the content tree of the requested asset.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AssetTree\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n  /save:\n    post:\n      summary: Create or modify all assets from the supplied tree\n      operationId: save_asset\n      tags:\n        - asset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AssetTree\"\n      responses:\n        '200':\n          description: Returns a boolean und the ID of the asset on the top level.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SuccessResponse\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n  /find:\n    post:\n      summary: Query for assets only with filters\n      operationId: find_asset_filter_only\n      tags:\n        - asset\n      requestBody:\n        $ref: \"#/paths/~1find~1%7BsearchString%7D/post/requestBody\"\n      responses:\n        '200':\n          $ref: \"#/paths/~1find~1%7BsearchString%7D/post/responses/200\"\n        default:\n          $ref: \"#/paths/~1find~1%7BsearchString%7D/post/responses/default\"\n  /find/{query_string}:\n    post:\n      summary: Query for assets with a query_string and filters\n      operationId: find_asset\n      tags:\n        - asset\n      parameters:\n        - name: query_string\n          in: path\n          required: true\n          description: The query string may be empty\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SearchFilters\"\n      responses:\n        '200':\n          description: Returns the IDs of the requested assets.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/QueryResponse\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n  /get_template:\n    get:\n      summary: Load template definitions for AssetType objects.\n      operationId: get_template\n      tags:\n        - asset\n      parameters:\n        - name: type_name\n          in: query\n          required: true\n          description: The type_name of the AssetType\n          schema:\n            type: string\n        - name: template_type\n          in: query\n          required: true\n          description: The template_type of the template in the AssetType\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns the template as a string.\n          content:\n            text/plain:\n              schema:\n                type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n  /get_schema:\n    get:\n      summary: Load schema for AssetType objects.\n      operationId: get_template\n      tags:\n        - asset\n      parameters:\n        - name: type_name\n          in: query\n          required: false\n          description: The type_name of the AssetType\n          schema:\n            type: string\n        - name: type_id\n          in: query\n          required: false\n          description: The ID of the AssetType\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Returns the schema as JSON string.\n          content:\n            application/json:\n              schema:\n                type: \"#/components/schemas/AssetTypeSchema\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n  /get_types_for_parent:\n    get:\n      summary: Load type names of all child AssetType objects of the given AssetType.\n      operationId: get_types_for_parent\n      tags:\n        - asset\n      parameters:\n        - name: parent_type_name\n          in: query\n          required: false\n          description: The type_name of the parent AssetType\n          schema:\n            type: string\n        - name: parent_type_id\n          in: query\n          required: false\n          description: The ID of the parent AssetType\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Returns the list of type names.\n          content:\n            text/plain:\n              schema:\n                $ref: \"#/components/schemas/TypeNameList\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n  /update_caches:\n    get:\n      summary: Build all content caches and raw templates (for searching) for all assets\n      operationId: update_caches\n      tags:\n        - asset\n      responses:\n        '200':\n          description: Returns statistics on the workload\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UpdateStatisticsResponse\"\n  /openapi.json:\n    get:\n      summary: Load template definitions for AssetType objects.\n      operationId: openapi.json\n      tags:\n        - asset\n      responses:\n        '200':\n          description: Returns the OpenAPI definition as JSON.\n          content:\n            application/json:\n              schema:\n                type: string\n  /live:\n    get:\n      summary: Ask the django app if everything including the database is up and running.\n      operationId: live\n      tags:\n        - asset\n      responses:\n        '200':\n          description: AssetStorm is up and running\n          content:\n            text/plain:\n              schema:\n                type: string\n        '400':\n          description: The database is not online (yet)\n          content:\n            text/plain:\n              schema:\n                type: string\n  /delete_all_assets:\n    delete:\n      summary: Delete all content from the database. Use this with care! The view exists for automatic tests.\n      operationId: delete_all_assets\n      tags:\n        - asset\n      responses:\n        '200':\n          description: Successfully deleted all assets and base types like Text, URIElement and Enum\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DeleteAllResponse\"\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\ncomponents:\n  schemas:\n    ErrorResponse:\n      type: object\n      required:\n        - Error\n        - Asset\n      properties:\n        Error:\n          type: string\n        Asset:\n          type: object\n    SuccessResponse:\n      type: object\n      required:\n        - success\n        - id\n      properties:\n        success:\n          type: boolean\n        id:\n          type: string\n          format: uuid\n    SearchFilters:\n      type: object\n    QueryResponse:\n      type: object\n      required:\n        - success\n        - foundAssetIDs\n      properties:\n        success:\n          type: boolean\n        foundAssetIDs:\n          type: array\n          items:\n            type: string\n            format: uuid\n    TypeNameList:\n      type: array\n      items:\n        type: string\n    AssetTypeSchema:\n      type: object\n      properties:\n        type:\n          type: string\n      additionalProperties:\n        oneOf:\n          - type: integer\n          - type: array\n            items:\n              type: integer\n    AssetTree:\n      type: object\n      anyOf:\n        - required:\n            - id\n        - required:\n            - type\n      properties:\n        id:\n          type: string\n          format: uuid\n        type:\n          type: string\n      additionalProperties:\n        oneOf:\n          - type: string\n          - $ref: \"#/components/schemas/AssetTree\"\n          - type: array\n            items:\n              type: string\n          - type: array\n            items:\n              $ref: \"#/components/schemas/AssetTree\"\n    UpdateStatisticsResponse:\n      type: object\n      properties:\n        Success:\n          type: boolean\n        rebuilt_content_caches:\n          type: integer\n        rendered_raw_templates:\n          type: integer\n    DeleteAllResponse:\n      type: object\n      properties:\n        Asset:\n          type: integer\n        Asset_in_detail:\n          type: object\n          format: string\n        Text:\n          type: integer\n        Text_in_detail:\n          type: object\n          format: string\n        URIElement:\n          type: integer\n        URIElement_in_detail:\n          type: object\n          format: string\n        Enum:\n          type: integer\n        Enum_in_detail:\n          type: object\n          format: string\n"
		}
	},
	"Error": "parse: paths: /find: post: find_asset_filter_only: requestBody: resolve \"#/paths/~1find~1%7BsearchString%7D/post/requestBody\" reference: invalid requestBody reference: \"#/paths/~1find~1%7BsearchString%7D/post/requestBody\""
}