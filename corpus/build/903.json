{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Apicurio/apicurio-registry"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "app/etc/openapi.yaml",
			"content": "###############################################################################\n#\n# Licensed Materials - Property of IBM\n#\n# 5737-H33\n#\n# (C) Copyright IBM Corp. 2019  All Rights Reserved.\n#\n# US Government Users Restricted Rights - Use, duplication or\n# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.\n#\n###############################################################################\nopenapi: 3.0.0\ninfo:\n  title: \"Event Streams Schema Registry\"\n  version: \"0.0.1\"\ncomponents:\n  schemas:\n    SchemaName:\n      description: |-\n        User-provided name for a schema. Not necessarily unique.\n      type: string\n      minLength: 1\n      maxLength: 100\n\n    SchemaDate:\n      description: |-\n        Timestamp for when a schema version.\n\n        When used for an overall schema, this will be the timestamp for when the\n        most recent version was created.\n      type: string\n      format: date-time\n      example: \"2019-01-17T11:39:05.386Z\"\n\n    SchemaVersion:\n      description: |-\n        Definition of a version of a schema.\n      type: object\n      required:\n        - id\n        - name\n        - date\n        - state\n        - enabled\n      properties:\n        id:\n          type: integer\n          minimum: 1\n          description: |-\n            Server-managed unique ID for the version.\n\n            Guaranteed to be unique within this schema only (different schemas will use\n            the same version IDs).\n          example: 1\n        name:\n          type: string\n          maxLength: 50\n          example: v1.0.0\n          description: |-\n            Client-provided description of a version.\n\n            Enforced to be unique within this schema only (different schemas may use\n            the same version names).\n        date:\n          $ref: '#/components/schemas/SchemaDate'\n        state:\n          $ref: '#/components/schemas/SchemaState'\n        enabled:\n          type: boolean\n          description: |-\n            Set to false if the version of the schema is disabled.\n\n    SchemaState:\n      description: The state of a schema, or an individual version of a schema\n      required:\n        - state\n      properties:\n        state:\n          type: string\n          enum:\n            - deprecated\n            - active\n          description: |-\n            If the schema state is 'deprecated', all the schema version states are 'deprecated'.\n        comment:\n          type: string\n          maxLength: 300\n          description: |-\n            User-provided string to explain why a schema is deprecated.\n            Ignored if the state is 'active'.\n            If the schema state is 'deprecated', the schema version state comment will match\n            the schema state comment, unless a specific state comment is set for the schema version.\n          example: |-\n            We want to stop using integer IDs in future, so please use the newer\n            versions of the schema which have switched to string UUID ids.\n\n    SchemaSummary:\n      description: |-\n        A high-level summary of the metadata for an overall schema, used in response\n        payloads.\n      required:\n        - id\n        - name\n        - state\n        - enabled\n      properties:\n        id:\n          type: string\n          description: Lower-case URL-encoded version of the schema name.\n        name:\n          $ref: '#/components/schemas/SchemaName'\n        state:\n          $ref: '#/components/schemas/SchemaState'\n        enabled:\n          type: boolean\n          description: |-\n            Set to false if the schema is disabled. If the schema is disabled, all\n            the schema versions are disabled.\n\n    SchemaListItem:\n      description: |-\n        Summary of the overall schema with the details about most recent version.\n\n        Intended to be useful in responses with lists of schemas without needing to\n        make additional requests for each individual schema.\n      allOf:\n        - $ref: '#/components/schemas/SchemaSummary'\n        - type: object\n          required:\n            - latest\n          properties:\n            latest:\n              $ref: '#/components/schemas/SchemaVersion'\n\n    SchemaInfo:\n      description: |-\n        All metadata available for a single schema, including the metadata for every known version of the schema.\n        It is a combination of SchemaSummary, and all of the schema versions metadata.\n      allOf:\n        - $ref: '#/components/schemas/SchemaSummary'\n        - type: object\n          required:\n            - versions\n          properties:\n            versions:\n              type: array\n              items:\n                $ref: '#/components/schemas/SchemaVersion'\n\n    Schema:\n      description: |-\n        All of the data available for a single version of a single schema, including the Avro schema definition.\n      required:\n        - id\n        - version\n        - name\n        - state\n        - enabled\n        - definition\n      properties:\n        id:\n          type: string\n          description: Lower-case URL-encoded version of the schema name.\n        version:\n          $ref: '#/components/schemas/SchemaVersion'\n        name:\n          $ref: '#/components/schemas/SchemaName'\n        state:\n          $ref: '#/components/schemas/SchemaState'\n        enabled:\n          type: boolean\n          description: |-\n            Set to false if the overall schema is disabled.\n        definition:\n          $ref: '#/components/schemas/SchemaDefinition'\n\n    SchemaDefinition:\n      description: Avro schema definition\n      type: string\n      example: |-\n        {\n          \"type\": \"Record\",\n          \"name\": \"People\",\n          \"fields\": [{\n            \"name\": \"id\",\n            \"type\": \"int\"\n          }, {\n            \"name\": \"name\",\n            \"type\": \"string\"\n          }, {\n            \"name\": \"salary\",\n            \"type\": \"int\"\n          }, {\n            \"name\": \"age\",\n            \"type\": \"int\"\n          }]\n        }\n    NewSchemaVersion:\n      description: |-\n        Request payload for uploading new version of an existing schema.\n      required:\n        - version\n        - definition\n      properties:\n        version:\n          type: string\n          description: The name to give this version of the schema\n          example: v1.0.0\n        definition:\n          $ref: '#/components/schemas/SchemaDefinition'\n        versionid:\n          type: integer\n          minimum: 1\n          description: |-\n            Requested unique ID for the version.\n\n            Must be unique within this schema only (different schemas will use\n            the same version IDs).\n          example: 1\n        versionstate:\n          $ref: '#/components/schemas/SchemaState'\n        versionenabled:\n          type: boolean\n          description: |-\n            Set to false if the version of the schema is disabled.\n\n\n    NewSchema:\n      description: |-\n        Request payload for uploading new schemas.\n        allOf:\n          - $ref: '#/components/schemas/NewSchemaVersion'\n          - type: object\n            required:\n              - name\n            properties:\n              name:\n                $ref: '#/components/schemas/SchemaName'\n              state:\n                $ref: '#/components/schemas/SchemaState'\n              enabled:\n                type: boolean\n                description: |-\n                  Set to false if the schema is disabled. If the schema is disabled, all\n                  the schema versions are disabled.\n\n\n    VersionNumber:\n      description: Used when referring to a schema version in a request.\n      anyOf:\n        - type: integer\n          minimum: 1\n          description: Refers to a specific version\n\n\n    SchemaModificationPatch:\n      description: |-\n        A request payload for use in PATCH requests to modify a schema.\n      type: array\n      items:\n        anyOf:\n          - $ref: '#/components/schemas/StateModification'\n          - $ref: '#/components/schemas/EnabledModification'\n\n    SchemaVersionModificationPatch:\n      description: |-\n        A request payload for use in PATCH requests to modify an individual schema version.\n      type: array\n      items:\n        anyOf:\n          - $ref: '#/components/schemas/StateModification'\n          - $ref: '#/components/schemas/EnabledModification'\n\n\n    StateModification:\n      description: A request to modify the state (enabled/deprecated) of a schema or schema version.\n      type: object\n      required:\n        - op\n        - path\n        - value\n      properties:\n        op:\n          type: string\n          enum:\n            - replace\n        path:\n          type: string\n          enum:\n            - '/state'\n        value:\n          $ref: '#/components/schemas/SchemaState'\n\n    EnabledModification:\n      description: |-\n        A request to modify the enabled flag for a schema or schema version.\n\n      type: object\n      required:\n        - op\n        - path\n        - value\n      properties:\n        op:\n          type: string\n          enum:\n            - replace\n        path:\n          type: string\n          enum:\n            - '/enabled'\n        value:\n          type: boolean\n\n\n    Error:\n      description: Response payload for returning an error\n      type: object\n      properties:\n        error_code:\n          type: number\n          description: |-\n            The HTTP status code of the response.\n            Useful when the client is using a framework that doesn't allow direct access to the HTTP response.\n        message:\n          type: string\n      required:\n        - message\n\n\n  responses:\n    Ok:\n      description: Healthy\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              ok:\n                type: boolean\n                description: This will only ever be true. If the server is not healthy, an Error will be returned instead.\n            required:\n              - ok\n    NotFound:\n      description: Resource not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    InvalidSchema:\n      description: Invalid schema definition or request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    UnauthorizedError:\n      description: API key missing or invalid\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    IdenticalSchemaError:\n      description: |-\n        This is returned when a client request is attempting to provide a new version of an existing schema.\n        It will be returned when either the schema definition is identical to current latest version, or the provided version name is already in use by an existing version of this schema.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    SchemaVersionIDConflictError:\n      description: |-\n        This is returned when a client request is attempting to provide a new version of a schema.\n        It will be returned when the provided version ID is already in use by an existing version of this schema.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-Auth-Token\nsecurity:\n  - ApiKeyAuth: []\npaths:\n  /ready:\n    get:\n      summary: Checks if the server is ready to receive requests.\n      description: |-\n        Intended for use with a Kubernetes readiness probe.\n\n        It will verify that the schema data directory is still available, so should\n        fail if there is a problem with the file system.\n      responses:\n        '200':\n          description: Server is running and the schema store is available\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Ok'\n        '500':\n          description: Server is running but there is a problem\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /live:\n    get:\n      summary: Checks if the server is running.\n      description: |-\n        Intended for use with a Kubernetes liveness probe.\n\n        It doesn't do anything other than return a static OK response, as a verification\n        that the server is reachable and responsive.\n      responses:\n        '200':\n          description: Server is running\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Ok'\n  /api/schemas:\n    post:\n      summary: Create a new schema\n      parameters:\n        - name: verify\n          in: query\n          required: false\n          description: If true, the provided schema definition is validated only, and not stored.\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewSchema'\n      responses:\n        '201':\n          description: Created. Returned for successful requests when verify=false\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaInfo'\n        '200':\n          description: Verified. Returned for successful requests when verify=true\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaDefinition'\n        '400':\n          $ref: '#/components/responses/InvalidSchema'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n    get:\n      summary: List of schemas\n      parameters:\n        - name: page\n          in: query\n          schema:\n            type: integer\n            default: 0\n            minimum: 0\n          required: false\n          description: Pagination parameter\n        - name: per_page\n          in: query\n          schema:\n            type: integer\n            default: 100\n            minimum: 1\n          required: false\n          description: Pagination parameter\n      responses:\n        '200':\n          description: 'Schemas'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SchemaListItem'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  /api/schemas/{schemaid}:\n    parameters:\n      - name: schemaid\n        in: path\n        required: true\n        schema:\n          type: string\n          description: Lower-case URL-encoded version of the schema name.\n    get:\n      summary: Metadata about a single schema\n      responses:\n        '200':\n          description: Schema info\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaInfo'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    patch:\n      summary: Modify a whole schema\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SchemaModificationPatch'\n      responses:\n        '200':\n          description: Schema modified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaInfo'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    delete:\n      summary: Delete an entire schema\n      responses:\n        '204':\n          description: Deleted\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n  /api/schemas/{schemaid}/versions:\n    parameters:\n      - name: schemaid\n        in: path\n        required: true\n        schema:\n          type: string\n          description: Lower-case URL-encoded version of the schema name.\n    post:\n      summary: Upload a new version of an existing schema\n      parameters:\n        - name: verify\n          in: query\n          required: false\n          description: If true, the provided schema definition is validated only, and not stored.\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewSchemaVersion'\n      responses:\n        '201':\n          description: Created. Returned for successful requests when verify=false\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaInfo'\n        '200':\n          description: Verified. Returned for successful requests when verify=true\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaDefinition'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '409':\n          $ref: '#/components/responses/IdenticalSchemaError'\n\n  /api/schemas/{schemaid}/versions/{versionnum}:\n    parameters:\n      - name: schemaid\n        in: path\n        required: true\n        schema:\n          type: string\n          description: Lower-case URL-encoded version of the schema name.\n    get:\n      summary: A single version of a single schema\n      parameters:\n        - name: versionnum\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/VersionNumber'\n      responses:\n        '200':\n          description: 'Schema info'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Schema'\n            application/vnd.apache.avro+json:\n              schema:\n                $ref: '#/components/schemas/SchemaDefinition'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n\n    patch:\n      summary: Modify a single version of a schema\n      parameters:\n        - name: versionnum\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SchemaVersionModificationPatch'\n      responses:\n        '200':\n          description: Schema modified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaInfo'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    delete:\n      summary: Delete a single version of a schema\n      parameters:\n        - name: versionnum\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Deleted\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n"
		}
	},
	"Error": "parse: paths: /ready: get: operation \"\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/responses/Ok\": resolve reference \"#/components/responses/Ok\": invalid schema reference \"#/components/responses/Ok\""
}