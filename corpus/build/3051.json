{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hyperledger/grid"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "daemon/openapi.yaml",
			"content": "# Copyright 2017 Intel Corporation\n# Copyright 2019 Bitwise IO, Inc.\n# Copyright 2020 Cargill Incorporated\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nopenapi: 3.0.0\ninfo:\n  version: 0.4.1\n  title: Grid Daemon REST API\n  description: A REST API providing HTTP/JSON interface to Hyperledger Grid.\n  contact:\n    name: Hyperledger Grid community\n    url: https://grid.hyperledger.org/community/\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0\nexternalDocs:\n  description: |\n    For more information about how to create Sabre batches, please see the\n    Sabre documentation.\n  url: https://sawtooth.hyperledger.org/docs/sabre/releases/latest/\npaths:\n  # Transactions\n  /batches:\n    post:\n      tags:\n        - Transaction\n      summary: Submits a list of transaction batches to the distributed ledger\n      externalDocs:\n        description:\n          For more information about the Batch data structure, see the Sawtooth\n          architecture guide\n        url: https://sawtooth.hyperledger.org/docs/core/releases/latest/architecture/transactions_and_batches.html\n      description: |\n        This endpoint can be used to submit batches to the underlying\n        distributed ledger. The operation called by this endpoint will depend on\n        which distributed ledger is supporting this deployment of Grid.\n        Regardless of the underlying ledger, the body of this request must be a\n        valid list of Sabre batches.\n\n        If the Grid Daemon is running against a Sawtooth distributed ledger,\n        then the batches are forwarded to the `/batches` endpoint of the\n        Sawtooth REST API.\n\n        If the Grid Daemon is running against Splinter, then the `service_id`\n        query parameter is required for this request. The Grid Daemon will use\n        the service ID to forward the transaction to an endpoint on the Splinter\n        Daemon for the Scabbard service corresponding to the provided service\n        ID.\n\n        The API will return immediately with a status of `202`. There will be\n        no `data` object, only a `link` to a `/batch_statuses` endpoint to be\n        polled to check the status of submitted batches.\n      operationId: post_batches\n      parameters:\n        - $ref: \"#/components/parameters/service_id\"\n        - $ref: \"#/components/parameters/wait\"\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              $ref: \"#/components/schemas/BatchList\"\n        description: A binary encoded protobuf BatchList\n        required: true\n      responses:\n        \"202\":\n          description: |\n            The batch list was submitted for validation but have not yet been\n            evaluated. After the server receives the batches for validation, it\n            will attempt to execute the transactions contained in each batch in\n            the batch list. If each of the transactions in a batch are\n            successful, the distributed ledger's state will be updated and Grid\n            will receive state delta events from the distributed ledger. The\n            Grid Daemon processes these events and updates the Grid database\n            accordingly.\n\n            This means that there is a delay between when transactions are\n            submitted and when the new data is actually available to fetch using\n            the Grid REST API GET endpoints. This delay can range from a few\n            milliseconds to several minutes depending on the underlying ledger.\n            Developers should take this delay into account when designing apps\n            on top of Grid.\n          content:\n            application/json:\n              schema:\n                properties:\n                  link:\n                    $ref: \"#/components/schemas/BatchStatusLink\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /batch_statuses:\n    get:\n      tags:\n        - Transaction\n      summary: Fetches the committed statuses for a set of batches\n      description: |\n        Fetches an array of objects with a status and id for each batch\n        requested. There are four possible statuses with string values\n        `'COMMITTED'`, `'INVALID'`, `'PENDING'`, and `'UNKNOWN'`.\n\n        The batch(es) you want to check can be specified using the `id` filter\n        parameter. If a `wait` time is specified in the URL, the API will wait\n        to respond until all batches are committed, or the time in seconds has\n        elapsed. If the value of `wait` is not set (i.e., `?wait\u0026id=...`), or\n        it is set to any non-integer value other than `false`, the wait time\n        will be just under the API's specified timeout (usually 300).\n\n        Note that because this route does not return full resources, the\n        response will not be paginated, and there will be no `head` or\n        `paging` properties.\n      operationId: get_batch_statuses_by_id\n      parameters:\n        - name: id\n          in: query\n          description: A comma-separated list of batch IDs\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/wait\"\n        - $ref: \"#/components/parameters/service_id\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  properties:\n                    id:\n                      type: string\n                      example: 89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c\n                    status:\n                      type: string\n                      example: INVALID\n                      enum:\n                        - COMMITTED\n                        - INVALID\n                        - PENDING\n                        - UNKNOWN\n                    invalid_transactions:\n                      type: array\n                      items:\n                        properties:\n                          id:\n                            type: string\n                            example: 540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a\n                          message:\n                            type: string\n                            example: |\n                              Verb is \\\"inc\\\" but name \\\"foo\\\" not in state\n                          extended_data:\n                            type: string\n                            format: byte\n                            example: ZXJyb3IgZGF0YQ==\n                          link:\n                            $ref: \"#/components/schemas/BatchStatusLink\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n\n  # Location\n  /location:\n    get:\n      tags:\n        - Location\n      summary: Lists all locations\n      operationId: list_locations\n      parameters:\n        - $ref: \"#/components/parameters/service_id\"\n        - $ref: \"#/components/parameters/page_offset\"\n        - $ref: \"#/components/parameters/page_limit\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON list of the\n            requested locations.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LocationList\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /location/{location_id}:\n    get:\n      tags:\n        - Location\n      summary: Fetches a single location with the given ID\n      operationId: get_location\n      parameters:\n        - name: location_id\n          in: path\n          description: ID of the location to fetch\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON object\n            representing the location.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Location\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/404NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n\n  # Pike\n  /agent:\n    get:\n      tags:\n        - Pike\n      summary: Lists all agents\n      operationId: list_agents\n      parameters:\n        - $ref: \"#/components/parameters/service_id\"\n        - $ref: \"#/components/parameters/page_offset\"\n        - $ref: \"#/components/parameters/page_limit\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON list of the\n            requested agents.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AgentList\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /agent/{public_key}:\n    get:\n      tags:\n        - Pike\n      summary: Fetches an agent with the given public key\n      operationId: get_agent\n      parameters:\n        - name: public_key\n          in: path\n          description: Public key of the agent to fetch\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON object\n            representing the agent.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Agent\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/404NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /organization:\n    get:\n      tags:\n        - Pike\n      summary: Lists all organizations\n      operationId: list_organizations\n      parameters:\n        - $ref: \"#/components/parameters/service_id\"\n        - $ref: \"#/components/parameters/page_offset\"\n        - $ref: \"#/components/parameters/page_limit\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON list of the\n            requested organizations.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OrganizationList\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /organization/{id}:\n    get:\n      tags:\n        - Pike\n      summary: Fetches a single organization with the given ID\n      operationId: get_organization\n      parameters:\n        - name: id\n          in: path\n          description: ID of the organization to fetch\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON object\n            representing the organization.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Organization\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/404NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /role/{org_id}:\n    get:\n      tags:\n        - Pike\n      summary: Lists all roles for a single organization\n      operationId: list_roles_for_organization\n      parameters:\n        - name: org_id\n          in: path\n          description: Org ID of the organization to list roles for\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n        - $ref: \"#/components/parameters/page_offset\"\n        - $ref: \"#/components/parameters/page_limit\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON list of the roles for the\n            requested organization.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RoleList\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /role/{org_id}/{name}:\n    get:\n      tags:\n        - Pike\n      summary: Fetches a role for a single organization\n      operationId: get_role\n      parameters:\n        - name: org_id\n          in: path\n          description: Org ID of the organization that the role belongs to\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name of the role to fetch\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON object representing the role\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Role\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n\n  # Product\n  /product:\n    get:\n      tags:\n        - Product\n      summary: Lists all products\n      operationId: list_products\n      parameters:\n        - $ref: \"#/components/parameters/service_id\"\n        - $ref: \"#/components/parameters/page_offset\"\n        - $ref: \"#/components/parameters/page_limit\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON list of the\n            requested products.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProductList\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /product/{product_id}:\n    get:\n      tags:\n        - Product\n      summary: Fetches a single product with the given ID\n      operationId: get_product\n      parameters:\n        - name: product_id\n          in: path\n          description: ID of the product to fetch\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON object\n            representing the product.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Product\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/404NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  # Purchase Order\n  /purchase_order:\n    get:\n      tags:\n        - Purchase Order\n      summary: Lists all purchase orders\n      operationId: list_purchase_orders\n      parameters:\n        - $ref: \"#/components/parameters/service_id\"\n        - $ref: \"#/components/parameters/page_offset\"\n        - $ref: \"#/components/parameters/page_limit\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON list of the\n            requested purchase orders.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PurchaseOrderList\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /purchase_order/{uid}:\n    get:\n      tags:\n        - Purchase Order\n      summary: Fetches a single purchase order with the given UID\n      parameters:\n        - name: uid\n          in: path\n          description: ID of the PO to fetch\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON object\n            representing the purchase order.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PurchaseOrder\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/404NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /purchase_order/{uid}/version:\n    get:\n      tags:\n        - Purchase Order\n      summary: Lists all purchase order versions for a purchase order\n      operationId: list_purchase_order_versions\n      parameters:\n        - name: uid\n          in: path\n          description: ID of the PO to fetch versions for\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n        - $ref: \"#/components/parameters/page_offset\"\n        - $ref: \"#/components/parameters/page_limit\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON object\n            representing the purchase order versions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PurchaseOrderVersionList\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/404NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /purchase_order/{uid}/version/{version_id}:\n    get:\n      tags:\n        - Purchase Order\n      summary: Fetches a single purchase order version with the given ID\n      operationId: get_purchase_order_version\n      parameters:\n        - name: version_id\n          in: path\n          description: ID of the version to fetch\n          required: true\n          schema:\n            type: string\n        - name: uid\n          in: path\n          description: ID of the PO to fetch\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n        - $ref: \"#/components/parameters/page_offset\"\n        - $ref: \"#/components/parameters/page_limit\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON object\n            representing the purchase order version.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PurchaseOrderVersionList\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/404NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /purchase_order/{uid}/version/{version_id}/revision:\n    get:\n      tags:\n        - Purchase Order\n      summary: Lists all purchase order revisions for a purchase order version\n      operationId: list_purchase_order_version_revisions\n      parameters:\n        - name: version_id\n          in: path\n          description: ID of the version to fetch\n          required: true\n          schema:\n            type: string\n        - name: uid\n          in: path\n          description: ID of the PO to fetch versions for\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n        - $ref: \"#/components/parameters/page_offset\"\n        - $ref: \"#/components/parameters/page_limit\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON object\n            representing the purchase order version revisions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PurchaseOrderRevisionList\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/404NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /purchase_order/{uid}/version/{version_id}/revision/{revision_id}:\n    get:\n      tags:\n        - Purchase Order\n      summary: |\n        Fetches a single purchase order version revision with the given revision\n        ID\n      operationId: get_purchase_order_revision\n      parameters:\n        - name: revision_id\n          in: path\n          description: ID of the revision to fetch\n          required: true\n          schema:\n            type: number\n        - name: version_id\n          in: path\n          description: ID of the version to fetch\n          required: true\n          schema:\n            type: string\n        - name: uid\n          in: path\n          description: ID of the PO to fetch\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n        - $ref: \"#/components/parameters/page_offset\"\n        - $ref: \"#/components/parameters/page_limit\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON object\n            representing the purchase order version.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PurchaseOrderRevision\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/404NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /purchase_order/{uid}/version/{version_id}/revision/latest:\n    get:\n      tags:\n        - Purchase Order\n      summary: |\n        Fetches a single purchase order version revision with the latest revision\n        ID for the given version\n      operationId: get_latest_revision_id\n      parameters:\n        - name: version_id\n          in: path\n          description: ID of the version to fetch\n          required: true\n          schema:\n            type: string\n        - name: uid\n          in: path\n          description: ID of the PO to fetch\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n        - $ref: \"#/components/parameters/page_offset\"\n        - $ref: \"#/components/parameters/page_limit\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON object\n            representing the purchase order revision ID.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PurchaseOrderRevision\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/404NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n\n  # Schema\n  /schema:\n    get:\n      tags:\n        - Schema\n      summary: Lists all schemas\n      operationId: list_grid_schemas\n      parameters:\n        - $ref: \"#/components/parameters/service_id\"\n        - $ref: \"#/components/parameters/page_offset\"\n        - $ref: \"#/components/parameters/page_limit\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON list of the\n            requested schemas.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SchemaList\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /schema/{schema_name}:\n    get:\n      tags:\n        - Schema\n      summary: Fetches a single schema with the given name\n      operationId: get_schema_by_name\n      parameters:\n        - name: schema_name\n          in: path\n          description: Name of the schema to fetch\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON object\n            representing the schema.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Schema\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/404NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n\n  # Track and Trace\n  /record:\n    get:\n      tags:\n        - Track and Trace\n      summary: |\n        Fetches a list of records, including lists of all updates made to the\n        owner and custodian\n      operationId: list_records\n      parameters:\n        - $ref: \"#/components/parameters/service_id\"\n        - $ref: \"#/components/parameters/page_offset\"\n        - $ref: \"#/components/parameters/page_limit\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON list of the\n            requested records.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RecordList\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /record/{record_id}:\n    get:\n      tags:\n        - Track and Trace\n      summary: Fetches a single record with the given ID\n      description: Fetches a single record with the given record ID\n      operationId: get_record\n      parameters:\n        - name: record_id\n          in: path\n          description: ID of the record to fetch\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n      responses:\n        \"200\":\n          description: |\n            Successful request. The response will include a JSON object\n            representing the record.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Record\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/404NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n  /record/{record_id}/property/{property_name}:\n    get:\n      tags:\n        - Track and Trace\n      summary: |\n        Fetches a property with the given name from the record with the\n        specified ID\n      operationId: fetch_property\n      parameters:\n        - name: record_id\n          in: path\n          description: ID of the record to fetch a property from\n          required: true\n          schema:\n            type: string\n        - name: property_name\n          in: path\n          description: Name of the property to fetch\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/service_id\"\n      responses:\n        \"200\":\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Property\"\n        \"400\":\n          $ref: \"#/components/responses/400BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/404NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/500ServerError\"\n        \"503\":\n          $ref: \"#/components/responses/503ServiceUnavailable\"\n\ncomponents:\n  schemas:\n    # Location models\n    LocationList:\n      properties:\n        data:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Location\"\n        paging:\n          $ref: \"#/components/schemas/Paging\"\n    Location:\n      type: object\n      properties:\n        location_id:\n          type: string\n          example: 0099474000005\n        location_namespace:\n          $ref: \"#/components/schemas/NamespaceEnum\"\n        owner:\n          type: string\n          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612\n        properties:\n          type: array\n          items:\n            $ref: \"#/components/schemas/PropertyValue\"\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n        last_updated:\n          $ref: \"#/components/schemas/Timestamp\"\n\n    # Pike models\n    AgentList:\n      properties:\n        data:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Agent\"\n        paging:\n          $ref: \"#/components/schemas/Paging\"\n    Agent:\n      properties:\n        public_key:\n          type: string\n          example: 038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00\n        org_id:\n          type: string\n          example: 013600\n        active:\n          type: boolean\n          example: \"true\"\n        roles:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Role\"\n        metadata:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Metadata\"\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n        last_updated:\n          $ref: \"#/components/schemas/Timestamp\"\n    OrganizationList:\n      properties:\n        data:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Organization\"\n        paging:\n          $ref: \"#/components/schemas/Paging\"\n    Organization:\n      type: object\n      properties:\n        id:\n          type: string\n          example: philips001\n        name:\n          type: string\n          example: Philips\n        locations:\n          type: array\n          items:\n            type: string\n            example: 0012276598822\n        alternate_ids:\n          type: array\n          items:\n            type: string\n            example: test:test\n        metadata:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Metadata\"\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n        last_updated:\n          $ref: \"#/components/schemas/Timestamp\"\n    RoleList:\n      properties:\n        data:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Role\"\n        paging:\n          $ref: \"#/components/schemas/Paging\"\n    Role:\n      type: object\n      properties:\n        name:\n          type: string\n          example: alpha.Drivers\n        org_id:\n          type: string\n          example: 314156\n        permissions:\n          type: array\n          items:\n            type: string\n            example: tank::can_drive\n        allowed_organizations:\n          type: array\n          items:\n            type: string\n            example: beta\n        super_roles:\n          type: array\n          items:\n            type: string\n            example: beta.Drivers\n        inherit_from:\n          type: array\n          items:\n            type: string\n            example: beta.Tank\n        last_updated:\n          $ref: \"#/components/schemas/Timestamp\"\n\n    # Product models\n    ProductList:\n      properties:\n        data:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Product\"\n        paging:\n          $ref: \"#/components/schemas/Paging\"\n    Product:\n      type: object\n      properties:\n        product_id:\n          type: string\n          example: 00122765988220\n        product_address:\n          type: string\n          example: 621dee0201000000000000000000000000000000000000000000000012276598822000\n        product_namespace:\n          $ref: \"#/components/schemas/NamespaceEnum\"\n        owner:\n          type: string\n          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612\n        properties:\n          type: array\n          items:\n            $ref: \"#/components/schemas/PropertyValue\"\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n        last_updated:\n          $ref: \"#/components/schemas/Timestamp\"\n\n    # Purchase Order models\n    PurchaseOrder:\n      type: object\n      properties:\n        uid:\n          type: string\n          example: 0099474000005\n        workflow_state:\n          type: string\n          example: ACCEPTED\n        accepted_version_id:\n          type: string\n          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612\n        version_ids:\n          type: array\n          items:\n            type: string\n        is_closed:\n          type: boolean\n          example: false\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n    PurchaseOrderList:\n      properties:\n        data:\n          type: array\n          items:\n            $ref: \"#/components/schemas/PurchaseOrder\"\n        paging:\n          $ref: \"#/components/schemas/Paging\"\n    PurchaseOrderVersion:\n      properties:\n        version_id:\n          type: string\n          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612\n        workflow_state:\n          type: string\n          example: ISSUED\n        is_draft:\n          type: boolean\n          example: true\n        current_revision_id:\n          type: number\n          example: 1\n        revisions:\n          type: array\n          items:\n            type: string\n            example: daae9b58726f4c9364b6cae2fa7c9c24\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n    PurchaseOrderVersionList:\n      properties:\n        data:\n          type: array\n          items:\n            $ref: \"#/components/schemas/PurchaseOrderVersion\"\n        paging:\n          $ref: \"#/components/schemas/Paging\"\n    PurchaseOrderRevision:\n      properties:\n        revision_id:\n          type: number\n          example: 1\n        submitter:\n          type: string\n          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612\n        created_at:\n          $ref: \"#/components/schemas/Timestamp\"\n        order_xml_v3_4:\n          type: string\n          example: \"\u003cxml content\u003e\"\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n    PurchaseOrderRevisionList:\n      properties:\n        data:\n          type: array\n          items:\n            $ref: \"#/components/schemas/PurchaseOrderRevision\"\n        paging:\n          $ref: \"#/components/schemas/Paging\"\n\n    # Schema models\n    SchemaList:\n      properties:\n        data:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Schema\"\n        paging:\n          $ref: \"#/components/schemas/Paging\"\n    Schema:\n      properties:\n        name:\n          type: string\n          example: Lightbulb\n        description:\n          type: string\n          example: Example Lightbulb schema\n        owner:\n          type: string\n          example: philips001\n        properties:\n          type: array\n          items:\n            $ref: \"#/components/schemas/PropertyDefinition\"\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n        last_updated:\n          $ref: \"#/components/schemas/Timestamp\"\n    PropertyDefinition:\n      properties:\n        name:\n          type: string\n          example: size\n        data_type:\n          $ref: \"#/components/schemas/DataTypeEnum\"\n        description:\n          type: string\n          example: Lightbulb radius, in millimeters\n        required:\n          type: boolean\n          example: true\n        number_exponent:\n          type: integer\n          format: int32\n          example: -6\n        enum_options:\n          type: array\n          items:\n            type: string\n          example:\n            - filament\n            - CF\n            - LED\n        struct_properties:\n          type: array\n          items:\n            $ref: \"#/components/schemas/PropertyDefinition\"\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n    DataTypeEnum:\n      type: string\n      enum:\n        - BYTES\n        - BOOLEAN\n        - NUMBER\n        - STRING\n        - ENUM\n        - STRUCT\n        - LOCATION\n    PropertyValue:\n      type: object\n      properties:\n        name:\n          type: string\n          example: brand_name\n        data_type:\n          type: string\n          example: boolean\n        bytes_value:\n          $ref: \"#/components/schemas/BytesValue\"\n        boolean_value:\n          type: boolean\n          example: false\n        number_value:\n          type: integer\n          format: int64\n          example: 0\n        string_value:\n          type: string\n          example: mybrand\n        enum_value:\n          type: integer\n          format: int32\n          example: 0\n        struct_values:\n          $ref: \"#/components/schemas/StructValue\"\n        lat_long_value:\n          $ref: \"#/components/schemas/LatLong\"\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n    BytesValue:\n      type: string\n      format: byte\n      example: \"AQIDBA==\"\n    LatLong:\n      type: object\n      properties:\n        latitude:\n          type: integer\n          example: 46786299\n        longitude:\n          type: integer\n          example: -92051336\n    StructPropertyValue:\n      type: object\n      properties:\n        name:\n          type: string\n          example: location\n        type:\n          $ref: \"#/components/schemas/DataTypeEnum\"\n        value:\n          oneOf:\n            - type: string\n            - type: boolean\n            - type: integer\n              format: int64\n            - type: integer\n              format: int32\n            - $ref: \"#/components/schemas/StructValue\"\n            - $ref: \"#/components/schemas/LatLong\"\n            - $ref: \"#/components/schemas/BytesValue\"\n          example: \"AQIDBA==\"\n    StructValue:\n      type: array\n      items:\n        $ref: \"#/components/schemas/StructPropertyValue\"\n\n    Paging:\n      type: object\n      properties:\n        current:\n          type: string\n          description: Link to the current page\n          example: /agent?offset0\u0026limit=10\n        offset:\n          type: integer\n          description: Index of first element in page\n          example: 0\n        limit:\n          type: integer\n          description: The maximum number of elements per page\n          example: 10\n        total:\n          type: integer\n          description: The total number of elements that exist\n          example: 1000\n        prev:\n          type: string\n          description: Link to previous page\n          example: /agent?offset=0\u0026limit=10\n        next:\n          type: string\n          description: Link to next page\n          example: /agent?offset=10\u0026limit=10\n        last:\n          type: string\n          description: Link to last page\n          example: /agent?offset100\u0026limit=10\n\n    # Track and Trace models\n    RecordList:\n      properties:\n        data:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Record\"\n        paging:\n          $ref: \"#/components/schemas/Paging\"\n    Record:\n      type: object\n      properties:\n        record_id:\n          type: string\n          example: 7h15-45537-15-br173\n        schema:\n          type: string\n          example: Lightbulb\n        owner:\n          type: string\n          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612\n        custodian:\n          type: string\n          example: 02fb5b3a093e20e420ecf9c5839215e74c97f49eb51889069eb87bc6f62ceca8dd\n        properties:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Property\"\n        proposals:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Proposal\"\n        owner_updates:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AssociatedAgent\"\n        custodian_updates:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AssociatedAgent\"\n        final:\n          type: boolean\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n    AssociatedAgent:\n      type: object\n      properties:\n        agent_id:\n          type: string\n          example: 02fb5b3a093e20e420ecf9c5839215e74c97f49eb51889069eb87bc6f62ceca8dd\n        timestamp:\n          $ref: \"#/components/schemas/Timestamp\"\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n    ReportedValue:\n      type: object\n      properties:\n        timestamp:\n          $ref: \"#/components/schemas/Timestamp\"\n        value:\n          oneOf:\n            - type: string\n            - type: boolean\n            - type: integer\n              format: int64\n            - type: integer\n              format: int32\n            - $ref: \"#/components/schemas/StructValue\"\n            - $ref: \"#/components/schemas/LatLong\"\n            - $ref: \"#/components/schemas/BytesValue\"\n        reporter:\n          type: object\n          properties:\n            metadata:\n              type: object\n              example: { agent_name: \"Smith\" }\n            public_key:\n              type: string\n              example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612\n            service_id:\n              type: string\n              example: 01234567-0123-0123-0123-012345678901::grid-scabbard-a\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n    Property:\n      type: object\n      properties:\n        name:\n          type: string\n          example: location\n        record_id:\n          type: string\n          example: 7h15-45537-15-br173\n        data_type:\n          $ref: \"#/components/schemas/DataTypeEnum\"\n        authorized_reporters:\n          type: array\n          items:\n            type: string\n            example:\n              - 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612\n              - 0364edd42bd9b2dea1315e2da820b569665f96e36c44b267ceeac488cfdc03bf61\n        value:\n          $ref: \"#/components/schemas/ReportedValue\"\n        updates:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ReportedValue\"\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n    ProposalRoleEnum:\n      type: string\n      enum:\n        - OWNER\n        - CUSTODIAN\n        - REPORTER\n    ProposalStatusEnum:\n      description: Status of a proposal\n      type: string\n      enum:\n        - OPEN\n        - ACCEPTED\n        - REJECTED\n        - CANCELED\n    Proposal:\n      type: object\n      properties:\n        receiving_agent:\n          type: string\n          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612\n        issuing_agent:\n          type: string\n          example: 02cd3181dbd7d1539f470436ce222c53ab5e514f67809dc0095895e6cdfba97612\n        role:\n          $ref: \"#/components/schemas/ProposalRoleEnum\"\n        properties:\n          type: array\n          items:\n            type: string\n        status:\n          $ref: \"#/components/schemas/ProposalStatusEnum\"\n        timestamp:\n          $ref: \"#/components/schemas/Timestamp\"\n        service_id:\n          $ref: \"#/components/schemas/ServiceID\"\n\n    # Transaction models\n    TransactionHeader:\n      properties:\n        batcher_public_key:\n          type: string\n          example: 02d260a46457a064733153e09840c322bee1dff34445d7d49e19e60abd18fd0758\n        dependencies:\n          type: array\n          items:\n            type: string\n            example: 1baee350bdb60bcee60e3d325d43283cf830b4c23b2cb17d3bb43935bd7af3761c2bee79847c72a9e396a9ae58f48add4e43f94eb83f84442c6085c1dd5d4dbe\n        family_name:\n          type: string\n          example: intkey\n        family_version:\n          type: string\n          example: \"1.0\"\n        inputs:\n          type: array\n          items:\n            type: string\n            example: 1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c\n        nonce:\n          type: string\n          example: QAApS4L\n        outputs:\n          type: array\n          items:\n            type: string\n            example: 1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c\n        payload_sha512:\n          type: string\n          example: fb6135ef73f4fe77367f9384b3bbbb158f4b8603c9d612157108e5c271868fce2242ee4abd7a29397ba63780c3ccab13783dfd4d9f0167beda03cdb0e37b87f4\n        signer_public_key:\n          type: string\n          example: 038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00\n    Transaction:\n      properties:\n        header:\n          $ref: \"#/components/schemas/TransactionHeader\"\n        header_signature:\n          type: string\n          example: 540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a\n        payload:\n          type: string\n          format: binary\n    BatchHeader:\n      properties:\n        signer_public_key:\n          type: string\n          example: 038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00\n        transaction_ids:\n          type: array\n          items:\n            type: string\n            example: 540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a\n    Batch:\n      properties:\n        header:\n          $ref: \"#/components/schemas/BatchHeader\"\n        header_signature:\n          type: string\n          example: 89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c\n        transactions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Transaction\"\n    BatchList:\n      properties:\n        batches:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Batch\"\n    BatchStatusLink:\n      type: string\n      example: https://api.grid.com/state?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\n\n    # Shared models\n    Timestamp:\n      type: integer\n      example: 1557949075\n    Metadata:\n      type: object\n      properties:\n        key:\n          type: string\n          example: industry\n        value:\n          type: string\n          example: electronics\n    ServiceID:\n      type: string\n      example: \"12345-QWERTY:gsAA\"\n    NamespaceEnum:\n      type: string\n      enum:\n        - UNSET_NAMESPACE\n        - GS1\n\n  parameters:\n    batch_id:\n      name: batch_id\n      in: path\n      required: true\n      description: |\n        The Batch ID uniquely identifies a batch. It is a signature derived from\n        signing the batch header with the batcher's key.\n      schema:\n        type: string\n    service_id:\n      name: service_id\n      in: query\n      description: |\n        The ID of the service the request should be sent to. This parameter is\n        required if running on Splinter.\n\n        Format: \\\u003ccircuit-id\\\u003e::\\\u003cservice-id\\\u003e\n      required: false\n      schema:\n        type: string\n    wait:\n      name: wait\n      in: query\n      description: |\n        The number of seconds to wait for batches to be committed before\n        returning.\n      schema:\n        type: integer\n    page_offset:\n      name: offset\n      in: query\n      description: |\n        The index of the first element to be in the page\n      schema:\n        type: integer\n    page_limit:\n      name: limit\n      in: query\n      description: |\n        The maximum number of elements in a page\n      schema:\n        type: integer\n\n  responses:\n    # Error responses\n    400BadRequest:\n      description: |\n        The Grid Daemon REST API could not understand the request due to invalid\n        syntax. Normally this will indicate an invalid query parameter or a\n        malformed payload.\n      content:\n        application/json:\n          schema:\n            type: string\n            example: |\n              Circuit ID is not present, but Grid is running in Splinter mode.\n    404NotFound:\n      description: |\n        The requested resource did not exist. This can either mean that the\n        endpoint is invalid, that there is no resource with the specified ID.\n      content:\n        application/json:\n          schema:\n            type: string\n            example: \"Not Found Error: No resource with that ID exists.\"\n    500ServerError:\n      description: |\n        Something went wrong within the Grid Daemon. This normally is not\n        something that the user has control over. If this type of error occurs,\n        the message returned by the REST API may be generic. The server admin\n        may have to look through the Grid Daemon service's logs to determine\n        the cause of the server error.\n      content:\n        application/json:\n          schema:\n            type: string\n            example: Internal Server Error\n    503ServiceUnavailable:\n      description: |\n        The Grid Daemon service or a connected service is unavailable. This can\n        occur when the Grid Daemon cannot reach the underlying distributed\n        ledger service or the Grid database.\n      content:\n        application/json:\n          schema:\n            type: string\n            example: Service Unavailable\n"
		}
	},
	"Error": "make ir: path \"/batches\": post: requestBody: contents: application/octet-stream: octet stream with schema not supported"
}