{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bounswe/bounswe2020group8"
		},
		"file": {
			"name": "swagger.yaml",
			"path": "backend/documentation/swagger.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Boun Group 8\n  description: Application API\n  license:\n    name: MIT\n    url: 'https://opensource.org/licenses/MIT'\nhost: 'localhost:8080'\nbasePath: /\ntags:\n  - name: Users\n    description: API for users in the system\nschemes:\n  - http\nconsumes:\n  - application/json\nproduces:\n  - application/json\npaths:\n  /category:\n    get:\n      tags:\n        - category\n      description: 'Returns all the categories. You can filter, sort ,limit number of results, paginate and limit the returned fields. For filter, you need to use the fields''s name and value. You can filter using some operators. They are gte, gt ,lte, lt, regex.'\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: query\n          name: sort\n          description: 'name of the field to sort, An example would be: sort=name,lastName. Default doesn''t sort anything'\n          required: false\n          type: string\n        - in: query\n          name: limit\n          description: 'number of elements to return, default is 1000'\n          required: false\n          type: number\n        - in: query\n          name: page\n          description: 'page number for the results, default is 1'\n          required: false\n          type: number\n        - in: query\n          name: fields\n          description: 'Fields you want in the returned elements, an example would be: fields=name,lastName,email. Default returns every field'\n          required: false\n          type: number\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/CategoryList'\n        '400':\n          description: Authorization error\n    post:\n      tags:\n        - category\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/Category'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Category'\n        '400':\n          description: Authorization error\n  '/category/{id}':\n    get:\n      tags:\n        - category\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Category'\n        '400':\n          description: Authorization error\n    patch:\n      tags:\n        - category\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/Category'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Category'\n        '400':\n          description: Authorization error\n    delete:\n      tags:\n        - category\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/responses/ApiResponse'\n                  - type: object\n                    properties:\n                      data:\n                        type: 'null'\n        '400':\n          description: Authorization error\n  /orderMessage/:\n    get:\n      tags:\n        - orderMessage\n      description: Retrieve all order messages.\n      security:\n        - bearerAuth: []\n      parameters: null\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/AllOrderMessages'\n        '400':\n          description: Authorization error\n  /orderMessage/all:\n    post:\n      tags:\n        - orderMessage\n      description: Get an order message with an order id and a suborder id.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: order_id\n          description: Order id.\n          required: true\n          type: string\n        - in: body\n          name: suborder_id\n          description: Suborder id.\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/OrderMessage'\n        '400':\n          description: Authorization error\n  /orderMessage/create:\n    post:\n      tags:\n        - orderMessage\n      description: Create an order message.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: order_id\n          description: Order id.\n          required: true\n          type: string\n        - in: body\n          name: suborder_id\n          description: Suborder id.\n          required: true\n          type: string\n        - in: body\n          name: vendor_id\n          description: Vendor id.\n          required: true\n          type: string\n        - in: body\n          name: payload\n          description: Initial payload.\n          required: true\n          type: array\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/OrderMessage'\n        '400':\n          description: Authorization error\n  '/orderMessage/{oid}':\n    post:\n      tags:\n        - orderMessage\n      description: Reply an orderMessage and register it into database.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: payload\n          description: New message of the order message.\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/OrderMessage'\n        '400':\n          description: Authorization error\n    delete:\n      tags:\n        - orderMessage\n      description: Close an orderMessage.\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/OrderMessage'\n        '400':\n          description: Authorization error\n  /customer/notification:\n    get:\n      tag:\n        - notification\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Notifications'\n        '400':\n          description: Authorization error\n    post:\n      tags:\n        - notification\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: notification_id\n          description: Notification id\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Notification'\n        '400':\n          description: Authorization error\n  /vendor/notification:\n    get:\n      tag:\n        - notification\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Notifications'\n        '400':\n          description: Authorization error\n    post:\n      tags:\n        - notification\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: notification_id\n          description: Notification id\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Notification'\n        '400':\n          description: Authorization error\n  /ticket/:\n    post:\n      tags:\n        - ticket\n      description: Create a ticket and register it into database.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: topic\n          description: Topic of the ticket.\n          required: true\n          type: string\n        - in: body\n          name: message\n          description: Detailed explanation of the problem.\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/PostTicket'\n        '400':\n          description: Authorization error\n    get:\n      tags:\n        - ticket\n      description: Get all ticket.\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/GetAllTicket'\n        '400':\n          description: Authorization error\n  '/ticket/{tid}':\n    get:\n      tags:\n        - ticket\n      description: Get a ticket.\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/PostTicket'\n        '400':\n          description: Authorization error\n    post:\n      tags:\n        - ticket\n      description: Reply a ticket and register it into database.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: new_message\n          description: New message of the ticket.\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/PostTicket'\n        '400':\n          description: Authorization error\n    patch:\n      tags:\n        - ticket\n      description: Forward or activate a ticket.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: admin_id\n          description: New admin id of the ticket.\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/PostTicket'\n        '400':\n          description: Authorization error\n    delete:\n      tags:\n        - ticket\n      description: Close a ticket.\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/PostTicket'\n        '400':\n          description: Authorization error\n  /ticket/all:\n    get:\n      tags:\n        - ticket\n      description: Get all active ticket.\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/GetAllTicket'\n        '400':\n          description: Authorization error\n  '/ticket/admin/{aid}':\n    get:\n      tags:\n        - ticket\n      description: Get all tickets of an admin.\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/GetAllTicket'\n        '400':\n          description: Authorization error\n  '/ticket/all/admin/{aid}':\n    get:\n      tags:\n        - ticket\n      description: Get all active tickets of an admin.\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/GetAllTicket'\n        '400':\n          description: Authorization error\n  '/ticket/client/{cid}':\n    get:\n      tags:\n        - ticket\n      description: Get all tickets of a client.\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/GetAllTicket'\n        '400':\n          description: Authorization error\n  '/ticket/all/client/{cid}':\n    get:\n      tags:\n        - ticket\n      description: Get all active tickets of a client.\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/GetAllTicket'\n        '400':\n          description: Authorization error\n  '/ticket/admin/{aid}/client/{cid}':\n    get:\n      tags:\n        - ticket\n      description: Get all tickets of between a client and an admin.\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/GetAllTicket'\n        '400':\n          description: Authorization error\n  '/ticket/all/admin/{aid}/client/{cid}':\n    get:\n      tags:\n        - ticket\n      description: Get all active tickets between a client and an admin.\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/GetAllTicket'\n        '400':\n          description: Authorization error\n  /shoppingList/:\n    post:\n      tags:\n        - shoppingList\n      description: Returns the created list defined by the information provided by the user.\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: title\n          description: name of the field. Sets the name of the shopping list.\n          required: true\n          type: string\n        - in: body\n          name: wishedProducts\n          description: 'list of product objects, which includes product id and vendor id per object.'\n          required: true\n          type: object\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ShoppingList'\n        '400':\n          description: Authorization error\n  /shoppingList/all:\n    get:\n      tags:\n        - shoppingList\n      security:\n        bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ShoppingLists'\n        '400':\n          description: Insufficient token\n    delete:\n      tags:\n        - shoppingList\n      security:\n        bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/NullData'\n        '400':\n          description: Invalid bearer token\n  /shoppingList/all/export:\n    post:\n      tags:\n        - shoppingList\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/NullData'\n        '400':\n          description: Insufficient token\n  '/shoppingList/{lid}':\n    get:\n      tags:\n        - shoppingList\n      security:\n        bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ShoppingList'\n        '400':\n          description: Insufficient token\n    patch:\n      tags:\n        - shoppingList\n      security:\n        bearerAuth: []\n      parameters:\n        - in: body\n          name: title\n          description: title of the shopping list\n          required: true\n          type: string\n        - in: body\n          name: wishedProducts\n          description: 'list of product objects, which includes product id and vendor id per object.'\n          required: true\n          type: object\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ShoppingList'\n        '400':\n          description: Insufficient token\n    delete:\n      tags:\n        - shoppingList\n      security:\n        bearerAuth: []\n      parameters: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ShoppingList'\n        '400':\n          description: Invalid bearer token\n  '/shoppingList/{lid}/export':\n    post:\n      tags:\n        - shoppingList\n      security:\n        bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/NullData'\n        '400':\n          description: Invalid bearer token\n  /shoppingList/watchlist:\n    get:\n      tags:\n        - watchList\n      security:\n        bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/WatchList'\n        '400':\n          description: Invalid bearer token\n    post:\n      tags:\n        - watchList\n      security:\n        bearerAuth: []\n      parameters:\n        - in: body\n          name: product_id\n          description: Product id.\n          required: true\n          type: string\n        - in: body\n          name: vendor_id\n          description: Vendor id.\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/WatchList'\n        '400':\n          description: Invalid bearer token\n    delete:\n      tags:\n        - watchList\n      security:\n        bearerAuth: []\n      parameters:\n        - in: body\n          name: watcher_id\n          description: Watcher id.\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/WatchList'\n        '400':\n          description: Invalid bearer token\n  /customer/signup:\n    post:\n      tags:\n        - customer\n      parameters:\n        - in: query\n          name: name\n          required: true\n          type: string\n        - in: query\n          name: lastName\n          required: true\n          type: string\n        - in: query\n          name: email\n          required: true\n          type: string\n        - in: query\n          name: password\n          required: true\n          type: string\n        - in: query\n          name: passwordConfirm\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: Invalid email or password or type\n  /customer/login:\n    post:\n      tags:\n        - customer\n      parameters:\n        - in: query\n          name: email\n          required: true\n          type: string\n        - in: query\n          name: password\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponseWtoken'\n        '400':\n          description: Invalid email or password or type\n  /customer/logout:\n    post:\n      tags:\n        - customer\n      security:\n        - bearerAuth: []\n      parameters: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: Invalid token\n  /customer/verifyEmail:\n    get:\n      tags:\n        - customer\n      parameters:\n        - in: query\n          name: verifyEmailToken\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: Insufficient token\n  /customer/changePassword:\n    post:\n      tags:\n        - customer\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: query\n          name: oldPassword\n          required: true\n          type: string\n        - in: query\n          name: newPassword\n          required: true\n          type: string\n        - in: query\n          name: newPasswordRepeat\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: Invalid password\n  /customer/signupWithGoogle:\n    post:\n      tags:\n        - customer\n      parameters:\n        - in: query\n          name: email\n          required: true\n          type: string\n        - in: query\n          name: googleID\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponseWtoken'\n        '400':\n          description: 'Invalid email, type or googleID'\n  /customer/loginWithGoogle:\n    post:\n      tags:\n        - customer\n      parameters:\n        - in: query\n          name: email\n          required: true\n          type: string\n        - in: query\n          name: googleID\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponseWtoken'\n        '400':\n          description: 'Invalid email, type or googleID'\n  /customer/forgotPassword:\n    post:\n      tags:\n        - customer\n      parameters:\n        - in: query\n          name: email\n          description: Email Address\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: Invalid e-mail or type.\n  /customer/resetPassword:\n    post:\n      tags:\n        - customer\n      parameters:\n        - in: query\n          name: resetPasswordToken\n          description: Reset Password Token\n          required: true\n          type: string\n        - in: query\n          name: newPassword\n          required: true\n          type: string\n        - in: query\n          name: newPasswordCheck\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: Invalid resetPasswordToken or newPassword or newPasswordCheck\n  /customer/me:\n    patch:\n      tags:\n        - customer\n      security:\n        bearerAuth: []\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/Customer'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Customer'\n        '400':\n          description: Invalid bearer token\n    get:\n      tags:\n        - customer\n      parameters: []\n      security:\n        bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Customer'\n        '400':\n          description: Invalid bearer token\n    delete:\n      tags:\n        - customer\n      security:\n        bearerAuth: []\n      parameters: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/NullData'\n        '400':\n          description: Invalid bearer token\n  /customer/me/recommendations:\n    get:\n      tags:\n        - customer\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/SearchResults'\n        '400':\n          description: Internal error\n  /customer:\n    get:\n      tags:\n        - customer\n      description: 'Returns all the customers. You can filter, sort ,limit number of results, paginate and limit the returned fields. For filter, you need to use the fields''s name and value. You can filter using some operators. They are gte, gt ,lte, lt, regex. An example for filtering could be: ?email=test@test.com\u0026name[regex]=can'\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: query\n          name: sort\n          description: 'name of the field to sort, An example would be: sort=name,lastName. Default doesn''t sort anything'\n          required: false\n          type: string\n        - in: query\n          name: limit\n          description: 'number of elements to return, default is 1000'\n          required: false\n          type: number\n        - in: query\n          name: page\n          description: 'page number for the results, default is 1'\n          required: false\n          type: number\n        - in: query\n          name: fields\n          description: 'Fields you want in the returned elements, an example would be: fields=name,lastName,email. Default returns every field'\n          required: false\n          type: number\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/CustomerList'\n        '400':\n          description: Authorization error\n  '/customer/{id}':\n    get:\n      tags:\n        - customer\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Customer'\n        '400':\n          description: Authorization error\n    patch:\n      tags:\n        - customer\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/Customer'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Customer'\n        '400':\n          description: Authorization error\n    delete:\n      tags:\n        - customer\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/NullData'\n        '400':\n          description: Authorization error\n  /customer/shoppingCart/main:\n    get:\n      tags:\n        - customer\n        - shoppingCart\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Customer'\n        '400':\n          description: An error has occured.\n    patch:\n      tags:\n        - customer\n        - shoppingCart\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/PatchShoppingCart'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Customer'\n        '400':\n          description: An error has occured.\n    post:\n      tags:\n        - customer\n        - shoppingCart\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/PostShoppingCart'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Customer'\n        '400':\n          description: An error has occured.\n  /vendor/signup:\n    post:\n      tags:\n        - vendor\n      parameters:\n        - in: query\n          name: name\n          required: true\n          type: string\n        - in: query\n          name: lastName\n          required: true\n          type: string\n        - in: query\n          name: companyName\n          required: true\n          type: string\n        - in: query\n          name: companyDomainName\n          required: true\n          type: string\n        - in: query\n          name: email\n          required: true\n          type: string\n        - in: query\n          name: password\n          required: true\n          type: string\n        - in: query\n          name: passwordConfirm\n          required: true\n          type: string\n        - in: body\n          name: locations\n          type: array\n          items:\n            type: object\n            properties: null\n            longitude:\n              type: number\n            latitude:\n              type: number\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: Invalid email or password or type\n  /vendor/login:\n    post:\n      tags:\n        - vendor\n      parameters:\n        - in: query\n          name: email\n          required: true\n          type: string\n        - in: query\n          name: password\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponseWtoken'\n        '400':\n          description: Invalid email or password or type\n  /vendor/logout:\n    post:\n      tags:\n        - vendor\n      security:\n        - bearerAuth: []\n      parameters: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: Invalid token\n  /vendor/verifyEmail:\n    get:\n      tags:\n        - vendor\n      parameters:\n        - in: query\n          name: verifyEmailToken\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: Insufficient token\n  /vendor/changePassword:\n    $ref: '#/paths/~1vendor~1%7Bid%7D'\n  /vendor/forgotPassword:\n    post:\n      tags:\n        - vendor\n      parameters:\n        - in: query\n          name: email\n          description: Email Address\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: Invalid e-mail or type.\n  /vendor/resetPassword:\n    post:\n      tags:\n        - vendor\n      parameters:\n        - in: query\n          name: resetPasswordToken\n          description: Reset Password Token\n          required: true\n          type: string\n        - in: query\n          name: newPassword\n          required: true\n          type: string\n        - in: query\n          name: newPasswordCheck\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: Invalid resetPasswordToken or newPassword or newPasswordCheck\n  /vendor/me:\n    patch:\n      tags:\n        - vendor\n      security:\n        bearerAuth: []\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/Vendor'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Vendor'\n        '400':\n          description: Invalid bearer token\n    get:\n      tags:\n        - vendor\n      parameters: []\n      security:\n        bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Vendor'\n        '400':\n          description: Invalid bearer token\n    delete:\n      tags:\n        - vendor\n      security:\n        bearerAuth: []\n      parameters: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/NullData'\n        '400':\n          description: Invalid bearer token\n  /vendor:\n    get:\n      tags:\n        - vendor\n      description: 'Returns all the vendors. You can filter, sort ,limit number of results, paginate and limit the returned fields. For filter, you need to use the fields''s name and value. You can filter using some operators. They are gte, gt ,lte, lt, regex. An example for filtering could be: ?email=test@test.com\u0026name[regex]=can'\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: query\n          name: sort\n          description: 'name of the field to sort, An example would be: sort=name,lastName. Default doesn''t sort anything'\n          required: false\n          type: string\n        - in: query\n          name: limit\n          description: 'number of elements to return, default is 1000'\n          required: false\n          type: number\n        - in: query\n          name: page\n          description: 'page number for the results, default is 1'\n          required: false\n          type: number\n        - in: query\n          name: fields\n          description: 'Fields you want in the returned elements, an example would be: fields=name,lastName,email. Default returns every field'\n          required: false\n          type: number\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/VendorList'\n        '400':\n          description: Authorization error\n  '/vendor/public/{id}':\n    get:\n      tags:\n        - vendor\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/PublicVendor'\n        '400':\n          description: Invalid Id\n  '/vendor/{id}':\n    post:\n      tags:\n        - vendor\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: query\n          name: oldPassword\n          required: true\n          type: string\n        - in: query\n          name: newPassword\n          required: true\n          type: string\n        - in: query\n          name: newPasswordRepeat\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: Invalid token code or passwords don't match\n  /vendor/me/product:\n    get:\n      tags:\n        - vendor\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ProductofVendorList'\n        '400':\n          description: Invalid\n  '/vendor/me/product/{id}':\n    get:\n      tags:\n        - vendor\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ProductofVendor'\n        '400':\n          description: Invalid\n    patch:\n      tags:\n        - vendor\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/UpdatableProductForVendor'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ProductRequest'\n        '400':\n          description: Invalid\n    delete:\n      tags:\n        - vendor\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ProductRequest'\n        '400':\n          description: Invalid\n  /vendor/me/mainProduct:\n    get:\n      tags:\n        - vendor\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/MainProductList'\n        '400':\n          description: Invalid\n  '/vendor/me/mainProduct/{mpid}':\n    delete:\n      tags:\n        - vendor\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ProductRequest'\n        '400':\n          description: Invalid\n  /vendor/me/product/new:\n    post:\n      tags:\n        - vendor\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/Product'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ProductRequest'\n        '400':\n          description: Invalid body\n  '/vendor/me/product/existing/{id}':\n    post:\n      tags:\n        - vendor\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/UpdatableProductForVendor'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ProductRequest'\n        '400':\n          description: Invalid body\n  /vendor/me/productRequest:\n    get:\n      tags:\n        - vendor\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ProductRequestList'\n        '400':\n          description: Invalid\n  '/vendor/me/productRequest/{id}':\n    get:\n      tags:\n        - vendor\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ProductRequest'\n        '400':\n          description: Invalid\n    patch:\n      tags:\n        - vendor\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/ProductRequest'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ProductRequest'\n        '400':\n          description: Invalid\n    delete:\n      tags:\n        - vendor\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/NullData'\n        '400':\n          description: Invalid\n  /admin/loginAdmin:\n    post:\n      tags:\n        - admin\n      parameters:\n        - in: query\n          name: email\n          required: true\n          type: string\n        - in: query\n          name: password\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponseWtoken'\n        '400':\n          description: Invalid email or password or type\n  /admin/logoutAdmin:\n    post:\n      tags:\n        - admin\n      security:\n        - bearerAuth: []\n      parameters: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: Invalid token\n  '/comment/{pid}/all':\n    get:\n      tags:\n        - comment\n      parameters: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: An error has occured.\n  '/comment/{pid}':\n    get:\n      tags:\n        - comment\n      parameters: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: An error has occured.\n    post:\n      tags:\n        - comment\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/PostComment'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: An error has occured.\n    patch:\n      tags:\n        - comment\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/PatchComment'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: An error has occured.\n    delete:\n      tags:\n        - comment\n      parameters:\n        - in: body\n          name: _id\n          schema:\n            $ref: '#/components/schemas/PostComment'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ApiResponse'\n        '400':\n          description: An error has occured.\n  /product:\n    get:\n      tags:\n        - product\n      description: 'Returns all the products. You can filter, sort ,limit number of results, paginate and limit the returned fields. For filter, you need to use the fields''s name and value. You can filter using some operators. They are gte, gt ,lte, lt, regex.'\n      parameters:\n        - in: query\n          name: sort\n          description: name of the field to sort\n          required: false\n          type: string\n        - in: query\n          name: limit\n          description: 'number of elements to return, default is 1000'\n          required: false\n          type: number\n        - in: query\n          name: page\n          description: 'page number for the results, default is 1'\n          required: false\n          type: number\n        - in: query\n          name: fields\n          description: Fields you want in the returned elements.\n          required: false\n          type: number\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ProductList'\n        '400':\n          description: Invalid body\n    post:\n      tags:\n        - product\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/Product'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Product'\n        '400':\n          description: Invalid body\n  '/product/{id}':\n    get:\n      tags:\n        - product\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Product'\n        '400':\n          description: Invalid\n    post:\n      tags:\n        - product\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/VendorSpecific'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Product'\n        '400':\n          description: Invalid body\n    patch:\n      tags:\n        - product\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/Product'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Product'\n        '400':\n          description: Invalid\n    delete:\n      tags:\n        - product\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/NullData'\n        '400':\n          description: Invalid\n  '/product/{pid}/vendor/{vid}':\n    patch:\n      tags:\n        - product\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/VendorSpecific'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Product'\n        '400':\n          description: Invalid\n    delete:\n      tags:\n        - product\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/NullData'\n        '400':\n          description: Invalid\n  /product/search:\n    post:\n      tags:\n        - product\n      parameters:\n        - in: query\n          name: sort\n          description: name of the field to sort\n          required: false\n          type: string\n        - in: query\n          name: limit\n          description: 'number of elements to return, default is 1000'\n          required: false\n          type: number\n        - in: query\n          name: page\n          description: 'page number for the results, default is 1'\n          required: false\n          type: number\n        - in: body\n          name: query string\n          schema:\n            type: object\n            properties:\n              query:\n                type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/SearchResults'\n        '400':\n          description: Invalid body\n  '/product/recommendations/{id}':\n    post:\n      tags:\n        - product\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/SearchResults'\n        '400':\n          description: Invalid product id\n  /product/searchFilters:\n    post:\n      tags:\n        - product\n      parameters:\n        - in: body\n          name: query string\n          schema:\n            type: object\n            properties:\n              query:\n                type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/SearchFilterResults'\n        '400':\n          description: Invalid body\n  /mainProduct:\n    get:\n      tags:\n        - mainProduct\n      description: 'Returns all the main products. You can filter, sort ,limit number of results, paginate and limit the returned fields. For filter, you need to use the fields''s name and value. You can filter using some operators. They are gte, gt ,lte, lt, regex.'\n      parameters:\n        - in: query\n          name: sort\n          description: name of the field to sort\n          required: false\n          type: string\n        - in: query\n          name: limit\n          description: 'number of elements to return, default is 1000'\n          required: false\n          type: number\n        - in: query\n          name: page\n          description: 'page number for the results, default is 1'\n          required: false\n          type: number\n        - in: query\n          name: fields\n          description: Fields you want in the returned elements.\n          required: false\n          type: number\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/MainProductList'\n        '400':\n          description: Invalid body\n    post:\n      tags:\n        - mainProduct\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/MainProduct'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/MainProduct'\n        '400':\n          description: Invalid body\n  '/mainProduct/{id}':\n    get:\n      tags:\n        - mainProduct\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/MainProduct'\n        '400':\n          description: Invalid\n    patch:\n      tags:\n        - mainProduct\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/MainProduct'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/MainProduct'\n        '400':\n          description: Invalid\n    delete:\n      tags:\n        - mainProduct\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/NullData'\n        '400':\n          description: Invalid\n  '/mainProduct/{mpid}/vendor/{vid}':\n    delete:\n      tags:\n        - mainProduct\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/NullData'\n        '400':\n          description: Invalid\n  /productRequest:\n    get:\n      tags:\n        - productRequest\n      description: 'Returns all the product requests. You can filter, sort ,limit number of results, paginate and limit the returned fields. For filter, you need to use the fields''s name and value. You can filter using some operators. They are gte, gt ,lte, lt, regex.'\n      parameters:\n        - in: query\n          name: sort\n          description: name of the field to sort\n          required: false\n          type: string\n        - in: query\n          name: limit\n          description: 'number of elements to return, default is 1000'\n          required: false\n          type: number\n        - in: query\n          name: page\n          description: 'page number for the results, default is 1'\n          required: false\n          type: number\n        - in: query\n          name: fields\n          description: Fields you want in the returned elements.\n          required: false\n          type: number\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ProductRequestList'\n        '400':\n          description: Invalid body\n  '/productRequest/{id}':\n    get:\n      tags:\n        - productRequest\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ProductRequest'\n        '400':\n          description: Invalid\n    patch:\n      tags:\n        - productRequest\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/ProductRequest'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ProductRequest'\n        '400':\n          description: Invalid\n    delete:\n      tags:\n        - productRequest\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/NullData'\n        '400':\n          description: Invalid\n  /customer/shoppingCart/main:\n    get:\n      tags:\n        - shoppingCart\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ShoppingCart'\n        '400':\n          description: An error has occured.\n    post:\n      tags:\n        - shoppingCart\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: body\n          required: true\n          schema:\n            $ref: '#/components/schemas/PostShoppingCart'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ShoppingCart'\n        '400':\n          description: An error has occured.\n  /customer/shoppingCart/reset:\n    post:\n      tags:\n        - shoppingCart\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ShoppingCart'\n        '400':\n          description: An error has occured.\n  /customer/shoppingCart/delete:\n    post:\n      tags:\n        - shoppingCart\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: body\n          required: true\n          schema:\n            $ref: '#/components/schemas/DeleteFromShoppingCart'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ShoppingCart'\n        '400':\n          description: An error has occured.\n  /guest/shoppingCart/main:\n    get:\n      tags:\n        - shoppingCart\n      parameters:\n        - in: query\n          name: _id\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ShoppingCart'\n        '400':\n          description: An error has occured.\n    post:\n      tags:\n        - shoppingCart\n      parameters:\n        - in: body\n          name: body\n          required: true\n          schema:\n            $ref: '#/components/schemas/PostGuestShoppingCart'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ShoppingCart'\n        '400':\n          description: An error has occured.\n  /guest/shoppingCart/reset:\n    post:\n      tags:\n        - shoppingCart\n      parameters:\n        - in: body\n          name: _id\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ShoppingCart'\n        '400':\n          description: An error has occured.\n  /guest/shoppingCart/delete:\n    post:\n      tags:\n        - shoppingCart\n      parameters:\n        - in: body\n          name: body\n          required: true\n          schema:\n            $ref: '#/components/schemas/DeleteFromGuestShoppingCart'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/ShoppingCart'\n        '400':\n          description: An error has occured.\n  /customer/order/main:\n    get:\n      tags:\n        - order\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Order'\n        '400':\n          description: An error has occured.\n    patch:\n      tags:\n        - order\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/PatchOrder'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Order'\n        '400':\n          description: An error has occured.\n  /customer/order/orderID:\n    post:\n      tags:\n        - order\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/GetFromOrderID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Order'\n        '400':\n          description: An error has occured.\n  /customer/purchase:\n    post:\n      tags:\n        - purchase\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Order'\n        '400':\n          description: An error has occured.\n  /guest/order/main:\n    patch:\n      tags:\n        - order\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/PatchOrder'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Order'\n        '400':\n          description: An error has occured.\n  /guest/order/orderID:\n    post:\n      tags:\n        - order\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/GetFromOrderID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Order'\n        '400':\n          description: An error has occured.\n  /guest/purchase:\n    post:\n      tags:\n        - purchase\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: _id\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Order'\n        '400':\n          description: An error has occured.\n  /vendor/order/main:\n    get:\n      tags:\n        - order\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Order'\n        '400':\n          description: An error has occured.\n    patch:\n      tags:\n        - order\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: body\n          name: body\n          schema:\n            $ref: '#/components/schemas/PatchOrder'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Order'\n        '400':\n          description: An error has occured.\n  /vendor/balance:\n    get:\n      tags:\n        - vendor\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/VendorBalance'\n        '400':\n          description: An error has occured.\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: string\n  responses:\n    ApiResponse:\n      type: object\n      properties:\n        returnMessage:\n          type: string\n        returnCode:\n          type: number\n    ApiResponseWtoken:\n      type: object\n      properties:\n        tokenCode:\n          type: string\n        returnMessage:\n          type: string\n        returnCode:\n          type: number\n    NullData:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              type: 'null'\n    Category:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/Category'\n    CategoryList:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            results:\n              type: number\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/Category'\n    OrderMessage:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/OrderMessage'\n    AllOrderMessages:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            result:\n              type: number\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/OrderMessage'\n    Notification:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/Notification'\n    Notifications:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            result:\n              type: number\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/Notification'\n    PostTicket:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/PostTicket'\n    GetAllTicket:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            result:\n              type: number\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/PostTicket'\n    ShoppingList:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/PostShoppingList'\n    ShoppingLists:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            results:\n              type: number\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/ShoppingLists'\n    WatchList:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/WatchList'\n    CustomerList:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            results:\n              type: number\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/Customer'\n    Customer:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/Customer'\n    VendorList:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            results:\n              type: number\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/Vendor'\n    Vendor:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/Vendor'\n    PublicVendor:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/PublicVendor'\n    ProductList:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            results:\n              type: number\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/Product'\n    Product:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/Product'\n    ProductofVendorList:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            results:\n              type: number\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/ProductofVendor'\n    ProductofVendor:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/ProductofVendor'\n    SearchResults:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            results:\n              type: number\n            data:\n              type: array\n              items:\n                type: object\n                properties:\n                  matches:\n                    type: number\n                  maxPrice:\n                    type: number\n                  minPrice:\n                    type: number\n                  vendors:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        _id:\n                          type: string\n                          format: mongoID\n                        companyName:\n                          type: string\n                  mainProduct:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        _id:\n                          type: string\n                          format: mongoID\n                        title:\n                          type: string\n                        rating:\n                          type: number\n                        numberOfRating:\n                          type: number\n                  product:\n                    type: object\n                    properties:\n                      _id:\n                        type: string\n                        format: mongoID\n                      photos:\n                        type: array\n                        items:\n                          type: string\n                  mpid:\n                    type: string\n                    format: mongoID\n                  brand:\n                    type: string\n                  category:\n                    type: string\n    SearchFilterResults:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            results:\n              type: number\n            data:\n              type: array\n              items:\n                type: object\n                properties:\n                  _id:\n                    type: null\n                  maxPrice:\n                    type: number\n                  minPrice:\n                    type: number\n                  vendors:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        _id:\n                          type: string\n                          format: mongoID\n                        companyName:\n                          type: string\n                  parameters:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        name:\n                          type: string\n                        value:\n                          type: array\n                          items:\n                            type: string\n                  brands:\n                    type: array\n                    items:\n                      type: string\n                  categories:\n                    type: array\n                    items:\n                      type: string\n    MainProductList:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            results:\n              type: number\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/MainProduct'\n    MainProduct:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/MainProduct'\n    ProductRequestList:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            results:\n              type: number\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/ProductRequest'\n    ProductRequest:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/ProductRequest'\n    ShoppingCart:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            shoppingCart:\n              type: array\n              items:\n                $ref: '#/components/schemas/ShoppingCartItem'\n    Order:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/Order'\n    VendorBalance:\n      allOf:\n        - $ref: '#/components/responses/ApiResponse'\n        - type: object\n          properties:\n            data:\n              $ref: '#/components/schemas/VendorBalance'\n  schemas:\n    Rate:\n      type: object\n      properties:\n        rate:\n          type: number\n          minimum: 0\n          maximum: 5\n    Notification:\n      type: object\n      properties:\n        type:\n          type: string\n        description:\n          type: string\n        createdAt:\n          type: date\n        isRead:\n          type: boolean\n        hyperLink:\n          type: string\n    PostComment:\n      type: object\n      properties:\n        text:\n          type: string\n    PatchComment:\n      type: object\n      properties:\n        _id:\n          type: string\n          format: mongoID\n        text:\n          type: string\n    PostTicket:\n      type: object\n      properties:\n        topic:\n          type: string\n        admin_id:\n          type: string\n        client_id:\n          type: string\n        isActive:\n          type: boolean\n        isAssigned:\n          type: boolean\n        startedAt:\n          type: date\n        updatedAt:\n          type: date\n        conversation:\n          type: array\n          items:\n            $ref: '#/components/schemas/PostTicketMessage'\n    PostTicketMessage:\n      type: object\n      properties:\n        payload:\n          type: string\n        isSentByAdmin:\n          type: boolean\n        sendAt:\n          type: date\n    OrderMessage:\n      type: object\n      properties:\n        order_id:\n          type: string\n        suborder_id:\n          type: string\n        client_id:\n          type: string\n        vendor_id:\n          type: string\n        isActive:\n          type: boolean\n        startedAt:\n          type: date\n        updatedAt:\n          type: date\n        conversation:\n          type: array\n          items:\n            $ref: '#/components/schemas/OrderMessageMessage'\n    OrderMessageMessage:\n      type: object\n      properties:\n        payload:\n          type: string\n        isSentByVendor:\n          type: boolean\n        sendAt:\n          type: date\n    PostShoppingList:\n      type: object\n      properties:\n        title:\n          type: string\n        wishedProducts:\n          type: array\n    PatchShoppingList:\n      type: object\n      properties:\n        title:\n          type: string\n        wishedProducts:\n          type: array\n    ShoppingLists:\n      type: array\n    WatchList:\n      type: array\n    Customer:\n      type: object\n      properties:\n        _id:\n          type: string\n          format: mongoID\n        name:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        isSuspended:\n          type: boolean\n        isActive:\n          type: boolean\n        shoppingLists:\n          type: array\n          items:\n            type: object\n            properties:\n              title:\n                type: String\n              wishedProducts:\n                type: array\n                items:\n                  type: ObjectId\n        shoppingCart:\n          type: array\n          items:\n            type: object\n            properties:\n              productId:\n                type: String\n              vendorId:\n                type: String\n              amount:\n                type: number\n              price:\n                type: number\n              shipmentPrice:\n                type: number\n              cargoCompany:\n                type: String\n              vendorName:\n                type: String\n              title:\n                type: String\n              photos:\n                type: array\n                items:\n                  type: String\n        addresses:\n          type: array\n          items:\n            type: object\n            properties:\n              addressName:\n                type: String\n              name:\n                type: String\n              addressLine:\n                type: String\n              city:\n                type: String\n              state:\n                type: String\n              zipCode:\n                type: String\n              phone:\n                type: String\n        phoneNumber:\n          type: string\n        birthday:\n          type: string\n        creditCards:\n          type: array\n          items:\n            type: object\n            properties:\n              creditCardNumber:\n                type: String\n              creditCardCvc:\n                type: String\n              creditCardData:\n                type: String\n              creditCardName:\n                type: String\n      xml:\n        name: User\n    Vendor:\n      type: object\n      properties:\n        _id:\n          type: string\n          format: mongoID\n        name:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        isSuspended:\n          type: boolean\n        isActive:\n          type: boolean\n        companyName:\n          type: string\n        companyDomainName:\n          type: string\n        aboutCompany:\n          type: string\n        IBAN:\n          type: string\n        address:\n          type: object\n          properties:\n            addressName:\n              type: string\n            name:\n              type: string\n            addressLine:\n              type: string\n            city:\n              type: string\n            state:\n              type: string\n            zipCode:\n              type: string\n            phone:\n              type: string\n        locations:\n          type: array\n          items:\n            type: object\n            properties:\n              longitude:\n                type: number\n              latitude:\n                type: number\n      xml:\n        name: User\n    PublicVendor:\n      type: object\n      properties:\n        _id:\n          type: string\n          format: mongoID\n        companyName:\n          type: string\n        companyDomainName:\n          type: string\n        aboutCompany:\n          type: string\n        address:\n          type: object\n          properties:\n            addressName:\n              type: string\n            name:\n              type: string\n            addressLine:\n              type: string\n            city:\n              type: string\n            state:\n              type: string\n            zipCode:\n              type: string\n            phone:\n              type: string\n        locations:\n          type: array\n          items:\n            type: object\n            properties:\n              longitude:\n                type: number\n              latitude:\n                type: number\n      xml:\n        name: User\n    Category:\n      type: object\n      properties:\n        _id:\n          type: string\n          format: mongoID\n        name:\n          type: string\n      xml:\n        name: User\n    Order:\n      type: array\n      items:\n        type: object\n        properties:\n          _id:\n            type: string\n          customerID:\n            type: string\n          product:\n            type: string\n          email:\n            type: string\n          shippingAddress:\n            type: object\n            properties:\n              addressName:\n                type: string\n              name:\n                type: string\n              addressLine:\n                type: string\n              city:\n                type: string\n              state:\n                type: string\n              zipCode:\n                type: string\n              phone:\n                type: string\n          billingAddress:\n            type: object\n            properties:\n              addressName:\n                type: string\n              name:\n                type: string\n              addressLine:\n                type: string\n              city:\n                type: string\n              state:\n                type: string\n              zipCode:\n                type: string\n              phone:\n                type: string\n          creditCard:\n            type: object\n            properties:\n              creditCardNumber:\n                type: string\n              creditCardCvc:\n                type: string\n              creditCardData:\n                type: string\n              creditCardName:\n                type: string\n          shippingInfo:\n            type: string\n          arrivesIn:\n            type: integer\n          status:\n            type: string\n        xml:\n          name: User\n    MainProduct:\n      type: object\n      properties:\n        _id:\n          type: string\n          format: mongoID\n        title:\n          type: string\n        description:\n          type: string\n        rating:\n          type: number\n        numberOfRating:\n          type: number\n        tags:\n          type: array\n          items:\n            type: string\n        parameters:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n              value:\n                type: array\n                items:\n                  type: string\n        brand:\n          type: string\n        category:\n          type: string\n        soldAmount:\n          type: number\n        isConfirmed:\n          type: boolean\n    Product:\n      type: object\n      properties:\n        _id:\n          type: string\n          format: mongoID\n        tags:\n          type: array\n          items:\n            type: string\n        parameters:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n              value:\n                type: string\n        vendorSpecifics:\n          type: array\n          items:\n            $ref: '#/components/schemas/VendorSpecific'\n        default:\n          $ref: '#/components/schemas/VendorSpecific'\n        photos:\n          type: array\n          items:\n            type: string\n        parentProduct:\n          type: string\n          format: mongoID\n        brand:\n          type: string\n        category:\n          type: string\n    ProductofVendor:\n      type: object\n      properties:\n        _id:\n          type: string\n          format: mongoID\n        tags:\n          type: array\n          items:\n            type: string\n        parameters:\n          type: array\n          items:\n            $ref: '#/components/schemas/Product/properties/parameters/items'\n        vendorSpecifics:\n          $ref: '#/components/schemas/VendorSpecific'\n        photos:\n          type: array\n          items:\n            type: string\n        parentProduct:\n          type: string\n          format: mongoID\n        brand:\n          type: string\n        category:\n          type: string\n    UpdatableProductForVendor:\n      type: object\n      properties:\n        vendorSpecifics:\n          $ref: '#/components/schemas/VendorSpecific'\n        photos:\n          type: array\n          items:\n            type: string\n    VendorSpecific:\n      type: object\n      properties:\n        vendorID:\n          type: string\n          format: mongoID\n        price:\n          type: number\n        amountLeft:\n          type: number\n        shipmentPrice:\n          type: number\n        cargoCompany:\n          type: string\n    ProductRequest:\n      type: object\n      properties:\n        _id:\n          type: string\n          format: mongoID\n        type:\n          type: string\n        vendorID:\n          type: string\n          format: mongoID\n        oldValue:\n          type: string\n          format: mongoID\n        newValue:\n          type: object\n        messageFromAdmin:\n          type: string\n    PostShoppingCart:\n      type: object\n      properties:\n        productId:\n          type: string\n        vendorId:\n          type: string\n        amount:\n          type: integer\n    DeleteFromShoppingCart:\n      type: object\n      properties:\n        productId:\n          type: string\n        vendorId:\n          type: string\n    ShoppingCartItem:\n      type: object\n      properties:\n        productId:\n          type: string\n        vendorId:\n          type: string\n        amount:\n          type: integer\n        price:\n          type: number\n        shipmentPrice:\n          type: number\n        cargoCompany:\n          type: string\n        title:\n          type: string\n        vendorName:\n          type: string\n        photos:\n          type: array\n          items:\n            type: string\n    PostGuestShoppingCart:\n      type: object\n      properties:\n        _id:\n          type: string\n        productId:\n          type: string\n        vendorId:\n          type: string\n        amount:\n          type: integer\n    DeleteFromGuestShoppingCart:\n      type: object\n      properties:\n        _id:\n          type: string\n        productId:\n          type: string\n        vendorId:\n          type: string\n    PatchOrder:\n      type: object\n      properties:\n        mainOrderID:\n          type: string\n        orderID:\n          type: string\n        status:\n          type: string\n    GetFromOrderID:\n      type: object\n      properties:\n        mainOrderID:\n          type: string\n        orderID:\n          type: string\n    VendorBalance:\n      type: object\n      properties:\n        balance:\n          type: number\n"
		}
	},
	"Error": "parse: paths: /orderMessage/: get: operation \"\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/responses/AllOrderMessages\": resolve reference \"#/components/responses/AllOrderMessages\": invalid schema reference \"#/components/responses/AllOrderMessages\""
}