{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Sciebo-RDS/Sciebo-RDS"
		},
		"file": {
			"name": "interface_port_metadata.yml",
			"size": 0,
			"path": "RDS/layer2_use_cases/interface_port_metadata.yml",
			"byteSize": 10289,
			"content": "openapi: 3.0.0\ninfo:\n  title: Interface for Ports used as metadata storage\n  version: '1.0'\n  contact:\n    name: Peter Heiss\n    email: peter.heiss@uni-muenster.de\n  description: |-\n    This api describes the metadata endpoints, which have to be implemented by all ports in the rds system, so the system is enabled to retrieve and set metadata from all different plattforms without knowing them.\n\n    You can imagine, that this api is like an interface that every port has to implement it.\n\n    All endpoints, which are described here, represents the required fields from datacite data scheme. So you can implement more endpoints in your port to support more fields, but this is required to work within rds system as a metadata port.\nservers:\n  - url: 'http://port:3000/metadata'\npaths:\n  '/project/{project-id}':\n    parameters:\n      - schema:\n          type: string\n        name: project-id\n        in: path\n        required: true\n    get:\n      summary: Get all metadata\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n              examples:\n                example-1:\n                  value:\n                    titles:\n                      - title: long title\n                        lang: en\n                    publisher: research publisher gmbh\n                    type:\n                      resourceType: ''\n                      resourceTypeGeneral: Poster\n      description: |-\n        Take a look at the datacite specification (https://raw.githubusercontent.com/datacite/schema/master/source/json/kernel-4.3/datacite_4.3_schema.json) for all useable keywords. \n\n        See the examples to see, how to use it.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                metadata:\n                  type: object\n                userId:\n                  $ref: '#/components/schemas/portusername'\n            examples:\n              example-1:\n                value:\n                  userId: admin\n                  metadata:\n                    titles: ''\n                    publisher: ''\n                    type: ''\n              example-2:\n                value:\n                  metadata: {}\n                  userId: admin\n        description: The metadata request object\n    delete:\n      summary: Remove a project from this service\n      responses:\n        '204':\n          description: No Content\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                userId:\n                  $ref: '#/components/schemas/portusername'\n    patch:\n      summary: Update metadata in service for projectId\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n              examples:\n                example-1:\n                  value:\n                    titles:\n                      - title: long title\n                        lang: en\n                    publisher: research publisher gmbh\n                    type:\n                      resourceType: ''\n                      resourceTypeGeneral: Poster\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                metadata:\n                  anyOf:\n                    - type: object\n                    - type: 'null'\n                userId:\n                  $ref: '#/components/schemas/portusername'\n            examples:\n              example-1:\n                value:\n                  apiKey: 123\n                  userId: 1\n                  metadata:\n                    titles:\n                      - title: long title\n                        lang: en\n                    publisher: research publisher gmbh\n                    type:\n                      resourceType: ''\n                      resourceTypeGeneral: Poster\n        description: The given body has to be valid against the datacite jsonschema (without required fields).\n    put:\n      summary: Publishes in service for projectId\n      responses:\n        '204':\n          description: No Content\n        '400':\n          description: Continue\n      description: |-\n        Publishes the project, if possible.\n        This will disable any future changes to the given projectId.\n  '/project/{project-id}/files':\n    parameters:\n      - schema:\n          type: string\n        name: project-id\n        in: path\n        required: true\n    get:\n      summary: Get all files\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/File'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                userId:\n                  $ref: '#/components/schemas/portusername'\n    post:\n      summary: Add a file\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                userId:\n                  $ref: '#/components/schemas/portusername'\n                files:\n                  type: object\n                filename:\n                  type: string\n    delete:\n      summary: ''\n      responses:\n        '200':\n          description: OK\n  '/project/{project-id}/files/{file-id}':\n    parameters:\n      - schema:\n          type: string\n        name: project-id\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: file-id\n        in: path\n        required: true\n    get:\n      summary: Get specified file\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/File'\n      description: ''\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                userId:\n                  $ref: '#/components/schemas/portusername'\n    patch:\n      summary: ''\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                userId:\n                  $ref: '#/components/schemas/portusername'\n        description: ''\n    delete:\n      summary: ''\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                userId:\n                  $ref: '#/components/schemas/portusername'\n        description: ''\n  /project:\n    get:\n      summary: Returns all projects available in the service for user\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Project'\n              examples: {}\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                userId:\n                  $ref: '#/components/schemas/portusername'\n    parameters: []\n    post:\n      summary: Add a new project to the service\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                metadata:\n                  type: object\n                userId:\n                  $ref: '#/components/schemas/portusername'\ncomponents:\n  schemas:\n    portusername:\n      title: username for port\n      type: string\n      description: |-\n        This field is very special, because this helps very much to work with ports. So it has 2 different styles: The session and the normal format. The normal format will be used, when the port have to make the search by themself for example against the token storage.\n        The session format will be used to provide the login credentials through the RDS system directly to the port, without the need to lookup from port. The first part \u003cport-name\u003e symbolize, which port should parse the following credentials and is equal to the name, which set the port by themself in the registration-process at startup. It can be ignored by the port, but should not. The username and password are the user inputs from the web ui provided by token storage.\n        Beware: Do not use a token (e.g. for oauth) as password, because this is used in the token field.\n\n        session format:\n        \u003cport-name\u003e://\u003cusername\u003e:\u003cpassword\u003e\n\n        normal format:\n        \u003cusername\u003e\n    File:\n      title: File\n      type: object\n      properties:\n        id:\n          type: string\n        filename:\n          type: string\n        content:\n          type: string\n    Project:\n      title: Project\n      type: object\n      description: 'Represents a project in the service, which will be connected through the implementation of this port.'\n      properties:\n        projectId:\n          type: string\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n    Metadata:\n      title: Metadata\n      type: object\n  securitySchemes:\n    oauth-key:\n      type: oauth2\n      flows:\n        password:\n          tokenUrl: ''\n          refreshUrl: ''\n          scopes: {}\n      description: ''\n"
		}
	},
	"Error": "template: schemas: format imports: oas_schemas_gen.go:833:9: expected type, found '{' (and 10 more errors)",
	"NotImplemented": [
		"unsupported content types"
	]
}