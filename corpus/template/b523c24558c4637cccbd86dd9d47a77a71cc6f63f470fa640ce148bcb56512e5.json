{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/LuckPerms/rest-api"
		},
		"file": {
			"name": "luckperms-openapi.yml",
			"size": 0,
			"path": "src/main/resources/luckperms-openapi.yml",
			"byteSize": 44554,
			"content": "openapi: 3.0.0\ninfo:\n  title: LuckPerms REST API\n  description: The LuckPerms REST API allows developers to query LuckPerms data using HTTP calls.\n  version: '1.0'\n  contact:\n    name: LuckPerms Team\n    url: 'https://luckperms.net'\n  license:\n    name: MIT\n    url: 'https://github.com/LuckPerms/LuckPerms/blob/master/LICENSE.txt'\nservers:\n  - url: ../\ntags:\n  - name: Users\n    description: API methods for LuckPerms users.\n  - name: Groups\n    description: API methods for LuckPerms groups.\n  - name: Actions\n    description: API methods for LuckPerms actions.\npaths:\n  /user:\n    get:\n      summary: Get all existing users\n      operationId: get-users\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/UniqueId'\n              examples:\n                example-1:\n                  value:\n                    - c1d60c50-70b5-4722-8057-87767557e50d\n      description: Returns an array of all known users.\n      tags:\n        - Users\n    post:\n      summary: Create a new user\n      operationId: create-user\n      responses:\n        '201':\n          description: User created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              examples:\n                example-1:\n                  value:\n                    uniqueId: c1d60c50-70b5-4722-8057-87767557e50d\n                    username: Luck\n                    nodes:\n                      - key: group.default\n                        type: inheritance\n                        value: true\n                        context: []\n                    metadata:\n                      meta: {}\n                      primaryGroup: default\n        '400':\n          description: Missing required information\n        '409':\n          description: User already exists\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewUser'\n            examples:\n              example-1:\n                value:\n                  uniqueId: c1d60c50-70b5-4722-8057-87767557e50d\n                  username: Luck\n        description: ''\n      description: Create a new user.\n      tags:\n        - Users\n  /user/search:\n    get:\n      summary: Search for users with given nodes\n      tags:\n        - Users\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSearchResult'\n              examples:\n                example-1:\n                  value:\n                    - uniqueId: c1d60c50-70b5-4722-8057-87767557e50d\n                      results:\n                        - key: minecraft.command.ban\n                          type: permission\n                          value: true\n                          context:\n                            - key: server\n                              value: survival\n                          expiry: 1658428395\n      operationId: get-user-search\n      description: |-\n        Search for users with given nodes.\n\n        You must specify one of the query parameters in the request.\n      parameters:\n        - schema:\n            type: string\n            minLength: 1\n          in: query\n          name: key\n          description: Search for nodes with a key equal to\n        - schema:\n            type: string\n            minLength: 1\n          in: query\n          name: keyStartsWith\n          description: Search for nodes with a key starting with\n        - schema:\n            type: string\n            minLength: 1\n          in: query\n          name: metaKey\n          description: Search for meta nodes with a meta key equal to\n        - schema:\n            type: string\n            enum:\n              - regex_permission\n              - inheritance\n              - prefix\n              - suffix\n              - meta\n              - weight\n              - display_name\n          in: query\n          name: type\n          description: Search for nodes with a type equal to\n  '/user/{uniqueId}':\n    parameters:\n      - $ref: '#/components/parameters/uniqueId'\n    get:\n      summary: Get a users data\n      tags:\n        - Users\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              examples:\n                example-1:\n                  value:\n                    uniqueId: c1d60c50-70b5-4722-8057-87767557e50d\n                    username: Luck\n                    nodes:\n                      - key: group.default\n                        type: inheritance\n                        value: true\n                        context: []\n                      - key: minecraft.command.ban\n                        type: permission\n                        value: true\n                        context:\n                          - key: server\n                            value: survival\n                        expiry: 1658428395\n                    metadata:\n                      meta:\n                        nametag-color: red\n                        fly-speed: '5'\n                      prefix: '[Admin] '\n                      suffix: ' [the great]'\n                      primaryGroup: default\n        '404':\n          description: User doesn't exist\n      operationId: get-user\n      parameters:\n        - $ref: '#/components/parameters/uniqueId'\n      description: Get a user by unique id (UUID).\n    patch:\n      summary: Update a users data\n      operationId: patch-user\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Missing required information\n        '404':\n          description: User doesn't exist\n      description: Update a user's data\n      requestBody:\n        content:\n          application/json:\n            schema:\n              anyOf:\n                - properties:\n                    username:\n                      type: string\n                      minLength: 1\n                      example: Luck\n              type: object\n            examples:\n              example-1:\n                value:\n                  username: Luck\n        description: ''\n      tags:\n        - Users\n    delete:\n      summary: Delete a user\n      operationId: delete-user\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: User doesn't exist\n      description: Delete a user\n      tags:\n        - Users\n  '/user/{uniqueId}/nodes':\n    parameters:\n      - $ref: '#/components/parameters/uniqueId'\n    get:\n      summary: Get a users nodes (permissions data)\n      tags:\n        - Users\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeMap'\n              examples:\n                example-1:\n                  value:\n                    - key: group.default\n                      type: inheritance\n                      value: true\n                      context: []\n                    - key: minecraft.command.ban\n                      type: permission\n                      value: true\n                      context:\n                        - key: server\n                          value: survival\n                      expiry: 1658428395\n        '404':\n          description: User doesn't exist\n      operationId: get-user-nodes\n      parameters: []\n      description: Get a users nodes.\n    post:\n      summary: Add a node to a user\n      operationId: add-user-node\n      responses:\n        '200':\n          description: Ok - returns the updated nodes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeMap'\n              examples:\n                example-1:\n                  value:\n                    - key: minecraft.command.ban\n                      type: permission\n                      value: true\n                      context:\n                        - key: server\n                          value: survival\n                      expiry: 1658428395\n        '400':\n          description: Missing required information\n        '404':\n          description: User doesn't exist\n      description: Add a single node to the user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewNode'\n            examples:\n              example-1:\n                value:\n                  key: minecraft.command.ban\n                  value: true\n                  context:\n                    - key: server\n                      value: survival\n                  expiry: 1658428395\n      tags:\n        - Users\n    patch:\n      summary: Add multiple nodes to a user\n      operationId: add-user-nodes\n      responses:\n        '200':\n          description: Ok - returns the updated nodes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeMap'\n              examples:\n                example-1:\n                  value:\n                    - key: minecraft.command.ban\n                      type: permission\n                      value: true\n                      context:\n                        - key: server\n                          value: survival\n                      expiry: 1658428395\n        '400':\n          description: Missing required information\n        '404':\n          description: User doesn't exist\n      description: Add multiple nodes to the user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/NewNode'\n            examples:\n              example-1:\n                value:\n                  - key: minecraft.command.ban\n                    value: true\n                    context:\n                      - key: server\n                        value: survival\n                    expiry: 1658428395\n        description: ''\n      tags:\n        - Users\n    put:\n      summary: Replace (set) a users nodes\n      operationId: set-user-nodes\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Missing required information\n        '404':\n          description: User doesn't exist\n      description: Override the users nodes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/NewNode'\n            examples:\n              example-1:\n                value:\n                  - key: minecraft.command.ban\n                    value: true\n                    context:\n                      - key: server\n                        value: survival\n                    expiry: 1658428395\n      tags:\n        - Users\n    delete:\n      summary: Remove nodes from a user\n      operationId: clear-user-nodes\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: User doesn't exist\n      description: Delete some or all of the nodes from a user.\n      tags:\n        - Users\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/NewNode'\n            examples:\n              example-1:\n                value:\n                  - key: minecraft.command.ban\n                    value: true\n                    context:\n                      - key: server\n                        value: survival\n                    expiry: 1658428395\n        description: |-\n          Specify the nodes to be deleted.\n\n          If the request body is empty, all nodes will be deleted.\n  '/user/{uniqueId}/meta':\n    parameters:\n      - $ref: '#/components/parameters/uniqueId'\n    get:\n      summary: Get a users metadata\n      tags:\n        - Users\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n              examples:\n                example-1:\n                  value:\n                    meta:\n                      nametag-color: red\n                      fly-speed: '5'\n                    prefix: '[Admin] '\n                    suffix: ' [the great]'\n                    primaryGroup: default\n        '404':\n          description: User doesn't exist\n      operationId: get-user-uniqueId-meta\n      description: Get a users metadata\n  '/user/{uniqueId}/permissionCheck':\n    parameters:\n      - $ref: '#/components/parameters/uniqueId'\n    get:\n      summary: Run a permission check against a user\n      tags:\n        - Users\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PermissionCheckResult'\n              examples:\n                example-1:\n                  value:\n                    result: 'true'\n                    node:\n                      key: minecraft.command.ban\n                      type: permission\n                      value: true\n                      context:\n                        - key: server\n                          value: survival\n                      expiry: 1658428395\n        '400':\n          description: Missing required information\n        '404':\n          description: User doesn't exist\n      operationId: get-user-permission-check\n      description: Run a permission check against a user\n      parameters:\n        - schema:\n            type: string\n            minLength: 1\n          in: query\n          name: permission\n          description: The permission to check for\n          required: true\n    post:\n      summary: Run a permission check against a user with custom query options\n      operationId: post-user-permission-check\n      tags:\n        - Users\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PermissionCheckResult'\n              examples:\n                example-1:\n                  value:\n                    result: 'true'\n                    node:\n                      key: minecraft.command.ban\n                      type: permission\n                      value: true\n                      context:\n                        - key: server\n                          value: survival\n                      expiry: 1658428395\n        '400':\n          description: Missing required information\n        '404':\n          description: User doesn't exist\n      description: Run a permission check against a user with custom query options\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PermissionCheckRequest'\n            examples:\n              example-1:\n                value:\n                  permission: minecraft.command.ban\n                  queryOptions:\n                    contexts:\n                      - key: server\n                        value: survival\n  '/user/{uniqueId}/promote':\n    parameters:\n      - $ref: '#/components/parameters/uniqueId'\n    post:\n      summary: Promote a user along a track\n      operationId: user-promote\n      tags:\n        - Users\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PromotionResult'\n              examples:\n                example-1:\n                  value:\n                    success: true\n                    status: success\n                    groupFrom: mvp\n                    groupTo: vip\n        '400':\n          description: Missing required information\n        '404':\n          description: User or track doesn't exist\n      description: Promote a user along a track\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TrackRequest'\n            examples:\n              example-1:\n                value:\n                  track: staff\n              example-2:\n                value:\n                  track: staff\n                  context:\n                    - key: server\n                      value: survival\n  '/user/{uniqueId}/demote':\n    parameters:\n      - $ref: '#/components/parameters/uniqueId'\n    post:\n      summary: Demote a user along a track\n      operationId: user-demote\n      tags:\n        - Users\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DemotionResult'\n              examples:\n                example-1:\n                  value:\n                    success: true\n                    status: success\n                    groupFrom: vip\n                    groupTo: mvp\n        '400':\n          description: Missing required information\n        '404':\n          description: User or track doesn't exist\n      description: Demote a user along a track\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TrackRequest'\n            examples:\n              example-1:\n                value:\n                  track: staff\n              example-2:\n                value:\n                  track: staff\n                  context:\n                    - key: server\n                      value: survival\n  /group:\n    get:\n      summary: Get all existing groups\n      operationId: get-groups\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/Name'\n              examples:\n                example-1:\n                  value:\n                    - admin\n      description: Get all known groups\n      tags:\n        - Groups\n    post:\n      summary: Create a new group\n      operationId: create-group\n      responses:\n        '201':\n          description: Group created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n              examples:\n                example-1:\n                  value:\n                    name: admin\n                    nodes: []\n                    metadata:\n                      meta: {}\n        '400':\n          description: Missing required information\n        '409':\n          description: Group already exists\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewGroup'\n            examples:\n              example-1:\n                value:\n                  name: admin\n        description: ''\n      description: Create a new group.\n      tags:\n        - Groups\n  /group/search:\n    get:\n      summary: Search for groups with given nodes\n      tags:\n        - Groups\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroupSearchResult'\n              examples:\n                example-1:\n                  value:\n                    - name: admin\n                      results:\n                        - key: minecraft.command.ban\n                          type: permission\n                          value: true\n                          context:\n                            - key: server\n                              value: survival\n                          expiry: 1658428395\n      operationId: get-group-search\n      description: |-\n        Search for groups with given nodes.\n\n        You must specify one of the query parameters in the request.\n      parameters:\n        - schema:\n            type: string\n            minLength: 1\n          in: query\n          name: key\n          description: Search for nodes with a key equal to\n        - schema:\n            type: string\n            minLength: 1\n          in: query\n          name: keyStartsWith\n          description: Search for nodes with a key starting with\n        - schema:\n            type: string\n            minLength: 1\n          in: query\n          name: metaKey\n          description: Search for meta nodes with a meta key equal to\n        - schema:\n            type: string\n            enum:\n              - regex_permission\n              - inheritance\n              - prefix\n              - suffix\n              - meta\n              - weight\n              - display_name\n          in: query\n          name: type\n          description: Search for nodes with a type equal to\n  '/group/{name}':\n    parameters:\n      - $ref: '#/components/parameters/name'\n    get:\n      summary: Get a groups data\n      tags:\n        - Groups\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n              examples:\n                example-1:\n                  value:\n                    name: admin\n                    displayName: Admin\n                    weight: 10\n                    nodes:\n                      - key: minecraft.command.ban\n                        type: permission\n                        value: true\n                        context:\n                          - key: server\n                            value: survival\n                        expiry: 1658428395\n                    metadata:\n                      meta:\n                        nametag-color: red\n                        fly-speed: '5'\n                      prefix: '[Admin] '\n                      suffix: ' [the great]'\n                      primaryGroup: admin\n        '404':\n          description: Group doesn't exist\n      operationId: get-group\n      parameters:\n        - $ref: '#/components/parameters/name'\n      description: Get a group\n    delete:\n      summary: Delete a group\n      operationId: delete-group\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: Group doesn't exist\n      description: Delete a group\n      tags:\n        - Groups\n  '/group/{name}/nodes':\n    parameters:\n      - $ref: '#/components/parameters/name'\n    get:\n      summary: Get a groups nodes (permissions data)\n      tags:\n        - Groups\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeMap'\n              examples:\n                example-1:\n                  value:\n                    - key: minecraft.command.ban\n                      type: permission\n                      value: true\n                      context:\n                        - key: server\n                          value: survival\n                      expiry: 1658428395\n        '404':\n          description: Group doesn't exist\n      operationId: get-group-nodes\n      parameters: []\n      description: Get a groups nodes.\n    post:\n      summary: Add a node to a group\n      operationId: add-group-node\n      responses:\n        '200':\n          description: Ok - returns the updated nodes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeMap'\n              examples:\n                example-1:\n                  value:\n                    - key: minecraft.command.ban\n                      type: permission\n                      value: true\n                      context:\n                        - key: server\n                          value: survival\n                      expiry: 1658428395\n        '400':\n          description: Missing required information\n        '404':\n          description: Group doesn't exist\n      description: Add a single node to the group\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewNode'\n            examples:\n              example-1:\n                value:\n                  key: minecraft.command.ban\n                  value: true\n                  context:\n                    - key: server\n                      value: survival\n                  expiry: 1658428395\n      tags:\n        - Groups\n    patch:\n      summary: Add multiple Group Nodes\n      operationId: add-group-nodes\n      responses:\n        '200':\n          description: Ok - returns the updated nodes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeMap'\n              examples:\n                example-1:\n                  value:\n                    - key: minecraft.command.ban\n                      type: permission\n                      value: true\n                      context:\n                        - key: server\n                          value: survival\n                      expiry: 1658428395\n        '400':\n          description: Missing required information\n        '404':\n          description: Group doesn't exist\n      description: Add multiple nodes to the group\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/NewNode'\n            examples:\n              example-1:\n                value:\n                  - key: minecraft.command.ban\n                    value: true\n                    context:\n                      - key: server\n                        value: survival\n                    expiry: 1658428395\n        description: ''\n      tags:\n        - Groups\n    put:\n      summary: Replace (set) a groups nodes\n      operationId: set-group-nodes\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Missing required information\n        '404':\n          description: Group doesn't exist\n      description: Override the groups nodes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/NewNode'\n            examples:\n              example-1:\n                value:\n                  - key: minecraft.command.ban\n                    value: true\n                    context:\n                      - key: server\n                        value: survival\n                    expiry: 1658428395\n      tags:\n        - Groups\n    delete:\n      summary: Remove nodes from a group\n      operationId: clear-group-nodes\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: Group doesn't exist\n      description: |-\n        Delete some or all of the nodes from a group.\n\n        If the request body is empty, all nodes will be deleted.\n      tags:\n        - Groups\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/NewNode'\n            examples:\n              example-1:\n                value:\n                  - key: minecraft.command.ban\n                    value: true\n                    context:\n                      - key: server\n                        value: survival\n                    expiry: 1658428395\n        description: |-\n          Specify the nodes to be deleted.\n\n          If the request body is empty, all nodes will be deleted.\n  '/group/{name}/meta':\n    parameters:\n      - $ref: '#/components/parameters/name'\n    get:\n      summary: Get a groups metadata\n      tags:\n        - Groups\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n              examples:\n                example-1:\n                  value:\n                    meta:\n                      nametag-color: red\n                      fly-speed: '5'\n                    prefix: '[Admin] '\n                    suffix: ' [the great]'\n                    primaryGroup: admin\n        '404':\n          description: Group doesn't exist\n      operationId: get-group-name-meta\n      description: Get the groups metadata\n  '/group/{name}/permissionCheck':\n    parameters:\n      - $ref: '#/components/parameters/name'\n    get:\n      summary: Run a permission check against a group\n      tags:\n        - Groups\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PermissionCheckResult'\n              examples:\n                example-1:\n                  value:\n                    result: 'true'\n                    node:\n                      key: minecraft.command.ban\n                      type: permission\n                      value: true\n                      context:\n                        - key: server\n                          value: survival\n                      expiry: 1658428395\n        '400':\n          description: Missing required information\n        '404':\n          description: Group doesn't exist\n      operationId: get-group-permission-check\n      description: Run a permission check against a group\n      parameters:\n        - schema:\n            type: string\n            minLength: 1\n          in: query\n          name: permission\n          description: The permission to check for\n          required: true\n    post:\n      summary: Run a permission check against a group with custom query options\n      operationId: post-group-permission-check\n      tags:\n        - Groups\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PermissionCheckResult'\n              examples:\n                example-1:\n                  value:\n                    result: 'true'\n                    node:\n                      key: minecraft.command.ban\n                      type: permission\n                      value: true\n                      context:\n                        - key: server\n                          value: survival\n                      expiry: 1658428395\n        '400':\n          description: Missing required information\n        '404':\n          description: Group doesn't exist\n      description: Run a permission check against a group with custom query options\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PermissionCheckRequest'\n            examples:\n              example-1:\n                value:\n                  permission: minecraft.command.ban\n                  queryOptions:\n                    contexts:\n                      - key: server\n                        value: survival\n  /action:\n    post:\n      summary: Submit a new action\n      operationId: submit-action\n      responses:\n        '202':\n          description: Accepted\n        '400':\n          description: Missing required information\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Action'\n      description: Submit a new action to the action logger.\n      tags:\n        - Actions\ncomponents:\n  schemas:\n    Node:\n      type: object\n      description: |-\n        Represents a LuckPerms \"node\".\n\n        Nodes encapsulate more than just permission assignments. Nodes are used to store data about inherited groups, as well as assigned prefixes, suffixes and meta values.\n      title: ''\n      properties:\n        key:\n          type: string\n          minLength: 1\n          example: minecraft.command.ban\n        type:\n          type: string\n          enum:\n            - permission\n            - regex_permission\n            - inheritance\n            - prefix\n            - suffix\n            - meta\n            - weight\n            - display_name\n        value:\n          type: boolean\n          default: true\n        context:\n          $ref: '#/components/schemas/ContextSet'\n        expiry:\n          type: integer\n          example: 1658428395\n      required:\n        - key\n        - type\n        - value\n        - context\n    NewNode:\n      type: object\n      x-examples:\n        example-1:\n          key: example.node\n          type: permission\n          value: true\n          context: {}\n          expiry: 1000000\n      description: |-\n        Represents a LuckPerms \"node\".\n\n        Nodes encapsulate more than just permission assignments. Nodes are used to store data about inherited groups, as well as assigned prefixes, suffixes and meta values.\n      properties:\n        key:\n          type: string\n          minLength: 1\n          example: minecraft.command.ban\n        value:\n          type: boolean\n          default: true\n        context:\n          $ref: '#/components/schemas/ContextSet'\n        expiry:\n          type: integer\n          example: 1658428395\n      required:\n        - key\n    Context:\n      type: object\n      x-examples:\n        example-1:\n          key: server\n          value: survival\n      properties:\n        key:\n          type: string\n          minLength: 1\n          example: server\n          pattern: '^[a-z0-9]+$'\n        value:\n          type: string\n          minLength: 1\n          example: survival\n          pattern: '^[a-z0-9]+$'\n      required:\n        - key\n        - value\n      description: A context pair.\n    ContextSet:\n      title: ContextSet\n      x-stoplight:\n        id: x6gu6czcagtng\n      type: array\n      items:\n        $ref: '#/components/schemas/Context'\n      description: A set of context pairs.\n      x-examples: {}\n    Group:\n      title: Group\n      x-stoplight:\n        id: 4xch4cn4mxc3u\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/Name'\n        displayName:\n          type: string\n          minLength: 1\n          example: Admin\n        weight:\n          type: integer\n        nodes:\n          $ref: '#/components/schemas/NodeMap'\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n      required:\n        - name\n        - nodes\n        - metadata\n    NewGroup:\n      title: NewGroup\n      x-stoplight:\n        id: 4xch4cn4mxc3u\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/Name'\n      required:\n        - name\n    User:\n      title: User\n      x-stoplight:\n        id: 4xch4cn4mxc3u\n      type: object\n      properties:\n        uniqueId:\n          $ref: '#/components/schemas/UniqueId'\n        username:\n          type: string\n          minLength: 1\n          example: Luck\n        parentGroups:\n          type: array\n          items:\n            $ref: '#/components/schemas/Name'\n        nodes:\n          $ref: '#/components/schemas/NodeMap'\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n      required:\n        - uniqueId\n        - nodes\n        - metadata\n    NewUser:\n      title: NewUser\n      x-stoplight:\n        id: 4xch4cn4mxc3u\n      type: object\n      properties:\n        uniqueId:\n          $ref: '#/components/schemas/UniqueId'\n        username:\n          type: string\n          minLength: 1\n          example: Luck\n      required:\n        - uniqueId\n        - username\n    NodeMap:\n      title: NodeMap\n      x-stoplight:\n        id: dlrdoescpnbhh\n      type: array\n      items:\n        $ref: '#/components/schemas/Node'\n      description: A map (array) of nodes.\n    Metadata:\n      title: Metadata\n      x-stoplight:\n        id: jweo4hdxmecgn\n      type: object\n      properties:\n        meta:\n          type: object\n        prefix:\n          type: string\n          example: '[Admin] '\n        suffix:\n          type: string\n          example: ' [the great]'\n        primaryGroup:\n          type: string\n          example: default\n          minLength: 1\n      required:\n        - meta\n      x-examples:\n        example-1:\n          meta:\n            nametag-color: red\n            fly-speed: '5'\n          prefix: '[Admin] '\n          suffix: ' [the great]'\n          primaryGroup: default\n      description: Metadata about a user or group.\n    UniqueId:\n      type: string\n      title: Unique Id\n      x-stoplight:\n        id: 1juihei0xo8qa\n      description: A player unique id (UUID)\n      example: c1d60c50-70b5-4722-8057-87767557e50d\n      format: uuid\n      pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'\n    Name:\n      type: string\n      title: Name\n      description: A group name\n      example: admin\n      pattern: '^[a-z0-9]+$'\n      minLength: 1\n    PermissionCheckResult:\n      title: PermissionCheckResult\n      x-stoplight:\n        id: ht61bwitr05b6\n      type: object\n      properties:\n        result:\n          type: string\n          enum:\n            - 'true'\n            - 'false'\n            - undefined\n          example: 'true'\n        node:\n          $ref: '#/components/schemas/Node'\n      required:\n        - result\n      description: The result returned after running a permission check.\n    PermissionCheckRequest:\n      title: PermissionCheckRequest\n      x-stoplight:\n        id: ht61bwitr05b6\n      type: object\n      description: The request parameters for a permission check.\n      properties:\n        permission:\n          type: string\n          example: minecraft.command.ban\n          minLength: 1\n          description: The permission to check for\n        queryOptions:\n          $ref: '#/components/schemas/QueryOptions'\n      required:\n        - permission\n      x-examples:\n        example-1:\n          permission: minecraft.command.ban\n          queryOptions:\n            contexts:\n              - key: server\n                value: survival\n        example-2:\n          permission: minecraft.command.ban\n          queryOptions:\n            mode: contextual\n            flags:\n              - resolve_inheritance\n              - include_nodes_without_server_context\n              - include_nodes_without_world_context\n              - apply_inheritance_nodes_without_server_context\n              - apply_inheritance_nodes_without_world_context\n            contexts:\n              - key: server\n                value: survival\n    QueryOptions:\n      title: QueryOptions\n      x-stoplight:\n        id: xwwcq7jm3sfhn\n      type: object\n      properties:\n        mode:\n          type: string\n          default: contextual\n          enum:\n            - contextual\n            - non_contextual\n        flags:\n          $ref: '#/components/schemas/QueryFlags'\n        contexts:\n          $ref: '#/components/schemas/ContextSet'\n    QueryFlags:\n      title: QueryFlags\n      x-stoplight:\n        id: stooif1ezfxv1\n      type: array\n      items:\n        type: string\n        enum:\n          - resolve_inheritance\n          - include_nodes_without_server_context\n          - include_nodes_without_world_context\n          - apply_inheritance_nodes_without_server_context\n          - apply_inheritance_nodes_without_world_context\n      default:\n        - resolve_inheritance\n        - include_nodes_without_server_context\n        - include_nodes_without_world_context\n        - apply_inheritance_nodes_without_server_context\n        - apply_inheritance_nodes_without_world_context\n    Action:\n      title: Action\n      x-stoplight:\n        id: bsufd88gmrjvi\n      type: object\n      x-examples:\n        example-1:\n          timestamp: 1658428395\n          source:\n            uniqueId: c1d60c50-70b5-4722-8057-87767557e50d\n            name: Luck\n          target:\n            uniqueId: 069a79f4-44e9-4726-a5be-fca90e38aaf5\n            name: Notch\n            type: user\n          description: permission set minecraft.command.ban true\n      description: ''\n      properties:\n        timestamp:\n          type: integer\n          description: 'The time when the action happened, defaults to the current time'\n          example: 1658428395\n        source:\n          type: object\n          description: Who performed the action\n          required:\n            - uniqueId\n            - name\n          properties:\n            uniqueId:\n              $ref: '#/components/schemas/UniqueId'\n            name:\n              type: string\n              minLength: 1\n              example: Luck\n        target:\n          type: object\n          description: Who/what was the action performed on\n          required:\n            - name\n            - type\n          properties:\n            uniqueId:\n              $ref: '#/components/schemas/UniqueId'\n            name:\n              type: string\n              example: Luck\n            type:\n              type: string\n              enum:\n                - user\n                - group\n                - track\n        description:\n          type: string\n          minLength: 1\n          example: permission set minecraft.command.ban true\n          description: A description of the action\n      required:\n        - source\n        - target\n        - description\n    PromotionResult:\n      title: PromotionResult\n      x-stoplight:\n        id: caj1zmymehuk1\n      type: object\n      properties:\n        success:\n          type: boolean\n        status:\n          type: string\n          enum:\n            - success\n            - added_to_first_group\n            - malformed_track\n            - end_of_track\n            - ambiguous_call\n            - undefined_failure\n          example: success\n        groupFrom:\n          type: string\n          minLength: 1\n          example: mvp\n        groupTo:\n          type: string\n          minLength: 1\n          example: vip\n      required:\n        - success\n        - status\n      description: The result of promoting a user.\n    DemotionResult:\n      title: DemotionResult\n      type: object\n      properties:\n        success:\n          type: boolean\n        status:\n          type: string\n          enum:\n            - success\n            - removed_from_first_group\n            - malformed_track\n            - not_on_track\n            - ambiguous_call\n            - undefined_failure\n          example: success\n        groupFrom:\n          type: string\n          minLength: 1\n          example: vip\n        groupTo:\n          type: string\n          minLength: 1\n          example: mvp\n      required:\n        - success\n        - status\n      description: The result of demoting a user.\n    TrackRequest:\n      title: TrackRequest\n      x-stoplight:\n        id: 73y5bg63c2m3y\n      type: object\n      properties:\n        track:\n          type: string\n          example: staff\n          minLength: 1\n        context:\n          $ref: '#/components/schemas/ContextSet'\n      required:\n        - track\n      x-examples:\n        example-1:\n          track: staff\n      description: A request to promote or demote a user along a track.\n    UserSearchResult:\n      title: UserSearchResult\n      type: object\n      properties:\n        uniqueId:\n          $ref: '#/components/schemas/UniqueId'\n        results:\n          $ref: '#/components/schemas/NodeMap'\n      description: ''\n    GroupSearchResult:\n      title: GroupSearchResult\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/Name'\n        results:\n          $ref: '#/components/schemas/NodeMap'\n      description: ''\n  securitySchemes:\n    apikey:\n      type: http\n      scheme: bearer\n      description: API Key used to authenticate\n  requestBodies: {}\n  parameters:\n    uniqueId:\n      name: uniqueId\n      in: path\n      schema:\n        type: string\n        format: uuid\n        pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'\n        example: c1d60c50-70b5-4722-8057-87767557e50d\n      required: true\n      description: A player unique id (UUID)\n    name:\n      name: name\n      in: path\n      schema:\n        type: string\n        example: admin\n        pattern: '^[a-z0-9]+$'\n        minLength: 1\n      required: true\n      description: A group name\nsecurity:\n  - apikey: []\n",
			"canonicalURL": "/github.com/LuckPerms/rest-api@8d6d88790c78b448dfb8e5ec6bf71a86dad4f24d/-/blob/src/main/resources/luckperms-openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/LuckPerms/rest-api/blob/8d6d88790c78b448dfb8e5ec6bf71a86dad4f24d/src/main/resources/luckperms-openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "template: defaults: execute template \"defaults\" for \"oas_defaults_gen.go\": template: set.tmpl:26:4: executing \"defaults/set\" at \u003cerrorf \"unsupported %#v: %s\" $.Default.Value $t\u003e: error calling errorf: unsupported []interface {}{\"resolve_inheritance\", \"include_nodes_without_server_context\", \"include_nodes_without_world_context\", \"apply_inheritance_nodes_without_server_context\", \"apply_inheritance_nodes_without_world_context\"}: pointer(*QueryFlags)"
}