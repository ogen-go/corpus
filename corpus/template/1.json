{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/korpling/graphANNIS"
		},
		"file": {
			"name": "openapi.yml",
			"path": "webservice/src/openapi.yml",
			"content": "openapi: \"3.0.2\"\ninfo:\n  title: graphANNIS\n  version: \"1\"\n  description: \u003e\n    Access the graphANNIS corpora and execute AQL queries with this service.\nservers:\n  - description: Your local developer service\n    url: http://localhost:5711/v1\n\nsecurity:\n  - bearerAuth: []\npaths:\n  /corpora:\n    get:\n      tags:\n        - corpora\n      summary: Get a list of all corpora the user is authorized to use.\n      operationId: listCorpora\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CorpusList\"\n  /corpora/{corpus}:\n    delete:\n      tags:\n        - corpora\n      summary: Delete the given corpus.\n      operationId: deleteCorpus\n      parameters:\n        - name: corpus\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"Deletion successful\"\n        \"404\":\n          description: \"Corpus was not found\"\n\n  /import:\n    post:\n      tags:\n        - administration\n      summary: Import all corpora which are part of the uploaded ZIP-file\n      description: This will search for all GraphML and relANNIS files in the uploaded ZIP file and imports them.\n      parameters:\n        - name: override_existing\n          in: query\n          description: If true, existing corpora will be overwritten by the uploaded ones.\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        required: true\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        \"202\":\n          description: Corpus import started. Returns a UUID for the background job which can be used with the `/jobs` endpoint\n          links:\n            getJob:\n              parameters:\n                uuid: \"$response.body#/uuid\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImportResult\"\n\n  /export:\n    post:\n      tags:\n        - administration\n      summary: Get all requested corpora as ZIP-file\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                corpora:\n                  $ref: \"#/components/schemas/CorpusList\"\n      responses:\n        \"202\":\n          description: Corpus export started. Returns a UUID for the background job which can be used with the `/jobs` endpoint\n          links:\n            getJob:\n              parameters:\n                uuid: \"$response.body#/uuid\"\n          content:\n            application/json:\n              schema:\n                type: object\n                description: The UUID for the background job. Status can be queried via the /job endpoint and this UUID.\n                properties:\n                  uuid:\n                    type: string\n                    example: 7dac334e-7f8f-4f1c-919e-02912527f329\n\n  /jobs/{uuid}:\n    get:\n      tags:\n        - administration\n      operationId: getJob\n      summary: Get the status of the background job with the UUID\n      parameters:\n        - name: uuid\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"202\":\n          description: Job is still running\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Job\"\n        \"200\":\n          description: Job was finished successfully and result can be downloaded from the body\n        \"303\":\n          description: Job was finished successfully\n          content:\n            application/json:\n              schema:\n                type: array\n                description: The messages produced by the background job.\n                example:\n                  [\n                    \"started import of corpus GUM\",\n                    \"reading GraphML\",\n                    \"Error during import of GUM: corpus already exists\",\n                  ]\n                items:\n                  type: string\n        \"410\":\n          description: Job failed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Job\"\n        \"404\":\n          description: Job not found\n\n  /search/count:\n    post:\n      tags:\n        - search\n      summary: Count the number of results for a query.\n      operationId: count\n      requestBody:\n        description: The definition of the query to execute.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CountQuery\"\n      responses:\n        \"200\":\n          description: \"The extended count result.\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CountExtra\"\n        \"400\":\n          description: \"Query could not be parsed or corpus does not exist\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestError\"\n\n  /search/find:\n    post:\n      tags:\n        - search\n      summary: Find results for a query and return the IDs of the matched nodes.\n      operationId: find\n      requestBody:\n        description: The definition of the query to execute.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FindQuery\"\n      responses:\n        \"200\":\n          description: \"The matches for the given query.\"\n          content:\n            text/plain:\n              schema:\n                type: string\n                format: binary\n                description: A textual representation of a list of matches. Each line describes a complete match. The single match is represented by the space-separated node IDs that matched.\n                example: \u003e\n                  GUM/GUM_whow_skittles#tok_925 GUM/GUM_whow_skittles#tok_926\n                  GUM/GUM_whow_skittles#tok_926 GUM/GUM_whow_skittles#tok_927\n        \"400\":\n          description: \"Query could not be parsed or corpus does not exist\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestError\"\n\n  /search/frequency:\n    post:\n      tags:\n        - search\n      summary: Find results for a query and return the IDs of the matched nodes.\n      operationId: frequency\n      requestBody:\n        description: The definition of the query to execute.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FrequencyQuery\"\n      responses:\n        \"200\":\n          description: \"Frequency of different annotation values as table\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FrequencyTable\"\n        \"400\":\n          description: \"Query could not be parsed or corpus does not exist\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestError\"\n\n  /search/node-descriptions:\n    get:\n      tags:\n        - search\n      summary: Parses a query and returns a description for all the nodes in the query.\n      operationId: nodeDescriptions\n      parameters:\n        - name: query\n          description: The query to parse\n          example: pos=\"NN\" . second#tok\n          schema:\n            type: string\n          in: query\n        - name: query_language\n          schema:\n            $ref: \"#/components/schemas/QueryLanguage\"\n          in: query\n\n      responses:\n        \"200\":\n          description: \"List of query node descriptions\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/QueryAttributeDescription\"\n              example:\n                - alternative: 0,\n                  query_fragment: pos=\"NN\"\n                  variable: \"1\"\n                  anno_name: \"pos\"\n                - alternative: 0,\n                  query_fragment: tok\n                  variable: \"second\"\n                  anno_name: null\n        \"400\":\n          description: \"Query could not be parsed\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestError\"\n\n  /corpora/{corpus}/subgraph:\n    post:\n      tags:\n        - corpora\n      summary: Get a subgraph of the corpus format given a list of nodes and a context.\n      operationId: subgraphForNodes\n      description: \u003e\n        This creates a subgraph for node IDs, which can e.g. generated by executing a `find` query.\n        The subgraph contains \n\n        - the given nodes, \n\n        - all tokens that are covered by the given nodes,\n\n        - all tokens left and right in the given context from the tokens covered by the give nodes,\n\n        - all other nodes covering the tokens of the given context.\n\n        The annotation graph also includes all edges between the included nodes.\n      parameters:\n        - name: corpus\n          in: path\n          description: The name of the corpus to get the subgraph for.\n          required: true\n          example: \"GUM\"\n          schema:\n            type: string\n      requestBody:\n        description: The definition of the subgraph to extract.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SubgraphWithContext\"\n      responses:\n        \"200\":\n          description: \"The subgraph in the GraphML format with the graphANNIS data model.\"\n          content:\n            application/xml:\n              schema:\n                type: string\n                format: binary\n              examples:\n                subgraph:\n                  $ref: \"#/components/examples/Subgraph\"\n\n  /corpora/{corpus}/subgraph-for-query:\n    get:\n      tags:\n        - corpora\n        - search\n      summary: Get a subgraph of the corpus format given a list of nodes and a context.\n      operationId: subgraphForQuery\n      description: \u003e\n        This only includes the nodes that are the result of the given query and no context is created\n        automatically.\n        The annotation graph also includes all edges between the included nodes.\n\n      parameters:\n        - name: corpus\n          in: path\n          description: The name of the corpus to get the subgraph for.\n          required: true\n          example: \"GUM\"\n          schema:\n            type: string\n        - name: query\n          in: query\n          description: The query which defines the nodes to include.\n          required: true\n          schema:\n            type: string\n          examples:\n            corpusgraph:\n              value: annis:node_type=\"corpus\"\n              summary: \"Extract the corpus graph\"\n            token:\n              value: tok\n              summary: \"All tokens\"\n        - name: query_language\n          in: query\n          schema:\n            $ref: \"#/components/schemas/QueryLanguage\"\n        - name: component_type_filter\n          in: query\n          description: If given, restricts the included edges to components with the given type.\n          schema:\n            $ref: \"#/components/schemas/AnnotationComponentType\"\n\n      responses:\n        \"200\":\n          description: \"The subgraph in the GraphML format with the graphANNIS data model.\"\n          content:\n            application/xml:\n              schema:\n                type: string\n                format: binary\n              examples:\n                subgraph:\n                  $ref: \"#/components/examples/Subgraph\"\n\n  /corpora/{corpus}/configuration:\n    get:\n      tags:\n        - corpora\n      summary: Get the corpus configuration object.\n      operationId: corpusConfiguration\n      description: The corpus configuration is created by the corpus authors to configure how the corpus should be displayed in query engines and visualizers.\n      parameters:\n        - name: corpus\n          in: path\n          description: The name of the corpus to get the configuration for.\n          required: true\n          example: \"GUM\"\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CorpusConfiguration\"\n        \"404\":\n          description: \"Corpus not found or access to corpus not allowed\"\n\n  /corpora/{corpus}/node-annotations:\n    get:\n      tags:\n        - corpora\n      summary: List all node annotations of the corpus.\n      operationId: nodeAnnotations\n      parameters:\n        - name: corpus\n          in: path\n          description: The name of the corpus to get the configuration for.\n          required: true\n          example: \"GUM\"\n          schema:\n            type: string\n        - name: list_values\n          in: query\n          description: If true, possible values are returned.\n          schema:\n            type: boolean\n            default: false\n        - name: only_most_frequent_values\n          in: query\n          description: If true, only the most frequent value per annotation is returned.\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: \"The list of annotations\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Annotation\"\n        \"404\":\n          description: \"Corpus not found or access to corpus not allowed\"\n\n  /corpora/{corpus}/components:\n    get:\n      tags:\n        - corpora\n      summary: List all edge components of the corpus.\n      operationId: components\n      parameters:\n        - name: corpus\n          in: path\n          description: The name of the corpus to get the components for.\n          required: true\n          example: \"GUM\"\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: Only return components with this type.\n          example: Dominance\n          schema:\n            type: string\n        - name: name\n          in: query\n          description: Only return components with this name.\n          example: edge\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"The list of components\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Component\"\n        \"404\":\n          description: \"Corpus not found or access to corpus not allowed\"\n\n  /corpora/{corpus}/edge-annotations/{type}/{layer}/{name}/:\n    get:\n      tags:\n        - corpora\n      summary: List all annotations of the corpus for a given edge component\n      operationId: edgeAnnotations\n      parameters:\n        - name: corpus\n          in: path\n          description: The name of the corpus to get the configuration for.\n          required: true\n          example: \"GUM\"\n          schema:\n            type: string\n        - name: type\n          in: path\n          description: The component type.\n          required: true\n          example: \"Dominance\"\n          schema:\n            type: string\n        - name: layer\n          in: path\n          description: The component layer.\n          required: true\n          example: \"const\"\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: The component name.\n          required: true\n          example: \"edge\"\n          schema:\n            type: string\n\n        - name: list_values\n          in: query\n          description: If true, possible values are returned.\n          schema:\n            type: boolean\n            default: false\n        - name: only_most_frequent_values\n          in: query\n          description: If true, only the most frequent value per annotation is returned.\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: \"The list of annotations\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Annotation\"\n        \"404\":\n          description: \"Corpus not found or access to corpus not allowed\"\n\n  /corpora/{corpus}/files:\n    get:\n      tags:\n        - corpora\n      summary: List the names of all associated file for the corpus.\n      operationId: listFiles\n      parameters:\n        - name: corpus\n          in: path\n          description: The name of the corpus to get the configuration for.\n          required: true\n          example: \"RIDGES_Herbology_Version9.0\"\n          schema:\n            type: string\n        - name: node\n          in: query\n          description: If given, only the files for the (sub-) corpus or document with this ID are returned.\n          required: false\n          schema:\n            type: string\n          example: \"GUM/GUM_whow_skittles\"\n      responses:\n        \"200\":\n          description: \"Returns the list of files\"\n          content:\n            default:\n              schema:\n                type: array\n                items:\n                  type: string\n                example:\n                  - \"RIDGES_Herbology_Version9.0/ridges_norm.config\"\n                  - \"RIDGES_Herbology_Version9.0/ridges_norm.css\"\n\n  /corpora/{corpus}/files/{name}:\n    get:\n      tags:\n        - corpora\n      summary: Get an associated file for the corpus by its name.\n      operationId: getFile\n      description: \u003e\n        The annotation graph of a corpus can contain special nodes of the type \"file\", \n        which are connected to (sub-) corpus and document nodes with a `PartOf` relation.\n        This endpoint allows to access the content of these file nodes.\n        It supports [HTTP range requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests) \n        if you only need to access parts of the file.\n      parameters:\n        - name: corpus\n          in: path\n          description: The name of the corpus to get the configuration for.\n          required: true\n          example: \"RIDGES_Herbology_Version9.0\"\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: The name of the file node.\n          required: true\n          example: \"RIDGES_Herbology_Version9.0/ridges_norm.config\"\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"Returns the content of the requested file.\"\n          content:\n            default:\n              schema:\n                type: string\n                format: binary\n\n        \"404\":\n          description: \"Corpus or file not found.\"\n  /groups:\n    get:\n      summary: Get all available user groups\n      operationId: listGroups\n      tags:\n        - administration\n      responses:\n        200:\n          description: All available user groups with their name and the corpora the user is allowed to access.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Group\"\n        403:\n          description: Access is forbidden if the requesting client does not have administrator privileges.\n\n  /groups/{name}:\n    put:\n      summary: Add or replace the user group given by its name\n      operationId: putGroup\n      tags:\n        - administration\n      parameters:\n        - name: \"name\"\n          in: path\n          required: true\n          example: \"academic\"\n          schema:\n            type: string\n      requestBody:\n        description: The group to add\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Group\"\n\n      responses:\n        200:\n          description: Group was added or replaced successfully.\n        403:\n          description: Access is forbidden if the requesting client does not have administrator privileges.\n    delete:\n      summary: Delete the user group given by its name\n      operationId: deleteGroup\n      tags:\n        - administration\n      parameters:\n        - name: \"name\"\n          in: path\n          required: true\n          example: \"academic\"\n          schema:\n            type: string\n\n      responses:\n        200:\n          description: Group was deleted successfully.\n        403:\n          description: Access is forbidden if the requesting client does not have administrator privileges.\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\n  schemas:\n    CorpusList:\n      description: List of corpus names/identifiers.\n      type: array\n      items:\n        type: string\n      example: [GUM, pcc2.1]\n\n    QueryLanguage:\n      type: string\n      enum: [AQL, AQLQuirksV3]\n      default: AQL\n\n    CountQuery:\n      type: object\n      description: Query definition for counting matches.\n      properties:\n        query:\n          type: string\n          description: The query to execute.\n          example: tok\n        query_language:\n          $ref: \"#/components/schemas/QueryLanguage\"\n        corpora:\n          $ref: \"#/components/schemas/CorpusList\"\n\n    FindQuery:\n      type: object\n      description: Query definition to find matches\n      properties:\n        query:\n          type: string\n          description: The query to execute.\n          example: tok\n        query_language:\n          $ref: \"#/components/schemas/QueryLanguage\"\n        corpora:\n          $ref: \"#/components/schemas/CorpusList\"\n        limit:\n          type: integer\n          nullable: true\n          default: null\n          description: Return at most `n` matches, where `n` is the limit.  Use `null` to allow unlimited result sizes.\n          example: 10\n        offset:\n          type: integer\n          default: 0\n          description: Skip the `n` first results, where `n` is the offset.\n        order:\n          type: string\n          default: Normal\n          enum:\n            - Normal\n            - Inverted\n            - Randomized\n            - NotSorted\n\n    FrequencyQuery:\n      type: object\n      description: Query definition to find matches\n      properties:\n        query:\n          type: string\n          description: The query to execute.\n          example: root#const:cat=/(ROOT|S)/\n        query_language:\n          $ref: \"#/components/schemas/QueryLanguage\"\n        corpora:\n          $ref: \"#/components/schemas/CorpusList\"\n        definition:\n          type: array\n          items:\n            type: object\n            properties:\n              ns:\n                description: The namespace of the annotation from which the attribute value is generated.\n                type: string\n                default: null\n                nullable: true\n                example: const\n              name:\n                description: The name of the annotation from which the attribute value is generated.\n                type: string\n                nullable: false\n                example: cat\n              node_ref:\n                description: The name of the query node from which the attribute value is generated.\n                type: string\n                nullable: false\n                example: \"root\"\n\n    SubgraphWithContext:\n      type: object\n      description: Defines a subgraph of an annotation graph using node IDs and a context.\n      properties:\n        node_ids:\n          description: A list of node IDs that should be part of the subgraph.\n          type: array\n          items:\n            type: string\n          example:\n            [GUM/GUM_whow_skittles#tok_925, GUM/GUM_whow_skittles#tok_926]\n        segmentation:\n          description: Segmentation to use for defining the context, Set to null or omit it if tokens should be used.\n          type: string\n          nullable: true\n          default: null\n          example: null\n        left:\n          description: Left context size.\n          type: integer\n          default: 0\n          example: 5\n        right:\n          description: Right context size.\n          type: integer\n          default: 0\n          example: 5\n\n    CountExtra:\n      type: object\n      description: Contains the extended results of the count query.\n      properties:\n        match_count:\n          type: integer\n          description: Total number of matches.\n          example: 79017\n        document_count:\n          type: integer\n          description: Number of documents with at least one match.\n          example: 230\n\n    AnnoKey:\n      description: Qualified name for annotation\n      type: object\n      properties:\n        name:\n          description: Name of the annotation.\n          type: string\n          example: pos\n        ns:\n          description: Namespace of the annotation.\n          type: string\n          example: stts\n\n    Annotation:\n      description: An annotation with a qualified name and a value.\n      type: object\n      properties:\n        key:\n          description: Qualified name or unique \"key\" for the annotation\n          $ref: \"#/components/schemas/AnnoKey\"\n        val:\n          description: Value of the annotation\n          type: string\n          example: VVFIN\n\n    Component:\n      description: Definition of an edge component\n      type: object\n      properties:\n        type:\n          $ref: \"#/components/schemas/AnnotationComponentType\"\n          example: Pointing\n        name:\n          description: Name of the component\n          type: string\n          example: dep\n        layer:\n          description: A layer name which allows to group different components into the same layer. Can be the empty string.\n          type: string\n          example: conll\n\n    AnnotationComponentType:\n      description: Type of component used for linguistic annotations.\n      type: string\n      enum:\n        - Coverage\n        - Dominance\n        - Pointing\n        - Ordering\n        - LeftToken\n        - RightToken\n        - PartOf\n\n    QueryAttributeDescription:\n      description: Description of an attribute of a query.\n      type: object\n      properties:\n        alternative:\n          type: integer\n          description: ID of the alternative this attribute is part of.\n        query_fragment:\n          type: string\n          description: Textual representation of the query fragment for this attribute.\n        variable:\n          type: string\n          description: Variable name of this attribute.\n        anno_name:\n          type: string\n          nullable: true\n          description: Optional annotation name represented by this attribute.\n        optional:\n          type: boolean\n          nullable: true\n          description: States whether this attribute is optional.\n\n    LineColumn:\n      type: object\n      properties:\n        line:\n          type: integer\n        column:\n          type: integer\n\n    LineColumnRange:\n      type: object\n      properties:\n        start:\n          $ref: \"#/components/schemas/LineColumn\"\n        end:\n          $ref: \"#/components/schemas/LineColumn\"\n      required:\n        - start\n\n    BadRequestError:\n      type: object\n      properties:\n        AQLSyntaxError:\n          type: object\n          properties:\n            desc:\n              type: string\n            location:\n              $ref: \"#/components/schemas/LineColumnRange\"\n          required:\n            - desc\n        AQLSemanticError:\n          type: object\n          properties:\n            desc:\n              type: string\n            location:\n              $ref: \"#/components/schemas/LineColumnRange\"\n          required:\n            - desc\n        ImpossibleSearch:\n          type: string\n        UUID:\n          type: string\n        IllegalNodePath:\n          type: string\n\n    FrequencyTable:\n      description: \u003e\n        Definition of the result of a `frequency` query.\n        This is an array of rows, and each row is an array of columns with the different\n        attribute values and a number of matches having this combination of attribute values.\n      type: array\n      items:\n        $ref: \"#/components/schemas/FrequencyTableRow\"\n\n    FrequencyTableRow:\n      type: object\n      properties:\n        values:\n          type: array\n          items:\n            type: string\n          example: [\"S\"]\n        count:\n          type: integer\n          example: 5197\n\n    CorpusConfiguration:\n      type: object\n      properties:\n        context:\n          type: object\n          description: Configuration for configuring context in subgraph queries.\n          properties:\n            default:\n              type: integer\n              description: The default context size.\n            sizes:\n              type: array\n              items:\n                type: integer\n              description: Available context sizes to choose from.\n              example: [1, 2, 5, 10]\n            max:\n              type: integer\n              description: If set, a maximum context size which should be enforced by the query system.\n              example: 25\n            segmentation:\n              type: string\n              description: Default segmentation to use for defining the context, Set to null or omit it if tokens should be used.\n              example: dipl\n        view:\n          type: object\n          description: Configuration how the results of a query should be shown\n          properties:\n            base_text_segmentation:\n              type: string\n              description: Default segmentation to use for the displaying the text, Set to null or omit it if tokens should be used.\n              example: dipl\n            page_size:\n              type: integer\n              description: Default number of results to show at once for paginated queries.\n              example: 10\n            hidden_annos:\n              type: array\n              items:\n                type: string\n              description: A list of fully qualified annotation names that should be hidden when displayed.\n        example_queries:\n          type: array\n          description: An array of example queries for the corpus with a description.\n          items:\n            $ref: \"#/components/schemas/ExampleQuery\"\n        visualizers:\n          type: array\n          description: An array of rules which visualizers to show for the search results.\n          items:\n            $ref: \"#/components/schemas/VisualizerRule\"\n\n    ExampleQuery:\n      type: object\n      properties:\n        query:\n          type: string\n        description:\n          type: string\n        query_language:\n          $ref: \"#/components/schemas/QueryLanguage\"\n\n    VisualizerRule:\n      type: object\n      description: A rule when to trigger a visualizer for a specific result.\n      properties:\n        element:\n          description: On which element type to trigger the visualizer on\n          type: string\n          enum: [node, edge]\n        layer:\n          description: \u003e\n            In which layer the element needs to be part of to trigger this visualizer. \n            Only relevant for edges, since only they are part of layers.\n            If not given, elements of all layers trigger this visualization.\n          type: string\n        vis_type:\n          description: The abstract type of visualization, e.g. \"tree\", \"discourse\", \"grid\", ...\n          type: string\n        display_name:\n          description: A text displayed to the user describing this visualization\n          type: string\n        visibility:\n          description: The default display state of the visualizer before any user interaction.\n          type: string\n          enum: [hidden, visible, permanent, preloaded]\n        mappings:\n          description: Additional configuration given as generic map of key values to the visualizer.\n          type: object\n          additionalProperties:\n            type: string\n\n    Group:\n      type: object\n      properties:\n        name:\n          type: string\n          example: \"academic\"\n        corpora:\n          $ref: \"#/components/schemas/CorpusList\"\n\n    Job:\n      type: object\n      properties:\n        job_type:\n          type: string\n          enum:\n            - Import\n            - Export\n        status:\n          type: string\n          enum:\n            - Running\n            - Failed\n            - Finished\n        messages:\n          type: array\n          items:\n            type: string\n          example:\n            [\n              \"started import of corpus GUM\",\n              \"reading GraphML\",\n              \"Error during import of GUM: corpus already exists\",\n            ]\n    ImportResult:\n      type: object\n      description: The UUID for the background job. Status can be queried via the /job endpoint and this UUID.\n      properties:\n        uuid:\n          type: string\n          example: 7dac334e-7f8f-4f1c-919e-02912527f329\n\n  examples:\n    Subgraph:\n      value: \u003e\n        \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n        \u003cgraphml\u003e\n          \u003ckey id=\"k0\" for=\"node\" attr.name=\"const::cat\" attr.type=\"string\"/\u003e\n          \u003ckey id=\"k1\" for=\"node\" attr.name=\"GUM::claws5\" attr.type=\"string\"/\u003e\n          \u003ckey id=\"k2\" for=\"node\" attr.name=\"annis::layer\" attr.type=\"string\"/\u003e\n          \u003ckey id=\"k3\" for=\"node\" attr.name=\"GUM::lemma\" attr.type=\"string\"/\u003e\n          \u003ckey id=\"k4\" for=\"node\" attr.name=\"annis::node_type\" attr.type=\"string\"/\u003e\n          \u003ckey id=\"k5\" for=\"node\" attr.name=\"GUM::penn_pos\" attr.type=\"string\"/\u003e\n          \u003ckey id=\"k6\" for=\"node\" attr.name=\"GUM::pos\" attr.type=\"string\"/\u003e\n          \u003ckey id=\"k7\" for=\"node\" attr.name=\"annis::tok\" attr.type=\"string\"/\u003e\n          \u003ckey id=\"k8\" for=\"node\" attr.name=\"GUM::tok_func\" attr.type=\"string\"/\u003e\n          \u003cgraph edgedefault=\"directed\"\u003e\n            \u003cnode id=\"GUM/GUM_whow_skittles#const_1_920\"\u003e\n              \u003cdata key=\"k4\"\u003enode\u003c/data\u003e\n              \u003cdata key=\"k2\"\u003econst\u003c/data\u003e\n              \u003cdata key=\"k0\"\u003ePP\u003c/data\u003e\n            \u003c/node\u003e\n            \u003cnode id=\"GUM/GUM_whow_skittles#tok_920\"\u003e\n              \u003cdata key=\"k4\"\u003enode\u003c/data\u003e\n              \u003cdata key=\"k2\"\u003edefault_ns\u003c/data\u003e\n              \u003cdata key=\"k7\"\u003efor\u003c/data\u003e\n              \u003cdata key=\"k8\"\u003eprep\u003c/data\u003e\n              \u003cdata key=\"k6\"\u003eIN\u003c/data\u003e\n              \u003cdata key=\"k5\"\u003eIN\u003c/data\u003e\n              \u003cdata key=\"k1\"\u003ePRP\u003c/data\u003e\n              \u003cdata key=\"k3\"\u003efor\u003c/data\u003e\n            \u003c/node\u003e\n            \u003cnode id=\"GUM/GUM_whow_skittles#tok_921\"\u003e\n              \u003cdata key=\"k4\"\u003enode\u003c/data\u003e\n              \u003cdata key=\"k2\"\u003edefault_ns\u003c/data\u003e\n              \u003cdata key=\"k7\"\u003ea\u003c/data\u003e\n              \u003cdata key=\"k8\"\u003edet\u003c/data\u003e\n              \u003cdata key=\"k6\"\u003eDT\u003c/data\u003e\n              \u003cdata key=\"k5\"\u003eDT\u003c/data\u003e\n              \u003cdata key=\"k1\"\u003eAT0\u003c/data\u003e\n              \u003cdata key=\"k3\"\u003ea\u003c/data\u003e\n            \u003c/node\u003e\n            \u003cedge id=\"e0\" source=\"GUM/GUM_whow_skittles#const_1_920\" target=\"GUM/GUM_whow_skittles#tok_920\" label=\"Coverage/default_layer/\"\u003e\n            \u003c/edge\u003e\n            \u003cedge id=\"e1\" source=\"GUM/GUM_whow_skittles#const_1_920\" target=\"GUM/GUM_whow_skittles#tok_921\" label=\"Coverage/default_layer/\"\u003e\n            \u003c/edge\u003e\n            \u003cedge id=\"e2\" source=\"GUM/GUM_whow_skittles#const_1_920\" target=\"GUM/GUM_whow_skittles#tok_920\" label=\"Dominance/const/\"\u003e\n            \u003c/edge\u003e\n            \u003cedge id=\"e3\" source=\"GUM/GUM_whow_skittles#const_1_920\" target=\"GUM/GUM_whow_skittles#tok_920\" label=\"Dominance/const/edge\"\u003e\n            \u003c/edge\u003e\n            \u003cedge id=\"e4\" source=\"GUM/GUM_whow_skittles#tok_920\" target=\"GUM/GUM_whow_skittles#tok_921\" label=\"Ordering/annis/\"\u003e\n            \u003c/edge\u003e\n          \u003c/graph\u003e\n        \u003c/graphml\u003e\n"
		}
	},
	"Error": "json: failed to execute template json for oas_json_gen.go: template: encoders_struct.tmpl:60:9: executing \"json/encoders_struct\" at \u003c$.HasDefaultFields\u003e: error calling HasDefaultFields: reflect: call of reflect.Value.IsZero on zero Value"
}