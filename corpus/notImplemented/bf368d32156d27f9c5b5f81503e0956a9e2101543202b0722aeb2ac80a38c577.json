{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wso2/product-apim-tooling"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "import-export-cli/cmd/testdata/MyProduct-1.0.0-malformed/APIs/PizzaShackAPI-1.0.0/Definitions/swagger.yaml",
			"byteSize": 9148,
			"content": "openapi: 3.0.0\ninfo:\n  title: PizzaShackAPI\n  description: |\n    This is a RESTFul API for Pizza Shack online pizza delivery store.\n  contact:\n    name: John Doe\n    url: http://www.pizzashack.com\n    email: architecture@pizzashack.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\nservers:\n -\n  url: /\nsecurity:\n -\n  default: []\npaths:\n  /order:\n    post:\n      description: Create a new Order\n      requestBody:\n        $ref: '#/components/requestBodies/Order'\n      responses:\n        \"201\":\n          description: Created. Successful response with the newly created object as entity inthe body.Location header contains URL of newly created entity.\n          headers:\n            Location:\n              description: The URL of the newly created resource.\n              style: simple\n              explode: false\n              schema:\n                type: string\n            Content-Type:\n              description: The content type of the body.\n              style: simple\n              explode: false\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        \"400\":\n          description: Bad Request. Invalid request or validation error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"415\":\n          description: Unsupported Media Type. The entity of the request was in a not supported format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n       -\n        default: []\n      x-auth-type: Application \u0026 Application User\n      x-throttling-tier: Unlimited\n      x-wso2-application-security:\n        security-types:\n         - oauth2\n        optional: false\n  /menu:\n    get:\n      description: Return a list of available menu items\n      responses:\n        \"200\":\n          description: OK. List of APIs is returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MenuItem'\n        \"406\":\n          description: Not Acceptable. The requested media type is not supported\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n       -\n        default: []\n      x-auth-type: Application \u0026 Application User\n      x-throttling-tier: Unlimited\n      x-wso2-application-security:\n        security-types:\n         - oauth2\n        optional: false\n  /order/{orderId}:\n    get:\n      description: Get details of an Order\n      parameters:\n       -\n        name: orderId\n        in: path\n        description: Order Id\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n          format: string\n      responses:\n        \"200\":\n          description: OK Requested Order will be returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        \"404\":\n          description: Not Found. Requested API does not exist.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"406\":\n          description: Not Acceptable. The requested media type is not supported\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n       -\n        default: []\n      x-auth-type: Application \u0026 Application User\n      x-throttling-tier: Unlimited\n      x-wso2-application-security:\n        security-types:\n         - oauth2\n        optional: false\n    put:\n      description: Update an existing Order\n      parameters:\n       -\n        name: orderId\n        in: path\n        description: Order Id\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n          format: string\n      requestBody:\n        $ref: '#/components/requestBodies/Order'\n      responses:\n        \"200\":\n          description: OK. Successful response with updated Order\n          headers:\n            Location:\n              description: The URL of the newly created resource.\n              style: simple\n              explode: false\n              schema:\n                type: string\n            Content-Type:\n              description: The content type of the body.\n              style: simple\n              explode: false\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        \"400\":\n          description: Bad Request. Invalid request or validation error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: Not Found. The resource to be updated does not exist.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n       -\n        default: []\n      x-auth-type: Application \u0026 Application User\n      x-throttling-tier: Unlimited\n      x-wso2-application-security:\n        security-types:\n         - oauth2\n        optional: false\n    delete:\n      description: Delete an existing Order\n      parameters:\n       -\n        name: orderId\n        in: path\n        description: Order Id\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n          format: string\n      responses:\n        \"200\":\n          description: OK. Resource successfully deleted.\n        \"404\":\n          description: Not Found. Resource to be deleted does not exist.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n       -\n        default: []\n      x-auth-type: Application \u0026 Application User\n      x-throttling-tier: Unlimited\n      x-wso2-application-security:\n        security-types:\n         - oauth2\n        optional: false\ncomponents:\n  schemas:\n    ErrorListItem:\n      title: Description of individual errors that may have occurred during a request.\n      required:\n       - code\n       - message\n      properties:\n        message:\n          type: string\n          description: Description about individual errors occurred\n        code:\n          type: integer\n          format: int64\n    MenuItem:\n      title: Pizza menu Item\n      required:\n       - name\n      properties:\n        price:\n          type: string\n        description:\n          type: string\n        name:\n          type: string\n        image:\n          type: string\n    Order:\n      title: Pizza Order\n      required:\n       - orderId\n      properties:\n        customerName:\n          type: string\n        delivered:\n          type: boolean\n        address:\n          type: string\n        pizzaType:\n          type: string\n        creditCardNumber:\n          type: string\n        quantity:\n          type: number\n        orderId:\n          type: string\n    Error:\n      title: Error object returned with 4XX HTTP status\n      required:\n       - code\n       - message\n      properties:\n        message:\n          type: string\n          description: Error message.\n        error:\n          type: array\n          description: If there are more than one error list them out. Ex. list out validation errors by each field.\n          items:\n            $ref: '#/components/schemas/ErrorListItem'\n        description:\n          type: string\n          description: A detail description about the error message.\n        code:\n          type: integer\n          format: int64\n        moreInfo:\n          type: string\n          description: Preferably an url with more details about the error.\n  requestBodies:\n    Order:\n      description: Order object that needs to be added\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Order'\n      required: true\n  securitySchemes:\n    default:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://test.com\n          scopes: {}\nx-wso2-auth-header: Authorization\nx-wso2-cors:\n  corsConfigurationEnabled: false\n  accessControlAllowOrigins:\n   - '*'\n  accessControlAllowCredentials: false\n  accessControlAllowHeaders:\n   - authorization\n   - Access-Control-Allow-Origin\n   - Content-Type\n   - SOAPAction\n   - apikey\n   - Internal-Key\n  accessControlAllowMethods:\n   - GET\n   - PUT\n   - POST\n   - DELETE\n   - PATCH\n   - OPTIONS\nx-wso2-production-endpoints:\n  urls:\n   - https://localhost:9443/am/sample/pizzashack/v1/api/\n  type: http\nx-wso2-sandbox-endpoints:\n  urls:\n   - https://localhost:9443/am/sample/pizzashack/v1/api/\n  type: http\nx-wso2-basePath: /pizzashack/1.0.0\nx-wso2-transports:\n - http\n - https\nx-wso2-response-cache:\n  enabled: false\n  cacheTimeoutInSeconds: 300\n",
			"canonicalURL": "/github.com/wso2/product-apim-tooling@4d849906c450c817cebbb9c5d0b8c59242211a00/-/blob/import-export-cli/cmd/testdata/MyProduct-1.0.0-malformed/APIs/PizzaShackAPI-1.0.0/Definitions/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/wso2/product-apim-tooling/blob/4d849906c450c817cebbb9c5d0b8c59242211a00/import-export-cli/cmd/testdata/MyProduct-1.0.0-malformed/APIs/PizzaShackAPI-1.0.0/Definitions/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/menu\": get: security: security \"default\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}