{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/sinch.conversation/openapi.yaml",
			"byteSize": 97863,
			"content": "openapi: 3.0.0\ninfo:\n  description: \u003e\n    This is a generated connector for [Sinch Conversation API v1.0](https://www.sinch.com/) OpenAPI specification.\n    \n    Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.\n\n    The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.\n  x-ballerina-init-description: \n    The connector initialization requires setting the API credentials.\n\n    Create a [Sinch account](https://www.sinch.com/) and obtain tokens by following [this guide](https://developers.sinch.com/docs/conversation/api-reference#authentication).\n  x-ballerina-display:\n    label: Sinch Conversation\n    iconPath: \"icon.png\"\n  title: Conversation API\n  version: \"1.0\"\n  license:\n    name: MIT\n    url: \"https://www.sinch.com/toc\"\n  contact:\n    email: support@sinch.com\n    name: support at sinch\nservers:\n  - url: \"https://eu.conversation.api.sinch.com\"\n  - url: \"https://us.conversation.api.sinch.com\"\nsecurity:\n  - Basic: []\n  - oAuth2: []\npaths:\n  '/v1/projects/{project_id}/messages:send':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n    post:\n      description: \u003e\n        You can send a message from a Conversation app to a contact in that app.\n        The message is added to the active conversation with the contact if a conversation already exists.\n        If no active conversation exists a new one is started automatically.\n      tags:\n        - Messages\n      summary: Send a message\n      operationId: Messages_SendMessage\n      requestBody:\n        $ref: \"#/components/requestBodies/SendMessageRequest\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/sendMessageResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/messages/{message_id}':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n      - $ref: \"#/components/parameters/message_id\"\n    get:\n      description: Retrieves a specific message by its message ID.\n      tags:\n        - Messages\n      summary: Get a message\n      operationId: Messages_GetMessage\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/getMessageResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n    delete:\n      description: \u003e\n        Deletes a message that is part of a conversation.\n        Removing the last message of a conversation will not delete the conversation.\n      tags:\n        - Messages\n      summary: Deletes a message\n      operationId: Messages_DeleteMessage\n      responses:\n        \"200\":\n          description: A successful response.\n          content:\n            application/json:\n              schema: {}\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/apps':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n    get:\n      tags:\n        - App\n      summary: List all apps for a given project\n      operationId: App_ListApps\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/listAppsResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n    post:\n      tags:\n        - App\n      summary: Creates an app\n      operationId: App_CreateApp\n      requestBody:\n        $ref: \"#/components/requestBodies/CreateAppRequest\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/createAppResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/apps/{app_id}':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n      - $ref: \"#/components/parameters/app_id\"\n    get:\n      tags:\n        - App\n      summary: Get an app\n      operationId: App_GetApp\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/getAppResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n    delete:\n      tags:\n        - App\n      summary: Delete an app\n      operationId: App_DeleteApp\n      responses:\n        \"200\":\n          description: A successful response.\n          content:\n            application/json:\n              schema: {}\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n    patch:\n      tags:\n        - App\n      summary: Update an app\n      operationId: App_UpdateApp\n      parameters:\n        - $ref: '#/components/parameters/update_mask.paths'\n      requestBody:\n        $ref: \"#/components/requestBodies/UpdateAppRequest\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/updateAppResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/apps/{app_id}/webhooks':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n      - $ref: \"#/components/parameters/app_id\"\n    get:\n      tags:\n        - Webhooks\n      summary: List all webhooks for a given app\n      operationId: Webhooks_ListWebhooks\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/listWebhooksResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/capability:query':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n    post:\n      description: This method is asynchronous - it immediately returns the requested Capability registration. Capability check is then delivered as a callback to registered webhooks with trigger CAPABILITY for every reachable channel.\n      tags:\n        - Capability\n      summary: Capability lookup\n      operationId: Capability_QueryCapability\n      requestBody:\n        $ref: \"#/components/requestBodies/QueryCapabilityRequest\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/queryCapabilityResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/contacts':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n    get:\n      tags:\n        - Contact\n      summary: Get contacts\n      operationId: Contact_ListContacts\n      parameters:\n        - description: \u003e\n            Optional. The maximum number of contacts to fetch. The default is 10\n            and the maximum is 20.\n          name: page_size\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - description: Optional. Next page token previously returned if any.\n          name: page_token\n          in: query\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/listContactsResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n    post:\n      tags:\n        - Contact\n      summary: Create a Contact\n      operationId: Contact_CreateContact\n      requestBody:\n        $ref: \"#/components/requestBodies/CreateContactRequest\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/createContactResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/contacts/{contact_id}':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n      - $ref: \"#/components/parameters/contact_id\"\n    get:\n      tags:\n        - Contact\n      summary: Get a Contact\n      operationId: Contact_GetContact\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/getContactResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n    delete:\n      tags:\n        - Contact\n      summary: Delete a Contact\n      operationId: Contact_DeleteContact\n      responses:\n        \"200\":\n          description: A successful response.\n          content:\n            application/json:\n              schema: {}\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n    patch:\n      tags:\n        - Contact\n      summary: Update a Contact\n      operationId: Contact_UpdateContact\n      parameters:\n        - $ref: '#/components/parameters/update_mask.paths'\n      requestBody:\n        $ref: \"#/components/requestBodies/UpdateContactRequest\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/updateContactResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/contacts/{destination_id}:merge':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n      - $ref: \"#/components/parameters/destination_id\"\n    post:\n      description: \u003e\n        The remaining contact will contain all conversations that the removed\n        contact did. If both contacts had conversations within the same App,\n        messages from the removed contact will be merged into corresponding active\n        conversations in the destination contact. Channel\n        identities will be moved from the source contact to the destination contact\n        only for channels that weren't present there before. Moved channel\n        identities will be placed at the bottom of the channel priority list.\n        Optional fields from the source contact will be copied only if\n        corresponding fields in the destination contact are empty The contact being\n        removed cannot be referenced after this call.\n      tags:\n        - Contact\n      summary: Merge two contacts\n      operationId: Contact_MergeContact\n      requestBody:\n        $ref: \"#/components/requestBodies/MergeContactRequest\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/mergeContactResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/conversations':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n    get:\n      description: This operation lists all conversations that are associated with an app and/or a contact.\n      tags:\n        - Conversation\n      summary: List conversations\n      operationId: Conversation_ListConversations\n      parameters:\n        - $ref: '#/components/parameters/query_app_id'\n          description: At least one of 'app_id' or 'contact_id' must be present.\n        - $ref: '#/components/parameters/query_contact_id'\n          description: At least one of 'app_id' or 'contact_id' must be present.\n        - description: Required. True if only active conversations should be listed.\n          name: only_active\n          in: query\n          schema:\n            type: boolean\n          required: true\n        - description: \u003e\n            Optional. The maximum number of conversations to fetch. Defaults to 10\n            and the maximum is 20.\n          name: page_size\n          in: query\n          schema:\n            type: integer\n            format: int32\n        - description: Optional. Next page token previously returned if any.\n          name: page_token\n          in: query\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/listConversationsResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n    post:\n      description: \u003e\n        Creates a new empty conversation. It is generally not needed to create\n        a conversation explicitly since sending or receiving a message\n        automatically creates a new conversation if it does not already\n        exist between the given app and contact.\n        Creating empty conversation is useful if the metadata of the conversation\n        should be populated when the first message in the conversation is a contact message\n        or the first message in the conversation comes out-of-band and\n        needs to be injected with InjectMessage endpoint.\n      tags:\n        - Conversation\n      summary: Creates a conversation\n      operationId: Conversation_CreateConversation\n      requestBody:\n        $ref: \"#/components/requestBodies/CreateConversationRequest\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/createConversationResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/conversations/{conversation_id}':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n      - $ref: \"#/components/parameters/conversation_id\"\n    get:\n      description: \u003e\n        Retrieves a conversation by id. A conversation has two participating\n        entities, an app and a contact.\n      tags:\n        - Conversation\n      summary: Get a conversation\n      operationId: Conversation_GetConversation\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/getConversationResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n    delete:\n      description: Deletes a conversation together with all the messages sent as part of the conversation.\n      tags:\n        - Conversation\n      summary: Deletes a conversation\n      operationId: Conversation_DeleteConversation\n      responses:\n        \"200\":\n          description: A successful response.\n          content:\n            application/json:\n              schema: {}\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n    patch:\n      description: \u003e\n        This operation updates a conversation which can, for instance, be used to\n        update the metadata associated with a conversation.\n      tags:\n        - Conversation\n      summary: Update a conversation\n      operationId: Conversation_UpdateConversation\n      parameters:\n        - $ref: '#/components/parameters/update_mask.paths'\n      requestBody:\n        $ref: \"#/components/requestBodies/UpdateConversationRequest\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/getConversationResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/conversations/{conversation_id}:stop':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n      - $ref: \"#/components/parameters/conversation_id\"\n    post:\n      description: \u003e\n        This operation stops the referenced conversation, if the conversation is still active.\n        A new conversation will be created if a new message is exchanged between the app or contact\n        that was part of the stopped conversation.\n      tags:\n        - Conversation\n      summary: Stop conversation\n      operationId: Conversation_StopActiveConversation\n      responses:\n        \"200\":\n          description: A successful response.\n          content:\n            application/json:\n              schema: {}\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/conversations/{message.conversation_id}:inject-message':\n    parameters:\n        - $ref: '#/components/parameters/project_id'\n        - description: Required. The ID of the conversation.\n          name: message.conversation_id\n          in: path\n          required: true\n          schema:\n            type: string\n    post:\n      description: This operation injects a conversation message in to a specific conversation.\n      tags:\n        - Conversation\n      summary: Inject messages\n      operationId: Conversation_InjectMessage\n      requestBody:\n        $ref: \"#/components/requestBodies/InjectMessageRequest\"\n      responses:\n        \"200\":\n          description: A successful response.\n          content:\n            application/json:\n              schema: {}\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  /v1/projects/{project_id}/events:send:\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n    post:\n      description: \u003e\n        Sends an event to the referenced contact from the referenced app.\n        Note that this operation enqueues the event in a queues so a successful\n        response only indicates that the event has been queued.\n      tags:\n        - Events\n      summary: Send an event\n      operationId: Events_SendEvent\n      requestBody:\n        description: Send event request.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SendEventRequest\"\n        required: true\n      responses:\n        \"200\":\n          description: A successful response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SendEventResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  \"/v1/projects/{project_id}/messages\":\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n      - $ref: \"#/components/parameters/query_conversation_id\"\n        description: One of `conversation_id` or `contact_id` needs to be present.\n      - $ref: \"#/components/parameters/query_contact_id\"\n        description: One of `conversation_id` or `contact_id` needs to be present.\n      - description: \u003e\n          Optional. Maximum number of messages to fetch. Defaults to 10\n          and the maximum is 20.\n        name: page_size\n        in: query\n        schema:\n          type: integer\n          format: int32\n      - description: Optional. Next page token previously returned if any.\n        name: page_token\n        in: query\n        schema:\n          type: string\n      - name: view\n        description: Conversation message view.\n        in: query\n        schema:\n          $ref: '#/components/schemas/ConversationMessagesView'\n    get:\n      description: \u003e\n        This operation lists all messages associated with a conversation or a contact.\n        The messages are ordered by their accept_time property in descending order,\n        where accept_time is a timestamp of when the message was enqueued by the Conversation API.\n        This means messages received most recently will be listed first.\n      tags:\n        - Conversation\n      summary: List messages\n      operationId: Conversation_ListMessages\n      responses:\n        \"200\":\n          description: A successful response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ListMessagesResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/messages:transcode':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n    post:\n      description: \u003e\n        Transcodes the message from the Conversation API format to the\n        channel-specific formats for the requested channels. No message\n        is sent to the contact.\n      tags:\n        - Transcoding\n      summary: Transcode a message\n      operationId: Transcoding_TranscodeMessage\n      requestBody:\n        description: Transaction code message request.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TranscodeMessageRequest\"\n        required: true\n      responses:\n        \"200\":\n          description: A successful response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TranscodeMessageResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/optins:register':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n      - $ref: \"#/components/parameters/request_id\"\n    post:\n      description: \u003e\n        This method is asynchronous - it returns immediately the\n        requested OptIn registration with any defaults resolved.\n        All changes of the actual opt-in status are then delivered as callbacks\n        to registered webhooks with trigger OPT_IN.\n      tags:\n        - OptIn \u0026 OptOut\n      summary: Register an opt-in\n      operationId: OptIn_RegisterOptIn\n      requestBody:\n        description: OptIn request.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OptIn\"\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OptInResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/optouts:register':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n      - $ref: \"#/components/parameters/request_id\"\n    post:\n      description: \u003e\n        This method is asynchronous - it returns immediately the\n        requested OptOut registration with any defaults resolved.\n        All changes of the actual opt-out status are then delivered as callbacks\n        to registered webhooks with trigger OPT_OUT.\n      tags:\n        - OptIn \u0026 OptOut\n      summary: Register an opt-out\n      operationId: OptIn_RegisterOptOut\n      requestBody:\n        $ref: \"#/components/requestBodies/registerOptOutRequest\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/OptOutResponse\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/webhooks':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n    post:\n      description: \u003e\n        Creates a webhook for receiving callbacks on specific triggers.\n        You can create up to 20 webhooks per app.\n      tags:\n        - Webhooks\n      summary: Create a new webhook\n      operationId: Webhooks_CreateWebhook\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Webhook\"\n        description: Required. The Webhook to create\n        required: true\n      responses:\n        \"200\":\n          description: A successful response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Webhook\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n  '/v1/projects/{project_id}/webhooks/{webhook_id}':\n    parameters:\n      - $ref: \"#/components/parameters/project_id\"\n      - $ref: \"#/components/parameters/webhook_id\"\n      - $ref: \"#/components/parameters/update_mask.paths\"\n    get:\n      tags:\n        - Webhooks\n      summary: Get a webhook\n      operationId: Webhooks_GetWebhook\n      responses:\n        \"200\":\n          description: A successful response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Webhook\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n    patch:\n      tags:\n        - Webhooks\n      summary: Update an existing webhook\n      operationId: Webhooks_UpdateWebhook\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Webhook\"\n        description: Required. The Webhook to update\n        required: true\n      responses:\n        \"200\":\n          description: A successful response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Webhook\"\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\n    delete:\n      tags:\n        - Webhooks\n      summary: Delete an existing webhook\n      operationId: Webhooks_DeleteWebhook\n      responses:\n        \"200\":\n          description: A successful response.\n          content:\n            application/json:\n              schema: {}\n        \"400\":\n          $ref: \"#/components/responses/400Error\"\n        \"401\":\n          $ref: \"#/components/responses/401Error\"\n        \"403\":\n          $ref: \"#/components/responses/403Error\"\n        \"500\":\n          $ref: \"#/components/responses/500Error\"\n        \"501\":\n          $ref: \"#/components/responses/501Error\"\ntags:\n  - description: \u003e\n      To start sending messages you must have a Conversation API [**app**](https://dashboard.sinch.com/convapi/apps). The app holds information about the channel credentials and registered webhooks to which the API delivers callbacks such as message delivery reports and contact messages. If you don't already have an app please follow the instructions in the getting started guide available in the [Sinch Dashboard](https://dashboard.sinch.com/convapi/getting-started) to create one.\n    name: Messages\n  - description: \u003e\n      Apps are created and configured through the [Sinch Dashboard](https://dashboard.sinch.com/convapi/apps), are tied to the API user and come with a set of **channel credentials** for each underlying connected channel. The app has a list of **conversations** between itself and different **contacts** which share the same **project**.\n\n      Webhooks, which the app is attached to, defines the destination for various events coming from the Conversation API. An **app** has the following configurable properties:\n\n      | Field                        | Description                                                                                                       |\n      | ---------------------------- | ----------------------------------------------------------------------------------------------------------------- |\n      | Display name                 | The name visible in the [Sinch Dashboard](https://dashboard.sinch.com/convapi/apps).                                 |\n      | Conversation metadata report | Specifies the amount of **conversation**metadata that's returned as part of each callback.                        |\n      | Retention Policy             | The retention policy specifies how long messages, sent to or from an **app**, are stored by the Conversation API. |\n    name: App\n  - description: \u003e\n      A contact is a collection that groups together underlying connected **channel recipient identities**. It's tied to a specific **project** and is therefore considered public to all **apps** sharing the same **project**. A **contact** has the following configurable properties:\n\n      | Field              | Description                                                                                                                                         |\n      | ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------- |\n      | Channel identities | List of channel identities specifying how the contact is identified on underlying channels                                                          |\n      | Channel priority   | Specifies the channel priority order used when sending messages to this contact. This can be overridden by message specific channel priority order. |\n      | Display name       | Optional display name used in chat windows and other UIs                                                                                            |\n      | Email              | Optional Email of the contact                                                                                                                       |\n      | External id        | Optional identifier of the contact in external systems                                                                                              |\n      | Metadata           | Optional metadata associated with the contact.                                                                                                      |\n    name: Contact\n  - description: Endpoints for working with the conversation log.\n    name: Conversation\n  - description: Endpoint for sending events.\n    name: Events\n  - description: Endpoint for transcoding generic message format to channel-specific one.\n    name: Transcoding\n  - description: \u003e\n      By using the Opt-in \u0026 Opt-out service, it's possible to register an opt-in or an opt-out event for a [**contact**](/docs/conversation/keyconcepts#contact) with the underlying channel. In order to execute the request, either the contactId of the contact or its channel recipient identities are required.\n\n      Requests are executed asynchronously, therefore the endpoint immediately returns the registered request. The result of the Opt-in or Opt-out request is posted to the webhook which has an OPT_IN or OPT_OUT trigger respectively. To read more about setting up webhooks go to [**Webhooks**](/docs/conversation/keyconcepts#webhook).\n    name: OptIn \u0026 OptOut\n  - description: \u003e\n      A Capability Query means checking the available options to reach the contact on the channels where it has a channel identity. Capability Queries can only be executed for contacts that already exist in a project/app.\n      For executing the request, it's required to provide either the contactId or the channel recipient identities of the contact. The request is executed asynchronously, therefore the service responds immediately. The result of the Capability Query is sent to the registered webhook for the CAPABILITY trigger.\n    name: Capability\nx-explorer-enabled: false\nx-samples-languages:\n  - curl\n  - java\n  - csharp\n  - node\n  - php\ncomponents:\n  parameters:\n    # path parameters\n    project_id:\n      name: project_id\n      description: The unique ID of the project. You can find this on the [Sinch Dashboard](https://dashboard.sinch.com/convapi/apps).\n      in: path\n      required: true\n      schema:\n        type: string\n    app_id:\n      name: app_id\n      description: The unique ID of the app. You can find this on the [Sinch Dashboard](https://dashboard.sinch.com/convapi/apps).\n      in: path\n      required: true\n      schema:\n        type: string\n    contact_id:\n      name: contact_id\n      description: The unique ID of the contact.\n      in: path\n      required: true\n      schema:\n        type: string\n    webhook_id:\n      name: webhook_id\n      description: The unique ID of the webhook.\n      in: path\n      required: true\n      schema:\n        type: string\n    destination_id:\n      name: destination_id\n      description: The unique ID of the contact that should be kept when merging two contacts.\n      in: path\n      required: true\n      schema:\n        type: string\n    conversation_id:\n      name: conversation_id\n      description: The unique ID of the conversation. This is generated by the system.\n      in: path\n      required: true\n      schema:\n        type: string\n    message_id:\n      name: message_id\n      description: The conversation message ID.\n      in: path\n      required: true\n      schema:\n        type: string\n    # query parameters\n    query_app_id:\n      description: The ID of the app involved in the conversations.\n      name: app_id\n      in: query\n      schema:\n        type: string\n    query_conversation_id:\n      description: Resource name (ID) of the conversation.\n      name: conversation_id\n      in: query\n      schema:\n        type: string\n    query_contact_id:\n      name: contact_id\n      description: Resource name (ID) of the contact.\n      in: query\n      schema:\n        type: string\n    update_mask.paths:\n      description: The set of field mask paths.\n      name: update_mask.paths\n      in: query\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n    request_id:\n      description: ID for the asynchronous request, will be generated if not set. Currently this field is not used for idempotency but it will be added in v1.\n      name: request_id\n      in: query\n      schema:\n        type: string\n  examples:\n    createFacebookApp:\n      summary: Create Facebook App\n      value:\n        channel_credentials:\n          - channel: MESSENGER\n            static_token:\n              token: \"{Facebook_Token}\"\n        id: 01E9DV2N8C6CK41XFPGQPN0NWE\n        display_name: Demo Facebook App\n    createSMSApp:\n      summary: Create SMS App\n      value:\n        channel_credentials:\n          - channel: SMS\n            static_bearer:\n              claimed_identity: \"{Service_Plan_Id}\"\n              token: \"{API_Token}\"\n        id: 01E9DV2N8C6CK41XFPGQPN0NWE\n        display_name: Demo SMS App\n    createWhatsAppApp:\n      summary: Create WhatsApp App\n      value:\n        channel_credentials:\n          - channel: WHATSAPP\n            static_bearer:\n              claimed_identity: \"{WhatsApp_Bot_ID}\"\n              token: \"{WhatsApp_Bearer_Token}\"\n        id: 01E9DV2N8C6CK41XFPGQPN0NWE\n        display_name: Demo WhatsApp App\n\n  responses:\n    400Error:\n      description: Malformed request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/runtimeError\"\n          example:\n            code: 400\n            message: Malformed request\n            status: INVALID_REQUEST\n            details: []\n    401Error:\n      description: Incorrect credentials\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/runtimeError\"\n          example:\n            code: 401\n            message: Request had invalid credentials.\n            status: UNAUTHENTICATED\n            details: []\n    403Error:\n      description: Correct credentials but you don't have access to the requested resource\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/runtimeError\"\n          example:\n            code: 403\n            message: You do not have access to the requested resource.\n            status: UNAUTHORIZED\n            details: []\n    500Error:\n      description: Correct credentials but you don't have access to the requested resource\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/runtimeError\"\n          example:\n            code: 500\n            message: There was an internal server error.\n            status: INTERNAL_ERROR\n            details: []\n    501Error:\n      description: Something went wrong on our end, try again with exponential back-off\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/runtimeError\"\n          example:\n            code: 501\n            message: There was an internal server error.\n            status: INTERNAL_ERROR\n            details: []\n    sendMessageResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/SendMessageResponse\"\n    getMessageResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ConversationMessage\"\n    createAppResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/App\"\n    createContactResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Contact\"\n    createConversationResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Conversation\"\n    getAppResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/App\"\n    getContactResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Contact\"\n    getConversationResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Conversation\"\n    updateAppResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/App\"\n    updateContactResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Contact\"\n\n    listAppsResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ListAppsResponse\"\n    listContactsResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ListContactsResponse\"\n    listConversationsResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ListConversationsResponse\"\n    listWebhooksResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ListWebhooksResponse\"\n    mergeContactResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Contact\"\n\n    OptOutResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/OptOutResponse\"\n    OptInResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/OptInResponse\"\n    queryCapabilityResponse:\n      description: A successful response.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/QueryCapabilityResponse\"\n  requestBodies:\n    CreateAppRequest:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/App\"\n          examples:\n            createFacebookApp:\n              $ref: \"#/components/examples/createFacebookApp\"\n            createWhatsAppApp:\n              $ref: \"#/components/examples/createWhatsAppApp\"\n            createSMSApp:\n              $ref: \"#/components/examples/createSMSApp\"\n      description: The app to create.\n      required: true\n    CreateContactRequest:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Contact\"\n      description: Required. The contact to be added.\n      required: true\n    CreateConversationRequest:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Conversation\"\n      description: The conversation to create. ID will be generated for the conversation and any ID in the given conversation will be ignored.\n      required: true\n    InjectMessageRequest:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ConversationMessage\"\n      description: Message to be injected. ID field of the message is ignored and instead generated on the server.\n      required: true\n    MergeContactRequest:\n      description: Merge contact request.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/MergeContactRequest\"\n      required: true\n    QueryCapabilityRequest:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/QueryCapability\"\n      description: The query capability request.\n      required: true\n    UpdateAppRequest:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/App\"\n      description: The updated app.\n      required: true\n    UpdateContactRequest:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Contact\"\n      description: The updated contact.\n      required: true\n    UpdateConversationRequest:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Conversation\"\n      description: The updated conversation.\n      required: true\n    SendMessageRequest:\n      description: Send message request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/SendMessageRequest\"\n      required: true\n    registerOptOutRequest:\n      description: OptOut request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/OptOut\"\n      required: true\n  schemas:\n    protobufAny:\n      type: object\n      properties:\n        type_url:\n          type: string\n        value:\n          type: string\n          format: byte\n    runtimeError:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        details:\n          type: array\n          items:\n            $ref: \"#/components/schemas/protobufAny\"\n        error:\n          type: string\n        message:\n          type: string\n        status:\n          type: string\n    App:\n      description: \u003e\n        The app corresponds to the API user and is a collection of channel credentials allowing access to the underlying messaging channels.\n        The app is tied to a set of webhooks which define the destination for various events coming from the Conversation API.\n      type: object\n      title: Conversation API app\n      required:\n        - \"id\"\n        - \"channel_credentials\"\n      properties:\n        channel_credentials:\n          description: Channel credentials. The order of the credentials defines the app channel priority.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ConversationChannelCredential\"\n        conversation_metadata_report_view:\n          $ref: \"#/components/schemas/ConversationMetadataReportView\"\n        display_name:\n          description: Human readable identifier of the app.\n          type: string\n          example: Sinch Conversation API Demo App 001\n        id:\n          description: The ID of the app you can find this on the [Sinch Dashboard](https://dashboard.sinch.com/convapi/apps).\n          type: string\n          example: \"{APP_ID}\"\n        rate_limits:\n          $ref: \"#/components/schemas/RateLimits\"\n        retention_policy:\n          $ref: \"#/components/schemas/RetentionPolicy\"\n    AppEvent:\n      type: object\n      title: Message originating from an app\n      properties:\n        composing_event:\n          $ref: \"#/components/schemas/ComposingEvent\"\n        comment_reply_event:\n          $ref: \"#/components/schemas/CommentReplyEvent\"\n    AppMessage:\n      type: object\n      description: Message originating from an app\n      properties:\n        card_message:\n          $ref: \"#/components/schemas/CardMessage\"\n        carousel_message:\n          $ref: \"#/components/schemas/CarouselMessage\"\n        choice_message:\n          $ref: \"#/components/schemas/ChoiceMessage\"\n        explicit_channel_message:\n          description: \u003e\n            Optional. Channel specific messages, overriding any transcoding.\n            The key in the map must point to a valid conversation channel as\n            defined by the enum ConversationChannel.\n          type: object\n          additionalProperties:\n            type: string\n        location_message:\n          $ref: \"#/components/schemas/LocationMessage\"\n        media_message:\n          $ref: \"#/components/schemas/MediaMessage\"\n        template_message:\n          $ref: \"#/components/schemas/TemplateMessage\"\n        text_message:\n          $ref: \"#/components/schemas/TextMessage\"\n    BasicAuthCredential:\n      description: It consists of a username and a password.\n      type: object\n      required:\n        - \"password\"\n        - \"username\"\n      title: Basic Auth Credential\n      properties:\n        password:\n          description: Basic auth password.\n          type: string\n        username:\n          description: Basic auth username.\n          type: string\n    CallMessage:\n      description: Message for triggering a call.\n      type: object\n      title: Call Message\n      required:\n        - \"phone_number\"\n        - \"title\"\n      properties:\n        phone_number:\n          description: Phone number in E.164 with leading +.\n          type: string\n          example: \"+15551231234\"\n        title:\n          description: \u003e\n            Title shown close to the phone number.\n            The title is clickable in some cases.\n          type: string\n          example: Message text\n    CardHeight:\n      description: Card height\n      type: string\n      default: UNSPECIFIED_HEIGHT\n      enum:\n        - UNSPECIFIED_HEIGHT\n        - SHORT\n        - MEDIUM\n        - TALL\n    CardMessage:\n      description: \"Message containing text, media and choices.\"\n      type: object\n      title: Card Message\n      properties:\n        choices:\n          description: Optional. The number of choices is limited to 3.\n          type: array\n          items:\n            $ref: \"#/components/schemas/Choice\"\n        description:\n          description: Optional.\n          type: string\n        height:\n          $ref: \"#/components/schemas/CardHeight\"\n        media_message:\n          $ref: \"#/components/schemas/MediaMessage\"\n        title:\n          description: Required.\n          type: string\n    CarouselMessage:\n      description: \u003e\n        Message containing a list of cards often\n        rendered horizontally on supported channels. Supported\n        types for media are only images, e.g. .png, .jpg, .jpeg\n        extensions.\n      type: object\n      title: Carousel Message\n      required:\n        - \"cards\"\n      properties:\n        cards:\n          description: A list of up to 10 cards.\n          type: array\n          items:\n            $ref: \"#/components/schemas/CardMessage\"\n        choices:\n          description: \u003e\n            Optional. Outer choices on the carousel level.\n            The number of outer choices is limited to 3.\n          type: array\n          items:\n            $ref: \"#/components/schemas/Choice\"\n    ChannelIdentities:\n      description: Channel identities.\n      required:\n        - \"channel_identities\"\n      type: object\n      properties:\n        channel_identities:\n          description: \u003e\n            A list of specific channel identities.\n            The API will use these identities when sending to specific channels.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ChannelRecipientIdentity\"\n    ChannelIdentity:\n      description: \u003e\n        A unique identity of message recipient on a particular channel.\n        For example, the channel identity on SMS, WHATSAPP or VIBERBM is a MSISDN phone number.\n      type: object\n      title: Channel Identity\n      required:\n        - \"identity\"\n        - \"channel\"\n      properties:\n        app_id:\n          description: \u003e\n            Optional. The Conversation API's app ID if this is app-scoped channel identity.\n            Currently, FB Messenger and Viber are using app-scoped channel identities\n            which means contacts will have different channel identities for different\n            apps. FB Messenger uses PSIDs (Page-Scoped IDs) as channel identities.\n            The app_id is pointing to the app linked to the FB page for which this PSID is issued.\n          type: string\n        channel:\n          $ref: \"#/components/schemas/ConversationChannel\"\n        identity:\n          description: \"Required. The channel identity e.g., a phone number for SMS, WhatsApp and Viber Business.\"\n          type: string\n    ChannelRecipientIdentity:\n      type: object\n      required:\n        - \"identity\"\n        - \"channel\"\n      properties:\n        channel:\n          $ref: \"#/components/schemas/ConversationChannel\"\n        identity:\n          description: The channel recipient identity.\n          type: string\n    Choice:\n      description: \u003e\n        A choice is an action the user can take such as\n        buttons for quick replies, call actions etc.\n      type: object\n      title: Choice/Action\n      properties:\n        call_message:\n          $ref: \"#/components/schemas/CallMessage\"\n        location_message:\n          $ref: \"#/components/schemas/LocationMessage\"\n        postback_data:\n          description: \u003e\n            Optional. This data will be returned in the ChoiceResponseMessage.\n            The default is message_id_{text, title}.\n          type: string\n        text_message:\n          $ref: \"#/components/schemas/TextMessage\"\n        url_message:\n          $ref: \"#/components/schemas/UrlMessage\"\n    ChoiceMessage:\n      description: Message containing choices/actions.\n      type: object\n      title: Choice Message\n      required:\n        - \"choices\"\n      properties:\n        choices:\n          description: The number of choices is limited to 3.\n          type: array\n          items:\n            $ref: \"#/components/schemas/Choice\"\n        text_message:\n          $ref: \"#/components/schemas/TextMessage\"\n    ChoiceResponseMessage:\n      description: Represents a response to a choice message.\n      type: object\n      title: Choice Response Message\n      required:\n        - \"message_id\"\n        - \"postback_data\"\n      properties:\n        message_id:\n          description: The message id containing the choice.\n          type: string\n        postback_data:\n          description: The postback_data defined in the selected choice.\n          type: string\n    ClientCredentials:\n      type: object\n      description: Client credentials\n      required:\n        - \"client_id\"\n        - \"client_secret\"\n        - \"endpoint\"\n      properties:\n        client_id:\n          description: The Client ID that will be used in the Client Credentials flow.\n          type: string\n        client_secret:\n          description: The Client Secret that will be used in the Client Credentials flow.\n          type: string\n        endpoint:\n          description: The endpoint that will be used in the Client Credentials flow.\n          type: string\n    CommentReplyEvent:\n      description: Represents a response to a comment event.\n      type: object\n      title: Comment Reply Event\n      required:\n        - \"text\"\n      properties:\n        text:\n          description: The text of the comment reply.\n          type: string\n    ComposingEvent:\n      type: object\n    Contact:\n      description: \u003e\n        A participant in a conversation typically representing a person.\n        It is associated with a collection of channel identities.\n      type: object\n      title: Contact\n      required:\n        - \"id\"\n        - \"language\"\n      properties:\n        channel_identities:\n          description: List of channel identities.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ChannelIdentity\"\n        channel_priority:\n          description: List of channels defining the channel priority.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ConversationChannel\"\n        display_name:\n          type: string\n          description: Optional. The display name. A default 'Unknown' will be assigned if left empty.\n        email:\n          description: Optional. Email of the contact.\n          type: string\n        external_id:\n          description: Optional. Contact identifier in an external system.\n          type: string\n        id:\n          description: The ID of the contact.\n          type: string\n          example: \"{CONTACT_ID}\"\n        language:\n          $ref: \"#/components/schemas/ContactLanguage\"\n        metadata:\n          description: \u003e\n            Optional. Metadata associated with the contact.\n            Up to 1024 characters long.\n          type: string\n    ContactLanguage:\n      description: Contact language\n      type: string\n      default: UNSPECIFIED\n      enum:\n        - UNSPECIFIED\n        - AF\n        - SQ\n        - AR\n        - AZ\n        - BN\n        - BG\n        - CA\n        - ZH\n        - ZH_CN\n        - ZH_HK\n        - ZH_TW\n        - HR\n        - CS\n        - DA\n        - NL\n        - EN\n        - EN_GB\n        - EN_US\n        - ET\n        - FIL\n        - FI\n        - FR\n        - DE\n        - EL\n        - GU\n        - HA\n        - HE\n        - HI\n        - HU\n        - ID\n        - GA\n        - IT\n        - JA\n        - KN\n        - KK\n        - KO\n        - LO\n        - LV\n        - LT\n        - MK\n        - MS\n        - ML\n        - MR\n        - NB\n        - FA\n        - PL\n        - PT\n        - PT_BR\n        - PT_PT\n        - PA\n        - RO\n        - RU\n        - SR\n        - SK\n        - SL\n        - ES\n        - ES_AR\n        - ES_ES\n        - ES_MX\n        - SW\n        - SV\n        - TA\n        - TE\n        - TH\n        - TR\n        - UK\n        - UR\n        - UZ\n        - VI\n        - ZU\n    ContactMessage:\n      type: object\n      description: Message originating from a contact\n      properties:\n        choice_response_message:\n          $ref: \"#/components/schemas/ChoiceResponseMessage\"\n        fallback_message:\n          $ref: \"#/components/schemas/FallbackMessage\"\n        location_message:\n          $ref: \"#/components/schemas/LocationMessage\"\n        media_card_message:\n          $ref: \"#/components/schemas/MediaCardMessage\"\n        media_message:\n          $ref: \"#/components/schemas/MediaMessage\"\n        reply_to:\n          $ref: \"#/components/schemas/ReplyTo\"\n        text_message:\n          $ref: \"#/components/schemas/TextMessage\"\n    Conversation:\n      description: \u003e\n        A collection of messages exchanged between a contact and an app.\n        Conversations are normally created on the fly by Conversation API once\n        a message is sent and there is no active conversation already.\n        There can be only one active conversation at any given time between\n        a particular contact and an app.\n      type: object\n      title: Conversation\n      properties:\n        active:\n          description: Flag for whether this conversation is active.\n          type: boolean\n        active_channel:\n          $ref: \"#/components/schemas/ConversationChannel\"\n        app_id:\n          description: The ID of the participating app.\n          type: string\n        contact_id:\n          description: The ID of the participating contact.\n          type: string\n        id:\n          description: The ID of the conversation.\n          type: string\n        last_received:\n          description: \u003e\n            Output only. The timestamp of the latest message in the conversation. The timestamp will be\n            Thursday January 01, 1970 00:00:00 UTC if the conversation contains no messages.\n          type: string\n          format: date-time\n          readOnly: true\n        metadata:\n          description: \u003e\n            An arbitrary data set by the Conversation API clients.\n            Up to 1024 characters long.\n          type: string\n    ConversationChannel:\n      type: string\n      description: Channel Identifier\n      default: CHANNEL_UNSPECIFIED\n      example: WHATSAPP\n      enum:\n        - CHANNEL_UNSPECIFIED\n        - WHATSAPP\n        - RCS\n        - SMS\n        - MESSENGER\n        - VIBER\n        - VIBERBM\n        - MMS\n    ConversationChannelCredential:\n      description: Enables access to the underlying messaging channel.\n      type: object\n      title: Channel Credential\n      required:\n         - channel\n      properties:\n        callback_secret:\n          description: \u003e\n            The secret used to verify the channel callbacks\n            for channels which support callback verification.\n            The callback verification is not needed for Sinch-managed\n            channels because the callbacks are not leaving\n            Sinch internal networks.\n            Max length is 256 characters.\n            Note: leaving channel_callback_secret empty for channels with\n            callback verification will disable the verification.\n          type: string\n        channel:\n          $ref: \"#/components/schemas/ConversationChannel\"\n        mms_credentials:\n          $ref: \"#/components/schemas/MMSCredentials\"\n        static_bearer:\n          $ref: \"#/components/schemas/StaticBearerCredential\"\n        static_token:\n          $ref: \"#/components/schemas/StaticTokenCredential\"\n    ConversationDirection:\n      description: Conversation direction\n      type: string\n      default: UNDEFINED_DIRECTION\n      enum:\n        - UNDEFINED_DIRECTION\n        - TO_APP\n        - TO_CONTACT\n    ConversationMergeStrategy:\n      type: string\n      default: MERGE\n      enum:\n        - MERGE\n    ConversationMessage:\n      description: A message on a particular channel.\n      type: object\n      title: Conversation Message\n      properties:\n        accept_time:\n          description: Output only.\n          type: string\n          format: date-time\n          readOnly: true\n        app_message:\n          $ref: \"#/components/schemas/AppMessage\"\n        channel_identity:\n          $ref: \"#/components/schemas/ChannelIdentity\"\n        contact_id:\n          description: Required. The ID of the contact.\n          type: string\n        contact_message:\n          $ref: \"#/components/schemas/ContactMessage\"\n        conversation_id:\n          description: Required. The ID of the conversation.\n          type: string\n        direction:\n          $ref: \"#/components/schemas/ConversationDirection\"\n        id:\n          description: Required. The ID of the message.\n          type: string\n        metadata:\n          description: \u003e\n            Optional. Metadata associated with the contact.\n            Up to 1024 characters long.\n          type: string\n    ConversationMetadataReportView:\n      description: Conversation metadata report view.\n      type: string\n      default: NONE\n      enum:\n        - NONE\n        - FULL\n    Coordinates:\n      type: object\n      description: Geographic coordinates\n      properties:\n        latitude:\n          description: Required. The latitude.\n          type: number\n          format: float\n        longitude:\n          description: Required. The longitude.\n          type: number\n          format: float\n    FallbackMessage:\n      type: object\n      description: \"Fallback message, appears when original contact message can not be handled\"\n      properties:\n        raw_message:\n          description: Optional. The raw fallback message if provided by the channel.\n          type: string\n        reason:\n          $ref: \"#/components/schemas/Reason\"\n    LocationMessage:\n      type: object\n      description: Message with geo location\n      properties:\n        coordinates:\n          $ref: \"#/components/schemas/Coordinates\"\n        label:\n          description: Optional. Label or name for the position.\n          type: string\n        title:\n          description: \u003e\n            Required. The title is shown close to the\n            button or link that leads to a map showing the location.\n            The title is clickable in some cases.\n          type: string\n    MMSCredentials:\n      type: object\n      description: MMS channel credential\n      properties:\n        account_id:\n          description: Required. MMS Account ID.\n          type: string\n        api_key:\n          description: Required. MMS API Key.\n          type: string\n        basic_auth:\n          $ref: \"#/components/schemas/BasicAuthCredential\"\n    MediaCardMessage:\n      type: object\n      description: Contact Message containing media and caption\n      properties:\n        caption:\n          description: \"Optional. Caption for the media on channels, where its supported.\"\n          type: string\n        url:\n          description: Required. Url to the file.\n          type: string\n    MediaMessage:\n      type: object\n      description: Message containing media\n      properties:\n        thumbnail_url:\n          type: string\n          description: Optional. Will be used where it is natively supported\n        url:\n          description: Required. Url to the file.\n          type: string\n    MessageQueue:\n      type: string\n      description: Message queue priority.\n      default: NORMAL_PRIORITY\n      example: NORMAL_PRIORITY\n      enum:\n        - NORMAL_PRIORITY\n        - HIGH_PRIORITY\n    OptInResponse:\n      description: The response received for an Opt-In request.\n      type: object\n      properties:\n        opt_in:\n          $ref: \"#/components/schemas/OptIn\"\n        request_id:\n          type: string\n          description: \"ID for the asynchronous request, will be generated id if not set in request\"\n    OptIn:\n      description: \u003e\n        An Opt-In contains the identity of the recipient which\n        gave its consent to receive messages from Conversation API apps\n        on a given channel.\n      type: object\n      title: Represents an explicit Opt-In registration\n      required:\n        - \"app_id\"\n        - \"channels\"\n      properties:\n        app_id:\n          description: Required. The app for which the Opt-In is being registered.\n          type: string\n          example: \"{APP_ID}\"\n        channels:\n          description: \u003e\n            Required. The channels covered by this Opt-In.\n            The default are all the channels for a contact if recipient is\n            contact_id or the channels in the channel_identities list.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ConversationChannel\"\n        recipient:\n          $ref: \"#/components/schemas/Recipient\"\n    OptOutResponse:\n      description: The response received for an Opt-Out request.\n      type: object\n      properties:\n        opt_out:\n          $ref: \"#/components/schemas/OptOut\"\n        request_id:\n          type: string\n          description: \"ID for the asynchronous request, will be generated id if not set in request\"\n    OptOut:\n      description: \u003e\n        An Opt-Out contains the identity of the recipient which\n        retract its consent to receive messages from Conversation API apps\n        on a given channel.\n      type: object\n      title: Represents an explicit Opt-Out registration\n      required:\n        - \"app_id\"\n        - \"channels\"\n      properties:\n        app_id:\n          description: The app for which the Opt-Out is being registered.\n          type: string\n          example: \"{APP_ID}\"\n        channels:\n          description: \u003e\n            The channels covered by this Opt-Out.\n            The default are all the channels for a contact if recipient is\n            contact_id or the channels in the channel_identities list.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ConversationChannel\"\n        recipient:\n          $ref: \"#/components/schemas/Recipient\"\n    RateLimits:\n      description: Rate limits\n      type: object\n      properties:\n        inbound:\n          description: \u003e\n            Output only. The number of inbound messages/events we process per second,\n            from underlying channels to the app.  The default rate limit is 25.\n          type: integer\n          format: int64\n          readOnly: true\n        outbound:\n          description: \u003e\n            Output only. The number of messages/events we process per second, from the\n            app to the underlying channels. Note that underlying channels may have other\n            rate limits.  The default rate limit is 25.\n          type: integer\n          format: int64\n          readOnly: true\n        webhooks:\n          description: \u003e\n            Output only. The rate limit of callbacks sent to the webhooks registered\n            for the app. Note that if you have multiple webhooks with shared triggers,\n            multiple callbacks will be sent out for each triggering event. The default rate limit is 25.\n          type: integer\n          format: int64\n          readOnly: true\n    Reason:\n      type: object\n      description: Reason\n      properties:\n        code:\n          $ref: \"#/components/schemas/ReasonCode\"\n        description:\n          description: A textual description of the reason.\n          type: string\n        sub_code:\n          $ref: \"#/components/schemas/ReasonSubCode\"\n    ReasonCode:\n      description: |2-\n         - UNKNOWN: UNKNOWN is used if no other code can be used to describe the encountered error.\n         - INTERNAL_ERROR: An internal error occurred. Please save the entire callback if you want to\n        report an error.\n         - RATE_LIMITED: The message or event was not sent due to rate limiting.\n         - RECIPIENT_INVALID_CHANNEL_IDENTITY: The channel recipient identity was malformed.\n         - RECIPIENT_NOT_REACHABLE: It was not possible to reach the contact, or channel recipient identity,\n        on the channel.\n         - RECIPIENT_NOT_OPTED_IN: The contact, or channel recipient identity, has not opt-ed in on the channel.\n         - OUTSIDE_ALLOWED_SENDING_WINDOW: The allowed sending window has expired. See the channel documentation\n        for more information about how the sending window works for the different\n        channels.\n         - CHANNEL_FAILURE: The channel failed to accept the message. The Conversation API performs\n        multiple retries in case of transient errors\n         - CHANNEL_BAD_CONFIGURATION: The configuration of the channel for the used App is wrong. The bad\n        configuration caused the channel to reject the message. Please see\n        the channel support documentation page for how to set it up correctly.\n         - CHANNEL_CONFIGURATION_MISSING: The configuration of the channel is missing from the used App. Please see\n        the channel support documentation page for how to set it up correctly.\n         - MEDIA_TYPE_UNSUPPORTED: Some of the referenced media files is of a unsupported media type. Please\n        read the channel support documentation page to find out the limitations\n        on media that the different channels impose.\n         - MEDIA_TOO_LARGE: Some of the referenced media files are too large. Please read the channel\n        support documentation to find out the limitations on file size that the\n        different channels impose.\n         - MEDIA_NOT_REACHABLE: The provided media link was not accessible from the Conversation API or\n        from the underlying channels. Please make sure that the media file is\n        accessible.\n         - NO_CHANNELS_LEFT: No channels to try to send the message to. This error will occur if one\n        attempts to send a message to a channel with no channel identities or if\n        all applicable channels have been attempted.\n         - TEMPLATE_NOT_FOUND: The referenced template was not found.\n         - TEMPLATE_INSUFFICIENT_PARAMETERS: Sufficient template parameters was not given. All parameters defined\n        in the template must be provided when sending a template message\n         - TEMPLATE_NON_EXISTING_LANGUAGE_OR_VERSION: The selected language, or version, of the referenced template did\n        not exist. Please check the available versions and languages of the template\n         - DELIVERY_TIMED_OUT: The message delivery, or event delivery, failed due to a channel-imposed timeout.\n        See the channel support documentation page for further details\n        about how the different channels behave.\n         - DELIVERY_REJECTED_DUE_TO_POLICY: The message or event was rejected by the channel due to a policy.\n        Some channels have specific policies that must be met to send a message.\n        See the channel support documentation page for more information about\n        when this error will be triggered.\n         - CONTACT_NOT_FOUND: The provided Contact ID did not exist.\n         - BAD_REQUEST: Conversation API validates send requests in two different stages.\n        The first stage is right before the message is enqueued.\n        If this first validation fails the API responds with 400 Bad Request\n        and the request is discarded immediately.\n        The second validation kicks in during message processing and\n        it normally contains channel specific validation rules.\n        Failures during second request validation are\n        delivered as callbacks to MESSAGE_DELIVERY (EVENT_DELIVERY) webhooks\n        with ReasonCode BAD_REQUEST.\n         - UNKNOWN_APP: The used App is missing. This error may occur when the app is removed\n        during message processing.\n         - NO_CHANNEL_IDENTITY_FOR_CONTACT: The contact has no channel identities setup, or the contact has no\n        channels setup for the resolved channel priorities.\n         - CHANNEL_REJECT: Generic error for channel permanently rejecting a message.\n        Only used if no other better matching error can be used\n         - NO_PERMISSION: No permission to perform action\n         - NO_PROFILE_AVAILABLE: No available profile data for user\n         - UNSUPPORTED_OPERATION: Generic error for channel unsupported operations.\n      type: string\n      default: UNKNOWN\n      enum:\n        - UNKNOWN\n        - INTERNAL_ERROR\n        - RATE_LIMITED\n        - RECIPIENT_INVALID_CHANNEL_IDENTITY\n        - RECIPIENT_NOT_REACHABLE\n        - RECIPIENT_NOT_OPTED_IN\n        - OUTSIDE_ALLOWED_SENDING_WINDOW\n        - CHANNEL_FAILURE\n        - CHANNEL_BAD_CONFIGURATION\n        - CHANNEL_CONFIGURATION_MISSING\n        - MEDIA_TYPE_UNSUPPORTED\n        - MEDIA_TOO_LARGE\n        - MEDIA_NOT_REACHABLE\n        - NO_CHANNELS_LEFT\n        - TEMPLATE_NOT_FOUND\n        - TEMPLATE_INSUFFICIENT_PARAMETERS\n        - TEMPLATE_NON_EXISTING_LANGUAGE_OR_VERSION\n        - DELIVERY_TIMED_OUT\n        - DELIVERY_REJECTED_DUE_TO_POLICY\n        - CONTACT_NOT_FOUND\n        - BAD_REQUEST\n        - UNKNOWN_APP\n        - NO_CHANNEL_IDENTITY_FOR_CONTACT\n        - CHANNEL_REJECT\n        - NO_PERMISSION\n        - NO_PROFILE_AVAILABLE\n        - UNSUPPORTED_OPERATION\n    ReasonSubCode:\n      description: |2-\n         - UNSPECIFIED_SUB_CODE: UNSPECIFIED_SUB_CODE is used if no other sub code can be used to describe the encountered error.\n         - ATTACHMENT_REJECTED: The message attachment was rejected by the channel due to a policy.\n        Some channels have specific policies that must be met to receive an attachment.\n         - MEDIA_TYPE_UNDETERMINED: The specified media urls media type could not be determined\n         - INACTIVE_SENDER: The used credentials for the underlying channel is inactivated and not allowed to send or receive messages.\n      type: string\n      default: UNSPECIFIED_SUB_CODE\n      enum:\n        - UNSPECIFIED_SUB_CODE\n        - ATTACHMENT_REJECTED\n        - MEDIA_TYPE_UNDETERMINED\n        - INACTIVE_SENDER\n    Recipient:\n      type: object\n      description: Recipient information\n      title: Recipient\n      required:\n        - \"contact_id\"\n        - \"identified_by\"\n      properties:\n        contact_id:\n          description: The ID of the receiving contact.\n          type: string\n          example: \"{CONTACT_ID}\"\n        identified_by:\n          $ref: \"#/components/schemas/ChannelIdentities\"\n    ReplyTo:\n      description: If the contact message was a response to a previous App message then this field contains information about that.\n      type: object\n      title: Reply To\n      properties:\n        message_id:\n          type: string\n          description: Required. The Id of the message that this is a response to\n    RetentionPolicy:\n      type: object\n      description: Retention policy for messages and conversations\n      properties:\n        retention_type:\n          $ref: \"#/components/schemas/RetentionPolicyType\"\n        ttl_days:\n          description: \u003e\n            Optional. The days before a message or conversation is eligible for deletion.\n            Default value is 180. The ttl_days value has no effect when retention_type\n            is PERSIST_RETENTION_POLICY. The valid values for this field are [1 - 3650].\n            Note that retention cleanup job runs once every twenty-four hours\n            which can lead to delay i.e., messages and conversations are not deleted on\n            the minute they become eligible for deletion.\n          type: integer\n          format: int64\n    RetentionPolicyType:\n      description: |2-\n         - MESSAGE_EXPIRE_POLICY: The default retention policy where messages older than\n        ttl_days are automatically deleted from Conversation API database.\n         - CONVERSATION_EXPIRE_POLICY: The conversation expire policy only considers the last message in a conversation.\n        If the last message is older that ttl_days the entire conversation is deleted.\n        The difference with MESSAGE_EXPIRE_POLICY is that messages with accept_time\n        older than ttl_days are persisted as long as there is a newer message in the\n        same conversation.\n         - PERSIST_RETENTION_POLICY: Persist policy does not delete old messages or conversations.\n        Please note that message storage might be subject to additional charges\n        in the future.\n      type: string\n      default: MESSAGE_EXPIRE_POLICY\n      enum:\n        - MESSAGE_EXPIRE_POLICY\n        - CONVERSATION_EXPIRE_POLICY\n        - PERSIST_RETENTION_POLICY\n    StaticBearerCredential:\n      description: It consists of claimed identity and a static token.\n      type: object\n      title: Bearer Channel Credential\n      properties:\n        claimed_identity:\n          description: Required. Claimed identity.\n          type: string\n        token:\n          description: Required. Static bearer token.\n          type: string\n    StaticTokenCredential:\n      type: object\n      description: Static Token Credential\n      properties:\n        token:\n          description: Required. The static token.\n          type: string\n    TemplateMessage:\n      type: object\n      description: Message referring to predefined template\n      properties:\n        channel_template:\n          description: \u003e\n            Optional. Channel specific template reference with parameters per channel.\n            The channel template if exists overrides the omnichannel template.\n            At least one of channel_template or omni_template needs to be present.\n            The key in the map must point to a valid conversation channel as\n            defined by the enum ConversationChannel.\n          type: object\n          additionalProperties:\n            $ref: \"#/components/schemas/TemplateReference\"\n        omni_template:\n          $ref: \"#/components/schemas/TemplateReference\"\n    TemplateReference:\n      description: \u003e\n        The referenced template can be an omnichannel template\n        stored in Conversation API Template Store as AppMessage\n        or it can reference external channel-specific template\n        such as WhatsApp Business Template.\n      type: object\n      title: Template reference with concrete parameter values\n      properties:\n        language_code:\n          description: \u003e\n            Optional. The BCP-47 language code, such as \"en-US\" or \"sr-Latn\".\n            For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.\n            English is the default language_code.\n          type: string\n        parameters:\n          description: \u003e\n            Optional. Required if the template\n            has parameters. Concrete values must\n            be present for all defined parameters\n            in the template. Parameters can be different for\n            different versions and/or languages of the template.\n          type: object\n          additionalProperties:\n            type: string\n        template_id:\n          description: Required. The ID of the template.\n          type: string\n        version:\n          description: \u003e\n            Required. Used to specify what version of a template to use.\n            This will be used in conjunction with language_code.\n          type: string\n    TextMessage:\n      type: object\n      description: Message containing only text\n      properties:\n        text:\n          description: Required. The text to be sent.\n          type: string\n    UrlMessage:\n      description: A generic URL message.\n      type: object\n      title: Url Message\n      properties:\n        title:\n          description: \u003e\n            Required. The title shown close to the URL.\n            The title will be clickable in some cases.\n          type: string\n        url:\n          description: Required. The url to show.\n          type: string\n    Webhook:\n      description: Represents a destination for receiving callbacks from the Conversation API.\n      type: object\n      title: Webhook\n      required:\n        - \"app_id\"\n        - \"target\"\n        - \"triggers\"\n      properties:\n        app_id:\n          description: The app that this webhook belongs to.\n          type: string\n        client_credentials:\n          $ref: \"#/components/schemas/ClientCredentials\"\n        id:\n          description: Output only. The ID of the webhook.\n          type: string\n          readOnly: true\n        secret:\n          description: \u003e\n            Optional secret be used to sign contents of webhooks sent by the Conversation API.\n            You can then use the secret to verify the signature.\n          type: string\n        target:\n          description: \u003e\n            The target url where events should be sent to.\n            Maximum URL length is 742.\n          type: string\n        target_type:\n          $ref: \"#/components/schemas/WebhookTargetType\"\n        triggers:\n          description: \u003e\n            An array of triggers that should trigger the webhook and result in a\n            event being sent to the target url.\n            - `UNSPECIFIED_TRIGGER`: Using this value will cause errors.\n            - `MESSAGE_DELIVERY`: Subscribe to delivery receipts for a message sent.\n            - `EVENT_DELIVERY`: Subscribe to delivery receipts for a event sent.\n            - `MESSAGE_INBOUND`: Subscribe to inbound messages from end users on the underlying channels.\n            - `EVENT_INBOUND`: Subscribe to inbound events from end users on the underlying channels.\n            - `CONVERSATION_START`: Subscribe to an event that is triggered when a new conversation has been started.\n            - `CONVERSATION_STOP`: Subscribe to an event that is triggered when a active conversation has been stopped.\n            - `CONTACT_CREATE`: Subscribe to an event that is triggered when a new contact has been created.\n            - `CONTACT_DELETE`: Subscribe to an event that is triggered when a contact has been deleted.\n            - `CONTACT_MERGE`: Subscribe to an event that is triggered when a two contacts are merged.\n            - `UNSUPPORTED`: Subscribe to callbacks that are not natively supported by the Conversation API.\n            - `OPT_IN`: Subscribe to opt_ins.\n            - `OPT_OUT`: Subscribe to opt_outs.\n            - `CAPABILITY`: Subscribe to see get capability results.\n            - `CONVERSATION_DELETE`: Subscribe to get an event when a conversation is deleted.\n          type: array\n          items:\n            $ref: \"#/components/schemas/WebhookTrigger\"\n    WebhookTargetType:\n      type: string\n      description: Webhook target-type\n      default: HTTP\n      enum:\n        - DISMISS\n        - GRPC\n        - HTTP\n    WebhookTrigger:\n      description: \u003e\n        - `UNSPECIFIED_TRIGGER`: Using this value will cause errors.\n        - `MESSAGE_DELIVERY`: Subscribe to delivery receipts for a message sent.\n        - `EVENT_DELIVERY`: Subscribe to delivery receipts for a event sent.\n        - `MESSAGE_INBOUND`: Subscribe to inbound messages from end users on the underlying channels.\n        - `EVENT_INBOUND`: Subscribe to inbound events from end users on the underlying channels.\n        - `CONVERSATION_START`: Subscribe to an event that is triggered when a new conversation has been started.\n        - `CONVERSATION_STOP`: Subscribe to an event that is triggered when a active conversation has been stopped.\n        - `CONTACT_CREATE`: Subscribe to an event that is triggered when a new contact has been created.\n        - `CONTACT_DELETE`: Subscribe to an event that is triggered when a contact has been deleted.\n        - `CONTACT_MERGE`: Subscribe to an event that is triggered when a two contacts are merged.\n        - `UNSUPPORTED`: Subscribe to callbacks that are not natively supported by the Conversation API.\n        - `OPT_IN`: Subscribe to opt_ins.\n        - `OPT_OUT`: Subscribe to opt_outs.\n        - `CAPABILITY`: Subscribe to see get capability results.\n        - `CONVERSATION_DELETE`: Subscribe to get an event when a conversation is deleted.\n      type: string\n      title: En event triggering Conversation API callback\n      example: MESSAGE_DELIVERY\n      enum:\n        - UNSPECIFIED_TRIGGER\n        - MESSAGE_DELIVERY\n        - EVENT_DELIVERY\n        - MESSAGE_INBOUND\n        - EVENT_INBOUND\n        - CONVERSATION_START\n        - CONVERSATION_STOP\n        - CONTACT_CREATE\n        - CONTACT_DELETE\n        - CONTACT_MERGE\n        - UNSUPPORTED\n        - OPT_IN\n        - OPT_OUT\n        - CAPABILITY\n        - CONVERSATION_DELETE\n    ConversationMessagesView:\n      type: string\n      description: Conversation message view.\n      default: WITH_METADATA\n      enum:\n        - WITH_METADATA\n        - WITHOUT_METADATA\n    ListAppsResponse:\n      type: object\n      properties:\n        apps:\n          description: List of apps belonging to a specific project ID.\n          type: array\n          items:\n            $ref: \"#/components/schemas/App\"\n    ListContactsResponse:\n      type: object\n      properties:\n        contacts:\n          description: List of contacts belonging to the specified project.\n          type: array\n          items:\n            $ref: \"#/components/schemas/Contact\"\n        next_page_token:\n          description: \u003e\n            Token that should be included in the next list contacts request to\n            fetch the next page.\n          type: string\n    ListConversationsResponse:\n      type: object\n      properties:\n        conversations:\n          description: Output only. List of conversations matching the search query.\n          type: array\n          items:\n            $ref: \"#/components/schemas/Conversation\"\n          readOnly: true\n        next_page_token:\n          type: string\n        total_size:\n          type: integer\n          format: int32\n    ListMessagesResponse:\n      type: object\n      properties:\n        messages:\n          description: Output only. List of messages associated to the referenced conversation.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ConversationMessage\"\n          readOnly: true\n        next_page_token:\n          type: string\n    ListWebhooksResponse:\n      type: object\n      properties:\n        webhooks:\n          type: array\n          title: List of webhooks belonging to a specific project ID and app ID\n          items:\n            $ref: \"#/components/schemas/Webhook\"\n    MergeContactRequest:\n      type: object\n      properties:\n        destination_id:\n          description: Required. The ID of the contact that should be kept.\n          type: string\n        project_id:\n          description: Required. The project ID.\n          type: string\n        source_id:\n          description: Required. The ID of the contact that should be removed.\n          type: string\n        strategy:\n          $ref: \"#/components/schemas/ConversationMergeStrategy\"\n    QueryCapability:\n      type: object\n      properties:\n        app_id:\n          description: Required. The ID of the app to use for capability lookup.\n          type: string\n        project_id:\n          description: Required. The project ID.\n          type: string\n        recipient:\n          $ref: \"#/components/schemas/Recipient\"\n        request_id:\n          type: string\n          title: \u003e\n            ID for the asynchronous request, will be generated if not set.\n            Currently this field is not used for idempotency but it will be added in v1\n    QueryCapabilityResponse:\n      description: \u003e\n        An CapabilityResponse contains the identity of the recipient for which\n        will be perform a capability lookup.\n      type: object\n      title: Represents an explicit Capability registration\n      properties:\n        app_id:\n          description: Required. The ID of the app to use for capability lookup.\n          type: string\n        recipient:\n          $ref: \"#/components/schemas/Recipient\"\n        request_id:\n          type: string\n          description: \"ID for the asynchronous request, will be generated id if not set in request\"\n    SendEventRequest:\n      type: object\n      properties:\n        app_id:\n          description: Required. The ID of the app sending the event.\n          type: string\n        callback_url:\n          description: \u003e\n            Overwrites the default callback url for delivery reports for this message\n            The REST URL should be of the form: http://host[:port]/path\n          type: string\n        channel_priority_order:\n          description: \u003e\n            Optional. Channel priority order that dictates on which channels the\n            Conversation API should try to send the message on. The order provided\n            here overrides any default.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ConversationChannel\"\n        event:\n          $ref: \"#/components/schemas/AppEvent\"\n        event_metadata:\n          description: Optional. Eventual metadata that should be associated to the event.\n          type: string\n        project_id:\n          description: Required. The project ID.\n          type: string\n        queue:\n          $ref: \"#/components/schemas/MessageQueue\"\n        recipient:\n          $ref: \"#/components/schemas/Recipient\"\n    SendEventResponse:\n      type: object\n      properties:\n        accepted_time:\n          description: Output only. Accepted timestamp.\n          type: string\n          format: date-time\n          readOnly: true\n        event_id:\n          description: Output only. Event id.\n          type: string\n          readOnly: true\n    SendMessageRequest:\n      type: object\n      description: Send message request.\n      required:\n        - \"app_id\"\n        - \"project_id\"\n        - \"recipient\"\n        - \"message\"\n      properties:\n        app_id:\n          description: The ID of the app sending the message.\n          type: string\n          example: \"{APP_ID}\"\n        callback_url:\n          description: \u003e\n            Overwrites the default callback url for delivery reports for this message\n            The REST URL should be of the form: http://host[:port]/path\n          type: string\n        channel_priority_order:\n          description: \u003e\n            Explicitly define the channels and order in which they are tried when sending the message.\n            Note that collection can't contain 'CHANNEL_UNSPECIFIED' value.\n            Which channels the API will try and their priority is defined by:\n            1. channel_priority_order if available.\n            2. recipient.identified_by.channel_identities if available.\n            3. When recipient is a contact_id:\n              - if a conversation with the contact exists: the active channel of the conversation is tried first.\n              - the existing channels for the contact are ordered by contact channel preferences if given.\n              - lastly the existing channels for the contact are ordered by the app priority.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ConversationChannel\"\n        channel_properties:\n          description: \u003e\n            Channel-specific properties.\n            The key in the map must point to a valid channel property key as\n            defined by the enum ChannelPropertyKeys.\n            The maximum allowed property value length is 1024 characters.\n          type: object\n          additionalProperties:\n            type: string\n        message:\n          $ref: \"#/components/schemas/AppMessage\"\n        message_metadata:\n          description: Metadata that should be associated with the message.\n          type: string\n        project_id:\n          description: The project ID.\n          type: string\n          example: \"{PROJECT_ID}\"\n        queue:\n          $ref: \"#/components/schemas/MessageQueue\"\n        recipient:\n          $ref: \"#/components/schemas/Recipient\"\n        ttl:\n          description: \u003e\n            The timeout allotted for sending the message.\n            Passed onto channels which have support for it and\n            emulated by Conversation API for channels without ttl support\n            but with message retract/unsend functionality.\n            Channel failover will not be performed for messages with\n            expired TTL.\n          type: string\n    SendMessageResponse:\n      type: object\n      properties:\n        accepted_time:\n          description: \u003e\n            Timestamp when the Conversation API accepted the message for delivery to the referenced contact.\n          type: string\n          format: date-time\n          readOnly: true\n        message_id:\n          description: The ID of the message.\n          type: string\n          readOnly: true\n    TranscodeMessageRequest:\n      type: object\n      properties:\n        app_id:\n          description: Required. The ID of the app used to transcode the message.\n          type: string\n        app_message:\n          $ref: \"#/components/schemas/AppMessage\"\n        channels:\n          description: Required. The list of channels for which the message shall be transcoded to.\n          type: array\n          items:\n            $ref: \"#/components/schemas/ConversationChannel\"\n        from:\n          description: Optional.\n          type: string\n        project_id:\n          description: Required. The project ID.\n          type: string\n        to:\n          description: Optional.\n          type: string\n    TranscodeMessageResponse:\n      type: object\n      properties:\n        transcoded_message:\n          description: \u003e\n            Output only. The transcoded message for the different channels.\n            The keys in the map correspond to channel names, as defined by the type\n            ConversationChannel.\n          type: object\n          additionalProperties:\n            type: string\n          readOnly: true\n  securitySchemes:\n    Basic:\n      type: http\n      scheme: basic\n      description: For more information about basic authentication, see [Basic Authentication](newdocs/docs/voice/api-reference/authentication.md#basic-authentication).\n    oAuth2:\n      type: oauth2\n      description: The user name and password are your client_id and key_secret from the [Access keys sections](https://dashboard.sinch.com/settings/access-keys)\n      flows:\n        clientCredentials:\n          tokenUrl: https://auth.sinch.com/oauth2/token\n          scopes: {}\n\nx-readme:\n  proxy-enabled: true\n  samples-enabled: true\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/sinch.conversation/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/sinch.conversation/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1/projects/{project_id}/messages/{message_id}\": get: security: security \"oAuth2\" (index 1): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}