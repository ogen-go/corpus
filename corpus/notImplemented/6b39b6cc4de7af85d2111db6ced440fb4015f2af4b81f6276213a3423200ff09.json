{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ProjectEKA/health-information-user"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "src/main/resources/static/swagger.yaml",
			"byteSize": 21108,
			"content": "openapi: 3.0.0\ninfo:\n  version: 0.0.1\n  title: Health Information User\n  description: \u003e\n    \"Health information User\" refers to an entity that wishes to consume the\n    services of the Health Data Consent Manager and obtain aggregated health\n    information for providing services to the patient .\n\nservers:\n  - url: https://ncg-dev.projecteka.in/hiu-api\n    description: Dev\n\ntags:\n  - name: frontend\n  - name: consent notification\n  - name: data notification\n  - name: cm app\n\npaths:\n  /consent-requests:\n    post:\n      tags:\n        - frontend\n      summary: Create consent request\n      description: Creates a consent request to get data about a patient by HIU user.\n      operationId: createConsentRequest\n      parameters:\n        - $ref: '#/components/parameters/authorization'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsentRequest'\n      responses:\n        '200':\n          description: Request created in the consent manager\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    format: uuid\n  /v1/patient/consent-request:\n    post:\n      tags:\n        - cm app\n      summary: Create patient consent request\n      description: Creates a consent request to get data about a patient by patient.\n      operationId: createPatientConsentRequest\n      parameters:\n        - $ref: '#/components/parameters/authorization'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatientConsentRequest'\n      responses:\n        '202':\n          description: Request created in the consent manager\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PatientConsentResponse'\n                type: object\n                properties:\n                  id:\n                    type: string\n                    format: uuid\n  /sessions:\n    post:\n      tags:\n        - frontend\n      summary: Login user\n      description: Create a session for user / doctors.\n      operationId: createSession\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SessionRequest'\n      responses:\n        '200':\n          description: Request created in the consent manager\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  accessToken:\n                    type: string\n                    example: bearer yJhbGciOiJSUzI1Ni.IsInR5cCIgOiAiSldUIiwia2lkIiA6ICJrVVp.2MXJQMjRyYXN1UW9wU2lWbkdZQUZIVFowYVZGVWpYNXFLMnNibTk0In0\n        '401':\n          description: Invalid username or password\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /users:\n    post:\n      tags:\n        - frontend\n      summary: Create user\n      description: Create HIU user who can access HIU application\n      parameters:\n        - $ref: '#/components/parameters/authorization'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserCreationRequest'\n      responses:\n        '200':\n          description: Successful creation of consent artefact.\n        '401':\n          description: Unauthorized request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Does not have enough permission to create user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /patients/{patient-id}:\n    get:\n      tags:\n        - frontend\n      summary: Search patient\n      description: Search patients in the respective health information consent manager.\n      parameters:\n        - $ref: '#/components/parameters/authorization'\n        - name: patient-id\n          in: path\n          required: true\n          schema:\n            type: string\n            format: \u003cuser-id\u003e@\u003cncg-id\u003e\n            example: batman@ncg\n      responses:\n        '200':\n          description: Successful creation of consent artefact.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PatientSearchRepresentation'\n  /users/password:\n    put:\n      tags:\n        - frontend\n      summary: Change password\n      description: Change the password for logged in user\n      parameters:\n        - $ref: '#/components/parameters/authorization'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChangePasswordBody'\n      responses:\n        '200':\n          description: Successful updation of password.\n        '400':\n          description: When new password is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /config:\n    get:\n      tags:\n        - frontend\n      summary: Frontend Configuration\n      description: Fetch configuration for frontend\n      responses:\n        '200':\n          description: Successful fetch\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Configuration'\n  /consent/notification/:\n    post:\n      tags:\n        - consent notification\n      summary: Consent notification\n      description: Call back url from consent manager when consent artefact gets created.\n      parameters:\n        - $ref: '#/components/parameters/authorization'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsentNotification'\n      responses:\n        '200':\n          description: Notification successful.\n        '401':\n          description: \u003e\n            **Causes:**\n              * Invalid/Expired/Empty token.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: \u003e\n            **Causes:**\n              * Downstream services are down\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /health-information/fetch/{consent-request-id}/:\n    get:\n      tags:\n        - frontend\n      summary: Get health information.\n      description: This API can be used to fetch the health information for a consent request once the request is granted by the patient.\n      parameters:\n        - $ref: '#/components/parameters/authorization'\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - name: consent-request-id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Health information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthInformation'\n  /v1/patient/health-information/fetch/:\n    post:\n      tags:\n        - cm app\n      summary: Get health information.\n      description: This API can be used to fetch the health information for a set of consent requests when CM app request for data.\n      parameters:\n        - $ref: '#/components/parameters/authorization'\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatientHealthDataFetchRequest'\n      responses:\n        '200':\n          description: Health information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PatientHealthDataResponse'\n  /v1/patient/health-information/status/:\n    post:\n      tags:\n        - cm app\n      summary: Get health information status.\n      description: This API can be used to check the status of health information against a set of data request ids when CM app request for data.\n      parameters:\n        - $ref: '#/components/parameters/authorization'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatientHealthDataFetchRequest'\n      responses:\n        '200':\n          description: Health information statuses\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PatientHealthDataStatus'\n  /v1/patient/health-information/fetch/{consent-request-id}/attachments/{attachment-path}:\n    get:\n      tags:\n        - cm app\n      summary: Get attachment.\n      description: This API can be used to fetch the health information for a consent request once the request is granted by the patient.\n      parameters:\n        - $ref: '#/components/parameters/authorization'\n        - name: consent-request-id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: attachment-path\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Attachment Binary file\n  /data/notification:\n    post:\n      tags:\n        - data notification\n      summary: data notification\n      description: Once data is prepared at HIP, will be passed to HIU.\n      parameters:\n        - $ref: '#/components/parameters/authorization'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DataNotification'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/DataNotification'\n      responses:\n        '202':\n          description: Data accepted.\n        '401':\n          description: \u003e\n            **Causes:**\n              * Invalid/Expired/Empty token.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: \u003e\n            **Causes:**\n              * Downstream services are down\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\ncomponents:\n  parameters:\n    authorization:\n      name: Authorization\n      in: header\n      required: true\n      description: Bearer token which was issued after successful login.\n      schema:\n        type: string\n    limit:\n      name: limit\n      in: query\n      description: How many items to return at one time (max 100) (recommended to sent always)\n      required: false\n      schema:\n        type: integer\n        format: int32\n    offset:\n      name: offset\n      in: query\n      description: How many items out of line.\n      required: false\n      schema:\n        type: integer\n        format: int32\n  schemas:\n    PatientSearchRepresentation:\n      type: object\n      properties:\n        patient:\n          $ref: '#/components/schemas/PatientRepresentation'\n    Configuration:\n      type: object\n      properties:\n        consentManagers:\n          type: array\n          items:\n            properties:\n              userIdSuffix:\n                type: string\n                example: '@ncg'\n          description: list of consent managers with properties\n    ChangePasswordBody:\n      type: object\n      properties:\n        oldPassword:\n          type: string\n          example: someOldpassword@1\n        newPassword:\n          type: string\n          example: someNewpassword@1\n    ConsentManagerPatientID:\n      type: object\n      properties:\n        id:\n          type: string\n          format: \u003cuser-id\u003e@\u003cncg-id\u003e\n          example: batman@ncg\n    PatientRepresentation:\n      allOf:\n        - $ref: '#/components/schemas/ConsentManagerPatientID'\n        - type: object\n          properties:\n            display:\n              type: string\n    HITypeEnum:\n      type: string\n      enum:\n        - HIType1\n        - HIType2\n        - HIType3\n        - HIType4\n        - HIType5\n      example: \"DiagnosticReport\"\n    HIPIds:\n      type: string\n      example: \"100001\"\n    PatientConsentRequest:\n      type: object\n      properties:\n        hipIds:\n          type: array\n          items:\n            $ref: '#/components/schemas/HIPIds'\n        reloadConsent:\n          type: boolean\n    PatientConsentResponse:\n      type: object\n      additionalProperties:\n        type: string\n      example:\n        \"100001\": req-id-for-hip-100001\n        \"100002\": req-id-for-hip-100002\n    ConsentRequest:\n      type: object\n      properties:\n        consent:\n          type: object\n          properties:\n            patient:\n              allOf:\n                - $ref: '#/components/schemas/ConsentManagerPatientID'\n            purpose:\n              type: object\n              properties:\n                code:\n                  type: string\n                  example: \"ReferralService\"\n            hitypes:\n              type: array\n              items:\n                $ref: '#/components/schemas/HITypeEnum'\n            permission:\n              type: object\n              properties:\n                dateRange:\n                  type: object\n                  properties:\n                    from:\n                      type: string\n                      format: datetime\n                    to:\n                      type: string\n                      format: datetime\n                dataEraseAt:\n                  type: string\n                  format: date-time\n    ConsentStatus:\n      type: string\n      example: 'REQUESTED | EXPIRED | DENIED | GRANTED | REVOKED'\n      enum:\n        - REQUESTED\n        - EXPIRED\n        - DENIED\n        - GRANTED\n        - REVOKED\n    ConsentArtefactReference:\n      type: object\n      properties:\n        id:\n          type: string\n          example: '\u003cconsent-artefact-id\u003e'\n    ConsentNotification:\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/ConsentStatus'\n        timestamp:\n          type: string\n          format: date-time\n          description: Denotes the time at which consent was granted/revoked\n        consentRequestId:\n          type: string\n          example: '\u003cconsent-request-id\u003e'\n        consentArtefacts:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConsentArtefactReference'\n    HealthInformation:\n      type: object\n      properties:\n        limit:\n          type: integer\n        size:\n          type: integer\n        offset:\n          type: integer\n        entries:\n          type: array\n          items:\n            $ref: '#/components/schemas/Entry'\n    Entry:\n      type: object\n      required:\n        - hipId\n        - hipName\n        - status\n        - data\n      properties:\n        hipId:\n          type: string\n        hipName:\n          type: string\n        status:\n          type: string\n          enum: [SUCCEEDED, ERRORED]\n        data:\n          type: object\n          description: data is a FHIR bundle. https://www.hl7.org/fhir/bundle.html\n    ErrorResponse:\n      type: object\n      properties:\n        error:\n          $ref: '#/components/schemas/Error'\n      xml:\n        name: ErrorResponse\n    Error:\n      type: object\n      properties:\n        code:\n          type: integer\n          enum: [1000, 1001, 1007]\n          description: \u003e\n            1. Error code 1000 : No patient found\n            2. Error code 1001: Multiple patients found\n        message:\n          type: string\n      xml:\n        name: Error\n    DataNotification:\n      type: object\n      required:\n        - transactionId\n        - entries\n        - keyMaterial\n        - pageNumber\n        - pageCount\n      properties:\n        pageNumber:\n          type: integer\n          description: Current page number.\n        pageCount:\n          type: integer\n          description: Total number of pages.\n        transactionId:\n          type: string\n          format: uuid\n          description: Transaction Id issued when data requested.\n        entries:\n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/EntryContent'\n              - $ref: '#/components/schemas/EntryLink'\n        keyMaterial:\n          $ref: '#/components/schemas/KeyMaterial'\n    EntryContent:\n      type: object\n      required:\n        - content\n        - media\n      properties:\n        content:\n          type: string\n          description: Encrypted content\n          example: Encrypted content of data packaged in FHIR bundle\n        media:\n          type: string\n          enum: ['application/fhir+json']\n        checksum:\n          type: string\n        carecontextReference:\n          type: string\n          description: care context reference number.\n    EntryLink:\n      type: object\n      required:\n        - link\n        - media\n      properties:\n        link:\n          type: string\n          description: Encrypted content\n          example: https://data-from.net/sa2321afaf12e13\n        media:\n          type: string\n          enum: ['application/fhir+json']\n        checksum:\n          type: string\n        carecontextReference:\n          type: string\n          description: care context reference number.\n    KeyMaterial:\n      type: object\n      required:\n        - cryptoAlg\n        - curve\n        - dhPublicKey\n        - nonce\n      properties:\n        cryptoAlg:\n          type: string\n          format: string\n          example: ECDH\n        curve:\n          type: string\n          format: string\n          example: Curve25519\n        dhPublicKey:\n          $ref: '#/components/schemas/KeyObject'\n        nonce:\n          type: string\n          format: 32 byte string\n          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6\n    KeyObject:\n      type: object\n      required:\n        - expiry\n        - parameters\n        - keyValue\n      properties:\n        expiry:\n          type: string\n          format: date-time\n        parameters:\n          type: string\n          format: string\n          example: Curve25519/32byte random key\n        keyValue:\n          type: string\n          format: string\n    SessionRequest:\n      type: object\n      required:\n        - username\n        - password\n      properties:\n        username:\n          type: string\n          example: dr.manju\n        password:\n          type: string\n          example: SecretPassword\n    UserCreationRequest:\n      type: object\n      required:\n        - username\n        - password\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n        role:\n          type: string\n          enum: [DOCTOR, ADMIN]\n          default: DOCTOR\n    PatientHealthDataFetchRequest:\n      type: object\n      required:\n        - requestIds\n      properties:\n        requestIds:\n          type: array\n          items:\n            type: string\n            example: consentRequestId\n    PatientHealthDataEntry:\n      type: object\n      required:\n        - hipId\n        - consentRequestId\n        - consentArtefactId\n        - status\n        - data\n      properties:\n        hipId:\n          type: string\n        consentRequestId:\n          type: string\n        consentArtefactId:\n          type: string\n        status:\n          type: string\n          enum: [SUCCEEDED, ERRORED, PROCESSING]\n        data:\n          type: object\n          description: data is a FHIR bundle. https://www.hl7.org/fhir/bundle.html\n    PatientHealthDataResponse:\n      type: object\n      properties:\n        limit:\n          type: integer\n        size:\n          type: integer\n        offset:\n          type: integer\n        entries:\n          type: array\n          items:\n            $ref: '#/components/schemas/PatientHealthDataEntry'\n    PatientHealthDataStatus:\n      type: object\n      properties:\n        statuses:\n          type: array\n          items:\n            type: object\n            properties:\n              requestId:\n                type: string\n              hipId:\n                type: string\n              status:\n                type: string\n                enum: [COMPLETED, PROCESSING]\n",
			"canonicalURL": "/github.com/ProjectEKA/health-information-user@3f1507ee355efd2c16f62272cf473fafce9e4fdd/-/blob/src/main/resources/static/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ProjectEKA/health-information-user/blob/3f1507ee355efd2c16f62272cf473fafce9e4fdd/src/main/resources/static/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/data/notification\": post: requestBody: contents: application/json: generate schema: field entries: item: anyOf: complex anyOf not implemented",
	"NotImplemented": [
		"complex anyOf"
	]
}