{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/goharbor/pluggable-scanner-spec"
		},
		"file": {
			"name": "scanner-adapter-openapi-v1.1.yaml",
			"size": 0,
			"path": "api/spec/scanner-adapter-openapi-v1.1.yaml",
			"byteSize": 16520,
			"content": "openapi: 3.0.0\ninfo:\n  title: Harbor Scanner Adapter API\n  description: |\n    ## Overview\n\n    This API must be implemented in order to register a new artifact scanner in [Harbor](https://goharbor.io) registry.\n\n    The [/scan](#operation/AcceptScanRequest) and [/scan/{scan_request_id}/report](#operation/GetScanReport) operations are responsible for the actual scanning and return a scan report that is visible in the Harbor web console.\n\n    The [/scan](#operation/AcceptScanRequest) operation is asynchronous. It should enqueue the job for processing a scan request and return the identifier. This allows Harbor to poll a corresponding scan report with the\n    [/scan/{scan_request_id}/report](#operation/GetScanReport) operation. Harbor will call the\n    [/scan/{scan_request_id}/report](#operation/GetScanReport) operation periodically periodically until it returns 200 or 500 status codes.\n\n    The [/metadata](#operation/GetMetadata) operation allows a Harbor admin to configure and register a scanner\n    and discover its capabilities.\n\n    ## Supported consumed MIME types\n\n    - `application/vnd.oci.image.manifest.v1+json`\n    - `application/vnd.docker.distribution.manifest.v2+json`\n\n    ## Supported produced MIME types\n    \n    - `application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0`\n    - `application/vnd.security.vulnerability.report; version=1.1`\n    - `application/vnd.scanner.adapter.vuln.report.raw`\n  contact:\n    email: cncf-harbor-maintainers@lists.cncf.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: \"1.1\"\nservers:\n  - url: /api/v1\nsecurity:\n  - BasicAuth: []\n  - BearerAuth: []\npaths:\n  /metadata:\n    get:\n      tags:\n        - Scanner\n      summary: Get scanner metadata\n      description: |\n        Used to fetch scanner's metadata and capabilities. The operation is invoked to build an index of scanners\n        capable of analysing a given type of artifacts and making sure that scan reports can be parsed and rendered.\n      operationId: GetMetadata\n      responses:\n        200:\n          description: Scanner's metadata and capabilities\n          content:\n            \"application/vnd.scanner.adapter.metadata+json; version=1.0\":\n              schema:\n                $ref: '#/components/schemas/ScannerAdapterMetadata'\n        500:\n          description: Internal server error\n          content:\n            \"application/vnd.scanner.adapter.error+json; version=1.0\":\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /scan:\n    post:\n      tags:\n        - Scanner\n      summary: Accept artifact scanning request\n      description: |\n        A non-blocking operation which enqueues a scan job and returns immediately. It returns a unique\n        identifier which can be used to poll for generated scan reports by Harbor.\n      operationId: AcceptScanRequest\n      requestBody:\n        description: |\n          Contains data required to pull the given artifact and save it for scanning in the file system or any other\n          location accessible to the scanner.\n        content:\n          \"application/vnd.scanner.adapter.scan.request+json; version=1.0\":\n            schema:\n              $ref: '#/components/schemas/ScanRequest'\n      responses:\n        202:\n          description: Scan request accepted\n          content:\n            \"application/vnd.scanner.adapter.scan.response+json; version=1.0\":\n              schema:\n                $ref: \"#/components/schemas/ScanResponse\"\n        400:\n          description: Received invalid JSON or the wrong type of JSON values\n          content:\n            \"application/vnd.scanner.adapter.error+json; version=1.0\":\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        422:\n          description: Received invalid field\n          content:\n            \"application/vnd.scanner.adapter.error+json; version=1.0\":\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        500:\n          description: Internal server error\n          content:\n            \"application/vnd.scanner.adapter.error+json; version=1.0\":\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /scan/{scan_request_id}/report:\n    get:\n      tags:\n        - Scanner\n      summary: Get scan report\n      description: |\n        Get a scan report for the given scan request identifier.\n\n        Clients will periodically poll this operation and check `$response.status` until its value equals `200` or `500`.\n      operationId: GetScanReport\n      parameters:\n        - name: scan_request_id\n          in: path\n          description: The identifier of the corresponding scan request\n          required: true\n          style: simple\n          explode: false\n          schema:\n            $ref: '#/components/schemas/ScanRequestId'\n        - name: Accept\n          in: header\n          schema:\n            type: string\n          example: \"application/vnd.security.vulnerability.report; version=1.1\"\n      responses:\n        200:\n          description: Scan report\n          content:\n            \"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\":\n              schema:\n                $ref: '#/components/schemas/HarborVulnerabilityReport'\n            \"application/vnd.security.vulnerability.report; version=1.1\":\n              schema:\n                $ref: '#/components/schemas/HarborVulnerabilityReport'\n            \"application/vnd.scanner.adapter.vuln.report.raw\":\n              schema:\n                type: string\n                example: |\n                  {\n                    \"vendor_specific\": \"vulnerabilities_report\"\n                  }\n        302:\n          description: Status indicating the scan report is being generated and the request should be retried.\n          headers:\n            Refresh-After:\n              description: Indicates the interval after which the request should be retried.\n              schema:\n                type: integer\n        404:\n          description: Cannot find the corresponding scan request identifier\n        500:\n          description: Internal server error\n          content:\n            \"application/vnd.scanner.adapter.error+json; version=1.0\":\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\ncomponents:\n  schemas:\n    Scanner:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the scanner.\n          example: Trivy\n        vendor:\n          type: string\n          description: The name of the scanner's provider.\n          example: Aqua Security\n        version:\n          type: string\n          description: The version of the scanner.\n          example: 0.4.0\n      description: |\n        Basic scanner properties such as name, vendor, and version.\n    ScannerAdapterMetadata:\n      required:\n        - scanner\n        - capabilities\n      type: object\n      properties:\n        scanner:\n          $ref: '#/components/schemas/Scanner'\n        capabilities:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScannerCapability'\n        properties:\n          $ref: \"#/components/schemas/ScannerProperties\"\n      description: |\n        Represents metadata of a Scanner Adapter which allows Harbor to lookup a scanner capable\n        of scanning a given Artifact stored in its registry and making sure that it\n        can interpret a returned result.\n    ScannerProperties:\n      type: object\n      additionalProperties:\n        type: string\n      example:\n        \"harbor.scanner-adapter/scanner-type\": \"os-package-vulnerability\"\n        \"harbor.scanner-adapter/vulnerability-database-updated-at\": \"2019-08-13T08:16:33.345Z\"\n      description: |\n        A set of custom properties that can further describe capabilities of a given scanner.\n    ScannerCapability:\n      description: |\n        Capability consists of the set of recognized artifact MIME types and the set of scanner report MIME types.\n        For example, a scanner capable of analyzing Docker images and producing a vulnerabilities report recognizable\n        by Harbor web console might be represented with the following capability:\n        - consumes MIME types:\n          - `application/vnd.oci.image.manifest.v1+json`\n          - `application/vnd.docker.distribution.manifest.v2+json`\n        - produces MIME types:\n          - `application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0`\n      required:\n        - consumes_mime_types\n        - produces_mime_types\n      type: object\n      properties:\n        consumes_mime_types:\n          type: array\n          items:\n            type: string\n          description: |\n            The set of MIME types of the artifacts supported by the scanner to produce the reports specified in the \"produces_mime_types\". A given\n            mime type should only be present in one capability item.\n          example:\n            - \"application/vnd.oci.image.manifest.v1+json\"\n            - \"application/vnd.docker.distribution.manifest.v2+json\"\n        produces_mime_types:\n          type: array\n          items:\n            type: string\n          description: |\n            The set of MIME types of reports generated by the scanner for the consumes_mime_types of the same capability record.\n          example:\n            - \"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\"\n    ScanRequest:\n      required:\n        - registry\n        - artifact\n      type: object\n      properties:\n        registry:\n          $ref: '#/components/schemas/Registry'\n        artifact:\n          $ref: '#/components/schemas/Artifact'\n    ScanResponse:\n      required:\n        - id\n      properties:\n        id:\n          $ref: '#/components/schemas/ScanRequestId'\n    ScanRequestId:\n      description: |\n        A unique identifier returned by the [/scan](#/operation/AcceptScanRequest] operations. The format of the\n        identifier is not imposed but it should be unique enough to prevent collisons when polling for scan reports.\n      type: string\n      example: \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\n    Registry:\n      type: object\n      properties:\n        url:\n          type: string\n          description: A base URL or the Docker Registry v2 API.\n          format: url\n          example: https://core.harbor.domain\n        authorization:\n          type: string\n          description: |\n            An optional value of the HTTP Authorization header sent with each request to the Docker Registry v2 API.\n            It's used to exchange Base64 encoded robot account credentials to a short lived JWT access token which\n            allows the underlying scanner to pull the artifact from the Docker Registry.\n          example: \"Basic BASE64_ENCODED_CREDENTIALS\"\n    Artifact:\n      type: object\n      properties:\n        repository:\n          type: string\n          description: The name of the Docker Registry repository containing the artifact.\n          example: library/mongo\n        digest:\n          type: string\n          description: The artifact's digest, consisting of an algorithm and hex portion.\n          example: \"sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b\"\n        tag:\n          type: string\n          description: The artifact's tag\n          example: \"3.14-xenial\"\n        mime_type:\n          type: string\n          description: The MIME type of the artifact.\n          example: \"application/vnd.docker.distribution.manifest.v2+json\"\n    HarborVulnerabilityReport:\n      type: object\n      properties:\n        generated_at:\n          type: string\n          format: 'date-time'\n        artifact:\n          $ref: '#/components/schemas/Artifact'\n        scanner:\n          $ref: '#/components/schemas/Scanner'\n        severity:\n          $ref: \"#/components/schemas/Severity\"\n        vulnerabilities:\n          type: array\n          items:\n            $ref: '#/components/schemas/VulnerabilityItem'\n    VulnerabilityItem:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique identifier of the vulnerability.\n          example: CVE-2017-8283\n        package:\n          type: string\n          description: |\n            An operating system package containing the vulnerability.\n          example: dpkg\n        version:\n          type: string\n          description: |\n            The version of the package containing the vulnerability.\n          example: 1.17.27\n        fix_version:\n          type: string\n          description: |\n            The version of the package containing the fix if available.\n          example: 1.18.0\n        severity:\n          $ref: \"#/components/schemas/Severity\"\n        description:\n          type: string\n          description: |\n            The detailed description of the vulnerability.\n          example: |\n            dpkg-source in dpkg 1.3.0 through 1.18.23 is able to use a non-GNU patch program\n            and does not offer a protection mechanism for blank-indented diff hunks, which\n            allows remote attackers to conduct directory traversal attacks via a crafted\n            Debian source package, as demonstrated by using of dpkg-source on NetBSD.\n        links:\n          type: array\n          items:\n            type: string\n            format: uri\n          description: |\n            The list of links to the upstream databases with the full description of the vulnerability.\n          format: uri\n          example:\n            - https://security-tracker.debian.org/tracker/CVE-2017-8283\n        preferred_cvss:\n          $ref: \"#/components/schemas/CVSSDetails\"\n        cwe_ids:\n          type: array\n          items:\n            type: string\n          example: \n            - CWE-476\n          description: |\n            The Common Weakness Enumeration Identifiers associated with this vulnerability.\n        vendor_attributes:\n          type: object\n          additionalProperties: true\n    Severity:\n      type: string\n      description: |\n        A standard scale for measuring the severity of a vulnerability.\n\n        * `Unknown` - either a security problem that has not been assigned to a priority yet or a priority that the\n          scanner did not recognize.\n        * `Negligible` - technically a security problem, but is only theoretical in nature, requires a very special\n          situation, has almost no install base, or does no real damage.\n        * `Low` - a security problem, but is hard to exploit due to environment, requires a user-assisted attack,\n          a small install base, or does very little damage.\n        * `Medium` - a real security problem, and is exploitable for many people. Includes network daemon denial of\n          service attacks, cross-site scripting, and gaining user privileges.\n        * `High` - a real problem, exploitable for many people in a default installation. Includes serious remote denial\n          of service, local root privilege escalations, or data loss.\n        * `Critical` - a world-burning problem, exploitable for nearly all people in a default installation. Includes\n          remote root privilege escalations, or massive data loss.\n      example: Low\n      enum:\n        - Unknown\n        - Negligible\n        - Low\n        - Medium\n        - High\n        - Critical\n    ErrorResponse:\n      type: object\n      properties:\n        error:\n          $ref: \"#/components/schemas/Error\"\n    Error:\n      type: object\n      properties:\n        message:\n          type: string\n          example: \"Some unexpected error\"\n    CVSSDetails:\n      type: object\n      properties:\n        score_v3:\n          type: number\n          format: float\n          description: |\n            The CVSS 3.0 score for the vulnerability.\n          example: 3.2\n        score_v2:\n          type: number\n          format: float\n          description: |\n            The CVSS 2.0 score for the vulnerability.\n        vector_v3:\n          type: string\n          description: |\n            The CVSS 3.0 vector for the vulnerability. \n          example: CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N\n        vector_v2:\n          type: string\n          description: |\n            The CVSS 2.0 vector for the vulnerability. The string is of the form AV:L/AC:M/Au:N/C:P/I:N/A:N\n          example: AV:N/AC:L/Au:N/C:N/I:N/A:P\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n    BearerAuth:\n      type: http\n      scheme: bearer\n",
			"canonicalURL": "/github.com/goharbor/pluggable-scanner-spec@a43542d5c0e450624ca452d49f2f9fa9b893d773/-/blob/api/spec/scanner-adapter-openapi-v1.1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/goharbor/pluggable-scanner-spec/blob/a43542d5c0e450624ca452d49f2f9fa9b893d773/api/spec/scanner-adapter-openapi-v1.1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/metadata\": get: responses: 200: contents: unsupported content types: [application/vnd.scanner.adapter.metadata+json; version=1.0]",
	"NotImplemented": [
		"unsupported content types"
	]
}