{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/athenarc/smpc-analytics"
		},
		"file": {
			"name": "API.yaml",
			"size": 0,
			"path": "API/API.yaml",
			"byteSize": 13202,
			"content": "openapi: 3.0.0\ninfo:\n  title: Athena MHMD API\n  description: \u003e-\n    An API for multi-level privacy preservation techniques.\n  version: 0.0.1\ntags:\n  - name: Amnesia\n    description: \u003e-\n      Amnesia is a data anonymization tool, that allows to remove identifying\n      information from data. mnesia not only removes direct identifiers like\n      names, SSNs etc but also transforms secondary identifiers like birth date\n      and zip code so that individuals cannot be identified in the data. Amnesia\n      supports k-anonymity and k^m-anonymity\n  - name: SMPC\n    description: 'Secure multi party computation platform'\npaths:\n  /smpc/import:\n    post:\n      tags:\n      - SMPC\n      summary: Securely import data into the SMPC Platform.\n      description: \"Import a specified attribute into the SMPC cluster. This API call is used internally\"\n      requestBody:\n        description: The attribute for which data will be imported\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Import'\n      responses:\n        '200':\n          description: Data imported successfully.\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: An error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /smpc/count/:\n    post:\n      tags:\n        - SMPC\n      summary: Initiate a secure count computation on a specified attribute.\n      description: \"Compute the counts of all possible values of a desired attribute, over the specifed datasources. The specified attribute should be a valid Mesh term.\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Count\"\n      responses:\n        '202':\n          description: Count computation accepted.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputationAccepted\"\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: An error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /smpc/decision_tree/:\n    post:\n      tags:\n        - SMPC\n      summary: Build a decision tree on selected attributes.\n      description: \"Train a decision tree classifier on specific test and target attributes.\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Tree\"\n      responses:\n        '202':\n          description: Decision Tree computation accepted.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputationAccepted\"\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: An error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /smpc/queue:\n    get:\n      tags:\n        - SMPC\n      summary: \"Poll for an ongoing computation status.\"\n      description: \"Check the status of an ongoing computation. Returns its status, possibly its current step and on success, the computation result in JSON format.\"\n      parameters:\n        - in: query\n          name: request\n          schema:\n            type: string\n          description: The request id.\n      responses:\n        '200':\n          description: ΟΚ.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComputationResponse\"\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: An error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /amnesia/session:\n    get:\n      tags:\n        - Amnesia\n      summary: Get a session id.\n      security: []\n      responses:\n        '200':\n          description: \u003e\n            The session ID is returned in a cookie named `JSESSIONID`. You need\n            to include this cookie in subsequent requests.\n          headers:\n            Set-Cookie:\n              schema:\n                type: string\n                example: JSESSIONID=abcde12345; Path=/; HttpOnly\n  /amnesia/dataset:\n    post:\n      tags:\n        - Amnesia\n      summary: Upload a dataset.\n      security:\n        - cookieAuth: []\n      requestBody:\n        required: true\n        description: The metadata and the file of the dataset\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Dataset'\n      responses:\n        '200':\n          description: File uploaded successfully.\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Authorization information is missing or invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: An error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /amnesia/hierarchy:\n    post:\n      tags:\n        - Amnesia\n      summary: Upload a hierarchy.\n      security:\n        - cookieAuth: []\n      requestBody:\n        description: The hierarchy file\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Hierarchy'\n      responses:\n        '200':\n          description: File uploaded successfully.\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Authorization information is missing or invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: An error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /amnesia/anonymize:\n    post:\n      tags:\n        - Amnesia\n      summary: Executes k or km anonimity.\n      security:\n        - cookieAuth: []\n      requestBody:\n        description: The parameters of the algorithm\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Algorithm'\n      responses:\n        '200':\n          description: A file containing the best anonymized solution based on information loss\n          content:\n            application/csv:\n              schema:\n                type: string\n                format: binary\n        '400':\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Authorization information is missing or invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: An error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\ncomponents:\n  securitySchemes:\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: JSESSIONID\n  schemas:\n    Dataset:\n      required:\n        - file\n        - del\n        - datatype\n        - vartypes\n        - checkColumns\n      properties:\n        file:\n          type: string\n          format: binary\n          description: The file\n        del:\n          type: string\n          description: The split delimiter\n        datatype:\n          type: string\n          description: 'The data type of the dataset: ''tabular'' or ''set'''\n        vartypes:\n          type: array\n          description: \u003e-\n            An array with the variable types of the columns: ['int', 'double',\n            'string', 'date']\n          items:\n            type: string\n        checkColumns:\n          type: array\n          description: \u003e-\n            A boolean array indicating which column should participate in the\n            anonymization: ['true', 'false']\n          items:\n            type: boolean\n    Hierarchy:\n      required:\n        - file\n      properties:\n        file:\n          type: string\n          format: binary\n          description: The file\n    Algorithm:\n      required:\n        - k\n        - m\n        - algo\n        - relations\n      properties:\n        k:\n          type: integer\n          description: the k variable for k-anonymity\n        m:\n          type: integer\n          description: the m variable for km-anonymity\n        algo:\n          type: string\n          description: 'the specific algorithm, ''k-anonymity'' or ''km-anonymity'''\n        relations:\n          type: array\n          description: An array with the name of each hierarchy. (Only the quasi-identifiers. The others identifiers are empty)\n          items:\n            type: string\n    Error:\n      properties:\n        code:\n          type: integer\n          description: Error code\n        message:\n          type: string\n          description: Error message\n    Import:\n      required:\n      - attribute\n      properties:\n        attribute:\n          type: string\n          example: \"Persons\"\n    Tree:\n      required:\n        - attributes\n        - class_attribute\n        - classifier\n        - dataset\n      properties:\n        attributes:\n          description: \"List of training attributes.\"\n          type: \"array\"\n          items:\n            type: \"object\"\n            \"required\": [ \"name\" ]\n            properties:\n              name:\n                type: \"string\"\n              cells:\n                type: \"integer\"\n        dataset:\n          description: \"The dataset on which which the tree will be built.\"\n          type: \"string\"\n          example: \"cvi\"\n        classifier:\n          description: \"The classification algorithm.\"\n          type: \"string\"\n          enum:\n            - \"ID3\"\n            - \"C45\"\n        datasources:\n          description: \"Datasources on which the tree will be built. Optional. All datasources will be considered if left blank.\"\n          type: \"array\"\n          items:\n            type: \"string\"\n          example: [\"HospitalA\", \"HospitalB\"]\n      example: {\"attributes\":[{\"name\":\"Height (cm)\",\"cells\":\"3\"},{\"name\":\"Weight (kg)\",\"cells\":\"3\"}],\"classifier\":\"ID3\",\"class_attribute\":{\"name\":\"Patient Age\",\"cells\":\"3\"},\"dataset\":\"cvi\",\"datasources\":[\"HospitalA\",\"HospitalB\"]}\n    Count:\n      required:\n        - attribute\n      properties:\n        attribute:\n          description: \"Attribute for which counts will be computed. Should be a valid Mesh term.\"\n          type: \"string\"\n          example: \"Persons\"\n        datasources:\n          description: \"Datasources from which the histogram(s) will be computated. Optional. All datasources will be considered if left blank.\"\n          type: \"array\"\n          items:\n            type: \"string\"\n          example: [\"HospitalA\", \"HospitalB\"]\n    ComputationResponse:\n      required:\n        - status\n      description: \"List of serialized versions for each histogram.\"\n      type: object\n      properties:\n        status:\n          type: string\n          enum:\n            - \"succeeded\"\n            - \"running\"\n            - \"failed\"\n            - \"notstarted\"\n        step:\n          description: \"Current step of the computation\"\n          type: string\n        result:\n          type: object\n          example: {\"data\":[{\"mesh\":\"M01.060.703\",\"value\":0,\"label\":\"Infant\"},{\"mesh\":\"M01.060.057\",\"value\":63,\"label\":\"Adolescent\"},{\"mesh\":\"M01.060.116\",\"value\":9936,\"label\":\"Adult\"},{\"mesh\":\"M01.060.406\",\"value\":0,\"label\":\"Child\"}]}\n\n    ComputationAccepted:\n      required:\n        - location\n      description: \"Indication that the secure histogram computation has been accepted. The location provided should be used for status polling, and for results retrieval.\"\n      type: object\n      properties:\n        location:\n          type: string\n      example: {\"location\" : \"/smpc/queue?request=1\"}\n ",
			"canonicalURL": "/github.com/athenarc/smpc-analytics@f0858977d20b8bb3403a612b76951ce0b30f2909/-/blob/API/API.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/athenarc/smpc-analytics/blob/f0858977d20b8bb3403a612b76951ce0b30f2909/API/API.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/amnesia/anonymize\": post: security: security \"cookieAuth\" (index 0): cookie security not implemented",
	"NotImplemented": [
		"cookie security"
	]
}