{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/AlvaroIsrael/medprev-backend"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "swagger.yaml",
			"byteSize": 10065,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.1.1\n  title: People Api\n  description: People API\n  termsOfService: 'https://github.com/AlvaroIsrael/medprev-backend/blob/main/README.md'\n  contact:\n    email: israel.nunes.leite@gmail.com\n  license:\n    name: AGPL-3.0-or-later\n    url: 'https://github.com/AlvaroIsrael/medprev-backend/blob/main/LICENSE.md'\n\nservers:\n  - url: http://localhost:3333/v1\n    description: Development server\n\ntags:\n  - name: People\n    description: Operations about people.\n  - name: Addresses\n    description: Operations about addresses.\n\ncomponents:\n  securitySchemes:\n    JWT:\n      description: 'JWT Bearer'\n      type: apiKey\n      name: Authorization\n      in: header\n  schemas:\n    Appointments:\n      required:\n        - provider_id\n        - date\n      properties:\n        provider_id:\n          type: string\n        date:\n          type: string\n      example:\n        provider_id: '4129c527-67c1-4fc4-a091-526011d74a48'\n        date: '2021-03-09 09:00:00'\n    Users:\n      required:\n        - name\n        - email\n        - password\n      properties:\n        name:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n      example:\n        name: 'MedPrev User'\n        example: 'docs@medprev.net'\n        password: 'pass123456'\n    Sessions:\n      required:\n        - email\n        - password\n      properties:\n        email:\n          type: string\n        password:\n          type: string\n      example:\n        email: 'docs@medprev.net'\n        password: 'pass123456'\n    InternalServerError:\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n      example:\n        status: 'error'\n        message: 'Internal server error.'\n    UnauthorizedError:\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n      example:\n        status: 'error'\n        message: 'Missing JWT token.'\n    PersonIdValidationError:\n      properties:\n        error:\n          type: string\n        message:\n          type: string\n      example:\n        error: 'error'\n        message: '\"personId\" is not allowed to be empty'\n    StreetValidationError:\n      properties:\n        error:\n          type: string\n        message:\n          type: string\n      example:\n        error: 'error'\n        message: '\"street\" is not allowed to be empty'\n    ValidationError:\n      properties:\n        statusCode:\n          type: integer\n        error:\n          type: string\n        message:\n          type: string\n        validation:\n          type: object\n          properties:\n            body:\n              type: object\n              properties:\n                source:\n                  type: string\n                keys:\n                  type: array\n                message:\n                  type: string\n      example:\n        statusCode: 400\n        error: 'Bad Request'\n        message: 'celebrate request validation failed'\n        validation: {\n          body: {\n            source: 'body',\n            keys: [ 'validated field' ],\n            message: 'validated field is required',\n          }\n        }\n    Person:\n      required:\n        - kind\n        - name\n        - email\n        - password\n        - landlinePhoneNumber\n        - mobilePhoneNumber\n        - avatarUrl\n      properties:\n        kind:\n          type: string\n          example: 'legal'\n        name:\n          type: string\n          example: 'Moltendrifter Guardian'\n        email:\n          type: string\n          example: 'moltendrifter@gmail.com'\n        password:\n          type: string\n          example: 'mysupersecurepassword'\n        landlinePhoneNumber:\n          type: string\n          example: '55 31 3333-9999'\n        mobilePhoneNumber:\n          type: string\n          example: '55 31 99999-9999'\n        avatarUrl:\n          type: string\n          example: 'https://url.moltendrifter.io/'\n    Address:\n      required:\n        - personId\n        - street\n        - number\n        - complement\n        - district\n        - city\n        - state\n        - zipCode\n      properties:\n        personId:\n          type: string\n          example: '1'\n        street:\n          type: string\n          example: 'Moltendrifter Guardian Street'\n        number:\n          type: number\n          example: 100\n        complement:\n          type: string\n          example: 'Lorem Ispum'\n        district:\n          type: string\n          example: 'Some Street Name'\n        city:\n          type: string\n          example: 'Smallville'\n        state:\n          type: string\n          example: 'Some State Name'\n        zipCode:\n          type: string\n          example: '99999-999'\n\npaths:\n  /v1/docs:\n    get:\n      tags:\n        - Docs\n      summary: Exhibits a web page with all api documented by swagger.\n      description: 'Exhibits a web page with all api documented by swagger.'\n      responses:\n        '500':\n          description: When something goes 'boing' in the server.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerError'\n        '200':\n          description: When all parameters are ok.\n          content:\n            text/html:\n              example:\n                text/html:\n                  value: '\u003c!DOCTYPE html\u003e\u003chtml lang=\"en\"\u003e\u003chead\u003e\u003cmeta charset=\"UTF-8\"\u003e\u003ctitle\u003eSwagger UI\u003c/title\u003e\u003clink rel=\"stylesheet\" type=\"text/css\" href=\"./swagger-ui.css\" \u003e\u003clink rel=\"icon\" type=\"image/png\" href=\"./favicon-32x32.png\" sizes=\"32x32\" /\u003e\u003clink rel=\"icon\" type=\"image/png\" href=\"./favicon-16x16.png\" sizes=\"16x16\" /\u003e\u003c/head\u003e\u003cbody\u003e\u003cdiv id=\"swagger-ui\"\u003e\u003c/div\u003e\u003cscript src=\"./swagger-ui-bundle.js\"\u003e\u003c/script\u003e\u003cscript src=\"./swagger-ui-standalone-preset.js\"\u003e\u003c/script\u003e\u003cscript src=\"./swagger-ui-init.js\"\u003e\u003c/script\u003e\u003c/body\u003e\u003c/html\u003e'\n      security: [ ]\n\n  /v1/people:\n    post:\n      tags:\n        - People\n      summary: Add a new person to the database.\n      description: \"Only people with 'admin' role, can add perform this action.\"\n      requestBody:\n        description: New person\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                kind:\n                  type: string\n                role:\n                  type: string\n                name:\n                  type: string\n                email:\n                  type: string\n                password:\n                  type: string\n                landlinePhoneNumber:\n                  type: string\n                mobilePhoneNumber:\n                  type: string\n                avatarUrl:\n                  type: string\n                sex:\n                  type: string\n                birthDate:\n                  type: string\n                addresses:\n                  type: array\n            example: {\n              kind: 'natural',\n              role: 'admin',\n              document: '152.053.110-96',\n              name: 'manolo',\n              email: 'manolo@gmail.com',\n              password: 'mysupersecurepassword',\n              landlinePhoneNumber: '55 31 3333-9999',\n              mobilePhoneNumber: '55 31 99999-9999',\n              avatarUrl: 'https://mysuper-url',\n              sex: 'm',\n              birthDate: '2020-12-05',\n              addresses: [ ]\n            }\n      responses:\n        '500':\n          description: When something goes boing in the server.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerError'\n        '400':\n          description: When validation error occurs.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/ValidationError'\n              examples:\n                ValidationError:\n                  value:\n                    status: 'error'\n                    message: 'User token does not exist'\n      security: [ ]\n\n  /v1/addresses:\n    post:\n      tags:\n        - Addresses\n      summary: Add a new address to the database.\n      description: \"Only people with 'admin' role, can add perform this action.\"\n      requestBody:\n        description: New address\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                personId:\n                  type: string\n                street:\n                  type: string\n                number:\n                  type: number\n                complement:\n                  type: string\n                district:\n                  type: string\n                city:\n                  type: string\n                state:\n                  type: string\n                zipCode:\n                  type: string\n            example: {\n              personId: '1',\n              street: 'Some street name',\n              number: 999,\n              complement: 'Apto 1',\n              district: 'Some district name',\n              city: 'Some city name',\n              state: 'Some state name',\n              zipCode: '99999-999',\n            }\n      responses:\n        '500':\n          description: When something goes boing in the server.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerError'\n        '400':\n          description: When validation error occurs.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/PersonIdValidationError'\n                  - $ref: '#/components/schemas/StreetValidationError'\n              examples:\n                PersonIdValidationError:\n                  value:\n                    status: 'error'\n                    message: '\"personId\" is not allowed to be empty'\n                StreetValidationError:\n                  value:\n                    status: 'error'\n                    message: '\"street\" is not allowed to be empty'\n",
			"canonicalURL": "/github.com/AlvaroIsrael/medprev-backend@ee65c4ed06c0fd00db44da92d82cf8be7282ae19/-/blob/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/AlvaroIsrael/medprev-backend/blob/ee65c4ed06c0fd00db44da92d82cf8be7282ae19/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1/addresses\": post: responses: 400: contents: application/json: generate schema: oneOf: oneOf V1AddressesPostBadRequest: variant StreetValidationError: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"discriminator inference",
		"unsupported content types"
	]
}