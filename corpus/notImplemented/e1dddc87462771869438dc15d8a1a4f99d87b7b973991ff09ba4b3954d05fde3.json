{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenLiberty/open-liberty"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "dev/com.ibm.ws.rest.handler.config.openapi/resources/META-INF/openapi.yaml",
			"byteSize": 8037,
			"content": "# *******************************************************************************\n# Copyright (c) 2019 IBM Corporation and others.\n# All rights reserved. This program and the accompanying materials\n# are made available under the terms of the Eclipse Public License v1.0\n# which accompanies this distribution, and is available at\n# http://www.eclipse.org/legal/epl-v10.html\n#\n# Contributors:\n#     IBM Corporation - initial API and implementation\n# *******************************************************************************\nopenapi: \"3.0.2\"\ninfo:\n  title: Config API\n  version: \"1.0\"\n  description: \"The Config REST endpoint retrieves information about configured elements and lists available REST API for each.\"\nservers:\n  - url: https://127.0.0.1:8020/ibm/api\npaths:\n  /config/:\n    get:\n      tags:\n      - Config\n      summary: \"Shows configuration of all elements\"\n      description: \"Retrieves configuration detail for instances of all configuration element types.\"\n      parameters:\n        - $ref: \"#/components/parameters/queryParams\"\n      responses:\n        200:\n          description: \"Configuration info retrieved\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/config.result\"\n  /config/{elementName}:\n    get:\n      tags:\n      - Config\n      summary: \"Shows configurations of the requested config element type\"\n      description: \"Retrieves configuration detail for instances of the requested type of configuration element.\"\n      parameters:\n        - name: elementName\n          in: path\n          description: \"**Configuration element name**. The type of configuration element, such as `dataSource` or `application`.\"\n          required: true\n          schema:\n            type: string\n            example: \"dataSource\"\n        - $ref: \"#/components/parameters/queryParams\"\n      responses:\n        200:\n          description: \"Configuration info retrieved\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/config.result\"\n  /config/{elementName}/{uid}:\n    get:\n      tags:\n      - Config\n      summary: \"Shows configuration of a single instance of the requested type\"\n      description: \"Retrieves configuration detail for a single configuration element, uniquely qualfied by its unique identifier.\"\n      parameters:\n        - name: elementName\n          in: path\n          description: \"**Configuration element name**. The type of configuration element, such as `dataSource` or `application`.\"\n          required: true\n          schema:\n            type: string\n            example: \"dataSource\"\n        - name: uid\n          in: path\n          description: \"**Unique identifier**. For an element configured at top level, this is the value of the `id` attribute, if present. Otherwise, it is a generated value, such as *dataSource[default-0]*.\"\n          required: true\n          schema:\n            type: string\n            example: \"DefaultDataSource\"\n          examples:\n            example-id:\n              summary: \"Top-level element with id\"\n              description: \"The uid of a top-level config element is the value of its `id` attribute, if present.\"\n              value: \"DefaultDataSource\"\n            example-no-id:\n              summary: \"Top-level element without id\"\n              description: \"The uid of a top-level config element without an `id` attribute is computed based on the order of appearance within server config, starting at 0.\"\n              value: \"jmsConnectionFactory[default-0]\"\n            example-nested:\n              summary: \"Nested element without id\"\n              description: \"This example shows a generated uid for the first connectionManager (index 0, lacking an id) that is nested under a dataSource element with id of DefaultDataSource.\"\n              value: \"dataSource[DefaultDataSource]/connectionManager[default-0]\"\n            example-nested-under-singleton:\n              summary: \"Nested element (without id) under singleton\"\n              description: \"This example shows a generated uid for the first dataSource (index 0, lacking an id) that is nested under the transaction element. The transaction element is a singleton and cannot have an id.\"\n              value: \"transaction/dataSource[default-0]\"\n            example-app-def:\n              summary: \"App-defined resource\"\n              description: \"The uid for application-defined resources, such as @DataSourceDefinition and @JMSConnectionFactoryDefinition, is computed based on the configured name and qualified by its scope. This example is for a @DataSourceDefinition in the MyApp application, in the MyWebModule module, with a name of java:module/env/jdbc/ds1\"\n              value: \"application[MyApp]/module[MyWebModule]/dataSource[java:module/env/jdbc/ds1]\"\n      responses:\n        200:\n          description: \"Configuration info retrieved\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/config.result\"\nsecurity:\n  - basicAuth: []\ncomponents:\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n  parameters:\n    queryParams:\n      name: queryParams\n      in: query\n      description: \"**Query Parameters**. Supply additional query parameters in JSON as key/value pairs. For example, the following parameters could be specified for an application-defined data source: *{ \\\"application\\\": \\\"MyApp\\\", \\\"jndiName\\\": \\\"java:app/env/jdbc/MyDataSource\\\" }*\"\n      schema:\n        type: object\n        additionalProperties:\n          type: string\n        example: {} # empty because the example is also used as a default value\n  schemas:\n    config.result:\n      type: object\n      properties:\n        configElementName:\n          description: \"config element name\"\n          type: string\n        uid:\n          description: \"unique identifier\"\n          type: string\n        id:\n          description: \"id of configuration element\"\n          type: string\n        jndiName:\n          description: \"jndiName of configuration element\"\n          type: string\n        api:\n          description: \"relative paths to available REST endpoints for this configuration element\"\n          type: array\n          items:\n            type: string\n      additionalProperties:\n        anyOf:\n          - type: boolean\n          - type: number\n          - type: string\n          - $ref: \"#/components/schemas/config.result\"\n          - type: object\n          - type: array\n            items:\n              $ref: \"#/components/schemas/config.result\"\n      required:\n        - configElementName\n      example:\n        configElementName: \"dataSource\"\n        uid: \"DefaultDataSource\"\n        id: \"DefaultDataSource\"\n        beginTranForResultSetScrollingAPIs: true\n        beginTranForVendorAPIs: true\n        connectionSharing: \"MatchOriginalRequest\"\n        containerAuthDataRef:\n          configElementName: \"containerAuthData\"\n          uid: \"dataSource[DefaultDataSource]/containerAuthData[default-0]\"\n          password: \"******\"\n          user: \"derbyuser1\"\n        enableConnectionCasting: false\n        jdbcDriverRef:\n          configElementName: \"jdbcDriver\"\n          uid: \"dataSource[DefaultDataSource]/jdbcDriver[default-0]\"\n          libraryRef:\n            configElementName: \"library\"\n            uid: \"Derby\"\n            id: \"Derby\"\n            apiTypeVisibility: \"spec,ibm-api,api,stable\"\n            fileRef:\n              - configElementName: \"file\"\n                uid: \"library[Derby]/file[default-0]\"\n                name: \"/Users/myself/drivers/derby/derby.jar\"\n        statementCacheSize: 10,\n        syncQueryTimeoutWithTransactionTimeout: false,\n        transactional: true,\n        properties.derby.embedded:\n          createDatabase: \"create\"\n          databaseName: \"memory:derbydb\"\n        api:\n          - \"/ibm/api/validation/dataSource/DefaultDataSource\"\n",
			"canonicalURL": "/github.com/OpenLiberty/open-liberty@cfd85465eb25f7adaf892d6ffe7814e504110dd1/-/blob/dev/com.ibm.ws.rest.handler.config.openapi/resources/META-INF/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenLiberty/open-liberty/blob/cfd85465eb25f7adaf892d6ffe7814e504110dd1/dev/com.ibm.ws.rest.handler.config.openapi/resources/META-INF/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: \"queryParams\": object with additionalProperties not implemented",
	"NotImplemented": [
		"complex anyOf",
		"object with additionalProperties"
	]
}