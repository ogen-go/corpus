{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ObeoNetwork/InformationSystem"
		},
		"file": {
			"name": "odts-admin-ws.json",
			"size": 0,
			"path": "addons/swagger/plugins/org.obeonetwork.dsl.soa.gen.swagger.tests/data/import/odts-admin-ws/json/odts-admin-ws.json",
			"byteSize": 58822,
			"content": "{\n  \"openapi\": \"3.0.3\",\n  \"info\": {\n    \"title\": \"Obeo Designer Team Server - Administration Server\",\n    \"description\": \"This guide describe the REST API of the administration server for Obeo Designer Team Server. This API will allow you to manage CDO repositories, shared modeling projects and depending on the type of repository you manage, you will be able to manager the repository users. If you already have configured the [administration server](../Obeo_Designer_Team_Administration_Server.html) for Obeo Designer Team Server you can start to use our API.\\n\\nRemark: The protocol, host and port can be different from your server configuration.\\n\\nIn this documentation we will use the web service API in the version **v1.0**.\\n\\n**Disclaimer:** As basic authentication is enabled for the administration server, the _Authorization_ header must be added in all requests with the base64 encoded credentials.\\n\",\n    \"license\": {\n      \"name\": \"Copyright (c) 2008, 2022 Obeo.\",\n      \"url\": \"/doc/license.html\"\n    },\n    \"version\": \"1.0.0\",\n    \"contact\": {\n      \"email\": \"support@obeo.fr\"\n    }\n  },\n  \"servers\": [\n    {\n      \"url\": \"/api/v1.0\",\n      \"description\": \"Production server (use live data)\"\n    },\n    {\n      \"url\": \"{protocol}://localhost:8080/api/v1.0\",\n      \"description\": \"Server on the current host\",\n      \"variables\": {\n        \"protocol\": {\n          \"enum\": [\n            \"http\",\n            \"https\"\n          ],\n          \"default\": \"http\"\n        }\n      }\n    }\n  ],\n  \"tags\": [\n    {\n      \"name\": \"Repositories\"\n    },\n    {\n      \"name\": \"Projects\"\n    },\n    {\n      \"name\": \"Users\"\n    }\n  ],\n  \"paths\": {\n    \"/repositories\": {\n      \"get\": {\n        \"summary\": \"List all repositories\",\n        \"operationId\": \"getRepositories\",\n        \"tags\": [\n          \"Repositories\"\n        ],\n        \"description\": \"Retrieve all repositories on the current server.\\n\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Ok\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"repositories\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"$ref\": \"#/components/schemas/Repository\"\n                      }\n                    },\n                    \"message\": {\n                      \"type\": \"string\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                },\n                \"example\": {\n                  \"repositories\": [\n                    {\n                      \"name\": \"OnlineDynamicRepositorySample\",\n                      \"status\": \"ONLINE\",\n                      \"type\": \"DYNAMIC\",\n                      \"authenticationType\": \"\",\n                      \"datasourceType\": \"H2_EMBEDDED\"\n                    },\n                    {\n                      \"name\": \"OfflineDynamicRepositorySample\",\n                      \"status\": \"OFFLINE\",\n                      \"type\": \"DYNAMIC\",\n                      \"authenticationType\": \"\",\n                      \"datasourceType\": \"H2_EMBEDDED\"\n                    },\n                    {\n                      \"name\": \"designer-server\",\n                      \"status\": \"ONLINE\",\n                      \"type\": \"STATIC\"\n                    }\n                  ],\n                  \"message\": \"All available repositories\",\n                  \"status\": 200\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Not Found\"\n          }\n        }\n      },\n      \"post\": {\n        \"summary\": \"Create a repository\",\n        \"operationId\": \"addRepository\",\n        \"tags\": [\n          \"Repositories\"\n        ],\n        \"description\": \"This request will allow you to creates a repository.\\nThe body of the request take a JSON object with the following parameters: *repositoryName*, *authenticationType* and *datasourceType* which are mandatory and also *authenticationData* and *datasourceData* which are optional.\\n\\nWhile the *authenticationType* value can be empty, the *repositoryName* and the *datasourceType* values cannot.\\n\\nBy default you can use the following values to manage your repositories:\\n  * *authenticationType* can take:\\n    * an empty value\\n    * LDAP\\n    * FILE\\n    * LDAP_FILE\\n    * USERPROFILE\\n    * LDAP_USERPROFILE\\n  * *datasourceType* can take:\\n    * H2_EMBEDDED\\n    * H2_SERVER\\n\\nYou can also contribute your own extensions and use the key value of your extension as described in the Administration Server [documentation](../Obeo_Designer_Team_Administration_Server.html#Contribute_administration_server).\\n\\nThose values describe how your repository will manage authentication and database.\\n\\nAs the optional parameters (*authenticationData* and *datasourceDat*) depends on the mandatory parameters, we will use examples to describe how to use them.\\n\\nThe repository is started after its creation and lifecycle hooks are called before and after its start.\\n\",\n        \"requestBody\": {\n          \"description\": \"See example descriptions.\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/NewRepository\"\n              },\n              \"examples\": {\n                \"No authentication, H2 Embedded\": {\n                  \"description\": \"Create a repository without authentication with an H2 embedded database.\\n\\nWith an empty value set to _authenticationType_ your repository will not have authentication. With _H2_EMBEDDED_ value set to _datasourceType_ your repository database will be an h2 embedded database.\\n\",\n                  \"value\": {\n                    \"repositoryName\": \"repository-without-authentication\",\n                    \"authenticationType\": \"\",\n                    \"datasourceType\": \"H2_EMBEDDED\"\n                  }\n                },\n                \"No authentication, H2 Server\": {\n                  \"description\": \"Create a repository without authentication on H2 server database.\\n\\nWith an empty value set to _authenticationType_ your repository will not have authentication. With _H2_SERVER_ value set to _datasourceType_ your repository database will be an h2 server database and you will need to provide additional data like the _h2ServerPort_ within the _datasourceData_ map.\\n\\nThe _h2ServerPort_ is used in the connection between the repository and the h2 database. The _h2ServerPort_ value must be a string.\\n\\n***Disclaimer***\\n\\nIf your repository is configured with an h2 server database, we use the IP address of the current machine to set up the h2 server before it starts.\\n\\nThe attribute \\\"port\\\" of datasourceData has been deprecated in favor of \\\"h2ServerPort\\\". This changes has been made to avoid confusion with the port used to connect to the repository.\\n\",\n                  \"value\": {\n                    \"repositoryName\": \"repository-without-authentication\",\n                    \"authenticationType\": \"\",\n                    \"datasourceType\": \"H2_SERVER\",\n                    \"datasourceData\": {\n                      \"h2ServerPort\": \"9092\"\n                    }\n                  }\n                },\n                \"LDAP authentication, H2 Embedded\": {\n                  \"description\": \"Create a repository with LDAP authentication on H2 embedded database.\\n\\nWith _LDAP_ value set to _authenticationType_, your repository will use LDAP to authenticate users who have the right to modify the repository. You will need to provide within the _authenticationData_ map the same data described in the *Configure LDAP* section of the Administrator manual available in the integrated help of Obeo Designer Team Edition, namely:\\n- the url (url)\\n- the distinguished names (dnPattern)\\n- If TLS is enabled [Optional] (isTlsEnabled)\\n- the trust store path [Optional] (trustStorePath): needed only if TLS is enabled\\n- the trust store passphrase [Optional] (trustStorePassphrase): needed only if TLS is enabled\\n\\n***Note:*** An H2 server database can be used instead of an H2 embedded database. Select a sample with _H2 Server_ see how to create a repository with this kind of database.\\n\",\n                  \"value\": {\n                    \"repositoryName\": \"repository-with-ldap\",\n                    \"authenticationType\": \"LDAP\",\n                    \"authenticationData\": {\n                      \"url\": \"ldap://localhost:10389\",\n                      \"dnPattern\": \"cn={user},ou=people,o=sevenSeas\"\n                    },\n                    \"datasourceType\": \"H2_EMBEDDED\"\n                  }\n                },\n                \"UserManager authentication, H2 Embedded\": {\n                  \"description\": \"Create a repository with User manager authentication on H2 embedded database.\\n\\nWith _FILE_ value set to the _authenticationType_, your repository will use the user manager to authorize registered user to modify the repository. You will need to provide within the _authenticationData_ map a list of users used to populate the _users.properties_ file as described in the _Authenticated Configuration_ section of the Administrator manual available in the integrated help of Obeo Designer Team Edition. The list of users is an array of map containing at least the _login_ and _password_ keys.\\n\\n  ***Note:*** An H2 server database can be used instead of an H2 embedded database. Select a sample with _H2 Server_ see how to create a repository with this kind of database.\\n\",\n                  \"value\": {\n                    \"repositoryName\": \"repository-with-file\",\n                    \"authenticationType\": \"FILE\",\n                    \"authenticationData\": {\n                      \"users\": [\n                        {\n                          \"login\": \"Horatio Nelson\",\n                          \"password\": \"pass\"\n                        }\n                      ]\n                    },\n                    \"datasourceType\": \"H2_EMBEDDED\"\n                  }\n                },\n                \"UserManager + LDAP authentication, H2 Embedded\": {\n                  \"description\": \"Create a repository with user manager and LDAP authentication on H2 embedded database.\\n\\nWith _LDAP_FILE_ value set to _authenticationType_, your repository will use the user manager to register to authorize registered user to modify the repository and use LDAP to authenticate them. You will need to provide within the _authenticationData_ map a list of users used to populate the _users.properties_ file and also additional data to handle LDAP as as described in the _Configure LDAP_ section of the Administrator manual available in the integrated help of Obeo Designer Team Edition.\\n\\nThe list of users is an array of map containing at least the _login_ keys. The additional data needed to handle LDAP are :\\n- the url (url)\\n- the distinguished names (dnPattern)\\n- if TLS is enable [Optional] (isTlsEnabled)\\n- the trust store path [Optional] (trustStorePath): needed only if TLS is enabled\\n- the trust store passphrase [Optional] (trustStorePassphrase): needed only if TLS is enabled\\n\\n ***Note:*** An H2 server database can be used instead of an H2 embedded database. Select a sample with _H2 Server_ see how to create a repository with this kind of database.\\n\",\n                  \"value\": {\n                    \"repositoryName\": \"repository-with-file-ldap\",\n                    \"authenticationType\": \"LDAP_FILE\",\n                    \"authenticationData\": {\n                      \"url\": \"ldap://localhost:10389\",\n                      \"dnPattern\": \"cn={user},ou=people,o=sevenSeas\",\n                      \"users\": [\n                        {\n                          \"login\": \"Horatio Nelson\"\n                        }\n                      ]\n                    },\n                    \"datasourceType\": \"H2_EMBEDDED\"\n                  }\n                },\n                \"UserProfile authentication, H2 Embedded\": {\n                  \"description\": \"Create a repository with user profile authentication on H2 embedded database.\\n\\nWith _USERPROFILE_ value set to the _authenticationType_, your repository will use the user profile to manage authorization on your repository. You will need to provide within the _authenticationData_ map a list of administrators used to populate the user profile model with users who have the write right on the repository as as described in the_User Profile Configuration_ section of the Administrator manual available in the integrated help of Obeo Designer Team Edition. The list of administrators is an array of map containing at least the _login_ and _password_ keys.\\n\\n***Note:*** An H2 server database can be used instead of an H2 embedded database. Select a sample with _H2 Server_ see how to create a repository with this kind of database.\\n\",\n                  \"value\": {\n                    \"repositoryName\": \"repository-with-userprofile\",\n                    \"authenticationType\": \"USERPROFILE\",\n                    \"authenticationData\": {\n                      \"administrators\": [\n                        {\n                          \"login\": \"Horatio Nelson\",\n                          \"password\": \"pass\"\n                        }\n                      ]\n                    },\n                    \"datasourceType\": \"H2_EMBEDDED\"\n                  }\n                },\n                \"UserProfile + LDAP authentication, H2 Embedded\": {\n                  \"description\": \"Create a repository with user profile and LDAP authentication on H2 embedded database.\\n\\nWith _LDAP_USERPROFILE_ value set to the _authenticationType_, your repository will use the user profile to manage authorization on your repository. You will need to provide within the _authenticationData_ map a list of administrators used to populate the user profile model with users who have the write right on the repository and also additional data to handle LDAP as described in the _Configure LDAP_ section of the Administrator manual available in the integrated help of Obeo Designer Team Edition.\\n\\nThe list of administrators is an array of map containing at least the _login_ key. The additional data needed to handle LDAP are :\\n- the url (url)\\n- the distinguished names (dnPattern)\\n- if TLS is enabled [Optional] (isTlsEnabled)\\n- the trust store path [Optional] (trustStorePath): needed only if TS is enabled\\n- the trust store passphrase [Optional] (trustStorePassphrase): needed only if TLS is enabled\\n\\n***Note:*** An H2 server database can be used instead of an H2 embedded database. Select a sample with _H2 Server_ see how to create a repository with this kind of database.\\n\",\n                  \"value\": {\n                    \"repositoryName\": \"repository-with-userprofile-ldap\",\n                    \"authenticationType\": \"LDAP_USERPROFILE\",\n                    \"authenticationData\": {\n                      \"url\": \"ldap://localhost:10389\",\n                      \"dnPattern\": \"cn={user},ou=people,o=sevenSeas\",\n                      \"administrators\": [\n                        {\n                          \"login\": \"Horatio Nelson\"\n                        }\n                      ]\n                    },\n                    \"datasourceType\": \"H2_EMBEDDED\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Repository response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"repository\": {\n                      \"$ref\": \"#/components/schemas/Repository\"\n                    },\n                    \"message\": {\n                      \"type\": \"string\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                },\n                \"examples\": {\n                  \"No authentication, H2 Embedded\": {\n                    \"value\": {\n                      \"repository\": {\n                        \"name\": \"repository-without-authentication\",\n                        \"status\": \"ONLINE\",\n                        \"type\": \"DYNAMIC\",\n                        \"authenticationType\": \"\",\n                        \"datasourceType\": \"H2_EMBEDDED\"\n                      },\n                      \"message\": \"The repository repository-without-authentication has been created.\",\n                      \"status\": 201\n                    }\n                  },\n                  \"No authentication, H2 Server\": {\n                    \"value\": {\n                      \"repository\": {\n                        \"name\": \"repository-without-authentication\",\n                        \"status\": \"ONLINE\",\n                        \"type\": \"DYNAMIC\",\n                        \"authenticationType\": \"\",\n                        \"datasourceType\": \"H2_SERVER\"\n                      },\n                      \"message\": \"The repository repository-without-authentication3 has been created.\",\n                      \"status\": 201\n                    }\n                  },\n                  \"LDAP authenticationn, H2 Embedded\": {\n                    \"value\": {\n                      \"repository\": {\n                        \"name\": \"repository-with-ldap\",\n                        \"status\": \"ONLINE\",\n                        \"type\": \"DYNAMIC\",\n                        \"authenticationType\": \"LDAP\",\n                        \"datasourceType\": \"H2_EMBEDDED\"\n                      },\n                      \"message\": \"The repository repository-with-ldap has been created.\",\n                      \"status\": 201\n                    }\n                  },\n                  \"UserManager authentication, H2 Embedded\": {\n                    \"value\": {\n                      \"repository\": {\n                        \"name\": \"repository-with-file\",\n                        \"status\": \"ONLINE\",\n                        \"type\": \"DYNAMIC\",\n                        \"authenticationType\": \"FILE\",\n                        \"datasourceType\": \"H2_EMBEDDED\"\n                      },\n                      \"message\": \"The repository repository-with-file has been created.\",\n                      \"status\": 201\n                    }\n                  },\n                  \"UserManager + LDAP authentication, H2 Embedded\": {\n                    \"value\": {\n                      \"repository\": {\n                        \"name\": \"repository-with-file-ldap\",\n                        \"status\": \"ONLINE\",\n                        \"type\": \"DYNAMIC\",\n                        \"authenticationType\": \"LDAP_FILE\",\n                        \"datasourceType\": \"H2_EMBEDDED\"\n                      },\n                      \"message\": \"The repository repository-with-file-ldap has been created.\",\n                      \"status\": 201\n                    }\n                  },\n                  \"UseUserProfilerManager authentication, H2 Embedded\": {\n                    \"value\": {\n                      \"repository\": {\n                        \"name\": \"repository-with-userprofile\",\n                        \"status\": \"ONLINE\",\n                        \"type\": \"DYNAMIC\",\n                        \"authenticationType\": \"USERPROFILE\",\n                        \"datasourceType\": \"H2_EMBEDDED\"\n                      },\n                      \"message\": \"The repository repository-with-userprofile has been created.\",\n                      \"status\": 201\n                    }\n                  },\n                  \"UserProfile + LDAP authentication, H2 Embedded\": {\n                    \"value\": {\n                      \"repository\": {\n                        \"name\": \"repository-with-userprofile-ldap\",\n                        \"status\": \"ONLINE\",\n                        \"type\": \"DYNAMIC\",\n                        \"authenticationType\": \"LDAP_USERPROFILE\",\n                        \"datasourceType\": \"H2_EMBEDDED\"\n                      },\n                      \"message\": \"The repository repository-with-userprofile-ldap has been created.\",\n                      \"status\": 201\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad Request\\n\\nSome parameters depend on the repository type (authentication and database), their validation is done by the corresponding extensions. \\n\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"message\": \"The repository repository-with-userprofile-ldap has not been created.\",\n                  \"status\": 400,\n                  \"error\": \"The url to the ldap server is empty.\"\n                }\n              }\n            }\n          },\n          \"500\": {\n            \"description\": \"Internal error\\n\\nSomething unexpected occurred during the repository creation.\\n\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"message\": \"The repository repository-with-userprofile-ldap has not been created.\",\n                  \"status\": 500,\n                  \"error\": \"An error occurred during the repository configuration: The h2 server was not able to start.\\nException: ....\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/repositories/{repositoryId}\": {\n      \"delete\": {\n        \"tags\": [\n          \"Repositories\"\n        ],\n        \"summary\": \"Delete a repository\",\n        \"operationId\": \"deleteRepository\",\n        \"description\": \"Delete a repository that was created using the *create repository* web service.\\n\\nThe deletetion of repository removes the folder and all of its content in the directory that contains the repositories. This directory can be configured in the properties files of the administration server as described in [Administration Server configuration](../Obeo_Designer_Team_Administration_Server.html#Webservice_configuration).\\n\\nNo effect on static repositories.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"repositoryId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"description\": \"id of a repository\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"deleteDatabase\",\n            \"in\": \"query\",\n            \"required\": false,\n            \"description\": \"Parameter to indicate if the databse must be deleted or kep. true by default. No effect for the moment\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Ok\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"repositoryName\": {\n                      \"type\": \"string\"\n                    },\n                    \"message\": {\n                      \"type\": \"string\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                },\n                \"example\": {\n                  \"repositoryName\": \"repository-without-authentication\",\n                  \"isDatabaseDeleted\": true,\n                  \"message\": \"The repository repository-without-authentication has been completely deleted.\",\n                  \"status\": 200\n                }\n              }\n            }\n          },\n          \"204\": {\n            \"description\": \"No Content\"\n          },\n          \"404\": {\n            \"description\": \"Not Found\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"The repository SampleRepository has not been found.\",\n                  \"message\": \"The repository SampleRepository has not been deleted.\",\n                  \"status\": 404\n                }\n              }\n            }\n          },\n          \"500\": {\n            \"description\": \"Server error for static repository\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"Something happens during the repository deletion: The repository designer-server could not to be stopped because the file used to store repository data has not been found.\",\n                  \"message\": \"The repository repository-with has not been deleted.\",\n                  \"status\": 500\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/repositories/start/{repositoryId}\": {\n      \"get\": {\n        \"summary\": \"Create a repository\",\n        \"operationId\": \"startRepository\",\n        \"tags\": [\n          \"Repositories\"\n        ],\n        \"description\": \"Start a repository that was created using the web service to create a repository.\\n\\nThe lifecycle hooks will be called before and after its start.\\n\\nNo effect on static repositories.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"repositoryId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"description\": \"id of a repository\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Ok\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"repository\": {\n                      \"$ref\": \"#/components/schemas/Repository\"\n                    },\n                    \"message\": {\n                      \"type\": \"string\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                },\n                \"example\": {\n                  \"repository\": {\n                    \"name\": \"SampleRepository\",\n                    \"status\": \"ONLINE\",\n                    \"type\": \"DYNAMIC\",\n                    \"authenticationType\": \"LDAP_USERPROFILE\",\n                    \"datasourceType\": \"H2_EMBEDDED\"\n                  },\n                  \"message\": \"The repository uc1 has been started.\",\n                  \"status\": 200\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Ko\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"The repository SampleRepository is not stopped.\",\n                  \"message\": \"The repository SampleRepository has not been started.\",\n                  \"status\": 400\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Not Found\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"The repository SampleRepository has not been found.\",\n                  \"message\": \"The repository SampleRepository has not been started.\",\n                  \"status\": 404\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/repositories/stop/{repositoryId}\": {\n      \"get\": {\n        \"summary\": \"Stop a repository\",\n        \"operationId\": \"stopRepository\",\n        \"tags\": [\n          \"Repositories\"\n        ],\n        \"description\": \"Stop a repository that was created using the web service to create a repository.\\n\\nThe lifecycle hooks will be called before and after its stop.\\n\\nNo effect on static repositories.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"repositoryId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"description\": \"id of a repository\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Ok\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"repository\": {\n                      \"$ref\": \"#/components/schemas/SimpleRepository\"\n                    },\n                    \"message\": {\n                      \"type\": \"string\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                },\n                \"example\": {\n                  \"repository\": {\n                    \"name\": \"SampleRepository\",\n                    \"status\": \"OFFLINE\",\n                    \"type\": \"DYNAMIC\"\n                  },\n                  \"message\": \"The repository SampleRepository has been stopped.\",\n                  \"status\": 200\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Not Found\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"The repository SampleRepository is not started.\",\n                  \"message\": \"The repository SampleRepository has not been stopped.\",\n                  \"status\": 400\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Not Found\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"The repository SampleRepository has not been found.\",\n                  \"message\": \"The repository SampleRepository has not been stopped.\",\n                  \"status\": 404\n                }\n              }\n            }\n          },\n          \"500\": {\n            \"description\": \"Server error for static repository\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"An error occurred while stopping the repository: The repository designer-server could not to be stopped because the file used to store repository data has not been found.\",\n                  \"message\": \"The repository designer-server has not been stopped.\",\n                  \"status\": 500\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/repositories/export/{repositoryId}\": {\n      \"post\": {\n        \"summary\": \"Export the repository database as xml or encrypted zip file\",\n        \"operationId\": \"exportRepository\",\n        \"tags\": [\n          \"Repositories\"\n        ],\n        \"description\": \"Export the database of the repository into an xml file.\\n\\nThe body of the request take two parameters: *needsEncryption* which is mandatory and *password* which is optional but needed if *needsEncryption* is set to true.\\n\\nAs the export of the database can take time, the web service will schedule an asynchronous job and return the link where you will be able to download the file in the response under the *url* attribute.\\n\\nIf *needsEncryption* is set to false the export of the database will create an xml file representing the CDO database in the *export* folder which can be configured in the properties files of the Administration Server as described in [Administration Server configuration](../Obeo_Designer_Team_Administration_Server.html#Webservice_configuration). If *needsEncryption* is set to true then an encrypted zip file containing the xml file will be created instead.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"repositoryId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"description\": \"id of a repository\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"Export parameters\",\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"needsEncryption\"\n                ],\n                \"properties\": {\n                  \"needsEncryption\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"password\": {\n                    \"type\": \"string\",\n                    \"format\": \"password\"\n                  }\n                }\n              },\n              \"examples\": {\n                \"encryptedExport\": {\n                  \"value\": {\n                    \"needsEncryption\": true,\n                    \"password\": \"aPassword\"\n                  }\n                },\n                \"clearExport\": {\n                  \"value\": {\n                    \"needsEncryption\": false\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"202\": {\n            \"description\": \"Ok\",\n            \"content\": {\n              \"application/json\": {\n                \"examples\": {\n                  \"encryptedExport\": {\n                    \"value\": {\n                      \"url\": \"http://localhost:8080/api/v1.0/exports/uc2/uc2_200306122313+0100.zip\",\n                      \"repository\": \"SampleRepository\",\n                      \"message\": \"The export for the repository uc2 as been launched. You will be able to retrieved the exported data at the url: http://localhost:8080/api/v1.0/exports/uc2/uc2_200306122313+0100.zip\",\n                      \"status\": 202\n                    }\n                  },\n                  \"clearExport\": {\n                    \"value\": {\n                      \"url\": \"http://localhost:8080/api/v1.0/exports/uc2/uc2_200306122258+0100.xml\",\n                      \"repository\": \"SampleRepository\",\n                      \"message\": \"The export for the repository uc2 as been launched. You will be able to retrieved the exported data at the url: http://localhost:8080/api/v1.0/exports/uc2/uc2_200306122258+0100.xml\",\n                      \"status\": 202\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad request\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"NO_ISSUE_DIAGNOSTIC\",\n                  \"message\": \"The repository repository-with-file will not be exported.\",\n                  \"status\": 400\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Not Found\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"The repository SampleRepository has not been found.\",\n                  \"message\": \"The repository SampleRepository will not be exported.\",\n                  \"status\": 404\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/repositories/import/{repositoryId}\": {\n      \"post\": {\n        \"summary\": \"Restores the repository database from an xml file\",\n        \"operationId\": \"importRepository\",\n        \"tags\": [\n          \"Repositories\"\n        ],\n        \"description\": \"Restore a repository from the uploaded xml file.\\n\\nThis file must be a backup of the database.\\n\\nAs this API needs a file, we suggest you to use the input file of your favorite browser in order to let it set the correct headers for the upload of the file.\\nAs the import of the database can take time, the web service will schedule an asynchronous job.\\n\\nThe state (ONLINE | OFFLINE) of the repository will be the same after the import as before the import.\\n\\nStatic repositories are not managed.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"repositoryId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"description\": \"id of a repository\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"content to upload\",\n          \"required\": true,\n          \"content\": {\n            \"multipart/form-data\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"upFile\": {\n                    \"type\": \"string\",\n                    \"format\": \"binary\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"202\": {\n            \"description\": \"Request accepted\",\n            \"content\": {\n              \"appication/json\": {\n                \"example\": {\n                  \"repository\": \"SampleRespository\",\n                  \"message\": \"The data are being imported to the repository SampleRepository. The state of the repository will be the same after and before the import.\",\n                  \"status\": 202\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad Request\",\n            \"content\": {\n              \"appication/json\": {\n                \"examples\": {\n                  \"Wrong kind of request\": {\n                    \"value\": {\n                      \"error\": \"javax.servlet.ServletException: Not a multipart request!\",\n                      \"status\": 400\n                    }\n                  },\n                  \"Connected users\": {\n                    \"value\": {\n                      \"message\": \"The import of the repository repository-with-userprofile will not be launched.\",\n                      \"status\": 400,\n                      \"error\": \"The import will not be executed because some connections remains (alice, bob)\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Not Found\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"The repository SampleRepository has not been found.\",\n                  \"message\": \"The import of the repository SampleRepository will not be launched.\",\n                  \"status\": 404\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/projects\": {\n      \"post\": {\n        \"summary\": \"Create a new shared modeling project\",\n        \"operationId\": \"createSharedProject\",\n        \"tags\": [\n          \"Projects\"\n        ],\n        \"description\": \"Create an empty shared modeling project.\\n\\nThe repository where you want to create the shared modeling project should be started.\\n\\nThe project post creation lifcycle hook will be called after the project creation.\\nFor example, the user profile extension lifecycle hook will create roles for users. The name of the created role will have the project name and will authorize a user to create, read, update and delete resources inside the project.\\n\",\n        \"requestBody\": {\n          \"description\": \"If the repository uses the user profiles to manage its users, the post created project lifecycle hook will create roles that will allow to give write access to users for the project.\\n\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"projectName\",\n                  \"repositoryName\"\n                ],\n                \"properties\": {\n                  \"projectName\": {\n                    \"type\": \"string\"\n                  },\n                  \"repositoryName\": {\n                    \"type\": \"string\"\n                  }\n                }\n              },\n              \"example\": {\n                \"projectName\": \"Awesome-project\",\n                \"repositoryName\": \"SampleRepository\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Ok\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"projectName\": {\n                      \"type\": \"string\"\n                    },\n                    \"message\": {\n                      \"type\": \"string\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                },\n                \"example\": {\n                  \"projectName\": \"Awesome-project\",\n                  \"message\": \"The project Awesome-project has been successfully created in the repository repo.\",\n                  \"status\": 201\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Not Found\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"The repository SampleRepository has not been found.\",\n                  \"message\": \"The project Awesome-project has not been created.\",\n                  \"status\": 404\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/users\": {\n      \"get\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"List all users of a repository\",\n        \"operationId\": \"listUsers\",\n        \"description\": \"List all users the given repository.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"repositoryName\",\n            \"in\": \"query\",\n            \"required\": true,\n            \"description\": \"id of a repository\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Ok\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"repositoryName\": {\n                      \"type\": \"string\"\n                    },\n                    \"users\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"$ref\": \"#/components/schemas/User\"\n                      }\n                    },\n                    \"message\": {\n                      \"type\": \"string\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                },\n                \"example\": {\n                  \"repositoryName\": \"repository-with-userprofile\",\n                  \"users\": [\n                    {\n                      \"id\": \"Horatio Nelson\",\n                      \"isAdmin\": true,\n                      \"permissions\": []\n                    }\n                  ],\n                  \"message\": \"The list of users for the repository repository-with-userprofile.\",\n                  \"status\": 200\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Not Found\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"The repository SampleRepository has not been found.\",\n                  \"message\": \"Users cannot be listed on repository SampleRepository.\",\n                  \"status\": 400\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Create a new user to the repository\",\n        \"operationId\": \"addUser\",\n        \"description\": \"Create a user in the repository.\\n\\nThe body of the request take a JSON object with the following parameters: *id*, *isAdministrator*, *password* and *permissions*.\\nThe *id* and *isAdministrator* are mandatory.\\n\\nThe *password* is required if the repository authentication is not managed with LDAP.\\n\\nThe *permissions* parameter is used for repositories with authorization managed with user profiles. This parameter is an array of project name which will be used to grant writing rights to the user for those projects.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"repositoryName\",\n            \"in\": \"query\",\n            \"required\": true,\n            \"description\": \"id of a repository\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"User to create.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/NewUser\"\n              },\n              \"examples\": {\n                \"Admin\": {\n                  \"value\": {\n                    \"id\": \"Horatio Nelson\",\n                    \"isAdmin\": true,\n                    \"password\": \"samplePassword\",\n                    \"permissions\": []\n                  }\n                },\n                \"User with permissions\": {\n                  \"description\": \"This example will create the user \\\"John Fryer\\\". It can be used in USERPROFILE repository. A password is provided as the repository is not a LDAP_USERPROFILE repository. \\n \\nWe do not want \\\"John Fryer\\\" to be an administrator but we want give him the writing rights on the \\\"Awesome-project\\\" project.\\n\",\n                  \"value\": {\n                    \"id\": \"John Fryer\",\n                    \"isAdmin\": false,\n                    \"password\": \"samplePassword\",\n                    \"permissions\": [\n                      \"Awesome-project\"\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Ok\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"user\": {\n                      \"$ref\": \"#/components/schemas/User\"\n                    },\n                    \"repositoryName\": {\n                      \"type\": \"string\"\n                    },\n                    \"projectNames\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"message\": {\n                      \"type\": \"string\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                },\n                \"examples\": {\n                  \"Admin\": {\n                    \"value\": {\n                      \"user\": {\n                        \"id\": \"Horatio Nelson\",\n                        \"isAdmin\": true,\n                        \"permissions\": []\n                      },\n                      \"repositoryName\": \"repository-with-userprofile\",\n                      \"projectNames\": [\n                        \"Awesome-project\"\n                      ],\n                      \"message\": \"The user Horatio Nelson has been created in the repository repository-with-userprofile.\",\n                      \"status\": 201\n                    }\n                  },\n                  \"User with permissions\": {\n                    \"value\": {\n                      \"user\": {\n                        \"id\": \"John Fryer\",\n                        \"isAdmin\": false,\n                        \"permissions\": [\n                          \"Awesome-project\"\n                        ]\n                      },\n                      \"repositoryName\": \"repository-with-userprofile\",\n                      \"projectNames\": [\n                        \"Awesome-project\"\n                      ],\n                      \"message\": \"The user Horatio Nelson has been created in the repository repository-with-userprofile.\",\n                      \"status\": 201\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad Request\",\n            \"content\": {\n              \"application/json\": {\n                \"examples\": {\n                  \"Respository not found\": {\n                    \"value\": {\n                      \"error\": \"The repository SampleRepository has not been found.\",\n                      \"message\": \"The user Horatio Nelson4 cannot be created.\",\n                      \"status\": 400\n                    }\n                  },\n                  \"Existing user\": {\n                    \"value\": {\n                      \"error\": \"The user is already registered for repository repository-with-userprofile.\",\n                      \"message\": \"The user Horatio Nelson cannot be created.\",\n                      \"status\": 400\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/users/{userName}\": {\n      \"put\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Update the user of the repository\",\n        \"operationId\": \"updateUser\",\n        \"description\": \"Update user data.\\n\\nThe behavior of this service is to delete and recreate the user with the new data.\\n\\nThe body of the request takes the same data than the creation request.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"userName\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"description\": \"id of a user\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"repositoryName\",\n            \"in\": \"query\",\n            \"required\": true,\n            \"description\": \"id of a repository\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"New user data.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/NewUser\"\n              },\n              \"example\": {\n                \"id\": \"Horatio Nelson\",\n                \"isAdmin\": false,\n                \"password\": \"samplePassword\",\n                \"permissions\": [\n                  \"Other-project\"\n                ]\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Ok\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"user\": {\n                      \"$ref\": \"#/components/schemas/User\"\n                    },\n                    \"repositoryName\": {\n                      \"type\": \"string\"\n                    },\n                    \"projectNames\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"message\": {\n                      \"type\": \"string\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                },\n                \"example\": {\n                  \"user\": {\n                    \"id\": \"Horatio Nelson\",\n                    \"isAdmin\": false,\n                    \"permissions\": [\n                      \"Other-project\"\n                    ]\n                  },\n                  \"repositoryName\": \"repository-with-userprofile\",\n                  \"projectNames\": [\n                    \"Awesome-project\",\n                    \"Other-project\"\n                  ],\n                  \"message\": \"The user Horatio Nelson has been updated in the repository repository-with-userprofile.\",\n                  \"status\": 201\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad Request\",\n            \"content\": {\n              \"application/json\": {\n                \"examples\": {\n                  \"Respository not found\": {\n                    \"value\": {\n                      \"error\": \"The repository SampleRepository has not been found.\",\n                      \"message\": \"The user Horatio Nelson has not been updated in the repository SampleRepository.\",\n                      \"status\": 400\n                    }\n                  },\n                  \"Different user name in data\": {\n                    \"value\": {\n                      \"error\": \"The user name of the user (John Fryer) to update is not the same than the user name provided in data used to update (John Fryer2).\",\n                      \"message\": \"The user John Fryer has not been updated in the repository SampleRepository.\",\n                      \"status\": 400\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Not Found\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"The user John Fryer has not been found in the repository repository-with-userprofile.\",\n                  \"message\": \"The user John Fryers has not been updated in the repository repository-with-userprofile.\",\n                  \"status\": 404\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Delete the user from the repository\",\n        \"operationId\": \"delteUser\",\n        \"description\": \"Deletes the user from the repository.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"userName\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"description\": \"id of a user\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"repositoryName\",\n            \"in\": \"query\",\n            \"required\": true,\n            \"description\": \"id of a repository\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Ok\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"repositoryName\": {\n                      \"type\": \"string\"\n                    },\n                    \"message\": {\n                      \"type\": \"string\"\n                    },\n                    \"status\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                },\n                \"example\": {\n                  \"repositoryName\": \"repository-with-userprofile\",\n                  \"message\": \"The user Horatio Nelson has been deleted from the repository repository-with-userprofile.\",\n                  \"status\": 200\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad Request\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"The repository repository-with-userprofile has not been found.\",\n                  \"message\": \"The user Horatio Nelson has not been deleted from the repository repository-with-userprofile.\",\n                  \"status\": 400\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Not Found\",\n            \"content\": {\n              \"application/json\": {\n                \"example\": {\n                  \"error\": \"The user Horatio Nelson has not been found in the repository repository-with-userprofile.\",\n                  \"message\": \"The user Horatio Nelson has not been deleted from the repository repository-with-userprofile.\",\n                  \"status\": 404\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"SimpleRepository\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"repositorName\": {\n            \"type\": \"string\"\n          },\n          \"status\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"ONLINE\",\n              \"OFFLINE\"\n            ]\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"STATIC\",\n              \"DYNAMIC\"\n            ]\n          }\n        }\n      },\n      \"Repository\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"repositorName\": {\n            \"type\": \"string\"\n          },\n          \"status\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"ONLINE\",\n              \"OFFLINE\"\n            ]\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"STATIC\",\n              \"DYNAMIC\"\n            ]\n          },\n          \"authenticationType\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"\",\n              \"LDAP\",\n              \"USERPROFILE\",\n              \"LDAP_USERPROFILE\",\n              \"FILE\",\n              \"LDAP_FILE\"\n            ]\n          },\n          \"datasourceType\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"H2_EMBEDDED\",\n              \"H2_SERVER\"\n            ]\n          }\n        }\n      },\n      \"NewRepository\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"repositoryName\",\n          \"authenticationType\",\n          \"datasourceType\"\n        ],\n        \"properties\": {\n          \"repositorName\": {\n            \"type\": \"string\"\n          },\n          \"authenticationType\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"\",\n              \"LDAP\",\n              \"USERPROFILE\",\n              \"LDAP_USERPROFILE\",\n              \"FILE\",\n              \"LDAP_FILE\"\n            ]\n          },\n          \"authenticationData\": {\n            \"type\": \"string\"\n          },\n          \"datasourceType\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"H2_EMBEDDED\",\n              \"H2_SERVER\"\n            ]\n          },\n          \"datasourceData\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"User\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"isAdmin\": {\n            \"type\": \"boolean\"\n          },\n          \"permissions\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"NewUser\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"id\",\n          \"isAdmin\"\n        ],\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"password\": {\n            \"type\": \"string\",\n            \"format\": \"password\"\n          },\n          \"isAdmin\": {\n            \"type\": \"boolean\"\n          },\n          \"permissions\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    },\n    \"securitySchemes\": {\n      \"basicAuth\": {\n        \"type\": \"http\",\n        \"scheme\": \"basic\"\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"basicAuth\": []\n    }\n  ]\n}",
			"canonicalURL": "/github.com/ObeoNetwork/InformationSystem@cf8e8f33bec957c4a1032b50c0bec7f8100eaf53/-/blob/addons/swagger/plugins/org.obeonetwork.dsl.soa.gen.swagger.tests/data/import/odts-admin-ws/json/odts-admin-ws.json",
			"externalURLs": [
				{
					"url": "https://github.com/ObeoNetwork/InformationSystem/blob/cf8e8f33bec957c4a1032b50c0bec7f8100eaf53/addons/swagger/plugins/org.obeonetwork.dsl.soa.gen.swagger.tests/data/import/odts-admin-ws/json/odts-admin-ws.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/users/{userName}\": put: responses: 400: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema",
		"unsupported content types"
	]
}