{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenAPITools/openapi-generator"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "samples/server/petstore/python-flask/openapi_server/openapi/openapi.yaml",
			"byteSize": 21737,
			"content": "openapi: 3.0.1\ninfo:\n  description: \"This is a sample server Petstore server. For this sample, you can\\\n    \\ use the api key `special-key` to test the authorization filters.\"\n  license:\n    name: Apache-2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  title: OpenAPI Petstore\n  version: 1.0.0\nservers:\n- url: http://petstore.swagger.io/v2\ntags:\n- description: Everything about your Pets\n  name: pet\n- description: Access to Petstore orders\n  name: store\n- description: Operations about user\n  name: user\npaths:\n  /pet:\n    post:\n      operationId: add_pet\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        description: Pet object that needs to be added to the store\n        required: true\n      responses:\n        \"405\":\n          content: {}\n          description: Invalid input\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Add a new pet to the store\n      tags:\n      - pet\n      x-codegen-request-body-name: body\n      x-openapi-router-controller: openapi_server.controllers.pet_controller\n    put:\n      operationId: update_pet\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        description: Pet object that needs to be added to the store\n        required: true\n      responses:\n        \"400\":\n          content: {}\n          description: Invalid ID supplied\n        \"404\":\n          content: {}\n          description: Pet not found\n        \"405\":\n          content: {}\n          description: Validation exception\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Update an existing pet\n      tags:\n      - pet\n      x-codegen-request-body-name: body\n      x-openapi-router-controller: openapi_server.controllers.pet_controller\n  /pet/findByStatus:\n    get:\n      description: Multiple status values can be provided with comma separated strings\n      operationId: find_pets_by_status\n      parameters:\n      - description: Status values that need to be considered for filter\n        explode: false\n        in: query\n        name: status\n        required: true\n        schema:\n          items:\n            default: available\n            enum:\n            - available\n            - pending\n            - sold\n            type: string\n          type: array\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n          description: successful operation\n        \"400\":\n          content: {}\n          description: Invalid status value\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Finds Pets by status\n      tags:\n      - pet\n      x-openapi-router-controller: openapi_server.controllers.pet_controller\n  /pet/findByTags:\n    get:\n      deprecated: true\n      description: \"Multiple tags can be provided with comma separated strings. Use\\\n        \\ tag1, tag2, tag3 for testing.\"\n      operationId: find_pets_by_tags\n      parameters:\n      - description: Tags to filter by\n        explode: false\n        in: query\n        name: tags\n        required: true\n        schema:\n          items:\n            type: string\n          type: array\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n          description: successful operation\n        \"400\":\n          content: {}\n          description: Invalid tag value\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Finds Pets by tags\n      tags:\n      - pet\n      x-openapi-router-controller: openapi_server.controllers.pet_controller\n  /pet/{petId}:\n    delete:\n      operationId: delete_pet\n      parameters:\n      - in: header\n        name: api_key\n        schema:\n          type: string\n      - description: Pet id to delete\n        in: path\n        name: petId\n        required: true\n        schema:\n          format: int64\n          type: integer\n      responses:\n        \"400\":\n          content: {}\n          description: Invalid pet value\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Deletes a pet\n      tags:\n      - pet\n      x-openapi-router-controller: openapi_server.controllers.pet_controller\n    get:\n      description: Returns a single pet\n      operationId: get_pet_by_id\n      parameters:\n      - description: ID of pet to return\n        in: path\n        name: petId\n        required: true\n        schema:\n          format: int64\n          type: integer\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n          description: successful operation\n        \"400\":\n          content: {}\n          description: Invalid ID supplied\n        \"404\":\n          content: {}\n          description: Pet not found\n      security:\n      - api_key: []\n      summary: Find pet by ID\n      tags:\n      - pet\n      x-openapi-router-controller: openapi_server.controllers.pet_controller\n    post:\n      operationId: update_pet_with_form\n      parameters:\n      - description: ID of pet that needs to be updated\n        in: path\n        name: petId\n        required: true\n        schema:\n          format: int64\n          type: integer\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/updatePetWithForm_request'\n      responses:\n        \"405\":\n          content: {}\n          description: Invalid input\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Updates a pet in the store with form data\n      tags:\n      - pet\n      x-openapi-router-controller: openapi_server.controllers.pet_controller\n  /pet/{petId}/uploadImage:\n    post:\n      operationId: upload_file\n      parameters:\n      - description: ID of pet to update\n        in: path\n        name: petId\n        required: true\n        schema:\n          format: int64\n          type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/uploadFile_request'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: successful operation\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: uploads an image\n      tags:\n      - pet\n      x-openapi-router-controller: openapi_server.controllers.pet_controller\n  /store/inventory:\n    get:\n      description: Returns a map of status codes to quantities\n      operationId: get_inventory\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                additionalProperties:\n                  format: int32\n                  type: integer\n                type: object\n          description: successful operation\n      security:\n      - api_key: []\n      summary: Returns pet inventories by status\n      tags:\n      - store\n      x-openapi-router-controller: openapi_server.controllers.store_controller\n  /store/order:\n    post:\n      operationId: place_order\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/Order'\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n          description: successful operation\n        \"400\":\n          content: {}\n          description: Invalid Order\n      summary: Place an order for a pet\n      tags:\n      - store\n      x-codegen-request-body-name: body\n      x-openapi-router-controller: openapi_server.controllers.store_controller\n  /store/order/{orderId}:\n    delete:\n      description: For valid response try integer IDs with value \u003c 1000. Anything\n        above 1000 or nonintegers will generate API errors\n      operationId: delete_order\n      parameters:\n      - description: ID of the order that needs to be deleted\n        in: path\n        name: orderId\n        required: true\n        schema:\n          type: string\n      responses:\n        \"400\":\n          content: {}\n          description: Invalid ID supplied\n        \"404\":\n          content: {}\n          description: Order not found\n      summary: Delete purchase order by ID\n      tags:\n      - store\n      x-openapi-router-controller: openapi_server.controllers.store_controller\n    get:\n      description: For valid response try integer IDs with value \u003c= 5 or \u003e 10. Other\n        values will generated exceptions\n      operationId: get_order_by_id\n      parameters:\n      - description: ID of pet that needs to be fetched\n        in: path\n        name: orderId\n        required: true\n        schema:\n          format: int64\n          maximum: 5\n          minimum: 1\n          type: integer\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n          description: successful operation\n        \"400\":\n          content: {}\n          description: Invalid ID supplied\n        \"404\":\n          content: {}\n          description: Order not found\n      summary: Find purchase order by ID\n      tags:\n      - store\n      x-openapi-router-controller: openapi_server.controllers.store_controller\n  /user:\n    post:\n      description: This can only be done by the logged in user.\n      operationId: create_user\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Created user object\n        required: true\n      responses:\n        default:\n          content: {}\n          description: successful operation\n      summary: Create user\n      tags:\n      - user\n      x-codegen-request-body-name: body\n      x-openapi-router-controller: openapi_server.controllers.user_controller\n  /user/createWithArray:\n    post:\n      operationId: create_users_with_array_input\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              items:\n                $ref: '#/components/schemas/User'\n              type: array\n        description: List of user object\n        required: true\n      responses:\n        default:\n          content: {}\n          description: successful operation\n      summary: Creates list of users with given input array\n      tags:\n      - user\n      x-codegen-request-body-name: body\n      x-openapi-router-controller: openapi_server.controllers.user_controller\n  /user/createWithList:\n    post:\n      operationId: create_users_with_list_input\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              items:\n                $ref: '#/components/schemas/User'\n              type: array\n        description: List of user object\n        required: true\n      responses:\n        default:\n          content: {}\n          description: successful operation\n      summary: Creates list of users with given input array\n      tags:\n      - user\n      x-codegen-request-body-name: body\n      x-openapi-router-controller: openapi_server.controllers.user_controller\n  /user/login:\n    get:\n      operationId: login_user\n      parameters:\n      - description: The user name for login\n        in: query\n        name: username\n        required: true\n        schema:\n          type: string\n      - description: The password for login in clear text\n        in: query\n        name: password\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                format: int32\n                type: integer\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                format: date-time\n                type: string\n        \"400\":\n          content: {}\n          description: Invalid username/password supplied\n      summary: Logs user into the system\n      tags:\n      - user\n      x-openapi-router-controller: openapi_server.controllers.user_controller\n  /user/logout:\n    get:\n      operationId: logout_user\n      responses:\n        default:\n          content: {}\n          description: successful operation\n      summary: Logs out current logged in user session\n      tags:\n      - user\n      x-openapi-router-controller: openapi_server.controllers.user_controller\n  /user/{username}:\n    delete:\n      description: This can only be done by the logged in user.\n      operationId: delete_user\n      parameters:\n      - description: The name that needs to be deleted\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"400\":\n          content: {}\n          description: Invalid username supplied\n        \"404\":\n          content: {}\n          description: User not found\n      summary: Delete user\n      tags:\n      - user\n      x-openapi-router-controller: openapi_server.controllers.user_controller\n    get:\n      operationId: get_user_by_name\n      parameters:\n      - description: The name that needs to be fetched. Use user1 for testing.\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: successful operation\n        \"400\":\n          content: {}\n          description: Invalid username supplied\n        \"404\":\n          content: {}\n          description: User not found\n      summary: Get user by user name\n      tags:\n      - user\n      x-openapi-router-controller: openapi_server.controllers.user_controller\n    put:\n      description: This can only be done by the logged in user.\n      operationId: update_user\n      parameters:\n      - description: name that need to be deleted\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Updated user object\n        required: true\n      responses:\n        \"400\":\n          content: {}\n          description: Invalid user supplied\n        \"404\":\n          content: {}\n          description: User not found\n      summary: Updated user\n      tags:\n      - user\n      x-codegen-request-body-name: body\n      x-openapi-router-controller: openapi_server.controllers.user_controller\ncomponents:\n  schemas:\n    Order:\n      description: An order for a pets from the pet store\n      example:\n        petId: 6\n        quantity: 1\n        id: 0\n        shipDate: 2000-01-23T04:56:07.000+00:00\n        complete: false\n        status: placed\n      properties:\n        id:\n          format: int64\n          title: id\n          type: integer\n        petId:\n          format: int64\n          title: petId\n          type: integer\n        quantity:\n          format: int32\n          title: quantity\n          type: integer\n        shipDate:\n          format: date-time\n          title: shipDate\n          type: string\n        status:\n          description: Order Status\n          enum:\n          - placed\n          - approved\n          - delivered\n          title: status\n          type: string\n        complete:\n          default: false\n          title: complete\n          type: boolean\n      title: Pet Order\n      type: object\n      xml:\n        name: Order\n    Category:\n      description: A category for a pet\n      example:\n        name: name\n        id: 6\n      properties:\n        id:\n          format: int64\n          title: id\n          type: integer\n        name:\n          title: name\n          type: string\n      title: Pet category\n      type: object\n      xml:\n        name: Category\n    User:\n      description: A User who is purchasing from the pet store\n      example:\n        firstName: firstName\n        lastName: lastName\n        password: password\n        userStatus: 6\n        phone: phone\n        id: 0\n        email: email\n        username: username\n      properties:\n        id:\n          format: int64\n          title: id\n          type: integer\n        username:\n          title: username\n          type: string\n        firstName:\n          title: firstName\n          type: string\n        lastName:\n          title: lastName\n          type: string\n        email:\n          title: email\n          type: string\n        password:\n          title: password\n          type: string\n        phone:\n          title: phone\n          type: string\n        userStatus:\n          description: User Status\n          format: int32\n          title: userStatus\n          type: integer\n      title: a User\n      type: object\n      xml:\n        name: User\n    Tag:\n      description: A tag for a pet\n      example:\n        name: name\n        id: 1\n      properties:\n        id:\n          format: int64\n          title: id\n          type: integer\n        name:\n          title: name\n          type: string\n      title: Pet Tag\n      type: object\n      xml:\n        name: Tag\n    Pet:\n      description: A pet for sale in the pet store\n      example:\n        photoUrls:\n        - photoUrls\n        - photoUrls\n        name: doggie\n        id: 0\n        category:\n          name: name\n          id: 6\n        tags:\n        - name: name\n          id: 1\n        - name: name\n          id: 1\n        status: available\n      properties:\n        id:\n          format: int64\n          title: id\n          type: integer\n        category:\n          $ref: '#/components/schemas/Category'\n        name:\n          example: doggie\n          title: name\n          type: string\n        photoUrls:\n          items:\n            type: string\n          title: photoUrls\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n        tags:\n          items:\n            $ref: '#/components/schemas/Tag'\n          title: tags\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n        status:\n          description: pet status in the store\n          enum:\n          - available\n          - pending\n          - sold\n          title: status\n          type: string\n      required:\n      - name\n      - photoUrls\n      title: a Pet\n      type: object\n      xml:\n        name: Pet\n    ApiResponse:\n      description: Describes the result of uploading an image resource\n      example:\n        code: 0\n        type: type\n        message: message\n      properties:\n        code:\n          format: int32\n          title: code\n          type: integer\n        type:\n          title: type\n          type: string\n        message:\n          title: message\n          type: string\n      title: An uploaded response\n      type: object\n    updatePetWithForm_request:\n      properties:\n        name:\n          description: Updated name of the pet\n          type: string\n        status:\n          description: Updated status of the pet\n          type: string\n    uploadFile_request:\n      properties:\n        additionalMetadata:\n          description: Additional data to pass to server\n          type: string\n        file:\n          description: file to upload\n          format: binary\n          type: string\n  securitySchemes:\n    petstore_auth:\n      flows:\n        implicit:\n          authorizationUrl: http://petstore.swagger.io/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n      type: oauth2\n      x-tokenInfoFunc: openapi_server.controllers.security_controller_.info_from_petstore_auth\n      x-scopeValidateFunc: openapi_server.controllers.security_controller_.validate_scope_petstore_auth\n    api_key:\n      in: header\n      name: api_key\n      type: apiKey\n      x-apikeyInfoFunc: openapi_server.controllers.security_controller_.info_from_api_key\nx-original-swagger-version: \"2.0\"\n",
			"canonicalURL": "/github.com/OpenAPITools/openapi-generator@3a2bbbb8501f7238dba0dc124234e9e0459cdd9e/-/blob/samples/server/petstore/python-flask/openapi_server/openapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenAPITools/openapi-generator/blob/3a2bbbb8501f7238dba0dc124234e9e0459cdd9e/samples/server/petstore/python-flask/openapi_server/openapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/user/{username}\": put: requestBody: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"oauth2 security",
		"unsupported content types"
	]
}