{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/astarte-platform/astarte"
		},
		"file": {
			"name": "astarte_appengine_api.yaml",
			"size": 0,
			"path": "apps/astarte_appengine_api/priv/static/astarte_appengine_api.yaml",
			"byteSize": 39444,
			"content": "#\n# This file is part of Astarte.\n#\n# Copyright 2017-2021 Ispirata Srl\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nopenapi: 3.0.0\nservers:\n  - url: '{base_url}/v1'\n    variables:\n      base_url:\n        default: http://localhost:4002\n        description: \u003e-\n          The base URL you're serving Astarte from. This should point to the base\n          path from which AppEngine API is served. In case you are running a local\n          installation, this is likely `http://localhost:4002`. In case you have a\n          standard Astarte installation, it is most likely\n          `https://\u003cyour host\u003e/appengine`.\n\ninfo:\n  description: \u003e-\n    Astarte's AppEngine API is the main entry point for any operations which have\n    an impact on devices and their data. Most Astarte applications would want to\n    use this API to interact with devices, stream and receive data, and oversee\n    their fleet.\n  version: 1.1.0-dev\n  title: Astarte App Engine API\n  contact:\n    email: info@ispirata.com\nexternalDocs:\n  description: User documentation\n  url: 'https://docs.astarte-platform.org/1.0/050-query_device.html'\ntags:\n  - name: device\n    description: \u003e-\n      Device data status retrival and publish. All operations on a device can be\n      done using both the device id or any of its aliases.\n  - name: groups\n    description: \u003e-\n      Manage groups creation, allowing to create a new group, add or remove\n      devices from it and query devices that belong to it\n  - name: stats\n    description: \u003e-\n      Retrieve stats (e.g. total number of devices, connected devices, etc).\npaths:\n  '/{realm_name}/devices':\n    get:\n      tags:\n        - device\n      summary: Get devices list\n      description: \u003e-\n        A paged list of all devices is returned. By default the device ID string\n        is returned for each already registered device. The complete device\n        status can be optionally retrieved rather than device ID string using\n        details option.\n      operationId: getDevicesList\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: The name of the realm the device list will be returned from.\n          required: true\n          schema:\n            type: string\n        - name: from_token\n          in: query\n          description: \u003e-\n            Opaque devices list page pointer: it basically points to the\n            beginning of a devices page. If not specified the devices list is\n            displayed from the beginning. This format might change in future\n            versions so it should be passed without any furhter assumption about\n            type, format or its value.\n          required: false\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: Maximum number of devices that will be returned for each page.\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            default: 1000\n        - name: details\n          in: query\n          description: \u003e-\n            If true detailed device status for all devices is returned rather\n            than the device id. See also DeviceStatus example.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: Devices list\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: string\n                  links:\n                    type: object\n                    properties:\n                      self:\n                        type: string\n                        format: uri\n                        description: A relative link to this response.\n                      next:\n                        type: string\n                        format: uri\n                        description: A relative link to next devices list page.\n                example:\n                  links:\n                    self: /v1/example/devices?limit=3\n                    next: \u003e-\n                      /v1/example/devices?from_token=-2128516163519372076\u0026limit=3\n                  data:\n                    - hjnD0GrEP3o9ED1SUuL4QQ\n                    - 8ZxuSGkU7pggwoomJeXo9g\n                    - k-IFKDPoVzIXUcFkF7U80A\n        '401':\n          description: Realm doesn't exist or operation not allowed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n  '/{realm_name}/devices/{device_id}':\n    parameters:\n      - name: realm_name\n        in: path\n        description: Name of the realm which the device belongs to.\n        required: true\n        schema:\n          type: string\n      - name: device_id\n        in: path\n        description: Device ID\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - device\n      summary: Get device general status\n      description: \u003e-\n        A device overview status is returned. Overview includes an array of\n        reported interfaces (introspection), offline/online status, etc...\n      operationId: getDeviceStatus\n      security:\n        - JWT: []\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DeviceStatus'\n        '401':\n          description: Realm doesn't exist or operation not allowed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n        '404':\n          description: Device not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n              examples:\n                response:\n                  value:\n                    errors:\n                      detail: Device not found\n    patch:\n      tags:\n        - device\n      summary: Update a device writeable property\n      description: Update any of the writeable device properties such as device aliases, device attributes or credentials inhibited.\n      operationId: updateDeviceStatus\n      security:\n        - JWT: []\n      requestBody:\n        content:\n          application/merge-patch+json:\n            schema:\n              type: object\n        description: \u003e-\n          A JSON Merge Patch containing the property changes which should be applied to\n          the device.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DeviceStatus'\n        '400':\n          description: Bad request\n        '401':\n          description: Realm doesn't exist or operation not allowed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n        '404':\n          description: Device not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n              examples:\n                response:\n                  value:\n                    errors:\n                      detail: Device not found\n  '/{realm_name}/devices-by-alias/{device_alias}':\n    parameters:\n      - name: realm_name\n        in: path\n        description: Name of the realm which the device belongs to.\n        required: true\n        schema:\n          type: string\n      - name: device_alias\n        in: path\n        description: One of the device aliases\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - device\n      summary: Get device general status\n      description: \u003e-\n        A device overview status is returned. Overview includes an array of\n        reported interfaces (introspection), offline/online status, etc...\n      operationId: getDeviceStatusByAlias\n      security:\n        - JWT: []\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DeviceStatus'\n        '401':\n          description: Realm doesn't exist or operation not allowed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n        '404':\n          description: Device not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n              examples:\n                response:\n                  value:\n                    errors:\n                      detail: Device not found\n    patch:\n      tags:\n        - device\n      summary: Update a device writeable property\n      description: Update any of the writeable device properties such as device aliases, device attributes or credentials inhibited.\n      operationId: updateDeviceStatusByAlias\n      security:\n        - JWT: []\n      requestBody:\n        content:\n          application/merge-patch+json:\n            schema:\n              type: object\n        description: \u003e-\n          A JSON Merge Patch containing the property changes which should be applied to\n          the device.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/DeviceStatus'\n        '400':\n          description: Bad request\n        '401':\n          description: Realm doesn't exist or operation not allowed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n        '404':\n          description: Device not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n              examples:\n                response:\n                  value:\n                    errors:\n                      detail: Device not found\n  '/{realm_name}/devices/{device_id}/interfaces':\n    get:\n      tags:\n        - device\n      summary: Get interfaces list\n      description: \u003e-\n        Get a list of interfaces supported by a certain device. Interfaces that\n        are not reported by the device are not reported here. If a device stops\n        to advertise a certain interface, it should be retrived from a different\n        API, same applies for older versions of a certain interface.\n      operationId: getInterfaces\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the realm which the device belongs to.\n          required: true\n          schema:\n            type: string\n        - name: device_id\n          in: path\n          description: Device ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    data:\n                      - com.test.foo\n                      - com.test.bar\n        '401':\n          description: Realm doesn't exist or operation not allowed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n        '404':\n          description: Device not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n              examples:\n                response:\n                  value:\n                    errors:\n                      detail: Device not found\n  '/{realm_name}/devices/{device_id}/interfaces/{interface}':\n    get:\n      tags:\n        - device\n      summary: Get properties values\n      description: \u003e-\n        Get a values snapshot for a given interface on a certain device. This\n        action performed on a data stream interface returns the most recent set\n        of data for each endpoint. More specific APIs should be used for\n        advances data stream actions.\n      operationId: getInterfacePropertiesValues\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the realm which the device belongs to.\n          required: true\n          schema:\n            type: string\n        - name: device_id\n          in: path\n          description: Device ID\n          required: true\n          schema:\n            type: string\n        - name: interface\n          in: path\n          description: Interface name\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n        '401':\n          description: Realm doesn't exist or operation not allowed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n        '404':\n          description: Interface not found in introspection or device not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n              examples:\n                response:\n                  value:\n                    errors:\n                      detail: Interface not found in device introspection\n  '/{realm_name}/devices/{device_id}/interfaces/{interface}/{path}':\n    get:\n      tags:\n        - device\n      summary: Get property value\n      description: \u003e-\n        Retrieve a value on a given path. This action on a data production path\n        returns the last entry if no query parameters are specified.\n      operationId: getInterfacePropertyValue\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the realm which the device belongs to.\n          required: true\n          schema:\n            type: string\n        - name: device_id\n          in: path\n          description: Device ID\n          required: true\n          schema:\n            type: string\n        - name: interface\n          in: path\n          description: Interface name\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: path\n          description: Endpoint Path\n          required: true\n          schema:\n            type: string\n        - name: since\n          in: query\n          description: \u003e-\n            Query all values since a certain timestamp (all entries where\n            timestamp \u003e= since). This query parameter applies only on data\n            streams. It must be a ISO 8601 valid timestamp. It can't be used if\n            since is already used. See also 'since-after', to' and 'limit'\n            parameters.\n          required: false\n          schema:\n            type: string\n        - name: since_after\n          in: query\n          description: \u003e-\n            Query all values since after a certain timestamp (all entries where\n            timestamp \u003e since_after). This query parameter applies only on data\n            streams. It must be a ISO 8601 valid timestamp. It can't be used if\n            since is already specified. See also 'since', to' and 'limit'\n            parameters.\n          required: false\n          schema:\n            type: string\n        - name: to\n          in: query\n          description: \u003e-\n            Query all values up to a certain timestamp. If since is not\n            specified first entry date is assumed by default. This query\n            parameter applies only on data streams. It must be a ISO 8601 valid\n            timestamp. See also 'since' and 'limit' parameters.\n          required: false\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: \u003e-\n            Limit number of retrieved data production entries to 'limit'. This\n            parameter must be always specified when 'since', 'since-after' and\n            'to' query parameters are used. If limit is specified without any\n            'since' and 'to' parameter, last 'limit' values are retrieved. When\n            'limit' entries are returned, it should be checked if any other\n            entry is left by using since-after the last received timestamp.  An\n            error is returned if limit exceeds maximum allowed value. See also\n            'since' and 'to' parameters.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n        '401':\n          description: Realm doesn't exist or operation not allowed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n        '404':\n          description: \u003e-\n            Path not found or interface not found in introspection or device not\n            found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n              examples:\n                response:\n                  value:\n                    errors:\n                      detail: Path not found\n        '405':\n          description: Invalid Request\n    put:\n      tags:\n        - device\n      summary: Update and push a value on a path\n      description: \u003e-\n        Update and push a property value to the device on a certain endpoint\n        path. interface should be an individual server owned property interface.\n        It mustn't be used to stream data to a device or to update single\n        properties that are members of an object aggregated interface.\n      operationId: updatePathValue\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the realm which the device belongs to.\n          required: true\n          schema:\n            type: string\n        - name: device_id\n          in: path\n          description: Device ID\n          required: true\n          schema:\n            type: string\n        - name: interface\n          in: path\n          description: Interface name\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: path\n          description: Endpoint Path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n        '400':\n          description: Bad request\n        '401':\n          description: Realm doesn't exist or operation not allowed.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n        '404':\n          description: \u003e-\n            Endpoint not found or interface not found in introspection or device\n            not found.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n            application/json:\n              examples:\n                response:\n                  value:\n                    errors:\n                      detail: Endpoint not found\n        '405':\n          description: Invalid object\n    post:\n      tags:\n        - device\n      summary: Stream data\n      description: \u003e-\n        Stream a value on a certain path. Endpoint must be a member of a\n        datastream interface.\n      operationId: streamData\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the realm which the device belongs to.\n          required: true\n          schema:\n            type: string\n        - name: device_id\n          in: path\n          description: Device ID\n          required: true\n          schema:\n            type: string\n        - name: interface\n          in: path\n          description: Interface name\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: path\n          description: Endpoint Path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n        '400':\n          description: Bad request\n        '401':\n          description: Realm doesn't exist or operation not allowed.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n        '404':\n          description: \u003e-\n            Endpoint not found or interface not found in introspection or device\n            not found.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n            application/json:\n              examples:\n                response:\n                  value:\n                    errors:\n                      detail: Endpoint not found\n        '405':\n          description: Invalid object\n    delete:\n      tags:\n        - device\n      summary: Delete path and push an unset value message\n      description: \u003e-\n        Unset a value on a certain path, path is also deleted. Endpoint must\n        support unset.\n      operationId: deletePathValue\n      security:\n        - JWT: []\n      parameters:\n        - name: realm_name\n          in: path\n          description: Name of the realm which the device belongs to.\n          required: true\n          schema:\n            type: string\n        - name: device_id\n          in: path\n          description: Device ID\n          required: true\n          schema:\n            type: string\n        - name: interface\n          in: path\n          description: Interface name\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: path\n          description: Endpoint Path\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Success\n        '401':\n          description: Realm doesn't exist or operation not allowed.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n        '404':\n          description: \u003e-\n            Path not found or interface not found in introspection or device not\n            found.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/NotFoundError'\n            application/json:\n              examples:\n                response:\n                  value:\n                    errors:\n                      detail: Path not found\n        '405':\n          description: Invalid object\n  '/{realm_name}/groups':\n    get:\n      tags:\n        - groups\n      summary: Get groups list\n      description: \u003e-\n        Return the list of device groups that exist in the realm.\n      operationId: indexGroups\n      security:\n        - JWT: []\n      parameters:\n        - $ref: '#/components/parameters/RealmName'\n      responses:\n        '200':\n          $ref: '#/components/responses/IndexGroups'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n    post:\n      tags:\n        - groups\n      summary: Create new group\n      description: \u003e-\n        Create a new group with a set of devices.\n        Devices must already be registered in the realm.\n      operationId: createGroup\n      security:\n        - JWT: []\n      parameters:\n        - $ref: '#/components/parameters/RealmName'\n      requestBody:\n        $ref: '#/components/requestBodies/CreateGroup'\n      responses:\n        '201':\n          $ref: '#/components/responses/GroupCreated'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '422':\n          $ref: '#/components/responses/InvalidGroupConfig'\n  '/{realm_name}/groups/{group_name}':\n    get:\n      tags:\n        - groups\n      summary: Get group config\n      description: \u003e-\n        Return the configuration of the group. Currently, it just returns the group name,\n        but the call can be used to verify if a group exists.\n      operationId: getGroupConfig\n      security:\n        - JWT: []\n      parameters:\n        - $ref: '#/components/parameters/RealmName'\n        - $ref: '#/components/parameters/GroupName'\n      responses:\n        '200':\n          $ref: '#/components/responses/GetGroup'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/GroupNotFound'\n  '/{realm_name}/groups/{group_name}/devices':\n    get:\n      tags:\n        - groups\n      summary: List devices in a group\n      description: \u003e-\n        Return the list of devices in a group.\n      operationId: indexGroupDevices\n      security:\n        - JWT: []\n      parameters:\n        - $ref: '#/components/parameters/RealmName'\n        - $ref: '#/components/parameters/GroupName'\n      responses:\n        '200':\n          $ref: '#/components/responses/IndexGroupDevices'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/GroupNotFound'\n    post:\n      tags:\n        - groups\n      summary: Add device to group\n      description: \u003e-\n        Add an existing device to a group.\n      operationId: addDeviceToGroup\n      security:\n        - JWT: []\n      parameters:\n        - $ref: '#/components/parameters/RealmName'\n        - $ref: '#/components/parameters/GroupName'\n      requestBody:\n        $ref: '#/components/requestBodies/AddDeviceToGroup'\n      responses:\n        '201':\n          description: Success\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/GroupNotFound'\n        '422':\n          $ref: '#/components/responses/InvalidAddGroup'\n  '/{realm_name}/groups/{group_name}/devices/{device_id}':\n    delete:\n      tags:\n        - groups\n      summary: Remove device from group\n      description: \u003e-\n        Remove device from group\n      operationId: removeDeviceFromGroup\n      security:\n        - JWT: []\n      parameters:\n        - $ref: '#/components/parameters/RealmName'\n        - $ref: '#/components/parameters/GroupName'\n        - $ref: '#/components/parameters/DeviceId'\n      responses:\n        '204':\n          description: Device removed\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/GroupOrDeviceNotFound'\n  '/{realm_name}/stats/devices':\n    get:\n      tags:\n        - stats\n      summary: Retrieve devices stats\n      description: \u003e-\n        Return stats regarding devices in a Realm\n      operationId: getDevicesStats\n      security:\n        - JWT: []\n      parameters:\n        - $ref: '#/components/parameters/RealmName'\n      responses:\n        '200':\n          $ref: '#/components/responses/GetDevicesStats'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\ncomponents:\n  securitySchemes:\n    JWT:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: \u003e\n        To access APIs a valid JWT token must be passed in all requests\n        in the `Authorization` header. This token should be signed with\n        the private key associated with the realm the request refers to.\n\n\n        The following syntax must be used in the `Authorization` header :\n          `Bearer xxxxxx.yyyyyyy.zzzzzz`\n  requestBodies:\n    AddDeviceToGroup:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - data\n            properties:\n              data:\n                type: object\n                required:\n                  - device_id\n                properties:\n                  device_id:\n                    description: The device id of the device to add\n                    type: string\n                    example: '8NWCESshRrmUe9FWhg39qQ'\n    CreateGroup:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - data\n            properties:\n              data:\n                $ref: '#/components/schemas/CreateGroupConfig'\n  responses:\n    IndexGroups:\n      description: Groups list\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                type: array\n                description: Group name list\n                items:\n                  type: string\n                example:\n                  - first-floor\n                  - second-floor\n    GetGroup:\n      description: Groups list\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                $ref: '#/components/schemas/GroupConfig'\n    GroupCreated:\n      description: Success\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                $ref: '#/components/schemas/CreateGroupConfig'\n    IndexGroupDevices:\n      description: Group device list\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                type: array\n                items:\n                  type: string\n                example:\n                  - v8UxxIT9RkyPjIJZt6-Rrw\n                  - fhd0WHcgSjWeVqPGKZv_KA\n    InvalidAddGroup:\n      description: Invalid request\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errors:\n                type: object\n                properties:\n                  device_id:\n                    type: array\n                    items:\n                      type: string\n                example:\n                  device_id:\n                    - does not exist\n    InvalidGroupConfig:\n      description: Invalid group configuration\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errors:\n                type: object\n                properties:\n                  group_name:\n                    type: array\n                    items:\n                      type: string\n                  devices:\n                    type: array\n                    items:\n                      type: string\n                example:\n                  group_name:\n                    - is invalid\n    Unauthorized:\n      description: Realm doesn't exist or operation not allowed.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UnauthorizedError'\n    GroupNotFound:\n      description: Group not found\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errors:\n                type: object\n                properties:\n                  detail:\n                    type: string\n                    example: Group not found\n    GroupOrDeviceNotFound:\n      description: Group or device not found\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              errors:\n                type: object\n                properties:\n                  detail:\n                    type: string\n                    example: Device not found\n    GetDevicesStats:\n      description: Devices stats\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              data:\n                $ref: '#/components/schemas/DevicesStats'\n  parameters:\n    GroupName:\n      name: group_name\n      in: path\n      description: The name of the group.\n      required: true\n      schema:\n        type: string\n    RealmName:\n      name: realm_name\n      in: path\n      description: The name of the realm the device list will be returned from.\n      required: true\n      schema:\n        type: string\n    DeviceId:\n      name: device_id\n      in: path\n      description: Device id of the target device.\n      required: true\n      schema:\n        type: string\n  schemas:\n    DeviceStatus:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The device ID.\n        aliases:\n          type: object\n          description: \u003e-\n            A set of aliases and their tags. Each alias has an unique tag that\n            identifies its purpose.\n        attributes:\n          type: object\n          description: \u003e-\n            A set of attributes with their values. Each attribute has a unique key.\n        introspection:\n          type: object\n          description: \u003e-\n            A dictionary of available (installed) interfaces on the device. For\n            each interface version major and minor versions are provided.\n            Interfaces that are listed here might not be available on the server\n            (e.g. not installed).\n        connected:\n          type: boolean\n          description: True if the device is connected to the broker.\n        last_connection:\n          type: string\n          format: date-time\n          description: Last connection to the broker timestamp.\n        last_disconnection:\n          type: string\n          format: date-time\n          description: Last device disconnection timestamp.\n        first_registration:\n          type: string\n          format: date-time\n          description: First registration attempt timestamp.\n        first_credentials_request:\n          type: string\n          format: date-time\n          description: First credentials request timestamp.\n        last_seen_ip:\n          type: string\n          description: Last known device IP address.\n        credentials_inhibited:\n          type: boolean\n          description: true if the device has been inhibited (i.e. it can't request new credentials)\n        last_credentials_request_ip:\n          type: string\n          description: Last known device IP address used while obtaining credentials.\n        total_received_bytes:\n          type: integer\n          description: Total ammount of received payload bytes.\n        total_received_msgs:\n          type: integer\n          description: Total ammount of received messages.\n        groups:\n          type: array\n          description: The groups the device belongs to.\n          items:\n            type: string\n        previous_interfaces:\n          type: array\n          description: The list of previously supported interfaces\n          items:\n            type: object\n            description: \u003e-\n              An object representing an interface that was previously declared in the introspection\n              by the device\n            properties:\n              name:\n                type: string\n                description: The name of the interface\n              major:\n                type: integer\n                description: The major version of the interface\n              minor:\n                type: integer\n                description: The minor version of the interface\n              exchanged_msgs:\n                type: integer\n                description: \u003e-\n                  The number of exchanged messages of this interface. Note that exchanged messages\n                  are the same for all (interface, major) combinations, i.e. com.my.Interface v1.2\n                  will have the same exchanged_msgs of com.my.Interface v1.x for every value of x\n              exchanged_bytes:\n                type: integer\n                description: \u003e-\n                  The number of exchanged bytes of this interface. Note that exchanged bytes\n                  are the same for all (interface, major) combinations, i.e. com.my.Interface v1.2\n                  will have the same exchanged_bytes of com.my.Interface v1.x for every value of x\n      example:\n        id: hm8AjtbN5P2mxo_gfXSfvQ\n        aliases:\n          serial_number: '1234567'\n          display_name: my_device_name\n        attributes:\n          attribute_key: attribute_value\n        introspection:\n          com.example.ExampleInterface:\n            major: 2\n            minor: 0\n            exchanged_msgs: 20\n            exchanged_bytes: 200\n          com.example.HelloWorldInterface:\n            major: 1\n            minor: 1\n            exchanged_msgs: 3\n            exchanged_bytes: 42\n        connected: false\n        last_connection: '2017-09-28T03:45:00.000Z'\n        last_disconnection: '2017-09-29T18:25:00.000Z'\n        first_registration: '2016-07-08T09:44:00.000Z'\n        first_credentials_request: '2016-08-20T09:44:00.000Z'\n        last_seen_ip: 198.51.100.81\n        credentials_inhibited: false\n        last_credentials_request_ip: 98.51.100.89\n        total_received_bytes: 10240\n        total_received_msgs: 10\n        groups:\n          - test-devices\n          - first-floor\n        previous_interfaces:\n          - name: com.example.ExampleInterface\n            major: 1\n            minor: 1\n            exchanged_msgs: 5\n            exchanged_bytes: 102\n    CreateGroupConfig:\n      type: object\n      required:\n        - group_name\n        - devices\n      properties:\n        group_name:\n          type: string\n          example: mygroupname\n        devices:\n          type: array\n          items:\n            type: string\n          example:\n            - v8UxxIT9RkyPjIJZt6-Rrw\n            - fhd0WHcgSjWeVqPGKZv_KA\n    GroupConfig:\n      type: object\n      properties:\n        group_name:\n          type: string\n          example: mygroupname\n    DevicesStats:\n      type: object\n      properties:\n        total_devices:\n          description: The total number of devices in the Realm\n          type: integer\n          example: 203\n        connected_devices:\n          description: The number of devices currently connected in the Realm\n          type: integer\n          example: 30\n    NotFoundError:\n      type: object\n      properties:\n        errors:\n          type: object\n          properties:\n            detail:\n              type: string\n              description: Short error description\n      example:\n        errors:\n          detail: Device not found\n    UnauthorizedError:\n      type: object\n      properties:\n        errors:\n          type: object\n          properties:\n            detail:\n              type: string\n              description: Short error description\n      example:\n        errors:\n          detail: Unauthorized\n",
			"canonicalURL": "/github.com/astarte-platform/astarte@ffad806921d493a4cf4eb7d3105acf423c28ac9b/-/blob/apps/astarte_appengine_api/priv/static/astarte_appengine_api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/astarte-platform/astarte/blob/ffad806921d493a4cf4eb7d3105acf423c28ac9b/apps/astarte_appengine_api/priv/static/astarte_appengine_api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/{realm_name}/devices-by-alias/{device_alias}\": patch: requestBody: contents: unsupported content types: [application/merge-patch+json]",
	"NotImplemented": [
		"empty schema",
		"unsupported content types"
	]
}