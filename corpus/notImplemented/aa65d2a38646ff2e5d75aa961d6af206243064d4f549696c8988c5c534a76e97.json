{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ConsumerDataStandardsAustralia/standards"
		},
		"file": {
			"name": "cds_dcr.yaml",
			"size": 0,
			"path": "slate/source/includes/swagger/cds_dcr.yaml",
			"byteSize": 19750,
			"content": "openapi: 3.0.3\ninfo:\n  description: This specification defines the APIs for Data Holders exposing Dynamic\n    Client Registration endpoints.\n  title: CDR Dynamic Client Registration API\n  version: 1.17.0\nservers:\n- url: https://data.holder.com.au/register\npaths:\n  /register:\n    post:\n      description: Register a client using a CDR Register issued Software Statement\n        Assertion.\n      operationId: PostDataRecipientRegistration\n      requestBody:\n        content:\n          application/jwt:\n            schema:\n              $ref: '#/components/schemas/ClientRegistrationRequest'\n        description: The registration request JWT to be used to register with a Data\n          Holder.\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegistrationProperties'\n          description: Client registration success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegistrationError'\n          description: Request failed due to client error\n      summary: Register Data Recipient oAuth Client\n      tags:\n      - Client Registration\n      x-codegen-request-body-name: ClientRegistrationRequest\n  /register/{ClientId}:\n    delete:\n      description: Delete a Client Registration for a given Client ID.\n      operationId: DeleteDataRecipientRegistration\n      parameters:\n      - description: The client ID issued by the target Data Holder\n        explode: false\n        in: path\n        name: ClientId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: An Authorisation Token as per **[[RFC6750]](#nref-RFC6750)**\n        explode: false\n        in: header\n        name: Authorization\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: Client deleted\n        \"401\":\n          description: Request failed due to unknown or invalid Client or invalid\n            access token\n          headers:\n            WWW-Authenticate:\n              description: The Response Header Field as per **[[RFC6750]](#nref-RFC6750)**\n              explode: false\n              schema:\n                pattern: ^Bearer .*\n                type: string\n              style: simple\n        \"403\":\n          description: The client does not have permission to read, update or delete\n            the Client\n        \"405\":\n          description: Method Not Allowed. The requested method is unsupported\n      summary: Delete Data Recipient oAuth Client Registration\n      tags:\n      - Client Registration\n      x-scopes:\n      - cdr:registration\n    get:\n      description: Get a Client Registration for a given Client ID.\n      operationId: GetClientRegistration\n      parameters:\n      - description: The client ID issued by the target Data Holder\n        explode: false\n        in: path\n        name: ClientId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: An Authorisation Token as per **[[RFC6750]](#nref-RFC6750)**\n        explode: false\n        in: header\n        name: Authorization\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegistrationProperties'\n          description: Client registration retrieval success\n        \"401\":\n          description: Request failed due to unknown or invalid Client or invalid\n            access token\n          headers:\n            WWW-Authenticate:\n              description: The Response Header Field as per **[[RFC6750]](#nref-RFC6750)**\n              explode: false\n              schema:\n                pattern: ^Bearer .*\n                type: string\n              style: simple\n        \"403\":\n          description: The client does not have permission to read, update or delete\n            the Client\n      summary: Get oAuth Client Registration\n      tags:\n      - Client Registration\n      x-scopes:\n      - cdr:registration\n    put:\n      description: Update a Client Registration for a given Client ID.\n      operationId: PutDataRecipientRegistration\n      parameters:\n      - description: The client ID issued by the target Data Holder\n        explode: false\n        in: path\n        name: ClientId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: An Authorisation Token as per **[[RFC6750]](#nref-RFC6750)**\n        explode: false\n        in: header\n        name: Authorization\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/jwt:\n            schema:\n              $ref: '#/components/schemas/ClientRegistrationRequest'\n        description: The registration request JWT to be used to register with a Data\n          Holder.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegistrationProperties'\n          description: Client registration update success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegistrationError'\n          description: Request failed due to client error\n        \"401\":\n          description: Request failed due to unknown or invalid Client or invalid\n            access token\n          headers:\n            WWW-Authenticate:\n              description: The Response Header Field as per **[[RFC6750]](#nref-RFC6750)**\n              explode: false\n              schema:\n                pattern: ^Bearer .*\n                type: string\n              style: simple\n        \"403\":\n          description: The client does not have permission to read, update or delete\n            the Client\n      summary: Update Data Recipient Registration\n      tags:\n      - Client Registration\n      x-scopes:\n      - cdr:registration\n      x-codegen-request-body-name: ClientRegistrationRequest\ncomponents:\n  parameters:\n    Authorization:\n      description: An Authorisation Token as per **[[RFC6750]](#nref-RFC6750)**\n      explode: false\n      in: header\n      name: Authorization\n      required: true\n      schema:\n        type: string\n      style: simple\n    ClientId:\n      description: The client ID issued by the target Data Holder\n      explode: false\n      in: path\n      name: ClientId\n      required: true\n      schema:\n        type: string\n      style: simple\n  responses:\n    \"400Error\":\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/RegistrationError'\n      description: Request failed due to client error\n    \"401Error\":\n      description: Request failed due to unknown or invalid Client or invalid access\n        token\n      headers:\n        WWW-Authenticate:\n          description: The Response Header Field as per **[[RFC6750]](#nref-RFC6750)**\n          explode: false\n          schema:\n            pattern: ^Bearer .*\n            type: string\n          style: simple\n    \"403Error\":\n      description: The client does not have permission to read, update or delete the\n        Client\n    \"405Error\":\n      description: Method Not Allowed. The requested method is unsupported\n  schemas:\n    ClientRegistrationRequest:\n      description: The registration request JWT to be used to register with a Data\n        Holder.\n      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n      format: JWT\n      type: string\n    RegistrationProperties:\n      example:\n        legal_entity_id: 344F0E809-BDBE-4F8E-BD30-5E6C3CB78D7B\n        token_endpoint_auth_signing_alg: PS256\n        client_uri: https://www.mockcompany.com.au\n        application_type: web\n        logo_uri: https://www.mockcompany.com.au/logos/logo1.png\n        client_id: 35a5a70b-5b8d-41f4-9cbd-96cfbc15c58a\n        client_description: A mock software product\n        token_endpoint_auth_method: private_key_jwt\n        software_statement: software_statement\n        software_id: 740C368F-ECF9-4D29-A2EA-0514A66B0CDE\n        scope: openid profile bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read\n          bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read\n          cdr:registration\n        client_id_issued_at: 1571808167\n        org_name: Mock Company Brand.\n        client_name: Mock Software\n        policy_uri: https://www.mockcompany.com.au/policy.html\n        id_token_signed_response_alg: PS256\n        grant_types:\n        - client_credentials\n        - client_credentials\n        redirect_uris:\n        - https://www.mockcompany.com.au/redirects/redirect1\n        - https://www.mockcompany.com.au/redirects/redirect2\n        sector_identifier_uri: https://www.mockcompany.com.au/sector_identifier.json\n        id_token_encrypted_response_alg: RSA-OAEP\n        org_id: 3B0B0A7B-3E7B-4A2C-9497-E357A71D07C8\n        id_token_encrypted_response_enc: A256GCM\n        jwks_uri: https://www.mockcompany.com.au/jwks\n        revocation_uri: https://www.mockcompany.com.au/revocation\n        tos_uri: https://www.mockcompany.com.au/tos.html\n        request_object_signing_alg: PS256\n        software_roles: data-recipient-software-product\n        legal_entity_name: Mock Company Pty Ltd.\n        recipient_base_uri: https://www.mockcompany.com.au\n        response_types:\n        - code id_token\n        - code id_token\n      properties:\n        client_id:\n          description: Data Holder issued client identifier string\n          example: 35a5a70b-5b8d-41f4-9cbd-96cfbc15c58a\n          type: string\n        client_id_issued_at:\n          description: Time at which the client identifier was issued expressed as\n            seconds since 1970-01-01T00:00:00Z as measured in UTC\n          example: 1571808167\n          format: int32\n          type: integer\n        client_name:\n          description: Human-readable string name of the software product to be presented\n            to the end-user during authorization\n          example: Mock Software\n          type: string\n        client_description:\n          description: Human-readable string name of the software product description\n            to be presented to the end user during authorization\n          example: A mock software product\n          type: string\n        client_uri:\n          description: URL string of a web page providing information about the client\n          example: https://www.mockcompany.com.au\n          type: string\n        legal_entity_id:\n          description: A unique identifier string assigned by the CDR Register that\n            identifies the Accredited Data Recipient Legal Entity\n          example: 344F0E809-BDBE-4F8E-BD30-5E6C3CB78D7B\n          type: string\n        legal_entity_name:\n          description: Human-readable string name of the Accredited Data Recipient\n            Legal Entity\n          example: Mock Company Pty Ltd.\n          type: string\n        org_id:\n          description: A unique identifier string assigned by the CDR Register that\n            identifies the Accredited Data Recipient Brand\n          example: 3B0B0A7B-3E7B-4A2C-9497-E357A71D07C8\n          type: string\n        org_name:\n          description: Human-readable string name of the Accredited Data Recipient\n            to be presented to the end user during authorization\n          example: Mock Company Brand.\n          type: string\n        redirect_uris:\n          description: Array of redirection URI strings for use in redirect-based\n            flows. If used, redirect_uris MUST match or be a subset of the redirect_uris\n            as defined in the SSA\n          example:\n          - https://www.mockcompany.com.au/redirects/redirect1\n          - https://www.mockcompany.com.au/redirects/redirect2\n          items:\n            format: uri\n            type: string\n          type: array\n        sector_identifier_uri:\n          description: URL string referencing the client sector identifier URI, used\n            as an optional input to the Pairwise Identifier\n          example: https://www.mockcompany.com.au/sector_identifier.json\n          type: string\n        logo_uri:\n          description: URL string that references a logo for the client. If present,\n            the server SHOULD display this image to the end-user during approval\n          example: https://www.mockcompany.com.au/logos/logo1.png\n          type: string\n        tos_uri:\n          description: URL string that points to a human-readable terms of service\n            document for the Software Product\n          example: https://www.mockcompany.com.au/tos.html\n          type: string\n        policy_uri:\n          description: URL string that points to a human-readable policy document\n            for the Software Product\n          example: https://www.mockcompany.com.au/policy.html\n          type: string\n        jwks_uri:\n          description: URL string referencing the client JSON Web Key (JWK) Set **[[RFC7517]](#nref-RFC7517)**\n            document, which contains the client public keys\n          example: https://www.mockcompany.com.au/jwks\n          type: string\n        revocation_uri:\n          description: URI string that references the location of the Software Product\n            consent revocation endpoint\n          example: https://www.mockcompany.com.au/revocation\n          type: string\n        recipient_base_uri:\n          description: Base URI for the Consumer Data Standard Data Recipient endpoints.\n            This should be the base to provide reference to all other Data Recipient\n            Endpoints\n          example: https://www.mockcompany.com.au\n          type: string\n        token_endpoint_auth_method:\n          description: The requested authentication method for the token endpoint\n          enum:\n          - private_key_jwt\n          type: string\n        token_endpoint_auth_signing_alg:\n          description: The algorithm used for signing the JWT\n          enum:\n          - PS256\n          - ES256\n          type: string\n        grant_types:\n          description: Array of OAuth 2.0 grant type strings that the client can use\n            at the token endpoint\n          items:\n            enum:\n            - client_credentials\n            - authorization_code\n            - refresh_token\n            type: string\n          type: array\n        response_types:\n          description: Array of the OAuth 2.0 response type strings that the client\n            can use at the authorization endpoint.\n          items:\n            enum:\n            - code id_token\n            type: string\n          type: array\n        application_type:\n          description: Kind of the application. The only supported application type\n            will be `web`\n          enum:\n          - web\n          type: string\n        id_token_signed_response_alg:\n          description: Algorithm with which an id_token is to be signed\n          enum:\n          - PS256\n          - ES256\n          type: string\n        id_token_encrypted_response_alg:\n          description: JWE `alg` algorithm with which an id_token is to be encrypted\n          example: RSA-OAEP\n          type: string\n        id_token_encrypted_response_enc:\n          description: JWE `enc` algorithm with which an id_token is to be encrypted\n          example: A256GCM\n          type: string\n        request_object_signing_alg:\n          description: Algorithm which the ADR expects to sign the request object\n            if a request object will be part of the authorization request sent to\n            the Data Holder\n          enum:\n          - PS256\n          - ES256\n          type: string\n        software_statement:\n          description: The Software Statement Assertion, as defined in CDR standards\n          format: JWT\n          type: string\n        software_id:\n          description: String representing a unique identifier assigned by the Register\n            and used by registration endpoints to identify the software product to\n            be dynamically registered. \u003c/br\u003e\u003c/br\u003eThe \"software_id\" will remain the\n            same for the lifetime of the product, across multiple updates and versions\n          example: 740C368F-ECF9-4D29-A2EA-0514A66B0CDE\n          type: string\n        software_roles:\n          description: String containing a role of the software in the CDR Regime.\n            Initially the only value used with be `data-recipient-software-product`\n          example: data-recipient-software-product\n          type: string\n        scope:\n          description: String containing a space-separated list of scope values that\n            the client can use when requesting access tokens.\n          example: openid profile bank:accounts.basic:read bank:accounts.detail:read\n            bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read\n            common:customer.detail:read cdr:registration\n          type: string\n      required:\n      - client_description\n      - client_id\n      - client_name\n      - client_uri\n      - grant_types\n      - id_token_encrypted_response_alg\n      - id_token_encrypted_response_enc\n      - jwks_uri\n      - logo_uri\n      - org_id\n      - org_name\n      - redirect_uris\n      - request_object_signing_alg\n      - response_types\n      - scope\n      - software_id\n      - software_statement\n      - token_endpoint_auth_method\n      - token_endpoint_auth_signing_alg\n      type: object\n    ClientRegistration:\n      allOf:\n      - $ref: '#/components/schemas/ClientRegistration_allOf'\n      - $ref: '#/components/schemas/RegistrationProperties'\n    RegistrationError:\n      properties:\n        error:\n          description: Predefined error code as described in [section 3.3 OIDC Dynamic\n            Client Registration](https://openid.net/specs/openid-connect-registration-1_0.html)\n          enum:\n          - invalid_redirect_uri\n          - invalid_client_metadata\n          - invalid_software_statement\n          - unapproved_software_statement\n          type: string\n        error_description:\n          description: Additional text description of the error for debugging.\n          type: string\n      required:\n      - error\n      type: object\n    ClientRegistration_allOf:\n      properties:\n        iss:\n          description: Contains the identifier for the ADR Software Product (SoftwareProductId)\n            as defined in the CDR Register\n          example: CDR Software Product ID\n          type: string\n        iat:\n          description: The time at which the request was issued by the Data Recipient  expressed\n            as seconds since 1970-01-01T00:00:00Z as measured in UTC\n          example: 1571808167\n          format: int32\n          type: integer\n        exp:\n          description: The time at which the request expires expressed as seconds\n            since 1970-01-01T00:00:00Z as measured in UTC\n          example: 2147483646\n          format: int32\n          type: integer\n        jti:\n          description: Unique identifier for the JWT, used to prevent replay of the\n            token\n          example: 37747cd1c10545699f754adf28b73e31\n          type: string\n        aud:\n          description: '''Contains the Data Holder issuer value as described in the\n            OIDC Discovery Document'\n          example: https://secure.api.dataholder.com/issuer\n          type: string\n      required:\n      - aud\n      - exp\n      - iat\n      - iss\n      - jti\n      type: object\n",
			"canonicalURL": "/github.com/ConsumerDataStandardsAustralia/standards@c4bb11ccedf294a98f61aa0782fbfce211a5d460/-/blob/slate/source/includes/swagger/cds_dcr.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ConsumerDataStandardsAustralia/standards/blob/c4bb11ccedf294a98f61aa0782fbfce211a5d460/slate/source/includes/swagger/cds_dcr.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/register\": post: requestBody: contents: unsupported content types: [application/jwt]",
	"NotImplemented": [
		"unsupported content types"
	]
}