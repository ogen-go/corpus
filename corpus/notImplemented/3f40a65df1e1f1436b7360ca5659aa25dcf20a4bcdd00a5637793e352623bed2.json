{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/broadinstitute/sam"
		},
		"file": {
			"name": "api-docs.yaml",
			"size": 0,
			"path": "src/main/resources/swagger/api-docs.yaml",
			"byteSize": 84128,
			"content": "openapi: 3.0.1\ninfo:\n  title: Sam\n  description: |\n    Workbench identity and access management.\n  termsOfService: https://github.com/broadinstitute/sam\n  license:\n    name: BSD\n    url: http://opensource.org/licenses/BSD-3-Clause\n  version: \"0.1\"\nservers:\n  - url: /\nsecurity:\n  - googleoauth:\n      - openid\n      - email\n      - profile\n  - oidc:\n      - openid\n      - email\n      - profile\npaths:\n  /api/admin/v1/user/{userId}:\n    get:\n      tags:\n        - Admin\n      summary: gets the registration status of the user, by user id\n      operationId: adminGetUserStatus\n      parameters:\n        - name: userId\n          in: path\n          description: User ID to check the status of\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: status of specified user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStatus'\n  /api/admin/v1/user/email/{email}:\n    get:\n      tags:\n        - Admin\n      summary: gets the registration status of the user, by email\n      operationId: adminGetUserByEmail\n      parameters:\n        - name: email\n          in: path\n          description: Email address of user to check\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: status of specified user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStatus'\n  /api/admin/v1/user/{userId}/disable:\n    put:\n      tags:\n        - Admin\n      summary: disables the specified user\n      operationId: disableUser\n      parameters:\n        - name: userId\n          in: path\n          description: User ID to disable\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: status of specified user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStatus'\n  /api/admin/v1/user/{userId}/enable:\n    put:\n      tags:\n        - Admin\n      summary: enables the specified user\n      operationId: enableUser\n      parameters:\n        - name: userId\n          in: path\n          description: User ID to enable\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: status of specified user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStatus'\n  /api/admin/v1/user/{userId}/petServiceAccount:\n    delete:\n      tags:\n        - Admin\n      summary: deletes a user's pet service account\n      operationId: deletePet\n      parameters:\n        - name: userId\n          in: path\n          description: User ID whose pet to delete\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successfully deleted pet service account\n          content: {}\n        403:\n          description: You do not have admin privileges\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/admin/v1/user/{userId}/petServiceAccount/{project}:\n    delete:\n      tags:\n        - Admin\n      summary: deletes a user's pet service account for a project\n      operationId: deletePetPerProject\n      parameters:\n        - name: userId\n          in: path\n          description: User ID whose pet to delete\n          required: true\n          schema:\n            type: string\n        - name: project\n          in: path\n          description: Google project of the pet\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successfully deleted pet service account for a project\n          content: {}\n        403:\n          description: You do not have admin privileges\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/admin/v1/resources/{resourceTypeName}/{resourceId}/policies:\n    get:\n      tags:\n        - Admin\n      summary: List the policies for a resource\n      operationId: adminListResourcePolicies\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Policies successfully listed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessPolicyResponseEntryV2'\n        403:\n          description: You do not have permission to perform this action on the resource\n          content: { }\n        404:\n          description: Resource type does not exist or you are not a member of any\n            policy on the resource\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/admin/v1/resources/{resourceTypeName}/{resourceId}/policies/{policyName}/memberEmails/{userEmail}:\n    put:\n      tags:\n        - Admin\n      summary: Add a user to a policy\n      operationId: adminAddUserToPolicy\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of the policy\n          required: true\n          schema:\n            type: string\n        - name: userEmail\n          in: path\n          description: Email of user to be added\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successfully added a user to the policy\n          content: { }\n        400:\n          description: email is not found\n          content: { }\n        403:\n          description: You do not have permission to alter this policy\n          content: { }\n        404:\n          description: Resource type does not exist, you are not a member of any policy\n            on the resource, or user was not found\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    delete:\n      tags:\n        - Admin\n      summary: Remove a user from a policy\n      operationId: adminRemoveUserFromPolicy\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of the policy\n          required: true\n          schema:\n            type: string\n        - name: userEmail\n          in: path\n          description: Email of user to be removed\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successfully removed a user from the policy\n          content: { }\n        400:\n          description: email is not found\n          content: { }\n        403:\n          description: You do not have permission to alter this policy\n          content: { }\n        404:\n          description: Resource type does not exist, you are not a member of any policy\n            on the resource, or user was not found\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/admin/v1/resourceTypes/{resourceTypeName}/policies:\n    get:\n      tags:\n        - Admin\n      summary: List the admin policies for a resource type\n      operationId: listResourceTypeAdminPolicies\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Policies successfully listed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessPolicyResponseEntryV2'\n        403:\n          description: You are not a Sam super admin\n          content: { }\n        404:\n          description: Resource type does not exist\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/admin/v1/resourceTypes/{resourceTypeName}/policies/{policyName}:\n    put:\n      tags:\n        - Admin\n      summary: Create or overwrite an admin policy for a resource type\n      operationId: createOrUpdateResourceTypeAdminPolicies\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of admin policy\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The details of the policy\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/AccessPolicyMembershipV2'\n        required: true\n      responses:\n        201:\n          description: Policy successfully created/updated\n          content: { }\n        400:\n          description: Policy is invalid\n          content: { }\n        403:\n          description: You are not a Sam super admin\n          content: { }\n        404:\n          description: Resource type does not exist\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    delete:\n      tags:\n        - Admin\n      summary: Delete an admin policy for a resource type\n      operationId: deleteResourceTypeAdminPolicies\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of admin policy\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successfully deleted policy\n          content: { }\n        403:\n          description: You are not a Sam super admin\n          content: { }\n        404:\n          description: Policy does not exist or resource type does not exist\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/config/v1/resourceTypes:\n    get:\n      tags:\n        - Config\n      summary: Lists available resource types\n      operationId: listResourceTypes\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ResourceType'\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/groups/v1:\n    get:\n      tags:\n        - Group\n      summary: Show all the groups the requesting user belongs to and their policy\n        membership in each group\n      operationId: listGroupMemberships\n      responses:\n        200:\n          description: Managed Group memberships\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ManagedGroupMembershipEntry'\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/groups/v1/{groupName}:\n    get:\n      tags:\n        - Group\n      summary: Show email address of the group\n      operationId: getGroup\n      parameters:\n        - name: groupName\n          in: path\n          description: Name of group\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Group found\n          content:\n            application/json:\n              schema:\n                type: string\n                description: Email address for the group\n        404:\n          description: Group could not be found or you do not have the required permissions\n            on this group\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    post:\n      tags:\n        - Group\n      summary: Create a new group\n      operationId: postGroup\n      parameters:\n        - name: groupName\n          in: path\n          description: Name of group\n          required: true\n          schema:\n            type: string\n      responses:\n        201:\n          description: Group created\n          content: {}\n        409:\n          description: Group already exists\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    delete:\n      tags:\n        - Group\n      summary: Delete group\n      operationId: deleteGroup\n      parameters:\n        - name: groupName\n          in: path\n          description: Name of group\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Group deleted\n          content: {}\n        404:\n          description: Group could not be found or you do not have the required permissions\n            on this group\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/groups/v1/{groupName}/requestAccess:\n    post:\n      tags:\n        - Group\n      summary: Request access to a managed group\n      operationId: requestAccess\n      parameters:\n        - name: groupName\n          in: path\n          description: Name of group\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Request sent\n          content: {}\n        404:\n          description: Group could not be found or you do not have the required permissions\n            on this group\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/groups/v1/{groupName}/accessInstructions:\n    get:\n      tags:\n        - Group\n      summary: gets the access instructions for a managed group\n      operationId: getAccessInstructions\n      parameters:\n        - name: groupName\n          in: path\n          description: Name of group\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Access instructions for this group\n          content:\n            application/json:\n              schema:\n                type: string\n        204:\n          description: No access instructions found for this group\n          content: {}\n        404:\n          description: Group could not be found or you do not have the required permissions\n            on this group\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    put:\n      tags:\n        - Group\n      summary: sets the access instructions for a managed group\n      operationId: setAccessInstructions\n      parameters:\n        - name: groupName\n          in: path\n          description: Name of group\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successfully set access instructions\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/groups/v1/{groupName}/{policyName}:\n    get:\n      tags:\n        - Group\n      summary: Get email addresses for members of the policy\n      operationId: GetGroupPolicyEmails\n      parameters:\n        - name: groupName\n          in: path\n          description: Name of group\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of policy\n          required: true\n          schema:\n            type: string\n            enum:\n              - member\n              - admin\n      responses:\n        200:\n          description: Email addresses in the policy\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ArrayOfEmails'\n        404:\n          description: Group could not be found or you do not have the required permissions\n            on this group\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    put:\n      tags:\n        - Group\n      summary: Overwrite email addresses of members of the policy\n      operationId: OverwriteGroupPolicyEmails\n      parameters:\n        - name: groupName\n          in: path\n          description: Name of group\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of policy\n          required: true\n          schema:\n            type: string\n            enum:\n              - member\n              - admin\n      requestBody:\n        description: The list of emails\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/ArrayOfEmails'\n        required: true\n      responses:\n        201:\n          description: Policy successfully updated\n          content: {}\n        404:\n          description: Group does not exist or you are not a member of the policy\n            for the group\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n      x-codegen-request-body-name: emailAddresses\n  /api/groups/v1/{groupName}/{policyName}/{email}:\n    put:\n      tags:\n        - Group\n      summary: Add email to the policy\n      operationId: AddEmailToGroup\n      parameters:\n        - name: groupName\n          in: path\n          description: Name of group\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of policy\n          required: true\n          schema:\n            type: string\n            enum:\n              - member\n              - admin\n        - name: email\n          in: path\n          description: Email address\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Email successfully added\n          content: {}\n        400:\n          description: Email is invalid\n          content: {}\n        403:\n          description: You do not have permission to alter this policy\n          content: {}\n        404:\n          description: Group does not exist, policy does not exist, or subject with\n            specified email was not found\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    delete:\n      tags:\n        - Group\n      summary: Remove email from the policy\n      operationId: RemoveEmailFromGroup\n      parameters:\n        - name: groupName\n          in: path\n          description: Name of group\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of policy\n          required: true\n          schema:\n            type: string\n            enum:\n              - member\n              - admin\n        - name: email\n          in: path\n          description: Email address\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Email successfully removed\n          content: {}\n        403:\n          description: You do not have permission to alter this policy\n          content: {}\n        404:\n          description: Group does not exist or policy does not exist\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/google/v1/petServiceAccount/{project}/{userEmail}:\n    get:\n      tags:\n        - Google\n      summary: gets a key for the user's pet service account, get_pet_private_key\n        action on cloud-extension/google required\n      operationId: getUserPetServiceAccountKey\n      parameters:\n        - name: project\n          in: path\n          description: Google project of the pet\n          required: true\n          schema:\n            type: string\n        - name: userEmail\n          in: path\n          description: User's email address\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: json format key for a pet service account, see https://cloud.google.com/iam/docs/creating-managing-service-account-keys\n          content:\n            application/json:\n              schema:\n                type: string\n        403:\n          description: caller has some access to cloud-extension/google but not to\n            the get_pet_private_key action\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n        404:\n          description: user does not exist or caller does not have any access to cloud-extension/google\n            resource\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/google/v1/user/petServiceAccount/{project}:\n    get:\n      tags:\n        - Google\n      summary: gets the pet service account for the specified user\n      operationId: getPetServiceAccount\n      parameters:\n        - name: project\n          in: path\n          description: Google project of the pet\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: user pet service account\n          content:\n            application/json:\n              schema:\n                type: string\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/google/v1/user/petServiceAccount/key:\n    get:\n      tags:\n        - Google\n      summary: gets a key for an arbitrary pet service account for the user\n      operationId: getArbitraryPetServiceAccountKey\n      responses:\n        200:\n          description: json format key for a pet service account, see https://cloud.google.com/iam/docs/creating-managing-service-account-keys\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/google/v1/user/petServiceAccount/token:\n    post:\n      tags:\n        - Google\n      summary: gets a token for an arbitrary pet service account for the user\n      operationId: getArbitraryPetServiceAccountToken\n      requestBody:\n        description: Scopes for the token\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/ArrayOfScopes'\n        required: true\n      responses:\n        200:\n          description: an access token for the users pet service account\n          content:\n            application/json:\n              schema:\n                type: string\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n      x-codegen-request-body-name: scopes\n  /api/google/v1/user/petServiceAccount/{project}/key:\n    get:\n      tags:\n        - Google\n      summary: gets a key for the user's pet service account\n      operationId: getPetServiceAccountKey\n      parameters:\n        - name: project\n          in: path\n          description: Google project of the pet\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: json format key for a pet service account, see https://cloud.google.com/iam/docs/creating-managing-service-account-keys\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/google/v1/user/petServiceAccount/{project}/key/{keyId}:\n    delete:\n      tags:\n        - Google\n      summary: removes an existing key for the user's pet service account\n      operationId: removePetServiceAccountKey\n      parameters:\n        - name: project\n          in: path\n          description: Google project of the pet\n          required: true\n          schema:\n            type: string\n        - name: keyId\n          in: path\n          description: key ID for the key to remove, private_key_id field of json key\n            from get request\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: user pet service account\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/google/v1/user/petServiceAccount/{project}/token:\n    post:\n      tags:\n        - Google\n      summary: gets a token for the user's pet service account\n      operationId: getPetServiceAccountToken\n      parameters:\n        - name: project\n          in: path\n          description: Google project of the pet\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Scopes for the token\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/ArrayOfScopes'\n        required: true\n      responses:\n        200:\n          description: an access token for the users pet service account\n          content:\n            application/json:\n              schema:\n                type: string\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n      x-codegen-request-body-name: scopes\n  /api/google/v1/user/proxyGroup/{email}:\n    get:\n      tags:\n        - Google\n      summary: gets the proxy group email for the specified user\n      operationId: getProxyGroup\n      parameters:\n        - name: email\n          in: path\n          description: User email whose proxy group to retrieve\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: user proxy group\n          content:\n            application/json:\n              schema:\n                type: string\n        404:\n          description: user not found\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/google/v1/resource/{resourceTypeName}/{resourceId}/{policyName}/sync:\n    get:\n      tags:\n        - Google\n      summary: Gets the synchronization state (last synchronized date and email) for\n        the group.\n      operationId: syncStatus\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of policy to get synchronization state for\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SyncStatus'\n        204:\n          description: Group is not synchronized to Google\n          content: {}\n        404:\n          description: Group not found\n          content: {}\n    post:\n      tags:\n        - Google\n      summary: Synchronize a policy's membership with google group. Once called all\n        further membership changes will by automatically synchronized\n      operationId: syncPolicy\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of policy to synchronize\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Successfully synchronized membership\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SyncReport'\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/resources/v2/{resourceTypeName}:\n    get:\n      tags:\n        - Resources\n      summary: List resources with their roles and action for this resource type accessible to the caller\n      operationId: listResourcesAndPoliciesV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of the resource\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserResourcesResponse'\n    post:\n      tags:\n        - Resources\n      summary: Create a new resource, cannot be used when resource type allows both\n        authorization domains and id reuse\n      operationId: createResourceV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource to create\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The details of the resource\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/CreateResourceRequestV2'\n        required: true\n      responses:\n        201:\n          description: Successfully created resource, returning resource information\n          content: { }\n        204:\n          description: Successfully created resource\n          content: { }\n        400:\n          description: Invalid policies, invalid auth domain, parent specified but not allowed, or resource type allows\n            auth domains and id reuse\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n        403:\n          description: Parent does not exist or user does not have add_child permission on parent\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n        409:\n          description: Resource already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n      x-codegen-request-body-name: resourceCreate\n  /api/resources/v2/{resourceTypeName}/{resourceId}:\n    post:\n      tags:\n        - Resources\n      summary: Create a new resource with default owner policy\n      operationId: createResourceWithDefaultsV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource to create\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource to create, must be unique for all resources of\n            given type\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successfully created resource\n          content: { }\n        409:\n          description: Resource already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    delete:\n      tags:\n        - Resources\n      summary: Delete a resource\n      operationId: deleteResourceV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of the resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of the resource\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successfully deleted resource\n          content: { }\n        400:\n          description: Cannot delete a resource with children. Delete the children first then try again.\n          content: { }\n        403:\n          description: You do not have permission to perform this action on the resource or permissions on the resource's parent\n          content: { }\n        404:\n          description: Resource type does not exist or you are not a member of any\n            policy on the resource\n          content: { }\n  /api/resources/v2/{resourceTypeName}/{resourceId}/actions:\n    get:\n      tags:\n        - Resources\n      summary: List the actions the user has on the given resource\n      operationId: resourceActionsV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: List of actions the user has on the given resource. Empty if\n            the user has no actions or the resource does not exist\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        404:\n          description: Resource type does not exist\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/resources/v2/{resourceTypeName}/{resourceId}/authDomain:\n    get:\n      tags:\n        - Resources\n      summary: List the groups in the Auth Domain for a resource\n      operationId: getAuthDomainV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: List of groups that compose the Auth Domain for this resource.\n            Empty if an Auth Domain has not been set\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        403:\n          description: You do not have permission to perform this action on the resource\n          content: { }\n        404:\n          description: Resource type or resource does not exist or you are not a member\n            of any policy on the resource\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/resources/v2/{resourceTypeName}/{resourceId}/allUsers:\n    get:\n      tags:\n        - Resources\n      summary: List all of the members of a resource\n      operationId: getAllResourceUsersV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: List of users in all policies on this resource\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        403:\n          description: You do not have permission to perform this action on the resource\n          content: { }\n        404:\n          description: Resource type or resource does not exist or you are not a member\n            of any policy on the resource\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/resources/v2/{resourceTypeName}/{resourceId}/policies:\n    get:\n      tags:\n        - Resources\n      summary: List the policies for a resource\n      operationId: listResourcePoliciesV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Policies successfully listed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessPolicyResponseEntryV2'\n        403:\n          description: You do not have permission to perform this action on the resource\n          content: { }\n        404:\n          description: Resource type does not exist or you are not a member of any\n            policy on the resource\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/resources/v2/{resourceTypeName}/{resourceId}/policies/{policyName}:\n    get:\n      tags:\n        - Resources\n      summary: Gets a policy on a resource\n      operationId: getPolicyV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of the policy\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Policy information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessPolicyMembershipV2'\n        403:\n          description: You do not have permission to perform this action on the resource\n          content: { }\n        404:\n          description: Resource type does not exist or you are not a member of any\n            policy on the resource or the policy does not exist\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    put:\n      tags:\n        - Resources\n      summary: Overwrite a policy on a resource\n      operationId: overwritePolicyV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of the policy\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The details of the policy\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/AccessPolicyMembershipV2'\n        required: true\n      responses:\n        201:\n          description: Policy successfully created/updated\n          content: { }\n        403:\n          description: You do not have permission to perform this action on the resource\n          content: { }\n        404:\n          description: Resource type does not exist or you are not a member of any\n            policy on the resource\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n      x-codegen-request-body-name: policyCreate\n    delete:\n      tags:\n        - Resources\n      summary: Deletes a policy on a resource\n      operationId: deletePolicyV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of the policy\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successfully deleted policy\n          content: { }\n        403:\n          description: You do not have permission to perform this action on the resource\n          content: { }\n        404:\n          description: Policy does not exist or you are not a member of any policies on this resource\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/resources/v2/{resourceTypeName}/{resourceId}/policies/{policyName}/memberEmails:\n    put:\n      tags:\n        - Resources\n      summary: Overwrite the membership of a policy\n      operationId: overwritePolicyMembersV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of the policy\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: List of member emails to be on the policy\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/ArrayOfEmails'\n        required: true\n      responses:\n        204:\n          description: Successfully overwrite membership\n          content: { }\n        400:\n          description: email is not found\n          content: { }\n        403:\n          description: You do not have permission to alter this policy\n          content: { }\n        404:\n          description: Resource type does not exist, you are not a member of any policy\n            on the resource, or a member was not found\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n      x-codegen-request-body-name: memberEmails\n  /api/resources/v2/{resourceTypeName}/{resourceId}/policies/{policyName}/memberEmails/{email}:\n    put:\n      tags:\n        - Resources\n      summary: Add a user to a policy\n      operationId: addUserToPolicyV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of the policy\n          required: true\n          schema:\n            type: string\n        - name: email\n          in: path\n          description: Email of user to be added\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successfully added a user to the policy\n          content: { }\n        400:\n          description: email is not found\n          content: { }\n        403:\n          description: You do not have permission to alter this policy\n          content: { }\n        404:\n          description: Resource type does not exist, you are not a member of any policy\n            on the resource, or user was not found\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    delete:\n      tags:\n        - Resources\n      summary: Remove a user from a policy\n      operationId: removeUserFromPolicyV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of the policy\n          required: true\n          schema:\n            type: string\n        - name: email\n          in: path\n          description: Email of user to be removed\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successfully removed a user from the policy\n          content: { }\n        400:\n          description: email is not found\n          content: { }\n        403:\n          description: You do not have permission to alter this policy\n          content: { }\n        404:\n          description: Resource type does not exist, you are not a member of any policy\n            on the resource, or user was not found\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/resources/v2/{resourceTypeName}/{resourceId}/policies/{policyName}/public:\n    get:\n      tags:\n        - Resources\n      summary: Get the public flag on a policy\n      operationId: getPolicyPublicV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of the policy\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: True if the policy is public, false if the policy is private\n          content:\n            application/json:\n              schema:\n                type: boolean\n        403:\n          description: You do not have permission to read this policy\n          content: { }\n        404:\n          description: Resource type, resource, or policy do not exist\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    put:\n      tags:\n        - Resources\n      summary: Set the public flag on a policy\n      operationId: setPolicyPublicV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource\n          required: true\n          schema:\n            type: string\n        - name: policyName\n          in: path\n          description: Name of the policy\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: true to make the policy public, false to make it private\n        content:\n          'application/json':\n            schema:\n              type: boolean\n        required: true\n      responses:\n        204:\n          description: Successfully added a user to the policy\n          content: { }\n        403:\n          description: You do not have permission to alter this policy\n          content: { }\n        404:\n          description: Resource type does not exist, you are not a member of any policy\n            on the resource, or user is not permitted to set the public flag on resources\n            of this type\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n      x-codegen-request-body-name: public\n  /api/resources/v2/{resourceTypeName}/{resourceId}/roles:\n    get:\n      tags:\n        - Resources\n      summary: Query for the list of roles that the requesting user has on the resource\n      operationId: resourceRolesV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource to query\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource to query\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The list of roles that the requesting user has on the resource.\n            Empty if resource does not exist or user has no role on that resource.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        404:\n          description: Resource type does not exist\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/resources/v2/{resourceTypeName}/{resourceId}/action/{action}:\n    get:\n      tags:\n        - Resources\n      summary: Query if requesting user may perform the action\n      operationId: resourcePermissionV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource to query\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource to query\n          required: true\n          schema:\n            type: string\n        - name: action\n          in: path\n          description: Action to perform\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: true if the user may perform the action, false if they may\n            not or the resource does not exist\n          content:\n            application/json:\n              schema:\n                type: boolean\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/resources/v2/{resourceTypeName}/{resourceId}/action/{action}/userEmail/{userEmail}:\n    get:\n      tags:\n        - Resources\n      summary: Query if the given user may perform the action\n      operationId: resourceActionV2\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource to query\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource to query\n          required: true\n          schema:\n            type: string\n        - name: action\n          in: path\n          description: Action to perform\n          required: true\n          schema:\n            type: string\n        - name: userEmail\n          in: path\n          description: User Email address to check\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: true if the user may perform the action, false if they may\n            not or the resource does not exist\n          content:\n            application/json:\n              schema:\n                type: boolean\n        403:\n          description: You do not have permission to check user action permission\n          content: { }\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/resources/v2/{resourceTypeName}/{resourceId}/parent:\n    get:\n      tags:\n        - Resources\n      summary: Get the parent of a resource if one exists\n      operationId: getResourceParent\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource to query\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource to query\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Id and type of parent resource\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FullyQualifiedResourceId'\n        403:\n          description: You do not have permission to get the parent for this resource\n          content: {}\n        404:\n          description: You do not have access to this resource, it does not exist, or it does not have a parent resource\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    put:\n      tags:\n        - Resources\n      summary: Set the parent of a resource\n      operationId: setResourceParent\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of child resource\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of child resource\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The details of the new parent resource\n        content:\n          'application/json':\n            schema:\n              $ref: '#/components/schemas/FullyQualifiedResourceId'\n      responses:\n        204:\n          description: Resource parent successfully set\n          content: {}\n        400:\n          description: Child resource has an auth domain or new parent would introduce cyclical resource hierarchy\n          content: {}\n        403:\n          description: You do not have permission to set the parent for the child resource, to remove the child of the current parent, to add a child to the new parent, or the new parent does not exist\n          content: {}\n        404:\n          description: You do not have access to this resource, or it does not exist\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    delete:\n      tags:\n        - Resources\n      summary: Delete the parent of a resource\n      operationId: deleteResourceParent\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource to remove parent from\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource to remove parent from\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Resource parent successfully removed\n          content: {}\n        403:\n          description: You do not have permission to set the parent for this resource or to remove this (child) resource from its current parent\n          content: {}\n        404:\n          description: You do not have access to this resource, it does not exist, or it does not currently have a parent resource\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/resources/v2/{resourceTypeName}/{resourceId}/children:\n    get:\n      tags:\n        - Resources\n      summary: List all the direct children of a resource\n      operationId: listResourceChildren\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Type of resource to query\n          required: true\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Id of resource to query\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Ids and types of child resources\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FullyQualifiedResourceId'\n        403:\n          description: You do not have permission to list the children of this resource\n          content: {}\n        404:\n          description: You do not have access to this resource or it does not exist\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/users/v1/{email}:\n    get:\n      tags:\n        - Users\n      summary: Query for the user's subject IDs\n      operationId: getUserIds\n      parameters:\n        - name: email\n          in: path\n          description: Email of the user\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: user details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserIdInfo'\n        204:\n          description: the email is recognized as a group, not a user\n          content: {}\n        404:\n          description: User not found\n          content: {}\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /api/users/v1/invite/{inviteeEmail}:\n    post:\n      tags:\n        - Users\n      summary: create current user in the system using login credentials\n      operationId: inviteUser\n      parameters:\n        - name: inviteeEmail\n          in: path\n          description: email for the user you want to invite\n          required: true\n          schema:\n            type: string\n      responses:\n        201:\n          description: user successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStatusDetails'\n        409:\n          description: user already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /register/user/v1:\n    get:\n      tags:\n        - Users\n      summary: gets the registration status of the logged in user\n      operationId: getUserStatus\n      parameters:\n        - name: userDetailsOnly\n          in: query\n          description: when set to true does not check the various enabled status of\n            the user\n          schema:\n            type: string\n      responses:\n        200:\n          description: user exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStatus'\n        404:\n          description: user not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    post:\n      tags:\n        - Users\n      summary: create current user in the system using login credentials\n      operationId: createUser\n      responses:\n        201:\n          description: user successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStatus'\n        409:\n          description: user already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /register/user/v2/self:\n    post:\n      tags:\n        - Users\n      summary: create current user in the system using login credentials\n      operationId: createUserV2\n      responses:\n        201:\n          description: user successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStatus'\n        409:\n          description: user already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /register/user/v2/self/info:\n    get:\n      tags:\n        - Users\n      summary: gets the registration status info of the logged in user\n      operationId: getUserStatusInfo\n      responses:\n        200:\n          description: user exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStatusInfo'\n        404:\n          description: user not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /register/user/v2/self/diagnostics:\n    get:\n      tags:\n        - Users\n      summary: gets the various enabled statuses of the logged in user\n      operationId: getUserStatusDiagnostics\n      responses:\n        200:\n          description: user exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStatusDiagnostics'\n        404:\n          description: user not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /status:\n    get:\n      tags:\n        - Status\n      summary: gets system status\n      operationId: getSystemStatus\n      responses:\n        200:\n          description: system ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemStatus'\n        500:\n          description: one or more subsystems down\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemStatus'\n  /register/user/v1/termsofservice:\n    post:\n      tags:\n        - Terms of Service\n      summary: accepts terms of service\n      operationId: acceptTermsOfService\n      requestBody:\n        description: Must equal the (double-quoted) url of the Terra Terms of Service\n        content:\n          'application/json':\n            schema:\n              type: string\n        required: true\n      responses:\n        200:\n          description: terms of service successfully accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStatus'\n        404:\n          description: user cannot be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n    delete:\n      tags:\n        - Terms of Service\n      summary: rejects terms of service\n      operationId: rejectTermsOfService\n      responses:\n        200:\n          description: terms of service successfully rejected\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStatus'\n        404:\n          description: user cannot be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorReport'\n  /tos/text:\n    get:\n      tags:\n        - Terms of Service\n      summary: gets terms of service text\n      operationId: getTermsOfServiceText\n      responses:\n        200:\n          description: success\n          content:\n            text/plain:\n              schema:\n                type: string\n  /version:\n    get:\n      tags:\n        - Version\n      summary: Returns the currently deployed version of this service.\n      operationId: samVersion\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SamVersion'\ncomponents:\n  schemas:\n    AccessPolicyResponseEntry:\n      required:\n        - policy\n        - policyName\n        - email\n      type: object\n      properties:\n        policyName:\n          type: string\n        policy:\n          $ref: '#/components/schemas/AccessPolicyMembership'\n        email:\n          type: string\n      description: \"\"\n    AccessPolicyResponseEntryV2:\n      required:\n        - policy\n        - policyName\n        - email\n      type: object\n      properties:\n        policyName:\n          type: string\n        policy:\n          $ref: '#/components/schemas/AccessPolicyMembershipV2'\n        email:\n          type: string\n      description: \"\"\n    AccessPolicyMembership:\n      required:\n        - actions\n        - memberEmails\n        - roles\n      type: object\n      properties:\n        memberEmails:\n          type: array\n          items:\n            type: string\n        actions:\n          type: array\n          items:\n            type: string\n        roles:\n          type: array\n          items:\n            type: string\n      description: \"\"\n    AccessPolicyMembershipV2:\n      required:\n        - actions\n        - memberEmails\n        - roles\n      type: object\n      properties:\n        memberEmails:\n          type: array\n          items:\n            type: string\n        memberPolicies:\n          type: array\n          items:\n            $ref: '#/components/schemas/PolicyIdentifiers'\n        actions:\n          type: array\n          items:\n            type: string\n        roles:\n          type: array\n          items:\n            type: string\n        descendantPermissions:\n          type: array\n          items:\n            $ref: '#/components/schemas/AccessPolicyDescendantPermissions'\n      description: \"\"\n    AccessPolicyDescendantPermissions:\n      required:\n        - resourceType\n        - actions\n        - roles\n      type: object\n      properties:\n        resourceType:\n          type: string\n          description: resource type of descendant resources that these roles and actions apply to\n        actions:\n          type: array\n          description: actions granted on descendant resources of this type\n          items:\n            type: string\n        roles:\n          type: array\n          description: roles granted on descendant resources of this type\n          items:\n            type: string\n    ArrayOfEmails:\n      type: array\n      description: An array of email addresses\n      example:\n        - person@company.com\n        - group_name@company.com\n        - foo@bar.com\n      items:\n        type: string\n    ArrayOfScopes:\n      type: array\n      description: An array of scopes\n      example:\n        - https://www.googleapis.com/auth/userinfo.email\n        - https://www.googleapis.com/auth/userinfo.profile\n      items:\n        type: string\n    CreateResourceRequest:\n      required:\n        - policies\n        - resourceId\n      type: object\n      properties:\n        resourceId:\n          type: string\n          description: id of the resource to create\n        policies:\n          type: object\n          description: map of initial policies to create, key is policy name\n          additionalProperties:\n            $ref: '#/components/schemas/AccessPolicyMembership'\n        authDomain:\n          type: array\n          items:\n            type: string\n        returnResource:\n          type: boolean\n          description: return created resource information with 201 response code\n          default: false\n      description: information to create a resource\n    CreateResourceRequestV2:\n      required:\n        - policies\n        - resourceId\n      type: object\n      properties:\n        resourceId:\n          type: string\n          description: id of the resource to create\n        policies:\n          type: object\n          description: map of initial policies to create, key is policy name\n          additionalProperties:\n            $ref: '#/components/schemas/AccessPolicyMembershipV2'\n        authDomain:\n          type: array\n          items:\n            type: string\n        returnResource:\n          type: boolean\n          description: return created resource information with 201 response code\n          default: false\n        parent:\n          $ref: '#/components/schemas/FullyQualifiedResourceId'\n      description: information to create a resource\n    Enabled:\n      required:\n        - allUsersGroup\n        - google\n        - ldap\n      type: object\n      properties:\n        ldap:\n          type: boolean\n          description: true if the user is enabled in ldap\n        allUsersGroup:\n          type: boolean\n          description: true if the user is in the all users group\n        google:\n          type: boolean\n          description: true if the user is in their proxy group\n      description: the status of the user's account\n    ErrorReport:\n      required:\n        - causes\n        - message\n        - source\n        - stackTrace\n      type: object\n      properties:\n        source:\n          type: string\n          description: service causing error\n        message:\n          type: string\n          description: what went wrong\n        exceptionClass:\n          type: string\n          description: class of exception thrown\n        statusCode:\n          type: integer\n          description: HTTP status code\n        causes:\n          type: array\n          description: errors triggering this one\n          items:\n            $ref: '#/components/schemas/ErrorReport'\n        stackTrace:\n          type: array\n          description: stack trace\n          items:\n            $ref: '#/components/schemas/StackTraceElement'\n      description: \"\"\n    FullyQualifiedResourceId:\n      required:\n        - resourceTypeName\n        - resourceId\n      type: object\n      properties:\n        resourceTypeName:\n          type: string\n          description: The type of the resource\n        resourceId:\n          type: string\n          description: The id of the resource\n      description: type and id of a resource\n    ManagedGroupMembershipEntry:\n      required:\n        - groupEmail\n        - groupName\n        - role\n      type: object\n      properties:\n        groupName:\n          type: string\n          description: The name of the managed group\n        role:\n          type: string\n          description: User's role in the group\n        groupEmail:\n          type: string\n          description: The email address associated with the group\n      description: specification of a managed group with an access policy and the\n        email associated with the managed group\n    PolicyIdentifiers:\n      required:\n        - policyName\n        - policyEmail\n        - resourceTypeName\n        - resourceId\n      type: object\n      properties:\n        policyName:\n          type: string\n          description: The name of the policy\n        policyEmail:\n          type: string\n          description: The email of the policy\n        resourceTypeName:\n          type: string\n          description: The type of the resource\n        resourceId:\n          type: string\n          description: The id of the resource\n    ResourceAndAccessPolicy:\n      required:\n        - accessPolicyName\n        - resourceId\n      type: object\n      properties:\n        resourceId:\n          type: string\n          description: The id of the resource\n        accessPolicyName:\n          type: string\n          description: User's policy for the resource\n        authDomainGroups:\n          type: array\n          items:\n            type: string\n        missingAuthDomainGroups:\n          type: array\n          items:\n            type: string\n        public:\n          type: boolean\n          description: the policy is public when this is true\n      description: specification of a resource with an access policy\n    ResourceRole:\n      required:\n        - actions\n        - roleName\n      type: object\n      properties:\n        roleName:\n          type: string\n          description: The name of the role\n        actions:\n          type: array\n          description: List of actions that can be performed by members of this role\n          items:\n            type: string\n      description: specification of a role for a resource\n    ResourceType:\n      required:\n        - actions\n        - name\n        - ownerRoleName\n        - roles\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the resource type\n        actions:\n          type: array\n          description: List of actions that can be performed on a resource of this\n            type\n          items:\n            type: string\n        roles:\n          type: array\n          description: List of roles that may exist on a resource of this type\n          items:\n            $ref: '#/components/schemas/ResourceRole'\n        ownerRoleName:\n          type: string\n          description: The name of the role that can perform administrative functions\n            on a resource of this type\n      description: specification of a type of resource\n    RolesAndActions:\n      required:\n        - actions\n        - roles\n      type: object\n      properties:\n        roles:\n          type: array\n          items:\n            type: string\n        actions:\n          type: array\n          items:\n            type: string\n    SamVersion:\n      type: object\n      properties:\n        version:\n          type: string\n    StackTraceElement:\n      required:\n        - className\n        - fileName\n        - lineNumber\n        - methodName\n      type: object\n      properties:\n        className:\n          type: string\n          description: class name\n        methodName:\n          type: string\n          description: method name\n        fileName:\n          type: string\n          description: source file name\n        lineNumber:\n          type: integer\n          description: line number\n      description: \"\"\n    SubsystemStatus:\n      type: object\n      properties:\n        ok:\n          type: boolean\n          description: whether this system is up or down from Sam's point of view\n        messages:\n          type: array\n          items:\n            type: string\n      description: status of a subsystem Sam depends on\n    SyncReport:\n      type: object\n      additionalProperties:\n        type: array\n        items:\n          type: object\n          properties:\n            operation:\n              type: string\n            email:\n              type: string\n            errorReport:\n              $ref: '#/components/schemas/ErrorReport'\n      description: results of an attempt to synchronize a group\n    SyncStatus:\n      required:\n        - email\n        - lastSyncDate\n      type: object\n      properties:\n        lastSyncDate:\n          type: string\n        email:\n          type: string\n      description: status of group synchronization\n    SystemStatus:\n      required:\n        - ok\n        - systems\n      type: object\n      properties:\n        ok:\n          type: boolean\n          description: true if everything is ok, false if anything is amiss\n        systems:\n          type: object\n          properties: {}\n          description: Map[String, SubsystemStatus]\n      description: status of each aubsystem Sam depends on\n    UserIdInfo:\n      required:\n        - userEmail\n        - userSubjectId\n      type: object\n      properties:\n        userSubjectId:\n          type: string\n          description: user id\n        userEmail:\n          type: string\n          description: user email\n        googleSubjectId:\n          type: string\n          description: google subject id\n      description: \"\"\n    UserInfo:\n      required:\n        - userEmail\n        - userSubjectId\n      type: object\n      properties:\n        userSubjectId:\n          type: string\n          description: user id\n        userEmail:\n          type: string\n          description: user email\n      description: the user's details\n    UserResourcesResponse:\n      required:\n        - resourceId\n        - direct\n        - inherited\n        - public\n        - authDomainGroups\n        - missingAuthDomainGroups\n      type: object\n      properties:\n        resourceId:\n          type: string\n          description: The id of the resource\n        direct:\n          description: roles and actions assigned (via membership or public) by a policy directly on this resource\n          allOf:\n            - $ref: '#/components/schemas/RolesAndActions'\n        inherited:\n          description: roles and actions assigned (via membership or public) by a policy on an ancestor of this resource\n          allOf:\n            - $ref: '#/components/schemas/RolesAndActions'\n        public:\n          description: roles and actions on public policies of this resource or an ancestor of this resource\n          allOf:\n            - $ref: '#/components/schemas/RolesAndActions'\n        authDomainGroups:\n          type: array\n          items:\n            type: string\n        missingAuthDomainGroups:\n          type: array\n          items:\n            type: string\n      description: specification of a resource with an access policy\n    UserStatus:\n      required:\n        - enabled\n        - userInfo\n      type: object\n      properties:\n        userInfo:\n          $ref: '#/components/schemas/UserInfo'\n        enabled:\n          $ref: '#/components/schemas/Enabled'\n      description: \"\"\n    UserStatusInfo:\n      required:\n        - enabled\n        - userEmail\n        - userSubjectId\n      type: object\n      properties:\n        userSubjectId:\n          type: string\n          description: user id\n        userEmail:\n          type: string\n          description: user email\n        enabled:\n          type: boolean\n          description: true if the user is enabled in ldap\n      description: \"\"\n    UserStatusDetails:\n      required:\n        - userEmail\n        - userSubjectId\n      type: object\n      properties:\n        userSubjectId:\n          type: string\n          description: user id\n        userEmail:\n          type: string\n          description: user email\n      description: \"\"\n    UserStatusDiagnostics:\n      required:\n        - enabled\n        - inAllUsersGroup\n        - inGoogleProxyGroup\n      type: object\n      properties:\n        enabled:\n          type: boolean\n          description: true if the user is enabled in ldap\n        inAllUsersGroup:\n          type: boolean\n          description: true if the user is in the all users group\n        inGoogleProxyGroup:\n          type: boolean\n          description: true if the user is in their proxy group\n      description: \"\"\n  securitySchemes:\n    googleoauth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            openid: open id authorization\n            email: email authorization\n            profile: profile authorization\n    oidc:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: /oauth2/authorize\n          tokenUrl: /oauth2/token\n          scopes:\n            openid: open id authorization\n            email: email authorization\n            profile: profile authorization\n",
			"canonicalURL": "/github.com/broadinstitute/sam@a27bc5c496e39ee673383bbd116d269c65e3d9e9/-/blob/src/main/resources/swagger/api-docs.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/broadinstitute/sam/blob/a27bc5c496e39ee673383bbd116d269c65e3d9e9/src/main/resources/swagger/api-docs.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/tos/text\": get: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"oauth2 security",
		"unsupported content types"
	]
}