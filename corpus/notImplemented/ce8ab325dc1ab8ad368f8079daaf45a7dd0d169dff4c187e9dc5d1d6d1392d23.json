{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Kong/insomnia"
		},
		"file": {
			"name": "cloud-api.yaml",
			"size": 0,
			"path": "packages/openapi-2-kong/src/kubernetes/fixtures/cloud-api.yaml",
			"byteSize": 7492,
			"content": "openapi: 3.0.2\n##############################\n## API Information Document ##\n##############################\ninfo:\n  # Define the Default Ingress metadata and annotations for Kubernetes\n  x-kubernetes-ingress-metadata:\n    name: my cloud-api\n    annotations:\n      cert-manager.io/cluster-issuer: letsencrypt\n      external-dns.alpha.kubernetes.io/hostname: myserver\n      konghq.com/strip-path: 'true'\n  title: my Cloud API\n  version: '1.0.0'\n  contact:\n    name: myserver Support\n    url: https://myserver/support\n    email: support@myserver\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n###################################\n## Kong Plugins for all requests ##\n###################################\n# OpenID Connect Plugin for Kong API Authorization with Keycloak\nx-kong-plugin-openid-connect:\n  name: openid-connect\n  enabled: true\n  config:\n    issuer: \u003ckeycloak-realm-auth-endpoint\u003e\n    client_id:\n      - \u003cclient-id\u003e\n    client_secret:\n      - \u003cclient-secret\u003e\n    auth_methods: ['authorization_code', 'bearer', 'session', 'refresh_token']\n    session_cookie_name: 'cookie-name'\n    refresh_token_param_name: 'Offline-Token'\n    scopes: ['openid', 'profile', 'email']\n    upstream_user_info_header: 'x-userinfo'\n    upstream_access_token_header: 'access-token-name'\n# Enable HTTPS redirect to disable HTTP access for the API server\nx-kong-plugin-https-redirect:\n  name: pre-function\n  config:\n    functions:\n      - |\n        local scheme = kong.request.get_scheme()\n        if scheme == \"http\" then\n          local host = kong.request.get_host()\n          local query = kong.request.get_path_with_query()\n          local url = \"https://\" .. host ..query\n          kong.response.set_header(\"Location\",url)\n          return kong.response.exit(302,url)\n        end\n#############\n## Servers ##\n#############\nservers:\n  - url: https://myserver/v1\n    description: The non-production API Server for FRED Studio\n    x-kubernetes-tls:\n      - hosts:\n          - myserver\n        secretName: myserver-tls\n################\n## Components ##\n################\ncomponents:\n  # Security Schemes\n  securitySchemes:\n    StudioOIDC:\n      type: openIdConnect\n      openIdConnectUrl: \u003cwell-known-config\u003e\n      ## Required Scopes defined at the Operation Level ##\n  schemas:\n    # define schemas here for components\n    # Schema for error response body\n    Error:\n      type: object\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n      required:\n        - code\n        - message\n    #############################\n    ## Environment API Schemas ##\n    #############################\n    Quotas:\n      type: object\n      properties:\n        quotas:\n          type: object\n        runningNodes:\n          type: object\n        queuedBatches:\n          type: object\n    #######################\n    ## Batch API Schemas ##\n    #######################\n    # Model Upload URL Request Schema\n    BatchModelUploadRequest:\n      type: object\n      properties:\n        modelName:\n          type: string\n    # Model Upload URL Response Schema\n    BatchModelUploadResponse:\n      type: object\n      properties:\n        url:\n          type: string\n    # Batch Submit Request Schema\n    BatchSubmitRequest:\n      type: object\n      properties:\n        batchGuid:\n          type: string\n        computeSize:\n          type: string\n        containerLogLevel:\n          type: string\n        killTime:\n          type: integer\n        cliCommand:\n          type: string\n        batchConfig:\n          type: object\n    # Batch Submit Response Schema\n    BatchSubmitResponse:\n      type: object\n      properties:\n        message:\n          type: string\n    # Batch Get Logs Request Schema\n    BatchGetLogsRequest:\n      type: object\n      properties:\n        batchGuid:\n          type: string\n        limit:\n          type: string\n        interval:\n          type: string\n    # Batch Get Logs Response Schema\n    BatchGetLogsResponse:\n      type: object\n      properties:\n        # results is an array of objects containing the log entries\n        results:\n          type: array\n          items:\n            type: object\n    # Batch Get Results Request Schema\n    BatchGetResultsRequest:\n      type: object\n      properties:\n        fredResultsKey:\n          type: string\n    # Batch Get Results Response Schema\n    BatchGetResultsResponse:\n      type: object\n      properties:\n        url:\n          type: string\n    # Batch Get Status Request Schema\n    BatchGetStatusRequest:\n      type: object\n      properties:\n        batchGuid:\n          type: string\n    # Batch Get Status Response Schema\n    BatchGetStatusResponse:\n      type: object # Not entirely sure what all is being returned here, but I know it's an object!\n    # Batch Validate Config Request Schema\n    BatchValidateConfigRequest:\n      type: object\n      properties:\n        batchConfig:\n          type: object\n    # Batch Validate Config Response Schema\n    BatchValidateConfigResponse:\n      type: object\n      properties:\n        message:\n          type: string\n  # define query parameters here\n  # parameters: # No Parameters defined yet\n  # construct default responses here\n  responses:\n    NotFound:\n      description: The specified resource was not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    BadRequest:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n##############################\n## Paths and API Operations ##\n##############################\npaths:\n  ####################\n  ## Root API Paths ##\n  ####################\n  '/offline-portal':\n    x-kong-plugin-aws-lambda:\n      name: aws-lambda\n      config:\n        aws_key: \u003ciam-lambda-user-accesskey\u003e\n        aws_secret: \u003ciam-lambda-user-secretkey\u003e\n        aws_region: us-east-1\n        function_name: \u003coffline-token-function\u003e\n        timeout: 60000\n        keepalive: 60000\n        port: 443\n        forward_request_headers: true\n    get:\n      operationId: getOfflineToken\n      description: Returns an Offline Token to be consumed by the myserver CLI\n      security:\n        - StudioOIDC:\n            # An array of required scopes for the Operation\n            - offline_access # This is created through Keycloak to enforce different levels of authorization (Scope Defined)\n      responses:\n        '200':\n          description: Offline-Token Portal\n  '/user-info':\n    x-kong-plugin-aws-lambda:\n      name: aws-lambda\n      config:\n        aws_key: \u003ciam-lambda-user-accesskey\u003e\n        aws_secret: \u003ciam-lambda-user-secretkey\u003e\n        aws_region: us-east-1\n        function_name: \u003cuser-info-function\u003e\n        timeout: 60000\n        keepalive: 60000\n        port: 443\n        forward_request_headers: true\n    get:\n      description: myserver API User-Info\n      operationId: getUserInfo\n      summary: Returns the User Info from the x-userinfo header forwarded upstream by Kong\n      security:\n        - StudioOIDC:\n            # an array of scopes required to perform the operation\n            - fred_read # This is created through Keycloak to enforce different levels of authorization (Scope not yet defined)\n      responses:\n        '200':\n          description: myserver API User Profile\n",
			"canonicalURL": "/github.com/Kong/insomnia@bbceb6097c855f93f93b69c85af680d85ae0ac57/-/blob/packages/openapi-2-kong/src/kubernetes/fixtures/cloud-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Kong/insomnia/blob/bbceb6097c855f93f93b69c85af680d85ae0ac57/packages/openapi-2-kong/src/kubernetes/fixtures/cloud-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/offline-portal\": get: security: security \"StudioOIDC\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}