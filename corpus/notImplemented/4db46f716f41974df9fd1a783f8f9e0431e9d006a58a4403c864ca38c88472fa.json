{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/swissfintechinnovations/common-API"
		},
		"file": {
			"name": "OrderPlacement.yaml",
			"size": 0,
			"path": "OrderPlacement.yaml",
			"byteSize": 27078,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.2.0\n  title: Order Placement\n  description: 'This API is used to place orders and check on the order status.'\n  contact:\n    email: wealth@common-api.ch\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html' \n\nservers:\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/OpenWealthAPI/SecurityTrading/1.2.0\n\n    \npaths:\n  /orders:\n    parameters:\n     - $ref: '#/components/parameters/correlation_in_header'\n    post:\n      summary: Posts a new order.\n      description: Posts a new order.\n      operationId: postOrder\n      tags:\n        - orderplacement\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/order'\n      responses:\n        '201':\n          description: Order placed successfully.\n          headers:\n            X-Correlation-ID:\n              $ref: '#/components/headers/X-Correlation-ID'\n        '400':\n          $ref: '#/components/responses/standard400'\n        '401':\n          $ref: '#/components/responses/standard401'\n        '403':\n          $ref: '#/components/responses/standard403'\n        '404':\n          $ref: '#/components/responses/standard404'\n        '405':\n          $ref: '#/components/responses/standard405'\n        '500':\n          $ref: '#/components/responses/standard500'\n        '501':\n          $ref: '#/components/responses/standard501'\n        '503':\n          $ref: '#/components/responses/standard503'\n    get:\n      summary: Returns a list of open security orders.\n      description: Returns all open orders to which the user of the API has access to. Paging is done based on the completeOrder object, i.e. if limit is set to 1, then 1 completeOrder will be returned per page.\n      operationId: getOrders\n      tags:\n        - orderstatus\n      parameters:\n        - $ref: '#/components/parameters/cursor'\n        - $ref: '#/components/parameters/limit'\n      responses:\n        '200':\n          description: Order list.\n          headers:\n            X-Correlation-ID:\n              $ref: '#/components/headers/X-Correlation-ID'\n            nextCursor:\n              $ref: '#/components/headers/nextCursor'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/completeOrder'\n        '400':\n          $ref: '#/components/responses/standard400'\n        '401':\n          $ref: '#/components/responses/standard401'\n        '403':\n          $ref: '#/components/responses/standard403'\n        '404':\n          $ref: '#/components/responses/standard404'\n        '405':\n          $ref: '#/components/responses/standard405'\n        '500':\n          $ref: '#/components/responses/standard500'\n        '501':\n          $ref: '#/components/responses/standard501'\n        '503':\n          $ref: '#/components/responses/standard503'\n\n  /orders/{orderId}:\n    parameters:\n      - name: orderId\n        in: path\n        required: true\n        schema:\n          type: string\n          description: The security order id. This Id corresponds with the masterReference.\n      - $ref: '#/components/parameters/correlation_in_header'\n    get:\n      summary: Returns a single security order.\n      description: Returns a specific security order.\n      operationId: getOrderByOrderId\n      tags:\n        - orderstatus\n      responses:\n        '200':\n          description: Order list.\n          headers:\n            X-Correlation-ID:\n              $ref: '#/components/headers/X-Correlation-ID'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/completeOrder'\n        '400':\n          $ref: '#/components/responses/standard400'\n        '401':\n          $ref: '#/components/responses/standard401'\n        '403':\n          $ref: '#/components/responses/standard403'\n        '404':\n          $ref: '#/components/responses/standard404'\n        '405':\n          $ref: '#/components/responses/standard405'\n        '500':\n          $ref: '#/components/responses/standard500'\n        '501':\n          $ref: '#/components/responses/standard501'\n        '503':\n          $ref: '#/components/responses/standard503'\n\n    delete:\n      summary: Cancellation of a specific order.\n      description: Returns a specific security order.\n      operationId: deleteOrderByOrderId\n      tags:\n        - orderplacement\n      responses:\n        '200': \n          description: Order successfully cancelled.\n          headers:\n            X-Correlation-ID:\n              $ref: '#/components/headers/X-Correlation-ID'\n        '400':\n          $ref: '#/components/responses/standard400'\n        '401':\n          $ref: '#/components/responses/standard401'\n        '403':\n          $ref: '#/components/responses/standard403'\n        '404':\n          $ref: '#/components/responses/standard404'\n        '405':\n          $ref: '#/components/responses/standard405'\n        '500':\n          $ref: '#/components/responses/standard500'\n        '501':\n          $ref: '#/components/responses/standard501'\n        '503':\n          $ref: '#/components/responses/standard503'\n          \ncomponents:\n\n  ###############\n  # Parameters  #\n  ###############\n\n  parameters:\n    limit: \n      name: limit\n      in: query\n      description: Maximum number of items to return.\n      required: false\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n#        maximum: 100\n#        default: 20\n    cursor:\n      name: cursor\n      in: query\n      description: An opaque string value used for pagination\n      required: false\n      schema:\n        type: string\n    correlation_in_header:\n      in: header\n      name: X-Correlation-ID\n      description: Unique ID (defined by the caller) which will be reflected back in the response.\n      required: true\n      schema:\n        type: string\n\n  ###############\n  # Headers     #\n  ###############\n\n  headers:\n  \n    X-Correlation-ID:\n      description: Client defined ID from request to correlates HTTP requests between a client and server.\n      schema:\n        type: string\n        example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n    nextCursor:\n      description: An opaque string value, or an empty string if there are no more results. \n      required: false\n      schema:\n        type: string\n        \n        \n\n  ######################\n  # Schemas\n  ######################\n\n  schemas:\n\n    tradingAccount:\n      type: object\n      properties:\n        accountIdentification:\n          type: string\n          maxLength: 35\n          example: '876543219'\n          description: Unique and unambiguous identification for the account\n        accountType: \n          type: string\n          description: Indicatates the type of the account.\n          example: 'safekeepingAccount'\n          enum: \n          - cashAccount\n          - safekeepingAccount\n          - other\n\n    order:\n      required:\n      - masterReference\n      - bulkOrderDetails\n      - allocations\n      type: object\n      properties:\n        masterReference:\n          type: string\n          example: '123123123'\n          description: Unique and unambiguous identifier for a group of individual orders, as assigned by the instructing party. This identifier links the individual orders together.\n        bulkOrderDetails:\n          $ref: '#/components/schemas/bulkOrderDetails'\n        allocations:\n          type: array\n          items:\n            $ref: '#/components/schemas/allocation'\n\n    bulkOrderDetails:\n      required:\n      - side\n      - orderQuantity\n      - instrument\n      - currency\n      - executionType\n      type: object\n      properties:\n        side:\n          type: string\n          description: Side taken by a party on an order.\n          example: 'buy'\n          enum:\n          - buy\n          - sell\n          - subscription\n          - redemption\n        orderQuantity:\n          $ref: '#/components/schemas/orderQuantity'\n        displayQuantity:\n          description: Quantity of the order displayed.\n          type: object\n          properties:\n            amount:\n              type: string\n              pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n              maxLength: 22\n              example: \"300\"\n            currency:\n              $ref: '#/components/schemas/currency'\n            type: \n              type: string\n              description: Type of the amount\n              example: 'unitsNumber'\n              enum:\n              - unitsNumber\n              - nominal\n        financialInstrument:\n          $ref: '#/components/schemas/financialInstrumentIdentification'\n        placeOfTrade:\n          $ref: '#/components/schemas/placeOfTrade'\n        currency:\n          $ref: '#/components/schemas/currency'\n        executionType:\n          type: string\n          description: Type of the execution of the order\n          example: 'limit'\n          enum:\n          - market\n          - limit\n          - stop\n          - stopLimit\n        limitPrice:\n          type: string\n          pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n          maxLength: 22\n          description: Limit price per unit of quantity (e.g. per share)\n          example: \"12.50\"\n        stopPrice:\n          type: string\n          pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n          maxLength: 22\n          description: Stop price per unit of quantity (e.g. per share)\n          example: \"10.05\"\n        timeInForce:\n          type: string\n          description: Specifies how long the order remains in effect. Absence of this field is interpreted as DAY.\n          example: 'day'\n          enum:\n          - day\n          - goodTillCancel\n          - atTheOpening\n          - immediateOrCancel\n          - fillOrKill\n          - goodTillCrossing\n          - goodTillDate\n          - atTheClose\n          - goodThroughCrossing\n          - atCrossing\n          - goodForTime\n          - goodForAuction\n          - goodForMonth\n        expiryDateTime:\n          type: string\n          format: date-time\n          description: Time/Date of order expiration\n\n    orderQuantity:\n          type: object\n          properties:\n            amount:\n              type: string\n              pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n              maxLength: 22\n              example: \"300\"\n            currency:\n              $ref: '#/components/schemas/currency'\n            type: \n              type: string\n              description: Type of the amount\n              example: 'unitsNumber'\n              enum:\n              - unitsNumber\n              - nominal\n              - grossAmount\n              - netAmount\n\n    placeOfTrade:\n          type: object\n          description: Market in which a trade transaction is to be or has been executed.\n          properties:\n            marketIdentificationCode:\n              type: string\n              maxLength: 4\n              description: Market Identifier Code. Identification of a financial market, as stipulated in the norm ISOMarket Identifier Code. Identification of a financial market, as stipulated in the norm ISO 10383 \"Codes for exchanges and market identifications\".\n              example: 'XSWX'\n            marketDescription:\n              type: string\n              description: Description of the market when no Market Identification Code is available.\n              example: 'OTC'\n\n    financialInstrumentIdentification:\n          type: object\n          required: \n            - identification\n            - type\n          properties:\n            identification:\n              type: string\n              example: 'CH0012005267'\n              description: Instrument identification\n            type:\n              type: string\n              example: 'isin'\n              description: Type of the instrument identification\n              enum: \n              - isin\n              - sedol\n              - cusip\n              - ric\n              - tickerSymbol\n              - bloomberg\n              - cta\n              - quick\n              - wertpapier\n              - dutch\n              - valoren\n              - sicovam\n              - belgian\n              - common\n              - otherProprietaryIdentification\n\n    allocation:\n      type: object\n      required: \n        - accounts\n        - allocationIdentification\n        - amount\n        - physicalDeliveryIndicator\n      properties:\n        accounts:\n          type: array\n          description: Indicates the affected cashAccount and safekeepingAccount\n          items:\n            $ref: '#/components/schemas/tradingAccount'\n        allocationIdentification:\n          type: string\n          description: Unique and unambiguous identifier for the allocation, as assigned by the instructing party.\n          example: '123123123'\n        clientAllocationIdentification:\n          type: string\n          description: Identification of unabiguous identifier of the individual allocation of the bulk order. Corresponds with the transactionIdentification.\n          example: '321321321'\n        amount:\n          type: string\n          pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n          maxLength: 22\n          description: Quantity to be allocated to specific safekeeping account\n          example: \"100\"\n        physicalDeliveryIndicator:\n          type: boolean\n          description: Indicates whether the financial instrument is to be physically delivered.\n          default: false\n\n    orderState:\n      required:\n      - status\n      - previouslyExecutedQuantity\n      - remainingQuantity\n      type: object\n      properties:\n        status:\n          type: string\n          description: Status of the individual order is accepted or already executed or sent to next party or received.\n          enum:\n          - new\n          - partiallyFilled\n          - filled\n          - doneForDay\n          - canceled\n          - replaced\n          - pendingCancel\n          - stopped\n          - rejected\n          - suspended\n          - pendingNew\n          - calculated\n          - expired\n          - acceptedForBidding\n          - pendingReplace\n          example: 'doneForDay'\n        reason:\n          type: object\n          properties:\n            code:\n              type: string\n              description: Cancelled reason expressed as a code.\n              enum:\n              - cancelledByHub\n              - cancelledByInstructingParty\n              - endOfLife\n              - cancelledByOther\n              example: 'endOfLife'\n            proprietary:\n              type: string\n              description: Cancelled reason expressed as a proprietary code.\n              maxLength: 35\n        previouslyExecutedQuantity:\n          type: string\n          pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n          maxLength: 22\n          description: Total quantity (e.g. number of shares) filled.\n          example: \"100\"\n        remainingQuantity:\n          type: string\n          pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n          maxLength: 22\n          description: Quantity open for further execution. If the processingStatus is Canceled, DoneForTheDay, Expired, Calculated, or Rejected (in which case the order is no longer active) then remainingQuantity could be 0, otherwise remainingQuantity = OrderQuantity - previouslyExecutedQuantity.\n          example: \"20\"\n        averagePrice:\n          type: string\n          pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n          maxLength: 22\n          description: Calculated average price of all fills on this order.\n          example: \"17.85\"\n        dayOrderQuantity:\n          type: string\n          pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n          maxLength: 22\n          description: For GoodTill(GT) orders the orderQuantity less all quantity (adjusted for stock splits) that traded on previous days. DayOrderQuantity = OrderQuantity - (previouslyExecutedQuantity - dayPreviouslyExecutedQuantity).\n          example: \"15\"\n        dayPreviouslyExecutedQuantity:\n          type: string\n          pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n          maxLength: 22\n          description:  For GT orders the quantity on a GT order that has traded today.\n          example: \"5\"\n        dayAveragePrice:\n          type: string\n          pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n          maxLength: 22\n          description: For GT orders the average price for quantity on a GT order that has traded today.\n          example: \"17.8\"\n        billingDetail:\n          type: object\n          properties:\n            numberDaysAccrued:\n              type: number\n              format: integer\n              example: 28\n              description: Specifies the number of days used for calculating the accrued interest amount.\n            amountList:\n              type: array\n              items:\n                type: object\n                properties:\n                  type:\n                    type: string\n                    description: Indicates the type of billing amount.\n                    example: 'accruedInterestAmount'\n                    enum:\n                    - accruedInterestAmount\n                    - grossTradeAmount\n                    - grossSettlementAmount\n                    - netSettlementAmount\n                    - netBillingAmount\n                  amount:\n                    type: string\n                    pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n                    maxLength: 22\n                    example: \"1264\"\n                    description: Billing value\n                  currency:\n                    $ref: '#/components/schemas/currency' \n        dateList:\n          type: array\n          description: Indicates dates relevant for the respective order\n          items:\n            type: object\n            properties:\n              date:\n                $ref: '#/components/schemas/date'\n              dateType:  \n                type: string\n                example: 'bookingDate'\n                enum:\n                - transactionDate\n                - bookingDate\n                - valueDate\n    \n    completeOrder:\n      type: object\n      required: \n        - transactionIdentification\n      properties:\n          transactionIdentification:\n            type: string\n            description: Unique and unambiguous identifier for the order execution, as assigned by the confirming party.\n            example: '1231234'\n          order:\n            $ref: '#/components/schemas/order'\n          orderState:\n            $ref: '#/components/schemas/orderState'\n    \n    currency:\n      description: ISO 4217 code\n      type: string\n      pattern: '[A-Z]{3}'\n      example: 'CHF'\n\n    date:\n      type: string\n      format: date\n      description: Date according to ISO 8601 i.e. YYYY-MM-DD format\n      example: '2018-04-13'\n\n\n    commonErrorResponse:\n      title: Common Error Response\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/commonErrorType'\n        title:\n          type: string\n          example:\n            This is the general problem description\n        detail:\n          type: string\n          example:\n            Detailed problem description with respect to the current request\n        instance:\n          type: string\n          example:\n            path/to/corresponding/resource\n\n    commonErrorType:\n      type: string\n      description: Error types for commonErrorResponse\n      example: invalidPayload\n      enum:\n        - invalidPayload\n        - malformedPayload\n        - invalidToken\n        - expiredToken\n        - insufficientPrivileges\n        - noAccessToResource\n        - resourceDoesNotExist\n        - resourceNotReady\n        - resourceTooLarge\n        - wrongMethod\n        - operationNotAllowed\n        - technicalError\n        - notImplemented\n        - serviceUnavailable\n\n# ---- Responses - Standard Errors Common Data Model v1.2.2----\n  responses:\n    standard400:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json\n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Bad Request - The server cannot or will not process the request due to something that is perceived to be a client error as malformed request syntax.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n\n    standard401:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json     \n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Unauthorized - The request has not been applied because it lacks valid authentication credentials for the target resource.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n\n    standard403:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json\n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Forbidden - The server understood the request but refuses to authorize it. \n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n\n    standard404:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json\n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Not Found - The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n\n    standard405:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json\n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Method Not Allowed - The method received in the request-line is known by the origin server but not supported by the target resource.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n\n    standard500:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json\n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n\n    standard501:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json\n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Not Implemented - The server does not support the functionality required to fulfill the request.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n\n    standard503:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json\n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Service Unavailable. The server is currently unable to handle the request due to a temporary overload or scheduled maintenance.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n  # ---- End Responses - Standard Errors",
			"canonicalURL": "/github.com/swissfintechinnovations/common-API@411f559625d224664dcc971e6637429d227e79b4/-/blob/OrderPlacement.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/swissfintechinnovations/common-API/blob/411f559625d224664dcc971e6637429d227e79b4/OrderPlacement.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/orders\": get: responses: 400: contents: unsupported content types: [application/problem+json]",
	"NotImplemented": [
		"unsupported content types"
	]
}