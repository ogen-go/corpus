{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/biocommons/anyvar"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "src/anyvar/restapi/_data/openapi.yaml",
			"byteSize": 16894,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: AnyVar\n  description: \u003e-\n    AnyVar aspires to provide REST-based validation, normalization,\n    identification, and registration of any biological variation.\n\n  contact:\n    name: Reece Hart\n    email: reecehart@gmail.com\n  version: 0.0.0\n\ntags:\n  - name: General\n  - name: Sequences\n    description: \u003e-\n      Sequence and sequence metadata\n  - name: Locations\n    description: \u003e-\n      Where Variation occurs\n  - name: Variation\n    description: All classes of primitive Variation\n  #- name: Variation Subtypes\n  #  description: Specific subtypes of variation\n  #- name: Variation Set\n  #  description: Sets of Variation\n\n\npaths:\n  ###########################################################################\n  # Info\n\n  /info:\n    get:\n      tags: [\"General\"]\n      summary: Check system status and versions\n      description: \u003e-\n        System status check and configuration\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Info\"\n\n\n  ###########################################################################\n  # Sequences\n\n  /sequence/{alias}:\n    get:\n      summary: Retrieve a sequence by any alias\n      description: \u003e-\n        Retrieve a reference sequence using a hash function\n      tags:\n        - Sequences\n      parameters:\n        - in: path\n          name: alias\n          description: Any sequence alias or hash\n          required: true\n          schema:\n            type: string\n          example: refseq:NM_000551.3\n        - in: query\n          name: start\n          description: \u003e-\n            Optional; specifies start of requested sequence\n            using interbase coordinates (numerically equivalent to\n            0-based, right-open).\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n        - in: query\n          name: end\n          description: \u003e-\n            Optional; specifies end of requested sequence\n            using interbase coordinates (numerically equivalent to\n            0-based, right-open).\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n      responses:\n        200:\n          description: \u003e-\n            Successful retrieval of sequence. Returned as a single string with\n            no line breaks\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: \u003e-\n                  MSSPTPPGGQRTLQKRKQGSSQKVAASAPKKNTNSNNSILKIYSDEATGLRVDPLVVLFLAVGFIFSVVALHVISKVAGKLF\n        404:\n          description: NOT FOUND; sequence does not exist\n        422:\n          description: UNPROCESSABLE ENTITY; request was understood, but is invalid\n\n  /sequence-metadata/{alias}:\n    get:\n      summary: Get reference metadata from a hash\n      description: Retrieve a metadata about a reference sequence using a hash identifier\n      tags:\n        - Sequences\n      parameters:\n        - in: path\n          name: alias\n          required: true\n          description: The identifier to use. Should be a checksum hash\n          schema:\n            type: string\n          example: GRCh38:1\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Metadata\"\n        404:\n          description: NOT FOUND; sequence does not exist\n        422:\n          description: UNPROCESSABLE ENTITY; request was understood, but is invalid\n\n\n  ###########################################################################\n  # Variation\n  \n  # /variation:\n  #   put:\n  #     tags: [\"Variation\"]\n  #     summary: Create an instance of sequence variation.\n  #     description: \u003e-\n  #       Creates an instance of sequence variation and returns a\n  #       deterministically computed identifier.\n  #       \n  #       Requests with variant definitions that normalize to the same\n  #       interal variant result in only one record and the same\n  #       computed id is always returned.  That is, this endpoint is\n  #       idempotent, irrespective of the input definition format.\n  # \n  #       Alleles within haplotypes, and haplotypes withing genotypes,\n  #       are subjected to canonical ordering rules. Therefore, the\n  #       computed id of an haplotype in invariant with respect to the\n  #       order of the defined alleles. The same invariance holds for\n  #       genotypes and their component haplotypes.\n  # \n  #       The following input formats are permitted:\n  # \n  #         * Text (any descriptive text that purports to represent variation)\n  #         * ISCN\n  # \n  #     requestBody:\n  #       content:\n  #         application/json:\n  #           schema:\n  #             properties:\n  #               definition:\n  #                 description: \u003e-\n  #                   Creates a variation instance from the provided\n  #                   `definition` parameter, which is interpreted\n  #                   according to `format` parameter.\n  # \n  #                   By default, the format is inferred from structure.\n  #                   When inferred, the variation will be created as a\n  #                   text record if other methods fail.  If format is\n  #                   not auto and the variant cannot be parsed\n  #                   appropriately, an error is returned.\n  #                 type: string\n  #                 example: \"NC_000010.11:g.87894077C\u003eT\"\n  #     responses:\n  #       200:\n  #         description: OK\n  #         content:\n  #           application/json:\n  #             schema:\n  #               type: object\n  #                 \n  #       400:\n  #         description: The variation could not be parsed or is otherwise invalid.\n  #       501:\n  #         description: \u003e-\n  #           The requested resource or operation is not currently\n  #           supported. It may be supported in the future.\n\n  /variation/{id}:\n    get:\n      tags: [\"Variation\"]\n      summary: Retrieve any VRS object using a VRS identifier\n      description: \u003e-\n        Gets a variation instance by id, may return any supported type\n        of variation\n      parameters:\n        - name: id\n          in: path\n          description: variation id\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n\n\n  ###########################################################################\n  # Text\n  \n  /text:\n    put:\n      tags: [\"Variation\"]\n      summary: Create a new Text allele and identifier\n      description: \u003e-\n        Create an instance of unparsed text variation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                definition:\n                  description: \u003e-\n                    Allele definition, interpreted according to format\n                  type: string\n                  example: NC_000010.11:g.87894077C\u003eT\n              required:\n                - definition\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                # $ref: \"http://localhost:5000/vr.json#/definitions/Text\"\n                \n  /text/{id}:\n    get:\n      tags: [\"Variation\"]\n      summary: Retrieve Text variation by VRS identifier\n      description: \u003e-\n        Return text variation\n      parameters:\n        - name: id\n          in: path\n          description: Text variation id\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                # $ref: \"http://localhost:5000/vr.json#/definitions/Text\"\n    \n  ###########################################################################\n  # Allele\n\n  /allele:\n    put:\n      tags: [\"Variation\"]\n      summary: Create a new allele from VRS, HGVS, SPDI, or gnomAD formats\n      description: \u003e-\n        An Allele is a specific, single, and contiguous Sequence at a\n        Location. Each alternative Sequence may be empty, shorter,\n        longer, or the same length as the interval (e.g., due to one or\n        more indels).\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                definition:\n                  description: \u003e-\n                    Allele definition, interpreted according to format\n                  type: string\n                  example: NC_000010.11:g.87894077C\u003eT\n                format:\n                  description: format of definition\n                  type: string\n                  enum:\n                    - ga4gh\n                    - beacon\n                    - gnomad\n                    - hgvs\n                    - spdi\n                  default: hgvs\n                  example: hgvs\n                normalize:\n                  description: Normalize the allele in the specified direction.\n                  type: string\n                  enum:\n                    - voca\n                    - right\n                    - left\n                    - none\n                  default: right\n                  example: right\n              required:\n                - definition\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                # $ref: \"http://localhost:5000/vr.json#/definitions/Allele\"\n                \n  /allele/{id}:\n    get:\n      tags: [\"Variation\"]\n      summary: Retrieve an allele from VRS identifier\n      description: \u003e-\n        An Allele is a specific, single, and contiguous Sequence at a\n        Location. Each alternative Sequence may be empty, shorter,\n        longer, or the same length as the interval (e.g., due to one or\n        more indels).\n        \n        The following formats are accepted: \n\n          * Beacon (`13 : 32936732 G \u003e C`)\n          * HGVS\n          * SPDI\n          * gnomAD (`1-55516888-G-GA`)\n\n      parameters:\n        - name: id\n          in: path\n          description: object id\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                # $ref: \"http://localhost:5000/vr.json#/definitions/Allele\"\n\n\n                \n\n  ###########################################################################\n  # Variation Sets\n  \n  # /variationset:\n  #   put:\n  #     tags: [\"Variation\"]\n  #     description: \u003e-\n  #       What do *you* think a VariationSet should be?\n  #     requestBody:\n  #       content:\n  #         application/json:\n  #           schema:\n  #             type: object\n  #             properties:\n  #               definition:\n  #                 description: \u003e-\n  #                   Allele definition, interpreted according to format\n  #                 type: object\n  #                 example:\n  #                   member_ids:\n  #                     - ga4gh:VA.zQuUXqiP_YpP_uODT4PcfNIYoOPdYjC-\n  #                     - ga4gh:VA.jzmI29gA7-Rs7pRkeCj0mOp1Zsxan2Sc\n  #                     - ga4gh:VA.3NoEdRUAnX2AMdug2XoisbEi-GR7wB1x\n  #                     - ga4gh:VA.OWpaUYPJgLq8ZTPDbyCId6cgYPWjtrRK\n  #                     - ga4gh:VA.ltc3Iah3Iy5X_A06NGMla76bmPGSbMj9\n  #                     - ga4gh:VA.yss8NB_TDAnwyWX7ImXKTnroBYAN_d1O\n  #                     - ga4gh:VA.X3t0_U_rG5EfNUEYZb3zmulRYcdZ9RD2\n  #                     - ga4gh:VA.bD4JRdGKbwCOKh3ou8fPS2i9gD1Ojf7z\n  #                     - ga4gh:VA.1DHFMjTlO0Ju1cg5sa8vP2o1HSPiSR7t\n  #                     - ga4gh:VA.TvaAqwD_MduWohVGP4i2Tze4bieA-Kny\n  #             required:\n  #               - definition\n  #     responses:\n  #       200:\n  #         description: OK\n  #         content:\n  #           application/json:\n  #             schema:\n  #               type: object\n  #               # $ref: \"http://localhost:5000/vr.json#/definitions/Allele\"\n  # \n  # /variationset/{id}:\n  #   get:\n  #     description: gets a variation instance by id\n  #     tags: [\"Variation\"]\n  #     parameters:\n  #       - name: id\n  #         in: path\n  #         description: canonical variationset id\n  #         required: true\n  #         schema:\n  #           type: string\n  #     responses:\n  #       200:\n  #         description: found; variation returned\n\n\n  ###########################################################################\n  # Locations\n  \n  /locations/{id}:\n    get:\n      tags: [\"Locations\"]\n      summary: Retrieve location by VRS location identfier\n      description: \u003e-\n        An identifiable position or region on a Sequence, defined by\n        Sequence Id and an Interval.\n      parameters:\n        - name: id\n          in: path\n          description: sequence id\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                # This seems to be working: $ref: \"file:vr.json#/definitions/Location\"\n\n\n\n# ######################################################################\n# COMPONENTS\n\ncomponents:\n  schemas:\n    Info:\n      type: object\n      example:\n        dependencies:\n          anyvar:\n            version: \"1.2.3\"\n          ga4gh.vrs:\n            version: \"0.2.0\"\n\n    # External references -- necessary for definitions to show up in\n    # generated docs\n    # \u003e\u003e\u003e import ga4gh.vrs\n    # \u003e\u003e\u003e import json\n    # \u003e\u003e\u003e j = json.load(open(ga4gh.vrs.schema_path))\n    # \u003e\u003e\u003e print(\"\\n\".join([f\"{k}:\\n  $ref: \\\"file:vr.json#/definitions/{k}\\\"\" for k in j[\"definitions\"].keys()]))\n    \n    # Allele:\n    #   $ref: \"file:vr.json#/definitions/Allele\"\n    # CURIE:\n    #   $ref: \"file:vr.json#/definitions/CURIE\"\n    # ChromosomeLocation:\n    #   $ref: \"file:vr.json#/definitions/ChromosomeLocation\"\n    # Cytoband:\n    #   $ref: \"file:vr.json#/definitions/Cytoband\"\n    # CytobandInterval:\n    #   $ref: \"file:vr.json#/definitions/CytobandInterval\"\n    # DateTime:\n    #   $ref: \"file:vr.json#/definitions/DateTime\"\n    # Haplotype:\n    #   $ref: \"file:vr.json#/definitions/Haplotype\"\n    # Location:\n    #   $ref: \"file:vr.json#/definitions/Location\"\n    # SequenceInterval:\n    #   $ref: \"file:vr.json#/definitions/SequenceInterval\"\n    # SequenceLocation:\n    #   $ref: \"file:vr.json#/definitions/SequenceLocation\"\n    # SequenceState:\n    #   $ref: \"file:vr.json#/definitions/SequenceState\"\n    # SimpleInterval:\n    #   $ref: \"file:vr.json#/definitions/SimpleInterval\"\n    # State:\n    #   $ref: \"file:vr.json#/definitions/State\"\n    # Text:\n    #   $ref: \"file:vr.json#/definitions/Text\"\n    # Variation:\n    #   $ref: \"file:vr.json#/definitions/Variation\"\n    # VariationSet:\n    #   $ref: \"file:vr.json#/definitions/VariationSet\"\n\n\n    Metadata:\n      type: object\n      description: Holds information about a sequence checksum\n      properties:\n        metadata:\n          type: object\n          properties:\n            length:\n              type: integer\n              format: int64\n              description: An decimal integer of the length of the reference sequence\n            aliases:\n              type: array\n              items:\n                type: string\n            alphabet:\n              type: string\n              nullable: true\n            added:\n              type: string\n              nullable: true\n          required:\n            - length\n            - aliases\n            - alphabet\n            - added\n      example:\n        metadata:\n          aliases:\n          - GRCh38:1\n          - GRCh38:chr1\n          - GRCh38.p1:1\n          - GRCh38.p1:chr1\n          - GRCh38.p10:1\n          - GRCh38.p10:chr1\n          - GRCh38.p11:1\n          - GRCh38.p11:chr1\n          - GRCh38.p12:1\n          - GRCh38.p12:chr1\n          - GRCh38.p2:1\n          - GRCh38.p2:chr1\n          - GRCh38.p3:1\n          - GRCh38.p3:chr1\n          - GRCh38.p4:1\n          - GRCh38.p4:chr1\n          - GRCh38.p5:1\n          - GRCh38.p5:chr1\n          - GRCh38.p6:1\n          - GRCh38.p6:chr1\n          - GRCh38.p7:1\n          - GRCh38.p7:chr1\n          - GRCh38.p8:1\n          - GRCh38.p8:chr1\n          - GRCh38.p9:1\n          - GRCh38.p9:chr1\n          - MD5:6aef897c3d6ff0c78aff06ac189178dd\n          - RefSeq:NC_000001.11\n          - SEGUID:FCUd6VJ6uikS/VWLbhGdVmj2rOA\n          - SHA1:14251de9527aba2912fd558b6e119d5668f6ace0\n          - VMC:GS_Ya6Rs7DHhDeg7YaOSg1EoNi3U_nQ9SvO\n          - genbank:CM000663.2\n          length: 248956422\n          alphabet: ACGMNRT\n          added: 2016-08-27T21:17:00Z\n    \n",
			"canonicalURL": "/github.com/biocommons/anyvar@bf3f2b87e7cf207cfd5e0847c56e0449d3322e50/-/blob/src/anyvar/restapi/_data/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/biocommons/anyvar/blob/bf3f2b87e7cf207cfd5e0847c56e0449d3322e50/src/anyvar/restapi/_data/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/sequence/{alias}\": get: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}