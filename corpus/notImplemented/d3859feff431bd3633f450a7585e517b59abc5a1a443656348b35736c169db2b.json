{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nimbella/demo-projects"
		},
		"file": {
			"name": "Nimbella Election API.yaml",
			"size": 0,
			"path": "election/web/public/Nimbella Election API.yaml",
			"byteSize": 8158,
			"content": "openapi: 3.0.0\ninfo:\n  title: Nimbella Election API\n  description: \u003e-\n    Provides election news, polling places, early vote locations, contest data,\n    exit polls data, county wise historical voting data, election officials, and\n    government representatives for U.S. residential addresses.\n\n\n    Once you deploy the project in your namespace you will have your baseUrl as https://\u003cyour_namespace\u003e-apigcp.nimbella.io/api/ge2020. \n    However you can still use https://electiondemo-apigcp.nimbella.io/api/ge2020 as baseUrl to try out responses.\n\n    \n     Contact Support:\n     \n     Name: Nimbella\n\n     Email: info@nimbella.com\n\n     Github: https://github.com/nimbella/demo-projects/tree/master/election\n  version: 1.0.0\nservers:\n  - url: '/api/ge2020/'\ntags:\n  - name: Representatives\npaths:\n  /reps:\n    get:\n      tags:\n        - Representatives\n      summary: Representative Info By Address\n      description: \u003e-\n        Looks up political geography and representative information for a single\n        address.\n      parameters:\n        - name: address\n          in: query\n          schema:\n            type: string\n          description: \u003e-\n            (Required) The address to look up. May only be specified if the\n            field ocdId is not given in the URL.\n          example: \u003cstring\u003e\n        - name: includeOffices\n          in: query\n          schema:\n            type: boolean\n          description: \u003e-\n            Whether to return information about offices and officials. If false,\n            only the top-level district information will be returned.\n          example: 'true'\n        - name: levels\n          in: query\n          schema:\n            type: string\n          description: \u003e-\n            A list of office levels to filter by. Only offices that serve at\n            least one of these levels will be returned. Divisions that don't\n            contain a matching office will not be returned.\n          example: '[\u003cstring\u003e]'\n        - name: roles\n          in: query\n          schema:\n            type: string\n          description: \u003e-\n            A list of office roles to filter by. Only offices fulfilling one of\n            these roles will be returned. Divisions that don't contain a\n            matching office will not be returned.\n          example: '[\u003cstring\u003e]'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  '/reps/:ocdId':\n    get:\n      tags:\n        - Representatives\n      summary: Representative Info By Division\n      description: Looks up representative information for a single geographic division.\n      parameters:\n        - name: levels\n          in: query\n          schema:\n            type: string\n          description: \u003e-\n            A list of office levels to filter by. Only offices that serve at\n            least one of these levels will be returned. Divisions that don't\n            contain a matching office will not be returned.\n          example: '[\u003cstring\u003e]'\n        - name: recursive\n          in: query\n          schema:\n            type: string\n          description: \u003e\n            If true, information about all divisions contained in the division\n            requested will be included as well. For example, if querying\n            ocd-division/country:us/district:dc, this would also return all DC's\n            wards and ANCs.\n          example: \u003cboolean\u003e\n        - name: roles\n          in: query\n          schema:\n            type: string\n          description: \u003e\n            A list of office roles to filter by. Only offices fulfilling one of\n            these roles will be returned. Divisions that don't contain a\n            matching office will not be returned.\n          example: '[\u003cstring\u003e]'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /divisions:\n    get:\n      tags:\n        - General\n      summary: Divisions Search\n      description: Searches for political divisions by their natural name or OCD ID.\n      parameters:\n        - name: query\n          in: query\n          schema:\n            type: string\n          description: \u003e-\n            The search query. Queries can cover any parts of a OCD ID or a human\n            readable division name. All words given in the query are treated as\n            required patterns. In addition to that, most query operators of the\n            Apache Lucene library are supported. See\n            http://lucene.apache.org/core/2_9_4/queryparsersyntax.html\n          example: \u003cstring\u003e\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /counties:\n    get:\n      tags:\n        - General\n      summary: County State Wise Results\n      description: \u003e-\n        County and State wise voting stats for a particular election year,\n        defaults to 2016.\n      parameters:\n        - name: year\n          in: query\n          schema:\n            type: string\n          description: The year to get data for.\n          example: \u003cstring\u003e\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /timeseries:\n    get:\n      tags:\n        - General\n      summary: Timeseries\n      description: 'Party wise voting stats since 1979, segregated by county and state.'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /elections:\n    get:\n      tags:\n        - General\n      summary: Elections\n      description: List of available elections to query.\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /resources:\n    get:\n      tags:\n        - General\n      summary: Resources\n      description: 'Elections related APIs, Datasets and Websites.'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /exitpolls:\n    get:\n      tags:\n        - General\n      summary: Exit Polls\n      description: Exit polls data from various sources.\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /news:\n    get:\n      tags:\n        - General\n      summary: News\n      description: \u003e-\n        Presidential Election related news with title, description and source,\n        sorted in timely fashion.\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /voterinfo:\n    get:\n      tags:\n        - General\n      summary: Voter Info\n      description: \u003e-\n        Looks up information relevant to a voter based on the voter's registered\n        address.\n      parameters:\n        - name: address\n          in: query\n          schema:\n            type: string\n          description: (Required) The registered address of the voter to look up.\n          example: \u003cstring\u003e\n        - name: electionId\n          in: query\n          schema:\n            type: integer\n          description: \u003e-\n            The unique ID of the election to look up. A list of election IDs can\n            be obtained at\n            https://www.googleapis.com/civicinfo/{version}/elections\n          example: '0'\n        - name: officialOnly\n          in: query\n          schema:\n            type: boolean\n          description: \u003e-\n            If set to true, only data from official state sources will be\n            returned.\n          example: 'false'\n        - name: returnAllAvailableData\n          in: query\n          schema:\n            type: boolean\n          description: \u003e-\n            If set to true, the query will return the success code and include\n            any partial information when it is unable to determine a matching\n            address or unable to determine the election for electionId=0\n            queries.\n          example: 'false'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n",
			"canonicalURL": "/github.com/nimbella/demo-projects@c40b7b26ed375d6b4c83192aa049ba63967d3758/-/blob/election/web/public/Nimbella%20Election%20API.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nimbella/demo-projects/blob/c40b7b26ed375d6b4c83192aa049ba63967d3758/election/web/public/Nimbella Election API.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/divisions\": get: responses: 200: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema"
	]
}