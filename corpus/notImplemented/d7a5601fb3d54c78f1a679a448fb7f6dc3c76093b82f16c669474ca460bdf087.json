{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/FIWARE/CanisMajor"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "api/api.yaml",
			"byteSize": 25790,
			"content": "openapi: 3.0.3\ninfo:\n  description: 'Spec for the CanisMajor DLT adaptor'\n  version: 0.0.1\n  title: CanisMajor - FIWARE DLT Adaptor\n  contact:\n    email: stefan.wiedemann@fiware.org\nexternalDocs:\n  description: Implementation on github.\n  url: 'https://github.com/FIWARE/CanisMajor'\ntags:\n  - name: Ops\n    description: Methods to provide some ops-related infos\n  - name: NGSI-LD\n    description: All supported NGSI-LD endpoints.\n  - name: Entity\n    description: Endpoints the get transaction information about entities.\npaths:\n  '/health':\n    get:\n      tags:\n        - Ops\n      description: Provide the current health status of CanisMajor.\n      operationId: getHealth\n      responses:\n        '200':\n          description: Service is up and running.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthStatus'\n        '503':\n          description: Service is not available.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthStatus'\n\n  '/ngsi-ld/v1/entities/':\n    post:\n      tags:\n        - NGSI-LD\n      parameters:\n        - $ref: '#/components/parameters/link'\n        - $ref: '#/components/parameters/walletType'\n        - $ref: '#/components/parameters/walletToken'\n        - $ref: '#/components/parameters/walletAddress'\n      description: Entity creation requests.\n      operationId: createNgsiLDEntity\n      requestBody:\n        content:\n          application/ld+json:\n            schema:\n              $ref: '#/components/schemas/Entity'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Entity'\n      responses:\n        '200':\n          description: NGSI-LD Entity creation persisted in the blockchain.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionReceipt'\n        '400':\n          description: Did not receive a valid NGSI-LD Entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n        '403':\n          description: No valid token was provided.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n        '409':\n          description: Entity already exists.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n        '422':\n          description: Unprocessable Entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n    get:\n      tags:\n        - NGSI-LD\n      parameters:\n        - $ref: '#/components/parameters/id'\n        - $ref: '#/components/parameters/idPattern'\n        - $ref: '#/components/parameters/type'\n        - $ref: '#/components/parameters/attrs'\n        - $ref: '#/components/parameters/q'\n        - $ref: '#/components/parameters/georel'\n        - $ref: '#/components/parameters/geometry'\n        - $ref: '#/components/parameters/coordinates'\n        - $ref: '#/components/parameters/geoproperty'\n        - $ref: '#/components/parameters/csf'\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/options'\n        - $ref: '#/components/parameters/link'\n        - $ref: '#/components/parameters/walletType'\n        - $ref: '#/components/parameters/walletToken'\n        - $ref: '#/components/parameters/walletAddress'\n        - $ref: '#/components/parameters/relatedEntity'\n      description: Retrieve a set of entities which matches a specific query from an NGSI-LD system\n      operationId: queryEntities\n      responses:\n        '200':\n          description: NGSI-LD Entity query persisted in the blockchain.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionReceipt'\n        '400':\n          description: Bad request\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n\n  '/ngsi-ld/v1/entities/{entityId}/attrs':\n    post:\n      tags:\n        - NGSI-LD\n      parameters:\n        - $ref: '#/components/parameters/link'\n        - $ref: '#/components/parameters/entityId'\n        - $ref: '#/components/parameters/walletType'\n        - $ref: '#/components/parameters/walletToken'\n        - $ref: '#/components/parameters/walletAddress'\n      description: EntityUpdate requests.\n      operationId: postUpdateNgsiLDEntity\n      requestBody:\n        content:\n          application/ld+json:\n            schema:\n              $ref: '#/components/schemas/EntityFragment'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EntityFragment'\n      responses:\n        '200':\n          description: NGSI-LD Entity creation persisted in the blockchain.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionReceipt'\n        '400':\n          description: Did not receive a valid NGSI-LD Entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n        '403':\n          description: No valid token was provided.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n        '409':\n          description: Entity already exists.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n        '422':\n          description: Unprocessable Entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n  '/ngsi-ld/v1/entities/{entityId}':\n    get:\n      description: Retrieve an specific Entity from an NGSI-LD system. It's possible to specify the Entity attributes to be retrieved by using query parameters\n      operationId: retrieveEntityById\n      tags:\n        - NGSI-LD\n      parameters:\n        - $ref: '#/components/parameters/entityId'\n        - $ref: '#/components/parameters/attrs'\n        - $ref: '#/components/parameters/parameters-type'\n        - $ref: '#/components/parameters/options'\n        - $ref: '#/components/parameters/link'\n        - $ref: '#/components/parameters/walletType'\n        - $ref: '#/components/parameters/walletToken'\n        - $ref: '#/components/parameters/walletAddress'\n      responses:\n        '200':\n          description: NGSI-LD Entity query persisted in the blockchain.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionReceipt'\n        '400':\n          description: Bad request\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n  '/ngsi-ld/v1/entityOperations/upsert':\n    post:\n      tags:\n        - NGSI-LD\n      parameters:\n        - $ref: '#/components/parameters/walletType'\n        - $ref: '#/components/parameters/walletToken'\n        - $ref: '#/components/parameters/walletAddress'\n      description: Batch updated or replace multiple entities at once.\n      operationId: upsertEntities\n      requestBody:\n        content:\n          application/ld+json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Entity'\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Entity'\n      responses:\n        '200':\n          description: NGSI-LD Entity creation persisted in the blockchain.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransactionReceipt'\n        '400':\n          description: Did not receive a valid NGSI-LD Entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n        '403':\n          description: No valid token was provided.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n        '409':\n          description: Entity already exists.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n        '422':\n          description: Unprocessable Entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n  '/entity':\n    get:\n      tags:\n        - Entity\n      description: Get entities where transactions exist.\n      operationId: getEntitiesWithTransactions\n      responses:\n        '200':\n          description: All entities with there transactions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntityTransactionList'\n  '/entity/{entityId}':\n    get:\n      tags:\n        - Entity\n      parameters:\n        - $ref: '#/components/parameters/entityId'\n      description: Get all transactions for a given entity\n      operationId: getEntityWithTransactions\n      responses:\n        '200':\n          description: Entity with transactions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntityTransaction'\n        '404':\n          description: No such entity exists.\ncomponents:\n  parameters:\n    id:\n      name: id\n      description: Comma separated list of URIs to be retrieved\n      in: query\n      required: false\n      schema:\n        type: string\n    idPattern:\n      name: idPattern\n      description: Regular expression that must be matched by Entity ids\n      in: query\n      required: false\n      schema:\n        type: string\n        format: regexp\n    type:\n      name: type\n      description: Comma separated list of Entity type names to be retrieved\n      in: query\n      required: false\n      schema:\n        type: string\n        minLength: 1\n    attrs:\n      name: attrs\n      description: Comma separated list of attribute names (properties or relationships) to be retrieved\n      in: query\n      required: false\n      schema:\n        type: string\n        minLength: 1\n    q:\n      name: q\n      description: Query\n      in: query\n      required: false\n      schema:\n        type: string\n        minLength: 1\n    georel:\n      name: georel\n      description: Geo-relationship\n      in: query\n      required: false\n      schema:\n        $ref: '#/components/schemas/georel'\n    geometry:\n      name: geometry\n      description: Geometry\n      in: query\n      required: false\n      schema:\n        $ref: '#/components/schemas/geometryEnum'\n    coordinates:\n      name: coordinates\n      description: Coordinates serialized as a string\n      in: query\n      required: false\n      schema:\n        type: string\n        minLength: 1\n    geoproperty:\n      name: geoproperty\n      description: The name of the property that contains the geo-spatial data that will be used to resolve the geoquery\n      in: query\n      required: false\n      schema:\n        type: string\n        minLength: 1\n    csf:\n      name: csf\n      description: Context Source Filter\n      in: query\n      required: false\n      schema:\n        type: string\n        minLength: 1\n    limit:\n      name: limit\n      description: Pagination limit\n      in: query\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 100\n    offset:\n      name: offset\n      description: Pagination offset\n      in: query\n      required: false\n      schema:\n        type: integer\n        default: 0\n    options:\n      name: options\n      description: Options dictionary\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - keyValues\n          - sysAttrs\n    entityType:\n      name: entityType\n      in: path\n      required: true\n      schema:\n        type: string\n    parameters-type:\n      name: type\n      description: Entity Type\n      in: query\n      required: false\n      schema:\n        $ref: '#/components/schemas/Name'\n    link:\n      name: Link\n      description: Link header to be used as described in the json-ld spec.\n      in: header\n      required: false\n      schema:\n        type: string\n    dltToken:\n      name: dlt-token\n      description: Header to contain the dlt-token\n      in: header\n      required: true\n      schema:\n        type: string\n    entityId:\n      name: entityId\n      description: ID of an NGSI-LD entity\n      in: path\n      required: true\n      schema:\n        type: string\n        format: uri\n    relatedEntity:\n      name: Related-Entity\n      description: ID of an NGSI-LD entity to related the query to, f.e. a user\n      in: header\n      required: false\n      schema:\n        type: string\n        format: uri\n    walletType:\n      name: Wallet-Type\n      description: Type of the wallet to be used for signing the transactions.\n      in: header\n      required: false\n      schema:\n        type: string\n        enum:\n          - vault\n    walletAddress:\n      name: Wallet-Address\n      description: |\n        Address of the wallet to be used for signing the transactions. \n        If required, it should include path information\n      example: http://my-vault.org/v1/ethereum/accounts/bob\n      in: header\n      required: false\n      schema:\n        type: string\n        format: url\n    walletToken:\n      name: Wallet-Token\n      description: |\n        Token to be used when contacting the wallet. Type of the token depends on the \n        wallet type.\n      in: header\n      required: false\n      schema:\n        type: string\n  schemas:\n    MetaData:\n      type: object\n      properties:\n        abi:\n          type: array\n          items:\n            type: string\n        contractAddress:\n          type: string\n    Configuration:\n      type: object\n      description: Configuration used by CanisMajor\n      properties:\n        entityType:\n          type: string\n        contextMapping:\n          type: string\n        metadata:\n          $ref: '#/components/schemas/MetaData'\n      required:\n        - entityType\n        - contextMapping\n    HealthStatus:\n      type: object\n      description: Status of the running service\n      properties:\n        status:\n          type: string\n          description: Current status, e.g. UP or DOWN\n          example: \"UP\"\n      required:\n        - staus\n    TokenKeys:\n      type: object\n      description: Secret information to be used for token generation.\n      properties:\n        private_key:\n          type: string\n          description: Private key to be used for token generation\n        public_key:\n          type: string\n          description: Public key to be used for token generation\n      required:\n        - private_key\n        - public_key\n    DLTToken:\n      type: object\n      description: Token to be used for authentication at the DTL\n      properties:\n        dlt-token:\n          type: string\n          description: The base64 encoded key to be used with the configured DLT\n      required:\n        - dlt-token\n    georelEnum:\n      type: string\n      enum:\n        - equals\n        - disjoint\n        - intersects\n        - within\n        - contains\n        - overlaps\n        - ^near;((maxDistance==\\d+)|(minDistance==\\d+))$\n    georel:\n      type: string\n    geometryEnum:\n      type: string\n    geometryType:\n      type: string\n    positionDefinition:\n      description: A single position\n      type: array\n      minItems: 2\n      maxItems: 2\n      items:\n        type: number\n      additionalProperties: false\n    positionArrayDefinition:\n      description: An array of positions\n      type: array\n      items:\n        $ref: '#/components/schemas/positionDefinition'\n    lineStringDefinition:\n      description: An array of two or more positions\n      type: array\n      items:\n        $ref: '#/components/schemas/positionDefinition'\n      minItems: 2\n    linearRingDefinition:\n      description: An array of four positions where the first equals the last\n      type: array\n      items:\n        $ref: '#/components/schemas/positionDefinition'\n      minItems: 4\n    polygonDefinition:\n      description: An array of linear rings\n      type: array\n      items:\n        $ref: '#/components/schemas/linearRingDefinition'\n    coordinates:\n      oneOf:\n        - $ref: '#/components/schemas/positionDefinition'\n        - $ref: '#/components/schemas/positionArrayDefinition'\n        - $ref: '#/components/schemas/polygonDefinition'\n        - $ref: '#/components/schemas/lineStringDefinition'\n    Point:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - Point\n        coordinates:\n          $ref: '#/components/schemas/positionDefinition'\n    MultiPoint:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - MultiPoint\n        coordinates:\n          $ref: '#/components/schemas/positionArrayDefinition'\n    Polygon:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - Polygon\n        coordinates:\n          $ref: '#/components/schemas/polygonDefinition'\n    LineString:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - LineString\n        coordinates:\n          $ref: '#/components/schemas/lineStringDefinition'\n    MultiLineString:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - MultiLineString\n        coordinates:\n          type: array\n          items:\n            $ref: '#/components/schemas/lineStringDefinition'\n    MultiPolygon:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - MultiPolygon\n        coordinates:\n          type: array\n          items:\n            $ref: '#/components/schemas/polygonDefinition'\n    Geometry:\n      description: ' Avalid GeoJSON geometry object'\n      oneOf:\n        - $ref: '#/components/schemas/Point'\n        - $ref: '#/components/schemas/MultiPoint'\n        - $ref: '#/components/schemas/Polygon'\n        - $ref: '#/components/schemas/LineString'\n        - $ref: '#/components/schemas/MultiLineString'\n        - $ref: '#/components/schemas/MultiPolygon'\n    observedAt:\n      type: string\n      format: date-time\n    createdAt:\n      type: string\n      format: date-time\n    modifiedAt:\n      type: string\n      format: date-time\n    datasetId:\n      type: string\n      format: uri\n    instanceId:\n      type: string\n      format: uri\n    ProblemDetails:\n      type: object\n      description: Information about the occured error.\n      properties:\n        type:\n          type: string\n          format: uri\n        title:\n          type: string\n        detail:\n          type: string\n      required:\n        - type\n    GeoProperty:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - GeoProperty\n        value:\n          type: object\n        observedAt:\n          $ref: '#/components/schemas/observedAt'\n        createdAt:\n          $ref: '#/components/schemas/createdAt'\n        modifiedAt:\n          $ref: '#/components/schemas/modifiedAt'\n        datasetId:\n          $ref: '#/components/schemas/datasetId'\n        instanceId:\n          $ref: '#/components/schemas/instanceId'\n        unitCode:\n          type: string\n      required:\n        - type\n        - value\n      additionalProperties:\n        oneOf:\n          - $ref: '#/components/schemas/Geometry'\n          - $ref: '#/components/schemas/Property'\n          - $ref: '#/components/schemas/Relationship'\n    LdContext:\n      type: object\n    Property:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - Property\n        value:\n          oneOf:\n            - type: string\n            - type: number\n            - type: boolean\n            - type: object\n            - type: array\n              items:\n                oneOf:\n                  - type: string\n                  - type: number\n                  - type: boolean\n                  - type: object\n        observedAt:\n          $ref: '#/components/schemas/observedAt'\n        createdAt:\n          $ref: '#/components/schemas/createdAt'\n        modifiedAt:\n          $ref: '#/components/schemas/modifiedAt'\n        datasetId:\n          $ref: '#/components/schemas/datasetId'\n        instanceId:\n          $ref: '#/components/schemas/instanceId'\n        unitCode:\n          type: string\n      required:\n        - type\n        - value\n      additionalProperties:\n        oneOf:\n          - $ref: '#/components/schemas/Property'\n          - $ref: '#/components/schemas/Relationship'\n    Relationship:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - Relationship\n        object:\n          type: string\n          format: uri\n        observedAt:\n          $ref: '#/components/schemas/observedAt'\n        createdAt:\n          $ref: '#/components/schemas/createdAt'\n        modifiedAt:\n          $ref: '#/components/schemas/modifiedAt'\n        datasetId:\n          $ref: '#/components/schemas/datasetId'\n        instanceId:\n          $ref: '#/components/schemas/instanceId'\n      required:\n        - type\n        - object\n      additionalProperties:\n        oneOf:\n          - $ref: '#/components/schemas/Property'\n          - $ref: '#/components/schemas/Relationship'\n    Name:\n      type: string\n      pattern: '^((\\d|[a-zA-Z]|_)+(:(\\d|[a-zA-Z]|_)+)?(#\\d+)?)$'\n      minLength: 1\n      description: NGSI-LD Name\n    EntityFragment:\n      type: object\n      properties:\n        '@context':\n          $ref: '#/components/schemas/LdContext'\n        location:\n          $ref: '#/components/schemas/GeoProperty'\n        observationSpace:\n          $ref: '#/components/schemas/GeoProperty'\n        operationSpace:\n          $ref: '#/components/schemas/GeoProperty'\n        id:\n          type: string\n          format: uri\n        type:\n          $ref: '#/components/schemas/Name'\n        createdAt:\n          $ref: '#/components/schemas/createdAt'\n        modifiedAt:\n          $ref: '#/components/schemas/modifiedAt'\n      additionalProperties:\n        oneOf:\n          - $ref: '#/components/schemas/Property'\n          - $ref: '#/components/schemas/Relationship'\n          - $ref: '#/components/schemas/GeoProperty'\n    Entity:\n      type: object\n      properties:\n        '@context':\n          $ref: '#/components/schemas/LdContext'\n        location:\n          $ref: '#/components/schemas/GeoProperty'\n        observationSpace:\n          $ref: '#/components/schemas/GeoProperty'\n        operationSpace:\n          $ref: '#/components/schemas/GeoProperty'\n        id:\n          type: string\n          format: uri\n        type:\n          $ref: '#/components/schemas/Name'\n        createdAt:\n          $ref: '#/components/schemas/createdAt'\n        modifiedAt:\n          $ref: '#/components/schemas/modifiedAt'\n      additionalProperties:\n        oneOf:\n          - $ref: '#/components/schemas/Property'\n          - $ref: '#/components/schemas/Relationship'\n          - $ref: '#/components/schemas/GeoProperty'\n    Log:\n      type: object\n      properties:\n        removed:\n          type: boolean\n        logIndex:\n          type: integer\n          format: int64\n        transactionIndex:\n          type: integer\n          format: int64\n        transactionHash:\n          type: string\n        blockHash:\n          type: string\n        blockNumber:\n          type: integer\n          format: int64\n        address:\n          type: string\n        data:\n          type: string\n        type:\n          type: string\n        topics:\n          type: array\n          items:\n            type: string\n        transactionIndexRaw:\n          type: string\n        blockNumberRaw:\n          type: string\n        logIndexRaw:\n          type: string\n    TransactionReceipt:\n      type: object\n      properties:\n        transactionHash:\n          type: string\n        blockHash:\n          type: string\n        blockNumber:\n          type: integer\n          format: int64\n        cumulativeGasUsed:\n          type: integer\n          format: int64\n        gasUsed:\n          type: integer\n          format: int64\n        status:\n          type: string\n        from:\n          type: string\n        to:\n          type: string\n        logs:\n          type: array\n          items:\n            $ref: '#/components/schemas/Log'\n        logsBloom:\n          type: string\n        transactionIndexRaw:\n          type: string\n        blockNumberRaw:\n          type: string\n        cumulativeGasUsedRaw:\n          type: string\n        statusOK:\n          type: boolean\n        gasUsedRaw:\n          type: string\n        additionalInformation:\n          type: object\n    EntityTransaction:\n      type: object\n      properties:\n        entityId:\n          type: string\n          format: uri\n        txDetails:\n          type: array\n          items:\n            $ref: '#/components/schemas/TransactionReceipt'\n    EntityTransactionList:\n      type: object\n      properties:\n        offset:\n          type: integer\n          format: int64\n        limit:\n          type: integer\n          format: int64\n        count:\n          type: integer\n          format: int64\n        records:\n          type: array\n          items:\n            $ref: '#/components/schemas/EntityTransaction'",
			"canonicalURL": "/github.com/FIWARE/CanisMajor@f7e5a0c65764cf39c2e57e13d364ed51b8bb93d3/-/blob/api/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/FIWARE/CanisMajor/blob/f7e5a0c65764cf39c2e57e13d364ed51b8bb93d3/api/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/ngsi-ld/v1/entityOperations/upsert\": post: requestBody: contents: application/json: generate schema: item: field location: item: oneOf: collect variants: oneOf[0]: oneOf: oneOf Geometry: variant MultiPoint: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"discriminator inference",
		"unsupported content types"
	]
}