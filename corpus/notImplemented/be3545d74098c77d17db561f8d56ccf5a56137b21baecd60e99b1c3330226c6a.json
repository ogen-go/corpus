{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tmtsoftware/csw"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "docs/src/main/swagger/swagger.yml",
			"byteSize": 16868,
			"content": "openapi: 3.0.0\ninfo:\n  version: '1.0'\n  title: TMT Common Software REST Endpoints\n  description: \u003e-\n    Common Software is the package of services and infrastructure software that\n    integrates the TMT software systems.\n\n    Visit [TMT Website](http://www.tmt.org) for more information.\n\n    Complete codebase is available on [Github](https://github.com/tmtsoftware/csw).\n\n    Collection of routes listed on this page are http end points exposed by TMT common software.\n  x-logo:\n    url: tmt.png\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: Log Admin\n    description:\n      Log admin is the http server started on cluster seed application which\n      exposes end points to get the current logging configuration for particular\n      component as well as it allows administrator to change the log level of\n      running component dynamically.\n  - name: Configuration Service\n    description:\n      Configuration service application start Http server which exposes end\n      points to manage configuration files by storing them in a repository (by\n      default, using Subversion).\npaths:\n  '/admin/logging/{componentName}/level':\n    get:\n      description: \u003e-\n        Returns the current log level details for particular component. Response\n        contains below details :\n        1. DefaultLogLevel\n        2. AkkaLogLevel\n        3. Slf4jLogLevel\n        4. ComponentLogLevel\n      summary: Get Log Metadata\n      tags:\n        - Log Admin\n      operationId: get log metadata\n      parameters:\n        - name: componentName\n          in: path\n          required: true\n          description: Name of the component\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogMetadata'\n        '404':\n          description: Not Found\n    post:\n      description: Dynamically changes the log level of component.\n      summary: Set Log Level\n      tags:\n        - Log Admin\n      operationId: set log level\n      parameters:\n        - name: value\n          in: query\n          required: true\n          description: Updated log level of component.\n          schema:\n            type: string\n            enum:\n              - TRACE\n              - DEBUG\n              - INFO\n              - WARN\n              - ERROR\n              - FATAL\n        - name: componentName\n          in: path\n          required: true\n          description:\n            Name of the component (This is connection name registered with\n            location service. Ex. trombone-hcd-akka).\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n  '/config/{path}':\n    get:\n      description:\n        Fetches the latest version of requested configuration file from the\n        repository either from normal/annex store.\n      summary: Get Config\n      tags:\n        - Configuration Service\n      operationId: get\n      parameters:\n        - name: path\n          in: path\n          required: true\n          description: Store file at provided file path in repository.\n          schema:\n            type: string\n        - name: id\n          in: query\n          required: false\n          description: Revision number of configuration file.\n          schema:\n            type: string\n        - name: date\n          in: query\n          required: false\n          description: Latest version of file on provided timestamp will be retrieved.\n          schema:\n            type: string\n            format: date-time\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: Not Found\n    put:\n      description: Modifies the content of existing file with the updated content.\n      summary: Update Config\n      security:\n        - Bearer: []\n      tags:\n        - Configuration Service\n      operationId: update\n      requestBody:\n        description: configuration content to be updated in configuration service\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n      parameters:\n        - name: comment\n          in: query\n          required: true\n          description: Commit message.\n          schema:\n            type: string\n        - name: path\n          in: path\n          required: true\n          description: Update file at provided file path in repository.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigId'\n        '401':\n          description: The supplied authentication is invalid\n        '403':\n          description: The supplied authentication is not authorized to access this resource\n        '404':\n          description: Not Found\n    post:\n      description: \u003e-\n        Uploads configuration file in the repository.\n\n        Configuraion file is stored in annex store if one of the below condition statisfies else stored in normal store :\n\n        1. Annex flag is true\n\n        2. File size exceeds the maximum size configured in Configuration service.\n      summary: Create Config\n      security:\n        - Bearer: []\n      tags:\n        - Configuration Service\n      operationId: create\n      requestBody:\n        description: configuration content to be stored in configuration service\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n      parameters:\n        - name: comment\n          in: query\n          required: true\n          description: Commit message.\n          schema:\n            type: string\n        - name: path\n          in: path\n          required: true\n          description: Store file at provided file path in repository.\n          schema:\n            type: string\n        - name: annex\n          in: query\n          required: false\n          description: Flag to upload file in Annex store.\n          schema:\n            type: boolean\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigId'\n        '400':\n          description: Bad Request\n        '401':\n          description: The supplied authentication is invalid\n        '403':\n          description: The supplied authentication is not authorized to access this resource\n        '409':\n          description: Conflict\n    delete:\n      description: Removes the configuration file from repository.\n      summary: Delete Config\n      security:\n        - Bearer: []\n      tags:\n        - Configuration Service\n      operationId: delete\n      parameters:\n        - name: comment\n          in: query\n          required: true\n          description: Commit message.\n          schema:\n            type: string\n        - name: path\n          in: path\n          required: true\n          description: Delete file at provided file path from repository.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n        '401':\n          description: The supplied authentication is invalid\n        '403':\n          description: The supplied authentication is not authorized to access this resource\n        '404':\n          description: Not Found\n  '/active-config/{path}':\n    get:\n      description:\n        Retrieves the current active configuration file. If date query parameter\n        is provided, active configuration file on provided timestamp is\n        retrieved.\n      summary: Get Active Config\n      tags:\n        - Configuration Service\n      operationId: get active\n      parameters:\n        - name: path\n          in: path\n          required: true\n          description: Fetch active file at provided file path from repository.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: Not Found\n  '/active-version/{path}':\n    get:\n      description: Fetches the current active version of a configuration file.\n      summary: Get Active Version Of Config\n      tags:\n        - Configuration Service\n      operationId: get active version\n      parameters:\n        - name: path\n          in: path\n          required: true\n          description: Get active version of file at provided path from repository.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigId'\n        '404':\n          description: Not Found\n    put:\n      description:\n        Sets the current active version of file to the master (latest version of\n        file).\n      summary: Reset Active Version Of Config\n      security:\n        - Bearer: []\n      tags:\n        - Configuration Service\n      operationId: reset active version\n      parameters:\n        - name: comment\n          in: query\n          required: true\n          description: Commit message.\n          schema:\n            type: string\n        - name: path\n          in: path\n          required: true\n          description:\n            Reset the active version of file at provided file path from\n            repository to master.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n        '401':\n          description: The supplied authentication is invalid\n        '403':\n          description: The supplied authentication is not authorized to access this resource\n        '404':\n          description: Not Found\n  /list:\n    get:\n      description: Returns the path of all the configuration files available in\n        annex/normal store.\n      summary: List Configs\n      tags:\n        - Configuration Service\n      operationId: list\n      parameters:\n        - name: fileType\n          in: query\n          required: false\n          description: One of annex/normal File type.\n          schema:\n            type: string\n            enum:\n              - annex\n              - normal\n        - name: pattern\n          in: query\n          required: false\n          description: Regular expression to filter list of files.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigFileInfo'\n  '/history/{path}':\n    get:\n      description:\n        Retrieves id, comment and timestamp of all the revisons of configuration\n        files.\n      summary: Get Config History\n      tags:\n        - Configuration Service\n      operationId: history\n      parameters:\n        - name: path\n          in: path\n          required: true\n          description: Repository file path.\n          schema:\n            type: string\n        - name: maxResults\n          in: query\n          required: false\n          description: Maximum number of results to be fetched.\n          schema:\n            type: number\n        - name: from\n          in: query\n          required: false\n          description: Retrieves active revisions history from provided timestamp onwards.\n          schema:\n            type: string\n        - name: to\n          in: query\n          required: false\n          description: Retrieves active revisions history till the provided timestamp.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigFileRevision'\n        '404':\n          description: Not Found\n  '/history-active/{path}':\n    get:\n      description:\n        Retrieves id, comment and timestamp of only active revisons of\n        configuration files.\n      summary: Get Active Config History\n      tags:\n        - Configuration Service\n      operationId: history-active\n      parameters:\n        - name: path\n          in: path\n          required: true\n          description: Repository file path for which history is returned.\n          schema:\n            type: string\n        - name: maxResults\n          in: query\n          required: false\n          description: Maximum number of results to be fetched.\n          schema:\n            type: number\n        - name: from\n          in: query\n          required: false\n          description: Retrieves active revisions history from provided timestamp onwards.\n          schema:\n            type: string\n        - name: to\n          in: query\n          required: false\n          description: Retrieves active revisions history till the provided timestamp.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigFileRevision'\n        '404':\n          description: Not Found\n  /metadata:\n    get:\n      description: |-\n        Retreives following metadata of Configuration service :\n        1. Repository Path\n        2. Annex store Path\n        3. Annex file min Size\n        4. Max Config File Size\n      summary: Get Repo Metadata\n      tags:\n        - Configuration Service\n      operationId: get metadata\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigMetaData'\n        '500':\n          description: Internal Server Error\nservers:\n  - url: http://localhost:4000/\ncomponents:\n  securitySchemes:\n    Bearer:\n      description:\n        Represents Access token that applications use to make API requests on behalf of a user.\n        The access token represents the authorization of a specific application to access specific parts of a user’s data.\n        Config service admin API requires you to provide this access token in header.\n        To know more on how to authenticate and authorize yourself and get access token, refer this http://tmtsoftware.github.io/csw/services/aas.html\n      type: apiKey\n      name: Authorization\n      in: header\n  schemas:\n    ConfigIdFlat:\n      description: Revision number of configuration file.\n      type: string\n      example: '1'\n    ConfigId:\n      type: object\n      properties:\n        id:\n          allOf:\n            - $ref: '#/components/schemas/ConfigIdFlat'\n    ConfigFileRevision:\n      type: object\n      properties:\n        id:\n          allOf:\n            - $ref: '#/components/schemas/ConfigIdFlat'\n        comment:\n          description: Commit message.\n          type: string\n          example: This is sample commit message.\n        time:\n          description: File updation timestamp.\n          type: string\n          example: 2017-05-06T07:10:38.385Z\n    ConfigFileInfo:\n      type: object\n      properties:\n        path:\n          description: Repository file path\n          type: string\n          example: /hcd/trombone.conf\n        id:\n          allOf:\n            - $ref: '#/components/schemas/ConfigIdFlat'\n        comment:\n          description: Commit message.\n          type: string\n          example: This is sample commit message.\n    ConfigMetaData:\n      type: object\n      properties:\n        repoPath:\n          description: Repository file path.\n          type: string\n          example: /tmp/csw-config-svn\n        annexPath:\n          description: Annex repository file path.\n          type: string\n          example: /tmp/csw-config-annex-files\n        annexMinFileSize:\n          description:\n            Minimum file size limit, above which file will be uploaded in annex\n            store.\n          type: string\n          example: 10 MiB\n        maxConfigFileSize:\n          description:\n            Maximum allowed size for configuration file to be uploaded in\n            repository.\n          type: string\n          example: 50 MiB\n    Level:\n      type: string\n      enum:\n        - TRACE\n        - DEBUG\n        - INFO\n        - WARN\n        - ERROR\n        - FATAL\n      example: INFO\n    LogMetadata:\n      type: object\n      properties:\n        defaultLevel:\n          description: Default log level.\n          allOf:\n            - $ref: '#/components/schemas/Level'\n        akkaLevel:\n          description: Akka log level.\n          allOf:\n            - $ref: '#/components/schemas/Level'\n        slf4jLevel:\n          description: Slf4j log level.\n          allOf:\n            - $ref: '#/components/schemas/Level'\n        componentLevel:\n          description: Component specific log level.\n          allOf:\n            - $ref: '#/components/schemas/Level'\n",
			"canonicalURL": "/github.com/tmtsoftware/csw@98771982d4829e20e0e8485d8e09d9873542b961/-/blob/docs/src/main/swagger/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/tmtsoftware/csw/blob/98771982d4829e20e0e8485d8e09d9873542b961/docs/src/main/swagger/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/config/{path}\": put: requestBody: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}