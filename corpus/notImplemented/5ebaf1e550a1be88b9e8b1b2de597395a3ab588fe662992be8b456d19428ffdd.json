{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/scionproto/scion"
		},
		"file": {
			"name": "ca.gen.yml",
			"size": 0,
			"path": "spec/ca.gen.yml",
			"byteSize": 11242,
			"content": "# GENERATED FILE DO NOT EDIT\nopenapi: 3.0.3\ninfo:\n  title: CA Service\n  version: 0.1.0\n  description: API for renewing SCION certificates.\nservers:\n  - url: https://api.server.test/v1\n    description: Server endpoints need to be defined yet\ntags:\n  - name: Registration Authority\n    description: Registration Authority related endpoints\n  - name: Authentication\n    description: Service authentication related endpoints\n  - name: Process\n    description: Process related information\npaths:\n  /ra/isds/{isd-number}/ases/{as-number}/certificates/renewal:\n    parameters:\n      - name: isd-number\n        in: path\n        required: true\n        description: \u003e-\n          ISD number of the Autonomous System requesting the certificate chain\n          renewal.\n        schema:\n          type: integer\n        example: 1\n      - name: as-number\n        in: path\n        required: true\n        description: \u003e-\n          AS Number of the Autonomous System requesting the certificate chain\n          renewal.\n        schema:\n          $ref: '#/components/schemas/AS'\n    post:\n      summary: Renew an existing AS certificate\n      description: Request the renewal of an existing AS certificate.\n      security:\n        - BearerAuth: []\n      operationId: post-certificate-renewal\n      tags:\n        - Registration Authority\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RenewalRequest'\n      responses:\n        '200':\n          description: Renewed certificate chain\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RenewalResponse'\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: '#/components/responses/401-UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/404-NotFound'\n        '500':\n          $ref: '#/components/responses/500-InternalServerError'\n        '503':\n          $ref: '#/components/responses/503-ServiceUnavailable'\n  /auth/token:\n    post:\n      summary: Authenticate the SCION control service\n      description: |\n        Authenticates the calling control service and returns the JWT access\n        token. Alternatively, the Control Service can create the JWT access\n        token directly by signing it with the shared secret.\n      operationId: post-auth-token\n      tags:\n        - Authentication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AccessCredentials'\n      responses:\n        '200':\n          description: JWT Access Token.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessToken'\n        '400':\n          $ref: '#/components/responses/400-BadRequest'\n        '401':\n          $ref: '#/components/responses/401-UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/500-InternalServerError'\n        '503':\n          $ref: '#/components/responses/503-ServiceUnavailable'\n  /healthcheck:\n    get:\n      summary: Test the availability of the CA service\n      operationId: get-healthcheck\n      tags:\n        - Process\n      responses:\n        '200':\n          description: Service health status\n          headers:\n            Cache-Control:\n              description: Disable caching for health checks.\n              schema:\n                type: string\n                enum:\n                  - no-store\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthCheckStatus'\n        '500':\n          $ref: '#/components/responses/500-InternalServerError'\n        '503':\n          $ref: '#/components/responses/503-ServiceUnavailable'\ncomponents:\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    AS:\n      title: AS Identifier\n      type: string\n      pattern: ^([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\\d+$\n      example: ff00:0:110\n    RenewalRequest:\n      type: object\n      properties:\n        csr:\n          type: string\n          format: byte\n          description: |\n            Base64 encoded renewal request as described below.\n\n            The renewal requests consists of a CMS SignedData structure that\n            contains a PKCS#10 defining the parameters of the requested\n            certificate.\n\n            The following must hold for the CMS structure:\n\n            - The `certificates` field in `SignedData` MUST contain an existing\n              and verifiable certificate chain that authenticates the private\n              key that was used to sign the CMS structure. It MUST NOT contain\n              any other certificates.\n\n            - The `eContentType` is set to `id-data`. The contents of `eContent`\n              is the ASN.1 DER encoded PKCS#10. This ensures backwards\n              compatibility with PKCS#7, as described in\n              [RFC5652](https://tools.ietf.org/html/rfc5652#section-5.2.1)\n\n            - The `SignerIdentifier` MUST be the choice `IssuerAndSerialNumber`,\n              thus, `version` in `SignerInfo` must be 1, as required by\n              [RFC5652](https://tools.ietf.org/html/rfc5652#section-5.3)\n      required:\n        - csr\n    CertificateChain:\n      type: object\n      properties:\n        as_certificate:\n          type: string\n          format: byte\n          description: |\n            Base64 encoded AS certificate.\n        ca_certificate:\n          type: string\n          format: byte\n          description: |\n            Base64 encoded CA certificate.\n      required:\n        - as_certificate\n        - ca_certificate\n    CertificateChainPKCS7:\n      type: string\n      format: byte\n      description: |\n        Certificate chain containing the the new AS certificate and the issuing\n        CA certificate encoded in a degenerate PKCS#7 data structure.\n    RenewalResponse:\n      type: object\n      properties:\n        certificate_chain:\n          oneOf:\n            - $ref: '#/components/schemas/CertificateChain'\n            - $ref: '#/components/schemas/CertificateChainPKCS7'\n      required:\n        - certificate_chain\n    Problem:\n      type: object\n      description: |\n        Error message encoded as specified in\n        [RFC7807](https://tools.ietf.org/html/rfc7807)\n      properties:\n        type:\n          type: string\n          format: uri-reference\n          description: \u003e-\n            A URI reference that uniquely identifies the problem type in the\n            context of the provided API.\n          default: about:blank\n          example: /problem/policy-violation\n        title:\n          type: string\n          description: \u003e-\n            A short summary of the problem type. Written in English and readable\n            for engineers, usually not suited for non technical stakeholders and\n            not localized.\n          example: Policy Violation\n        status:\n          type: integer\n          description: \u003e-\n            The HTTP status code generated by the server for this occurrence of\n            the problem.\n          minimum: 100\n          maximum: 599\n          example: 400\n        detail:\n          type: string\n          description: \u003e-\n            A human readable explanation specific to this occurrence of the\n            problem that is helpful to locate the problem and give advice on how\n            to proceed. Written in English and readable for engineers, usually\n            not suited for non technical stakeholders and not localized.\n          example: \u003e-\n            The CSR sent violates the certification policy of the issuing CA.\n            Field CN must not contain underscore characters.\n        instance:\n          type: string\n          format: uri-reference\n          description: \u003e-\n            A URI reference that identifies the specific occurrence of the\n            problem, e.g. by adding a fragment identifier or sub-path to the\n            problem type.\n          example: /problem/policy-violation#cn-malformed\n        correlation_id:\n          type: string\n          format: uuid\n          description: Identifier to correlate multiple error messages to the same case.\n          example: 7D99A76F-9BA5-4C15-A1C9-114A54D9B1F1\n      required:\n        - type\n        - title\n        - status\n    AccessCredentials:\n      type: object\n      properties:\n        client_id:\n          type: string\n          description: ID of the control service requesting authentication.\n        client_secret:\n          type: string\n          description: Secret that authenticates the control service.\n      required:\n        - client_id\n        - client_secret\n    AccessToken:\n      type: object\n      properties:\n        access_token:\n          type: string\n          description: The encoded JWT token\n          example: \u003e-\n            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n        token_type:\n          description: Type of returned access token. Currently always Bearer.\n          type: string\n          enum:\n            - Bearer\n          example: Bearer\n        expires_in:\n          type: integer\n          description: Validity duration of this token in seconds.\n          example: 3600\n      required:\n        - access_token\n        - token_type\n        - expires_in\n    HealthCheckStatus:\n      type: object\n      properties:\n        status:\n          type: string\n          enum:\n            - available\n            - starting\n            - stopping\n            - unavailable\n      required:\n        - status\n  responses:\n    400-BadRequest:\n      description: \u003e\n        The request is malformed or lacks required information.\n\n        - Incomplete request structure (protocol error)\n\n        - Request information violates PKI policy requirements (application\n        error)\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/Problem'\n    401-UnauthorizedError:\n      description: |\n        Authorization information missing or invalid.\n          - No authentication information available (protocol error)\n          - Authentication token unknown. Meaning, the Control Service has no\n            access (application error)\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/Problem'\n    404-NotFound:\n      description: \u003e\n        The requested resource does not exist.\n\n        - Request acts on an unknown resource like an unknown AS (application\n        error)\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/Problem'\n    500-InternalServerError:\n      description: Unexpected internal server error.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/Problem'\n    503-ServiceUnavailable:\n      description: Service unavailable due to maintenance work.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/Problem'\n",
			"canonicalURL": "/github.com/scionproto/scion@93f69bdb1527af31965c1bc312abba21091bfc80/-/blob/spec/ca.gen.yml",
			"externalURLs": [
				{
					"url": "https://github.com/scionproto/scion/blob/93f69bdb1527af31965c1bc312abba21091bfc80/spec/ca.gen.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/auth/token\": post: responses: 400: contents: unsupported content types: [application/problem+json]",
	"NotImplemented": [
		"unsupported content types"
	]
}