{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/scionproto/scion"
		},
		"file": {
			"name": "control.gen.yml",
			"size": 0,
			"path": "spec/control.gen.yml",
			"byteSize": 29273,
			"content": "# GENERATED FILE DO NOT EDIT\nopenapi: 3.0.2\ninfo:\n  description: API for the SCION Control Service\n  title: Control Service API\n  version: 0.0.1\nservers:\n  - url: http://{host}:{port}\n    variables:\n      host:\n        default: localhost\n      port:\n        default: '30452'\ntags:\n  - name: segment\n    description: Everything related to SCION path segments.\n  - name: cppki\n    description: Everything related to SCION CPPKI material.\n  - name: common\n    description: Common API exposed by SCION services.\n  - name: health\n    description: Endpoints related to the health status of services.\npaths:\n  /segments:\n    get:\n      tags:\n        - segment\n      summary: List the SCION path segments\n      description: \u003e-\n        List the SCION path segments that are known to the service. The results\n        can be filtered by the start and end AS of the segment. Inspect the\n        individual segments for a more detailed view.\n      operationId: get-segments\n      parameters:\n        - in: query\n          description: Start ISD-AS of segment.\n          name: start_isd_as\n          example: 1-ff00:0:110\n          schema:\n            $ref: '#/components/schemas/IsdAs'\n        - in: query\n          description: Terminal AS of segment.\n          name: end_isd_as\n          example: 2-ff00:0:210\n          schema:\n            $ref: '#/components/schemas/IsdAs'\n      responses:\n        '200':\n          description: List of matching SCION path segments.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SegmentBrief'\n        '400':\n          description: Invalid request\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Problem'\n  /segments/{segment-id}:\n    get:\n      tags:\n        - segment\n      summary: Get the SCION path segment description\n      description: Get the description of a specific SCION path segment.\n      operationId: get-segment\n      parameters:\n        - in: path\n          name: segment-id\n          required: true\n          schema:\n            $ref: '#/components/schemas/SegmentID'\n          style: simple\n          explode: false\n      responses:\n        '200':\n          description: SCION path segment information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Segment'\n        '400':\n          description: Invalid request\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Problem'\n  /segments/{segment-id}/blob:\n    get:\n      tags:\n        - segment\n      summary: Get the SCION path segment blob\n      description: Get the SCION path segment encoded as PEM bytes blob.\n      operationId: get-segment-blob\n      parameters:\n        - in: path\n          name: segment-id\n          required: true\n          schema:\n            $ref: '#/components/schemas/SegmentID'\n          style: simple\n          explode: false\n      responses:\n        '200':\n          description: SCION path segment blob\n          content:\n            application/x-pem-file:\n              example: |\n                -----BEGIN PATH SEGMENT-----\n                SCIONPathSegment ...\n                -----END PATH SEGMENT-----\n        '400':\n          description: Invalid request\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Problem'\n  /signer:\n    get:\n      tags:\n        - cppki\n      summary: \u003e-\n        Prints information about the AS Certificate used to sign the\n        control-plane message.\n      operationId: get-signer\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Signer'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /signer/blob:\n    get:\n      tags:\n        - cppki\n      summary: Get the certificate chain blob\n      description: |\n        Get the certificate chain blob encoded as PEM.\n      operationId: get-signer-chain\n      responses:\n        '200':\n          description: Certificate chain blob\n          content:\n            application/x-pem-file:\n              example: |\n                -----BEGIN CERTIFICATE-----\n                ASCertificate ...\n                -----END CERTIFICATE-----\n                -----BEGIN CERTIFICATE-----\n                CACertificate ...\n                -----END CERTIFICATE-----\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /ca:\n    get:\n      tags:\n        - cppki\n      summary: Information about the CA.\n      operationId: get-ca\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CA'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /trcs:\n    get:\n      tags:\n        - cppki\n      summary: List the TRCs\n      description: \u003e-\n        List the latest SCION Trust Root Configurations for each ISD that are\n        known to the control service. The result can be filtered by ISD.\n        Optionally, all TRCs can be requested instead of only the latest ones.\n      operationId: get-trcs\n      parameters:\n        - in: query\n          name: isd\n          schema:\n            type: array\n            items:\n              type: integer\n          style: form\n          explode: false\n        - in: query\n          name: all\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: List of applicable TRCs.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TRCBrief'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /trcs/isd{isd}-b{base}-s{serial}:\n    get:\n      tags:\n        - cppki\n      summary: Get the TRC\n      description: |\n        Get the SCION Trust Root Configuration.\n      operationId: get-trc\n      parameters:\n        - in: path\n          name: isd\n          required: true\n          schema:\n            type: integer\n            example: 42\n        - in: path\n          name: base\n          required: true\n          schema:\n            type: integer\n            example: 1\n        - in: path\n          name: serial\n          required: true\n          schema:\n            type: integer\n            example: 3\n      responses:\n        '200':\n          description: TRC.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TRC'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /trcs/isd{isd}-b{base}-s{serial}/blob:\n    get:\n      tags:\n        - cppki\n      summary: Get the TRC blob\n      description: |\n        Get the SCION Trust Root Configuration as PEM encoded byte blob.\n      operationId: get-trc-blob\n      parameters:\n        - in: path\n          name: isd\n          required: true\n          schema:\n            type: integer\n            example: 42\n        - in: path\n          name: base\n          required: true\n          schema:\n            type: integer\n            example: 1\n        - in: path\n          name: serial\n          required: true\n          schema:\n            type: integer\n            example: 3\n      responses:\n        '200':\n          description: TRC blob\n          content:\n            application/x-pem-file:\n              example: |\n                -----BEGIN TRC-----\n                ZjAwOjA6MTEwI ...\n                -----END TRC-----\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /certificates:\n    get:\n      tags:\n        - cppki\n      summary: List the certificate chains\n      description: |\n        List the currently active certificate chains that are known to the\n        control service. The result can be filtered by ISD-AS. Furthermore,\n        one can pass a particular point in time at which the certificate\n        chains are valid as input. A boolean can be provided to return all\n        certificates, regardless of their period of vailidity.\n      operationId: get-certificates\n      parameters:\n        - in: query\n          name: isd_as\n          schema:\n            $ref: '#/components/schemas/IsdAs'\n        - in: query\n          name: valid_at\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          name: all\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: List of certificate chains\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ChainBrief'\n        '400':\n          description: Invalid request\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Problem'\n  /certificates/{chain-id}:\n    get:\n      tags:\n        - cppki\n      summary: Get the certificate chain\n      description: |\n        Get the certificate chain for a given ChainID.\n      operationId: get-certificate\n      parameters:\n        - in: path\n          name: chain-id\n          required: true\n          schema:\n            $ref: '#/components/schemas/ChainID'\n      responses:\n        '200':\n          description: Certificate chain\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Chain'\n        '400':\n          description: Invalid request\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Problem'\n  /certificates/{chain-id}/blob:\n    get:\n      tags:\n        - cppki\n      summary: Get the certificate chain blob\n      description: |\n        Get the certificate chain encoded as PEM bytes blob for a given ChainID.\n      operationId: get-certificate-blob\n      parameters:\n        - in: path\n          name: chain-id\n          required: true\n          schema:\n            $ref: '#/components/schemas/ChainID'\n      responses:\n        '200':\n          description: Certificate chain blob\n          content:\n            application/x-pem-file:\n              example: |\n                -----BEGIN CERTIFICATE-----\n                ASCertificate ...\n                -----END CERTIFICATE-----\n                -----BEGIN CERTIFICATE-----\n                CACertificate ...\n                -----END CERTIFICATE-----\n        '400':\n          description: Invalid request\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Problem'\n  /info:\n    get:\n      tags:\n        - common\n      summary: Basic information page about the control service process.\n      operationId: get-info\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            text/plain:\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /log/level:\n    get:\n      tags:\n        - common\n      summary: Get logging level\n      operationId: get-log-level\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogLevel'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n    put:\n      tags:\n        - common\n      summary: Set logging level\n      operationId: set-log-level\n      requestBody:\n        description: Logging Level\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LogLevel'\n        required: true\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogLevel'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /config:\n    get:\n      tags:\n        - common\n      summary: Prints the TOML configuration file.\n      operationId: get-config\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            text/plain:\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /topology:\n    get:\n      tags:\n        - common\n      summary: Prints the contents of the AS topology file.\n      operationId: get-topology\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Topology'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /beacons:\n    get:\n      tags:\n        - beacon\n      summary: List the SCION beacons\n      description: \u003e-\n        List the SCION beacons that are known to the control service. The\n        results can be filtered by the start AS, ingress interface and usage of\n        the beacon. By default, all unexpired beacons are returned. This\n        behavior can be changed with the `all` and `valid_at` parameters.\n      operationId: get-beacons\n      parameters:\n        - in: query\n          description: \u003e-\n            Start ISD-AS of beacons. The address can include wildcards (0) both\n            for the ISD and AS identifier.\n          name: start_isd_as\n          example: 1-ff00:0:110\n          schema:\n            $ref: '#/components/schemas/IsdAs'\n        - in: query\n          description: \u003e-\n            Minimum allowed usages of the returned beacons. Only beacons that\n            are allowed in all the usages in the list will be returned.\n          name: usages\n          example:\n            - up_registration\n            - down_registration\n          schema:\n            $ref: '#/components/schemas/BeaconUsages'\n        - in: query\n          description: Ingress interface id.\n          name: ingress_interface\n          example: 2\n          schema:\n            type: integer\n            minimum: 0\n            maximum: 65535\n        - in: query\n          description: \u003e-\n            Timestamp at which returned beacons are valid. If unset then the\n            current datetime is used. This only has an effect if `all=false`.\n          name: valid_at\n          example: '2021-11-25T12:20:50.52Z'\n          schema:\n            type: string\n            format: date-time\n        - in: query\n          description: Include beacons regardless of expiration and creation time.\n          name: all\n          schema:\n            type: boolean\n            default: false\n        - in: query\n          description: Whether to reverse the sort order (ascending by default).\n          name: desc\n          schema:\n            default: false\n            type: boolean\n        - in: query\n          description: \u003e-\n            Attribute by which results are sorted. The value `start_isd_as`\n            refers to the ISD-AS identifier of the first hop.\n          name: sort\n          example: expiration\n          schema:\n            type: string\n            default: last_updated\n            enum:\n              - expiration\n              - timestamp\n              - start_isd_as\n              - last_updated\n              - ingress_interface\n      responses:\n        '200':\n          description: List of matching SCION beacons.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  beacons:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Beacon'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /beacons/{segment-id}:\n    get:\n      tags:\n        - beacon\n      summary: Get the SCION beacon description\n      description: Get the description of a specific SCION beacon.\n      operationId: get-beacon\n      parameters:\n        - in: path\n          name: segment-id\n          description: \u003e-\n            The segment ID of the beacon segment. If the input value is shorter\n            than a segment ID, but matches the prefix of the segment ID of\n            exactly one beacon, then this beacon is returned.\n          required: true\n          schema:\n            $ref: '#/components/schemas/SegmentID'\n          style: simple\n          explode: false\n      responses:\n        '200':\n          description: SCION beacon information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BeaconGetResponseJson'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /beacons/{segment-id}/blob:\n    get:\n      tags:\n        - beacon\n      summary: Get the SCION beacon blob\n      description: Get the SCION beacon blob in PEM encoding.\n      operationId: get-beacon-blob\n      parameters:\n        - in: path\n          name: segment-id\n          required: true\n          schema:\n            $ref: '#/components/schemas/SegmentID'\n          style: simple\n          explode: false\n      responses:\n        '200':\n          description: SCION beacon blob\n          content:\n            application/x-pem-file:\n              example: |\n                -----BEGIN PATH SEGMENT-----\n                SCIONBeacon...\n                -----END PATH SEGMENT-----\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /health:\n    get:\n      tags:\n        - health\n      summary: Indicate the service health.\n      description: Present the health of the service along with the executed health checks.\n      operationId: get-health\n      responses:\n        '200':\n          description: Service health information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\ncomponents:\n  schemas:\n    IsdAs:\n      title: ISD-AS Identifier\n      type: string\n      pattern: ^\\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\\d+$\n      example: 1-ff00:0:110\n    SegmentID:\n      title: Segment Identifier\n      type: string\n      example: fb45d44d\n      format: hex-string\n    SegmentBrief:\n      title: Brief SCION path segment description\n      type: object\n      required:\n        - id\n        - start_isd_as\n        - end_isd_as\n        - length\n      properties:\n        id:\n          $ref: '#/components/schemas/SegmentID'\n        start_isd_as:\n          $ref: '#/components/schemas/IsdAs'\n        end_isd_as:\n          $ref: '#/components/schemas/IsdAs'\n        length:\n          description: Length of the segment.\n          type: integer\n          example: 1\n    Problem:\n      type: object\n      required:\n        - status\n        - title\n      properties:\n        type:\n          type: string\n          format: uri-reference\n          description: \u003e-\n            A URI reference that uniquely identifies the problem type only in\n            the context of the provided API. Opposed to the specification in\n            RFC-7807, it is neither recommended to be dereferencable and point\n            to a human-readable documentation nor globally unique for the\n            problem type.\n          default: about:blank\n          example: /problem/connection-error\n        title:\n          type: string\n          description: \u003e-\n            A short summary of the problem type. Written in English and readable\n            for engineers, usually not suited for non technical stakeholders and\n            not localized.\n          example: Service Unavailable\n        status:\n          type: integer\n          description: \u003e-\n            The HTTP status code generated by the origin server for this\n            occurrence of the problem.\n          minimum: 100\n          maximum: 599\n          example: 503\n        detail:\n          type: string\n          description: \u003e-\n            A human readable explanation specific to this occurrence of the\n            problem that is helpful to locate the problem and give advice on how\n            to proceed. Written in English and readable for engineers, usually\n            not suited for non technical stakeholders and not localized.\n          example: Connection to database timed out\n        instance:\n          type: string\n          format: uri-reference\n          description: \u003e-\n            A URI reference that identifies the specific occurrence of the\n            problem, e.g. by adding a fragment identifier or sub-path to the\n            problem type. May be used to locate the root of this problem in the\n            source code.\n          example: /problem/connection-error#token-info-read-timed-out\n    Hop:\n      title: Path segment hop\n      type: object\n      required:\n        - isd_as\n        - interface\n      properties:\n        isd_as:\n          $ref: '#/components/schemas/IsdAs'\n        interface:\n          type: integer\n          example: 42\n    Segment:\n      title: SCION path segment description\n      type: object\n      required:\n        - id\n        - timestamp\n        - expiration\n        - last_updated\n        - hops\n      properties:\n        id:\n          $ref: '#/components/schemas/SegmentID'\n        timestamp:\n          type: string\n          format: date-time\n        expiration:\n          type: string\n          format: date-time\n        last_updated:\n          type: string\n          format: date-time\n        hops:\n          type: array\n          items:\n            $ref: '#/components/schemas/Hop'\n    Validity:\n      title: Validity period\n      type: object\n      required:\n        - not_before\n        - not_after\n      properties:\n        not_before:\n          type: string\n          format: date-time\n          example: '2021-01-04T09:59:33Z'\n        not_after:\n          type: string\n          format: date-time\n          example: '2022-01-04T09:59:33Z'\n    SubjectKeyID:\n      type: string\n      format: spaced-hex-string\n      example: 89 B9 49 C2 2F 2F 9C DD 0D 2A 57 A9 DE 8E 2F 95 F3 09 10 D1\n    Certificate:\n      title: Certificate description\n      type: object\n      required:\n        - distinguished_name\n        - isd_as\n        - validity\n        - subject_key_algo\n        - subject_key_id\n      properties:\n        distinguished_name:\n          type: string\n        isd_as:\n          $ref: '#/components/schemas/IsdAs'\n        validity:\n          $ref: '#/components/schemas/Validity'\n        subject_key_algo:\n          type: string\n          example: ECDSA\n        subject_key_id:\n          $ref: '#/components/schemas/SubjectKeyID'\n    TRCID:\n      title: TRC Identifier\n      type: object\n      required:\n        - isd\n        - base_number\n        - serial_number\n      properties:\n        isd:\n          type: integer\n          example: 42\n        base_number:\n          type: integer\n          example: 1\n        serial_number:\n          type: integer\n          example: 3\n    Signer:\n      title: Control plane signer information\n      type: object\n      required:\n        - expiration\n        - as_certificate\n        - trc_id\n        - trc_in_grace_period\n      properties:\n        expiration:\n          description: Signer expiration imposed by chain and TRC validity.\n          type: string\n          format: date-time\n          example: '2022-01-04T09:59:33Z'\n        as_certificate:\n          $ref: '#/components/schemas/Certificate'\n        trc_id:\n          $ref: '#/components/schemas/TRCID'\n        trc_in_grace_period:\n          description: |\n            TRC used as trust root is in grace period, and the latest TRC cannot\n            be used as trust root.\n          type: boolean\n    StandardError:\n      type: object\n      properties:\n        error:\n          type: string\n          description: Error message\n      required:\n        - error\n    Subject:\n      type: object\n      required:\n        - isd_as\n      properties:\n        isd_as:\n          $ref: '#/components/schemas/IsdAs'\n    Policy:\n      type: object\n      required:\n        - chain_lifetime\n      properties:\n        chain_lifetime:\n          type: string\n          example: 72h0m0s\n    CA:\n      type: object\n      required:\n        - subject\n        - subject_key_id\n        - policy\n        - cert_validity\n      properties:\n        subject:\n          $ref: '#/components/schemas/Subject'\n        subject_key_id:\n          $ref: '#/components/schemas/SubjectKeyID'\n        policy:\n          $ref: '#/components/schemas/Policy'\n        cert_validity:\n          $ref: '#/components/schemas/Validity'\n    TRCBrief:\n      title: Brief TRC description\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          $ref: '#/components/schemas/TRCID'\n    TRC:\n      title: TRC description\n      type: object\n      required:\n        - id\n        - validity\n        - core_ases\n        - authoritative_ases\n        - description\n      properties:\n        id:\n          $ref: '#/components/schemas/TRCID'\n        validity:\n          $ref: '#/components/schemas/Validity'\n        core_ases:\n          type: array\n          items:\n            $ref: '#/components/schemas/IsdAs'\n        authoritative_ases:\n          type: array\n          items:\n            $ref: '#/components/schemas/IsdAs'\n        description:\n          type: string\n    ChainID:\n      title: Certificate chain Identifier\n      type: string\n      example: fa53a04a\n      format: hex-string\n    ChainBrief:\n      title: Brief certificate chain description\n      type: object\n      required:\n        - id\n        - subject\n        - issuer\n        - validity\n      properties:\n        id:\n          $ref: '#/components/schemas/ChainID'\n        subject:\n          $ref: '#/components/schemas/IsdAs'\n        issuer:\n          $ref: '#/components/schemas/IsdAs'\n        validity:\n          $ref: '#/components/schemas/Validity'\n    Chain:\n      title: Certificate chain description\n      type: object\n      required:\n        - subject\n        - issuer\n      properties:\n        subject:\n          $ref: '#/components/schemas/Certificate'\n        issuer:\n          $ref: '#/components/schemas/Certificate'\n    LogLevel:\n      type: object\n      properties:\n        level:\n          type: string\n          example: info\n          description: Logging level\n          enum:\n            - debug\n            - info\n            - error\n      required:\n        - level\n    Topology:\n      type: object\n      additionalProperties: true\n    BeaconUsage:\n      title: Allowed Beacon usage.\n      type: string\n      enum:\n        - up_registration\n        - down_registration\n        - core_registration\n        - propagation\n    BeaconUsages:\n      title: List of allowed beacon usages.\n      type: array\n      items:\n        $ref: '#/components/schemas/BeaconUsage'\n      uniqueItems: true\n    Beacon:\n      title: SCION path-segment construction beacon\n      allOf:\n        - $ref: '#/components/schemas/Segment'\n        - type: object\n          required:\n            - usages\n            - ingress_interface\n          properties:\n            usages:\n              $ref: '#/components/schemas/BeaconUsages'\n            ingress_interface:\n              description: Ingress interface of the beacon.\n              type: integer\n    BeaconGetResponseJson:\n      type: object\n      required:\n        - beacon\n      properties:\n        beacon:\n          $ref: '#/components/schemas/Beacon'\n    Status:\n      title: Health status of the service.\n      type: string\n      example: passing\n      enum:\n        - passing\n        - degraded\n        - failing\n    CheckData:\n      title: Free form additional data for the health check.\n      type: object\n      additionalProperties: true\n    Check:\n      title: Health Check.\n      type: object\n      required:\n        - name\n        - status\n        - data\n      properties:\n        name:\n          description: Name of health check.\n          type: string\n          example: valid signer available\n        status:\n          $ref: '#/components/schemas/Status'\n        data:\n          $ref: '#/components/schemas/CheckData'\n        reason:\n          description: Reason for check failure.\n          type: string\n          example: ''\n        detail:\n          description: Additional information.\n          type: string\n          example: ''\n    Health:\n      title: Summary of health status and checks.\n      type: object\n      required:\n        - status\n        - checks\n      properties:\n        status:\n          $ref: '#/components/schemas/Status'\n        checks:\n          description: List of health checks.\n          type: array\n          items:\n            $ref: '#/components/schemas/Check'\n    HealthResponse:\n      title: Service health information.\n      type: object\n      required:\n        - health\n      properties:\n        health:\n          $ref: '#/components/schemas/Health'\n  responses:\n    BadRequest:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/StandardError'\n",
			"canonicalURL": "/github.com/scionproto/scion@93f69bdb1527af31965c1bc312abba21091bfc80/-/blob/spec/control.gen.yml",
			"externalURLs": [
				{
					"url": "https://github.com/scionproto/scion/blob/93f69bdb1527af31965c1bc312abba21091bfc80/spec/control.gen.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/segments\": get: responses: 400: contents: unsupported content types: [application/problem+json]",
	"NotImplemented": [
		"unsupported content types"
	]
}