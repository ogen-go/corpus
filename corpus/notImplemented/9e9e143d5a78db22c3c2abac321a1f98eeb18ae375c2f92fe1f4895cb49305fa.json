{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tsuru/go-tsuruclient"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/openapi.yaml",
			"byteSize": 199744,
			"content": "openapi: 3.0.1\ninfo:\n  description: Open source, extensible and Docker-based Platform as a Service (PaaS)\n  title: Tsuru\n  version: \"1.6\"\nservers:\n- url: /\npaths:\n  /1.0/services:\n    get:\n      description: List services\n      operationId: ServicesList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ServiceList'\n                type: array\n          description: Services\n        204:\n          content: {}\n          description: No content\n      security:\n      - Bearer: []\n      tags:\n      - service\n    post:\n      description: Creates a new service\n      operationId: ServiceCreate\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Service'\n        required: true\n      responses:\n        201:\n          content: {}\n          description: Services\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service not found\n      security:\n      - Bearer: []\n      tags:\n      - service\n  /1.0/services/{name}:\n    delete:\n      description: Delete a service\n      operationId: ServiceDelete\n      parameters:\n      - description: Service name.\n        in: path\n        name: name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Service removed\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Forbidden\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service not found\n      security:\n      - Bearer: []\n      tags:\n      - service\n    get:\n      description: Information on a service\n      operationId: ServiceInfo\n      parameters:\n      - description: Service name.\n        in: path\n        name: name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ServiceInfo'\n                type: array\n          description: Service removed\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Forbidden\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service not found\n      security:\n      - Bearer: []\n      tags:\n      - service\n    put:\n      description: Updates a service\n      operationId: ServiceUpdate\n      parameters:\n      - description: Service name.\n        in: path\n        name: name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Service'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Service Updated\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Forbidden\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service not found\n      security:\n      - Bearer: []\n      tags:\n      - service\n  /1.0/services/{name}/plans:\n    get:\n      description: Plans for a service\n      operationId: ServicePlans\n      parameters:\n      - description: Service name.\n        in: path\n        name: name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - in: query\n        name: pool\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ServicePlan'\n                type: array\n          description: Service plans\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service not found\n      security:\n      - Bearer: []\n      tags:\n      - service\n  /1.0/services/{name}/doc:\n    get:\n      description: Documentation on a service\n      operationId: ServiceDoc\n      parameters:\n      - description: Service name.\n        in: path\n        name: name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Service docs\n        401:\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Forbidden\n        404:\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service not found\n      security:\n      - Bearer: []\n      tags:\n      - service\n    put:\n      description: Documentation on a service\n      operationId: ServiceAddDoc\n      parameters:\n      - description: Service name.\n        in: path\n        name: name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/ServiceDoc'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Service docs added\n        401:\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Forbidden\n      security:\n      - Bearer: []\n      tags:\n      - service\n  /1.0/services/{service}/team/{team}:\n    delete:\n      description: Revoke access to team for the service\n      operationId: ServiceRevokeTeam\n      parameters:\n      - description: Service name.\n        in: path\n        name: service\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Team name\n        in: path\n        name: team\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Team access revoked\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Team not found\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service not found\n        409:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Team does not has access to this service\n      security:\n      - Bearer: []\n      tags:\n      - service\n    put:\n      description: Grant access to team for the service\n      operationId: ServiceGrantTeam\n      parameters:\n      - description: Service name.\n        in: path\n        name: service\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Team name\n        in: path\n        name: team\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Team access granted\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Team not found\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service not found\n        409:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Team already has access to this service\n      security:\n      - Bearer: []\n      tags:\n      - service\n  /1.0/services/instances:\n    get:\n      description: List service instances\n      operationId: InstancesList\n      parameters:\n      - description: Filter instances by app name\n        in: query\n        name: app\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ServiceList'\n                type: array\n          description: Service instances\n        204:\n          content: {}\n          description: No content\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - service\n  /1.0/services/{service}/instances:\n    post:\n      description: Create a service instance\n      operationId: InstanceCreate\n      parameters:\n      - description: Service name.\n        in: path\n        name: service\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceInstance'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Service instance created\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service not found\n      security:\n      - Bearer: []\n      tags:\n      - service\n  /1.0/services/{service}/instances/{instance}:\n    delete:\n      description: Remove service instance\n      operationId: InstanceDelete\n      parameters:\n      - description: Service name.\n        in: path\n        name: service\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Instance name.\n        in: path\n        name: instance\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Remove current binds to this instance\n        in: query\n        name: unbindall\n        required: true\n        schema:\n          type: boolean\n      responses:\n        200:\n          content: {}\n          description: Service removed\n        400:\n          content: {}\n          description: Bad request\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service instance not found\n      security:\n      - Bearer: []\n      tags:\n      - service\n    get:\n      description: Get service instance information\n      operationId: InstanceGet\n      parameters:\n      - description: Service name.\n        in: path\n        name: service\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Instance name.\n        in: path\n        name: instance\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceInstanceInfo'\n          description: Service instance\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service instance not found\n      security:\n      - Bearer: []\n      tags:\n      - service\n    put:\n      description: Update a service instance\n      operationId: InstanceUpdate\n      parameters:\n      - description: Service name.\n        in: path\n        name: service\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Instance name.\n        in: path\n        name: instance\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceInstanceUpdateData'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Service instance updated\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service instance not found\n      security:\n      - Bearer: []\n      tags:\n      - service\n  /1.0/services/{service}/instances/{instance}/{app}:\n    delete:\n      description: Unbind the service instance from app\n      operationId: ServiceInstanceUnbind\n      parameters:\n      - description: Service name.\n        in: path\n        name: service\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Instance name.\n        in: path\n        name: instance\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/ServiceInstanceUnbind'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Instance has been unbound from the app.\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - service\n    put:\n      description: Bind the service instance to app\n      operationId: ServiceInstanceBind\n      parameters:\n      - description: Service name.\n        in: path\n        name: service\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Instance name.\n        in: path\n        name: instance\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/ServiceInstanceBind'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Instance bound to the app.\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - service\n  /1.0/services/{service}/instances/{instance}/status:\n    get:\n      description: Status for service instance\n      operationId: ServiceInstanceStatus\n      parameters:\n      - description: Service name.\n        in: path\n        name: service\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Instance name.\n        in: path\n        name: instance\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Instance has been unbound from the app.\n        401:\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service instance or team not found\n      security:\n      - Bearer: []\n      tags:\n      - service\n  /1.0/services/{service}/instances/permission/{instance}/{team}:\n    delete:\n      description: Revoke access to team for this service instance\n      operationId: ServiceInstanceRevoke\n      parameters:\n      - description: Service name.\n        in: path\n        name: service\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Instance name.\n        in: path\n        name: instance\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Team name.\n        in: path\n        name: team\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Access revoked\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service instance or team not found\n      security:\n      - Bearer: []\n      tags:\n      - service\n    put:\n      description: Grant access to team for this service instance\n      operationId: ServiceInstanceGrant\n      parameters:\n      - description: Service name.\n        in: path\n        name: service\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Instance name.\n        in: path\n        name: instance\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Team name.\n        in: path\n        name: team\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Access granted\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service instance or team not found\n      security:\n      - Bearer: []\n      tags:\n      - service\n  /1.7/brokers:\n    get:\n      description: List service brokers\n      operationId: ServiceBrokerList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceBrokerList'\n          description: List service brokers\n        204:\n          content: {}\n          description: No content\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - service\n    post:\n      description: Create service broker\n      operationId: ServiceBrokerCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceBroker'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Service Broker created.\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        409:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service Broker already exists.\n      security:\n      - Bearer: []\n      tags:\n      - service\n  /1.7/brokers/{name}:\n    delete:\n      operationId: ServiceBrokerDelete\n      parameters:\n      - description: Service Broker name.\n        in: path\n        name: name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Service Broker deleted.\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service Broker not found.\n      security:\n      - Bearer: []\n      tags:\n      - service\n    put:\n      description: Update service broker\n      operationId: ServiceBrokerUpdate\n      parameters:\n      - description: Service Broker name.\n        in: path\n        name: name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceBroker'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Service Broker updated.\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Service Broker not found.\n      security:\n      - Bearer: []\n      tags:\n      - service\n  /1.0/plans:\n    get:\n      description: List plans.\n      operationId: PlanList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Plan'\n                type: array\n          description: Plans list\n        204:\n          content: {}\n          description: No content\n      security:\n      - Bearer: []\n      tags:\n      - plan\n    post:\n      description: Create a new plan\n      operationId: PlanCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Plan'\n        required: true\n      responses:\n        201:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Plan'\n          description: Plan created\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        409:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Plan already exists\n      security:\n      - Bearer: []\n      tags:\n      - plan\n  /1.0/plans/{plan}:\n    delete:\n      description: Remove a plan\n      operationId: DeletePlan\n      parameters:\n      - description: Remove current plan\n        in: path\n        name: plan\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Plan removed\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Plan not found\n      security:\n      - Bearer: []\n      tags:\n      - plan\n  /1.0/apps:\n    get:\n      description: List apps.\n      operationId: AppList\n      parameters:\n      - description: Filter applications by lock status.\n        in: query\n        name: locked\n        schema:\n          type: boolean\n      - description: Filter applications by name.\n        in: query\n        name: name\n        schema:\n          type: string\n      - description: Filter applications by owner.\n        in: query\n        name: owner\n        schema:\n          type: string\n      - description: Filter applications by platform.\n        in: query\n        name: platform\n        schema:\n          type: string\n      - description: Filter applications by pool.\n        in: query\n        name: pool\n        schema:\n          type: string\n      - description: Filter applications by unit status.\n        in: query\n        name: status\n        schema:\n          type: string\n      - description: Filter applications by tag.\n        explode: false\n        in: query\n        name: tag\n        schema:\n          items:\n            type: string\n          type: array\n        style: form\n      - description: Filter applications by team owner.\n        in: query\n        name: teamOwner\n        schema:\n          type: string\n      - description: Returns applications without units list.\n        in: query\n        name: simplified\n        schema:\n          type: boolean\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/MiniApp'\n                type: array\n          description: List apps\n        204:\n          content: {}\n          description: No content\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - app\n    post:\n      description: Create a new app.\n      operationId: AppCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/InputApp'\n        required: true\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppCreateResponse'\n          description: App created\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Quota exceeded\n        409:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App already exists\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.0/apps/{app}:\n    delete:\n      description: Delete a tsuru app.\n      operationId: AppDelete\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: App removed.\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found.\n      security:\n      - Bearer: []\n      tags:\n      - app\n    get:\n      description: Get info about a tsuru app.\n      operationId: AppGet\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/App'\n          description: App info\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found.\n      security:\n      - Bearer: []\n      tags:\n      - app\n    put:\n      description: Update a tsuru app.\n      operationId: AppUpdate\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateApp'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: App updated\n        400:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.0/apps/{app}/certificate:\n    delete:\n      description: Unset app certificate.\n      operationId: CertificatUnset\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Certificate deleted\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Certificate not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n    put:\n      description: Create a certificate\n      operationId: certificateSet\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CertificateSetData'\n        required: true\n      responses:\n        201:\n          content: {}\n          description: Certificate created\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        409:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Certificate already exists\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.0/apps/{app}/deploy:\n    post:\n      description: deploy a app\n      operationId: AppDeploy\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppDeployOptions'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Deploy started\n        400:\n          content: {}\n          description: Invalid data\n        401:\n          content:\n            text:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            text:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.0/apps/{app}/cname:\n    delete:\n      description: remove cname from app\n      operationId: AppCnameDelete\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppCName'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Cname removed\n        400:\n          content: {}\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n    post:\n      description: adds a cname to app\n      operationId: AppCnameAdd\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppCName'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Cname added\n        400:\n          content: {}\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.0/apps/{app}/run:\n    post:\n      description: run commands inside an app\n      operationId: AppRun\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppRunOpts'\n        description: Options to run commands inside an app\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Envs updated\n        400:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.0/apps/{app}/env:\n    delete:\n      description: Unset app environment variables.\n      operationId: EnvUnset\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - explode: true\n        in: query\n        name: env\n        required: true\n        schema:\n          items:\n            type: string\n          minItems: 1\n          type: array\n        style: form\n      - in: query\n        name: norestart\n        required: true\n        schema:\n          type: boolean\n      responses:\n        200:\n          content: {}\n          description: Envs deleted\n        400:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n    get:\n      description: Get app environment variables.\n      operationId: EnvGet\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Environment variable name.\n        in: query\n        name: env\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/EnvVar'\n                type: array\n          description: Environment variables\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n    post:\n      description: Set new environment variable.\n      operationId: EnvSet\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EnvSetData'\n        description: Environment variables.\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Envs updated\n        400:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.0/apps/{app}/quota:\n    get:\n      description: Shows app usage info and its quota limit.\n      operationId: AppQuotaGet\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Quota'\n          description: OK\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n    put:\n      description: Changes the maximum limit of units allowed for use.\n      operationId: AppQuotaChange\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                limit:\n                  description: Number of units allowed for use by the current app. Negative number indicates unlimited.\n                  type: number\n              required:\n              - limit\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Quota updated\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Limit lower than allocated\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.0/apps/{app}/start:\n    post:\n      description: Start App.\n      operationId: AppStart\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppStartStop'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: App started\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.0/apps/{app}/stop:\n    post:\n      description: Stop App.\n      operationId: AppStop\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppStartStop'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: App stopped\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.0/apps/{app}/restart:\n    post:\n      description: Restart App.\n      operationId: AppRestart\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppStartStop'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: App restarted\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.8/apps/{app}/routable:\n    post:\n      description: Sets a version as routable.\n      operationId: AppSetRoutable\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SetRoutableArgs'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: App updated\n        400:\n          content: {}\n          description: Invalid arguments\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.5/apps/{app}/routers:\n    get:\n      description: list routers from an app\n      operationId: AppRouterList\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AppRouterList'\n          description: Routers list\n        204:\n          content: {}\n          description: No content\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n    post:\n      description: adds a router to app\n      operationId: AppRouterAdd\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppRouter'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Router added\n        400:\n          content: {}\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.5/apps/{app}/routers/{router}:\n    delete:\n      description: Delete a tsuru app.\n      operationId: AppRouterDelete\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Router name\n        in: path\n        name: router\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: App removed.\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found.\n      security:\n      - Bearer: []\n      tags:\n      - app\n    put:\n      description: update a router\n      operationId: AppRouterUpdate\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Router name\n        in: path\n        name: router\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppRouter'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Router updated\n        400:\n          content: {}\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.0/apps/{app}/teams/{team}:\n    delete:\n      description: grant access to a team\n      operationId: AppTeamRevoke\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Team name\n        in: path\n        name: team\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Access revoked\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content: {}\n          description: Forbidden\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App or team not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n    put:\n      description: grant access to a team\n      operationId: AppTeamGrant\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Team name\n        in: path\n        name: team\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Access granted\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App or team not found\n        409:\n          content: {}\n          description: Grant already exists\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.0/apps/{app}/units:\n    delete:\n      description: Remove units from app\n      operationId: UnitsRemove\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UnitsDelta'\n        description: number of units to remove\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Access revoked\n        400:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content: {}\n          description: Forbidden\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App or team not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n    put:\n      description: Add units to app\n      operationId: UnitsAdd\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UnitsDelta'\n        description: number of units to add\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Access revoked\n        400:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content: {}\n          description: Forbidden\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App or team not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.9/apps/{app}/units/autoscale:\n    delete:\n      description: Remove unit autoscale spec.\n      operationId: AutoScaleRemove\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - in: query\n        name: process\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content: {}\n          description: AutoScale removed\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n    get:\n      description: List autoscales for app.\n      operationId: AutoScaleInfo\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/AutoScaleSpec'\n                type: array\n          description: AutoScale info\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n    post:\n      description: Add new unit autoscale spec.\n      operationId: AutoScaleAdd\n      parameters:\n      - description: App name.\n        in: path\n        name: app\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AutoScaleSpec'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: AutoScale updated\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: App not found\n      security:\n      - Bearer: []\n      tags:\n      - app\n  /1.0/platforms/{platform}:\n    delete:\n      description: Delete platform.\n      operationId: PlatformDelete\n      parameters:\n      - description: Platform name.\n        in: path\n        name: platform\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Platform removed\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not found\n      security:\n      - Bearer: []\n      tags:\n      - platform\n    put:\n      description: Update platform.\n      operationId: PlatformUpdate\n      parameters:\n      - description: Platform name.\n        in: path\n        name: platform\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                dockerfile_content:\n                  format: binary\n                  type: string\n              required:\n              - dockerfile_content\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Platform updated\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not found\n      security:\n      - Bearer: []\n      tags:\n      - platform\n  /1.0/platforms:\n    get:\n      description: List platforms.\n      operationId: PlatformList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Platform'\n                type: array\n          description: Platform list\n        204:\n          content: {}\n          description: No content\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - platform\n    post:\n      description: Add new platform.\n      operationId: PlatformAdd\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                name:\n                  type: string\n                dockerfile_content:\n                  format: binary\n                  type: string\n              required:\n              - dockerfile_content\n              - name\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Platform created\n        400:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - platform\n  /1.6/platforms/{platform}:\n    get:\n      description: Platform info.\n      operationId: PlatformInfo\n      parameters:\n      - description: Platform info.\n        in: path\n        name: platform\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PlatformInfo'\n          description: Platform info\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not found\n      security:\n      - Bearer: []\n      tags:\n      - platform\n  /1.6/platforms/{platform}/rollback:\n    post:\n      description: Platform rollback.\n      operationId: PlatformRollback\n      parameters:\n      - description: Platform name.\n        in: path\n        name: platform\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - in: query\n        name: image\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Ok\n        400:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not found\n      security:\n      - Bearer: []\n      tags:\n      - platform\n  /1.0/teams:\n    get:\n      description: List teams.\n      operationId: TeamsList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Team'\n                type: array\n          description: Team list.\n        204:\n          content: {}\n          description: No content.\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - team\n    post:\n      description: Create a team.\n      operationId: TeamCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TeamCreateArgs'\n        required: true\n      responses:\n        201:\n          content: {}\n          description: Team created.\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        409:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Team already exists\n      security:\n      - Bearer: []\n      tags:\n      - team\n  /1.0/teams/{team}:\n    delete:\n      description: Delete a team.\n      operationId: TeamDelete\n      parameters:\n      - description: Team name.\n        in: path\n        name: team\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Team removed.\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Forbidden\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Team not found\n      security:\n      - Bearer: []\n      tags:\n      - team\n  /1.4/teams/{team}:\n    get:\n      description: Get a team.\n      operationId: TeamGet\n      parameters:\n      - description: Team name.\n        in: path\n        name: team\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeamInfo'\n          description: Team data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Team not found\n      security:\n      - Bearer: []\n      tags:\n      - team\n  /1.6/teams/{team}:\n    put:\n      description: Update a team.\n      operationId: TeamUpdate\n      parameters:\n      - description: Team name.\n        in: path\n        name: team\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TeamUpdateArgs'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Team updated\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Team not found\n      security:\n      - Bearer: []\n      tags:\n      - team\n  /1.0/users:\n    delete:\n      description: Delete an user.\n      operationId: UserDelete\n      parameters:\n      - description: User e-mail.\n        in: query\n        name: email\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: User removed\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not found\n      security:\n      - Bearer: []\n      tags:\n      - user\n    get:\n      description: List users.\n      operationId: UsersList\n      parameters:\n      - in: query\n        name: userEmail\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: role\n        schema:\n          type: string\n      - in: query\n        name: context\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/User'\n                type: array\n          description: List users.\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - user\n    post:\n      description: Create a new user.\n      operationId: UserCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserData'\n        required: true\n      responses:\n        201:\n          content: {}\n          description: User created.\n        400:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Forbidden\n        409:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: User already exists\n      security:\n      - Bearer: []\n      tags:\n      - user\n  /1.0/users/api-key:\n    get:\n      description: Show the API token of an user.\n      operationId: APITokenGet\n      parameters:\n      - in: query\n        name: email\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: API TOKEN\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: User not found\n      security:\n      - Bearer: []\n      tags:\n      - user\n    post:\n      description: Regenerate the API Token of an user.\n      operationId: APITokenRegenerate\n      parameters:\n      - in: query\n        name: email\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: API TOKEN\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: User not found\n      security:\n      - Bearer: []\n      tags:\n      - user\n  /1.0/users/keys:\n    get:\n      description: Show the list of the ssh keys of logged user.\n      operationId: SSHKeyList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SSHKeyListResponse'\n          description: OK\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - user\n    post:\n      description: Add SSH key to logged user.\n      operationId: SSHKeyAdd\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SSHKeyAddData'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Ok\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        409:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Key already exists\n      security:\n      - Bearer: []\n      tags:\n      - user\n  /1.0/users/keys/{key}:\n    delete:\n      description: Delete one ssh key of logged user.\n      operationId: SSHKeyRemove\n      parameters:\n      - in: path\n        name: key\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Ok\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not found\n      security:\n      - Bearer: []\n      tags:\n      - user\n  /1.0/users/info:\n    get:\n      description: Get information on logged user.\n      operationId: UserGet\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: OK\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - user\n  /1.0/users/{email}/quota:\n    get:\n      description: Get quota of an user.\n      operationId: UserQuotaGet\n      parameters:\n      - description: User e-mail.\n        in: path\n        name: email\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserQuotaViewResponse'\n          description: OK\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: User not found\n      security:\n      - Bearer: []\n      tags:\n      - user\n    put:\n      description: Change quota of an user.\n      operationId: UserQuotaChange\n      parameters:\n      - description: User e-mail.\n        in: path\n        name: email\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: User new quota.\n        in: query\n        name: limit\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          content: {}\n          description: Quota successfully updated\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: User not found\n      security:\n      - Bearer: []\n      tags:\n      - user\n  /1.0/users/password:\n    put:\n      description: Change password of logged user.\n      operationId: ChangePassword\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChangePasswordData'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Ok\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Forbidden\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not found\n      security:\n      - Bearer: []\n      tags:\n      - user\n  /1.0/users/{email}/password:\n    post:\n      description: Reset password of an user.\n      operationId: ResetPassword\n      parameters:\n      - in: path\n        name: email\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              minLength: 1\n              type: string\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Ok\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Forbidden\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not found\n      security:\n      - Bearer: []\n      tags:\n      - user\n  /1.0/users/tokens:\n    delete:\n      description: Logout.\n      operationId: UserTokenDelete\n      responses:\n        200:\n          content: {}\n          description: Ok\n      security:\n      - Bearer: []\n      tags:\n      - user\n  /1.2/node:\n    get:\n      description: List nodes.\n      operationId: NodeList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeListResponse'\n          description: Nodes List.\n        204:\n          content: {}\n          description: No content.\n      security:\n      - Bearer: []\n      tags:\n      - node\n    post:\n      description: Add a node.\n      operationId: NodeAdd\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NodeAddData'\n        required: true\n      responses:\n        201:\n          content: {}\n          description: Ok\n        400:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid parameters\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - node\n    put:\n      description: Update node.\n      operationId: NodeUpdate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NodeUpdateData'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Ok\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not found\n      security:\n      - Bearer: []\n      tags:\n      - node\n  /1.2/node/{address}:\n    delete:\n      description: Remove node.\n      operationId: NodeDelete\n      parameters:\n      - description: Node address.\n        in: path\n        name: address\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      - description: Trigger node rebalance.\n        in: query\n        name: no-rebalance\n        required: true\n        schema:\n          type: boolean\n      - description: Remove machine from IaaS.\n        in: query\n        name: remove-iaas\n        required: true\n        schema:\n          type: boolean\n      responses:\n        200:\n          content: {}\n          description: Ok\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not found\n      security:\n      - Bearer: []\n      tags:\n      - node\n    get:\n      description: Get node information.\n      operationId: NodeGet\n      parameters:\n      - description: Node address.\n        in: path\n        name: address\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeGetResponse'\n          description: Ok\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not found\n      security:\n      - Bearer: []\n      tags:\n      - node\n  /1.4/volumes:\n    get:\n      description: List volumes.\n      operationId: VolumeList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Volume'\n                type: array\n          description: List volumes\n        204:\n          content: {}\n          description: No content\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - volume\n    post:\n      description: Create volume.\n      operationId: VolumeCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Volume'\n        required: true\n      responses:\n        201:\n          content: {}\n          description: Volume created\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        409:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Volume already exists\n      security:\n      - Bearer: []\n      tags:\n      - volume\n  /1.0/pools:\n    get:\n      description: List pools.\n      operationId: PoolList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pool'\n                type: array\n          description: Pools list\n        204:\n          content: {}\n          description: No content\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - pool\n    post:\n      description: Creates a pool.\n      operationId: PoolCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PoolCreateData'\n        required: true\n      responses:\n        201:\n          content: {}\n          description: Pool created\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        409:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Pool already exists\n      security:\n      - Bearer: []\n      tags:\n      - pool\n  /pools/{pool}:\n    delete:\n      description: Deletes a pool.\n      operationId: PoolDelete\n      parameters:\n      - in: path\n        name: pool\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Pool deleted\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        403:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Pool still has apps\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Pool not found\n      security:\n      - Bearer: []\n      tags:\n      - pool\n    get:\n      description: Get pool information\n      operationId: PoolGet\n      parameters:\n      - in: path\n        name: pool\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Pool'\n          description: Pool data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Pool not found\n      security:\n      - Bearer: []\n      tags:\n      - pool\n    put:\n      description: Updates a pool.\n      operationId: PoolUpdate\n      parameters:\n      - in: path\n        name: pool\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PoolUpdateData'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Pool updated\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Pool not found\n        409:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Default pool already defined\n      security:\n      - Bearer: []\n      tags:\n      - pool\n  /1.3/provisioner/clusters:\n    get:\n      description: List cluster\n      operationId: ClusterList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Cluster'\n                type: array\n          description: Cluster\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Cluster not found\n      security:\n      - Bearer: []\n      tags:\n      - cluster\n    post:\n      description: Create cluster.\n      operationId: ClusterCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Cluster'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Cluster created\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Cluster not found\n      security:\n      - Bearer: []\n      tags:\n      - cluster\n  /1.3/provisioner/clusters/{cluster_name}:\n    delete:\n      description: Delete cluster.\n      operationId: ClusterDelete\n      parameters:\n      - description: Cluster name.\n        in: path\n        name: cluster_name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Cluster deleted\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Cluster not found\n      security:\n      - Bearer: []\n      tags:\n      - cluster\n  /1.4/provisioner/clusters/{cluster_name}:\n    post:\n      description: Update cluster.\n      operationId: ClusterUpdate\n      parameters:\n      - description: Cluster name.\n        in: path\n        name: cluster_name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Cluster'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Cluster updated\n        400:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/x-json-stream:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Cluster not found\n      security:\n      - Bearer: []\n      tags:\n      - cluster\n  /1.8/provisioner/clusters/{cluster_name}:\n    get:\n      description: Cluster info\n      operationId: ClusterInfo\n      parameters:\n      - description: Cluster name.\n        in: path\n        name: cluster_name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n          x-exportParamName: ClusterName\n        x-exportParamName: ClusterName\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cluster'\n          description: Cluster\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Cluster not found\n      security:\n      - Bearer: []\n      tags:\n      - cluster\n  /1.4/volumes/{volume}:\n    delete:\n      description: Delete volume.\n      operationId: VolumeDelete\n      parameters:\n      - description: Volume name.\n        in: path\n        name: volume\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Volume deleted\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Volume not found\n      security:\n      - Bearer: []\n      tags:\n      - volume\n    get:\n      description: Get a volume.\n      operationId: VolumeGet\n      parameters:\n      - description: Volume name.\n        in: path\n        name: volume\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Volume'\n          description: Volume\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        409:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Volume already exists\n      security:\n      - Bearer: []\n      tags:\n      - volume\n    put:\n      description: Update volume.\n      operationId: VolumeUpdate\n      parameters:\n      - description: Volume name.\n        in: path\n        name: volume\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VolumeUpdateData'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Volume updated\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Volume not found\n      security:\n      - Bearer: []\n      tags:\n      - volume\n  /1.4/volumes/{volume}/bind:\n    delete:\n      description: Unbind volume.\n      operationId: VolumeUnbind\n      parameters:\n      - description: Volume name.\n        in: path\n        name: volume\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/VolumeBindData'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Volume unbinded\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Volume not found\n      security:\n      - Bearer: []\n      tags:\n      - volume\n    post:\n      description: Bind volume.\n      operationId: VolumeBind\n      parameters:\n      - description: Volume name.\n        in: path\n        name: volume\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VolumeBindData'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Volume bind\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Volume not found\n        409:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Volume bind already exists\n      security:\n      - Bearer: []\n      tags:\n      - volume\n  /1.4/volumeplans:\n    get:\n      description: List volume plans.\n      operationId: VolumePlansList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumePlansListResponse'\n          description: Volume plans list\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - volume\n  /1.0/roles:\n    post:\n      description: create a role\n      operationId: CreateRole\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleAddData'\n        required: true\n      responses:\n        201:\n          content: {}\n          description: Role created\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n        409:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Role already exists\n      security:\n      - Bearer: []\n      tags:\n      - auth\n    put:\n      description: update a role\n      operationId: UpdateRole\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleUpdateData'\n        required: true\n      responses:\n        201:\n          content: {}\n          description: Role updated\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - auth\n  /1.0/roles/{role_name}:\n    delete:\n      description: delete a role\n      operationId: DeleteRole\n      parameters:\n      - in: path\n        name: role_name\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Role deleted.\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Role  not found\n      security:\n      - Bearer: []\n      tags:\n      - auth\n  /1.0/roles/{role_name}/permissions:\n    post:\n      description: add a permission\n      operationId: PermissionAdd\n      parameters:\n      - in: path\n        name: role_name\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PermissionData'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Permission created.\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        409:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Permission not a allowed\n      security:\n      - Bearer: []\n      tags:\n      - auth\n  /1.0/roles{role_name}/permissions/{permission}:\n    delete:\n      description: remove a permission\n      operationId: RemovePermission\n      parameters:\n      - in: path\n        name: role_name\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: permission\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Permission removed.\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not found\n      security:\n      - Bearer: []\n      tags:\n      - auth\n  /1,0/roles/{role_name}/user:\n    post:\n      description: assign a role\n      operationId: Role assign\n      parameters:\n      - in: path\n        name: role_name\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleAssignData'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Role assigned.\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data.\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Role not found\n      security:\n      - Bearer: []\n      tags:\n      - auth\n  /1.0/roles/{role_name}/user/{email}:\n    delete:\n      description: Dissociate a role from user\n      operationId: DissociateRole\n      parameters:\n      - in: path\n        name: role_name\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: email\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Role dissociated.\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data.\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Role or token not found\n      security:\n      - Bearer: []\n      tags:\n      - auth\n  /1.0/role/default:\n    delete:\n      description: Delete a Default role\n      operationId: RoleDefaultDelete\n      responses:\n        200:\n          content: {}\n          description: Default role deleted.\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data.\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n      security:\n      - Bearer: []\n      tags:\n      - auth\n    post:\n      description: add a default role\n      operationId: DefaultRoleAdd\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleDefaultData'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Default role created.\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n      security:\n      - Bearer: []\n      tags:\n      - auth\n  /1.6/roles/{role_name}/token:\n    post:\n      description: Assigns a role to a team token.\n      operationId: AssignRoleToToken\n      parameters:\n      - in: path\n        name: role_name\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssignTokenArgs'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Role assigned.\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Role or token not found\n      security:\n      - Bearer: []\n      tags:\n      - auth\n  /1.6/roles/{role_name}/token/{token_id}:\n    delete:\n      description: Dissociates a role from a team token.\n      operationId: DissociateRoleFromToken\n      parameters:\n      - in: path\n        name: role_name\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: token_id\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: context\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Role dissociated.\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Role or token not found\n      security:\n      - Bearer: []\n      tags:\n      - auth\n  /1.6/tokens:\n    get:\n      description: List team tokens.\n      operationId: TeamTokensList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/TeamToken'\n                type: array\n          description: Team tokens list.\n        204:\n          content: {}\n          description: No content.\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n      security:\n      - Bearer: []\n      tags:\n      - auth\n    post:\n      description: Creates a team token.\n      operationId: TeamTokenCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TeamTokenCreateArgs'\n        required: true\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeamToken'\n          description: Team token created.\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        409:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Token with the same ID already exists.\n      security:\n      - Bearer: []\n      tags:\n      - auth\n  /1.6/tokens/{token_id}:\n    delete:\n      description: Deletes a team token.\n      operationId: TeamTokenDelete\n      parameters:\n      - description: Token ID.\n        in: path\n        name: token_id\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Team token deleted.\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Team token not found.\n      security:\n      - Bearer: []\n      tags:\n      - auth\n    put:\n      description: Updates a team token.\n      operationId: TeamTokenUpdate\n      parameters:\n      - description: Token ID.\n        in: path\n        name: token_id\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TeamTokenUpdateArgs'\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeamToken'\n          description: Team token updated.\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Team token not found.\n      security:\n      - Bearer: []\n      tags:\n      - auth\n  /1.7/tokens/{token_id}:\n    get:\n      description: Shows information about a specific token.\n      operationId: TeamTokenInfo\n      parameters:\n      - description: Token ID.\n        in: path\n        name: token_id\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeamToken'\n          description: Team token info.\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Team token not found.\n      security:\n      - Bearer: []\n      tags:\n      - auth\n  /1.1/events/{eventid}/cancel:\n    post:\n      operationId: EventCancel\n      parameters:\n      - in: path\n        name: eventid\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EventCancelArgs'\n        required: true\n      responses:\n        204:\n          content: {}\n          description: Event cancellation requested.\n        400:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Event not found\n      security:\n      - Bearer: []\n      tags:\n      - event\n  /1.6/events/webhooks:\n    get:\n      operationId: WebhookList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Webhook'\n                type: array\n          description: Webhooks list.\n        204:\n          content: {}\n          description: No content.\n      security:\n      - Bearer: []\n      tags:\n      - event\n    post:\n      operationId: WebhookCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Webhook'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Webhook created.\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        409:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Webhook already exists.\n      security:\n      - Bearer: []\n      tags:\n      - event\n  /1.6/events/webhooks/{name}:\n    delete:\n      operationId: WebhookDelete\n      parameters:\n      - description: Webhook name.\n        in: path\n        name: name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Webhook created.\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Webhook not found.\n      security:\n      - Bearer: []\n      tags:\n      - event\n    get:\n      operationId: WebhookGet\n      parameters:\n      - description: Webhook name.\n        in: path\n        name: name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Webhook'\n          description: Webhook.\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Not founds.\n      security:\n      - Bearer: []\n      tags:\n      - event\n    put:\n      operationId: WebhookUpdate\n      parameters:\n      - description: Webhook name.\n        in: path\n        name: name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Webhook'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Webhook updated.\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Webhook not found.\n      security:\n      - Bearer: []\n      tags:\n      - event\n  /1.7/provisioner:\n    get:\n      description: List provisioners\n      operationId: ProvisionerList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Provisioner'\n                type: array\n          description: Provisioner\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - cluster\n  /1.3/constraints:\n    get:\n      description: List pool constraints\n      operationId: ConstraintList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/PoolConstraint'\n                type: array\n          description: PoolConstraints\n        204:\n          content: {}\n          description: No content\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - pool\n    put:\n      description: Update a service instance\n      operationId: ConstraintSet\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PoolConstraintSet'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Pool constraint set\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - pool\n  /1.3/routers:\n    get:\n      description: List available routers\n      operationId: RouterList\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/PlanRouter'\n                type: array\n          description: Routers\n        204:\n          content: {}\n          description: No content\n        401:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - router\n  /1.8/routers:\n    post:\n      description: Adds a new dynamic router\n      operationId: RouterCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DynamicRouter'\n        required: true\n      responses:\n        201:\n          content: {}\n          description: Dynamic router added\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Invalid data\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized\n      security:\n      - Bearer: []\n      tags:\n      - router\n  /1.8/routers/{name}:\n    delete:\n      description: Deletes a dynamic router\n      operationId: RouterDelete\n      parameters:\n      - description: Dynamic router name.\n        in: path\n        name: name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Dynamic router deleted\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Dynamic router not found\n      security:\n      - Bearer: []\n      tags:\n      - router\n    put:\n      description: Updates a dynamic router\n      operationId: RouterUpdate\n      parameters:\n      - description: Dynamic router name.\n        in: path\n        name: name\n        required: true\n        schema:\n          minLength: 1\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DynamicRouter'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Dynamic router updated\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Dynamic router not found\n      security:\n      - Bearer: []\n      tags:\n      - router\n  /1.2/nodecontainers:\n    post:\n      description: Creates container that runs on every node\n      operationId: NodeContainerCreate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NodeContainer'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Node container created\n        400:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Wrong configuration\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n      security:\n      - Bearer: []\n      tags:\n      - nodecontainer\n  /1.9/roles/{role_name}/group:\n    post:\n      description: Assigns a role to a group.\n      operationId: AssignRoleToGroup\n      parameters:\n      - in: path\n        name: role_name\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssignGroupArgs'\n        required: true\n      responses:\n        200:\n          content: {}\n          description: Role assigned.\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Role not found\n      security:\n      - Bearer: []\n      tags:\n      - auth\n  /1.6/roles/{role_name}/group/{group_name}:\n    delete:\n      description: Dissociates a role from a group.\n      operationId: DissociateRoleFromGroup\n      parameters:\n      - in: path\n        name: role_name\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: group_name\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: context\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          content: {}\n          description: Role dissociated.\n        401:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Unauthorized.\n        404:\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n          description: Role not found\n      security:\n      - Bearer: []\n      tags:\n      - auth\ncomponents:\n  schemas:\n    App:\n      description: Tsuru app.\n      example:\n        owner: owner\n        cluster: cluster\n        volumeBinds:\n        - ReadOnly: true\n          ID:\n            App: App\n            MountPoint: MountPoint\n            Volume: Volume\n        - ReadOnly: true\n          ID:\n            App: App\n            MountPoint: MountPoint\n            Volume: Volume\n        metadata:\n          annotations:\n          - name: name\n            value: value\n            delete: true\n          - name: name\n            value: value\n            delete: true\n          labels:\n          - name: name\n            value: value\n            delete: true\n          - name: name\n            value: value\n            delete: true\n        provisioner: provisioner\n        teams:\n        - teams\n        - teams\n        ip: ip\n        cname:\n        - cname\n        - cname\n        pool: pool\n        deploys: 0\n        description: description\n        units:\n        - address:\n            scheme: scheme\n            host: host\n          appname: appname\n          routable: true\n          ready: true\n          processname: processname\n          ip: ip\n          name: name\n          id: id\n          type: type\n          version: 0\n          restarts: 6\n          status: status\n        - address:\n            scheme: scheme\n            host: host\n          appname: appname\n          routable: true\n          ready: true\n          processname: processname\n          ip: ip\n          name: name\n          id: id\n          type: type\n          version: 0\n          restarts: 6\n          status: status\n        autoscale:\n        - process: process\n          averageCPU: averageCPU\n          maxUnits: 5\n          minUnits: 1\n          version: 5\n        - process: process\n          averageCPU: averageCPU\n          maxUnits: 5\n          minUnits: 1\n          version: 5\n        platform: platform\n        internalAddresses:\n        - Version: Version\n          Port: 6\n          Process: Process\n          Domain: Domain\n          Protocol: Protocol\n        - Version: Version\n          Port: 6\n          Process: Process\n          Domain: Domain\n          Protocol: Protocol\n        tags:\n        - tags\n        - tags\n        teamOwner: teamOwner\n        router: router\n        name: name\n        routeropts:\n          key: routeropts\n        routers:\n        - addresses:\n          - addresses\n          - addresses\n          opts: '{}'\n          name: name\n        - addresses:\n          - addresses\n          - addresses\n          opts: '{}'\n          name: name\n        plan:\n          default: true\n          router: router\n          memory: 0\n          cpumilli: 0\n          swap: 0\n          name: name\n          override:\n            memory: 5\n            cpumilli: 2\n          cpushare: 0\n      properties:\n        name:\n          description: App name.\n          type: string\n        cluster:\n          description: Cluster name\n          type: string\n        cname:\n          description: CNames of App\n          items:\n            type: string\n          type: array\n        deploys:\n          description: Number of Deploys\n          format: int64\n          type: integer\n        routers:\n          items:\n            $ref: '#/components/schemas/App_routers'\n          type: array\n        internalAddresses:\n          items:\n            $ref: '#/components/schemas/App_internalAddresses'\n          type: array\n        volumeBinds:\n          items:\n            $ref: '#/components/schemas/App_volumeBinds'\n          type: array\n        tags:\n          description: App tags.\n          items:\n            type: string\n          type: array\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        router:\n          description: App router.\n          type: string\n        routeropts:\n          additionalProperties:\n            type: string\n          description: Custom router options.\n          type: object\n        plan:\n          $ref: '#/components/schemas/Plan'\n        pool:\n          description: App pool.\n          type: string\n        provisioner:\n          description: App provisioner.\n          type: string\n        platform:\n          description: App platform.\n          type: string\n        description:\n          description: App description.\n          type: string\n        teamOwner:\n          description: Team that owns the app.\n          type: string\n        teams:\n          items:\n            type: string\n          type: array\n        units:\n          items:\n            $ref: '#/components/schemas/Unit'\n          type: array\n        ip:\n          type: string\n        owner:\n          type: string\n        autoscale:\n          items:\n            $ref: '#/components/schemas/AutoScaleSpec'\n          type: array\n      required:\n      - name\n      type: object\n    VolumeBindData:\n      example:\n        app: app\n        readonly: true\n        norestart: true\n        mountpoint: mountpoint\n      properties:\n        app:\n          type: string\n        mountpoint:\n          type: string\n        norestart:\n          type: boolean\n        readonly:\n          type: boolean\n      type: object\n    Platform:\n      example:\n        name: name\n        disabled: true\n      properties:\n        name:\n          type: string\n        disabled:\n          type: boolean\n      type: object\n    Node:\n      example:\n        provisioner: provisioner\n        metadata:\n          key: metadata\n        address: address\n        iaasid: iaasid\n        pool: pool\n        status: status\n      properties:\n        address:\n          type: string\n        iaasid:\n          type: string\n        status:\n          type: string\n        pool:\n          type: string\n        provisioner:\n          type: string\n        metadata:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    TeamTokenCreateArgs:\n      description: Arguments for creating a new team token.\n      example:\n        token_id: token_id\n        description: description\n        team: team\n        expires_in: 0\n      properties:\n        token_id:\n          type: string\n        description:\n          type: string\n        expires_in:\n          description: Expire time in seconds.\n          format: int64\n          type: integer\n        team:\n          type: string\n      type: object\n    UnitsDelta:\n      description: number of units to add or remove from a process\n      example:\n        process: process\n        units: units\n        version: version\n      properties:\n        units:\n          type: string\n        process:\n          type: string\n        version:\n          type: string\n      type: object\n    AssignGroupArgs:\n      description: Assign role to group arguments.\n      example:\n        group_name: group_name\n        context: context\n      properties:\n        group_name:\n          type: string\n        context:\n          type: string\n      type: object\n    Cluster_kubeConfig_cluster:\n      example:\n        server: server\n        certificate-authority-data: certificate-authority-data\n        tls-server-name: tls-server-name\n        insecure-skip-tls-verify: true\n      properties:\n        server:\n          type: string\n        certificate-authority-data:\n          type: string\n        tls-server-name:\n          type: string\n        insecure-skip-tls-verify:\n          type: boolean\n      required:\n      - server\n    WebhookEventFilter:\n      example:\n        target_values:\n        - target_values\n        - target_values\n        kind_names:\n        - kind_names\n        - kind_names\n        kind_types:\n        - kind_types\n        - kind_types\n        error_only: true\n        success_only: true\n        target_types:\n        - target_types\n        - target_types\n      properties:\n        target_types:\n          items:\n            type: string\n          type: array\n        target_values:\n          items:\n            type: string\n          type: array\n        kind_types:\n          items:\n            type: string\n          type: array\n        kind_names:\n          items:\n            type: string\n          type: array\n        error_only:\n          type: boolean\n        success_only:\n          type: boolean\n      type: object\n    EnvVar:\n      description: Environment variable.\n      example:\n        public: true\n        managedBy: managedBy\n        name: name\n        alias: alias\n        value: value\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        alias:\n          type: string\n        public:\n          type: boolean\n        managedBy:\n          type: string\n      type: object\n    Pool:\n      example:\n        default: true\n        provisioner: provisioner\n        public: true\n        teams:\n        - teams\n        - teams\n        allowed:\n          key:\n          - allowed\n          - allowed\n        name: name\n        labels:\n          key: labels\n      properties:\n        name:\n          type: string\n        default:\n          type: boolean\n        provisioner:\n          type: string\n        public:\n          type: boolean\n        teams:\n          items:\n            type: string\n          type: array\n        allowed:\n          additionalProperties:\n            items:\n              type: string\n            type: array\n          type: object\n        labels:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    PoolConstraint:\n      example:\n        Field: Field\n        Values:\n        - Values\n        - Values\n        Blacklist: true\n        PoolExpr: PoolExpr\n      properties:\n        PoolExpr:\n          type: string\n        Field:\n          type: string\n        Values:\n          items:\n            type: string\n          type: array\n        Blacklist:\n          type: boolean\n      type: object\n    PoolCreateData:\n      example:\n        default: true\n        provisioner: provisioner\n        public: true\n        name: name\n        force: true\n        labels:\n          key: labels\n      properties:\n        name:\n          type: string\n        public:\n          type: boolean\n        default:\n          type: boolean\n        force:\n          type: boolean\n        provisioner:\n          type: string\n        labels:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    TeamToken:\n      description: An authorization token associated to a team.\n      example:\n        last_access: 2000-01-23T04:56:07.000+00:00\n        expires_at: 2000-01-23T04:56:07.000+00:00\n        token_id: token_id\n        creator_email: creator_email\n        roles:\n        - name: name\n          contextvalue: contextvalue\n        - name: name\n          contextvalue: contextvalue\n        description: description\n        created_at: 2000-01-23T04:56:07.000+00:00\n        team: team\n        token: token\n      properties:\n        token:\n          type: string\n        token_id:\n          type: string\n        description:\n          type: string\n        created_at:\n          format: date-time\n          type: string\n        expires_at:\n          format: date-time\n          type: string\n        last_access:\n          format: date-time\n          type: string\n        creator_email:\n          type: string\n        team:\n          type: string\n        roles:\n          items:\n            $ref: '#/components/schemas/RoleInstance'\n          type: array\n      type: object\n    ServicePlan:\n      example:\n        name: name\n        description: description\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n      type: object\n    Router:\n      example:\n        address: address\n        opts:\n          key: opts\n        status-detail: status-detail\n        name: name\n        type: type\n        status: status\n      properties:\n        name:\n          type: string\n        opts:\n          additionalProperties:\n            type: string\n          type: object\n        address:\n          type: string\n        type:\n          type: string\n        status:\n          type: string\n        status-detail:\n          type: string\n      type: object\n    VolumePlansListResponse:\n      additionalProperties:\n        $ref: '#/components/schemas/VolumePlan'\n      description: Response returned by Volume Plans list.\n      type: object\n    Cluster_kubeConfig_user_exec_env:\n      example:\n        name: name\n        value: value\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n    RoleDefaultData:\n      description: Default a role\n      example:\n        rolesmap:\n          key:\n          - rolesmap\n          - rolesmap\n      properties:\n        rolesmap:\n          additionalProperties:\n            items:\n              type: string\n            type: array\n          type: object\n      type: object\n    Volume:\n      description: Volume\n      example:\n        teamOwner: teamOwner\n        binds:\n        - readonly: true\n          id:\n            app: app\n            volume: volume\n            mountpoint: mountpoint\n        - readonly: true\n          id:\n            app: app\n            volume: volume\n            mountpoint: mountpoint\n        opts:\n          key: opts\n        name: name\n        pool: pool\n        plan:\n          opts:\n            key: opts\n          name: name\n        status: status\n      properties:\n        name:\n          description: Volume name.\n          type: string\n        pool:\n          description: Volume pool.\n          type: string\n        teamOwner:\n          description: Team that owns the volume.\n          type: string\n        status:\n          description: Volume status.\n          type: string\n        plan:\n          $ref: '#/components/schemas/VolumePlan'\n        binds:\n          description: Volume binds.\n          items:\n            $ref: '#/components/schemas/VolumeBind'\n          type: array\n        opts:\n          additionalProperties:\n            type: string\n          description: Custom volume options.\n          type: object\n      type: object\n    NodeCheckResult:\n      example:\n        err: err\n        name: name\n        successful: true\n      properties:\n        name:\n          type: string\n        err:\n          type: string\n        successful:\n          type: boolean\n      type: object\n    UpdateApp:\n      example:\n        teamOwner: teamOwner\n        metadata:\n          annotations:\n          - name: name\n            value: value\n            delete: true\n          - name: name\n            value: value\n            delete: true\n          labels:\n          - name: name\n            value: value\n            delete: true\n          - name: name\n            value: value\n            delete: true\n        planoverride:\n          memory: 5\n          cpumilli: 2\n        noRestart: true\n        imageReset: true\n        pool: pool\n        description: description\n        plan: plan\n        platform: platform\n        tags:\n        - tags\n        - tags\n      properties:\n        tags:\n          description: App tags.\n          items:\n            type: string\n          type: array\n        plan:\n          description: App plan name.\n          type: string\n        planoverride:\n          $ref: '#/components/schemas/PlanOverride'\n        pool:\n          description: App pool name.\n          type: string\n        platform:\n          description: App platform.\n          type: string\n        description:\n          description: App description.\n          type: string\n        teamOwner:\n          description: Team that owns the app.\n          type: string\n        noRestart:\n          description: Prevent app restart.\n          type: boolean\n        imageReset:\n          description: Reset app image to platform base image.\n          type: boolean\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n      type: object\n    SetRoutableArgs:\n      example:\n        isRoutable: true\n        version: version\n      properties:\n        version:\n          type: string\n        isRoutable:\n          type: boolean\n      type: object\n    NodeListResponse:\n      example:\n        nodes:\n        - provisioner: provisioner\n          metadata:\n            key: metadata\n          address: address\n          iaasid: iaasid\n          pool: pool\n          status: status\n        - provisioner: provisioner\n          metadata:\n            key: metadata\n          address: address\n          iaasid: iaasid\n          pool: pool\n          status: status\n        machines:\n        - protocol: protocol\n          address: address\n          port: 0\n          creationparams:\n            key: creationparams\n          id: id\n          iaas: iaas\n        - protocol: protocol\n          address: address\n          port: 0\n          creationparams:\n            key: creationparams\n          id: id\n          iaas: iaas\n      properties:\n        nodes:\n          items:\n            $ref: '#/components/schemas/Node'\n          type: array\n        machines:\n          items:\n            $ref: '#/components/schemas/Machine'\n          type: array\n      type: object\n    ServiceBroker_Config_AuthConfig:\n      example:\n        BearerConfig:\n          token: token\n        BasicAuthConfig:\n          password: password\n          username: username\n      properties:\n        BearerConfig:\n          $ref: '#/components/schemas/ServiceBroker_Config_AuthConfig_BearerConfig'\n        BasicAuthConfig:\n          $ref: '#/components/schemas/ServiceBroker_Config_AuthConfig_BasicAuthConfig'\n    App_routers:\n      example:\n        addresses:\n        - addresses\n        - addresses\n        opts: '{}'\n        name: name\n      properties:\n        addresses:\n          items:\n            type: string\n          type: array\n        opts:\n          properties: {}\n          type: object\n        name:\n          type: string\n    Metadata:\n      description: App metadata such as custom labels and annotations.\n      example:\n        annotations:\n        - name: name\n          value: value\n          delete: true\n        - name: name\n          value: value\n          delete: true\n        labels:\n        - name: name\n          value: value\n          delete: true\n        - name: name\n          value: value\n          delete: true\n      properties:\n        annotations:\n          items:\n            $ref: '#/components/schemas/MetadataItem'\n          type: array\n        labels:\n          items:\n            $ref: '#/components/schemas/MetadataItem'\n          type: array\n      type: object\n    ServiceInstance:\n      example:\n        team_owner: team_owner\n        bound_units:\n        - app_name: app_name\n          ip: ip\n          id: id\n        - app_name: app_name\n          ip: ip\n          id: id\n        teams:\n        - teams\n        - teams\n        service_name: service_name\n        name: name\n        pool: pool\n        description: description\n        id: 0\n        parameters:\n          key: parameters\n        plan_name: plan_name\n        tags:\n        - tags\n        - tags\n        apps:\n        - apps\n        - apps\n      properties:\n        name:\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n        id:\n          type: integer\n        service_name:\n          type: string\n        plan_name:\n          type: string\n        apps:\n          items:\n            type: string\n          type: array\n        bound_units:\n          items:\n            $ref: '#/components/schemas/ServiceInstanceBoundUnit'\n          type: array\n        teams:\n          items:\n            type: string\n          type: array\n        team_owner:\n          type: string\n        description:\n          type: string\n        parameters:\n          additionalProperties:\n            type: string\n          type: object\n        pool:\n          type: string\n      type: object\n    ServiceInstanceBind:\n      example:\n        noRestart: true\n        parameters:\n          key: parameters\n      properties:\n        noRestart:\n          type: boolean\n        parameters:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    NodeContainer:\n      description: Data sent to set up a node container\n      example:\n        name: name\n        pool: pool\n        config:\n          env:\n          - env\n          - env\n      properties:\n        name:\n          type: string\n        pool:\n          type: string\n        config:\n          $ref: '#/components/schemas/NodeContainer_config'\n      required:\n      - name\n      type: object\n    Machine:\n      example:\n        protocol: protocol\n        address: address\n        port: 0\n        creationparams:\n          key: creationparams\n        id: id\n        iaas: iaas\n      properties:\n        id:\n          type: string\n        iaas:\n          type: string\n        address:\n          type: string\n        port:\n          type: integer\n        protocol:\n          type: string\n        creationparams:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    URL:\n      example:\n        scheme: scheme\n        host: host\n      properties:\n        scheme:\n          type: string\n        host:\n          type: string\n      type: object\n    App_ID:\n      example:\n        App: App\n        MountPoint: MountPoint\n        Volume: Volume\n      properties:\n        App:\n          type: string\n        MountPoint:\n          type: string\n        Volume:\n          type: string\n    AppStartStop:\n      example:\n        process: process\n        version: version\n      properties:\n        process:\n          type: string\n        version:\n          type: string\n      type: object\n    AppCreateResponse:\n      description: Newly created app information.\n      example:\n        ip: ip\n        repository_url: repository_url\n        status: status\n      properties:\n        status:\n          type: string\n        repository_url:\n          type: string\n        ip:\n          type: string\n      type: object\n    AppRouterList:\n      description: Application Router\n      items:\n        $ref: '#/components/schemas/AppRouter'\n      type: array\n    Cluster_kubeConfig_user_exec:\n      example:\n        args:\n        - args\n        - args\n        apiVersion: apiVersion\n        env:\n        - name: name\n          value: value\n        - name: name\n          value: value\n        command: command\n      properties:\n        args:\n          items:\n            type: string\n          type: array\n        apiVersion:\n          type: string\n        env:\n          items:\n            $ref: '#/components/schemas/Cluster_kubeConfig_user_exec_env'\n          type: array\n        command:\n          type: string\n    Team:\n      example:\n        permissions:\n        - permissions\n        - permissions\n        name: name\n        tags:\n        - tags\n        - tags\n      properties:\n        name:\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n        permissions:\n          items:\n            type: string\n          type: array\n      type: object\n    AssignTokenArgs:\n      description: Assign role to token arguments.\n      example:\n        token_id: token_id\n        context: context\n      properties:\n        token_id:\n          type: string\n        context:\n          type: string\n      type: object\n    ServiceDoc:\n      properties:\n        doc:\n          type: string\n      type: object\n    ClusterHelp:\n      example:\n        custom_data_help:\n          key: custom_data_help\n        create_data_help:\n          key: create_data_help\n        provisioner_help: provisioner_help\n      properties:\n        provisioner_help:\n          type: string\n        custom_data_help:\n          additionalProperties:\n            type: string\n          type: object\n        create_data_help:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    RoleUpdateData:\n      description: Role of an user.\n      example:\n        newName: newName\n        contextType: contextType\n        name: name\n        description: description\n      properties:\n        name:\n          type: string\n        contextType:\n          type: string\n        newName:\n          type: string\n        description:\n          type: string\n      type: object\n    AutoScaleSpec:\n      description: Units Auto Scale spec\n      example:\n        process: process\n        averageCPU: averageCPU\n        maxUnits: 5\n        minUnits: 1\n        version: 5\n      properties:\n        process:\n          type: string\n        minUnits:\n          type: integer\n        maxUnits:\n          type: integer\n        averageCPU:\n          type: string\n        version:\n          type: integer\n      type: object\n    Provisioner:\n      example:\n        name: name\n        cluster_help:\n          custom_data_help:\n            key: custom_data_help\n          create_data_help:\n            key: create_data_help\n          provisioner_help: provisioner_help\n      properties:\n        name:\n          type: string\n        cluster_help:\n          $ref: '#/components/schemas/ClusterHelp'\n      type: object\n    Plan:\n      description: App plan.\n      example:\n        default: true\n        router: router\n        memory: 0\n        cpumilli: 0\n        swap: 0\n        name: name\n        override:\n          memory: 5\n          cpumilli: 2\n        cpushare: 0\n      properties:\n        name:\n          type: string\n        memory:\n          format: int64\n          minimum: 0\n          type: integer\n        swap:\n          format: int64\n          minimum: 0\n          type: integer\n        cpushare:\n          minimum: 0\n          type: integer\n        cpumilli:\n          minimum: 0\n          type: integer\n        default:\n          type: boolean\n        router:\n          type: string\n        override:\n          $ref: '#/components/schemas/PlanOverride'\n      type: object\n    Lock:\n      example:\n        owner: owner\n        reason: reason\n        acquireDate: acquireDate\n        locked: true\n      properties:\n        locked:\n          type: boolean\n        reason:\n          type: string\n        owner:\n          type: string\n        acquireDate:\n          type: string\n      type: object\n    NodeGetResponse:\n      example:\n        node:\n          provisioner: provisioner\n          metadata:\n            key: metadata\n          address: address\n          iaasid: iaasid\n          pool: pool\n          status: status\n        units:\n          address:\n            scheme: scheme\n            host: host\n          appname: appname\n          routable: true\n          ready: true\n          processname: processname\n          ip: ip\n          name: name\n          id: id\n          type: type\n          version: 0\n          restarts: 6\n          status: status\n        status:\n          address: address\n          checks:\n          - checks:\n            - err: err\n              name: name\n              successful: true\n            - err: err\n              name: name\n              successful: true\n            time: 2000-01-23T04:56:07.000+00:00\n          - checks:\n            - err: err\n              name: name\n              successful: true\n            - err: err\n              name: name\n              successful: true\n            time: 2000-01-23T04:56:07.000+00:00\n          lastsuccess: 2000-01-23T04:56:07.000+00:00\n          lastupdate: 2000-01-23T04:56:07.000+00:00\n      properties:\n        node:\n          $ref: '#/components/schemas/Node'\n        status:\n          $ref: '#/components/schemas/NodeStatus'\n        units:\n          $ref: '#/components/schemas/Unit'\n      type: object\n    AppRouter:\n      description: Application Router\n      example:\n        addresses:\n        - addresses\n        - addresses\n        address: address\n        opts: '{}'\n        status-detail: status-detail\n        name: name\n        type: type\n        status: status\n      properties:\n        name:\n          type: string\n        opts:\n          properties: {}\n          type: object\n        address:\n          type: string\n        addresses:\n          items:\n            type: string\n          type: array\n        type:\n          type: string\n        status:\n          type: string\n        status-detail:\n          type: string\n      type: object\n    RoleUser:\n      description: Role of an user.\n      example:\n        contexttype: contexttype\n        name: name\n        contextvalue: contextvalue\n        group: group\n      properties:\n        name:\n          type: string\n        contexttype:\n          type: string\n        contextvalue:\n          type: string\n        group:\n          type: string\n      type: object\n    VolumeUpdateData:\n      description: Volume\n      example:\n        teamOwner: teamOwner\n        opts:\n          key: opts\n        name: name\n        pool: pool\n        plan:\n          opts:\n            key: opts\n          name: name\n        status: status\n      properties:\n        name:\n          description: Volume name.\n          type: string\n        pool:\n          description: Volume pool.\n          type: string\n        teamOwner:\n          description: Team that owns the volume.\n          type: string\n        status:\n          description: Volume status.\n          type: string\n        plan:\n          $ref: '#/components/schemas/VolumePlan'\n        opts:\n          additionalProperties:\n            type: string\n          description: Custom volume options.\n          type: object\n      type: object\n    ServiceBroker_Config_AuthConfig_BasicAuthConfig:\n      example:\n        password: password\n        username: username\n      properties:\n        password:\n          type: string\n        username:\n          type: string\n    Webhook:\n      example:\n        team_owner: team_owner\n        headers:\n          key:\n          - headers\n          - headers\n        method: method\n        name: name\n        insecure: true\n        description: description\n        proxy_url: proxy_url\n        body: body\n        event_filter:\n          target_values:\n          - target_values\n          - target_values\n          kind_names:\n          - kind_names\n          - kind_names\n          kind_types:\n          - kind_types\n          - kind_types\n          error_only: true\n          success_only: true\n          target_types:\n          - target_types\n          - target_types\n        url: url\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        team_owner:\n          type: string\n        event_filter:\n          $ref: '#/components/schemas/WebhookEventFilter'\n        url:\n          type: string\n        proxy_url:\n          type: string\n        headers:\n          additionalProperties:\n            items:\n              type: string\n            type: array\n          type: object\n        method:\n          type: string\n        body:\n          type: string\n        insecure:\n          type: boolean\n      type: object\n    ErrorMessage:\n      description: Error message.\n      type: string\n    ServiceInstanceUpdateData:\n      example:\n        description: description\n        plan: plan\n        parameters:\n          key: parameters\n        teamowner: teamowner\n        tags:\n        - tags\n        - tags\n      properties:\n        description:\n          type: string\n        teamowner:\n          type: string\n        plan:\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n        parameters:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    MetadataItem:\n      description: Metadata items\n      example:\n        name: name\n        value: value\n        delete: true\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        delete:\n          type: boolean\n      type: object\n    MiniApp:\n      description: List containing minimal information about apps.\n      example:\n        teamOwner: teamOwner\n        ip: ip\n        name: name\n        pool: pool\n        cname:\n        - cname\n        - cname\n        lock:\n          owner: owner\n          reason: reason\n          acquireDate: acquireDate\n          locked: true\n        units:\n        - address:\n            scheme: scheme\n            host: host\n          appname: appname\n          routable: true\n          ready: true\n          processname: processname\n          ip: ip\n          name: name\n          id: id\n          type: type\n          version: 0\n          restarts: 6\n          status: status\n        - address:\n            scheme: scheme\n            host: host\n          appname: appname\n          routable: true\n          ready: true\n          processname: processname\n          ip: ip\n          name: name\n          id: id\n          type: type\n          version: 0\n          restarts: 6\n          status: status\n        error: error\n        plan:\n          default: true\n          router: router\n          memory: 0\n          cpumilli: 0\n          swap: 0\n          name: name\n          override:\n            memory: 5\n            cpumilli: 2\n          cpushare: 0\n        routers:\n        - address: address\n          opts:\n            key: opts\n          status-detail: status-detail\n          name: name\n          type: type\n          status: status\n        - address: address\n          opts:\n            key: opts\n          status-detail: status-detail\n          name: name\n          type: type\n          status: status\n        tags:\n        - tags\n        - tags\n      properties:\n        name:\n          type: string\n        pool:\n          type: string\n        teamOwner:\n          type: string\n        plan:\n          $ref: '#/components/schemas/Plan'\n        units:\n          items:\n            $ref: '#/components/schemas/Unit'\n          type: array\n        cname:\n          items:\n            type: string\n          type: array\n        ip:\n          type: string\n        routers:\n          items:\n            $ref: '#/components/schemas/Router'\n          type: array\n        lock:\n          $ref: '#/components/schemas/Lock'\n        tags:\n          items:\n            type: string\n          type: array\n        error:\n          type: string\n      type: object\n    Cluster_kubeConfig_user_authprovider:\n      example:\n        name: name\n        config:\n          key: config\n      properties:\n        name:\n          type: string\n        config:\n          additionalProperties:\n            type: string\n          type: object\n    Cluster_kubeConfig_user:\n      example:\n        password: password\n        client-certificate-data: client-certificate-data\n        client-key-data: client-key-data\n        auth-provider:\n          name: name\n          config:\n            key: config\n        exec:\n          args:\n          - args\n          - args\n          apiVersion: apiVersion\n          env:\n          - name: name\n            value: value\n          - name: name\n            value: value\n          command: command\n        token: token\n        username: username\n      properties:\n        password:\n          type: string\n        client-certificate-data:\n          type: string\n        client-key-data:\n          type: string\n        auth-provider:\n          $ref: '#/components/schemas/Cluster_kubeConfig_user_authprovider'\n        exec:\n          $ref: '#/components/schemas/Cluster_kubeConfig_user_exec'\n        token:\n          type: string\n        username:\n          type: string\n    SSHKeyAddData:\n      properties:\n        force:\n          type: boolean\n        key:\n          type: string\n        keyname:\n          type: string\n      type: object\n    CertificateSetData:\n      example:\n        cname: cname\n        certificate: certificate\n        key: key\n      properties:\n        cname:\n          type: string\n        certificate:\n          format: byte\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          x-go-custom-type: '[]byte'\n        key:\n          format: byte\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          x-go-custom-type: '[]byte'\n      type: object\n    ServiceBroker_Config_AuthConfig_BearerConfig:\n      example:\n        token: token\n      properties:\n        token:\n          type: string\n    Unit:\n      example:\n        address:\n          scheme: scheme\n          host: host\n        appname: appname\n        routable: true\n        ready: true\n        processname: processname\n        ip: ip\n        name: name\n        id: id\n        type: type\n        version: 0\n        restarts: 6\n        status: status\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        appname:\n          type: string\n        processname:\n          type: string\n        type:\n          type: string\n        ip:\n          type: string\n        status:\n          type: string\n        version:\n          type: integer\n        routable:\n          type: boolean\n          x-go-custom-type: '*bool'\n        ready:\n          type: boolean\n          x-go-custom-type: '*bool'\n        restarts:\n          type: integer\n          x-go-custom-type: '*int'\n        address:\n          $ref: '#/components/schemas/URL'\n      type: object\n    ServiceInfo:\n      example:\n        teams:\n        - teams\n        - teams\n        name: name\n        pool: pool\n        planname: planname\n        servicename: servicename\n        id: id\n        apps:\n        - apps\n        - apps\n        info: '{}'\n        teamowner: teamowner\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        pool:\n          type: string\n        teams:\n          items:\n            type: string\n          type: array\n        planname:\n          type: string\n        apps:\n          items:\n            type: string\n          type: array\n        servicename:\n          type: string\n        info:\n          properties: {}\n          type: object\n        teamowner:\n          type: string\n      type: object\n    ServiceBroker:\n      example:\n        Config:\n          Context:\n            key: Context\n          Insecure: true\n          CacheExpirationSeconds: 0\n          AuthConfig:\n            BearerConfig:\n              token: token\n            BasicAuthConfig:\n              password: password\n              username: username\n        URL: URL\n        Name: Name\n      properties:\n        Name:\n          type: string\n        URL:\n          type: string\n        Config:\n          $ref: '#/components/schemas/ServiceBroker_Config'\n      type: object\n    PlanOverride:\n      description: App plan override.\n      example:\n        memory: 5\n        cpumilli: 2\n      properties:\n        memory:\n          format: int64\n          type: integer\n          x-go-custom-type: '*int64'\n        cpumilli:\n          type: integer\n          x-go-custom-type: '*int'\n      type: object\n    VolumeBindID:\n      example:\n        app: app\n        volume: volume\n        mountpoint: mountpoint\n      properties:\n        app:\n          description: App the volume is bound to.\n          type: string\n        mountpoint:\n          description: Volume mountpoint.\n          type: string\n        volume:\n          description: Volume name.\n          type: string\n      type: object\n    ServiceInstanceBoundUnit:\n      example:\n        app_name: app_name\n        ip: ip\n        id: id\n      properties:\n        app_name:\n          type: string\n        id:\n          type: string\n        ip:\n          type: string\n      type: object\n    RoleAssignData:\n      description: Assign a role\n      example:\n        roletarget: roletarget\n        name: name\n        sufix: sufix\n        contextvalue: contextvalue\n        version: version\n      properties:\n        name:\n          type: string\n        contextvalue:\n          type: string\n        roletarget:\n          type: string\n        sufix:\n          type: string\n        version:\n          type: string\n      type: object\n    PlanRouter:\n      description: Plan Router\n      example:\n        default: true\n        readinessGates:\n        - readinessGates\n        - readinessGates\n        name: name\n        dynamic: true\n        type: type\n        config: '{}'\n        info:\n          key: info\n      properties:\n        name:\n          type: string\n        type:\n          type: string\n        config:\n          properties: {}\n          type: object\n        info:\n          additionalProperties:\n            type: string\n          type: object\n        default:\n          type: boolean\n        dynamic:\n          type: boolean\n        readinessGates:\n          items:\n            type: string\n          type: array\n      type: object\n    App_volumeBinds:\n      example:\n        ReadOnly: true\n        ID:\n          App: App\n          MountPoint: MountPoint\n          Volume: Volume\n      properties:\n        ReadOnly:\n          type: boolean\n        ID:\n          $ref: '#/components/schemas/App_ID'\n    NodeCheck:\n      example:\n        checks:\n        - err: err\n          name: name\n          successful: true\n        - err: err\n          name: name\n          successful: true\n        time: 2000-01-23T04:56:07.000+00:00\n      properties:\n        time:\n          format: date-time\n          type: string\n        checks:\n          items:\n            $ref: '#/components/schemas/NodeCheckResult'\n          type: array\n      type: object\n    ServiceList:\n      example:\n        instances:\n        - instances\n        - instances\n        service: service\n        plans:\n        - plans\n        - plans\n        service_instances:\n        - team_owner: team_owner\n          bound_units:\n          - app_name: app_name\n            ip: ip\n            id: id\n          - app_name: app_name\n            ip: ip\n            id: id\n          teams:\n          - teams\n          - teams\n          service_name: service_name\n          name: name\n          pool: pool\n          description: description\n          id: 0\n          parameters:\n            key: parameters\n          plan_name: plan_name\n          tags:\n          - tags\n          - tags\n          apps:\n          - apps\n          - apps\n        - team_owner: team_owner\n          bound_units:\n          - app_name: app_name\n            ip: ip\n            id: id\n          - app_name: app_name\n            ip: ip\n            id: id\n          teams:\n          - teams\n          - teams\n          service_name: service_name\n          name: name\n          pool: pool\n          description: description\n          id: 0\n          parameters:\n            key: parameters\n          plan_name: plan_name\n          tags:\n          - tags\n          - tags\n          apps:\n          - apps\n          - apps\n      properties:\n        service:\n          type: string\n        instances:\n          description: '[deprecated]'\n          items:\n            type: string\n          type: array\n        plans:\n          items:\n            type: string\n          type: array\n        service_instances:\n          items:\n            $ref: '#/components/schemas/ServiceInstance'\n          type: array\n      type: object\n    PoolUpdateData:\n      example:\n        default: true\n        public: true\n        force: true\n        labels:\n          key: labels\n      properties:\n        default:\n          type: boolean\n        public:\n          type: boolean\n        force:\n          type: boolean\n        labels:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    VolumeBind:\n      example:\n        readonly: true\n        id:\n          app: app\n          volume: volume\n          mountpoint: mountpoint\n      properties:\n        id:\n          $ref: '#/components/schemas/VolumeBindID'\n        readonly:\n          description: Volume is read-only.\n          type: boolean\n      type: object\n    TeamInfo:\n      example:\n        name: name\n        pools:\n        - default: true\n          provisioner: provisioner\n          public: true\n          teams:\n          - teams\n          - teams\n          allowed:\n            key:\n            - allowed\n            - allowed\n          name: name\n          labels:\n            key: labels\n        - default: true\n          provisioner: provisioner\n          public: true\n          teams:\n          - teams\n          - teams\n          allowed:\n            key:\n            - allowed\n            - allowed\n          name: name\n          labels:\n            key: labels\n        users:\n        - permissions:\n          - contexttype: contexttype\n            name: name\n            contextvalue: contextvalue\n            group: group\n          - contexttype: contexttype\n            name: name\n            contextvalue: contextvalue\n            group: group\n          roles:\n          - contexttype: contexttype\n            name: name\n            contextvalue: contextvalue\n            group: group\n          - contexttype: contexttype\n            name: name\n            contextvalue: contextvalue\n            group: group\n          groups:\n          - groups\n          - groups\n          email: email\n        - permissions:\n          - contexttype: contexttype\n            name: name\n            contextvalue: contextvalue\n            group: group\n          - contexttype: contexttype\n            name: name\n            contextvalue: contextvalue\n            group: group\n          roles:\n          - contexttype: contexttype\n            name: name\n            contextvalue: contextvalue\n            group: group\n          - contexttype: contexttype\n            name: name\n            contextvalue: contextvalue\n            group: group\n          groups:\n          - groups\n          - groups\n          email: email\n        tags:\n        - tags\n        - tags\n        apps:\n        - owner: owner\n          cluster: cluster\n          volumeBinds:\n          - ReadOnly: true\n            ID:\n              App: App\n              MountPoint: MountPoint\n              Volume: Volume\n          - ReadOnly: true\n            ID:\n              App: App\n              MountPoint: MountPoint\n              Volume: Volume\n          metadata:\n            annotations:\n            - name: name\n              value: value\n              delete: true\n            - name: name\n              value: value\n              delete: true\n            labels:\n            - name: name\n              value: value\n              delete: true\n            - name: name\n              value: value\n              delete: true\n          provisioner: provisioner\n          teams:\n          - teams\n          - teams\n          ip: ip\n          cname:\n          - cname\n          - cname\n          pool: pool\n          deploys: 0\n          description: description\n          units:\n          - address:\n              scheme: scheme\n              host: host\n            appname: appname\n            routable: true\n            ready: true\n            processname: processname\n            ip: ip\n            name: name\n            id: id\n            type: type\n            version: 0\n            restarts: 6\n            status: status\n          - address:\n              scheme: scheme\n              host: host\n            appname: appname\n            routable: true\n            ready: true\n            processname: processname\n            ip: ip\n            name: name\n            id: id\n            type: type\n            version: 0\n            restarts: 6\n            status: status\n          autoscale:\n          - process: process\n            averageCPU: averageCPU\n            maxUnits: 5\n            minUnits: 1\n            version: 5\n          - process: process\n            averageCPU: averageCPU\n            maxUnits: 5\n            minUnits: 1\n            version: 5\n          platform: platform\n          internalAddresses:\n          - Version: Version\n            Port: 6\n            Process: Process\n            Domain: Domain\n            Protocol: Protocol\n          - Version: Version\n            Port: 6\n            Process: Process\n            Domain: Domain\n            Protocol: Protocol\n          tags:\n          - tags\n          - tags\n          teamOwner: teamOwner\n          router: router\n          name: name\n          routeropts:\n            key: routeropts\n          routers:\n          - addresses:\n            - addresses\n            - addresses\n            opts: '{}'\n            name: name\n          - addresses:\n            - addresses\n            - addresses\n            opts: '{}'\n            name: name\n          plan:\n            default: true\n            router: router\n            memory: 0\n            cpumilli: 0\n            swap: 0\n            name: name\n            override:\n              memory: 5\n              cpumilli: 2\n            cpushare: 0\n        - owner: owner\n          cluster: cluster\n          volumeBinds:\n          - ReadOnly: true\n            ID:\n              App: App\n              MountPoint: MountPoint\n              Volume: Volume\n          - ReadOnly: true\n            ID:\n              App: App\n              MountPoint: MountPoint\n              Volume: Volume\n          metadata:\n            annotations:\n            - name: name\n              value: value\n              delete: true\n            - name: name\n              value: value\n              delete: true\n            labels:\n            - name: name\n              value: value\n              delete: true\n            - name: name\n              value: value\n              delete: true\n          provisioner: provisioner\n          teams:\n          - teams\n          - teams\n          ip: ip\n          cname:\n          - cname\n          - cname\n          pool: pool\n          deploys: 0\n          description: description\n          units:\n          - address:\n              scheme: scheme\n              host: host\n            appname: appname\n            routable: true\n            ready: true\n            processname: processname\n            ip: ip\n            name: name\n            id: id\n            type: type\n            version: 0\n            restarts: 6\n            status: status\n          - address:\n              scheme: scheme\n              host: host\n            appname: appname\n            routable: true\n            ready: true\n            processname: processname\n            ip: ip\n            name: name\n            id: id\n            type: type\n            version: 0\n            restarts: 6\n            status: status\n          autoscale:\n          - process: process\n            averageCPU: averageCPU\n            maxUnits: 5\n            minUnits: 1\n            version: 5\n          - process: process\n            averageCPU: averageCPU\n            maxUnits: 5\n            minUnits: 1\n            version: 5\n          platform: platform\n          internalAddresses:\n          - Version: Version\n            Port: 6\n            Process: Process\n            Domain: Domain\n            Protocol: Protocol\n          - Version: Version\n            Port: 6\n            Process: Process\n            Domain: Domain\n            Protocol: Protocol\n          tags:\n          - tags\n          - tags\n          teamOwner: teamOwner\n          router: router\n          name: name\n          routeropts:\n            key: routeropts\n          routers:\n          - addresses:\n            - addresses\n            - addresses\n            opts: '{}'\n            name: name\n          - addresses:\n            - addresses\n            - addresses\n            opts: '{}'\n            name: name\n          plan:\n            default: true\n            router: router\n            memory: 0\n            cpumilli: 0\n            swap: 0\n            name: name\n            override:\n              memory: 5\n              cpumilli: 2\n            cpushare: 0\n      properties:\n        name:\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n        users:\n          items:\n            $ref: '#/components/schemas/User'\n          type: array\n        pools:\n          items:\n            $ref: '#/components/schemas/Pool'\n          type: array\n        apps:\n          items:\n            $ref: '#/components/schemas/App'\n          type: array\n      type: object\n    RoleInstance:\n      description: Association between a role and a context value.\n      example:\n        name: name\n        contextvalue: contextvalue\n      properties:\n        name:\n          type: string\n        contextvalue:\n          type: string\n      type: object\n    Cluster_kubeConfig:\n      example:\n        cluster:\n          server: server\n          certificate-authority-data: certificate-authority-data\n          tls-server-name: tls-server-name\n          insecure-skip-tls-verify: true\n        user:\n          password: password\n          client-certificate-data: client-certificate-data\n          client-key-data: client-key-data\n          auth-provider:\n            name: name\n            config:\n              key: config\n          exec:\n            args:\n            - args\n            - args\n            apiVersion: apiVersion\n            env:\n            - name: name\n              value: value\n            - name: name\n              value: value\n            command: command\n          token: token\n          username: username\n      properties:\n        cluster:\n          $ref: '#/components/schemas/Cluster_kubeConfig_cluster'\n        user:\n          $ref: '#/components/schemas/Cluster_kubeConfig_user'\n    AppRunOpts:\n      description: App Run options\n      example:\n        once: true\n        isolated: true\n        command: command\n      properties:\n        once:\n          type: boolean\n        isolated:\n          type: boolean\n        command:\n          type: string\n      type: object\n    NodeAddData:\n      example:\n        metadata:\n          key: metadata\n        address: address\n        clientcert: clientcert\n        clientkey: clientkey\n        cacert: cacert\n        waitto: 0\n        register: true\n      properties:\n        address:\n          type: string\n        cacert:\n          description: Docker API CA certificate.\n          type: string\n        clientcert:\n          description: Docker API client certificate.\n          type: string\n        clientkey:\n          description: Docker API client key.\n          type: string\n        register:\n          description: Register an existing node.\n          type: boolean\n        waitto:\n          description: Timeout in nanoseconds.\n          format: int64\n          type: integer\n        metadata:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    NodeStatus:\n      example:\n        address: address\n        checks:\n        - checks:\n          - err: err\n            name: name\n            successful: true\n          - err: err\n            name: name\n            successful: true\n          time: 2000-01-23T04:56:07.000+00:00\n        - checks:\n          - err: err\n            name: name\n            successful: true\n          - err: err\n            name: name\n            successful: true\n          time: 2000-01-23T04:56:07.000+00:00\n        lastsuccess: 2000-01-23T04:56:07.000+00:00\n        lastupdate: 2000-01-23T04:56:07.000+00:00\n      properties:\n        address:\n          type: string\n        checks:\n          items:\n            $ref: '#/components/schemas/NodeCheck'\n          type: array\n        lastsuccess:\n          format: date-time\n          type: string\n        lastupdate:\n          format: date-time\n          type: string\n      type: object\n    PermissionData:\n      description: Add a permission\n      example:\n        name: name\n        permission:\n        - permission\n        - permission\n      properties:\n        name:\n          type: string\n        permission:\n          items:\n            type: string\n          type: array\n      type: object\n    TeamTokenUpdateArgs:\n      description: Arguments for updating an existing team token.\n      example:\n        regenerate: true\n        description: description\n        expires_in: 0\n      properties:\n        regenerate:\n          type: boolean\n        description:\n          type: string\n        expires_in:\n          description: Expire time in seconds, using a negative value removes the expiration.\n          format: int64\n          type: integer\n      type: object\n    UserQuotaViewResponse:\n      description: Response returned by User Quota View.\n      example:\n        limit: 6\n        inuse: 0\n      properties:\n        inuse:\n          type: integer\n        limit:\n          type: integer\n      type: object\n    User:\n      description: User object.\n      example:\n        permissions:\n        - contexttype: contexttype\n          name: name\n          contextvalue: contextvalue\n          group: group\n        - contexttype: contexttype\n          name: name\n          contextvalue: contextvalue\n          group: group\n        roles:\n        - contexttype: contexttype\n          name: name\n          contextvalue: contextvalue\n          group: group\n        - contexttype: contexttype\n          name: name\n          contextvalue: contextvalue\n          group: group\n        groups:\n        - groups\n        - groups\n        email: email\n      properties:\n        email:\n          type: string\n        roles:\n          items:\n            $ref: '#/components/schemas/RoleUser'\n          type: array\n        groups:\n          items:\n            type: string\n          type: array\n        permissions:\n          items:\n            $ref: '#/components/schemas/PermissionUser'\n          type: array\n      type: object\n    UserData:\n      example:\n        password: password\n        email: email\n      properties:\n        email:\n          type: string\n        password:\n          type: string\n      type: object\n    VolumePlan:\n      description: Volume plan.\n      example:\n        opts:\n          key: opts\n        name: name\n      properties:\n        name:\n          description: Volume plan name.\n          type: string\n        opts:\n          additionalProperties:\n            type: string\n          description: Volume plan opts.\n          type: object\n      type: object\n    ServiceBrokerList:\n      example:\n        brokers:\n        - Config:\n            Context:\n              key: Context\n            Insecure: true\n            CacheExpirationSeconds: 0\n            AuthConfig:\n              BearerConfig:\n                token: token\n              BasicAuthConfig:\n                password: password\n                username: username\n          URL: URL\n          Name: Name\n        - Config:\n            Context:\n              key: Context\n            Insecure: true\n            CacheExpirationSeconds: 0\n            AuthConfig:\n              BearerConfig:\n                token: token\n              BasicAuthConfig:\n                password: password\n                username: username\n          URL: URL\n          Name: Name\n      properties:\n        brokers:\n          items:\n            $ref: '#/components/schemas/ServiceBroker'\n          type: array\n      type: object\n    Env:\n      description: Environment variable.\n      example:\n        private: true\n        managedBy: managedBy\n        name: name\n        alias: alias\n        value: value\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        alias:\n          type: string\n        private:\n          type: boolean\n        managedBy:\n          type: string\n      type: object\n    SSHKeyListResponse:\n      description: Response returned by User SSH Key List.\n      example:\n        keyname: keyname\n      properties:\n        keyname:\n          description: keyvalue\n          type: string\n      type: object\n    ServiceBroker_Config:\n      example:\n        Context:\n          key: Context\n        Insecure: true\n        CacheExpirationSeconds: 0\n        AuthConfig:\n          BearerConfig:\n            token: token\n          BasicAuthConfig:\n            password: password\n            username: username\n      properties:\n        Context:\n          additionalProperties:\n            type: string\n          type: object\n        Insecure:\n          type: boolean\n        CacheExpirationSeconds:\n          type: integer\n        AuthConfig:\n          $ref: '#/components/schemas/ServiceBroker_Config_AuthConfig'\n    NodeContainer_config:\n      example:\n        env:\n        - env\n        - env\n      properties:\n        env:\n          items:\n            type: string\n          type: array\n    PermissionUser:\n      description: Permission of an user.\n      example:\n        contexttype: contexttype\n        name: name\n        contextvalue: contextvalue\n        group: group\n      properties:\n        name:\n          type: string\n        contexttype:\n          type: string\n        contextvalue:\n          type: string\n        group:\n          type: string\n      type: object\n    AppCName:\n      description: Application CNames\n      example:\n        cname:\n        - cname\n        - cname\n      properties:\n        cname:\n          items:\n            type: string\n          type: array\n      type: object\n    ServiceInstanceUnbind:\n      example:\n        noRestart: true\n        force: true\n      properties:\n        noRestart:\n          type: boolean\n        force:\n          type: boolean\n      type: object\n    TeamCreateArgs:\n      example:\n        name: name\n        tags:\n        - tags\n        - tags\n      properties:\n        name:\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n      type: object\n    App_internalAddresses:\n      example:\n        Version: Version\n        Port: 6\n        Process: Process\n        Domain: Domain\n        Protocol: Protocol\n      properties:\n        Version:\n          type: string\n        Port:\n          format: int64\n          type: integer\n        Process:\n          type: string\n        Domain:\n          type: string\n        Protocol:\n          type: string\n    EnvSetData:\n      description: Data sent to the environment set endpoint.\n      example:\n        pruneUnused: true\n        private: true\n        managedBy: managedBy\n        envs:\n        - private: true\n          managedBy: managedBy\n          name: name\n          alias: alias\n          value: value\n        - private: true\n          managedBy: managedBy\n          name: name\n          alias: alias\n          value: value\n        norestart: true\n      properties:\n        envs:\n          items:\n            $ref: '#/components/schemas/Env'\n          minItems: 1\n          type: array\n        managedBy:\n          type: string\n        pruneUnused:\n          type: boolean\n        norestart:\n          type: boolean\n        private:\n          type: boolean\n      type: object\n    AppDeployOptions:\n      example:\n        image: image\n        new-version: true\n        message: message\n        override-versions: true\n      properties:\n        image:\n          type: string\n        message:\n          type: string\n        new-version:\n          type: boolean\n        override-versions:\n          type: boolean\n      required:\n      - image\n      type: object\n    ServiceInstanceInfo:\n      example:\n        teams:\n        - teams\n        - teams\n        pool: pool\n        planname: planname\n        description: description\n        plandescription: plandescription\n        custominfo:\n          key: custominfo\n        parameters:\n          key: parameters\n        apps:\n        - apps\n        - apps\n        teamowner: teamowner\n        tags:\n        - tags\n        - tags\n      properties:\n        apps:\n          items:\n            type: string\n          type: array\n        teams:\n          items:\n            type: string\n          type: array\n        teamowner:\n          type: string\n        description:\n          type: string\n        pool:\n          type: string\n        planname:\n          type: string\n        plandescription:\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n        custominfo:\n          additionalProperties:\n            type: string\n          type: object\n        parameters:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    Service:\n      properties:\n        id:\n          type: string\n        username:\n          type: string\n        password:\n          type: string\n        endpoint:\n          type: string\n        multi-cluster:\n          type: string\n        team:\n          type: string\n      type: object\n    Cluster:\n      example:\n        addresses:\n        - addresses\n        - addresses\n        provisioner: provisioner\n        default: true\n        clientcert: clientcert\n        httpProxy: httpProxy\n        clientkey: clientkey\n        cacert: cacert\n        name: name\n        pools:\n        - pools\n        - pools\n        kubeConfig:\n          cluster:\n            server: server\n            certificate-authority-data: certificate-authority-data\n            tls-server-name: tls-server-name\n            insecure-skip-tls-verify: true\n          user:\n            password: password\n            client-certificate-data: client-certificate-data\n            client-key-data: client-key-data\n            auth-provider:\n              name: name\n              config:\n                key: config\n            exec:\n              args:\n              - args\n              - args\n              apiVersion: apiVersion\n              env:\n              - name: name\n                value: value\n              - name: name\n                value: value\n              command: command\n            token: token\n            username: username\n        custom_data:\n          key: custom_data\n        local: true\n      properties:\n        name:\n          type: string\n        addresses:\n          items:\n            type: string\n          type: array\n        provisioner:\n          type: string\n        cacert:\n          format: byte\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          x-go-custom-type: '[]byte'\n        clientcert:\n          format: byte\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          x-go-custom-type: '[]byte'\n        clientkey:\n          format: byte\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          x-go-custom-type: '[]byte'\n        pools:\n          items:\n            type: string\n          type: array\n        default:\n          type: boolean\n        local:\n          type: boolean\n        custom_data:\n          additionalProperties:\n            type: string\n          type: object\n        httpProxy:\n          type: string\n        kubeConfig:\n          $ref: '#/components/schemas/Cluster_kubeConfig'\n      type: object\n    DynamicRouter:\n      description: Dynamic router\n      example:\n        readinessGates:\n        - readinessGates\n        - readinessGates\n        name: name\n        type: type\n        config: '{}'\n      properties:\n        name:\n          type: string\n        type:\n          type: string\n        readinessGates:\n          items:\n            type: string\n          type: array\n        config:\n          properties: {}\n          type: object\n      type: object\n    PlatformInfo:\n      example:\n        images:\n        - images\n        - images\n        platform:\n          name: name\n          disabled: true\n      properties:\n        platform:\n          $ref: '#/components/schemas/Platform'\n        images:\n          items:\n            type: string\n          type: array\n      type: object\n    ChangePasswordData:\n      example:\n        confirm: confirm\n        new: new\n        old: old\n      properties:\n        confirm:\n          type: string\n        new:\n          type: string\n        old:\n          type: string\n      type: object\n    TeamUpdateArgs:\n      example:\n        newname: newname\n        tags:\n        - tags\n        - tags\n      properties:\n        newname:\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n      type: object\n    EventCancelArgs:\n      example:\n        reason: reason\n      properties:\n        reason:\n          type: string\n      type: object\n    Quota:\n      example:\n        limit: 6\n        inuse: 0\n      properties:\n        inuse:\n          format: int64\n          type: integer\n        limit:\n          format: int64\n          type: integer\n      type: object\n    PoolConstraintSet:\n      example:\n        Field: Field\n        Values:\n        - Values\n        - Values\n        Blacklist: true\n        append: true\n        PoolExpr: PoolExpr\n      properties:\n        append:\n          type: boolean\n        PoolExpr:\n          type: string\n        Field:\n          type: string\n        Values:\n          items:\n            type: string\n          type: array\n        Blacklist:\n          type: boolean\n      type: object\n    NodeUpdateData:\n      example:\n        metadata:\n          key: metadata\n        address: address\n        enable: true\n        disable: true\n        pool: pool\n      properties:\n        address:\n          type: string\n        pool:\n          type: string\n        metadata:\n          additionalProperties:\n            type: string\n          type: object\n        enable:\n          type: boolean\n        disable:\n          type: boolean\n      type: object\n    RoleAddData:\n      description: Role of an user.\n      example:\n        contexttype: contexttype\n        name: name\n        description: description\n      properties:\n        name:\n          type: string\n        contexttype:\n          type: string\n        description:\n          type: string\n      type: object\n    InputApp:\n      example:\n        teamOwner: teamOwner\n        router: router\n        metadata:\n          annotations:\n          - name: name\n            value: value\n            delete: true\n          - name: name\n            value: value\n            delete: true\n          labels:\n          - name: name\n            value: value\n            delete: true\n          - name: name\n            value: value\n            delete: true\n        name: name\n        pool: pool\n        routeropts:\n          key: routeropts\n        description: description\n        plan: plan\n        platform: platform\n        tags:\n        - tags\n        - tags\n      properties:\n        name:\n          description: App name.\n          type: string\n        tags:\n          description: App tags.\n          items:\n            type: string\n          type: array\n        router:\n          description: App router name.\n          type: string\n        routeropts:\n          additionalProperties:\n            type: string\n          description: Custom router options.\n          type: object\n        plan:\n          description: App plan name.\n          type: string\n        pool:\n          description: App pool name.\n          type: string\n        platform:\n          description: App platform.\n          type: string\n        description:\n          description: App description.\n          type: string\n        teamOwner:\n          description: Team that owns the app.\n          type: string\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n      required:\n      - name\n      type: object\n  securitySchemes:\n    Bearer:\n      in: header\n      name: Authorization\n      type: apiKey\n",
			"canonicalURL": "/github.com/tsuru/go-tsuruclient@0d2868229cfd46041fa9987ced88e6061934a316/-/blob/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/tsuru/go-tsuruclient/blob/0d2868229cfd46041fa9987ced88e6061934a316/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/1.4/volumes/{volume}/bind\": delete: requestBody: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}