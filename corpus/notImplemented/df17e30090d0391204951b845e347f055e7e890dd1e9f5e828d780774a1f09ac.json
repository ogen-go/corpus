{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openapis/api-specs"
		},
		"file": {
			"name": "stackexchange-api-v2.2_openapi-v3.0.yaml",
			"size": 0,
			"path": "stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml",
			"byteSize": 23335,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://api.stackexchange.com/2.2'\ninfo:\n  description: Stack Exchange API\n  version: '2.2'\n  title: Stack Exchange API\n  termsOfService: 'https://stackoverflow.com/legal/api-terms-of-use'\n  contact:\n    url: https://api.stackexchange.com/\ntags:\n  - name: Answers\n  - name: Questions\n  - name: Users\n    description: 'All user methods that take an {ids} parameter have a /me equivalent method that takes an access_token instead. These methods are provided for developer convenience, with the exception of plain /me, which is actually necessary for discovering which user authenticated to an application.'\npaths:\n  /questions:\n    get:\n      tags:\n        - Questions\n      description: |-\n        Gets all the questions on the site.\n        This method allows you make fairly flexible queries across the entire corpus of questions on a site.\n      operationId: listQuestions\n      parameters:\n        - name: fromdate\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: todate\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: min\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: max\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: tagged\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: order\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - desc\n              - asc\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - activity\n              - votes\n              - creation\n              - hot\n              - week\n              - month\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: pagesize\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: site\n          in: query\n          required: true\n          schema:\n            type: string\n            default: stackoverflow\n      responses:\n        default:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QuestionsResponse'\n      summary: List Questions\n  /questions/featured:\n    get:\n      tags:\n        - Questions\n      description: |-\n        Gets all the questions on the site.\n        This method allows you make fairly flexible queries across the entire corpus of questions on a site.\n      operationId: listFeaturedQuestions\n      parameters:\n        - name: fromdate\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: todate\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: min\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: max\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: tagged\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: order\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - desc\n              - asc\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - activity\n              - votes\n              - creation\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: pagesize\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: site\n          in: query\n          required: true\n          schema:\n            type: string\n            default: stackoverflow\n      responses:\n        default:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QuestionsResponse'\n      summary: List Featured Questions\n  /questions/no-answers:\n    get:\n      tags:\n        - Questions\n      description: |-\n        Returns questions which have received no answers.\n        Compare with /questions/unanswered which merely returns questions that the sites consider insufficiently well answered.\n      operationId: listQuestionsWithoutAnswers\n      parameters:\n        - name: fromdate\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: todate\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: min\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: max\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: tagged\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: order\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - desc\n              - asc\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - activity\n              - votes\n              - creation\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: pagesize\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: site\n          in: query\n          required: true\n          schema:\n            type: string\n            default: stackoverflow\n      responses:\n        default:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QuestionsResponse'\n      summary: List Questions without Answers\n  /questions/unanswered:\n    get:\n      tags:\n        - Questions\n      description: |-\n        Gets all the questions on the site.\n        This method allows you make fairly flexible queries across the entire corpus of questions on a site.\n      operationId: listUnansweredQuestions\n      parameters:\n        - name: fromdate\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: todate\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: min\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: max\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: tagged\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: order\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - desc\n              - asc\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - activity\n              - votes\n              - creation\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: pagesize\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: site\n          in: query\n          required: true\n          schema:\n            type: string\n            default: stackoverflow\n      responses:\n        default:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QuestionsResponse'\n      summary: List Unanswered Questions\n  /users:\n    get:\n      tags:\n        - Users\n      description: |-\n        Returns all users on a site.\n\n        This method returns a list of users.\n\n        The sorts accepted by this method operate on the following fields of the user object:\n\n        reputation – reputation\n        creation – creation_date\n        name – display_name\n        modified – last_modified_date\n\n        reputation is the default sort.\n\n        It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.\n        The `inname` parameter lets consumers filter the results down to just those users with a certain substring in their display name. For example, `inname=kevin` will return all users with both users named simply \"Kevin\" or those with Kevin as one of (or part of) their names; such as \"Kevin Montrose\".\n      operationId: listUsers\n      parameters:\n        - name: inname\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: fromdate\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: todate\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: min\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: max\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: sort\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - reputation\n              - creation\n              - name\n              - modified\n        - name: order\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - desc\n              - asc\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: pagesize\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: site\n          in: query\n          required: true\n          schema:\n            type: string\n            default: stackoverflow\n      responses:\n        default:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UsersResponse'\n      summary: List Users\n  /me:\n    get:\n      tags:\n        - Users\n      description: |-\n        Returns the user associated with the passed access_token.\n\n        This method returns a [user](https://api.stackexchange.com/docs/types/user).\n      operationId: getMe\n      parameters:\n        - name: site\n          in: query\n          required: true\n          schema:\n            type: string\n            default: stackoverflow\n      responses:\n        default:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UsersResponse'\n  '/users/{userIds}/reputation':\n    get:\n      tags:\n        - Users\n      description: |-\n        Gets a subset of the reputation changes for users in {ids}.\n        Reputation changes are intentionally scrubbed of some data to make it difficult to correlate votes on particular posts with user reputation changes. That being said, this method returns enough data for reasonable display of reputation trends.\n        {ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for user_id on user or shallow_user objects.\n        This method returns a list of reputation objects.\n      operationId: getUsersReputationChanges\n      parameters:\n        - name: userIds\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: fromdate\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: todate\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: pagesize\n          in: query\n          required: false\n          schema:\n            type: integer\n            minimum: 0\n            maximum: 100\n        - name: site\n          in: query\n          required: true\n          schema:\n            type: string\n            default: stackoverflow\n      responses:\n        default:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReputationResponse'\n      summary: Get Users Reputation Changes\n  /me/reputation:\n    get:\n      tags:\n        - Users\n      description: |-\n        Returns the reputation changed for the user associated with the given access_token.\n        This method returns a list of [reputation changes](https://api.stackexchange.com/docs/types/reputation).\n      operationId: getMyReputation\n      responses:\n        default:\n          description: Success\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ReputationResponse'\n  '/users/{userIds}/reputation-history':\n    get:\n      tags:\n        - Users\n      description: |-\n        Returns users' public reputation history.\n        This method returns a list of reputation_history.\n      operationId: getUsersReputationHistory\n      parameters:\n        - name: userIds\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: pagesize\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: site\n          in: query\n          required: true\n          schema:\n            type: string\n            default: stackoverflow\n      responses:\n        default:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReputationHistoryResponse'\n  /me/reputation-history:\n    get:\n      tags:\n        - Users\n      description: |-\n        Returns user's public reputation history.\n\n        This method returns a list of [reputation_history](https://api.stackexchange.com/docs/types/reputation-history).\n      operationId: getMyReputationHistory\n      parameters:\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: pagesize\n          in: query\n          required: false\n          schema:\n            type: integer\n      responses:\n        default:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReputationHistoryResponse'\n  /answers:\n    get:\n      summary: List Answers\n      tags:\n        - Answers\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnswersResponse'\n      operationId: listAnswers\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: site\n          description: 'This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object.'\n        - schema:\n            type: integer\n          in: query\n          name: fromdate\n          description: 'Unix epoch time '\n        - schema:\n            type: integer\n          in: query\n          name: todate\n          description: 'Unix epoch time '\n        - schema:\n            type: integer\n          in: query\n          name: min\n          description: 'Unix epoch time '\n        - schema:\n            type: integer\n          in: query\n          name: max\n          description: 'Unix epoch time '\n        - schema:\n            type: string\n            enum:\n              - activity\n              - creation\n              - votes\n          in: query\n          name: sort\n          description: '`activity` corresponds to `Answer. last_activity_date` , `creation` to `Answer.creation_date` and `votes` to `Answer.score`'\n        - schema:\n            type: string\n            enum:\n              - desc\n              - asc\n          in: query\n          name: order\n        - schema:\n            type: integer\n          in: query\n          name: page\n        - schema:\n            type: integer\n          in: query\n          name: pagesize\n      description: 'Returns a list of [answers](https://api.stackexchange.com/docs/types/answer).'\ncomponents:\n  schemas:\n    QuestionsResponse:\n      type: object\n      properties:\n        items:\n          type: array\n          description: A list of questions.\n          items:\n            $ref: '#/components/schemas/Question'\n        has_more:\n          type: boolean\n        quota_max:\n          type: integer\n        quota_remaining:\n          type: integer\n    Question:\n      type: object\n      properties:\n        tags:\n          type: array\n          items:\n            type: string\n        owner:\n          $ref: '#/components/schemas/QuestionOwner'\n        is_answered:\n          type: boolean\n        view_count:\n          type: integer\n        answer_count:\n          type: integer\n        score:\n          type: integer\n        last_activity_date:\n          type: integer\n        creation_date:\n          type: integer\n        question_id:\n          type: integer\n        link:\n          type: string\n        title:\n          type: string\n    QuestionOwner:\n      type: object\n      properties:\n        reputation:\n          type: integer\n        user_id:\n          type: integer\n        user_type:\n          type: string\n        profile_image:\n          type: string\n        display_name:\n          type: string\n        link:\n          type: string\n    ReputationResponse:\n      type: object\n      properties:\n        items:\n          type: array\n          description: A list of reputation_history.\n          items:\n            $ref: '#/components/schemas/ReputationChange'\n        has_more:\n          type: boolean\n        quota_max:\n          type: integer\n        quota_remaining:\n          type: integer\n    ReputationChange:\n      type: object\n      properties:\n        on_date:\n          type: integer\n        reputation_change:\n          type: integer\n        vote_type:\n          type: string\n          enum:\n            - accepts\n            - bounties_won\n            - down_votes\n            - up_votes\n        post_type:\n          type: string\n        post_id:\n          type: integer\n        user_id:\n          type: integer\n    ReputationHistoryResponse:\n      type: object\n      properties:\n        items:\n          type: array\n          description: A list of reputation_history.\n          items:\n            $ref: '#/components/schemas/ReputationHistory'\n        has_more:\n          type: boolean\n        quota_max:\n          type: integer\n        quota_remaining:\n          type: integer\n    ReputationHistory:\n      type: object\n      properties:\n        reputation_history_type:\n          type: string\n        reputation_change:\n          type: integer\n        post_id:\n          type: integer\n        creation_date:\n          type: integer\n        user_id:\n          type: integer\n    User:\n      type: object\n      properties:\n        badge_counts:\n          $ref: '#/components/schemas/UserBadgeCounts'\n        account_id:\n          type: integer\n          format: int64\n        is_employee:\n          type: boolean\n        last_modified_date:\n          type: integer\n          format: int64\n        last_access_date:\n          type: integer\n          format: int64\n        reputation_change_year:\n          type: integer\n        reputation_change_quarter:\n          type: integer\n        reputation_change_month:\n          type: integer\n        reputation_change_week:\n          type: integer\n        reputation_change_day:\n          type: integer\n        reputation:\n          type: integer\n          format: int64\n        creation_date:\n          type: integer\n          format: int64\n        user_type:\n          type: string\n        user_id:\n          type: integer\n          format: int64\n        accept_rate:\n          type: integer\n        location:\n          type: string\n        website_url:\n          type: string\n          format: uri\n        link:\n          type: string\n          format: uri\n        profile_image:\n          type: string\n          format: uri\n        display_name:\n          type: string\n    UserBadgeCounts:\n      type: object\n      properties:\n        bronze:\n          type: integer\n        silver:\n          type: integer\n        gold:\n          type: integer\n    UsersResponse:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        has_more:\n          type: boolean\n        quote_max:\n          type: integer\n        quota_remaining:\n          type: integer\n    Answer:\n      title: Answer\n      type: object\n      properties:\n        accepted:\n          type: boolean\n        answer_id:\n          type: integer\n        awarded_bounty_amount:\n          type: integer\n        awarded_bounty_users:\n          type: array\n          items:\n            $ref: '#/components/schemas/ShallowUser'\n        body:\n          type: string\n        body_markdown:\n          type: string\n        can_flag:\n          type: boolean\n        comment_count:\n          type: integer\n        comments:\n          type: array\n          items:\n            $ref: '#/components/schemas/Comment'\n        community_owned_date:\n          type: integer\n        content_license:\n          type: string\n        creation_date:\n          type: integer\n        down_vote_count:\n          type: integer\n        is_accepted:\n          type: boolean\n        last_activity_date:\n          type: integer\n        last_edit_date:\n          type: integer\n        last_editor:\n          $ref: '#/components/schemas/ShallowUser'\n        link:\n          type: string\n        locked_date:\n          type: integer\n        owner:\n          $ref: '#/components/schemas/ShallowUser'\n        question_id:\n          type: integer\n        score:\n          type: boolean\n        share_link:\n          type: integer\n        tags:\n          type: array\n          items:\n            type: string\n        title:\n          type: string\n        up_vote_count:\n          type: integer\n        upvoted:\n          type: boolean\n    ShallowUser:\n      title: ShallowUser\n      type: object\n      properties:\n        id:\n          type: string\n    Comment:\n      title: Comment\n      type: object\n      properties:\n        id:\n          type: string\n    AnswersResponse:\n      title: AnswersResponse\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Answer'\n        has_more:\n          type: boolean\n        backoff:\n          type: integer\n        quota_max:\n          type: integer\n        quota_remaining:\n          type: integer\n",
			"canonicalURL": "/github.com/openapis/api-specs@b2c894af09970f8a308b37f88b8c9bc1e9cad0d3/-/blob/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/openapis/api-specs/blob/b2c894af09970f8a308b37f88b8c9bc1e9cad0d3/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/me/reputation\": get: responses: default: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}