{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/provectus/kafka-ui"
		},
		"file": {
			"name": "kafka-ui-api.yaml",
			"size": 0,
			"path": "kafka-ui-contract/src/main/resources/swagger/kafka-ui-api.yaml",
			"byteSize": 71887,
			"content": "openapi: 3.0.0\ninfo:\n  description: Api Documentation\n  version: 0.1.0\n  title: Api Documentation\n  termsOfService: urn:tos\n  contact: {}\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0\ntags:\n  - name: /api/clusters\n  - name: /api/clusters/connects\nservers:\n  - url: /localhost\n\npaths:\n  /api/clusters:\n    get:\n      tags:\n        - Clusters\n      summary: getClusters\n      operationId: getClusters\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Cluster'\n\n\n  /api/clusters/{clusterName}/cache:\n    post:\n      tags:\n        - Clusters\n      summary: updateClusterInfo\n      operationId: updateClusterInfo\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Cluster'\n        404:\n          description: Not found\n\n\n  /api/clusters/{clusterName}/brokers:\n    get:\n      tags:\n        - Brokers\n      summary: getBrokers\n      operationId: getBrokers\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Broker'\n\n  /api/clusters/{clusterName}/brokers/{id}/configs:\n    get:\n      tags:\n        - Brokers\n      summary: getBrokerConfig\n      operationId: getBrokerConfig\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BrokerConfig'\n        404:\n          description: Not found\n\n  /api/clusters/{clusterName}/brokers/{id}/configs/{name}:\n    put:\n      tags:\n        - Brokers\n      summary: updateBrokerConfigByName\n      operationId: updateBrokerConfigByName\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BrokerConfigItem'\n      responses:\n        200:\n          description: OK\n\n  /api/clusters/{clusterName}/metrics:\n    get:\n      tags:\n        - Clusters\n      summary: getClusterMetrics\n      operationId: getClusterMetrics\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClusterMetrics'\n\n  /api/clusters/{clusterName}/stats:\n    get:\n      tags:\n        - Clusters\n      summary: getClusterStats\n      operationId: getClusterStats\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClusterStats'\n\n  /api/clusters/{clusterName}/brokers/{id}/metrics:\n    get:\n      tags:\n        - Brokers\n      summary: getBrokersMetrics\n      operationId: getBrokersMetrics\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BrokerMetrics'\n\n  /api/clusters/{clusterName}/brokers/logdirs:\n    get:\n      tags:\n        - Brokers\n      summary: getAllBrokersLogdirs\n      operationId: getAllBrokersLogdirs\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: broker\n          in: query\n          description: array of broker ids\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BrokersLogdirs'\n\n  /api/clusters/{clusterName}/brokers/{id}/logdirs:\n    patch:\n      tags:\n        - Brokers\n      summary: updateBrokerTopicPartitionLogDir\n      operationId: updateBrokerTopicPartitionLogDir\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BrokerLogdirUpdate'\n      responses:\n        200:\n          description: OK\n\n  /api/clusters/{clusterName}/topics:\n    get:\n      tags:\n        - Topics\n      summary: getTopics\n      operationId: getTopics\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: perPage\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: showInternal\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: search\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: orderBy\n          in: query\n          required: false\n          schema:\n            $ref: '#/components/schemas/TopicColumnsToSort'\n        - name: sortOrder\n          in: query\n          required: false\n          schema:\n            $ref: '#/components/schemas/SortOrder'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TopicsResponse'\n    post:\n      tags:\n        - Topics\n      summary: createTopic\n      operationId: createTopic\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TopicCreation'\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Topic'\n\n  /api/clusters/{clusterName}/topics/{topicName}/clone:\n    post:\n      tags:\n        - Topics\n      summary: cloneTopic\n      operationId: cloneTopic\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: newTopicName\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Topic'\n        404:\n          description: Not found\n\n  /api/clusters/{clusterName}/topics/{topicName}/analysis:\n    get:\n      tags:\n        - Topics\n      summary: getTopicAnalysis\n      operationId: getTopicAnalysis\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TopicAnalysis'\n        404:\n          description: Not found\n    post:\n      tags:\n        - Topics\n      summary: analyzeTopic\n      operationId: analyzeTopic\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Analysis started\n        404:\n          description: Not found\n    delete:\n      tags:\n        - Topics\n      summary: cancelTopicAnalysis\n      operationId: cancelTopicAnalysis\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Analysis cancelled\n        404:\n          description: Not found\n\n\n  /api/clusters/{clusterName}/topics/{topicName}:\n    get:\n      tags:\n        - Topics\n      summary: getTopicDetails\n      operationId: getTopicDetails\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TopicDetails'\n    post:\n      tags:\n        - Topics\n      summary: recreateTopic\n      operationId: recreateTopic\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Topic'\n        404:\n          description: Not found\n        408:\n          description: Topic recreation timeout\n    patch:\n      tags:\n        - Topics\n      summary: updateTopic\n      operationId: updateTopic\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TopicUpdate'\n      responses:\n        200:\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Topic'\n    delete:\n      tags:\n        - Topics\n      summary: deleteTopic\n      operationId: deleteTopic\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n        404:\n          description: Not found\n\n  /api/clusters/{clusterName}/topics/{topicName}/config:\n    get:\n      tags:\n        - Topics\n      summary: getTopicConfigs\n      operationId: getTopicConfigs\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TopicConfig'\n\n  /api/clusters/{clusterName}/topics/{topicName}/replications:\n    patch:\n      tags:\n        - Topics\n      summary: changeReplicationFactor\n      operationId: changeReplicationFactor\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReplicationFactorChange'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReplicationFactorChangeResponse'\n        404:\n          description: Not found\n\n  /api/clusters/{clusterName}/topics/{topicName}/messages:\n    get:\n      tags:\n        - Messages\n      summary: getTopicMessages\n      operationId: getTopicMessages\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: seekType\n          in: query\n          schema:\n            $ref: \"#/components/schemas/SeekType\"\n        - name: seekTo\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n          description: The format is [partition]::[offset] for specifying offsets or [partition]::[timestamp in millis] for specifying timestamps\n        - name: limit\n          in: query\n          schema:\n            type: integer\n        - name: q\n          in: query\n          schema:\n            type: string\n        - name: filterQueryType\n          in: query\n          schema:\n            $ref:  \"#/components/schemas/MessageFilterType\"\n        - name: seekDirection\n          in: query\n          schema:\n            $ref: \"#/components/schemas/SeekDirection\"\n      responses:\n        200:\n          description: OK\n          content:\n            text/event-stream:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TopicMessageEvent'\n    delete:\n      tags:\n        - Messages\n      summary: deleteTopicMessages\n      operationId: deleteTopicMessages\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: partitions\n          in: query\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n      responses:\n        200:\n          description: OK\n        404:\n          description: Not found\n    post:\n      tags:\n        - Messages\n      summary: sendTopicMessages\n      operationId: sendTopicMessages\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateTopicMessage'\n      responses:\n        200:\n          description: OK\n        404:\n          description: Not found\n\n  /api/clusters/{clusterName}/topics/{topicName}/messages/schema:\n    get:\n      tags:\n        - Messages\n      summary: getTopicSchema\n      operationId: getTopicSchema\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TopicMessageSchema'\n\n  /api/clusters/{clusterName}/topics/{topicName}/consumer-groups:\n    get:\n      tags:\n        - Consumer Groups\n      summary: get Consumer Groups By Topics\n      operationId: getTopicConsumerGroups\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConsumerGroup'\n\n  /api/clusters/{clusterName}/consumer-groups/paged:\n    get:\n      tags:\n        - Consumer Groups\n      summary: Get consumer croups with paging support\n      operationId: getConsumerGroupsPage\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: perPage\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: search\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: orderBy\n          in: query\n          required: false\n          schema:\n            $ref: '#/components/schemas/ConsumerGroupOrdering'\n        - name: sortOrder\n          in: query\n          required: false\n          schema:\n            $ref: '#/components/schemas/SortOrder'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerGroupsPageResponse'\n\n\n  /api/clusters/{clusterName}/consumer-groups/{id}:\n    get:\n      tags:\n        - Consumer Groups\n      summary: get Consumer Group By Id\n      operationId: getConsumerGroup\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerGroupDetails'\n\n    delete:\n      tags:\n        - Consumer Groups\n      summary: Delete Consumer Group by ID\n      operationId: deleteConsumerGroup\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n\n  /api/clusters/{clusterName}/consumer-groups:\n    get:\n      tags:\n        - Consumer Groups\n      summary: get all ConsumerGroups\n      operationId: getConsumerGroups\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConsumerGroup'\n\n  /api/clusters/{clusterName}/consumer-groups/{id}/offsets:\n    post:\n      tags:\n        - Consumer Groups\n      summary: resets consumer group offsets\n      operationId: resetConsumerGroupOffsets\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsumerGroupOffsetsReset'\n      responses:\n        200:\n          description: OK\n\n  /api/clusters/{clusterName}/schemas:\n    post:\n      tags:\n        - Schemas\n      summary: create a new subject schema\n      operationId: createNewSchema\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewSchemaSubject'\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaSubject'\n        400:\n          description: Bad request\n        409:\n          description: Duplicate schema\n        422:\n          description: Invalid parameters\n    get:\n      tags:\n        - Schemas\n      summary: get all schemas of latest version from Schema Registry service\n      operationId: getSchemas\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: perPage\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: search\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaSubjectsResponse'\n\n  /api/clusters/{clusterName}/schemas/{subject}:\n    delete:\n      tags:\n        - Schemas\n      summary: delete schema from Schema Registry service\n      operationId: deleteSchema\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: subject\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n        404:\n          description: Not found\n\n  /api/clusters/{clusterName}/schemas/{subject}/versions:\n    get:\n      tags:\n        - Schemas\n      summary: get all version of subject from Schema Registry service\n      operationId: getAllVersionsBySubject\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: subject\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SchemaSubject'\n\n  /api/clusters/{clusterName}/schemas/{subject}/latest:\n    get:\n      tags:\n        - Schemas\n      summary: get the latest schema from Schema Registry service\n      operationId: getLatestSchema\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: subject\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaSubject'\n    delete:\n      tags:\n        - Schemas\n      summary: delete the latest schema from schema registry\n      operationId: deleteLatestSchema\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: subject\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n        404:\n          description: Not found\n\n\n  /api/clusters/{clusterName}/schemas/{subject}/versions/{version}:\n    get:\n      tags:\n        - Schemas\n      summary: get schema by version from Schema Registry service\n      operationId: getSchemaByVersion\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: subject\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaSubject'\n    delete:\n      tags:\n        - Schemas\n      summary: delete schema by version from schema registry\n      operationId: deleteSchemaByVersion\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: subject\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: version\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: OK\n        404:\n          description: Not found\n\n  /api/clusters/{clusterName}/schemas/compatibility:\n    get:\n      tags:\n        - Schemas\n      summary: Get global schema compatibility level\n      operationId: getGlobalSchemaCompatibilityLevel\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CompatibilityLevel'\n    put:\n      tags:\n        - Schemas\n      summary: Update compatibility level globally\n      operationId: updateGlobalSchemaCompatibilityLevel\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CompatibilityLevel'\n      responses:\n        200:\n          description: OK\n        404:\n          description: Not Found\n\n  /api/clusters/{clusterName}/schemas/{subject}/compatibility:\n    put:\n      tags:\n        - Schemas\n      summary: Update compatibility level for specific schema.\n      operationId: updateSchemaCompatibilityLevel\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: subject\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CompatibilityLevel'\n      responses:\n        200:\n          description: OK\n        404:\n          description: Not Found\n\n  /api/clusters/{clusterName}/schemas/{subject}/check:\n    post:\n      tags:\n        - Schemas\n      summary: Check compatibility of the schema.\n      operationId: checkSchemaCompatibility\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: subject\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewSchemaSubject'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CompatibilityCheckResponse'\n        404:\n          description: Not Found\n\n  /api/clusters/{clusterName}/connects:\n    get:\n      tags:\n        - Kafka Connect\n      summary: get all kafka connect instances\n      operationId: getConnects\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Connect'\n\n  /api/clusters/{clusterName}/connectors:\n    get:\n      tags:\n        - Kafka Connect\n      summary: get filtered kafka connectors\n      operationId: getAllConnectors\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: search\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FullConnectorInfo'\n\n  /api/clusters/{clusterName}/connects/{connectName}/connectors:\n    get:\n      tags:\n        - Kafka Connect\n      summary: get connectors for provided kafka connect instance\n      operationId: getConnectors\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n    post:\n      tags:\n        - Kafka Connect\n      summary: create new connector\n      operationId: createConnector\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectName\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewConnector'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Connector'\n        409:\n          description: rebalance is in progress\n\n  /api/clusters/{clusterName}/connects/{connectName}/connectors/{connectorName}:\n    get:\n      tags:\n        - Kafka Connect\n      summary: get information about the connector\n      operationId: getConnector\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectorName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Connector'\n    delete:\n      tags:\n        - Kafka Connect\n      summary: delete connector\n      operationId: deleteConnector\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectorName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n        409:\n          description: rebalance is in progress\n\n  /api/clusters/{clusterName}/connects/{connectName}/connectors/{connectorName}/action/{action}:\n    post:\n      tags:\n        - Kafka Connect\n      summary: update connector state (restart, pause or resume)\n      operationId: updateConnectorState\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectorName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: action\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/ConnectorAction'\n      responses:\n        200:\n          description: OK\n        409:\n          description: rebalance is in progress\n\n  /api/clusters/{clusterName}/connects/{connectName}/connectors/{connectorName}/config:\n    get:\n      tags:\n        - Kafka Connect\n      summary: get connector configuration\n      operationId: getConnectorConfig\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectorName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorConfig'\n    put:\n      tags:\n        - Kafka Connect\n      summary: update or create connector with provided config\n      operationId: setConnectorConfig\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectorName\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConnectorConfig'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Connector'\n        409:\n          description: rebalance is in progress\n\n  /api/clusters/{clusterName}/connects/{connectName}/connectors/{connectorName}/tasks:\n    get:\n      tags:\n        - Kafka Connect\n      summary: get connector tasks\n      operationId: getConnectorTasks\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectorName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Task'\n\n  /api/clusters/{clusterName}/connects/{connectName}/connectors/{connectorName}/tasks/{taskId}/action/restart:\n    post:\n      tags:\n        - Kafka Connect\n      summary: restart connector task\n      operationId: restartConnectorTask\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectorName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: taskId\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: OK\n\n  /api/clusters/{clusterName}/ksql:\n    description: Deprecated - use ksql/v2 instead!\n    post:\n      tags:\n        - Ksql\n      summary: executeKsqlCommand\n      operationId: executeKsqlCommand\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/KsqlCommand'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KsqlCommandResponse'\n\n  /api/clusters/{clusterName}/ksql/v2:\n    post:\n      tags:\n        - Ksql\n      summary: executeKsql\n      operationId: executeKsql\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/KsqlCommandV2'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KsqlCommandV2Response'\n\n  /api/clusters/{clusterName}/ksql/tables:\n    get:\n      tags:\n        - Ksql\n      summary: listTables\n      operationId: listTables\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/KsqlTableDescription'\n\n  /api/clusters/{clusterName}/ksql/streams:\n    get:\n      tags:\n        - Ksql\n      summary: listStreams\n      operationId: listStreams\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/KsqlStreamDescription'\n\n  /api/clusters/{clusterName}/ksql/response:\n    get:\n      tags:\n        - Ksql\n      summary: Open SSE pipe\n      operationId: openKsqlResponsePipe\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: pipeId\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            text/event-stream:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/KsqlResponse'\n\n  /api/clusters/{clusterName}/connects/{connectName}/plugins:\n    get:\n      tags:\n        - Kafka Connect\n      summary: get connector plugins\n      operationId: getConnectorPlugins\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectName\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConnectorPlugin'\n\n  /api/clusters/{clusterName}/connects/{connectName}/plugins/{pluginName}/config/validate:\n    put:\n      tags:\n        - Kafka Connect\n      summary: validate connector plugin configuration\n      operationId: validateConnectorPluginConfig\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: connectName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: pluginName\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConnectorConfig'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorPluginConfigValidationResponse'\n\n  /api/clusters/{clusterName}/topics/{topicName}/partitions:\n    patch:\n      tags:\n        - Topics\n      summary: increaseTopicPartitions\n      operationId: increaseTopicPartitions\n      parameters:\n        - name: clusterName\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: topicName\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PartitionsIncrease'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PartitionsIncreaseResponse'\n        404:\n          description: Not found\n\ncomponents:\n  schemas:\n    ErrorResponse:\n      description: Error object that will be returned with 4XX and 5XX HTTP statuses\n      type: object\n      properties:\n        code:\n          type: integer\n          description: Internal error code (can be used for message formatting \u0026 localization on UI)\n        message:\n          type: string\n          description: Error message\n        timestamp:\n          type: number\n          description: Response unix timestamp in ms\n        requestId:\n          type: string\n          description: Unique server-defined request id for convenient debugging\n        fieldsErrors:\n          type: array\n          items:\n            $ref: '#/components/schemas/FieldError'\n        stackTrace:\n          type: string\n\n    FieldError:\n      type: object\n      properties:\n        fieldName:\n          type: string\n          description: Name of field that violated format\n        restrictions:\n          description: Field format violations description (ex. [\"size must be between 0 and 20\", \"must be a well-formed email address\"])\n          type: array\n          items:\n            type: string\n\n    MetricsCollectionError:\n      type: object\n      properties:\n        message:\n          type: string\n        stackTrace:\n          type: string\n\n    Cluster:\n      type: object\n      properties:\n        name:\n          type: string\n        defaultCluster:\n          type: boolean\n        status:\n          $ref: '#/components/schemas/ServerStatus'\n        lastError:\n          $ref: '#/components/schemas/MetricsCollectionError'\n        brokerCount:\n          type: integer\n        onlinePartitionCount:\n          type: integer\n        topicCount:\n          type: integer\n        bytesInPerSec:\n          type: number\n        bytesOutPerSec:\n          type: number\n        readOnly:\n          type: boolean\n        version:\n          type: string\n        features:\n          type: array\n          items:\n            type: string\n            enum:\n              - SCHEMA_REGISTRY\n              - KAFKA_CONNECT\n              - KSQL_DB\n              - TOPIC_DELETION\n      required:\n        - id\n        - name\n        - status\n\n    ServerStatus:\n      type: string\n      enum:\n        - online\n        - offline\n        - initializing\n\n    ClusterMetrics:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Metric'\n\n    ClusterStats:\n      type: object\n      properties:\n        brokerCount:\n          type: integer\n        zooKeeperStatus:\n          type: integer\n          deprecated: true\n        activeControllers:\n          type: integer\n        onlinePartitionCount:\n          type: integer\n        offlinePartitionCount:\n          type: integer\n        inSyncReplicasCount:\n          type: integer\n        outOfSyncReplicasCount:\n          type: integer\n        underReplicatedPartitionCount:\n          type: integer\n        diskUsage:\n          type: array\n          items:\n            $ref: '#/components/schemas/BrokerDiskUsage'\n        version:\n          type: string\n\n    BrokerDiskUsage:\n      type: object\n      properties:\n        brokerId:\n          type: integer\n        segmentSize:\n          type: integer\n          format: int64\n        segmentCount:\n          type: integer\n      required:\n        - brokerId\n\n    BrokerMetrics:\n      type: object\n      properties:\n        segmentSize:\n          type: integer\n          format: int64\n        segmentCount:\n          type: integer\n        metrics:\n          type: array\n          items:\n            $ref: '#/components/schemas/Metric'\n\n    BrokerLogdirs:\n      type: object\n      properties:\n        name:\n          type: string\n        error:\n          type: string\n        topics:\n          type: array\n          items:\n            $ref: '#/components/schemas/TopicLogdirs'\n\n    BrokersLogdirs:\n      type: object\n      properties:\n        name:\n          type: string\n        error:\n          type: string\n        topics:\n          type: array\n          items:\n            $ref: '#/components/schemas/BrokerTopicLogdirs'\n\n    TopicsResponse:\n      type: object\n      properties:\n        pageCount:\n          type: integer\n        topics:\n          type: array\n          items:\n            $ref: '#/components/schemas/Topic'\n\n    TopicColumnsToSort:\n      type: string\n      enum:\n        - NAME\n        - OUT_OF_SYNC_REPLICAS\n        - TOTAL_PARTITIONS\n        - REPLICATION_FACTOR\n        - SIZE\n\n    SortOrder:\n      type: string\n      enum:\n        - ASC\n        - DESC\n\n    Topic:\n      type: object\n      properties:\n        name:\n          type: string\n        internal:\n          type: boolean\n        partitionCount:\n          type: integer\n        replicationFactor:\n          type: integer\n        replicas:\n          type: integer\n        inSyncReplicas:\n          type: integer\n        segmentSize:\n          type: integer\n          format: int64\n        segmentCount:\n          type: integer\n        underReplicatedPartitions:\n          type: integer\n        cleanUpPolicy:\n          $ref: '#/components/schemas/CleanUpPolicy'\n        partitions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Partition\"\n      required:\n        - name\n\n    TopicAnalysis:\n      type: object\n      description: \"Represents analysis state. Note: 'progress' and 'result' fields are set exclusively depending on analysis state.\"\n      properties:\n        progress:\n          $ref: '#/components/schemas/TopicAnalysisProgress'\n        result:\n          $ref: '#/components/schemas/TopicAnalysisResult'\n\n    TopicAnalysisProgress:\n      type: object\n      properties:\n        startedAt:\n          type: integer\n          format: int64\n        completenessPercent:\n          type: number\n        msgsScanned:\n          type: integer\n          format: int64\n        bytesScanned:\n          type: integer\n          format: int64\n\n    TopicAnalysisResult:\n      type: object\n      properties:\n        startedAt:\n          type: integer\n          format: int64\n        finishedAt:\n          type: integer\n          format: int64\n        error:\n          type: string\n        totalStats:\n          $ref: '#/components/schemas/TopicAnalysisStats'\n        partitionStats:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TopicAnalysisStats\"\n\n    TopicAnalysisStats:\n      type: object\n      properties:\n        partition:\n          type: integer\n          format: int32\n          description: \"null if this is total stats\"\n        totalMsgs:\n          type: integer\n          format: int64\n        minOffset:\n          type: integer\n          format: int64\n        maxOffset:\n          type: integer\n          format: int64\n        minTimestamp:\n          type: integer\n          format: int64\n        maxTimestamp:\n          type: integer\n          format: int64\n        nullKeys:\n          type: integer\n          format: int64\n        nullValues:\n          type: integer\n          format: int64\n        approxUniqKeys:\n          type: integer\n          format: int64\n        approxUniqValues:\n          type: integer\n          format: int64\n        keySize:\n          $ref: \"#/components/schemas/TopicAnalysisSizeStats\"\n        valueSize:\n          $ref: \"#/components/schemas/TopicAnalysisSizeStats\"\n        hourlyMsgCounts:\n          type: array\n          items:\n            type: object\n            properties:\n              hourStart:\n                type: integer\n                format: int64\n              count:\n                type: integer\n                format: int64\n\n    TopicAnalysisSizeStats:\n      type: object\n      description: \"All sizes in bytes\"\n      properties:\n        sum:\n          type: integer\n          format: int64\n        min:\n          type: integer\n          format: int64\n        max:\n          type: integer\n          format: int64\n        avg:\n          type: integer\n          format: int64\n        prctl50:\n          type: integer\n          format: int64\n        prctl75:\n          type: integer\n          format: int64\n        prctl95:\n          type: integer\n          format: int64\n        prctl99:\n          type: integer\n          format: int64\n        prctl999:\n          type: integer\n          format: int64\n\n    Replica:\n      type: object\n      properties:\n        broker:\n          type: integer\n        leader:\n          type: boolean\n        inSync:\n          type: boolean\n\n    TopicDetails:\n      type: object\n      properties:\n        name:\n          type: string\n        internal:\n          type: boolean\n        partitions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Partition\"\n        partitionCount:\n          type: integer\n        replicationFactor:\n          type: integer\n        replicas:\n          type: integer\n        inSyncReplicas:\n          type: integer\n        bytesInPerSec:\n          type: number\n        bytesOutPerSec:\n          type: number\n        segmentSize:\n          type: integer\n          format: int64\n        segmentCount:\n          type: integer\n        underReplicatedPartitions:\n          type: integer\n        cleanUpPolicy:\n          $ref: '#/components/schemas/CleanUpPolicy'\n      required:\n        - name\n\n    TopicConfig:\n      type: object\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        defaultValue:\n          type: string\n        source:\n          $ref: \"#/components/schemas/ConfigSource\"\n        isSensitive:\n          type: boolean\n        isReadOnly:\n          type: boolean\n        synonyms:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ConfigSynonym\"\n      required:\n        - name\n\n    TopicCreation:\n      type: object\n      properties:\n        name:\n          type: string\n        partitions:\n          type: integer\n        replicationFactor:\n          type: integer\n        configs:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - name\n        - partitions\n        - replicationFactor\n\n    TopicUpdate:\n      type: object\n      properties:\n        configs:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - configs\n\n    Broker:\n      type: object\n      properties:\n        id:\n          type: integer\n        host:\n          type: string\n        port:\n          type: integer\n      required:\n        - id\n\n    BrokerLogdirUpdate:\n      type: object\n      properties:\n        topic:\n          type: string\n        partition:\n          type: integer\n        logDir:\n          type: string\n\n    ConsumerGroupState:\n      type: string\n      enum:\n        - UNKNOWN\n        - PREPARING_REBALANCE\n        - COMPLETING_REBALANCE\n        - STABLE\n        - DEAD\n        - EMPTY\n\n    MessageFormat:\n      type: string\n      enum:\n        - AVRO\n        - JSON\n        - PROTOBUF\n        - UNKNOWN\n\n    ConsumerGroup:\n      type: object\n      properties:\n        groupId:\n          type: string\n        members:\n          type: integer\n        topics:\n          type: integer\n        simple:\n          type: boolean\n        partitionAssignor:\n          type: string\n        state:\n          $ref: \"#/components/schemas/ConsumerGroupState\"\n        coordinator:\n          $ref: \"#/components/schemas/Broker\"\n        messagesBehind:\n          type: integer\n          format: int64\n      required:\n        - groupId\n\n    ConsumerGroupOrdering:\n      type: string\n      enum:\n        - NAME\n        - MEMBERS\n        - STATE\n\n    ConsumerGroupsPageResponse:\n      type: object\n      properties:\n        pageCount:\n          type: integer\n        consumerGroups:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConsumerGroup'\n\n    CreateTopicMessage:\n      type: object\n      properties:\n        partition:\n          type: integer\n        key:\n          type: string\n          nullable: true\n        headers:\n          type: object\n          additionalProperties:\n            type: string\n        content:\n          type: string\n          nullable: true\n      required:\n        - partition\n\n    TopicMessageSchema:\n      type: object\n      properties:\n        key:\n          $ref: \"#/components/schemas/MessageSchema\"\n        value:\n          $ref: \"#/components/schemas/MessageSchema\"\n      required:\n        - key\n        - value\n\n    MessageSchema:\n      type: object\n      properties:\n        name:\n          type: string\n        source:\n          type: string\n          enum:\n            - SOURCE_SCHEMA_REGISTRY\n            - SOURCE_PROTO_FILE\n            - SOURCE_UNKNOWN\n        schema:\n          type: string\n      required:\n        - name\n        - source\n        - schema\n\n    TopicMessageEvent:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - PHASE\n            - MESSAGE\n            - CONSUMING\n            - DONE\n            - EMIT_THROTTLING\n        message:\n          $ref: \"#/components/schemas/TopicMessage\"\n        phase:\n          $ref: \"#/components/schemas/TopicMessagePhase\"\n        consuming:\n          $ref: \"#/components/schemas/TopicMessageConsuming\"\n\n    TopicMessagePhase:\n      type: object\n      properties:\n        name:\n          type: string\n\n    TopicMessageConsuming:\n      type: object\n      properties:\n        bytesConsumed:\n          type: integer\n          format: int64\n        elapsedMs:\n          type: integer\n          format: int64\n        isCancelled:\n          type: boolean\n        messagesConsumed:\n          type: integer\n\n\n    TopicMessage:\n      type: object\n      properties:\n        partition:\n          type: integer\n        offset:\n          type: integer\n          format: int64\n        timestamp:\n          type: string\n          format: date-time\n        timestampType:\n          type: string\n          enum:\n            - NO_TIMESTAMP_TYPE\n            - CREATE_TIME\n            - LOG_APPEND_TIME\n        key:\n          type: string\n        headers:\n          type: object\n          additionalProperties:\n            type: string\n        content:\n          type: string\n        keyFormat:\n          $ref: \"#/components/schemas/MessageFormat\"\n        valueFormat:\n          $ref: \"#/components/schemas/MessageFormat\"\n        keySize:\n          type: integer\n          format: int64\n        valueSize:\n          type: integer\n          format: int64\n        keySchemaId:\n          type: string\n        valueSchemaId:\n          type: string\n        headersSize:\n          type: integer\n          format: int64\n      required:\n        - partition\n        - offset\n        - timestamp\n\n    SeekType:\n      type: string\n      enum:\n        - BEGINNING\n        - OFFSET\n        - TIMESTAMP\n        - LATEST\n\n    MessageFilterType:\n      type: string\n      enum:\n        - STRING_CONTAINS\n        - GROOVY_SCRIPT\n\n    SeekDirection:\n      type: string\n      enum:\n        - FORWARD\n        - BACKWARD\n        - TAILING\n      default: FORWARD\n\n    Partition:\n      type: object\n      properties:\n        partition:\n          type: integer\n        leader:\n          type: integer\n        replicas:\n          type: array\n          items:\n            $ref: '#/components/schemas/Replica'\n        offsetMax:\n          type: integer\n          format: int64\n        offsetMin:\n          type: integer\n          format: int64\n      required:\n        - topic\n        - partition\n        - offsetMax\n        - offsetMin\n\n    ConsumerGroupTopicPartition:\n      type: object\n      properties:\n        topic:\n          type: string\n        partition:\n          type: integer\n        currentOffset:\n          type: integer\n          format: int64\n        endOffset:\n          type: integer\n          format: int64\n        messagesBehind:\n          type: integer\n          format: int64\n        consumerId:\n          type: string\n        host:\n          type: string\n      required:\n        - topic\n        - partition\n\n\n    ConsumerGroupDetails:\n      allOf:\n        - $ref: '#/components/schemas/ConsumerGroup'\n        - type: object\n          properties:\n            partitions:\n              type: array\n              items:\n                $ref: '#/components/schemas/ConsumerGroupTopicPartition'\n\n    Metric:\n      type: object\n      properties:\n        name:\n          type: string\n        canonicalName:\n          type: string\n        params:\n          type: string\n          additionalProperties:\n            type: string\n        value:\n          type: string\n          additionalProperties:\n            type: number\n\n    TopicLogdirs:\n      type: object\n      properties:\n        name:\n          type: string\n        partitions:\n          type: array\n          items:\n            $ref: '#/components/schemas/TopicPartitionLogdir'\n\n    BrokerTopicLogdirs:\n      type: object\n      properties:\n        name:\n          type: string\n        partitions:\n          type: array\n          items:\n            $ref: '#/components/schemas/BrokerTopicPartitionLogdir'\n\n    TopicPartitionLogdir:\n      type: object\n      properties:\n        partition:\n          type: integer\n        size:\n          type: integer\n          format: int64\n        offsetLag:\n          type: integer\n          format: int64\n\n    BrokerTopicPartitionLogdir:\n      allOf:\n        - $ref: '#/components/schemas/TopicPartitionLogdir'\n        - type: object\n          properties:\n            broker:\n              type: integer\n\n    SchemaSubject:\n      type: object\n      properties:\n        subject:\n          type: string\n        version:\n          type: string\n        id:\n          type: integer\n        schema:\n          type: string\n        compatibilityLevel:\n          type: string\n        schemaType:\n          $ref: '#/components/schemas/SchemaType'\n      required:\n        - id\n        - subject\n        - version\n        - schema\n        - compatibilityLevel\n        - schemaType\n\n    NewSchemaSubject:\n      type: object\n      properties:\n        subject:\n          type: string\n        schema:\n          type: string\n        schemaType:\n          $ref: '#/components/schemas/SchemaType'\n      required:\n        - subject\n        - schema\n        - schemaType\n\n    CompatibilityLevel:\n      type: object\n      properties:\n        compatibility:\n          type: string\n          enum:\n            - BACKWARD\n            - BACKWARD_TRANSITIVE\n            - FORWARD\n            - FORWARD_TRANSITIVE\n            - FULL\n            - FULL_TRANSITIVE\n            - NONE\n      required:\n        - compatibility\n\n    SchemaType:\n      type: string\n      enum:\n        - AVRO\n        - JSON\n        - PROTOBUF\n\n    CompatibilityCheckResponse:\n      type: object\n      properties:\n        isCompatible:\n          type: boolean\n      required:\n        - isCompatible\n\n    SchemaSubjectsResponse:\n      type: object\n      properties:\n        pageCount:\n          type: integer\n        schemas:\n          type: array\n          items:\n            $ref: '#/components/schemas/SchemaSubject'\n\n    Connect:\n      type: object\n      properties:\n        name:\n          type: string\n        address:\n          type: string\n      required:\n        - name\n\n    ConnectorConfig:\n      type: object\n      additionalProperties:\n        type: object\n\n    TaskId:\n      type: object\n      properties:\n        connector:\n          type: string\n        task:\n          type: integer\n\n    Task:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/TaskId'\n        status:\n          $ref: '#/components/schemas/TaskStatus'\n        config:\n          $ref: '#/components/schemas/ConnectorConfig'\n      required:\n        - status\n\n    NewConnector:\n      type: object\n      properties:\n        name:\n          type: string\n        config:\n          $ref: '#/components/schemas/ConnectorConfig'\n      required:\n        - name\n        - config\n\n    Connector:\n      allOf:\n        - $ref: '#/components/schemas/NewConnector'\n        - type: object\n          properties:\n            tasks:\n              type: array\n              items:\n                $ref: '#/components/schemas/TaskId'\n            type:\n              $ref: '#/components/schemas/ConnectorType'\n            status:\n              $ref: '#/components/schemas/ConnectorStatus'\n            connect:\n              type: string\n          required:\n            - type\n            - status\n            - connect\n\n    ConnectorType:\n      type: string\n      enum:\n        - SOURCE\n        - SINK\n\n    ConsumerGroupOffsetsReset:\n      type: object\n      properties:\n        topic:\n          type: string\n        resetType:\n          $ref: '#/components/schemas/ConsumerGroupOffsetsResetType'\n        partitions:\n          type: array\n          items:\n            type: integer\n          description: list of target partitions, all partitions will be used if it is not set or empty\n        resetToTimestamp:\n          type: integer\n          format: int64\n          description: should be set if resetType is TIMESTAMP\n        partitionsOffsets:\n          type: array\n          items:\n            $ref: '#/components/schemas/PartitionOffset'\n          description: List of partition offsets to reset to, should be set when resetType is OFFSET\n      required:\n        - topic\n        - resetType\n\n    PartitionOffset:\n      type: object\n      properties:\n        partition:\n          type: integer\n        offset:\n          type: integer\n          format: int64\n      required:\n        - partition\n\n    ConsumerGroupOffsetsResetType:\n      type: string\n      enum:\n        - EARLIEST\n        - LATEST\n        - TIMESTAMP\n        - OFFSET\n\n    TaskStatus:\n      type: object\n      properties:\n        id:\n          type: integer\n        state:\n          $ref: '#/components/schemas/ConnectorTaskStatus'\n        worker_id:\n          type: string\n        trace:\n          type: string\n      required:\n        - id\n        - state\n        - worker_id\n\n    ConnectorStatus:\n      type: object\n      properties:\n        state:\n          $ref: '#/components/schemas/ConnectorState'\n        worker_id:\n          type: string\n      required:\n        - state\n\n    ConnectorTaskStatus:\n      type: string\n      enum:\n        - RUNNING\n        - FAILED\n        - PAUSED\n        - RESTARTING\n        - UNASSIGNED\n\n    ConnectorState:\n      type: string\n      enum:\n        - RUNNING\n        - FAILED\n        - PAUSED\n        - UNASSIGNED\n        - TASK_FAILED\n\n    ConnectorAction:\n      type: string\n      enum:\n        - RESTART\n        - RESTART_ALL_TASKS\n        - RESTART_FAILED_TASKS\n        - PAUSE\n        - RESUME\n\n    TaskAction:\n      type: string\n      enum:\n        - restart\n\n    ConnectorPlugin:\n      type: object\n      properties:\n        class:\n          type: string\n\n    ConnectorPluginConfigDefinition:\n      type: object\n      properties:\n        name:\n          type: string\n        type:\n          type: string\n          enum:\n            - BOOLEAN\n            - CLASS\n            - DOUBLE\n            - INT\n            - LIST\n            - LONG\n            - PASSWORD\n            - SHORT\n            - STRING\n        required:\n          type: boolean\n        default_value:\n          type: string\n        importance:\n          type: string\n          enum:\n            - LOW\n            - MEDIUM\n            - HIGH\n        documentation:\n          type: string\n        group:\n          type: string\n        width:\n          type: string\n          enum:\n            - SHORT\n            - MEDIUM\n            - LONG\n            - NONE\n        display_name:\n          type: string\n        dependents:\n          type: array\n          items:\n            type: string\n        order:\n          type: integer\n\n    ConnectorPluginConfigValue:\n      type: object\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        recommended_values:\n          type: array\n          items:\n            type: string\n        errors:\n          type: array\n          items:\n            type: string\n        visible:\n          type: boolean\n\n    ConnectorPluginConfig:\n      type: object\n      properties:\n        definition:\n          $ref: '#/components/schemas/ConnectorPluginConfigDefinition'\n        value:\n          $ref: '#/components/schemas/ConnectorPluginConfigValue'\n\n    ConnectorPluginConfigValidationResponse:\n      type: object\n      properties:\n        name:\n          type: string\n        error_count:\n          type: integer\n        groups:\n          type: array\n          items:\n            type: string\n        configs:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConnectorPluginConfig'\n\n    KsqlCommand:\n      type: object\n      properties:\n        ksql:\n          type: string\n        streamsProperties:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - ksql\n\n    KsqlCommandV2:\n      type: object\n      properties:\n        ksql:\n          type: string\n        streamsProperties:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - ksql\n\n    KsqlCommandV2Response:\n      type: object\n      properties:\n        pipeId:\n          type: string\n      required:\n        - pipeId\n\n    KsqlTableDescription:\n      type: object\n      properties:\n        name:\n          type: string\n        topic:\n          type: string\n        keyFormat:\n          type: string\n        valueFormat:\n          type: string\n        isWindowed:\n          type: boolean\n\n    KsqlStreamDescription:\n      type: object\n      properties:\n        name:\n          type: string\n        topic:\n          type: string\n        keyFormat:\n          type: string\n        valueFormat:\n          type: string\n\n    KsqlCommandResponse:\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/Table'\n        message:\n          type: string\n\n    Table:\n      type: object\n      properties:\n        headers:\n          type: array\n          items:\n            type: string\n        rows:\n          type: array\n          items:\n            type: array\n            items:\n              type: string\n      required:\n        - headers\n        - rows\n\n    KsqlResponse:\n      type: object\n      properties:\n        table:\n          $ref: '#/components/schemas/KsqlTableResponse'\n\n    KsqlTableResponse:\n      type: object\n      properties:\n        header:\n          type: string\n        columnNames:\n          type: array\n          items:\n            type: string\n        values:\n          type: array\n          items:\n            type: array\n            items:\n              type: object\n\n    FullConnectorInfo:\n      type: object\n      properties:\n        connect:\n          type: string\n        name:\n          type: string\n        connector_class:\n          type: string\n        type:\n          $ref: '#/components/schemas/ConnectorType'\n        topics:\n          type: array\n          items:\n            type: string\n        status:\n          $ref: '#/components/schemas/ConnectorStatus'\n        tasks_count:\n          type: integer\n        failed_tasks_count:\n          type: integer\n      required:\n        - name\n        - connect\n        - status\n\n    PartitionsIncrease:\n      type: object\n      properties:\n        totalPartitionsCount:\n          type: integer\n          minimum: 1\n      required:\n        - totalPartitionsCount\n\n    PartitionsIncreaseResponse:\n      type: object\n      properties:\n        totalPartitionsCount:\n          type: integer\n        topicName:\n          type: string\n      required:\n        - totalPartitionsCount\n        - topicName\n\n    ReplicationFactorChange:\n      type: object\n      properties:\n        totalReplicationFactor:\n          type: integer\n          minimum: 1\n      required:\n        - totalReplicationFactor\n\n    ReplicationFactorChangeResponse:\n      type: object\n      properties:\n        totalReplicationFactor:\n          type: integer\n        topicName:\n          type: string\n      required:\n        - totalReplicationFactor\n        - topicName\n\n    BrokerConfigItem:\n      type: object\n      properties:\n        value:\n          type: string\n\n    BrokerConfig:\n      type: object\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        source:\n          $ref: '#/components/schemas/ConfigSource'\n        isSensitive:\n          type: boolean\n        isReadOnly:\n          type: boolean\n        synonyms:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigSynonym'\n      required:\n        - name\n        - value\n        - source\n        - isSensitive\n        - isReadOnly\n\n    ConfigSource:\n      type: string\n      enum:\n        - DYNAMIC_TOPIC_CONFIG\n        - DYNAMIC_BROKER_LOGGER_CONFIG\n        - DYNAMIC_BROKER_CONFIG\n        - DYNAMIC_DEFAULT_BROKER_CONFIG\n        - STATIC_BROKER_CONFIG\n        - DEFAULT_CONFIG\n        - UNKNOWN\n\n    ConfigSynonym:\n      type: object\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        source:\n          $ref: '#/components/schemas/ConfigSource'\n\n    CleanUpPolicy:\n      type: string\n      enum:\n        - DELETE\n        - COMPACT\n        - COMPACT_DELETE\n        - UNKNOWN\n",
			"canonicalURL": "/github.com/provectus/kafka-ui@46bcbb3436caf7357ff11eebbd1b49fe4f2cd167/-/blob/kafka-ui-contract/src/main/resources/swagger/kafka-ui-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/provectus/kafka-ui/blob/46bcbb3436caf7357ff11eebbd1b49fe4f2cd167/kafka-ui-contract/src/main/resources/swagger/kafka-ui-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/clusters/{clusterName}/topics/{topicName}/messages\": get: responses: 200: contents: unsupported content types: [text/event-stream]",
	"NotImplemented": [
		"unsupported content types"
	]
}