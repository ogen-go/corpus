{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/broadinstitute/agora"
		},
		"file": {
			"name": "agora.yaml",
			"size": 0,
			"path": "src/main/resources/swagger/agora.yaml",
			"byteSize": 76972,
			"content": "openapi: 3.0.1\ninfo:\n  title: Agora API\n  description: All of the Green\n  version: 1.0.0\nservers:\n  - url: /\nsecurity:\n  - authorization:\n      - openid\n      - email\n      - profile\npaths:\n  /status:\n    get:\n      tags:\n        - Status\n      summary: Returns status code for connection to database\n      responses:\n        200:\n          description: OK\n          content: {}\n        500:\n          description: Internal server error\n          content: {}\n  /api/v1/methods:\n    get:\n      tags:\n        - Methods\n      summary: List methods\n      description: |\n        The Methods endpoint returns all methods the requester\n        has permissions to read that fit the filter criteria.\n      parameters:\n        - name: namespace\n          in: query\n          description: Namespace of method.\n          schema:\n            type: string\n        - name: name\n          in: query\n          description: Name of method.\n          schema:\n            type: string\n        - name: snapshotId\n          in: query\n          description: Snapshot ID of method.\n          schema:\n            type: number\n        - name: snapshotComment\n          in: query\n          description: Snapshot comment of method.\n          schema:\n            type: string\n        - name: synopsis\n          in: query\n          description: Synopsis of method.\n          schema:\n            type: string\n        - name: documentation\n          in: query\n          description: Documentation of method.\n          schema:\n            type: string\n        - name: owner\n          in: query\n          description: Owner of method.\n          schema:\n            type: string\n        - name: payload\n          in: query\n          description: Payload of method in WDL.\n          schema:\n            type: string\n        - name: entityType\n          in: query\n          description: Type of Method - Task or Workflow\n          schema:\n            type: string\n        - name: excludedFields\n          in: query\n          description: Fields to exclude in JSON response.\n          schema:\n            type: string\n        - name: includedFields\n          in: query\n          description: Fields to include in JSON response\n          schema:\n            type: string\n      responses:\n        200:\n          description: An array of methods.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MethodResponse'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MethodResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - Methods\n      summary: Add a Method.\n      description: |\n        Inserts a method into the method repository and\n        gives the owner full access permissions. Must supply a namespace\n        name, payload, and entityType. Cannot supply a snapshotId\n      requestBody:\n        description: Agora Entity\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MethodQuery'\n        required: false\n      responses:\n        201:\n          description: Method successfully added.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MethodResponse'\n        400:\n          description: Malformed input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        500:\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: body\n  /api/v1/methods/definitions:\n    get:\n      tags:\n        - Methods\n      summary: List method definitions\n      description: |\n        List method definitions - i.e. unique namespace/name pairs - with counts\n        of snapshots and associated configurations\n      responses:\n        200:\n          description: An array of method definitions.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MethodDefinition'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MethodDefinition'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /api/v1/methods/{namespace}/{name}/configurations:\n    get:\n      tags:\n        - Methods\n        - Configurations\n      summary: List configurations associated with a method\n      description: |\n        Given the namespace/name of a method, returns all configurations\n        in the repository that reference that method\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace of method.\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name of method.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: An array of configurations.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConfigurationResponseWithPayloadObject'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConfigurationResponseWithPayloadObject'\n        404:\n          description: Method not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /api/v1/methods/{namespace}/{name}/{snapshotId}:\n    get:\n      tags:\n        - Methods\n      summary: Find a single method.\n      description: |\n        Returns one method that matches the namespace,\n        name, and snapshotId.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace of method.\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name of method.\n          required: true\n          schema:\n            type: string\n        - name: snapshotId\n          in: path\n          description: Snapshot ID of method.\n          required: true\n          schema:\n            type: number\n        - name: onlyPayload\n          in: query\n          description: Boolean to return only the payload of the method.\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: A single method.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MethodResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/MethodResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - Methods\n      summary: Create a new snapshot of an existing Method.\n      description: |\n        Inserts a new snapshot of the method into the method repository and\n        copies access permissions from previous snapshot, optionally redacting\n        the source snapshot. Documentation, synopsis, snapshot comment, and\n        payload are the only arguments considered for the new snapshot;\n        everything else is copied from the source.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace of source method.\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name of source method.\n          required: true\n          schema:\n            type: string\n        - name: snapshotId\n          in: path\n          description: Snapshot ID of source method.\n          required: true\n          schema:\n            type: number\n        - name: redact\n          in: query\n          description: Should the source method be redacted?\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        description: Agora Entity\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MethodQuery'\n        required: false\n      responses:\n        200:\n          description: Method successfully copied.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MethodResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/MethodResponse'\n        206:\n          description: Method successfully copied, but error while redacting.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MethodResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/MethodResponse'\n        400:\n          description: Malformed input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        403:\n          description: Forbidden to create copy.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n        404:\n          description: Source snapshot not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n        500:\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: body\n    delete:\n      tags:\n        - Methods\n      summary: Redact a single method.\n      description: |\n        Redacts a method and all of its associated configurations\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace of method.\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name of method.\n          required: true\n          schema:\n            type: string\n        - name: snapshotId\n          in: path\n          description: Snapshot ID of method.\n          required: true\n          schema:\n            type: number\n      responses:\n        200:\n          description: An integer showing how many methods were deleted. Should be\n            1.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Number'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Number'\n        default:\n          description: Error upon redaction\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /api/v1/methods/{namespace}/{name}/{snapshotId}/configurations:\n    get:\n      tags:\n        - Methods\n        - Configurations\n      summary: List compatible configurations for this method snapshot\n      description: |\n        Returns all configurations that 1. have the exact same input and output\n        arguments as the supplied method snapshot, and 2. reference any snapshot\n        of this method.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace of method.\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name of method.\n          required: true\n          schema:\n            type: string\n        - name: snapshotId\n          in: path\n          description: Snapshot ID of method.\n          required: true\n          schema:\n            type: number\n      responses:\n        200:\n          description: An array of configurations.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConfigurationResponseWithPayloadObject'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConfigurationResponseWithPayloadObject'\n        404:\n          description: Method not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/NotFound'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /api/v1/configurations:\n    get:\n      tags:\n        - Configurations\n      summary: List configurations\n      description: |\n        The configurations endpoint returns all configurations the requester\n        has permissions to read that fit the filter criteria.\n      parameters:\n        - name: namespace\n          in: query\n          description: Namespace of configuration.\n          schema:\n            type: string\n        - name: name\n          in: query\n          description: Name of configuration.\n          schema:\n            type: string\n        - name: snapshotId\n          in: query\n          description: Snapshot ID of configuration.\n          schema:\n            type: number\n        - name: snapshotComment\n          in: query\n          description: Snapshot comment of AgoraEntity\n          schema:\n            type: string\n        - name: synopsis\n          in: query\n          description: Synopsis of configuration.\n          schema:\n            type: string\n        - name: documentation\n          in: query\n          description: Documentation of configuration.\n          schema:\n            type: string\n        - name: owner\n          in: query\n          description: Owner of configuration.\n          schema:\n            type: string\n        - name: payload\n          in: query\n          description: Payload of config (i.e. a method) as JSON string.\n          schema:\n            type: string\n        - name: entityType\n          in: query\n          description: The only supported value is \"Configuration\"\n          schema:\n            type: string\n        - name: excludedFields\n          in: query\n          description: Fields to exclude in JSON response.\n          schema:\n            type: string\n        - name: includedFields\n          in: query\n          description: Fields to include in JSON response\n          schema:\n            type: string\n      responses:\n        200:\n          description: An array of configurations.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConfigurationResponse'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConfigurationResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - Configurations\n      summary: Add a Configuration.\n      description: |\n        Inserts a method into the method repository and\n        gives the owner full access permissions. Must supply a namespace\n        name, payload, and entityType. Cannot supply a snapshotId\n      requestBody:\n        description: Agora Entity\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConfigurationQuery'\n        required: false\n      responses:\n        201:\n          description: Configuration successfully added.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigurationResponse'\n        400:\n          description: Malformed input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        500:\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: body\n  /api/v1/configurations/{namespace}/{name}/{snapshotId}:\n    get:\n      tags:\n        - Configurations\n      summary: Find a single method configuration.\n      description: |\n        Returns one method that matches the namespace,\n        name, and snapshotId.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace of method.\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name of method.\n          required: true\n          schema:\n            type: string\n        - name: snapshotId\n          in: path\n          description: Snapshot ID of method.\n          required: true\n          schema:\n            type: number\n        - name: payloadAsObject\n          in: query\n          description: Instead of returning a string under key payload, return a JSON\n            object under key payloadObject\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: An array of configurations.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigurationResponse'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ConfigurationResponse'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n        - Configurations\n      summary: Redact a single configuration.\n      description: |\n        Redacts a configuration\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace of config.\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name of config.\n          required: true\n          schema:\n            type: string\n        - name: snapshotId\n          in: path\n          description: Snapshot ID of config.\n          required: true\n          schema:\n            type: number\n      responses:\n        200:\n          description: An integer showing how many configurations were deleted. Should\n            be 1.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Number'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Number'\n        default:\n          description: Error upon redaction\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /api/v1/methods/{namespace}/permissions:\n    get:\n      tags:\n        - NamespacePermissions\n      summary: List permissions on namespace.\n      description: |\n        List permissions on namespace.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: An array of permissions.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessControl'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - NamespacePermissions\n      summary: Edit a permissions on namespace.\n      description: |\n        Edit a permissions on namespace.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n        - name: user\n          in: query\n          description: User's email or 'public'.\n          required: true\n          schema:\n            type: string\n        - name: roles\n          in: query\n          description: List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage\n            or \"All\" or \"Nothing\". NO SPACES.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Access control modified.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - NamespacePermissions\n      summary: Add a permissions on namespace.\n      description: |\n        Add a permissions on namespace. Will edit if user already has some permission on namespace. Can accept a batch. Either url params or a body is required. If both are provdided, the body will override the url params.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n        - name: user\n          in: query\n          description: User's email or 'public'.\n          schema:\n            type: string\n        - name: roles\n          in: query\n          description: List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage\n            or \"All\" or \"Nothing\". NO SPACES.\n          schema:\n            type: string\n      requestBody:\n        description: |\n          List of access control objects (user, roles). Can edit or delete (with 'Nothing')\n          permissions using this path as well.\n        content:\n          'application/json':\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/AccessControl'\n        required: false\n      responses:\n        200:\n          description: Access control modified or list of access controls.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: list of permissions\n    delete:\n      tags:\n        - NamespacePermissions\n      summary: Delete a permission on namespace.\n      description: |\n        Delete a permission on namespace.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n        - name: user\n          in: query\n          description: User's email or 'public'.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Access control modified.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /api/v1/methods/permissions:\n    put:\n      tags:\n        - Permissions\n      summary: Upsert permissions for multiple methods.\n      description: |\n        Insert or update permissions for multiple methods.\n      requestBody:\n        description: array of entity -\u003e permissions pairs to upsert\n        content:\n          'application/json':\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/AccessControlPair'\n        required: true\n      responses:\n        200:\n          description: An array of entity -\u003e permissions pairs.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessControlPair'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessControlPair'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: methods\n    post:\n      tags:\n        - Permissions\n      summary: List permissions for multiple methods.\n      description: |\n        List permissions for multiple methods.\n      requestBody:\n        description: methods for which to retrieve permissions\n        content:\n          'application/json':\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/EntityId'\n        required: true\n      responses:\n        200:\n          description: An array of entity -\u003e permissions pairs.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessControlPair'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessControlPair'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: methods\n  /api/v1/methods/{namespace}/{name}/{snapshotId}/permissions:\n    get:\n      tags:\n        - Permissions\n      summary: List permissions on a specific method.\n      description: |\n        List permissions on a specific method.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name\n          required: true\n          schema:\n            type: string\n        - name: snapshotId\n          in: path\n          description: SnapshotId\n          required: true\n          schema:\n            type: number\n      responses:\n        200:\n          description: An array of permissions.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessControl'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - Permissions\n      summary: Edit a permissions on a specific method.\n      description: |\n        Edit a permissions on a specific method.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name\n          required: true\n          schema:\n            type: string\n        - name: snapshotId\n          in: path\n          description: SnapshotId\n          required: true\n          schema:\n            type: number\n        - name: user\n          in: query\n          description: User's email or 'public'.\n          required: true\n          schema:\n            type: string\n        - name: roles\n          in: query\n          description: List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage\n            or \"All\" or \"Nothing\". NO SPACES.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Access control modified.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - Permissions\n      summary: Add a permissions on a specific method.\n      description: |\n        Add a permissions on a specific method. Will edit if user already has some permission on a specific method.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name\n          required: true\n          schema:\n            type: string\n        - name: snapshotId\n          in: path\n          description: SnapshotId\n          required: true\n          schema:\n            type: number\n        - name: user\n          in: query\n          description: User's email or 'public'.\n          schema:\n            type: string\n        - name: roles\n          in: query\n          description: List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage\n            or \"All\" or \"Nothing\". NO SPACES.\n          schema:\n            type: string\n      requestBody:\n        description: |\n          List of access control objects (user, roles). Can edit or delete (with 'Nothing')\n          permissions using this path as well.\n        content:\n          'application/json':\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/AccessControl'\n        required: false\n      responses:\n        200:\n          description: Access control modified.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: list of permissions\n    delete:\n      tags:\n        - Permissions\n      summary: Delete a permission on a specific method.\n      description: |\n        Delete a permission on a specific method.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name\n          required: true\n          schema:\n            type: string\n        - name: snapshotId\n          in: path\n          description: SnapshotId\n          required: true\n          schema:\n            type: number\n        - name: user\n          in: query\n          description: User's email or 'public'.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Access control modified.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /api/v1/configurations/{namespace}/permissions:\n    get:\n      tags:\n        - NamespacePermissions\n      summary: List permissions on namespace.\n      description: |\n        List permissions on namespace.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: An array of permissions.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessControl'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - NamespacePermissions\n      summary: Edit a permissions on namespace.\n      description: |\n        Edit a permissions on namespace.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n        - name: user\n          in: query\n          description: User's email or 'public'.\n          required: true\n          schema:\n            type: string\n        - name: roles\n          in: query\n          description: List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage\n            or \"All\" or \"Nothing\". NO SPACES.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Access control modified.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - NamespacePermissions\n      summary: Add a permissions on namespace.\n      description: |\n        Add a permissions on namespace. Will edit if user already has some permission on namespace.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n        - name: user\n          in: query\n          description: User's email or 'public'.\n          schema:\n            type: string\n        - name: roles\n          in: query\n          description: List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage\n            or \"All\" or \"Nothing\". NO SPACES.\n          schema:\n            type: string\n      requestBody:\n        description: |\n          List of access control objects (user, roles). Can edit or delete (with 'Nothing')\n          permissions using this path as well.\n        content:\n          'application/json':\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/AccessControl'\n        required: false\n      responses:\n        200:\n          description: Access control modified.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: list of permissions\n    delete:\n      tags:\n        - NamespacePermissions\n      summary: Delete a permission on namespace.\n      description: |\n        Delete a permission on namespace.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n        - name: user\n          in: query\n          description: User's email or 'public'.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Access control modified.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /api/v1/configurations/{namespace}/{name}/{snapshotId}/permissions:\n    get:\n      tags:\n        - Permissions\n      summary: List permissions on a specific method.\n      description: |\n        List permissions on a specific method.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name\n          required: true\n          schema:\n            type: string\n        - name: snapshotId\n          in: path\n          description: SnapshotId\n          required: true\n          schema:\n            type: number\n      responses:\n        200:\n          description: An array of permissions.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessControl'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - Permissions\n      summary: Edit a permissions on a specific method.\n      description: |\n        Edit a permissions on a specific method.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name\n          required: true\n          schema:\n            type: string\n        - name: snapshotId\n          in: path\n          description: SnapshotId\n          required: true\n          schema:\n            type: number\n        - name: user\n          in: query\n          description: User's email or 'public'.\n          required: true\n          schema:\n            type: string\n        - name: roles\n          in: query\n          description: List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage\n            or \"All\" or \"Nothing\". NO SPACES.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Access control modified.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - Permissions\n      summary: Add a permissions on a specific method.\n      description: |\n        Add a permissions on a specific method. Will edit if user already has some permission on a specific method.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name\n          required: true\n          schema:\n            type: string\n        - name: snapshotId\n          in: path\n          description: SnapshotId\n          required: true\n          schema:\n            type: number\n        - name: user\n          in: query\n          description: User's email or 'public'.\n          schema:\n            type: string\n        - name: roles\n          in: query\n          description: List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage\n            or \"All\" or \"Nothing\". NO SPACES.\n          schema:\n            type: string\n      requestBody:\n        description: |\n          List of access control objects (user, roles). Can edit or delete (with 'Nothing')\n          permissions using this path as well.\n        content:\n          'application/json':\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/AccessControl'\n        required: false\n      responses:\n        200:\n          description: Access control modified.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: list of permissions\n    delete:\n      tags:\n        - Permissions\n      summary: Delete a permission on a specific method.\n      description: |\n        Delete a permission on a specific method.\n      parameters:\n        - name: namespace\n          in: path\n          description: Namespace\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          description: Name\n          required: true\n          schema:\n            type: string\n        - name: snapshotId\n          in: path\n          description: SnapshotId\n          required: true\n          schema:\n            type: number\n        - name: user\n          in: query\n          description: User's email or 'public'.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Access control modified.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/AccessControl'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /api/v1/configurations/permissions:\n    post:\n      tags:\n        - Permissions\n      summary: List permissions for multiple configurations.\n      description: |\n        List permissions for multiple configurations.\n      requestBody:\n        description: configurations for which to retrieve permissions\n        content:\n          'application/json':\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/EntityId'\n        required: true\n      responses:\n        200:\n          description: An array of entity -\u003e permissions pairs.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessControlPair'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessControlPair'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n      x-codegen-request-body-name: configurations\n  /ga4gh/v1/tools/{id}:\n    get:\n      tags:\n        - GA4GH\n      summary: List one specific tool, acts as an anchor for self references\n      description: This endpoint returns one specific tool (which has ToolVersions\n        nested inside it)\n      parameters:\n        - name: id\n          in: path\n          description: A unique identifier of the tool, scoped to this registry, for\n            example `123456`\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: A tool.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tool'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Tool'\n  /ga4gh/v1/tools/{id}/versions:\n    get:\n      tags:\n        - GA4GH\n      summary: List versions of a tool\n      description: Returns all versions of the specified tool\n      parameters:\n        - name: id\n          in: path\n          description: A unique identifier of the tool, scoped to this registry, for\n            example `123456`\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: An array of tool versions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolVersion'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolVersion'\n  /ga4gh/v1/tools/{id}/versions/{version-id}:\n    get:\n      tags:\n        - GA4GH\n      summary: List one specific tool version, acts as an anchor for self references\n      description: This endpoint returns one specific tool version\n      parameters:\n        - name: id\n          in: path\n          description: A unique identifier of the tool, scoped to this registry, for\n            example `123456`\n          required: true\n          schema:\n            type: string\n        - name: version-id\n          in: path\n          description: An identifier of the tool version, scoped to this registry, for\n            example `v1`\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: A tool version.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ToolVersion'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ToolVersion'\n  /ga4gh/v1/tools:\n    get:\n      tags:\n        - GA4GH\n      summary: List all tools\n      description: |\n        This endpoint returns all tools available.\n      responses:\n        200:\n          description: An array of Tools that match the filter.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tool'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tool'\n  /ga4gh/v1/tools/{id}/versions/{version-id}/{type}/descriptor:\n    get:\n      tags:\n        - GA4GH\n      summary: Get the tool descriptor (WDL) for the specified tool.\n      description: Returns the WDL descriptor for the specified tool.\n      parameters:\n        - name: type\n          in: path\n          description: |\n            The output type of the descriptor. If not specified it is up to the underlying implementation to determine which output type to return. Plain types return the bare descriptor while the \"non-plain\" types return a descriptor wrapped with metadata. Choose \"Response Content Type: application/json\" for WDL and \"Response Content Type: text/plain\" for plain-WDL\n          required: true\n          schema:\n            type: string\n            enum:\n              - WDL\n              - plain-WDL\n        - name: id\n          in: path\n          description: |\n            A unique identifier of the tool, scoped to this registry, for example `123456`.\n\n              *In Agora, this must be a namespace + \":\" + name. For instance, if your namespace\n              is 'foo' and name is 'bar', this must be 'foo:bar'.*\n          required: true\n          schema:\n            type: string\n        - name: version-id\n          in: path\n          description: |\n            An identifier of the tool version for this particular tool registry, for example `v1`.\n\n              *In Agora, this must be an integer representing the Agora snapshot id.*\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The tool descriptor.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ToolDescriptor'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ToolDescriptor'\n        404:\n          description: The tool can not be output in the specified type.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /ga4gh/v1/metadata:\n    get:\n      tags:\n        - GA4GH\n      summary: Return some metadata that is useful for describing this registry\n      description: Return some metadata that is useful for describing this registry\n      responses:\n        200:\n          description: A Metadata object describing this service.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n  /ga4gh/v1/tool-classes:\n    get:\n      tags:\n        - GA4GH\n      summary: List all tool types\n      description: |\n        This endpoint returns all tool-classes available\n      responses:\n        200:\n          description: An array of methods that match the filter.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolClass'\n            text/plain:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ToolClass'\ncomponents:\n  schemas:\n    EntityId:\n      type: object\n      properties:\n        namespace:\n          type: string\n          description: Namespace which contains AgoraEntity.\n        name:\n          type: string\n          description: Name of the AgoraEntity.\n        snapshotId:\n          type: integer\n          description: SnapshotId of AgoraEntity.\n    EntityShort:\n      type: object\n      properties:\n        namespace:\n          type: string\n          description: Namespace which contains AgoraEntity.\n        name:\n          type: string\n          description: Name of the AgoraEntity.\n        snapshotId:\n          type: integer\n          description: SnapshotId of AgoraEntity.\n        managers:\n          type: array\n          description: List of users with the Manage permission\n          items:\n            type: string\n        public:\n          type: boolean\n          description: If this AgoraEntity is publicly readable.\n    MethodQuery:\n      type: object\n      properties:\n        namespace:\n          type: string\n          description: Namespace which contains AgoraEntity.\n          default: YOUR_NAMESPACE\n        name:\n          type: string\n          description: Name of the AgoraEntity.\n          default: BWA\n        synopsis:\n          type: string\n          description: Synopsis which contains AgoraEntity.\n          default: Quickly aligns short nucleotide sequences.\n        snapshotComment:\n          type: string\n          description: Snapshot comment of AgoraEntity\n          default: Improved spline reticulation\n        documentation:\n          type: string\n          description: Documentation of the AgoraEntity.\n          default: |\n            BWA is a software package for mapping low-divergent sequences\n            against a large reference genome, such as the human genome.\n            It consists of three algorithms: BWA-backtrack, BWA-SW and BWA-MEM.\n        payload:\n          type: string\n          description: Payload of method -- must be in WDL format\n          default: |\n            task wc {File in_file command { cat ${in_file} | wc -l } output { Int count = read_int(stdout()) }}\n        entityType:\n          type: string\n          description: Type of the AgoraEntity -- Task or Workflow.\n          default: Task\n    ConfigurationQuery:\n      type: object\n      properties:\n        namespace:\n          type: string\n          description: Namespace which contains Configuration.\n          default: YOUR_NAMESPACE\n        name:\n          type: string\n          description: Name of the Configuration.\n          default: quick-BWA-config\n        synopsis:\n          type: string\n          description: Synopsis which contains Configuration.\n          default: Quick synopsis of configuration.\n        snapshotComment:\n          type: string\n          description: Snapshot comment of AgoraEntity\n          default: Improved spline reticulation\n        documentation:\n          type: string\n          description: Documentation of the Configuration.\n          default: |\n            Example configuraion with an associated method.\n        payload:\n          type: string\n          description: Payload of method -- must be in WDL format\n          default: |\n            { \"methodRepoMethod\": { \"methodNamespace\": \"YOUR_NAMESPACE\", \"methodName\": \"BWA\", \"methodVersion\": 1}}\n        entityType:\n          type: string\n          description: Can only be Configuration.\n          default: Configuration\n    ConfigurationResponse:\n      type: object\n      properties:\n        managers:\n          type: array\n          description: List of users with the Manage permission\n          items:\n            type: string\n        method:\n          type: object\n          properties: {}\n        namespace:\n          type: string\n          description: Namespace which contains AgoraEntity.\n          default: YOUR_NAMESPACE\n        name:\n          type: string\n          description: Name of the AgoraEntity.\n          default: BWA\n        snapshotId:\n          type: integer\n          description: SnapshotId of AgoraEntity\n        snapshotComment:\n          type: string\n          description: Snapshot comment of AgoraEntity\n          default: Improved spline reticulation\n        synopsis:\n          type: string\n          description: Synopsis which contains AgoraEntity.\n          default: Quickly aligns short nucleotide sequences.\n        documentation:\n          type: string\n          description: Documentation of the AgoraEntity. MUST BE REQUESTED EXPLICITLY.\n          default: |\n            BWA is a software package for mapping low-divergent sequences\n            against a large reference genome, such as the human genome.\n            It consists of three algorithms: BWA-backtrack, BWA-SW and BWA-MEM.\n        createDate:\n          type: string\n          description: Timestamp of creation\n        url:\n          type: string\n          description: URL where resource can be accessed.\n        payload:\n          type: string\n          description: Payload of configuration. MUST BE REQUESTED EXPLICITLY.\n          default: |\n            { \"methodRepoMethod\": { \"methodNamespace\": \"YOUR_NAMESPACE\", \"methodName\": \"BWA\", \"methodVersion\": 1}}\n        entityType:\n          type: string\n          description: Type of the AgoraEntity -- Task or Workflow.\n          default: Task\n        public:\n          type: boolean\n          description: Is this configuration publicly readable?\n    ConfigurationResponseWithPayloadObject:\n      type: object\n      properties:\n        namespace:\n          type: string\n          description: Namespace which contains AgoraEntity.\n          default: YOUR_NAMESPACE\n        name:\n          type: string\n          description: Name of the AgoraEntity.\n          default: BWA\n        snapshotId:\n          type: integer\n          description: SnapshotId of AgoraEntity\n        synopsis:\n          type: string\n          description: Synopsis which contains AgoraEntity.\n          default: Quickly aligns short nucleotide sequences.\n        snapshotComment:\n          type: string\n          description: Snapshot comment of AgoraEntity\n          default: Improved spline reticulation\n        documentation:\n          type: string\n          description: Documentation of the AgoraEntity. MUST BE REQUESTED EXPLICITLY.\n          default: |\n            BWA is a software package for mapping low-divergent sequences\n            against a large reference genome, such as the human genome.\n            It consists of three algorithms: BWA-backtrack, BWA-SW and BWA-MEM.\n        createDate:\n          type: string\n          description: Timestamp of creation\n        url:\n          type: string\n          description: URL where resource can be accessed.\n        payloadObject:\n          $ref: '#/components/schemas/ConfigurationPayload'\n        entityType:\n          type: string\n          description: Type of the AgoraEntity -- Task or Workflow.\n          default: Task\n    MethodDefinition:\n      type: object\n      properties:\n        namespace:\n          type: string\n          description: Namespace which contains the method.\n        name:\n          type: string\n          description: Name of the method.\n        synopsis:\n          type: string\n          description: Synopsis of the method\n        managers:\n          type: array\n          description: List of users with the Manage permission\n          items:\n            type: string\n        public:\n          type: boolean\n          description: true if the method is publicly readable\n        numConfigurations:\n          type: number\n          description: count of configurations associated with this method\n        numSnapshots:\n          type: number\n          description: count of snapshots of this method\n        entityType:\n          type: string\n          description: always \"Workflow\".\n          default: Workflow\n    MethodResponse:\n      type: object\n      properties:\n        managers:\n          type: array\n          description: List of users with the Manage permission\n          items:\n            type: string\n        namespace:\n          type: string\n          description: Namespace which contains AgoraEntity.\n          default: YOUR_NAMESPACE\n        name:\n          type: string\n          description: Name of the AgoraEntity.\n          default: BWA\n        snapshotId:\n          type: integer\n          description: SnapshotId of AgoraEntity\n        snapshotComment:\n          type: string\n          description: Snapshot comment of AgoraEntity\n          default: Improved spline reticulation\n        synopsis:\n          type: string\n          description: Synopsis which contains AgoraEntity.\n          default: Quickly aligns short nucleotide sequences.\n        documentation:\n          type: string\n          description: Documentation of the AgoraEntity. MUST BE REQUESTED EXPLICITLY.\n          default: |\n            BWA is a software package for mapping low-divergent sequences\n            against a large reference genome, such as the human genome.\n            It consists of three algorithms: BWA-backtrack, BWA-SW and BWA-MEM.\n        createDate:\n          type: string\n          description: Timestamp of creation\n        url:\n          type: string\n          description: URL where resource can be accessed.\n        payload:\n          type: string\n          description: Payload of method -- must be in WDL format. MUST BE REQUESTED\n            EXPLICITLY.\n          default: |\n            task wc {File in_file command { cat ${in_file} | wc -l } output { Int count = read_int(stdout()) }}\n        entityType:\n          type: string\n          description: Type of the AgoraEntity -- Task or Workflow.\n          default: Task\n        public:\n          type: boolean\n          description: Is this method publicly readable?\n    AccessControl:\n      type: object\n      properties:\n        user:\n          type: string\n          description: A user's email or 'public' to give access to all users.\n          default: test-user@broadinstitute.org\n        roles:\n          type: array\n          description: The roles a user has on an entity.\n          items:\n            type: string\n    AccessControlPair:\n      type: object\n      properties:\n        entity:\n          $ref: '#/components/schemas/EntityShort'\n        acls:\n          type: array\n          items:\n            $ref: '#/components/schemas/AccessControl'\n    ConfigurationPayload:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of this config\n          default: cancer_exome_pipeline_v2\n        namespace:\n          type: string\n          description: Namespace of this config\n          default: broad-dsde-dev\n        methodRepoMethod:\n          type: object\n          properties:\n            methodName:\n              type: string\n              description: Name of referenced method\n              default: cancer_exome_pipeline_v2\n            methodNamespace:\n              type: string\n              description: Namespace of referenced method\n              default: broad-dsde-dev,\n            methodVersion:\n              type: integer\n              description: Snapshot ID of referenced method\n        outputs:\n          type: object\n          properties: {}\n          description: Map[String, AttributeString] from method's WDL outputs to fields\n            in the workspace data model\n        inputs:\n          type: object\n          properties: {}\n          description: Map[String, AttributeString] from method's WDL inputs to fields\n            in the workspace data model\n        rootEntityType:\n          type: string\n          default: pair\n        prerequisites:\n          type: object\n          properties: {}\n          description: Map[String, AttributeString]\n        methodConfigVersion:\n          type: integer\n          description: Snapshot ID of this config\n        deleted:\n          type: boolean\n          description: Has this config been deleted?\n          default: false\n    BadRequest:\n      type: object\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n          default: Bad Request\n    Error:\n      type: object\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n          default: Internal Server Error\n    NotFound:\n      type: object\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n          default: Not Found\n    ToolClass:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The unique identifier for the class\n        name:\n          type: string\n          description: A short friendly name for the class\n        description:\n          type: string\n          description: A longer explanation of what this class is and what it can\n            accomplish\n      description: Describes a class (type) of tool allowing us to categorize workflows,\n        tools, and maybe even other entities (such as services) separately\n    Tool:\n      required:\n        - author\n        - id\n        - meta-version\n        - organization\n        - toolclass\n        - url\n        - versions\n      type: object\n      properties:\n        url:\n          type: string\n          description: The URL for this tool in this registry, for example `http://agora.broadinstitute.org/tools/123456`\n        id:\n          type: string\n          description: A unique identifier of the tool, scoped to this registry, for\n            example `123456` or `123456_v1`\n        organization:\n          type: string\n          description: The organization that published the image.\n        toolname:\n          type: string\n          description: The name of the tool.\n        toolclass:\n          $ref: '#/components/schemas/ToolClass'\n        description:\n          type: string\n          description: The description of the tool.\n        author:\n          type: string\n          description: Contact information for the author of this tool entry in the\n            registry. (More complex authorship information is handled by the descriptor)\n        meta-version:\n          type: string\n          description: The version of this tool in the registry. Iterates when fields\n            like the description, author, etc. are updated.\n        contains:\n          type: array\n          description: An array of IDs for the applications that are stored inside\n            this tool (for example `https://bio.tools/tool/mytum.de/SNAP2/1`). This\n            always returns an empty array.\n          items:\n            type: string\n        verified:\n          type: boolean\n          description: Reports whether this tool has been verified by a specific organization\n            or individual.  This always returns false.\n        verified-source:\n          type: string\n          description: Source of metadata that can support a verified tool, such as\n            an email or URL\n        signed:\n          type: boolean\n          description: Reports whether this tool has been signed.  This always returns\n            false.\n        versions:\n          type: array\n          description: A list of versions for this tool\n          items:\n            $ref: '#/components/schemas/ToolVersion'\n      description: A tool (or described tool) describes one pairing of a tool as described\n        in a descriptor file (which potentially describes multiple tools) and a Docker\n        image.\n    ToolVersion:\n      required:\n        - id\n        - meta-version\n        - url\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the version.\n        url:\n          type: string\n          description: The URL for this tool in this registry, for example `http://agora.broadinstitute.org/tools/123456/1`\n        id:\n          type: string\n          description: An identifier of the version of this tool for this particular\n            tool registry, for example `v1`\n        image:\n          type: string\n          description: The docker path to the image (and version) for this tool. (e.g.\n            quay.io/seqware/seqware_full/1.1). This always returns an empty string.\n        descriptor-type:\n          type: array\n          description: The type (or types) of descriptors available.\n          items:\n            type: string\n            enum:\n              - WDL\n        dockerfile:\n          type: boolean\n          description: Reports if this tool has a dockerfile available. This always\n            returns false.\n        meta-version:\n          type: string\n          description: The version of this tool version in the registry. Iterates\n            when fields like the description, author, etc. are updated.\n      description: A tool version describes a particular iteration of a tool as described\n        by a reference to a specific image and dockerfile.\n    ToolDescriptor:\n      required:\n        - descriptor\n        - type\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - WDL\n        descriptor:\n          type: string\n          description: The descriptor that represents this version of the tool. (WDL)\n        url:\n          type: string\n          description: Optional url to the tool descriptor used to build this image,\n            should include version information, and can include a git hash (e.g. https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/ea2a5db69bd20a42976838790bc29294df3af02b/delly_docker/Delly.cwl\n            )\n      description: A tool descriptor is a metadata document that describes one or\n        more tools.\n    Metadata:\n      required:\n        - api-version\n        - version\n      type: object\n      properties:\n        version:\n          type: string\n          description: The version of this registry\n        api-version:\n          type: string\n          description: The version of the GA4GH tool-registry API supported by this\n            registry\n        country:\n          type: string\n          description: A country code for the registry (ISO 3166-1 alpha-3)\n        friendly-name:\n          type: string\n          description: A friendly name that can be used in addition to the hostname\n            to describe a registry\n      description: Describes this registry to better allow for mirroring and indexing.\n    Number:\n      type: number\n      example: 1\n  securitySchemes:\n    authorization:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            openid: open id authorization\n            email: email authorization\n            profile: profile authorization\n",
			"canonicalURL": "/github.com/broadinstitute/agora@c4e376f5bf70638b17089b33b41672ada7bec41d/-/blob/src/main/resources/swagger/agora.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/broadinstitute/agora/blob/c4e376f5bf70638b17089b33b41672ada7bec41d/src/main/resources/swagger/agora.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/ga4gh/v1/tools/{id}/versions\": get: security: security \"authorization\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}