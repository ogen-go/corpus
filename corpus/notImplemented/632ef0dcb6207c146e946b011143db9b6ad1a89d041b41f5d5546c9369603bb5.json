{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/zhuowei/ClubhouseAPI"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "doc/openapi.yaml",
			"byteSize": 41589,
			"content": "openapi: 3.0.0\ninfo:\n  description: \"Clubhouse API\"\n  title: \"Clubhouse API\"\n  version: \"1\"\nservers:\n  - url: \"https://www.clubhouseapi.com/api/\"\n# User-Agent: clubhouse/269 (iPhone; iOS 14.1; Scale/3.00)\n# Content-Type: application/json; charset=utf-8\n# CH-Languages: en-US\n# CH-Locale: en_US\n# CH-AppVersion: 0.1.25\n# CH-AppBuild: 269\n# CH-DeviceId: \u003cuuid\u003e\n# Needed for authenticated APIs:\n# CH-UserID: 1234\n# Authorization: Token \u003cauth_token\u003e\n# (or Authorization: Bearer \u003caccess_token\u003e if you want to use the JWT auth)\n# Clubhouse aggressively bans new user signups based partially on headers: see\n# https://github.com/zhuowei/ClubhouseAPI/issues/2\n# curl -H \"User-Agent: Clubhouse/269\" -H \"Content-Type: application/json\" -D - -H \"CH-Locale: en_US\" -H \"CH-AppVersion: 0.2.15\" -H \"CH-AppBuild: 269\"\n# The paginated GET apis are also accessible via POST\npaths:\n  /start_phone_number_auth:\n    post:\n      summary: Starts phone number auth.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                value: {\"phone_number\": \"+11234567890\"}\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              examples:\n                success:\n                  value: {\"success\":true,\"is_blocked\":false,\"error_message\":null}\n                failure:\n                  value: {\"success\":false,\"is_blocked\":false,\"error_message\":\"\"}\n                phoneBlocked:\n                  # Could be caused if app version header not present\n                  # or if account banned\n                  # I've had an account auto-banned after the first login ever\n                  # I'm not sure why\n                  # This happened to an actual Clubhouse user from the app as well:\n                  # https://www.reddit.com/r/ClubhouseApp/comments/lc2d89/got_invited_but_cannot_sign_in/\n                  value: {\"success\":true,\"is_blocked\":true}\n                beingThrottled:\n                  # You'll get `number_of_attempts_remaining` before you being throttled\n                  value: {\"success\":true,\"is_blocked\":false,\"number_of_attempts_remaining\":3}\n                throttled:\n                  value: {\"success\": false, \"error_message\": \"Our systems have detected high usage of this feature from your account. Please try again later.\"}\n  /call_phone_number_auth:\n    post:\n      summary: Call phone number auth.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                value: {}\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              examples:\n                jsonObject: {}\n  /resend_phone_number_auth:\n    post:\n      summary: Resend phone number auth.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                value: {}\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              examples:\n                jsonObject: {}\n  /complete_phone_number_auth:\n    post:\n      summary: Call phone number auth.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                value: {\"verification_code\": \"1234\", \"phone_number\": \"+1234567890\"}\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              examples:\n                success:\n                  value: {\"success\":true,\"is_verified\":true,\"user_profile\":{\"user_id\":1234,\"name\":null,\"photo_url\":null,\"username\":null},\"auth_token\":\"\u003cauth_token\u003e\",\"refresh_token\":\"\u003cjwt\u003e\",\"access_token\":\"\u003cjwt\u003e\",\"is_waitlisted\":true,\"is_onboarding\":true}\n  /check_waitlist_status:\n    post:\n      summary: checks waitlist status.\n      responses:\n        200:\n          description: got waitlist status\n          content:\n            application/json:\n              examples:\n                waitlisted:\n                  value: {\"is_waitlisted\":true,\"is_onboarding\":true,\"success\":true}\n        401:\n          description: authorization not provided\n          content:\n            application/json:\n              examples:\n                error:\n                  value: {\"detail\":\"Authentication credentials were not provided.\"}\n  /me:\n    post:\n      summary: gets user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              clubhouseApp:\n                value: {\"return_blocked_ids\":true,\"timezone_identifier\":\"America/Los_Angeles\",\"return_following_ids\":true}\n              emptyAlsoWorks:\n                value: {}\n      responses:\n        200:\n          description: the response\n          content:\n            application/json:\n              examples:\n                examples:\n                  value: {\"has_unread_notifications\":false,\"actionable_notifications_count\":0,\"num_invites\":0,\"auth_token\":\"\u003cauth_token\u003e\",\"refresh_token\":\"\u003cjwt\u003e\",\"access_token\":\"\u003cjwt\u003e\",\"notifications_enabled\":false,\"user_profile\":{\"user_id\":1234,\"name\":null,\"photo_url\":null,\"username\":null},\"following_ids\":null,\"blocked_ids\":null,\"is_admin\":false,\"email\":null,\"feature_flags\":[\"\"],\"success\":true}\n        403:\n          description: error response - happens if account is banned (is_blocked)\n          content:\n            application/json:\n              examples:\n                examples:\n                  value: {\"detail\": \"You do not have permission to perform this action.\"}\n  /get_release_notes:\n    post:\n      summary: gets release notes.\n      responses:\n        200:\n          description: the response\n          content:\n            application/json:\n              examples:\n                latest:\n                  value: {\"should_display\":true,\"title\":\"üïπ You are now using the latest update of Clubhouse!\",\"action\":\"See What's New\",\"url\":\"https://whatsnew.joinclubhouse.com\"}\n  /get_all_topics:\n    get:\n      summary: gets all topics.\n      responses:\n        200:\n          description: a list of topics\n          content:\n            application/json:\n              examples:\n                latest:\n                  value: {\n                    \"topics\": [{\n                        \"title\": \"Example\",\n                        \"id\": 1,\n                        \"abbreviated_title\": \"Example\",\n                        \"topics\": [{\n                            \"title\": \"‚è≥ The Future\",\n                            \"id\": 140,\n                            \"abbreviated_title\": \"The Future\"\n                        }]\n                    }]\n                  }\n  /get_topic:\n    post:\n      summary: looks up topic by ID.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                value: {\"topic_id\": 140}\n            # this also can take a club_id but I can't get it to work\n      responses:\n        200:\n          description: returns topic info\n          content:\n            application/json:\n              examples:\n                topic:\n                  value: {\"topic\":{\"title\":\"‚è≥ The Future\",\"id\":140,\"abbreviated_title\":\"The Future\"},\"success\":true}\n  /get_clubs_for_topic:\n    post:\n      summary: looks up clubs by topic.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                value: {\"topic_id\": 140}\n      responses:\n        200:\n          description: returns list of clubs with pagination\n          content:\n            application/json:\n              examples:\n                clubs:\n                  value: {\"clubs\":[{\"club_id\":123,\"name\":\"Example Club\",\"description\":\"Example\",\"photo_url\":\"https://clubhouseprod.s3.amazonaws.com:443/club_\u003cclub_id\u003e_\u003cguid\u003e_thumbnail_250x250\",\"num_members\":123,\"num_followers\":456,\"is_member\":false,\"is_follower\":false}],\"count\":1,\"next\":null,\"previous\":null,\"success\":true}\n  /get_profile:\n    post:\n      summary: looks up user profile by ID.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                value: {\"user_id\": 4075733}\n      responses:\n        200:\n          description: returns user profile info\n          content:\n            application/json:\n              examples:\n                user_profile:\n                  # invited_by_user_profile can be null if the queried user is not norminated by someone\n                  value: {\n                    \"user_profile\": {\n                      \"user_id\": 4075733,\n                      \"name\": \"Junho Yeo\",\n                      \"displayname\": null,\n                      \"photo_url\": \"https://clubhouseprod.s3.amazonaws.com:443/\u003cuser_id\u003e_\u003cguid\u003e\",\n                      \"username\": \"junhoyeo\",\n                      \"bio\": \"üå∏ Creating INEVITABLE‚Ñ¢ Services\",\n                      \"twitter\": null,\n                      \"instagram\": \"_junhoyeo\",\n                      \"num_followers\": 103,\n                      \"num_following\": 98,\n                      \"time_created\": \"2021-01-28T12:30:25.625451+00:00\",\n                      \"follows_me\": false,\n                      \"is_blocked_by_network\": false,\n                      \"mutual_follows_count\": 0,\n                      \"mutual_follows\": [],\n                      \"notification_type\": null,\n                      \"invited_by_user_profile\": {\n                        \"user_id\": 1234,\n                        \"name\": \"Example Norminator\",\n                        \"photo_url\": \"https://clubhouseprod.s3.amazonaws.com:443/\u003cuser_id\u003e_\u003cguid\u003e_thumbnail_250x250\",\n                        \"username\": \"myexamplenorminator\"\n                      },\n                      \"clubs\": [\n                        {\n                          \"club_id\": 12345,\n                          \"name\": \"Club name\",\n                          \"description\": \"Club description\",\n                          \"photo_url\": \"https://clubhouseprod.s3.amazonaws.com:443/club_\u003cclub_id\u003e_\u003cguid\u003e_thumbnail_250x250\",\n                          \"num_members\": 123,\n                          \"num_followers\": 456,\n                          \"enable_private\": true,\n                          \"is_follow_allowed\": true,\n                          \"is_membership_private\": false,\n                          \"is_community\": false,\n                          \"rules\": [{\n                              \"desc\": \"Description\",\n                              \"title\": \"Rule\"\n                          }],\n                          \"num_online\": 0\n                        },\n                      ],\n                      \"has_verified_email\": true,\n                      \"can_edit_username\": true,\n                      \"can_edit_name\": true,\n                      \"can_edit_displayname\": true,\n                      \"topics\": [\n                        {\n                          \"title\": \"ü¶Ñ Startups\",\n                          \"id\": 107,\n                          \"abbreviated_title\": \"Startups\"\n                        }\n                      ]\n                    },\n                    \"success\": true\n                  }\n  /get_users_for_topic:\n    get:\n      summary: looks up users by topic.\n      parameters:\n        - in: query\n          name: topic_id\n          schema:\n            type: integer\n          example: 140\n        - in: query\n          name: page_size\n          schema:\n            type: integer\n          example: 25\n        - in: query\n          name: page\n          schema:\n            type: integer\n          example: 1\n      responses:\n        200:\n          description: returns list of users with pagination. Bios truncated to 80 chars.\n          content:\n            application/json:\n              examples:\n                users:\n                  value: {\"users\":[{\"user_id\":1234,\"name\":\"John Example\",\"photo_url\":\"https://clubhouseprod.s3.amazonaws.com:443/\u003cuser_id\u003e_\u003cguid\u003e_thumbnail_250x250\",\"username\":\"john_example\",\"bio\":\"John Example is an exemplary user object\",\"twitter\":\"john_example\"}],\"count\":1,\"next\":null,\"previous\":null,\"success\":true}\n  /get_channels:\n    get:\n      summary: get all channels\n      # also works with POST on an empty {} request body?\n      responses:\n        200:\n          description: list of channels\n          content:\n            application/json:\n              examples:\n                channels:\n                  value: {\n                    \"channels\": [{\n                        \"creator_user_profile_id\": 1234,\n                        \"channel_id\": 123456,\n                        \"channel\": \"abcdefgh\",\n                        \"topic\": \"Example Topic\",\n                        \"is_private\": false,\n                        \"is_social_mode\": false,\n                        \"url\": \"https://www.joinclubhouse.com/room/abcdefgh\",\n                        \"club\": {\n                            \"club_id\": 12345,\n                            \"name\": \"Club name\",\n                            \"description\": \"Club description\",\n                            \"photo_url\": \"https://clubhouseprod.s3.amazonaws.com:443/club_\u003cclub_id\u003e_\u003cguid\u003e_thumbnail_250x250\",\n                            \"num_members\": 123,\n                            \"num_followers\": 456,\n                            \"enable_private\": true,\n                            \"is_follow_allowed\": true,\n                            \"is_membership_private\": false,\n                            \"is_community\": false,\n                            \"rules\": [{\n                                \"desc\": \"Description\",\n                                \"title\": \"Rule\"\n                            }],\n                            \"num_online\": 0\n                        },\n                        \"club_name\": \"Club name\",\n                        \"club_id\": 12345,\n                        \"welcome_for_user_profile\": null,\n                        \"num_other\": 0,\n                        \"has_blocked_speakers\": false,\n                        \"is_explore_channel\": false,\n                        \"num_speakers\": 123,\n                        \"num_all\": 1234,\n                        \"users\": [{\n                            \"user_id\": 1234,\n                            \"name\": \"John Example\",\n                            \"photo_url\": \"https://clubhouseprod.s3.amazonaws.com:443/\u003cuser_id\u003e_\u003cguid\u003e_thumbnail_250x250\",\n                            \"is_speaker\": true,\n                            \"is_moderator\": true,\n                            \"time_joined_as_speaker\": \"2021-01-20T00:00:00.000000+00:00\",\n                            \"is_followed_by_speaker\": true,\n                            \"is_invited_as_speaker\": false\n                        }]\n                    }],\n                    \"events\": [],\n                    \"success\": true\n                  }\n  /join_channel:\n    post:\n      summary: join a channel.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              joinFromAppHomeScreen:\n                # just channel is enough\n                # attribution_details is base64-encoded JSON:\n                # {\"is_explore\":false,\"rank\":1}\n                value: {\"channel\":\"abcdefgh\",\"attribution_source\":\"feed\",\"attribution_details\":\"eyJpc19leHBsb3JlIjpmYWxzZSwicmFuayI6MX0=\"}\n              justChannelIsEnough:\n                value: {\"channel\":\"abcdefgh\"}\n      responses:\n        200:\n          description: stuff needed to actually join a channel\n          content:\n            application/json:\n              examples:\n                channel:\n                  value: {\n                              \"creator_user_profile_id\": 1234,\n                              \"channel_id\": 123456,\n                              \"channel\": \"abcdefgh\",\n                              \"topic\": \"Channel topic\",\n                              \"is_private\": false,\n                              \"is_social_mode\": false,\n                              \"url\": \"https://www.joinclubhouse.com/room/abcdefgh\",\n                              \"club\": {\n                                  \"club_id\": 1234,\n                                  \"name\": \"Club name\",\n                                  \"description\": \"Club description\",\n                                  \"photo_url\": \"https://clubhouseprod.s3.amazonaws.com:443/club_\u003cclub_id\u003e_\u003cguid\u003e_thumbnail_250x250\",\n                                  \"num_members\": 123,\n                                  \"num_followers\": 567,\n                                  \"enable_private\": true,\n                                  \"is_follow_allowed\": true,\n                                  \"is_membership_private\": false,\n                                  \"is_community\": false,\n                                  \"rules\": [],\n                                  \"num_online\": 0\n                              },\n                              \"club_name\": \"Startup Club\",\n                              \"club_id\": 45,\n                              \"welcome_for_user_profile\": null,\n                              \"is_handraise_enabled\": true,\n                              \"handraise_permission\": 1,\n                              \"is_club_member\": false,\n                              \"is_club_admin\": false,\n                              \"users\": [{\n                                  \"user_id\": 123456,\n                                  \"name\": \"John Example\",\n                                  \"photo_url\": \"https://clubhouseprod.s3.amazonaws.com:443/\u003cuser_id\u003e_\u003cguid\u003e_thumbnail_250x250\",\n                                  \"username\": \"john_example\",\n                                  \"first_name\": \"John\",\n                                  \"skintone\": 3,\n                                  \"is_new\": true,\n                                  \"is_speaker\": true,\n                                  \"is_moderator\": true,\n                                  \"time_joined_as_speaker\": \"2021-01-31T00:00:00.000000+00:00\",\n                                  \"is_followed_by_speaker\": true,\n                                  \"is_invited_as_speaker\": true\n                              }, {\n                                  \"user_id\": 1234,\n                                  \"name\": \"The currently joining user\",\n                                  \"photo_url\": \"https://clubhouseprod.s3.amazonaws.com:443/\u003cuser_id\u003e_\u003cguid\u003e_thumbnail_250x250\",\n                                  \"username\": \"currentuser\",\n                                  \"first_name\": \"Current\",\n                                  \"skintone\": 3,\n                                  \"is_new\": false,\n                                  \"is_speaker\": false,\n                                  \"is_moderator\": false,\n                                  \"time_joined_as_speaker\": null,\n                                  \"is_followed_by_speaker\": false,\n                                  \"is_invited_as_speaker\": false\n                              }],\n                              \"success\": true,\n                              \"is_empty\": false,\n                              \"token\": \"\u003ctoken\u003e\",\n                              \"rtm_token\": \"\u003crtm_token\u003e\",\n                              \"pubnub_token\": \"\u003cpubnub_token\u003e\",\n                              \"pubnub_origin\": null,\n                              \"pubnub_heartbeat_value\": 60,\n                              \"pubnub_heartbeat_interval\": 29,\n                              \"pubnub_enable\": true,\n                              \"agora_native_mute\": true\n                          }\n        400:\n          description: cannot join\n          content:\n            application/json:\n              examples:\n                appTooOld:\n                  value: {\"error_message\":\"Please upgrade the app to join rooms!\",\"success\":false}\n                roomNotAvailable:\n                  # Also sent when channel ID is invalid?\n                  value: {\"success\":false,\"error_message\":\"That room is no longer available üëãüèº\\nTry starting a new one instead?\"}\n  /leave_channel:\n    post:\n      summary: leave a channel.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                # just channel is enough\n                value: {\"channel\": \"abcdefgh\"}\n      responses:\n        200:\n          description: left the channel\n          content:\n            application/json:\n              examples:\n                channel:\n                  value: {\"success\":true}\n  /update_username:\n    post:\n      summary: edits username.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                value: {\"username\": \"hipsterhouse\"}\n      responses:\n        200:\n          description: username successfully set\n          content:\n            application/json:\n              examples:\n                success:\n                  value: {\"success\":true,\"error_message\":null}\n        400:\n          description: invalid/taken username (eg empty string)\n          content:\n            application/json:\n              examples:\n                emptyString:\n                  value: {\"success\":false,\"error_message\":\"This username is not allowed. Please try another one.\"}\n                taken:\n                  value: {\"success\":false,\"error_message\":\"This username has already been taken by a different user.\"}\n  /follow:\n    post:\n      summary: follows a user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                # There's also supposed to be source_topic_id, source, user_ids; not sure what they're for\n                value: {\"user_id\": 1234}\n      responses:\n        401:\n          description: waitlisted\n          content:\n            application/json:\n              examples:\n                waitlisted:\n                  value: {\"success\":false,\"error_message\":\"Your account is waitlisted. Please contact us if this is in error.\"}\n  /refresh_token:\n    post:\n      summary: gets an access_token from a refresh_token.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                value: {\"refresh\": \"\u003crefresh_token\u003e\"}\n      responses:\n        200:\n          description: returns new access and refresh token\n          content:\n            application/json:\n              examples:\n                validToken:\n                  value: {\"access\":\"\u003caccess_token\u003e\",\"refresh\":\"\u003crefresh_token\u003e\"}\n        401:\n          description: invalid refresh token\n          content:\n            application/json:\n              examples:\n                invalidToken:\n                  # seems it's using https://github.com/SimpleJWT/django-rest-framework-simplejwt\n                  value: {\"detail\":\"Token is invalid or expired\",\"code\":\"token_not_valid\"}\n  /get_suggested_invites:\n    post:\n      summary: find users to invite based on phone number.\n      description:\n        (also see https://zerforschung.org/posts/clubhouse-telefonnummern-en/ for @zerforschung's analysis of the privacy implications of this API)\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              hasContact:\n                value: {\"club_id\":null,\"upload_contacts\":false,\"contacts\":[{\"phone_number\": \"+11234567890\"}]}\n      responses:\n        200:\n          description: returns list of users that can be invited.\n          content:\n            application/json:\n              examples:\n                validUsers:\n                  value: {\"num_invites\":0,\"suggested_invites\":[{\"phone_number\":\"+11234567890\",\"in_app\":false,\"is_invited\":false,\"num_friends\":0}],\"success\":true}\n  /get_suggested_club_invites:\n    post:\n      summary: find users to invite to clubs based on phone number\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                # might also take club_id (number) and upload_contacts (bool)?\n                value: { \"upload_contacts\": true, \"contacts\": [{\"name\": \"aaa\", \"phone_number\": \"+11234567890\"}]}\n      responses:\n        200:\n          # I couldn't get this to return anything else.\n          description: returns list of suggested invites.\n          content:\n            application/json:\n              examples:\n                empty:\n                  value: {\"suggested_invites\":[],\"success\":true}\n  /get_club:\n    post:\n      summary: gets club by id\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                value: {\"club_id\": 1234}\n      responses:\n        200:\n          description: returns club object\n          content:\n            application/json:\n              examples:\n                club:\n                  value: {\"club\":{\"club_id\":123,\"name\":\"Example Club\",\"description\":\"Example\",\"photo_url\":\"https://clubhouseprod.s3.amazonaws.com:443/club_\u003cclub_id\u003e_\u003cguid\u003e_thumbnail_250x250\",\"num_members\":123,\"num_followers\":456,\"is_member\":false,\"is_follower\":false},\"is_admin\":false,\"is_member\":false,\"is_follower\":false,\"is_pending_accept\":false,\"is_pending_approval\":false,\"added_by_user_profile\":null,\"member_user_ids\":[],\"num_invites\":0,\"invite_link\":null,\"topics\":[{\"title\":\"Topic Example\",\"id\":140,\"abbreviated_title\":\"Topic Example\"}],\"success\":true}\n  /check_for_update:\n    get:\n      summary: Clubhouse uses this to check for updates when app is not installed from App Store (eg TestFlight)\n      parameters:\n        - in: query\n          name: is_testflight\n          schema:\n            type: integer\n          example: 1\n      responses:\n        200:\n          description: successful response\n          content:\n            application/json:\n              examples:\n                noUpdate:\n                  value: {\"has_update\":false,\"success\":true}\n                hasUpdate:\n                  value: {\"has_update\":true,\"is_mandatory\":true,\"app_url\":\"https://apps.apple.com/us/app/id1503133294\",\"app_version\":\"0.1.24\",\"app_build\":262,\"success\":true}\n  /invite_to_app:\n    post:\n      summary: invite a user to the app, using one of your invites\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                value: {\"name\":\"John Smith\",\"message\":null,\"phone_number\":\"+11234567890\"}\n      responses:\n        400:\n          description: your own account doesn't have an invite either\n          content:\n            application/json:\n              examples:\n                waitlisted:\n                  value: {\"success\":false,\"error_message\":\"Your account is waitlisted. Please contact us if this is in error.\"}\n  /invite_from_waitlist:\n    post:\n      summary: wave to another user on the waitlist to give them access\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                value: {\"user_id\": 1234}\n      responses:\n        400:\n          description: your own account is waitlisted, or some other error occurred\n          content:\n            application/json:\n              examples:\n                waitlisted:\n                  value: {\"success\":false,\"error_message\":\"Your account is waitlisted. Please contact us if this is in error.\"}\n                someOtherError:\n                  # https://github.com/zhuowei/ClubhouseAPI/issues/3#issuecomment-776295696\n                  value: {\"success\": false,\"error_message\":\"\"}\n  /get_following:\n    post:\n      summary: get a list of the users and clubs that this user is following. Returned users have bios truncated to ~80 characters.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              jsonObject:\n                value: {\"user_id\": 1234}\n      responses:\n        200:\n          description: returns list of users and clubs\n          content:\n            application/json:\n              examples:\n                success:\n                  value: {\"users\":[{\"user_id\":12345,\"name\":\"John Smith\",\"photo_url\":\"https://clubhouseprod.s3.amazonaws.com:443/\u003cuser_id\u003e_\u003cuuid\u003e_thumbnail_250x250\",\"username\":\"johnsmith\",\"bio\":\"Bio\",\"twitter\":null}],\"clubs\":[{\"club_id\":123,\"name\":\"Example Club\",\"description\":\"Example\",\"photo_url\":\"https://clubhouseprod.s3.amazonaws.com:443/club_\u003cclub_id\u003e_\u003cguid\u003e_thumbnail_250x250\",\"num_members\":123,\"num_followers\":456,\"is_member\":false,\"is_follower\":false}],\"count\":2,\"next\":null,\"previous\":null,\"success\":true}\n  /get_suggested_follows_friends_only:\n    post:\n      summary: find people to follow by uploading contacts during signup\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              noContacts:\n                value: {\"club_id\":null,\"upload_contacts\":true,\"contacts\":[]}\n      responses:\n        200:\n          description: returns list of users and clubs\n          content:\n            application/json:\n              examples:\n                noContacts:\n                  value: {\"users\":[],\"success\":true}\n  /get_suggested_follows_all:\n    get:\n      summary: gets suggested follows during signup\n      # ?in_onboarding=true\u0026page_size=50\u0026page=1\n      # ?in_onboarding=false\u0026page_size=25\u0026page=1\n      parameters:\n        - in: query\n          name: in_onboarding\n          schema:\n            type: boolean\n          example: true\n        - in: query\n          name: page_size\n          schema:\n            type: integer\n          example: 50\n        - in: query\n          name: page\n          schema:\n            type: integer\n          example: 1\n      responses:\n        200:\n          description: a list of users to follow. bios truncated to 80 chars.\n          content:\n            application/json:\n              examples:\n                usersFromOnboard:\n                  value: {\n                      \"users\": [\n                          {\n                              \"user_id\": 1234,\n                              \"name\": \"John Smith\",\n                              \"photo_url\": \"https://clubhouseprod.s3.amazonaws.com:443/\u003cuser_id\u003e_\u003cguid\u003e_thumbnail_250x250\",\n                              \"username\": \"rohan\",\n                              \"bio\": \"Example bio\",\n                              \"twitter\": \"johnsmith\"\n                          }\n                      ],\n                      \"count\": 59,\n                      \"next\": 2,\n                      \"previous\": null,\n                      \"success\": true\n                  }\n  /update_notifications:\n    post:\n      summary: updates notification during signup.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              onboardingSetting:\n                value: {\"enable_trending\":-1,\"pause_till\":-1,\"is_sandbox\":false,\"apn_token\":null,\"system_enabled\":2,\"frequency\":-1}\n      responses:\n        400:\n          description: waitlisted\n          content:\n            application/json:\n              examples:\n                waitlisted:\n                  value: {\"success\":false,\"error_message\":\"Your account is waitlisted. Please contact us if this is in error.\"}\n\n  /get_online_friends:\n    post:\n      summary: gets online friends on the app homepage.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              emptyRequest:\n                value: {}\n      responses:\n        200:\n          description: a list of online clubs and users.\n          content:\n            application/json:\n              examples:\n                emptyOnlineFriends:\n                  value: {\n                      \"clubs\": [],\n                      \"users\": []\n                  }\n  /get_events:\n    get:\n      summary: the Upcoming for You page\n      parameters:\n        - in: query\n          name: is_filtered\n          schema:\n            type: boolean\n          example: true\n        - in: query\n          name: page_size\n          schema:\n            type: integer\n          example: 25\n        - in: query\n          name: page\n          schema:\n            type: integer\n          example: 1\n      responses:\n        200:\n          description: a list of events\n          content:\n            application/json:\n              examples:\n                emptyEventsList:\n                  value: {\n                            \"events\": [],\n                            \"count\": 0,\n                            \"next\": null,\n                            \"previous\": null,\n                            \"success\": true\n                        }\n  /get_settings:\n    get:\n      summary: get notification settings\n      responses:\n        200:\n          description: notification settings\n          content:\n            application/json:\n              examples:\n                defaultSettings:\n                  value: {\n                    \"notifications_enable_trending\": true,\n                    \"notifications_frequency\": 3,\n                    \"notifications_is_paused\": false,\n                    \"success\": true\n                  }\n  /get_welcome_channel:\n    get:\n      summary: called during signup\n      responses:\n        200:\n          description: empty???\n          content:\n            application/json:\n              examples:\n                defaultSettings:\n                  value: {\n                    \"is_empty\": true,\n                    \"success\": true\n                }\n  /record_action_trails:\n    post:\n      summary: analytics\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              appOpened:\n                value: {\"action_trails\":[{\"blob_data\":{},\"trail_type\":\"app_opened\",\"client_time_created\":1612971962}]}\n      responses:\n        200:\n          description: always empty\n          content:\n            application/json:\n              examples:\n                success:\n                  value: {\"success\": true}\n  /get_notifications:\n    get:\n      summary: get notifications (the bell icon)\n      parameters:\n        - in: query\n          name: page_size\n          schema:\n            type: integer\n          example: 20\n        - in: query\n          name: page\n          schema:\n            type: integer\n          example: 1\n      responses:\n        200:\n          description: Returns a list of notifications.\n          content:\n            application/json:\n              examples:\n                empty:\n                  value: {\"notifications\":[],\"disabled\":false,\"count\":0,\"next\":null,\"previous\":null,\"success\":true}\n  /get_actionable_notifications:\n    get:\n      summary: get actionable notifications (the bell again)\n      responses:\n        200:\n          description: Returns a list of actionable notifications.\n          content:\n            application/json:\n              examples:\n                empty:\n                  value: {\"notifications\":[],\"count\":0,\"next\":null,\"previous\":null,\"success\":true}\n  /get_create_channel_targets:\n    post:\n      summary: is fetched when you tap Create Room\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            example: {}\n      responses:\n        400:\n          description: waitlisted\n          content:\n            application/json:\n              examples:\n                waitlisted:\n                  value: {\"success\":false,\"error_message\":\"Your account is waitlisted. Please contact us if this is in error.\"}\n  /create_channel:\n    post:\n      summary: creates a channel\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              openNoTopic:\n                value: {\"is_social_mode\":false,\"club_id\":null,\"user_ids\":[],\"is_private\":false,\"event_id\":null,\"topic\":null}\n              socialWithTopic:\n                value: {\"is_social_mode\":true,\"club_id\":null,\"user_ids\":[],\"is_private\":false,\"event_id\":null,\"topic\":\"topic\"}\n              # TODO(zhuowei): private\n      responses:\n        400:\n          description: waitlisted\n          content:\n            application/json:\n              examples:\n                waitlisted:\n                  value: {\"success\":false,\"error_message\":\"Your account is waitlisted. Please contact us if this is in error.\"}\n  /get_suggested_speakers:\n    post:\n      summary: gets suggested users when you start a private room\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              startingPrivateRoom:\n                value: {\"channel\":null}\n      responses:\n        200:\n          description: Returns a list of actionable notifications.\n          content:\n            application/json:\n              examples:\n                empty:\n                  value: {\"users\":[],\"count\":0,\"next\":null,\"previous\":null,\"clubs\":[],\"success\":true}\n  /search_users:\n    post:\n      summary: search for users\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              normalSearch:\n                # from the top Search button in Clubhouse\n                value: {\n                    \"cofollows_only\": false,\n                    \"following_only\": false,\n                    \"followers_only\": false,\n                    \"query\": \"johnsmith\"\n                }\n      responses:\n        200:\n          description: Returns a list of users.\n          content:\n            application/json:\n              examples:\n                successful:\n                  # bios not truncated\n                  value: {\n                    \"users\": [\n                        {\n                            \"user_id\": \"1234\",\n                            \"name\": \"John Smith\",\n                            \"username\": \"johnsmith\",\n                            \"photo_url\": \"https://clubhouseprod.s3.amazonaws.com:443/\u003cuser_id\u003e_\u003cuuid\u003e_thumbnail_250x250\",\n                            \"bio\": \"Bio!\"\n                        }\n                    ],\n                    \"count\": 1,\n                    \"next\": null,\n                    \"previous\": null,\n                    \"success\": true\n                  }\n  /get_suggested_follows_similar:\n    post:\n      summary: find similar users. (The Sparkles button on Clubhouse's profile page)\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            example: {\"user_id\":4}\n      responses:\n        200:\n          description: Returns a list of users. Bios truncated to 80 chars.\n          content:\n            application/json:\n              examples:\n                successful:\n                  value: {\n                    \"users\": [\n                        {\n                            \"user_id\": \"1234\",\n                            \"name\": \"John Smith\",\n                            \"username\": \"johnsmith\",\n                            \"photo_url\": \"https://clubhouseprod.s3.amazonaws.com:443/\u003cuser_id\u003e_\u003cuuid\u003e_thumbnail_250x250\",\n                            \"bio\": \"\",\n                            \"twitter\": null\n                        }\n                    ],\n                    \"success\": true\n                  }\n  /search_clubs:\n    post:\n      summary: search clubs.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              normalSearch:\n                # from the top Search button in Clubhouse\n                value: {\"cofollows_only\":false,\"following_only\":false,\"followers_only\":false,\"query\":\"rohan\"}\n      responses:\n        200:\n          description: Returns a list of clubs.\n          content:\n            application/json:\n              examples:\n                successful:\n                  value: {\n                      \"clubs\": [\n                          {\n                              \"club_id\": \"1234\",\n                              \"name\": \"Example club\",\n                              \"description\": \"Example club\",\n                              \"photo_url\": \"https://clubhouseprod.s3.amazonaws.com:443/club_\u003cclub_id\u003e_\u003cuuid\u003e_thumbnail_250x250\",\n                              \"num_followers\": 1234,\n                              \"num_members\": 5678,\n                              \"is_member\": false,\n                              \"is_follower\": false\n                          },\n                      ],\n                      \"count\": 1,\n                      \"next\": null,\n                      \"previous\": null,\n                      \"success\": true\n                  }\n",
			"canonicalURL": "/github.com/zhuowei/ClubhouseAPI@31573f459006277dc29f6b7c4442218ed3b1d2cc/-/blob/doc/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/zhuowei/ClubhouseAPI/blob/31573f459006277dc29f6b7c4442218ed3b1d2cc/doc/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/get_suggested_club_invites\": post: responses: 200: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema"
	]
}