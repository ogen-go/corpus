{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nordic-institute/X-Road"
		},
		"file": {
			"name": "openapi-definition.yaml",
			"size": 0,
			"path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml",
			"byteSize": 239285,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  description: X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.\n  version: \"2.1.0\"\n  title: X-Road Security Server Admin API\n  contact:\n    name: Nordic Institute for Interoperability Solutions (NIIS)\n    url: https://github.com/nordic-institute/X-Road-development/#enhancement-requests-and-error-reports\n    email: info@niis.org\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\nservers:\n  - url: /api/v1\n    description: basepath for API v1\ntags:\n  - name: backups\n    description: backup endpoints\n  - name: certificate-authorities\n    description: CA endpoints\n  - name: clients\n    description: clients endpoints\n  - name: diagnostics\n    description: diagnostics endpoints\n  - name: endpoints\n    description: services' endpoints related endpoints\n  - name: initialization\n    description: initialization endpoints\n  - name: keys\n    description: keys endpoints\n  - name: language\n    description: language endpoints\n  - name: local-groups\n    description: local groups endpoints\n  - name: member-classes\n    description: member classes endpoints\n  - name: member-names\n    description: member names endpoints\n  - name: security-servers\n    description: security servers endpoints\n  - name: services\n    description: services endpoints\n  - name: service-descriptions\n    description: service descriptions endpoints\n  - name: system\n    description: system endpoints\n  - name: timestamping\n    description: timestamping endpoints\n  - name: token-certificate\n    description: token certificates endpoints\n  - name: tokens\n    description: tokens endpoints\n  - name: user\n    description: user endpoints\n  - name: xroad-instances\n    description: xroad-instances endpoints\npaths:\n  /backups:\n    get:\n      tags:\n        - backups\n      summary: get security server backups\n      operationId: getBackups\n      description: \u003ch3\u003eAdministrator views the backups for the security server.\u003c/h3\u003e\n      responses:\n        '200':\n          description: list of security server backups\n          content:\n            application/json:\n              schema:\n                type: array\n                description: array of backup objects\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/Backup'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post:\n      tags:\n        - backups\n      summary: add new backup for the security server\n      operationId: addBackup\n      description:\n        \u003ch3\u003eAdds security server backup to the system.\u003c/h3\u003e\n        \u003cp\u003eThis endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.\u003c/p\u003e\n      responses:\n        '201':\n          description: item created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Backup'\n        '202':\n          description: item accepted\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /backups/ext:\n    post:\n      tags:\n        - backups\n      summary: add new backup for the security server and return extra backup state\n      operationId: addBackupExt\n      description:\n        \u003ch3\u003eAdds security server backup to the system.\u003c/h3\u003e\n        \u003cp\u003eThis endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.\u003c/p\u003e\n      responses:\n        '201':\n          description: item created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BackupExt'\n        '202':\n          description: item accepted\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /backups/upload:\n    post:\n      tags:\n        - backups\n      summary: upload new backup for the security server\n      operationId: uploadBackup\n      description:\n        \u003ch3\u003eUploads new security server backup to the system.\u003c/h3\u003e\n        \u003cp\u003eNote that it is possible to overwrite an existing backup file with the same name.\n          \u003cul\u003e\n            \u003cli\u003eAttempt to upload a new backup file having the same name with an existing backup and with query parameter \u003ccode\u003eignore_warnings\u003c/code\u003e = false causes the operation to fail with a warning in response's ErrorInfo object.\u003c/li\u003e\n            \u003cli\u003eAttempt to upload a new backup file having the same name with an existing backup and with query parameter \u003ccode\u003eignore_warnings\u003c/code\u003e = true will overwrite the existing backup.\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/p\u003e\n        \u003cp\u003eThe warning response has a warning code \u003ccode\u003ewarning_file_already_exists\u003c/code\u003e and the metadata field contains the name of the existing backup\u003c/p\u003e\n      parameters:\n        - in: query\n          name: ignore_warnings\n          description: If true, any ignorable warnings are ignored. if false (or missing),\n            any warnings cause request to fail.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        description: backup to add\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/BackupArchive'\n      responses:\n        '201':\n          description: item created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Backup'\n        '202':\n          description: item accepted\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                warnings_response:\n                  $ref: '#/components/examples/UploadExistingBackupWarningExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /backups/{filename}:\n    delete:\n      tags:\n        - backups\n      summary: delete security server backup\n      operationId: deleteBackup\n      description: \u003ch3\u003eAdministrator deletes the backup of the security server.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: filename\n          description: filename of the backup\n          required: true\n          schema:\n            type: string\n            format: filename\n            minLength: 1\n            maxLength: 255\n      responses:\n        '204':\n          description: deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /backups/{filename}/restore:\n    put:\n      tags:\n        - backups\n      summary: restore security server configuration from backup\n      operationId: restoreBackup\n      description:\n        \u003ch3\u003eAdministrator restores the security server configuration from backup.\u003c/h3\u003e\n        \u003cp\u003eThis endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup restore script.\u003c/p\u003e\n      parameters:\n        - in: path\n          name: filename\n          description: filename of the backup\n          required: true\n          schema:\n            type: string\n            format: filename\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: restore was successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokensLoggedOut'\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /backups/{filename}/download:\n    get:\n      tags:\n        - backups\n      summary: download security server backup\n      operationId: downloadBackup\n      description: \u003ch3\u003eAdministrator downloads the backup of the security server.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: filename\n          description: filename of the backup\n          required: true\n          schema:\n            type: string\n            format: filename\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: backup file downloaded\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n                description: backup file\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /token-certificates:\n    post:\n      tags:\n        - token-certificates\n      summary: import new certificate\n      operationId: importCertificate\n      description:\n        \u003ch3\u003eImports certificate to the system.\u003c/h3\u003e\n        \u003cp\u003eThis endpoint can also return metadata in the error response if the client for the certificate is not found. The metadata array contains the identifier of that client.\u003c/p\u003e\n      requestBody:\n        description: certificate to import\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: certificate file\n      responses:\n        '201':\n          description: certificate created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenCertificate'\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /token-certificates/{hash}:\n    get:\n      tags:\n        - token-certificates\n      summary: get certificate information\n      operationId: getCertificate\n      description: \u003ch3\u003eAdministrator views certificate details.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 40\n      responses:\n        '200':\n          description: token certificate\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenCertificate'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    delete:\n      tags:\n        - token-certificates\n      summary: delete certificate\n      operationId: deleteCertificate\n      description:\n        \u003ch3\u003eAdministrator deletes the certificate.\u003c/h3\u003e\n        \u003cp\u003eThis endpoint can also return metadata in the error response if the certificate is not found. The metadata array contains the id of that certificate.\u003c/p\u003e\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 40\n      responses:\n        '204':\n          description: deletion was successful\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /token-certificates/{hash}/activate:\n    put:\n      tags:\n        - token-certificates\n      summary: activate certificate\n      operationId: activateCertificate\n      description: \u003ch3\u003eAdministrator activates selected certificate.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 40\n      responses:\n        '204':\n          description: request was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /token-certificates/{hash}/disable:\n    put:\n      tags:\n        - token-certificates\n      summary: deactivate certificate\n      operationId: disableCertificate\n      description: \u003ch3\u003eAdministrator deactivates selected certificate.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 40\n      responses:\n        '204':\n          description: certificate was deactivated\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /token-certificates/{hash}/import:\n    post:\n      tags:\n        - token-certificates\n      summary: import an existing certificate from a token by cert hash\n      operationId: importCertificateFromToken\n      description:\n        \u003ch3\u003eImports certificate from a token to the system.\u003c/h3\u003e\n        \u003cp\u003eThis endpoint can also return metadata in the error response if the client for this certificate is not found. The metadata contains the identifier of that client.\u003c/p\u003e\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 40\n      responses:\n        '201':\n          description: the imported certificate\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenCertificate'\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /token-certificates/{hash}/possible-actions:\n    get:\n      tags:\n        - token-certificates\n      summary: get possible actions for one certificate\n      operationId: getPossibleActionsForCertificate\n      description: \u003ch3\u003eUI needs to know which actions can be done on one certificate.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 40\n      responses:\n        '200':\n          description: possible actions that can be done on the certificate\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PossibleActions'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /token-certificates/{hash}/register:\n    put:\n      tags:\n        - token-certificates\n      summary: register certificate\n      operationId: registerCertificate\n      description: \u003ch3\u003eAdministrator registers selected certificate.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 40\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SecurityServerAddress'\n      responses:\n        '200':\n          description: request was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /token-certificates/{hash}/unregister:\n    put:\n      tags:\n        - token-certificates\n      summary: unregister authentication certificate\n      operationId: unregisterAuthCertificate\n      description:\n        \u003ch3\u003eAdministrator unregisters selected authentication certificate.\u003c/h3\u003e\n        \u003cp\u003eThis endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.\u003c/p\u003e\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 40\n      responses:\n        '204':\n          description: request was successful\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n  /token-certificates/{hash}/mark-for-deletion:\n    put:\n      tags:\n        - token-certificates\n      summary: marks an auth certificate for deletion\n      operationId: markAuthCertForDeletion\n      description:\n        \u003ch3\u003eAdministrator marks an auth certificate for deletion.\u003c/h3\u003e\n        \u003cp\u003eThis endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.\u003c/p\u003e\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 40\n      responses:\n        '204':\n          description: request was successful\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n  /clients:\n    get:\n      tags:\n        - clients\n      summary: find security server clients\n      operationId: findClients\n      description: \u003ch3\u003eAdministrator views the clients of the security server.\u003c/h3\u003e\n      parameters:\n        - in: query\n          name: name\n          description: pass an optional search string (name) for looking up clients\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: instance\n          description: pass an optional search string (instance) for looking up clients\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: member_class\n          description: pass an optional search string (member_class) for looking up clients\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: member_code\n          description: pass an optional search string (member_code) for looking up clients\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: subsystem_code\n          description: pass an optional search string (subsystem_code) for looking up clients\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: show_members\n          description: to include members for search results\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - in: query\n          name: internal_search\n          description: to search only clients inside security server\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - in: query\n          name: local_valid_sign_cert\n          description:\n            To search only clients that have (or don't have) a valid (registered, OCSP response GOOD) sign cert stored on this security server.\n            Can be used to search both local and global clients, and can be combined with \u003ccode\u003einternal_search\u003c/code\u003e and \u003ccode\u003eexclude_local\u003c/code\u003e parameters.\n            True = limit to clients that have a valid local sign cert, false = limit to clients that don't have a valid local sign cert.\n          required: false\n          schema:\n            type: boolean\n        - in: query\n          name: exclude_local\n          description: to search only clients that are not added to this security server\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: list of clients\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of client objects\n                items:\n                  $ref: '#/components/schemas/Client'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post:\n      tags:\n        - clients\n      summary: Add new client for the security server.\n      operationId: addClient\n      description:\n        \u003ch3\u003eAdds new client to the system.\u003c/h3\u003e\n        \u003cp\u003eThe client id will be validated and if the validation fails a validation error is returned. Note that with this endpoint it is possible to add an unregistered member as a client.\n          \u003cul\u003e\n            \u003cli\u003eAttempt to add an unregistered member with \u003ccode\u003eClientAdd.ignore_warnings\u003c/code\u003e = false causes the operation to fail with a warning in response's ErrorInfo object.\u003c/li\u003e\n            \u003cli\u003eAttempt to add an unregistered member with \u003ccode\u003eClientAdd.ignore_warnings\u003c/code\u003e = true succeeds.\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/p\u003e\n        \u003cp\u003eWhen trying to add an unregister client, the error response has an error code \u003ccode\u003eunregistered_member\u003c/code\u003e and the metadata field contains the identifier of the unregistered client\u003c/p\u003e\n      requestBody:\n        description: client to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientAdd'\n      responses:\n        '201':\n          description: new client created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n        '400':\n          description: there are warnings or errors related to the service description\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                warnings_response:\n                  $ref: '#/components/examples/AddUnregisteredMemberWarningExample'\n                validation_errors_response:\n                  $ref: '#/components/examples/ValidationErrorsExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /clients/{id}:\n    get:\n      tags:\n        - clients\n      summary: get security server client information\n      operationId: getClient\n      description: \u003ch3\u003eAdministrator views the client details of the security server.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: client object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    patch:\n      tags:\n        - clients\n      summary: update security server client information\n      operationId: updateClient\n      description: \u003ch3\u003eAdministrator updates the client information.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConnectionTypeWrapper'\n      responses:\n        '200':\n          description: client modified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    delete:\n      tags:\n        - clients\n      summary: delete security server client\n      operationId: deleteClient\n      description: \u003ch3\u003eAdministrator deletes the client of the security server.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '204':\n          description: client deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /clients/{id}/local-groups:\n    get:\n      tags:\n        - clients\n      summary: get local groups for the selected client\n      operationId: getClientLocalGroups\n      description: \u003ch3\u003eAdministrator views the local groups for the client.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: list of local groups\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of local group objects\n                items:\n                  $ref: '#/components/schemas/LocalGroup'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post:\n      tags:\n        - clients\n      summary: add new local group for the security server client\n      operationId: addClientLocalGroup\n      description: \u003ch3\u003eAdministrator adds a new local group for the client.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      requestBody:\n        description: group to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LocalGroupAdd'\n      responses:\n        '201':\n          description: local group created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LocalGroup'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /clients/{id}/orphans:\n    get:\n      tags:\n        - clients\n      summary: get information about orphaned sign keys, certificates and csrs left behind a delete client\n      operationId: getClientOrphans\n      description:\n        \u003ch3\u003eAdministrator has deleted a client and wants to know if some orphaned sign keys, certificates or csrs exist.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: Information telling that orphans exist. If they don't exist, 404 is returned instead.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrphanInformation'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n    delete:\n      tags:\n        - clients\n      summary: delete orphaned sign keys, certificates and csrs left behind a delete client\n      operationId: deleteOrphans\n      description: \u003ch3\u003eAdministrator deletes the orphaned sign keys, certificates and csrs left behind a delete client.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '204':\n          description: deletion was successful\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /clients/{id}/register:\n    put:\n      tags:\n        - clients\n      summary: register security server client\n      operationId: registerClient\n      description:\n        \u003ch3\u003eAdministrator registers client.\u003c/h3\u003e\n        \u003cp\u003eThis endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.\u003c/p\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '204':\n          description: client was registered\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n  /clients/{id}/service-clients:\n    get:\n      tags:\n        - clients\n      summary: get service clients for the selected client's services\n      operationId: getClientServiceClients\n      description: \u003ch3\u003eAdministrator views the service clients for the client.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: list of service clients\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of service client objects\n                items:\n                  $ref: '#/components/schemas/ServiceClient'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /clients/{id}/service-clients/{sc_id}:\n    get:\n      tags:\n        - clients\n      summary: get single service client by client id and service client id\n      operationId: getServiceClient\n      description: \u003ch3\u003eAdministrator views the information for a single service client.\u003ch3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n        - in: path\n          name: sc_id\n          description: id of the service client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: single service clients\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceClient'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /clients/{id}/service-clients/{sc_id}/access-rights:\n    get:\n      tags:\n        - clients\n      summary: get access rights for the selected service client.\n      operationId: getServiceClientAccessRights\n      description: \u003ch3\u003eAdministrator views service client's access rights.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client who owns the services\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n        - in: path\n          name: sc_id\n          description: id of the service client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1279\n      responses:\n        '200':\n          description: list of access rights\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of access right objects\n                items:\n                  $ref: '#/components/schemas/AccessRight'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post:\n      tags:\n        - clients\n      summary: Add new access rights for selected service client. If service client did not exist yet, one is created.\n      operationId: addServiceClientAccessRights\n      description: \u003ch3\u003eAdds access rights to the service client.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client who owns the services\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n        - in: path\n          name: sc_id\n          description: id of the service client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1279\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AccessRights'\n      responses:\n        '201':\n          description: access right that was added\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of added access right objects\n                items:\n                  $ref: '#/components/schemas/AccessRight'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /clients/{id}/service-clients/{sc_id}/access-rights/delete:\n    post:\n      tags:\n        - clients\n      summary: remove access rights\n      operationId: deleteServiceClientAccessRights\n      description: \u003ch3\u003eAdministrator removes access rights from selected service client.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client who owns the services\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n        - in: path\n          name: sc_id\n          description: id of the service client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1279\n      requestBody:\n        description: list of access rights to be deleted\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AccessRights'\n      responses:\n        '204':\n          description: access right(s) deleted\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /clients/{id}/sign-certificates:\n    get:\n      tags:\n        - clients\n      summary: get security server client certificates information\n      operationId: getClientSignCertificates\n      description: \u003ch3\u003eAdministrator views the certificates for the client.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: list of certificates\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of certificate (details) objects\n                items:\n                  $ref: '#/components/schemas/TokenCertificate'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /clients/{id}/tls-certificates:\n    get:\n      tags:\n        - clients\n      summary: get security server client TLS certificates information\n      operationId: getClientTlsCertificates\n      description: \u003ch3\u003eAdministrator views the TLS certificates for the client.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: list of tls certificates\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of certificate (details) objects\n                items:\n                  $ref: '#/components/schemas/CertificateDetails'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post:\n      tags:\n        - clients\n      summary: add new certificate for the security server client\n      operationId: addClientTlsCertificate\n      description: \u003ch3\u003eAdministrator adds a new certificate for the client.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      requestBody:\n        description: certificate to add\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: certificate file\n      responses:\n        '201':\n          description: certificate added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateDetails'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /clients/{id}/tls-certificates/{hash}:\n    get:\n      tags:\n        - clients\n      summary: get TLS certificate\n      operationId: getClientTlsCertificate\n      description: \u003ch3\u003eAdministrator gets the TLS certificate for the selected client.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 40\n      responses:\n        '200':\n          description: certificate details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateDetails'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    delete:\n      tags:\n        - clients\n      summary: delete certificate\n      operationId: deleteClientTlsCertificate\n      description: \u003ch3\u003eAdministrator deletes the certificate from selected client.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 40\n      responses:\n        '204':\n          description: certificate deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /clients/{id}/unregister:\n    put:\n      tags:\n        - clients\n      summary: unregister security server client\n      operationId: unregisterClient\n      description:\n        \u003ch3\u003eAdministrator unregisters client.\u003c/h3\u003e\n        \u003cp\u003eThis endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.\u003c/p\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '204':\n          description: unregister was successful\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n  /clients/{id}/service-descriptions:\n    get:\n      tags:\n        - clients\n      summary: get security server client service descriptions\n      operationId: getClientServiceDescriptions\n      description: \u003ch3\u003eAdministrator views the service descriptions for the client.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: list of service descriptions\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of service description objects\n                items:\n                  $ref: '#/components/schemas/ServiceDescription'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '500':\n          description: internal server error\n    post:\n      tags:\n        - clients\n      summary: add new service description for the security server client\n      operationId: addClientServiceDescription\n      description:\n        \u003ch3\u003eAdministrator adds a new service description for the client.\u003c/h3\u003e\n        \u003cp\u003e\n          This endpoint can also return metadata in the error response if adding the service description fails due to invalid URLs, already existing service description or already existing services.\n          If adding the service description fails due to an invalid service URL, the error response will have the error code \u003ccode\u003einvalid_service_url\u003c/code\u003e and the metadata will contain a list of invalid URLs.\n          If adding the service description fails due to an already existing service description, the error response will have the error code \u003ccode\u003eurl_already_exists\u003c/code\u003e and the metadata will contain the existing URL.\n          If adding the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the '409' response in this endpoint.\n        \u003c/p\u003e\n        \u003cp\u003e\n          This endpoint can return a warnings response which can be ignored by setting \u003ccode\u003eServiceDescriptionAdd.ignore_warnings\u003c/code\u003e = true.\n          If \u003ccode\u003eServiceDescriptionAdd.ignore_warnings\u003c/code\u003e = false, a warnings response will be returned if WSDL or OpenAPI3 validation fails and validation warnings are returned.\n          The warnings will have the warning code \u003ccode\u003ewsdl_validation_warnings\u003c/code\u003e or \u003ccode\u003eopenapi_validation_warnings\u003c/code\u003e depending on which type the service description is. The metadata of the warning contains the output of the validator itself.\n        \u003c/p\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceDescriptionAdd'\n      responses:\n        '201':\n          description: service description created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceDescription'\n        '400':\n          description: there are warnings or errors related to the service description\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n                warnings_response:\n                  $ref: '#/components/examples/AddServiceDescriptionWarningExample'\n                validation_errors_response:\n                  $ref: '#/components/examples/ValidationErrorsExample'\n\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description:\n            \u003ch3\u003eAn existing item already exists\u003c/h3\u003e\n            \u003cp\u003e\n              If there are existing WSDL services with the same name, the error response will include the existing services' names and the containing WSDL's URL in the metadata array.\n            \u003c/p\u003e\n            \u003cp\u003e\n              In this case the error code \u003ccode\u003eservice_already_exists\u003c/code\u003e (WSDL) or \u003ccode\u003eservice_code_already_exists\u003c/code\u003e (OPENAPI3) is used and the entries in the metadata array are ordered in following way\n              \u003cul\u003e\n                \u003cli\u003emetadata has a list of strings [C1,U1,C2,U2....Cn,Un] where\u003c/li\u003e\n                \u003cli\u003eC1 = duplicate service full code\u003c/li\u003e\n                \u003cli\u003eU1 = URL of the existing WSDL that has the duplicate\u003c/li\u003e\n              \u003c/ul\u003e\n            \u003c/p\u003e\n            \u003cstrong\u003eSee the example\u003c/strong\u003e\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ServiceDescriptionErrorWithMetadataExample'\n        '500':\n          description: internal server error\n  /clients/{id}/service-client-candidates:\n    get:\n      tags:\n        - clients\n      summary: find ServiceClient candidates for a specific client\n      operationId: findServiceClientCandidates\n      description:\n        \u003ch3\u003eAdministrator views the clients, globalgroups and localgroups, that could be added as ServiceClients for given Client's services.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n        - in: query\n          name: member_name_group_description\n          description: pass an optional search string (name) for looking up subjects - name of a member or description of a group\n          example: NIIS | Some group description\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: service_client_type\n          description: pass an optional search string (service_client_type) for looking up service clients\n          required: false\n          schema:\n            $ref: '#/components/schemas/ServiceClientType'\n        - in: query\n          name: instance\n          description: pass an optional search string (instance) for looking up service clients - full instance id should be used\n          example: GOV\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: member_class\n          description: pass an optional search string (member_class) for looking up service clients\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: member_group_code\n          description: pass an optional search string (member_group_code) for looking up service clients - member_code of a member or group_code of a group\n          example: 1234 | Example group code\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: subsystem_code\n          description: pass an optional search string (subsystem_code) for looking up service clients\n          example: Subsystem1\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n      responses:\n        '200':\n          description: list of service clients\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of ServiceClients\n                items:\n                  $ref: '#/components/schemas/ServiceClient'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /clients/{id}/make-owner:\n    put:\n      tags:\n        - clients\n      summary: make client Security Server's owner. Client must be a member and already registered on the Security Server\n      operationId: changeOwner\n      description:\n        \u003ch3\u003eAdministrator changes Security Server's owner.\u003c/h3\u003e\n        \u003cp\u003eThis endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.\u003c/p\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the client to be set as owner\n          required: true\n          schema:\n            type: string\n            example: FI:GOV:123\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '204':\n          description: client was set as owner\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n  /diagnostics/globalconf:\n    get:\n      tags:\n        - diagnostics\n      summary: view global configuration diagnostics information\n      operationId: getGlobalConfDiagnostics\n      description: \u003ch3\u003eAdministrator views the global configuration diagnostics information.\u003c/h3\u003e\n      responses:\n        '200':\n          description: global configuration diagnostics information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GlobalConfDiagnostics'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /diagnostics/ocsp-responders:\n    get:\n      tags:\n        - diagnostics\n      summary: view ocsp responders diagnostics information\n      operationId: getOcspRespondersDiagnostics\n      description: \u003ch3\u003eAdministrator views the ocsp responders diagnostics information.\u003c/h3\u003e\n      responses:\n        '200':\n          description: ocsp responders diagnostics information\n          content:\n            application/json:\n              schema:\n                type: array\n                description: array of ocsp responder diagnostics objects\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/OcspResponderDiagnostics'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /diagnostics/timestamping-services:\n    get:\n      tags:\n        - diagnostics\n      summary: view timestamping services diagnostics information\n      operationId: getTimestampingServicesDiagnostics\n      description: \u003ch3\u003eAdministrator views the timestamping services diagnostics information.\u003c/h3\u003e\n      responses:\n        '200':\n          description: timestamping services diagnostics information\n          content:\n            application/json:\n              schema:\n                type: array\n                description: array of timestamping service diagnostics objects\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/TimestampingServiceDiagnostics'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /diagnostics/addon-status:\n    get:\n      tags:\n        - diagnostics\n      summary: view addon services diagnostics information\n      operationId: getAddOnDiagnostics\n      description: \u003ch3\u003eAdministrator views the proxy addon status diagnostics information.\u003c/h3\u003e\n      responses:\n        '200':\n          description: addon services diagnostics information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddOnStatus'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /diagnostics/backup-encryption-status:\n    get:\n      tags:\n        - diagnostics\n      summary: view backup encryption services diagnostics information\n      operationId: getBackupEncryptionDiagnostics\n      description: \u003ch3\u003eAdministrator views the proxy backup encryption status diagnostics information.\u003c/h3\u003e\n      responses:\n        '200':\n          description: backup encryption services diagnostics information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BackupEncryptionStatus'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /diagnostics/message-log-encryption-status:\n    get:\n      tags:\n        - diagnostics\n      summary: view message log encryption and grouping services diagnostics information\n      operationId: getMessageLogEncryptionDiagnostics\n      description: \u003ch3\u003eAdministrator views the proxy message log encryption and grouping diagnostics information.\u003c/h3\u003e\n      responses:\n        '200':\n          description: message log encryption and grouping diagnostics information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MessageLogEncryptionStatus'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /initialization:\n    post:\n      tags:\n        - initialization\n      summary: Initialize a new security server with the provided initial configuration\n      operationId: initSecurityServer\n      description:\n        \u003ch3\u003eAdministrator initializes a new Security Server with the provided initial configuration.\u003c/h3\u003e\n        \u003cp\u003e\n          This endpoint can also return metadata in the error response. The metadata array can contain error messages about why the init did not succeed.\n          If the pin code is too weak, the error code \u003ccode\u003eweak_pin\u003c/code\u003e is used and the entries in the metadata array are always ordered in following way\n          \u003cul\u003e\n            \u003cli\u003emetadata has a list of strings [\"pin_min_length\", x, \"pin_min_char_classes_count\", y] where\u003c/li\u003e\n            \u003cli\u003ex = the minimum length of the pin code\u003c/li\u003e\n            \u003cli\u003ey = the minimum amount of character classes (e.g. uppercase, number, special characters) to be used in the pin code\u003c/li\u003e\n          \u003c/ul\u003e\n          Other possible error code is \u003ccode\u003einvalid_init_params\u003c/code\u003e which can have any one or more of the following strings in the metadata field\n          \u003cul\u003e\n            \u003cli\u003eserver_code_not_provided\u003c/li\u003e\n            \u003cli\u003emember_class_not_provided\u003c/li\u003e\n            \u003cli\u003emember_code_not_provided\u003c/li\u003e\n            \u003cli\u003epin_code_not_provided\u003c/li\u003e\n            \u003cli\u003eserver_code_exists\u003c/li\u003e\n            \u003cli\u003emember_class_exists\u003c/li\u003e\n            \u003cli\u003emember_code_exists\u003c/li\u003e\n            \u003cli\u003epin_code_exists\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/p\u003e\n        \u003cp\u003e\n          This endpoint can return a warnings response which can be ignored by setting \u003ccode\u003eInitialServerConf.ignore_warnings\u003c/code\u003e = true.\n          If \u003ccode\u003eInitialServerConf.ignore_warnings\u003c/code\u003e = false, a warnings response will be returned if any one of the following conditions is true\n          \u003cul\u003e\n            \u003cli\u003eserver code has already been set for this Security Server (warning code \u003ccode\u003einit_servercode_exists\u003c/code\u003e)\u003c/li\u003e\n            \u003cli\u003eserver owner has already been set for this Security Server(warning code \u003ccode\u003einit_server_owner_exists\u003c/code\u003e)\u003c/li\u003e\n            \u003cli\u003esoftware token has already been initialized in this Security Server(warning code \u003ccode\u003einit_software_token_initialized\u003c/code\u003e)\u003c/li\u003e\n            \u003cli\u003ethe provided owner member is unregistered(warning code \u003ccode\u003einit_unregistered_member\u003c/code\u003e)\u003c/li\u003e\n            \u003cli\u003ethe provided server id is already in use by another Security Server(warning code \u003ccode\u003einit_server_id_exists\u003c/code\u003e)\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/p\u003e\n        \u003cstrong\u003eSee the '400' response examples\u003c/strong\u003e\n      requestBody:\n        description: initial security server configuration\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/InitialServerConf'\n      responses:\n        '201':\n          description: security server initialized\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_invalid_init_params:\n                  $ref: '#/components/examples/ErrorInvalidInitParamsMetadataExample'\n                error_weak_pin:\n                  $ref: '#/components/examples/ErrorWeakPinMetadataExample'\n                warnings_response:\n                  $ref: '#/components/examples/InitializationWarningExample'\n                validation_errors_response:\n                  $ref: '#/components/examples/ValidationErrorsExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /initialization/status:\n    get:\n      tags:\n        - initialization\n      summary: Check the initialization status of the Security Server\n      operationId: getInitializationStatus\n      description: \u003ch3\u003eAdministrator checks the initialization status of the Security Server.\u003c/h3\u003e\n      responses:\n        '200':\n          description: initialization status of the Security Server\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InitializationStatus'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /local-groups/{group_id}:\n    get:\n      tags:\n        - local-groups\n      summary: get local group information\n      operationId: getLocalGroup\n      description: \u003ch3\u003eAdministrator views local group details.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: group_id\n          description: id of the local group\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      responses:\n        '200':\n          description: group object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LocalGroup'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    patch:\n      tags:\n        - local-groups\n      summary: update local group information\n      operationId: updateLocalGroup\n      description: \u003ch3\u003eAdministrator updates the local group information.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: group_id\n          description: id of the local group\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LocalGroupDescription'\n      responses:\n        '200':\n          description: local group modified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LocalGroup'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    delete:\n      tags:\n        - local-groups\n      summary: delete local group\n      operationId: deleteLocalGroup\n      description: \u003ch3\u003eAdministrator deletes the local group.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: group_id\n          description: id of the local group\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      responses:\n        '204':\n          description: local group deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /local-groups/{group_id}/members:\n    post:\n      tags:\n        - local-groups\n      summary: add new member for the local group\n      operationId: addLocalGroupMember\n      description:\n        \u003ch3\u003eAdministrator adds a new member for the local group.\u003c/h3\u003e\n        \u003cp\u003eThe new member can be an X-Road member or a subsystem.\u003c/p\u003e\n      parameters:\n        - in: path\n          name: group_id\n          description: id of the local group\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Members'\n      responses:\n        '201':\n          description: new members added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Members'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /local-groups/{group_id}/members/delete:\n    post:\n      tags:\n        - local-groups\n      summary: delete member from local group\n      operationId: deleteLocalGroupMember\n      description: \u003ch3\u003eAdministrator deletes the member from local group.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: group_id\n          description: id of the local group\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Members'\n      responses:\n        '204':\n          description: members deleted\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /keys/{id}:\n    get:\n      tags:\n        - keys\n      summary: get information for the selected key in selected token\n      operationId: getKey\n      description: \u003ch3\u003eAdministrator views key details.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the key\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      responses:\n        '200':\n          description: key object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Key'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    patch:\n      tags:\n        - keys\n      summary: update key information\n      operationId: updateKey\n      description: \u003ch3\u003eAdministrator updates the key information.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the key\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/KeyName'\n      responses:\n        '200':\n          description: key modified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Key'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    delete:\n      tags:\n        - keys\n      summary: delete key\n      operationId: deleteKey\n      description:\n        \u003ch3\u003eAdministrator deletes the key.\u003c/h3\u003e\n        \u003cp\u003eThis endpoint can also return metadata in the error response if sending an auth cert deletion management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.\u003c/p\u003e\n        \u003cp\u003e\n          Note that with this endpoint it's possible to delete an authentication key with a registered authentication certificate.\n          \u003cul\u003e\n            \u003cli\u003eAttempt to delete an authentication key with a registered authentication certificate and with \u003ccode\u003eignore_warnings\u003c/code\u003e = false causes the operation to fail with a warning in response's ErrorInfo object.\u003c/li\u003e\n            \u003cli\u003eAttempt to delete an authentication key with a registered authentication certificate and with \u003ccode\u003eignore_warnings\u003c/code\u003e = true succeeds. The authentication certificate is first unregistered, and the key and certificate are deleted after that.\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003cp\u003eWhen trying to delete an authentication key with a registered authentication certificate, the warning response has a warning code \u003ccode\u003eauth_key_with_registered_cert_warning\u003c/code\u003e and the metadata field contains the key id of the key\u003c/p\u003e\n        \u003c/p\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the key\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n        - in: query\n          name: ignore_warnings\n          description: if true, any ignorable warnings are ignored. if false (or missing),\n                    any warnings cause request to fail\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '204':\n          description: key deletion was successful\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n                warnings_response:\n                  $ref: '#/components/examples/DeleteKeyWarningExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n  /keys/{id}/csrs:\n    post:\n      tags:\n        - keys\n      summary: generate csr for the selected key\n      operationId: generateCsr\n      description: \u003ch3\u003eAdministrator generates csr for the key.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the key\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        description: request to generate csr\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CsrGenerate'\n            examples:\n              sign_csr_example:\n                $ref: '#/components/examples/SignCsrGenerateExample'\n              auth_csr_example:\n                $ref: '#/components/examples/AuthCsrGenerateExample'\n      responses:\n        '201':\n          description: created CSR\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n                description: csr file\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /keys/{id}/csrs/{csr_id}:\n    get:\n      tags:\n        - keys\n      summary: download a CSR binary\n      operationId: downloadCsr\n      description: \u003ch3\u003eAdministrator downloads a csr that has been created earlier.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the key\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n        - in: path\n          name: csr_id\n          description: id of the csr\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 40\n        - in: query\n          name: csr_format\n          description: format of the certificate signing request (PEM or DER)\n          required: false\n          schema:\n            $ref: '#/components/schemas/CsrFormat'\n      responses:\n        '201':\n          description: CSR binary\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n                description: csr file\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    delete:\n      tags:\n        - keys\n      summary: delete csr from the selected key\n      operationId: deleteCsr\n      description: \u003ch3\u003eAdministrator deletes csr from the key.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the key\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n        - in: path\n          name: csr_id\n          description: id of the csr\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 40\n      responses:\n        '204':\n          description: csr deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /keys/{id}/csrs/{csr_id}/possible-actions:\n    get:\n      tags:\n        - keys\n      summary: get possible actions for one csr\n      operationId: getPossibleActionsForCsr\n      description: \u003ch3\u003eUI needs to know which actions can be done on one csr.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the key\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n        - in: path\n          name: csr_id\n          description: id of the csr\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 40\n      responses:\n        '200':\n          description: possible actions that can be done on the certificate\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PossibleActions'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /keys/{id}/possible-actions:\n    get:\n      tags:\n        - keys\n      summary: get possible actions for one key\n      operationId: getPossibleActionsForKey\n      description: \u003ch3\u003eUI needs to know which actions can be done on one key.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the key\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      responses:\n        '200':\n          description: possible actions that can be done on the certificate\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PossibleActions'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /member-classes:\n    get:\n      tags:\n        - member-classes\n      summary: get list of known member classes\n      operationId: getMemberClasses\n      description: \u003ch3\u003eAdministrator lists member classes.\u003c/h3\u003e\n      parameters:\n        - in: query\n          name: current_instance\n          description: if true, return member classes for this instance.\n            if false (default), return member classes for all instances\n          required: false\n          schema:\n            default: false\n            type: boolean\n      responses:\n        '200':\n          description: array of member classes\n          content:\n            application/json:\n              schema:\n                type: array\n                description: array of member classes\n                uniqueItems: true\n                items:\n                  type: string\n                  format: text\n                  minLength: 1\n                  maxLength: 255\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /member-classes/{id}:\n    get:\n      tags:\n        - member-classes\n      summary: get list of known member classes for a given instance\n      operationId: getMemberClassesForInstance\n      description: \u003ch3\u003eAdministrator lists member classes for a given instance.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: instance id\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: array of member classes\n          content:\n            application/json:\n              schema:\n                type: array\n                description: array of member classes\n                uniqueItems: true\n                items:\n                  type: string\n                  format: text\n                  minLength: 1\n                  maxLength: 255\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /member-names:\n    get:\n      tags:\n        - member-names\n      summary: find member name by member class and member code\n      operationId: findMemberName\n      description: \u003ch3\u003eAdministrator looks up member's name.\u003c/h3\u003e\n      parameters:\n        - in: query\n          name: member_class\n          description: class of the member\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n        - in: query\n          name: member_code\n          description: code of the member\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: name of the member\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MemberName'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /language/{code}:\n    put:\n      tags:\n        - language\n      summary: change language\n      operationId: language\n      description: \u003ch3\u003eAdministrator changes the language for the UI.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: code\n          description: code of the language (language code)\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 2\n            maxLength: 2\n      responses:\n        '200':\n          description: language changed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Language'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /openapi.yaml:\n    x-style-validator-ignored: true\n    get:\n      tags:\n        - openapi\n      summary: download security server's openapi definition\n      operationId: downloadOpenApi\n      description: \u003ch3\u003eAdministrator downloads the security server's OpenAPI definition.\u003c/h3\u003e\n      responses:\n        '200':\n          description: openapi definition\n          content:\n            application/x-yaml:\n              schema:\n                type: string\n                format: binary\n                description: openapi definition file\n        '400':\n          description: request was invalid\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /user:\n    get:\n      tags:\n        - user\n      summary: get user data for the logged user\n      operationId: getUser\n      description: \u003ch3\u003eAdministrator gets user data from backend.\u003c/h3\u003e\n      responses:\n        '200':\n          description: user details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /security-servers:\n    get:\n      tags:\n        - security-servers\n      summary: get all security servers\n      operationId: getSecurityServers\n      description: \u003ch3\u003eAdministrator views the details of all security servers.\u003c/h3\u003e\n      parameters:\n        - in: query\n          name: current_server\n          description: whether to only get the current server's identifier\n          required: false\n          schema:\n            default: false\n            type: boolean\n      responses:\n        '200':\n          description: list of SecurityServer objects\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of SecurityServer objects\n                items:\n                  $ref: '#/components/schemas/SecurityServer'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /security-servers/{id}:\n    get:\n      tags:\n        - security-servers\n      summary: get security server information\n      operationId: getSecurityServer\n      description: \u003ch3\u003eAdministrator views the details of a security server.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the security server\n          required: true\n          schema:\n            type: string\n            format: text\n            description: \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e:\u003csecurity_server_code\u003e\n            example: FI:GOV:123:sserver1\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SecurityServer'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /services/{id}:\n    get:\n      tags:\n        - services\n      summary: get service\n      operationId: getService\n      description: \u003ch3\u003eAdministrator views selected service.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the service\n          required: true\n          schema:\n            type: string\n            example: CS:ORG:Client:myService.v1\n            format: text\n            minLength: 1\n            maxLength: 1279\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    patch:\n      tags:\n        - services\n      summary: update service\n      operationId: updateService\n      description:\n        \u003ch3\u003eAdministrator updates the service.\u003c/h3\u003e\n        \u003cp\u003e\n          This endpoint can return a warnings response which can be ignored by setting \u003ccode\u003eServiceUpdate.ignore_warnings\u003c/code\u003e = true.\n          If \u003ccode\u003eServiceUpdate.ignore_warnings\u003c/code\u003e = false, it is possible to receive a warnings response from this endpoint if any one of the following conditions is true\n          \u003cul\u003e\n            \u003cli\u003eSSL authentication is set to true, but https connection to the service URL fails because SSL handshake fails\u003c/li\u003e\n            \u003cli\u003eSSL authentication is set to true, but https connection to the service URL fails because of other errors (e.g. host unreachable)\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/p\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the service\n          required: true\n          schema:\n            type: string\n            example: CS:ORG:Client:myService.v1\n            format: text\n            minLength: 1\n            maxLength: 1279\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceUpdate'\n      responses:\n        '200':\n          description: service modified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                warnings_response:\n                  $ref: '#/components/examples/UpdateServiceSslHandshakeWarningExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /services/{id}/endpoints:\n    post:\n      tags:\n        - services\n      summary: create endpoint\n      operationId: addEndpoint\n      description: \u003ch3\u003eAdministrator creates a new endpoint.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the service\n          required: true\n          schema:\n            type: string\n            example: CS:ORG:Client:myService.v1\n            format: text\n            minLength: 1\n            maxLength: 1279\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Endpoint'\n      responses:\n        '201':\n          description: endpoint added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Endpoint'\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n        '500':\n          description: internal server error\n  /services/{id}/service-clients:\n    get:\n      tags:\n        - services\n      summary: get service clients who have access rights for the selected service\n      operationId: getServiceServiceClients\n      description: \u003ch3\u003eAdministrator views service clients who have access to the given service.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the service\n          required: true\n          schema:\n            type: string\n            example: CS:ORG:Client:myService.v1\n            format: text\n            minLength: 1\n            maxLength: 1279\n      responses:\n        '200':\n          description: list of service clients\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of service client objects\n                items:\n                  $ref: '#/components/schemas/ServiceClient'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post:\n      tags:\n        - services\n      summary: add access rights to selected service for new ServiceClients\n      operationId: addServiceServiceClients\n      description: \u003ch3\u003eAdds access rights to selected service for new ServiceClients.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the service\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1279\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceClients'\n            examples:\n              id_array_example:\n                $ref: '#/components/examples/IdArrayExample'\n      responses:\n        '201':\n          description: access rights added\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of added service client objects\n                items:\n                  $ref: '#/components/schemas/ServiceClient'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /services/{id}/service-clients/delete:\n    post:\n      tags:\n        - services\n      summary: remove access to selected service from given ServiceClients\n      operationId: deleteServiceServiceClients\n      description: \u003ch3\u003eAdministrator removes access to selected service from given ServiceClients.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the service\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1279\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceClients'\n            examples:\n              id_array_example:\n                $ref: '#/components/examples/IdArrayExample'\n      responses:\n        '204':\n          description: access right(s) deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '500':\n          description: internal server error\n  /endpoints/{id}:\n    get:\n      tags:\n        - endpoints\n      summary: Get an endpoint by its id\n      operationId: getEndpoint\n      description:\n        \u003ch3\u003eAdministrator fetches an endpoint.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the endpoint\n          required: true\n          schema:\n            type: string\n            example: 102\n            format: text\n            minLength: 1\n      responses:\n        '200':\n          description: endpoint\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Endpoint'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    patch:\n      tags:\n        - endpoints\n      summary: Update an endpoint\n      operationId: updateEndpoint\n      description: \u003ch3\u003eAdministrator updates an endpoint.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the endpoint\n          required: true\n          schema:\n            type: string\n            example: 102\n            format: text\n            minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EndpointUpdate'\n      responses:\n        '200':\n          description: endpoint updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Endpoint'\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '500':\n          description: internal server error\n    delete:\n      tags:\n        - endpoints\n      summary: delete endpoint\n      operationId: deleteEndpoint\n      description:\n        \u003ch3\u003eAdministrator removes an endpoint.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: id of the endpoint\n          schema:\n            type: string\n            example: 102\n            format: text\n            minLength: 1\n      responses:\n        '204':\n          description: endpoint deleted\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /endpoints/{id}/service-clients:\n    get:\n      tags:\n        - endpoints\n      summary: get service clients who have access rights for the selected endpoint\n      operationId: getEndpointServiceClients\n      description:\n        \u003ch3\u003eAdministrator views endpoints access rights.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the endpoint\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      responses:\n        '200':\n          description: list of access rights\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of access right objects\n                items:\n                  $ref: '#/components/schemas/ServiceClient'\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post:\n      tags:\n        - endpoints\n      summary: add access rights for given service clients to the selected endpoint\n      operationId: addEndpointServiceClients\n      description:\n        \u003ch3\u003eAdministrator add access rights for a service clients to the selected endpoint.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the endpoint\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceClients'\n            examples:\n              id_array_example:\n                $ref: '#/components/examples/IdArrayExample'\n      responses:\n        '201':\n          description: access rights added\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of added service client objects\n                items:\n                  $ref: '#/components/schemas/ServiceClient'\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /endpoints/{id}/service-clients/delete:\n    post:\n      tags:\n        - endpoints\n      summary: remove access rights from specified service clients to the selected endpoint\n      operationId: deleteEndpointServiceClients\n      description:\n        \u003ch3\u003eAdministrator removes access rights from a service clients to an endpoint.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the endpoint\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        description: Service client to be removed\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceClients'\n            examples:\n              id_array_example:\n                $ref: '#/components/examples/IdArrayExample'\n      responses:\n        '204':\n          description: access right(s) deleted\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /service-descriptions/{id}:\n    get:\n      tags:\n        - service-descriptions\n      summary: get service description with provided id\n      operationId: getServiceDescription\n      description: \u003ch3\u003eAdministrator views a service description with a certain id.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the service description\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      responses:\n        '200':\n          description: wanted service description\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceDescription'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    patch:\n      tags:\n        - service-descriptions\n      summary: update url or service code for the selected service description\n      operationId: updateServiceDescription\n      description:\n        \u003ch3\u003eAdministrator updates the selected service description.\u003c/h3\u003e\n        \u003cp\u003e\n          This endpoint can also return metadata in the error response if updating the service description fails due to invalid URLs, already existing service description or already existing services.\n          If updating the service description fails due to an invalid service URL, the error response will have the error code \u003ccode\u003einvalid_service_url\u003c/code\u003e and the metadata will contain a list of invalid URLs.\n          If updating the service description fails due to an already existing service description, the error response will have the error code \u003ccode\u003eurl_already_exists\u003c/code\u003e and the metadata will contain the existing URL.\n          If updating the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the '409' response in this endpoint.\n        \u003c/p\u003e\n        \u003cp\u003e\n          This endpoint can return a warnings response which can be ignored by setting \u003ccode\u003eServiceDescriptionUpdate.ignore_warnings\u003c/code\u003e = true.\n          If \u003ccode\u003eServiceDescriptionUpdate.ignore_warnings\u003c/code\u003e = false, a warnings response will be returned if any one of the following conditions is true\n          \u003cul\u003e\n            \u003cli\u003eWSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either \u003ccode\u003ewsdl_validation_warnings\u003c/code\u003e or \u003ccode\u003eopenapi_validation_warnings\u003c/code\u003e)\u003c/li\u003e\n            \u003cli\u003eexisting services will be removed (warning code \u003ccode\u003edeleting_services\u003c/code\u003e and the warning metadata contains a list of service codes that will be removed)\u003c/li\u003e\n            \u003cli\u003enew services will be added (warning code \u003ccode\u003eadding_services\u003c/code\u003e and the warning metadata contains a list of service codes that will be added)\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/p\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the service description\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceDescriptionUpdate'\n      responses:\n        '200':\n          description: service description modified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceDescription'\n        '400':\n          description: there are warnings or errors related to the service description\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n                warnings_response:\n                  $ref: '#/components/examples/UpdateServiceDescriptionWarningExample'\n                validation_errors_response:\n                  $ref: '#/components/examples/ValidationErrorsExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description:\n            \u003ch3\u003eAn existing item already exists\u003c/h3\u003e\n            \u003cp\u003e\n              If there are existing WSDL services with the same name, the error response will include the existing services' names and the containing WSDL's URL in the metadata array.\n            \u003c/p\u003e\n            \u003cp\u003e\n              In this case the error code \u003ccode\u003eservice_already_exists\u003c/code\u003e (WSDL) or \u003ccode\u003eservice_code_already_exists\u003c/code\u003e (OPENAPI3) is used and the entries in the metadata array are ordered in following way\n              \u003cul\u003e\n                \u003cli\u003emetadata has a list of strings [C1,U1,C2,U2....Cn,Un] where\u003c/li\u003e\n                \u003cli\u003eC1 = duplicate service full code\u003c/li\u003e\n                \u003cli\u003eU1 = URL of the existing WSDL that has the duplicate\u003c/li\u003e\n              \u003c/ul\u003e\n            \u003c/p\u003e\n            \u003cstrong\u003eSee the example\u003c/strong\u003e\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ServiceDescriptionErrorWithMetadataExample'\n        '500':\n          description: internal server error\n    delete:\n      tags:\n        - service-descriptions\n      summary: delete service description\n      operationId: deleteServiceDescription\n      description: \u003ch3\u003eAdministrator deletes the service description.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the service description\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      responses:\n        '204':\n          description: service description deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /service-descriptions/{id}/disable:\n    put:\n      tags:\n        - service-descriptions\n      summary: disable selected service description\n      operationId: disableServiceDescription\n      description: \u003ch3\u003eAdministrator disables service description.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the service description\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceDescriptionDisabledNotice'\n      responses:\n        '204':\n          description: service description disabled\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /service-descriptions/{id}/enable:\n    put:\n      tags:\n        - service-descriptions\n      summary: enable selected service description\n      operationId: enableServiceDescription\n      description: \u003ch3\u003eAdministrator enables service description.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the service description\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      responses:\n        '204':\n          description: service description enabled\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /service-descriptions/{id}/refresh:\n    put:\n      tags:\n        - service-descriptions\n      summary: refresh selected service description\n      operationId: refreshServiceDescription\n      description:\n        \u003ch3\u003eAdministrator refreshes service description.\u003c/h3\u003e\n        \u003cp\u003e\n          This endpoint can also return metadata in the error response if refreshing the service description fails due to invalid URLs, already existing service description or already existing services.\n          If refreshing the service description fails due to an invalid service URL, the error response will have the error code \u003ccode\u003einvalid_service_url\u003c/code\u003e and the metadata will contain a list of invalid URLs.\n          If refreshing the service description fails due to an already existing service description, the error response will have the error code \u003ccode\u003eurl_already_exists\u003c/code\u003e and the metadata will contain the existing URL.\n          If refreshing the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the '409' response in this endpoint.\n        \u003c/p\u003e\n        \u003cp\u003e\n          This endpoint can return a warnings response which can be ignored by setting \u003ccode\u003eIgnoreWarnings.ignore_warnings\u003c/code\u003e = true.\n          If \u003ccode\u003eIgnoreWarnings.ignore_warnings\u003c/code\u003e = false, a warnings response will be returned if any one of the following conditions is true\n        \u003cul\u003e\n          \u003cli\u003eWSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either \u003ccode\u003ewsdl_validation_warnings\u003c/code\u003e or \u003ccode\u003eopenapi_validation_warnings\u003c/code\u003e)\u003c/li\u003e\n          \u003cli\u003eexisting services will be removed (warning code \u003ccode\u003edeleting_services\u003c/code\u003e and the warning metadata contains a list of service codes that will be removed)\u003c/li\u003e\n          \u003cli\u003enew services will be added (warning code \u003ccode\u003eadding_services\u003c/code\u003e and the warning metadata contains a list of service codes that will be added)\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/p\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the service description\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IgnoreWarnings'\n      responses:\n        '200':\n          description: service description refreshed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceDescription'\n        '400':\n          description: there are warnings or errors related to the service description\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n                warnings_response:\n                  $ref: '#/components/examples/RefreshServiceDescriptionWarningExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description:\n            \u003ch3\u003eAn existing item already exists\u003c/h3\u003e\n            \u003cp\u003e\n              If there are existing WSDL services with the same name, the error response will include the existing services' names and the containing WSDL's URL in the metadata array.\n            \u003c/p\u003e\n            \u003cp\u003e\n              In this case the error code \u003ccode\u003eservice_already_exists\u003c/code\u003e (WSDL) or \u003ccode\u003eservice_code_already_exists\u003c/code\u003e (OPENAPI3) is used and the entries in the metadata array are ordered in following way\n              \u003cul\u003e\n                \u003cli\u003emetadata has a list of strings [C1,U1,C2,U2....Cn,Un] where\u003c/li\u003e\n                \u003cli\u003eC1 = duplicate service full code\u003c/li\u003e\n                \u003cli\u003eU1 = URL of the existing WSDL that has the duplicate\u003c/li\u003e\n              \u003c/ul\u003e\n            \u003c/p\u003e\n            \u003cstrong\u003eSee the example\u003c/strong\u003e\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_metadata_response:\n                  $ref: '#/components/examples/ServiceDescriptionErrorWithMetadataExample'\n        '500':\n          description: internal server error\n  /service-descriptions/{id}/services:\n    get:\n      tags:\n        - service-descriptions\n      summary: get services for the selected service description\n      operationId: getServiceDescriptionServices\n      description: \u003ch3\u003eAdministrator views the services for the selected service description.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the service description\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      responses:\n        '200':\n          description: list of services\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of service objects\n                items:\n                  $ref: '#/components/schemas/Service'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /system/anchor:\n    get:\n      tags:\n        - system\n      summary: view the configuration anchor information\n      operationId: getAnchor\n      description: \u003ch3\u003eAdministrator views the configuration anchor information.\u003c/h3\u003e\n      responses:\n        '200':\n          description: anchor information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Anchor'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post:\n      tags:\n        - system\n      summary: Upload a new configuration anchor file when initializing a new security server.\n      operationId: uploadInitialAnchor\n      description:\n        \u003ch3\u003eAdministrator uploads a new configuration anchor file in the security server's initialization phase.\u003c/h3\u003e\n        \u003cp\u003e\n          Calls to this endpoint only succeed if a configuration anchor is not already found – meaning that \u003cb\u003ethis endpoint can only be used when initializing a new security server\u003c/b\u003e.\n          For updating the anchor for an already initialized security server use the \u003ccode\u003ePUT /system/anchor\u003c/code\u003e endpoint instead.\n        \u003c/p\u003e\n      requestBody:\n        description: configuration anchor\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: configuration anchor file\n      responses:\n        '201':\n          description: configuration anchor uploaded\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n    put:\n      tags:\n        - system\n      summary: Upload a configuration anchor file to replace an existing one.\n      operationId: replaceAnchor\n      description:\n        \u003ch3\u003eAdministrator uploads a configuration anchor file anytime after the Security Server has been initialized.\u003c/h3\u003e\n        \u003cp\u003e\n          \u003cb\u003eNote that this only works if there already exists an anchor that can be replaced.\u003c/b\u003e\n          When initalizing a new Security Server, use the endpoint \u003ccode\u003ePOST /system/anchor\u003c/code\u003e instead.\n        \u003c/p\u003e\n      requestBody:\n        description: configuration anchor\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: configuration anchor file\n      responses:\n        '201':\n          description: configuration anchor uploaded\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /system/anchor/previews:\n    post:\n      tags:\n        - system\n      summary: Read and the configuration anchor file and return the hash for a preview.\n      operationId: previewAnchor\n      description:\n        \u003ch3\u003eAdministrator wants to preview a configuration anchor file hash.\u003c/h3\u003e\n        \u003cp\u003eThe instance of the anchor is also validated unless the \u003ccode\u003evalidate_instance\u003c/code\u003e query parameter is explicitly set to false. The anchor will not be saved.\u003c/p\u003e\n      parameters:\n        - in: query\n          name: validate_instance\n          description: Whether or not to validate the owner instance of the anchor.\n            Set this to false explicitly when previewing an anchor in the security server initialization phase.\n            Default value is true if the parameter is omitted.\n          required: false\n          schema:\n            type: boolean\n            default: true\n      requestBody:\n        description: configuration anchor\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: configuration anchor file\n      responses:\n        '201':\n          description: configuration anchor uploaded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Anchor'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /system/anchor/download:\n    get:\n      tags:\n        - system\n      summary: download configuration anchor information\n      operationId: downloadAnchor\n      description: \u003ch3\u003eAdministrator downloads the configuration anchor information.\u003c/h3\u003e\n      responses:\n        '200':\n          description: configuration anchor\n          content:\n            application/xml:\n              schema:\n                type: string\n                format: binary\n                description: configuration anchor file\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /system/certificate:\n    get:\n      tags:\n        - system\n      summary: view the security server certificate information\n      operationId: getSystemCertificate\n      description: \u003ch3\u003eAdministrator views the security server TLS certificate information.\u003c/h3\u003e\n      responses:\n        '200':\n          description: certificate information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateDetails'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post:\n      tags:\n        - system\n      summary: generate a new internal TLS key and cert\n      operationId: generateSystemTlsKeyAndCertificate\n      description:\n        \u003ch3\u003eAdministrator generates new internal TLS key and certificate.\u003c/h3\u003e\n      responses:\n        '204':\n          description: tls key generated\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /system/certificate/export:\n    get:\n      tags:\n        - system\n      summary: download the security server certificate as gzip compressed tar archive\n      operationId: downloadSystemCertificate\n      description: \u003ch3\u003eAdministrator downloads the security server TLS certificate.\u003c/h3\u003e\n      responses:\n        '200':\n          description: information fetched successfully\n          content:\n            application/gzip:\n              schema:\n                type: string\n                format: binary\n                description: certificate file\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /system/certificate/csr:\n    post:\n      tags:\n        - system\n      summary: generate new certificate request\n      operationId: generateSystemCertificateRequest\n      description: \u003ch3\u003eAdministrator generates a new certificate request.\u003c/h3\u003e\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DistinguishedName'\n      responses:\n        '201':\n          description: created CSR\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n                description: csr file\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /system/certificate/import:\n    post:\n      tags:\n        - system\n      summary: import new internal TLS certificate.\n      operationId: importSystemCertificate\n      description: \u003ch3\u003eAdministrator imports a new internal TLS certificate\u003c/h3\u003e\n      requestBody:\n        description: certificate to add\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: certificate file\n      responses:\n        '200':\n          description: tls certificate imported\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateDetails'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /certificate-authorities:\n    get:\n      tags:\n        - certificate-authorities\n      summary: view the approved certificate authorities\n      operationId: getApprovedCertificateAuthorities\n      description: \u003ch3\u003eAdministrator views the approved certificate authorities.\u003c/h3\u003e\n      parameters:\n        - in: query\n          name: key_usage_type\n          description: return only CAs suitable for this type of key usage\n          required: false\n          schema:\n            $ref: '#/components/schemas/KeyUsageType'\n        - in: query\n          name: include_intermediate_cas\n          description: if true, include also intermediate CAs. Otherwise only top CAs are included. Default value is \"false\".\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: list of approved certificate authorities\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of certificate authority objects\n                items:\n                  $ref: '#/components/schemas/CertificateAuthority'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /certificate-authorities/{ca_name}/csr-subject-fields:\n    get:\n      tags:\n        - certificate-authorities\n      summary: get description of subject DN fields for CSR\n      operationId: getSubjectFieldDescriptions\n      description: \u003ch3\u003eList DN field descriptions to collect CSR parameters\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: ca_name\n          description: common name of the CA\n          example: X-Road Test CA CN\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n        - in: query\n          name: key_id\n          description: id of the key. If provided, used only for validating correct key usage\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 1\n        - in: query\n          name: key_usage_type\n          description: which usage type this CSR is for\n          required: true\n          schema:\n            $ref: '#/components/schemas/KeyUsageType'\n        - in: query\n          name: member_id\n          description: member client id for signing CSRs. \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e\n          example: FI:GOV:123\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 767\n        - in: query\n          name: is_new_member\n          description: whether or not the member in the member_id parameter is a new member\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: csr subject field objects\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of CsrSubjectFieldDescription objects\n                items:\n                  $ref: '#/components/schemas/CsrSubjectFieldDescription'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /system/timestamping-services:\n    get:\n      tags:\n        - system\n      summary: view the configured timestamping services\n      operationId: getConfiguredTimestampingServices\n      description: \u003ch3\u003eAdministrator views the configured timestamping services.\u003c/h3\u003e\n      responses:\n        '200':\n          description: list of configured timestamping services\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of timestamping service objects\n                items:\n                  $ref: '#/components/schemas/TimestampingService'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post:\n      tags:\n        - system\n      summary: add a configured timestamping service\n      operationId: addConfiguredTimestampingService\n      description: \u003ch3\u003eAdministrator selects a new timestamping service.\u003c/h3\u003e\n      requestBody:\n        description: Timestamping service to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TimestampingService'\n      responses:\n        '201':\n          description: timestamping service created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TimestampingService'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /system/timestamping-services/delete:\n    post:\n      tags:\n        - system\n      summary: delete configured timestamping service\n      operationId: deleteConfiguredTimestampingService\n      description: \u003ch3\u003eAdministrator removes a configured timestamping service.\u003c/h3\u003e\n      requestBody:\n        description: Timestamping service to delete\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TimestampingService'\n      responses:\n        '204':\n          description: timestamping service deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /system/node-type:\n    get:\n      tags:\n        - system\n      summary: get the node type\n      operationId: getNodeType\n      description: \u003ch3\u003eAdministrator views the node type\u003c/h3\u003e\n      responses:\n        '200':\n          description: node type information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeTypeResponse'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '500':\n          description: internal server error\n  /system/version:\n    get:\n      tags:\n        - system\n      summary: get information for the system version\n      operationId: systemVersion\n      description: \u003ch3\u003eAdministrator views the system version details.\u003c/h3\u003e\n      responses:\n        '200':\n          description: system version information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VersionInfo'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /timestamping-services:\n    get:\n      tags:\n        - timestamping-services\n      summary: view the approved timestamping services\n      operationId: getApprovedTimestampingServices\n      description: \u003ch3\u003eAdministrator views the approved timestamping services.\u003c/h3\u003e\n      responses:\n        '200':\n          description: list of approved timestamping services\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of timestamping service objects\n                items:\n                  $ref: '#/components/schemas/TimestampingService'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n\n  /tokens:\n    get:\n      tags:\n        - tokens\n      summary: get security server tokens\n      operationId: getTokens\n      description: \u003ch3\u003eAdministrator views tokens of the security server.\u003c/h3\u003e\n      responses:\n        '200':\n          description: list of tokens\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of token objects\n                items:\n                  $ref: '#/components/schemas/Token'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /tokens/{id}:\n    get:\n      tags:\n        - tokens\n      summary: get security server token information\n      operationId: getToken\n      description: \u003ch3\u003eAdministrator views the token details of the security server.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the token\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      responses:\n        '200':\n          description: token object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    patch:\n      tags:\n        - tokens\n      summary: update security server token information\n      operationId: updateToken\n      description: \u003ch3\u003eAdministrator updates the token information.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the token\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenName'\n      responses:\n        '200':\n          description: token modified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /tokens/{id}/pin:\n    put:\n      tags:\n        - tokens\n      summary: update security server software token pin code\n      operationId: updateTokenPin\n      description:\n        \u003ch3\u003eAdministrator updates the software token pin code.\u003c/h3\u003e\n        \u003cp\u003eThis operation supports updating the pin code of a software token only.\u003c/p\u003e\n        \u003cp\u003e\n          This endpoint can also return metadata in the error response. The metadata array can contain error messages about why the init did not succeed.\n          If the pin code is too weak, the error code \u003ccode\u003eweak_pin\u003c/code\u003e is used and the entries in the metadata array are always ordered in following way\n          \u003cul\u003e\n            \u003cli\u003emetadata has a list of strings [\"pin_min_length\", x, \"pin_min_char_classes_count\", y] where\u003c/li\u003e\n            \u003cli\u003ex = the minimum length of the pin code\u003c/li\u003e\n            \u003cli\u003ey = the minimum amount of character classes (e.g. uppercase, number, special characters) to be used in the pin code\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/p\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the software token\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenPinUpdate'\n      responses:\n        '204':\n          description: software token pin updated\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_weak_pin:\n                  $ref: '#/components/examples/ErrorWeakPinMetadataExample'\n                validation_errors_response:\n                  $ref: '#/components/examples/ValidationErrorsExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /tokens/{id}/keys-with-csrs:\n    post:\n      tags:\n        - tokens\n      summary: add a new key and generate a csr for it\n      operationId: addKeyAndCsr\n      description:\n        \u003ch3\u003eAdministrator adds a new key and generates a csr for it.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the token\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/KeyLabelWithCsrGenerate'\n            examples:\n              key_label_csr_example:\n                $ref: '#/components/examples/KeyLabelWithCsrGenerateExample'\n      responses:\n        '201':\n          description: key created for the token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/KeyWithCertificateSigningRequestId'\n        '400':\n          description: request was invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorInfo'\n              examples:\n                error_response:\n                  $ref: '#/components/examples/ErrorExample'\n                error_metadata_response:\n                  $ref: '#/components/examples/ErrorWithMetadataExample'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists or token not logged in\n        '500':\n          description: internal server error\n  /tokens/{id}/keys:\n    post:\n      tags:\n        - tokens\n      summary: add new key\n      operationId: addKey\n      description: \u003ch3\u003eAdds key for selected token.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the token\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/KeyLabel'\n      responses:\n        '201':\n          description: key created for the token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Key'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists or token not logged in\n        '500':\n          description: internal server error\n  /tokens/{id}/login:\n    put:\n      tags:\n        - tokens\n      summary: login to token\n      operationId: loginToken\n      description: \u003ch3\u003eAdministrator logs in to a token\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the token\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenPassword'\n      responses:\n        '200':\n          description: logged in\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /tokens/{id}/logout:\n    put:\n      tags:\n        - tokens\n      summary: logout from token\n      operationId: logoutToken\n      description: \u003ch3\u003eAdministrator logs out from token.\u003c/h3\u003e\n      parameters:\n        - in: path\n          name: id\n          description: id of the token\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      responses:\n        '200':\n          description: logged out\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /xroad-instances:\n    get:\n      tags:\n        - xroad-instances\n      summary: get list of known xroad instance identifiers\n      operationId: getXroadInstances\n      description: \u003ch3\u003eAdministrator lists xroad instance identifiers\u003c/h3\u003e\n      responses:\n        '200':\n          description: xroad instance identifiers\n          content:\n            application/json:\n              schema:\n                type: array\n                description: array of xroad instance identifiers\n                uniqueItems: true\n                items:\n                  type: string\n                  format: text\n                  minLength: 1\n                  maxLength: 255\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\ncomponents:\n  examples:\n    SignCsrGenerateExample:\n      summary: Sign CSR generate request body example\n      value:\n        key_usage_type: SIGNING\n        ca_name: Customized Test CA CN\n        csr_format: DER\n        member_id: CS:NIIS:1234\n        subject_field_values:\n          CN: something.niis.org\n          C: FI\n          O: NIIS\n          serialNumber: CS/SS1/NIIS\n    AuthCsrGenerateExample:\n      summary: Auth CSR generate request body example\n      value:\n        key_usage_type: AUTHENTICATION\n        ca_name: Customized Test CA CN\n        csr_format: PEM\n        subject_field_values:\n          CN: something.niis.org\n          C: FI\n          O: NIIS\n          L: Helsinki\n          OU: Development\n          serialNumber: CS/SS1/NIIS\n    KeyLabelWithCsrGenerateExample:\n      summary: Key label and CSR generate request body example 1\n      value:\n        key_label: My new key\n        csr_generate_request:\n          key_usage_type: SIGNING\n          ca_name: Customized Test CA CN\n          csr_format: DER\n          member_id: CS:NIIS:1234\n          subject_field_values:\n            CN: something.niis.org\n            C: FI\n            O: NIIS\n            serialNumber: CS/SS1/NIIS\n    IdArrayExample:\n      summary: Id array request body example\n      value:\n        items:\n          - DEV:ORG:1234:Subsystem\n          - DEV:security-server-owners\n          - \"123\"\n    ErrorExample:\n      summary: Error response body example\n      value:\n        status: 400\n        error:\n          code: invalid_filename\n    ErrorWithMetadataExample:\n      summary: Error with metadata response body example\n      value:\n        status: 400\n        error:\n          code: invalid_service_url\n          metadata:\n            - \"sftp://some.sftp.server\"\n    ErrorInvalidInitParamsMetadataExample:\n      summary: Initialization error with metadata\n      value:\n        status: 400\n        error:\n          code: invalid_init_params\n          metadata:\n            - \"server_code_not_provided\"\n            - \"member_class_not_provided\"\n            - \"member_code_not_provided\"\n            - \"pin_code_not_provided\"\n    ErrorWeakPinMetadataExample:\n      summary: Initialization or pin change error with metadata when the provided pin is too weak\n      value:\n        status: 400\n        error:\n          code: weak_pin\n          metadata:\n            - \"pin_min_length\"\n            - \"8\"\n            - \"pin_min_char_classes_count\"\n            - \"3\"\n    ServiceDescriptionErrorWithMetadataExample:\n      summary: Error when adding a service description and some duplicate services already exist\n      value:\n        status: 409\n        error:\n          code: service_already_exists\n          metadata:\n            - duplicateService.v1\n            - http://xroad-lxd-cs.lxd/duplicate1.wsdl\n            - anotherDuplicateService.v1\n            - http://xroad-lxd-cs.lxd/duplicate1.wsdl\n            - yetAnotherDuplicateService.v1\n            - http://xroad-lxd-cs.lxd/someOtherWsdl.wsdl\n    ValidationErrorsExample:\n      summary: Validation errors response body example\n      value:\n        status: 400\n        error:\n          code: validation_failure\n          validation_errors:\n            \"clientAdd.client.memberCode\":\n              - NoPercent\n            \"clientAdd.client.subsystemCode\":\n              - NoPercent\n              - NoBackslashes\n    RefreshServiceDescriptionWarningExample:\n      summary: Warning response when refreshing a service description adds or removes services\n      value:\n        status: 400\n        error:\n          code: warnings_detected\n        warnings:\n          - code: adding_services\n            metadata:\n              - \"newService.v1\"\n              - \"anotherNewService.v1\"\n          - code: deleting_services\n            metadata:\n              - \"someOldService.v1\"\n    UploadExistingBackupWarningExample:\n      summary: Warning response when uploading a new backup configuration file with an existing name\n      value:\n        status: 400\n        error:\n          code: warnings_detected\n        warnings:\n          - code: warning_file_already_exists\n            metadata:\n              - conf_backup_20201006-094932.tar\n    AddUnregisteredMemberWarningExample:\n      summary: Warning response when adding a new member that has not been registered in central server\n      value:\n        status: 400\n        error:\n          code: warnings_detected\n        warnings:\n          - code: unregistered_member\n            metadata:\n              - CS/ORG/NON_EXISTING_CODE\n    AddServiceDescriptionWarningExample:\n      summary: Add service description warning example. The warnings metadata contains the output from the validator's\n        error stream.\n      value:\n        status: 400\n        error:\n          code: warnings_detected\n        warnings:\n          - code: wsdl_validation_warnings\n            metadata:\n              - Validation failed because of...\n    InitializationWarningExample:\n      summary: All initialization warnings example.\n      value:\n        status: 400\n        error:\n          code: warnings_detected\n        warnings:\n          - code: init_server_id_exists\n            metadata:\n              - CS/ORG/123/SS1\n          - code: init_unregistered_member\n            metadata:\n              - CS/ORG/123\n          - code: init_servercode_exists\n          - code: init_server_owner_exists\n          - code: init_software_token_initialized\n    DeleteKeyWarningExample:\n      summary: Warning response when trying to delete an authentication key with a registered authentication certificate\n      value:\n        status: 400\n        error:\n          code: warnings_detected\n        warnings:\n          - code: auth_key_with_registered_cert_warning\n            metadata:\n              - 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF\n    UpdateServiceSslHandshakeWarningExample:\n      summary: Warning response when trying to update a service with HTTPS set to \"true\" but the SSL handshake fails.\n      value:\n        status: 400\n        error:\n          code: warnings_detected\n        warnings:\n          - code: internal_server_ssl_handshake_error\n    UpdateServiceDescriptionWarningExample:\n      summary: Warning response when updating a service description adds or removes services\n      value:\n        status: 400\n        error:\n          code: warnings_detected\n        warnings:\n          - code: adding_services\n            metadata:\n              - \"newService.v1\"\n              - \"anotherNewService.v1\"\n          - code: deleting_services\n            metadata:\n              - \"someOldService.v1\"\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: Authorization\n      description: X-Road-ApiKey token=\u003capi key\u003e\n      # https://github.com/nordic-institute/X-Road-REST-UI/blob/XRDDEV-237/doc/Manuals/ug-ss_x-road_6_security_server_user_guide.md#1911-creating-new-api-keys\n  schemas:\n    AccessRight:\n      type: object\n      description: access right given for a specific subject (ServiceClient) for specific service (service_code) owned by some client. This object does not represent endpoint-level access rights\n      required:\n        - service_code\n      properties:\n        service_code:\n          type: string\n          format: text\n          description: service code\n          example: clientDeletion\n          minLength: 1\n          maxLength: 255\n        service_title:\n          type: string\n          readOnly: true\n          format: text\n          description: service title\n          example: client deletion\n          minLength: 1\n          maxLength: 255\n        rights_given_at:\n          type: string\n          format: date-time\n          description: access right given at\n          example: '2018-12-15T00:00:00.001Z'\n          readOnly: true\n    AccessRights:\n      type: object\n      description: object containing and array of AccessRights\n      properties:\n        items:\n          type: array\n          uniqueItems: true\n          description: array of AccessRights\n          items:\n            $ref: '#/components/schemas/AccessRight'\n    AddOnStatus:\n      type: object\n      description: addon module statuses\n      required:\n        - messagelog_enabled\n      properties:\n        messagelog_enabled:\n          type: boolean\n          readOnly: true\n    BackupEncryptionStatus:\n      type: object\n      description: backup encryption statuses\n      required:\n        - backup_encryption_status\n      properties:\n        backup_encryption_status:\n          type: boolean\n          readOnly: true\n        backup_encryption_keys:\n          type: array\n          items:\n            type: string\n            format: text\n    MessageLogEncryptionStatus:\n      type: object\n      description: message log encryption statuses\n      required:\n        - message_log_archive_encryption_status\n        - message_log_database_encryption_status\n        - message_log_grouping_rule\n      properties:\n        message_log_archive_encryption_status:\n          type: boolean\n          readOnly: true\n        message_log_database_encryption_status:\n          type: boolean\n          readOnly: true\n        message_log_grouping_rule:\n          type: string\n          readOnly: true\n        members:\n          type: array\n          items:\n            $ref: '#/components/schemas/MessageLogArchiveEncryptionMember'\n    MessageLogArchiveEncryptionMember:\n      type: object\n      description: message log archive encryption member\n      required:\n        - member_id\n      properties:\n        member_id:\n          type: string\n          readOnly: true\n        keys:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n            format: text\n          readOnly: true\n        default_key_used:\n          type: boolean\n          readOnly: true\n    Anchor:\n      type: object\n      description: security server anchor\n      required:\n        - hash\n        - created_at\n      properties:\n        hash:\n          type: string\n          format: hash\n          description: anchor hash\n          example: 42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3\n          minLength: 1\n          maxLength: 255\n        created_at:\n          type: string\n          format: date-time\n          description: anchor created at\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n    Backup:\n      type: object\n      description: security server backup\n      required:\n        - filename\n        - created_at\n      properties:\n        filename:\n          type: string\n          format: filename\n          description: backup filename\n          example: configuration_backup_20181224.tar\n          minLength: 1\n          maxLength: 255\n        created_at:\n          type: string\n          format: date-time\n          description: backup created at\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n    BackupExt:\n      type: object\n      description: security server backup with extra information\n      required:\n        - backup\n        - local_conf_present\n      properties:\n        backup:\n          $ref: '#/components/schemas/Backup'\n        local_conf_present:\n          type: boolean\n    BackupArchive:\n      type: object\n      description: security server backup archive file\n      properties:\n        file:\n          type: string\n          format: binary\n    TokenCertificateSigningRequest:\n      type: object\n      description: CSR for certificate that is stored in a Token. Also includes the possible actions that can be\n        done to this object, e.g DELETE (only for csr related operations and does not consider user authorization).\n      required:\n        - id\n        - owner_id\n        - possible_actions\n      properties:\n        id:\n          type: string\n          format: text\n          description: CSR id\n          example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF\n          readOnly: true\n        owner_id:\n          type: string\n          format: text\n          description: client id of the owner member, \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e\n          example: FI:GOV:123\n          minLength: 1\n          maxLength: 767\n          readOnly: true\n        possible_actions:\n          $ref: '#/components/schemas/PossibleActions'\n    TokenCertificate:\n      type: object\n      description: Certificate that is stored in a Token (auth or sign cert). Also includes the possible actions\n        that can be done to this object, e.g DELETE (only for cert related operations and does not consider\n        user authorization).\n      required:\n        - ocsp_status\n        - owner_id\n        - active\n        - saved_to_configuration\n        - certificate_details\n        - status\n      properties:\n        ocsp_status:\n          $ref: '#/components/schemas/CertificateOcspStatus'\n        owner_id:\n          type: string\n          format: text\n          description: client id of the owner member, \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e\n          example: FI:GOV:123\n          minLength: 1\n          maxLength: 767\n          readOnly: true\n        active:\n          type: boolean\n          description: if the certificate is active\n          example: true\n        saved_to_configuration:\n          type: boolean\n          description: if the certificate is saved to configuration\n          example: true\n        certificate_details:\n          $ref: '#/components/schemas/CertificateDetails'\n        status:\n          $ref: '#/components/schemas/CertificateStatus'\n        possible_actions:\n          $ref: '#/components/schemas/PossibleActions'\n    OcspResponderDiagnostics:\n      type: object\n      description: Ocsp responder diagnostics\n      required:\n        - distinguished_name\n        - ocsp_responders\n      properties:\n        distinguished_name:\n          type: string\n          format: text\n          description: CA distinguished name\n          example: C=FI, O=X-Road Test, OU=X-Road Test CA OU, CN=X-Road Test CA CN\n          minLength: 1\n          maxLength: 255\n          readOnly: true\n        ocsp_responders:\n          type: array\n          readOnly: true\n          items:\n            $ref: '#/components/schemas/OcspResponder'\n    CertificateDetails:\n      type: object\n      description: certificate details for any kind of certificate (TLS, auth, sign)\n      required:\n        - issuer_distinguished_name\n        - issuer_common_name\n        - subject_distinguished_name\n        - subject_common_name\n        - not_before\n        - not_after\n        - serial\n        - version\n        - signature_algorithm\n        - signature\n        - public_key_algorithm\n        - rsa_public_key_modulus\n        - rsa_public_key_exponent\n        - hash\n        - key_usages\n        - subject_alternative_names\n      properties:\n        issuer_distinguished_name:\n          type: string\n          format: text\n          description: certificate issuer distinguished name\n          example: issuer123\n          minLength: 1\n          maxLength: 255\n        issuer_common_name:\n          type: string\n          format: text\n          description: certificate issuer common name\n          example: domain.com\n          minLength: 1\n          maxLength: 255\n        subject_distinguished_name:\n          type: string\n          format: text\n          description: certificate subject distinguished name\n          example: subject123\n          minLength: 1\n          maxLength: 255\n        subject_common_name:\n          type: string\n          format: text\n          description: certificate subject common name\n          example: domain.com\n          minLength: 1\n          maxLength: 255\n        not_before:\n          type: string\n          format: date-time\n          description: certificate validity not before\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n        not_after:\n          type: string\n          format: date-time\n          description: certificate validity not after\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n        serial:\n          type: string\n          format: text\n          description: serial number\n          example: '123456789'\n          minLength: 1\n          maxLength: 255\n        version:\n          type: integer\n          format: int32\n          example: 3\n          description: version\n        signature_algorithm:\n          type: string\n          format: sha-256\n          description: certificate signature algorithm\n          example: sha256WithRSAEncryption\n          minLength: 1\n          maxLength: 255\n        signature:\n          type: string\n          format: text\n          description: hex encoded certificate signature\n          example: '30af2fdc1780...'\n          minLength: 1\n          maxLength: 255\n        public_key_algorithm:\n          type: string\n          format: sha-256\n          description: certificate public key algorithm\n          example: 'sha256WithRSAEncryption'\n          minLength: 1\n          maxLength: 255\n        rsa_public_key_modulus:\n          type: string\n          format: hex\n          description: hex encoded RSA public key modulus (if RSA key)\n          example: c44421d601...\n          minLength: 1\n          maxLength: 1000\n        rsa_public_key_exponent:\n          type: integer\n          format: int32\n          description: RSA public key exponent (if RSA key) as an integer\n          example: 65537\n        hash:\n          type: string\n          format: text\n          description: certificate SHA-1 hash\n          example: 1234567890ABCDEF\n          minLength: 1\n          maxLength: 40\n        key_usages:\n          type: array\n          description: certificate key usage array\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/KeyUsage'\n        subject_alternative_names:\n          type: string\n          format: text\n          description: certificate subject alternative names\n          example: DNS:*.example.org\n          minLength: 1\n          maxLength: 1000\n    CertificateAuthority:\n      type: object\n      description: approved certificate authority information. Only for top CAs.\n      required:\n        - name\n        - subject_distinguished_name\n        - issuer_distinguished_name\n        - ocsp_response\n        - not_after\n        - top_ca\n        - path\n        - authentication_only\n      properties:\n        name:\n          type: string\n          format: text\n          description: name of the CA, as defined in global conf. Used also as an identifier\n          example: X-Road Test CA CN\n          minLength: 1\n          maxLength: 255\n        subject_distinguished_name:\n          type: string\n          format: text\n          description: subject distinguished name\n          example: C=FI, O=X-Road Test, OU=X-Road Test CA OU, CN=X-Road Test CA CN\n          minLength: 1\n          maxLength: 1024\n        issuer_distinguished_name:\n          type: string\n          format: text\n          description: issuer distinguished name\n          example: C=FI, O=X-Road Test, OU=X-Road Test CA OU, CN=X-Road Test CA CN\n          minLength: 1\n          maxLength: 1024\n        ocsp_response:\n          $ref: '#/components/schemas/CertificateAuthorityOcspResponse'\n        not_after:\n          type: string\n          format: date-time\n          description: certificate authority expires at\n          example: '2099-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n        top_ca:\n          type: boolean\n          description: if the certificate authority is top CA (instead of intermediate)\n          example: true\n        path:\n          type: string\n          format: text\n          description: encoded path string from this CA to top CA\n          example: C=FI, O=X-Road Test Intermediate, OU=X-Road Test CA OU, CN=X-Road Test CA CN Intermediate:C=FI, O=X-Road Test, OU=X-Road Test CA OU, CN=X-Road Test CA CN\n          minLength: 1\n        authentication_only:\n          type: boolean\n          description: if certificate authority is limited for authentication use only\n    CertificateStatus:\n      type: string\n      format: enum\n      description: certificate status\n      example: IN_USE\n      enum:\n        - SAVED\n        - REGISTRATION_IN_PROGRESS\n        - REGISTERED\n        - DELETION_IN_PROGRESS\n        - GLOBAL_ERROR\n    CertificateAuthorityOcspResponse:\n      type: string\n      format: enum\n      description: certificate authority OCSP status\n      example: IN_USE\n      enum:\n        - NOT_AVAILABLE\n        - OCSP_RESPONSE_UNKNOWN\n        - OCSP_RESPONSE_GOOD\n        - OCSP_RESPONSE_SUSPENDED\n        - OCSP_RESPONSE_REVOKED\n    CertificateOcspStatus:\n      type: string\n      format: enum\n      description: certificate status\n      example: IN_USE\n      enum:\n        - DISABLED\n        - EXPIRED\n        - OCSP_RESPONSE_UNKNOWN\n        - OCSP_RESPONSE_GOOD\n        - OCSP_RESPONSE_SUSPENDED\n        - OCSP_RESPONSE_REVOKED\n    DistinguishedName:\n      type: object\n      properties:\n        name:\n          type: string\n          format: text\n          description: distinguished name\n          example: C=FI, O=X-Road Test, OU=X-Road Test CA OU, CN=X-Road Test CA CN\n          minLength: 1\n          maxLength: 255\n    PossibleActions:\n      type: array\n      description: array containing the possible actions that can be done for this item\n      items:\n        $ref: '#/components/schemas/PossibleAction'\n    PossibleAction:\n      type: string\n      format: enum\n      description: an action to change state or edit token, key, cert or csr\n      example: DELETE\n      enum:\n        - DELETE\n        - ACTIVATE\n        - DISABLE\n        - LOGIN\n        - LOGOUT\n        - REGISTER\n        - UNREGISTER\n        - IMPORT_FROM_TOKEN\n        - GENERATE_KEY\n        - EDIT_FRIENDLY_NAME\n        - GENERATE_AUTH_CSR\n        - GENERATE_SIGN_CSR\n        - TOKEN_CHANGE_PIN\n    Client:\n      type: object\n      description: x-road client\n      required:\n        - member_class\n        - member_code\n      properties:\n        id:\n          type: string\n          format: text\n          description: \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e:\u003csubsystem\u003e(optional).\n            Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters\n          example: FI:GOV:123:ABC\n          minLength: 1\n          maxLength: 1023\n          readOnly: true\n        instance_id:\n          type: string\n          format: text\n          description: Xroad instance id. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters\n          example: FI\n          minLength: 1\n          maxLength: 255\n          readOnly: true\n        member_name:\n          type: string\n          format: text\n          description: Member name. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters\n          example: FI\n          readOnly: true\n          minLength: 1\n          maxLength: 255\n        member_class:\n          type: string\n          format: text\n          description: Member class. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters\n          example: GOV\n          minLength: 1\n          maxLength: 255\n        member_code:\n          type: string\n          format: text\n          description: Member code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters\n          example: 123\n          minLength: 1\n          maxLength: 255\n        subsystem_code:\n          type: string\n          format: text\n          description: Subsystem code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters\n          example: ABC\n          minLength: 1\n          maxLength: 255\n        owner:\n          type: boolean\n          description: if this client is the owner member of this security server\n          example: false\n          readOnly: true\n        has_valid_local_sign_cert:\n          type: boolean\n          description: if this client has a valid (registered and with good OCSP response) sign cert stored on this security server\n          example: false\n          readOnly: true\n        connection_type:\n          $ref: '#/components/schemas/ConnectionType'\n        status:\n          $ref: '#/components/schemas/ClientStatus'\n    ClientAdd:\n      type: object\n      description: Request to add client. Carries a Client and ignore warnings parameter\n      required:\n        - client\n      properties:\n        client:\n          $ref: '#/components/schemas/Client'\n        ignore_warnings:\n          type: boolean\n          default: false\n          description: if true, any ignorable warnings are ignored. if false (or missing),\n            any warnings cause request to fail\n    ClientStatus:\n      type: string\n      format: enum\n      description: client status\n      example: REGISTERED\n      readOnly: true\n      enum:\n        - REGISTERED\n        - SAVED\n        - GLOBAL_ERROR\n        - REGISTRATION_IN_PROGRESS\n        - DELETION_IN_PROGRESS\n    ConfigurationStatus:\n      type: string\n      format: enum\n      description: configuration status\n      example: SUCCESS\n      enum:\n        - SUCCESS # Everything ok\n        - ERROR_CODE_INTERNAL # Internal error occurred.\n        - ERROR_CODE_INVALID_SIGNATURE_VALUE # Invalid signature value.\n        - ERROR_CODE_EXPIRED_CONF # The downloaded global configuration has expired.\n        - ERROR_CODE_CANNOT_DOWNLOAD_CONF # Unable to download global configuration. Check network connection to global configuration provider.\n        - ERROR_CODE_MISSING_PRIVATE_PARAMS # The downloaded global configuration did not contain private parameters\n        - ERROR_CODE_UNINITIALIZED # The configuration client is initializing.\n        - UNKNOWN\n    CodeWithDetails:\n      type: object\n      description: object that contains a code identifier and possibly collection of\n        associated metadata or validation errors. Used to relay error and warning information.\n      required:\n        - code\n      properties:\n        code:\n          type: string\n          format: text\n          description: identifier of the item (for example errorcode)\n          example: adding_services\n        metadata:\n          type: array\n          description: array containing metadata associated with the item. For example names of services\n            were attempted to add, but failed\n          items:\n            type: string\n            format: text\n        validation_errors:\n          description: A dictionary object that contains validation errors bound to their respected fields. The key\n            represents the field where the validation error has happened and the value is a list of validation errors\n          type: object\n          additionalProperties: # https://swagger.io/docs/specification/data-models/dictionaries/\n            type: array\n            description: Array containing the validation errors of a field. The possible validation error values\n              are listed in the X-Road User Guide\n            items:\n              type: string\n              format: text\n          example:\n            clientAdd.client.memberCode: [\"NoPercent\"]\n            clientAdd.client.subsystemCode: [\"NoPercent\", \"NoBackslashes\"]\n    ConnectionType:\n      type: string\n      format: enum\n      description: connection type\n      example: HTTP\n      default: HTTPS\n      enum:\n        - HTTP\n        - HTTPS\n        - HTTPS_NO_AUTH\n    ConnectionTypeWrapper:\n      type: object\n      description: connection type\n      properties:\n        connection_type:\n          $ref: '#/components/schemas/ConnectionType'\n    CsrFormat:\n      type: string\n      format: enum\n      description: format of the certificate signing request (PEM or DER)\n      example: PEM\n      default: PEM\n      enum:\n        - PEM\n        - DER\n    CsrGenerate:\n      type: object\n      description: request to generate a CSR\n      required:\n        - key_usage_type\n        - ca_name\n        - csr_format\n        - subject_field_values\n      properties:\n        key_usage_type:\n          $ref: '#/components/schemas/KeyUsageType'\n        ca_name:\n          type: string\n          format: text\n          description: common name of the CA\n          example: X-Road Test CA CN\n          minLength: 1\n          maxLength: 255\n        csr_format:\n          $ref: '#/components/schemas/CsrFormat'\n        member_id:\n          type: string\n          format: text\n          description: member client id for signing CSRs. \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e\n          example: FI:GOV:123\n          minLength: 1\n          maxLength: 767\n        subject_field_values:\n          type: object\n          description: user-provided values for subject DN parameters\n          additionalProperties:\n            type: string\n    CsrSubjectFieldDescription:\n      type: object\n      description: object describing input fields for CSR subject DN info\n      required:\n        - id\n        - localized\n        - read_only\n        - required\n      properties:\n        id:\n          type: string\n          format: text\n          description: the identifier of the field (such as 'O', 'OU' etc)\n          example: O\n          minLength: 1\n          readOnly: true\n        label:\n          type: string\n          format: text\n          description: label of the field, used to display the field in the user interface\n          example: ORGANIZATION_NAME\n          minLength: 1\n          readOnly: true\n        label_key:\n          type: string\n          format: text\n          description: localization key for label of the field, used to display the field in the user interface\n          example: Organization name (O)\n          minLength: 1\n          readOnly: true\n        default_value:\n          type: string\n          format: text\n          description: the default value of the field. Can be empty.\n          example: 1234\n          minLength: 0\n          readOnly: true\n        read_only:\n          type: boolean\n          description: if this field is read-only\n          example: true\n          readOnly: true\n        required:\n          type: boolean\n          description: if this field is required to be filled\n          example: true\n          readOnly: true\n        localized:\n          type: boolean\n          description: if true, label key is in property \"label_key\". If false, actual label is in property \"label\"\n          example: true\n          readOnly: true\n    DiagnosticStatusClass:\n      type: string\n      format: enum\n      description: diagnostics status class\n      example: OK\n      enum:\n        - OK\n        - WAITING\n        - FAIL\n    ErrorInfo:\n      type: object\n      description: object returned in error cases\n      required:\n        - status\n      properties:\n        status:\n          type: integer\n          format: int32\n          description: http status code\n          example: 400\n        error:\n          $ref: '#/components/schemas/CodeWithDetails'\n        warnings:\n          type: array\n          description: warnings that could be ignored\n          items:\n            $ref: '#/components/schemas/CodeWithDetails'\n    InitialServerConf:\n      type: object\n      description: security server initial configuration\n      properties:\n        owner_member_class:\n          type: string\n          format: text\n          description: member class\n          example: GOV\n          minLength: 1\n          maxLength: 255\n        owner_member_code:\n          type: string\n          format: text\n          description: member code\n          example: 12345678-9\n          minLength: 1\n          maxLength: 255\n        security_server_code:\n          type: string\n          format: text\n          description: security server code\n          example: SS1\n          minLength: 1\n          maxLength: 255\n        software_token_pin:\n          type: string\n          format: text\n          description: pin code for the initial software token\n          example: sup3rs3cr3t_p!n\n          minLength: 1\n          maxLength: 255\n        ignore_warnings:\n          type: boolean\n          default: false\n          description: if true, any ignorable warnings are ignored. if false (or missing),\n            any warnings cause request to fail\n    LocalGroup:\n      type: object\n      description: group\n      required:\n        - code\n        - description\n      properties:\n        id:\n          type: string\n          format: text\n          description: unique identifier\n          example: 123\n          readOnly: true\n        code:\n          type: string\n          format: text\n          description: group code\n          example: groupcode\n          minLength: 1\n          maxLength: 255\n        description:\n          type: string\n          format: text\n          description: group description\n          example: description\n          minLength: 1\n          maxLength: 255\n        member_count:\n          type: integer\n          format: int32\n          description: member count\n          example: 10\n          minimum: 0\n          maximum: 1000000\n        updated_at:\n          type: string\n          format: date-time\n          description: last time updated\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n        members:\n          type: array\n          description: group members\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/GroupMember'\n    LocalGroupAdd:\n      type: object\n      description: model for adding a new LocalGroup\n      required:\n        - code\n        - description\n      properties:\n        code:\n          type: string\n          format: text\n          description: group code\n          example: groupcode\n          minLength: 1\n          maxLength: 255\n        description:\n          type: string\n          format: text\n          description: group description\n          example: description\n          minLength: 1\n          maxLength: 255\n    LocalGroupDescription:\n      type: object\n      required:\n        - description\n      properties:\n        description:\n          type: string\n          description: description for the LocalGroup\n          format: text\n          minLength: 1\n          maxLength: 255\n      example:\n        name: This is an awesome local group!\n    GlobalConfDiagnostics:\n      type: object\n      description: global configuration diagnostics\n      required:\n        - status_class\n        - status_code\n        - prev_update_at\n        - next_update_at\n      properties:\n        status_class:\n          readOnly: true\n          allOf:\n            - $ref: '#/components/schemas/DiagnosticStatusClass'\n        status_code:\n          readOnly: true\n          allOf:\n            - $ref: '#/components/schemas/ConfigurationStatus'\n        prev_update_at:\n          type: string\n          format: date-time\n          description: last time updated\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n          readOnly: true\n        next_update_at:\n          type: string\n          format: date-time\n          description: last time updated\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n          readOnly: true\n    GroupMember:\n      type: object\n      description: group member\n      required:\n        - id\n        - name\n        - created_at\n      properties:\n        id:\n          type: string\n          format: text\n          description: group member id\n          example: FI:GOV:123:SS1\n          minLength: 1\n          maxLength: 1023\n        name:\n          type: string\n          format: text\n          description: group member name\n          example: Member123\n          minLength: 1\n          maxLength: 255\n        created_at:\n          type: string\n          format: date-time\n          description: group member created at\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n    IgnoreWarnings:\n      type: object\n      properties:\n        ignore_warnings:\n          type: boolean\n          default: false\n          description: if true, any ignorable warnings are ignored. if false (or missing),\n            any warnings cause request to fail\n    InitializationStatus:\n      type: object\n      description: Initialization status of the Security Server\n      required:\n        - is_anchor_imported\n        - is_server_code_initialized\n        - is_server_owner_initialized\n        - software_token_init_status\n      properties:\n        is_anchor_imported:\n          type: boolean\n          description: whether a configuration anchor has been imported or not\n        is_server_code_initialized:\n          type: boolean\n          description: whether the server code of the security server has been initialized or not\n        is_server_owner_initialized:\n          type: boolean\n          description: whether the server owner of the security server has been initialized or not\n        software_token_init_status:\n          $ref: '#/components/schemas/TokenInitStatus'\n    KeyWithCertificateSigningRequestId:\n      type: object\n      description: Key and TokenCertificateSigningRequest id\n      required:\n        - key\n        - csr_id\n      properties:\n        key:\n          $ref: '#/components/schemas/Key'\n        csr_id:\n          type: string\n          format: text\n          description: CSR id\n          example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF\n    Key:\n      type: object\n      description: Key for the certificate. Also includes the possible actions that can be done to this object,\n        e.g DELETE (only for key related operations and does not consider user authorization).\n      required:\n        - id\n        - name\n        - label\n        - certificates\n        - certificate_signing_requests\n      properties:\n        id:\n          type: string\n          format: text\n          description: key id\n          example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF\n          minLength: 1\n          readOnly: true\n        name:\n          type: string\n          format: text\n          description: key name\n          example: friendly name\n          minLength: 1\n          maxLength: 255\n        label:\n          type: string\n          format: text\n          description: key label\n          example: key label\n          minLength: 1\n          maxLength: 255\n        certificates:\n          type: array\n          description: list of certificates for the key\n          items:\n            $ref: '#/components/schemas/TokenCertificate'\n        certificate_signing_requests:\n          type: array\n          description: list of CSRs for the key\n          items:\n            $ref: '#/components/schemas/TokenCertificateSigningRequest'\n        usage:\n          $ref: '#/components/schemas/KeyUsageType'\n        available:\n          type: boolean\n          description: if the key is available\n          example: true\n        saved_to_configuration:\n          type: boolean\n          description: if the key is saved to configuration\n          example: true\n        possible_actions:\n          $ref: '#/components/schemas/PossibleActions'\n    KeyName:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          description: Friendly name of a key\n          format: text\n          minLength: 1\n          maxLength: 255\n      example:\n        name: my-key-0\n    KeyLabel:\n      type: object\n      properties:\n        label:\n          type: string\n          format: text\n          description: label for the new key\n          minLength: 1\n          maxLength: 255\n      example:\n        label: My new key\n    KeyLabelWithCsrGenerate:\n      type: object\n      required:\n        - key_label\n        - csr_generate_request\n      properties:\n        key_label:\n          type: string\n          format: text\n          description: label for the new key\n          minLength: 0\n          maxLength: 255\n          example: My new key\n        csr_generate_request:\n          $ref: '#/components/schemas/CsrGenerate'\n    KeyUsage:\n      type: string\n      format: enum\n      description: certificate key usage\n      example: NON_REPUDIATION\n      enum:\n        - DIGITAL_SIGNATURE\n        - NON_REPUDIATION\n        - KEY_ENCIPHERMENT\n        - DATA_ENCIPHERMENT\n        - KEY_AGREEMENT\n        - KEY_CERT_SIGN\n        - CRL_SIGN\n        - ENCIPHER_ONLY\n        - DECIPHER_ONLY\n    KeyUsageType:\n      type: string\n      format: enum\n      description: intended usage for the key (signing or authentication)\n      example: AUTHENTICATION\n      enum:\n        - AUTHENTICATION\n        - SIGNING\n    KeyValuePair:\n      type: object\n      description: key-value pair of strings\n      required:\n        - key\n        - value\n      properties:\n        key:\n          type: string\n          description: key\n        value:\n          type: string\n          description: value\n    Language:\n      type: object\n      description: language\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          format: text\n          description: language code\n          example: en\n          minLength: 2\n          maxLength: 2\n          readOnly: true\n    MemberName:\n      type: object\n      description: member's name\n      properties:\n        member_name:\n          type: string\n          format: text\n    Members:\n      type: object\n      description: Request object containing an array of member ids. The id must be an X-Road member id or subsystem id\n      properties:\n        items:\n          type: array\n          description: array of members to be added\n          example: [\"FI:GOV:123\", \"FI:GOV:123:SS1\", \"FI:GOV:123:SS2\"]\n          items:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n    NodeType:\n      type: string\n      format: enum\n      description:\n        \u003cp\u003eThe enum can have three different values\u003c/p\u003e\n        \u003cul\u003e\n          \u003cli\u003ePRIMARY, which is the primary node in a high availability setup\u003c/li\u003e\n          \u003cli\u003eSECONDARY, which is a secondary node in a high availability setup – a read-only server\u003c/li\u003e\n          \u003cli\u003eSTANDALONE,when there are no load balancer or high availability configured\u003c/li\u003e\n        \u003c/ul\u003e\n      example: PRIMARY\n      enum:\n        - PRIMARY\n        - SECONDARY\n        - STANDALONE\n    NodeTypeResponse:\n      type: object\n      description: Response object containing the node type of the Security Server\n      required:\n        - node_type\n      properties:\n        node_type:\n          $ref: '#/components/schemas/NodeType'\n    OcspResponder:\n      type: object\n      description: OCSP responder diagnostics\n      required:\n        - url\n        - status_class\n        - status_code\n        - next_update_at\n      properties:\n        url:\n          type: string\n          format: url\n          description: url of the OCSP responder\n          example: http://dev.xroad.rocks:123\n          minLength: 1\n          maxLength: 255\n          readOnly: true\n        status_class:\n          $ref: '#/components/schemas/DiagnosticStatusClass'\n        status_code:\n          $ref: '#/components/schemas/OcspStatus'\n        prev_update_at:\n          type: string\n          format: date-time\n          description: last time updated\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n          readOnly: true\n        next_update_at:\n          type: string\n          format: date-time\n          description: next time updated\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n          readOnly: true\n    OcspStatus:\n      type: string\n      format: enum\n      description: OCSP responder status\n      example: SUCCESS\n      enum:\n        - SUCCESS # Everything ok\n        - ERROR_CODE_OCSP_CONNECTION_ERROR # Unable to connect to the OCSP responder.\n        - ERROR_CODE_OCSP_FAILED # Unable to fetch response from the OCSP responder.\n        - ERROR_CODE_OCSP_RESPONSE_INVALID # Unable to parse the OCSP response.\n        - ERROR_CODE_OCSP_UNINITIALIZED # Status request not sent yet.\n        - ERROR_CODE_OCSP_RESPONSE_UNVERIFIED # Unable to verify OCSP response.\n        - UNKNOWN\n    OrphanInformation:\n      type: object\n      properties:\n        orphans_exist:\n          type: boolean\n          default: false\n    SecurityServer:\n      type: object\n      description: security server information\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          format: text\n          description: \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e:\u003csecurity_server_code\u003e\n          example: FI:GOV:123:sserver1\n        instance_id:\n          type: string\n          format: text\n          description: xroad instance id\n          example: FI\n          minLength: 1\n          maxLength: 255\n        member_class:\n          type: string\n          format: text\n          description: member class\n          example: GOV\n          minLength: 1\n          maxLength: 255\n        member_code:\n          type: string\n          format: text\n          description: member code\n          example: 123\n          minLength: 1\n          maxLength: 255\n        server_code:\n          type: string\n          format: text\n          description: security server code\n          example: server123\n          minLength: 1\n          maxLength: 255\n        server_address:\n          type: string\n          format: text\n          description: security server address (ip or name)\n          example: 192.168.1.100\n          maxLength: 255\n    SecurityServerAddress:\n      type: object\n      required:\n        - address\n      properties:\n        address:\n          type: string\n          description: Security server's IP address or DNS name\n          format: text\n          minLength: 1\n          maxLength: 255\n      example:\n        address: 127.0.0.1\n    Service:\n      type: object\n      description: service for the service description\n      required:\n        - id\n        - service_code\n        - url\n        - timeout\n      properties:\n        id:\n          type: string\n          format: text\n          description: encoded service id, including client id\n          example: CS:ORG:Client:myService.v1\n          minLength: 1\n          maxLength: 1279\n        full_service_code:\n          type: string\n          format: text\n          description: encoded service code and version\n          example: myService.v1\n          minLength: 1\n          maxLength: 511\n        service_code:\n          type: string\n          format: text\n          description: encoded service code\n          example: myService\n          minLength: 1\n          maxLength: 255\n        timeout:\n          type: integer\n          format: int32\n          description: service time out value\n          example: 60\n          minimum: 0\n          maximum: 1000\n        title:\n          type: string\n          readOnly: true\n          format: text\n          description: service title\n          example: client deletion\n          minLength: 1\n          maxLength: 255\n        ssl_auth:\n          type: boolean\n          description: service ssl auth\n          example: true\n        subjects_count:\n          type: integer\n          format: int32\n          description: count of acl subjects\n          example: 5\n          minimum: 0\n          maximum: 100000\n        url:\n          type: string\n          format: url\n          description: service url\n          example: https://domain.com/service\n          minLength: 1\n          maxLength: 255\n        endpoints:\n          type: array\n          description: list of endpoints linked to this service\n          items:\n            $ref: '#/components/schemas/Endpoint'\n    ServiceUpdate:\n      type: object\n      description: object for updating a service or all services within service description\n      required:\n        - url\n        - timeout\n        - ssl_auth\n      properties:\n        url:\n          type: string\n          format: url\n          description: service url\n          example: https://domain.com/service\n          minLength: 1\n          maxLength: 255\n        timeout:\n          type: integer\n          format: int32\n          description: service time out value\n          example: 60\n          minimum: 0\n          maximum: 1000\n        ssl_auth:\n          type: boolean\n          description: service ssl auth\n          example: true\n        url_all:\n          description: url is applied for all services\n          type: boolean\n          example: false\n          default: false\n        timeout_all:\n          description: timeout value is applied for all services\n          type: boolean\n          example: false\n          default: false\n        ssl_auth_all:\n          description: ssl authentication is applied for all services\n          type: boolean\n          example: false\n          default: false\n        ignore_warnings:\n          type: boolean\n          default: false\n          description: if true, any ignorable warnings are ignored. if false (or missing),\n            any warnings cause request to fail\n    Endpoint:\n      type: object\n      description: Endpoint for a service\n      required:\n        - service_code\n        - method\n        - path\n      properties:\n        id:\n          type: string\n          description: unique identifier\n          example: 15\n        service_code:\n          type: string\n          example: example_service_code\n        method:\n          type: string\n          description: http method mapped to this endpoint\n          example: 'GET'\n          enum: [ '*', 'GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS', 'TRACE' ]\n        path:\n          type: string\n          description: relative path where this endpoint is mapped to\n          example: '/foo'\n        generated:\n          type: boolean\n          description: has endpoint been generated from openapi3 description\n          example: true\n          readOnly: true\n    EndpointUpdate:\n      type: object\n      description: Object for updating endpoints method and/or path\n      required:\n        - method\n        - path\n      properties:\n        method:\n          type: string\n          description: http method mapped to this endpoint\n          example: 'GET'\n          enum: [ '*', 'GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS', 'TRACE' ]\n        path:\n          type: string\n          description: relative path where this endpoint is mapped to\n          example: '/foo'\n    ServiceClient:\n      type: object\n      description: service client. May be a subsystem, local group, or a global group\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          format: text\n          description: subject id - can be a subsystem id \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e:\u003csubsystem\u003e | globalgroup id \u003cinstance_id\u003e:\u003cgroup_code\u003e | localgroup resource id in number format \u003cid\u003e\n          example: DEV:ORG:1234:Subsystem | DEV:security-server-owners | 123\n          minLength: 1\n          maxLength: 1279\n        name:\n          type: string\n          format: text\n          description: name of the ServiceClient - can be the name of a member or the description of a group\n          example: Security server owners\n          readOnly: true\n          minLength: 1\n          maxLength: 255\n        local_group_code:\n          type: string\n          format: text\n          description: group code in case the object is a local group\n          example: My own Local group code\n          minLength: 1\n          maxLength: 255\n          readOnly: true\n        service_client_type:\n          $ref: '#/components/schemas/ServiceClientType'\n        rights_given_at:\n          type: string\n          format: date-time\n          description: time when access right were given at. When listing client's service clients without specifying the service, the time when first service access right was given to this service client for any service. When listing service clients for a specific service, time when service client was added permission to that service.\n          example: '2018-12-15T00:00:00.001Z'\n          readOnly: true\n    ServiceClients:\n      type: object\n      description: object containing and array of ServiceClients\n      properties:\n        items:\n          type: array\n          uniqueItems: true\n          description: array of ServiceClients\n          items:\n            $ref: '#/components/schemas/ServiceClient'\n    ServiceDescription:\n      type: object\n      description: WSDL/OPENAPI3/REST service\n      required:\n        - id\n        - url\n        - type\n        - disabled\n        - disabled_notice\n        - refreshed_at\n        - services\n        - client_id\n      properties:\n        id:\n          type: string\n          description: unique identifier\n          example: 123\n        url:\n          type: string\n          format: url\n          description: service url\n          example: http://dev.xroad.rocks/services.wsdl\n          minLength: 1\n          maxLength: 255\n        type:\n          $ref: '#/components/schemas/ServiceType'\n        disabled:\n          type: boolean\n          description: service disabled\n          example: true\n        disabled_notice:\n          type: string\n          format: text\n          description: disabled notice\n          example: default_disabled_service_notice\n          minLength: 0\n          maxLength: 255\n        refreshed_at:\n          type: string\n          format: date-time\n          description: time for service refresh\n          example: \"2018-12-15T00:00:00.001Z\"\n          minLength: 24\n          maxLength: 24\n        services:\n          type: array\n          description: service description services\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/Service'\n        client_id:\n          type: string\n          format: text\n          description: \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e:\u003csubsystem\u003e(optional)\n          example: FI:GOV:123:ABC\n          minLength: 1\n          maxLength: 255\n    ServiceDescriptionAdd:\n      type: object\n      description: request object containing service description url, service code and type\n      required:\n        - url\n        - type\n      properties:\n        url:\n          type: string\n          format: text\n          description: path for the service description file\n          example: https://domain.com/service\n          minLength: 1\n          maxLength: 255\n        rest_service_code:\n          type: string\n          format: text\n          description: service code for REST service\n          example: exampleServiceCode\n          minLength: 1\n          maxLength: 255\n        ignore_warnings:\n          type: boolean\n          description: if true, any ignorable warnings are ignored. if false (or missing),\n            any warnings cause request to fail\n          default: false\n        type:\n          $ref: '#/components/schemas/ServiceType'\n    ServiceDescriptionDisabledNotice:\n      type: object\n      properties:\n        disabled_notice:\n          type: string\n          format: text\n          description: disabled service notice\n          minLength: 0\n          maxLength: 255\n    ServiceDescriptionUpdate:\n      type: object\n      description: request object for updating a service description url or service code\n      required:\n        - type\n        - url\n      properties:\n        url:\n          type: string\n          format: text\n          description: path for the service description file\n          example: https://domain.com/service\n          minLength: 1\n          maxLength: 255\n        rest_service_code:\n          type: string\n          format: text\n          description: service code for REST service\n          example: exampleServiceCode\n          minLength: 1\n          maxLength: 255\n        new_rest_service_code:\n          type: string\n          format: test\n          description: new service code for REST service\n          example: newExampleServiceCode\n          minLength: 1\n          maxLength: 255\n        ignore_warnings:\n          type: boolean\n          description: if true, any ignorable warnings are ignored. if false (or missing),\n            any warnings cause request to fail\n          default: false\n        type:\n          $ref: '#/components/schemas/ServiceType'\n    ServiceType:\n      type: string\n      format: text\n      description: service type\n      example: WSDL\n      enum:\n        - WSDL\n        - REST\n        - OPENAPI3\n    ServiceClientType:\n      type: string\n      format: text\n      description: subject type\n      example: GLOBALGROUP\n      readOnly: true\n      enum:\n        - GLOBALGROUP\n        - LOCALGROUP\n        - SUBSYSTEM\n    TimestampingService:\n      type: object\n      description: timestamping services\n      required:\n        - name\n        - url\n      properties:\n        name:\n          type: string\n          format: text\n          description: name of the time stamping service\n          example: X-Road Test TSA CN\n          minLength: 1\n          maxLength: 255\n        url:\n          type: string\n          format: url\n          description: url of the time stamping service\n          example: http://dev.xroad.rocks:123\n          minLength: 1\n          maxLength: 255\n    TimestampingServiceDiagnostics:\n      type: object\n      description: timestamping service diagnostics\n      required:\n        - url\n        - status_class\n        - status_code\n        - prev_update_at\n      properties:\n        url:\n          type: string\n          format: url\n          description: url of the time stamping service\n          example: http://dev.xroad.rocks:123\n          minLength: 1\n          maxLength: 255\n          readOnly: true\n        status_class:\n          $ref: '#/components/schemas/DiagnosticStatusClass'\n        status_code:\n          $ref: '#/components/schemas/TimestampingStatus'\n        prev_update_at:\n          type: string\n          format: date-time\n          description: last time updated\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n          readOnly: true\n    TimestampingStatus:\n      type: string\n      format: enum\n      description: timestamping status\n      example: SUCCESS\n      enum:\n        - SUCCESS # Everything ok\n        - ERROR_CODE_TIMESTAMP_REQUEST_TIMED_OUT # Connection to the timestamp server timed out. Check the network connection to the timestamp server.\n        - ERROR_CODE_MALFORMED_TIMESTAMP_SERVER_URL # Malformed timestamp server URL. Check the URL.\n        - ERROR_CODE_TIMESTAMP_UNINITIALIZED # Connection ok, no timestamp request made yet.\n        - ERROR_CODE_INTERNAL # Internal error occurred.\n        - UNKNOWN\n    Token:\n      type: object\n      description: Token. Also includes the possible actions that can be done to this object,\n        e.g DELETE (only for token related operations and does not consider user authorization).\n      required:\n        - id\n        - name\n        - type\n        - keys\n        - status\n        - logged_in\n        - available\n        - saved_to_configuration\n        - read_only\n      properties:\n        id:\n          type: string\n          format: text\n          description: token id\n          example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF\n          minLength: 1\n          readOnly: true\n        name:\n          type: string\n          format: text\n          description: token name\n          example: softToken-0\n          minLength: 1\n          maxLength: 255\n        type:\n          $ref: '#/components/schemas/TokenType'\n        keys:\n          type: array\n          description: token keys\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/Key'\n        status:\n          $ref: '#/components/schemas/TokenStatus'\n        logged_in:\n          type: boolean\n          description: if the token has been logged in to\n          example: true\n        available:\n          type: boolean\n          description: if the token is available\n          example: true\n        saved_to_configuration:\n          type: boolean\n          description: if the token is saved to configuration\n          example: true\n        read_only:\n          type: boolean\n          description: if the token is read-only\n          example: true\n        serial_number:\n          type: string\n          format: text\n          description: serial number of the token\n          example: 12345\n        token_infos:\n          type: array\n          description: Contains label-value pairs of information\n          items:\n            $ref: '#/components/schemas/KeyValuePair'\n        possible_actions:\n          $ref: '#/components/schemas/PossibleActions'\n    TokenInitStatus:\n      type: string\n      format: enum\n      description: whether a token has been initialized or not – if the software token init status\n        cannot be resolved (e.g. signer module is offline), the value is UNKNOWN\n      example: INITIALIZED\n      enum:\n        - INITIALIZED\n        - NOT_INITIALIZED\n        - UNKNOWN\n    TokenName:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          description: friendly name of the token\n          format: text\n          minLength: 1\n          maxLength: 255\n      example:\n        name: my-token-0\n    TokenPinUpdate:\n      type: object\n      required:\n        - old_pin\n        - new_pin\n      properties:\n        old_pin:\n          type: string\n          description: the old pin code of the token\n          format: text\n          minLength: 1\n          maxLength: 255\n        new_pin:\n          type: string\n          description: the new pin code of the token\n          format: text\n          minLength: 1\n          maxLength: 255\n      example:\n        old_pin: 0000\n        new_pin: 1234\n    TokensLoggedOut:\n      description: response that tells if hsm tokens were logged out during the restore process\n      type: object\n      properties:\n        hsm_tokens_logged_out:\n          description: whether any hsm tokens were logged out during the restore process\n          type: boolean\n          default: false\n    TokenPassword:\n      type: object\n      properties:\n        password:\n          type: string\n          format: text\n          description: password for logging in to the token\n          minLength: 1\n      example:\n        password: sm3!!ycat\n    TokenStatus:\n      type: string\n      format: text\n      description: token type\n      example: OK\n      enum:\n        - OK # Normal operation status\n        - USER_PIN_LOCKED # Blocked\n        - USER_PIN_INCORRECT # Incorrect PIN was entered\n        - USER_PIN_INVALID # Invalid PIN\n        - USER_PIN_EXPIRED # PIN expired\n        - USER_PIN_COUNT_LOW # Only a few tries left\n        - USER_PIN_FINAL_TRY # Final try\n        - NOT_INITIALIZED # Not inited\n    TokenType:\n      type: string\n      format: text\n      description: token type\n      example: SOFTWARE\n      enum:\n        - SOFTWARE\n        - HARDWARE\n    User:\n      type: object\n      description: x-road user\n      required:\n        - username\n        - roles\n        - permissions\n      properties:\n        username:\n          type: string\n          format: text\n          description: user username\n          example: Guest\n          minLength: 1\n          maxLength: 255\n        roles:\n          type: array\n          description: user roles\n          uniqueItems: true\n          items:\n            type: string\n            format: text\n        permissions:\n          type: array\n          description: user permissions\n          uniqueItems: true\n          items:\n            type: string\n            format: text\n    VersionInfo:\n      type: object\n      description: version information\n      required:\n        - info\n        - java_version\n        - min_java_version\n        - max_java_version\n        - using_supported_java_version\n        - java_vendor\n        - java_runtime_version\n      properties:\n        info:\n          type: string\n          format: text\n          description: information about the security server\n          example: Security Server version 6.21.0-SNAPSHOT-20190411git32add470\n          minLength: 1\n          maxLength: 255\n        java_version:\n          type: integer\n          description: java version currently in use\n        min_java_version:\n          type: integer\n          description: minimum supported java version\n        max_java_version:\n          type: integer\n          description: maximum supported java version\n        using_supported_java_version:\n          type: boolean\n          description: true if currently used java version is supported\n        java_vendor:\n          type: string\n          description: java vendor string from java.vendor system property\n        java_runtime_version:\n          type: string\n          description: java runtime version string from java.runtime.version system property\nsecurity:\n  - ApiKeyAuth: []\n",
			"canonicalURL": "/github.com/nordic-institute/X-Road@837335d38f69a634cae6d6ee8b5fe2ac6fceb5da/-/blob/src/proxy-ui-api/src/main/resources/openapi-definition.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nordic-institute/X-Road/blob/837335d38f69a634cae6d6ee8b5fe2ac6fceb5da/src/proxy-ui-api/src/main/resources/openapi-definition.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: \"key_usage_type\": primitive: format \"enum\": enum format not implemented",
	"NotImplemented": [
		"enum format"
	]
}