{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/FronteiraTec/tori-api"
		},
		"file": {
			"name": "tori.yaml",
			"size": 0,
			"path": "docs/tori.yaml",
			"byteSize": 27183,
			"content": "openapi: 3.0.1\ninfo:\n  title: Monitoria API\n  description: Monitoria\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: gfersasil@gmail.com\n  license:\n    name: Apache 2.0\n    #url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: \"0.1\"\nservers:\n- url: http://localhost:3000\n- url: http://uffs.tk:3000\ntags:\n- name: auth\n  description: Autenticação\n- name: user\n  description: Usuário\n- name: assistance\n  description: Usuário\npaths:\n  /auth/sign-up:\n    post:\n      tags:\n      - auth\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        description: Created user object\n        content:\n          application/json:\n            schema:\n              required:\n              - cpf\n              - email\n              - name\n              - password\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: Nome completo\n                email:\n                  type: string\n                password:\n                  type: string\n                  description: Senha com caracteres especiais\n                cpf:\n                  type: string\n        required: true\n      responses:\n        200:\n          $ref: '#/components/responses/TokenResponse'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        406:\n          $ref: '#/components/responses/NotAcceptable'\n        409:\n          $ref: '#/components/responses/Conflict'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n      \n      x-codegen-request-body-name: body\n  /auth/sign-in:\n    post:\n      tags:\n      - auth\n      summary: Realiza o login\n      description: Funciona com o cpf, nome de usuário e o email\n      requestBody:\n        description: Campos necessários para o login\n        content:\n          '*/*':\n            schema:\n              required:\n              - authenticator\n              - password\n              type: object\n              properties:\n                authenticator:\n                  type: string\n                  description: CPF, nome de usuário ou email são aceitos\n                password:\n                  type: string\n        required: true\n      responses:\n        200:\n          $ref: '#/components/responses/TokenResponse'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        406:\n          $ref: '#/components/responses/NotAcceptable'\n      x-codegen-request-body-name: body\n  /auth/uffs/sign-in:\n    post:\n      tags:\n      - auth\n      summary: Logar com o idUFFS\n      description: Loga no sistema com o IDUFFS do usuário. Usuário não precisa estar\n        cadastrado no sistema para logar com o IDUFFS\n      requestBody:\n        description: Items necessários para o login\n        content:\n          '*/*':\n            schema:\n              required:\n              - authenticator\n              - password\n              type: object\n              properties:\n                authenticator:\n                  type: string\n                  description: CPF ou IDUFFS\n                password:\n                  type: string\n                  description: Senha\n        required: false\n      responses:\n        200:\n          $ref: '#/components/responses/TokenResponse'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        406:\n          $ref: '#/components/responses/NotAcceptable'\n      x-codegen-request-body-name: body\n  /auth/available:\n    get:\n      tags:\n      - auth\n      parameters:\n      - name: q\n        in: query\n        description: Option to search\n        required: true\n        schema:\n          type: string\n          enum:\n          - \"email\"\n          - \"cpf\"\n          - \"usernmae\"\n      - name: search\n        in: query\n        description: Item a ser pesquisado\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Retorna um booleano indicando a disponibilidade da sting buscada\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  available:\n                    type: boolean\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError' \n  /user:\n    get:\n      summary: \"Busca usuário\"\n      tags:\n      - user\n      parameters:\n      - name: limit\n        in: query\n        description: Número de usuários a retornar\n        schema:\n          type: number\n      - name: offset\n        in: query\n        description: Deslocamento dos usuários\n        schema:\n          type: number\n      - name: assistant\n        in: query\n        description: Retorna apenas monitores\n        schema:\n          type: boolean\n          default: false\n      - name: fields\n        in: query\n        description: Campos a serem pesquisados\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      \n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: OK\n          content: {}\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n    delete:\n      summary: \"Deleta usuário\"\n      tags:\n      - user\n      #description: \"Deleta seu usuário\"\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: \"Usuário deletado com sucesso\"\n        \n    patch:\n      summary: \"Atualiza usuário\"\n      tags:\n      - user\n      security:\n        - bearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserUpdate'\n\n      responses:\n        200:\n          description: OK\n          content: {}\n  \n  /user/search:\n    get:\n      summary: Buscar usuário\n      description: Campos a serem pesquisados. Buscar sem nenhum parametro e com token retorna o usuário\n      tags:\n      - user\n      parameters:\n      - name: q\n        in: query\n        description: Buscar por email, nome ou id\n        schema:\n          type: string\n          enum:\n            - id\n            - email\n            - name\n      - name: fields\n        in: query\n        description: Campos a serem retornados, os valores são os mesmos do usuário no banco de dados. Os dados que podem ser buscados estão limitados, por exemplo, não é possível buscar o cpf de um usuário\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: search\n        description: id do usuário, ou nome, ou email do usuário que deseja pesquisar. Deve ser usado em conjunto com o q\n        in: query\n        schema:\n          type: string\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: OK\n          content: \n            application/json: {}\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /user/profile-picture:\n    put:\n      summary: \"Atualizar imagem de perfil\"\n      description: Atualiza a imagem de perfil do usuário. A imagem deve ter menos de 9mb e deve ser mandada convertida com base64\n      tags:\n      - user\n      \n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                image:\n                  description: base64 imagem\n                  type: string\n                extension:\n                  description:\n                    \"Extensão da image, sem ponto\"\n                  type: string\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: OK\n          content: {}\n  /user/assistance/created:\n    get:\n      summary: Assistencias criadas pelo usuário\n      description: Assistencias que o usuário criou\n      tags:\n      - user\n      parameters:\n      - name: q\n        in: query\n        description: Opção de busca, caso seja deixado em branco sera retornado uma lista de todas as monitorias\n        schema:\n          type: string\n          enum:\n          - id\n          - all\n          default: id\n      - name: limit\n        in: query\n        description: Número de monitorias a serem retornadas\n        schema:\n          type: number\n      - name: offset\n        in: query\n        description: Deslocamento a ser retornado\n        schema:\n          type: number\n      - name: orderBy\n        in: query\n        description: Ordena a busca por campos do banco de dados. Apenas um campo deve ser enviado. Qualquer campo quantificado pode ser usado. O nome deve ser o mesmo contido no banco de dados\n        content:\n          application/json:\n            schema:\n              type: object\n              format: \"json\"\n              properties:\n                assistance.id:\n                  type: string\n                  enum: \n                    - ASC\n                    - DESC\n                assistance.date:\n                  type: string\n                  enum: \n                    - ASC\n                    - DESC\n                    \n      - name: filter\n        in: query\n        description: Filtros adicionais, por exemplo id do curso. Pode ser utilizado de diversas formas, por exemplo \\\"{\\\"assistance.date\" \\:\"\u003e2020-07-03\"}\" ou \\\"{\\\"assistance.date\" \\:\"2020-07-03\"}\" ou \\\"{\\\"assistance.date\" \\:\"like 2020-07-02T13:42:38.000Z\"}\". Todas as operações básicas estão disponíveis\n        content:\n          application/json:\n            schema:\n              type: object\n              format: \"json\"\n              properties:\n                assistance.id:\n                  type: string\n                assistance.date:\n                  type: string\n      - name: available\n        in: query\n        description: Retorna apenas monitorias ativas na busca\n        schema:\n          type: boolean\n      - name: fields\n        in: query\n        description: Campos a serem retornados, os valores são os mesmos do usuário no banco de dados. Os dados que podem ser buscados estão limitados, por exemplo, não é possível recuperar dados privados de uma monitoria que não foi criada pelo usuário realizando a busca. \n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: OK\n          content: {}\n  /user/assistance/subscribed:\n    get:\n      summary: Assistencias inscritas\n      description: Assistencias que o usuário se inscreveu\n      tags:\n      - user\n      parameters:\n      - name: q\n        in: query\n        description: Opção de busca, caso seja deixado em branco sera retornado uma lista de todas as monitorias\n        schema:\n          type: string\n          enum:\n          - id\n          - all\n          default: id\n      - name: limit\n        in: query\n        description: Número de monitorias a serem retornadas\n        schema:\n          type: number\n      - name: offset\n        in: query\n        description: Deslocamento a ser retornado\n        schema:\n          type: number\n      - name: orderBy\n        in: query\n        description: Ordena a busca por campos do banco de dados. Apenas um campo deve ser enviado. Qualquer campo quantificado pode ser usado. O nome deve ser o mesmo contido no banco de dados\n        content:\n          application/json:\n            schema:\n              type: object\n              format: \"json\"\n              properties:\n                assistance.id:\n                  type: string\n                  enum: \n                    - ASC\n                    - DESC\n                assistance.date:\n                  type: string\n                  enum: \n                    - ASC\n                    - DESC\n                    \n      - name: filter\n        in: query\n        description: Filtros adicionais, por exemplo id do curso. Pode ser utilizado de diversas formas, por exemplo \\\"{\\\"assistance.date\" \\:\"\u003e2020-07-03\"}\" ou \\\"{\\\"assistance.date\" \\:\"2020-07-03\"}\" ou \\\"{\\\"assistance.date\" \\:\"like 2020-07-02T13:42:38.000Z\"}\". Todas as operações básicas estão disponíveis\n        content:\n          application/json:\n            schema:\n              type: object\n              format: \"json\"\n              properties:\n                assistance.id:\n                  type: string\n                assistance.date:\n                  type: string\n      - name: available\n        in: query\n        description: Retorna apenas monitorias ativas na busca\n        schema:\n          type: boolean\n      - name: fields\n        in: query\n        description: Campos a serem retornados, os valores são os mesmos do usuário no banco de dados. Os dados que podem ser buscados estão limitados, por exemplo, não é possível recuperar dados privados de uma monitoria que não foi criada pelo usuário realizando a busca. \n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: OK\n          content: {}\n  /assistance:\n    get:\n      summary: Retornar monitorias\n      tags:\n      - assistance\n      parameters:\n      - name: limit\n        in: query\n        description: Número de monitorias a serem retornadas\n        schema:\n          type: number\n      - name: offset\n        in: query\n        description: Deslocamento das monitorias\n        schema:\n          type: number\n      - name: available\n        in: query\n        description: Filtra por monitorias ativas\n        schema:\n          type: boolean\n          default: true\n      - name: order\n        in: query\n        description: Ordem dos itens retornados, pode ser crescente ou descrente por data de criação. Não pode ser usado em conjunto com o orderBy. Caso ambos sejam enviados, a preferencia sera dada ao orderBy\n        schema:\n          type: string\n          enum: \n            - ASC\n            - DESC\n          default: DESC\n      - name: fields\n        in: query\n        description: Campos a serem retornados, os valores são os mesmos do usuário no banco de dados. Os dados que podem ser buscados estão limitados, por exemplo, não é possível recuperar dados privados de uma monitoria que não foi criada pelo usuário realizando a busca. \n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: orderBy\n        in: query\n        description: Ordena a busca por campos do banco de dados. Apenas um campo deve ser enviado. Qualquer campo quantificado pode ser usado. O nome deve ser o mesmo contido no banco de dados\n        content:\n          application/json:\n            schema:\n              type: object\n              format: \"json\"\n              properties:\n                assistance.id:\n                  type: string\n                  enum: \n                    - ASC\n                    - DESC\n                assistance.date:\n                  type: string\n                  enum: \n                    - ASC\n                    - DESC\n                    \n      - name: filter\n        in: query\n        description: Filtros adicionais, por exemplo id do curso. Pode ser utilizado de diversas formas, por exemplo \\\"{\\\"assistance.date\" \\:\"\u003e2020-07-03\"}\" ou \\\"{\\\"assistance.date\" \\:\"2020-07-03\"}\" ou \\\"{\\\"assistance.date\" \\:\"like 2020-07-02T13:42:38.000Z\"}\". Todas as operações básicas estão disponíveis\n        content:\n          application/json:\n            schema:\n              type: object\n              format: \"json\"\n              properties:\n                assistance.id:\n                  type: string\n                assistance.date:\n                  type: string\n      responses:\n        200:\n          description: Lista de monitorias\n          content: \n            application/json: {}\n    post:\n      tags:\n      - assistance\n      summary: Criar monitoria\n      description: Endpoint de criação de monitoria.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                available_vacancies:\n                  type: integer\n                  \n                course_id:\n                  type: string\n                date:\n                  type: string\n                description:\n                  type: string\n                subject_id:\n                  type: string\n                title:\n                  type: string\n                total_vacancies:\n                  type: integer\n                tags:\n                  type: array\n                  items:\n                    type: string\n                cep:\n                  type: string\n                complement:\n                  type: string\n                latitude:\n                  type: number\n                longitude:\n                  type: number\n                number:\n                  type: string\n                reference:\n                  type: string\n                street:\n                  type: string\n                nickname:\n                  type: string\n              required: \n              - course_id\n              - date\n              - description\n              - title\n              - total_vacancies\n              - cep\n              - number\n              - street\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: OK\n          content: {}\n  /assistance/{id}:\n    delete:\n        summary: Deleta assistencia\n        description: Deleta uma monitoria a partir de seu id. Apenas é possível deletar monitorias criadas pelo usuário.\n        tags:\n        - assistance\n        \n        parameters: \n        - name: id\n          description: Id da monitoria a ser deletada\n          in: path\n          required: true\n          schema:\n            type: integer\n        security:\n        - bearerAuth: []\n        responses:\n          200:\n            description: OK\n            content: {}\n    patch:\n      summary: Alterar monitoria\n      description: Alterar algum campo da monitoria a partir de seu id\n      tags:\n      - assistance\n      parameters:\n      - name: id\n        in: path\n        description: description\n        schema:\n          type: string\n        required: true\n      requestBody:\n        description: Campos da monitoria a serem alterados de acordo com o banco de dados\n        content:\n          application/json:\n            \n            schema:\n              type: object\n              \n      security:\n        - bearerAuth: []    \n      responses:\n        200:\n          description: OK\n          content: {}\n  /assistance/search:\n    get:\n      summary: Retorna uma monitoria.\n      description: Dados protegidos só podem ser buscados pelo autor da monitoria\n      tags:\n      - assistance\n      parameters:\n      - name: q\n        in: query\n        description: Campo a ser usado para a buscar o usuário.\n        schema:\n          type: string\n          description: All - busca por uma palavra chave na descrição tag ou nome da monitoria.\n          enum: \n            - all\n            - id\n            - name\n            - tag\n      - name: search\n        in: query\n        description: Dados do que devem ser buscado, pode ser uma array ou uma string. Caso seja uma array o formato deve ser [item1, item2]. As chaves são obrigatórias\n        style: form\n        explode: false\n        required: true\n        schema:\n          type: array\n          items:\n            type: string\n            \n      - name: limit\n        in: query\n        description: Número de usuários máximos a serem retornados\n        schema:\n          type: number\n      - name: offset\n        in: query\n        description: Deslocamento a ser retornado\n        schema:\n          type: number\n      - name: orderBy\n        in: query\n        description: Ordena a busca por campos do banco de dados. Apenas um campo deve ser enviado. Qualquer campo quantificado pode ser usado. O nome deve ser o mesmo contido no banco de dados\n        content:\n          application/json:\n            schema:\n              type: object\n              format: \"json\"\n              properties:\n                assistance.id:\n                  type: string\n                  enum: \n                    - ASC\n                    - DESC\n                assistance.date:\n                  type: string\n                  enum: \n                    - ASC\n                    - DESC\n                    \n      - name: filter\n        in: query\n        description: Filtros adicionais, por exemplo id do curso. Pode ser utilizado de diversas formas, por exemplo \\\"{\\\"assistance.date\" \\:\"\u003e2020-07-03\"}\" ou \\\"{\\\"assistance.date\" \\:\"2020-07-03\"}\" ou \\\"{\\\"assistance.date\" \\:\"like 2020-07-02T13:42:38.000Z\"}\". Todas as operações básicas estão disponíveis\n        content:\n          application/json:\n            schema:\n              type: object\n              format: \"json\"\n              properties:\n                assistance.id:\n                  type: string\n                assistance.date:\n                  type: string\n      - name: available\n        in: query\n        description: Retorna apenas monitorias ativas na busca\n        schema:\n          type: boolean\n      - name: fields\n        in: query\n        description: Campos a serem retornados, os valores são os mesmos do usuário no banco de dados. Os dados que podem ser buscados estão limitados, por exemplo, não é possível recuperar dados privados de uma monitoria que não foi criada pelo usuário realizando a busca. \n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      \n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: OK\n          content: {}\n  /assistance/{id}/subscribers:\n    get:\n      summary: Retorna usuários\n      description: Retorna os usuários que estão cadastrados nesta monitoria.\n      tags:\n      - assistance\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: Id da monitoria\n        schema:\n          type: string\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: OK\n          content: {}\n  /confirm-presence/{assistanceId}:\n    patch:\n      summary: Confirma a presença\n      description: Confirma a presença do usuário em dada monitoria. userCode pode ser obtido lendo o qrCode de um usuário.\n      tags:\n      - assistance\n      parameters:\n      - name: assistanceId\n        in: path\n        required: true\n        description: Id da monitoria\n        schema:\n          type: string\n \n      requestBody:\n        content:\n          application/json:\n            \n            schema:\n              type: object\n              properties:\n                userCode:\n                  type: string\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: OK\n          content: {}\n          \n  /assistance/disable/{id}:\n    patch:\n      summary: Suspende monitoria.\n      description: Suspende uma monitoria sem a excluir\n      tags:\n      - assistance\n      parameters:\n      - name: id\n        in: path\n        required: true\n        description: Id da monitoria\n        schema:\n          type: string\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: OK\n          content: {}\n  /assistance/subscribe/{assistanceId}:\n    post:\n      summary: Inscrever monitoria\n      description: Inscreve usuário na monitoria Seu id sera adquirido pelo token \n      tags:\n      - assistance\n      parameters:\n      - name: assistanceId\n        in: path\n        required: true\n        description: Id da monitoria\n        schema:\n          type: string\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: OK\n          content: {}\n        400: \n          $ref: '#/components/responses/BadRequest'\n  /assistance/{assistanceId}/unsubscribe:\n    patch:\n      summary: Desvincula o usuário da monitoria\n      description: Usuário é encontrado pelo seu token e é desvinculado da monitoria\n      tags:\n      - assistance\n      parameters:\n      - name: assistanceId\n        in: path\n        required: true\n        description: id da monitoria\n        schema:\n          type: string\n      security:\n        - bearerAuth: []\n      responses:\n        200:\n          description: OK\n          content: {}\ncomponents:\n  schemas:\n    UserUpdate:\n      type: object\n      properties:\n            full_name:\n                type: string\n            is_assistant:\n                type: string\n            course_id:\n                type: string\n            idUFFS:\n                type: string\n            email:\n                type: string\n            phone_number:\n                type: string\n            password:\n                type: string\n    AuthResponse:\n      type: object\n      properties:\n        token:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n        expiresIn:\n          type: string\n    Error:\n      description: Unauthorized\n      type: object \n      properties:\n        error:\n          type: string\n            #TODO defualt error:\n            \n  responses: \n    NotFound:\n      description: The specified resource was not found\n      content:\n        application/json:\n          schema:\n            $ref: \"\"\n    Unauthorized: # 401\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    Conflict: #409\n      description: \"Entradas duplicadas\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    NotAcceptable: #406\n      description: \"Campo faltando\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    BadRequest: #400\n      description: \"Falha na validação de inputs\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    InternalServerError: #500\n      description: \"Erro interno\" \n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    \n    UnauthorizedError: #401\n      description: \"Usuário não tem autorização\" \n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    \n    TokenResponse:\n      description: \"Cadastro realizado com sucesso\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AuthResponse\"\n    \n  securitySchemes:\n    bearerAuth:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT",
			"canonicalURL": "/github.com/FronteiraTec/tori-api@7b48caa3f39c3578f7f62ad8c5d5ad8db4d6c8bb/-/blob/docs/tori.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/FronteiraTec/tori-api/blob/7b48caa3f39c3578f7f62ad8c5d5ad8db4d6c8bb/docs/tori.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/auth/sign-in\": post: requestBody: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"empty schema",
		"unsupported content types"
	]
}