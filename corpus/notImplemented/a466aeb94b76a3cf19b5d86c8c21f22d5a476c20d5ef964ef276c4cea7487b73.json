{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/jmix-framework/jmix"
		},
		"file": {
			"name": "reports-rest-openapi.yaml",
			"size": 0,
			"path": "jmix-reports/reports-rest/src/main/resources/io/jmix/reportsrest/reports-rest-openapi.yaml",
			"byteSize": 8613,
			"content": "openapi: 3.0.1\ninfo:\n  title: Jmix Reports REST API\n  description: |2\n\n    ## General Overview\n\n    Jmix Reports REST API provides the following functionality:\n\n    * Getting list of avaliable reports\n    * Getting report metadata (parameters, templates)\n    * Getting report group details\n    * Execution of report\n\n    The Reports REST API is available at the URL `/rest/reports`, e.g. `http://localhost:8080/rest/reports/report`\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\nservers:\n  - url: /rest/reports\nsecurity:\n  - oauth2:\n      - rest-api\ntags:\n  - name: Reports list\n  - name: Report\n  - name: Run report\n  - name: Group\n  - name: Documentation\npaths:\n  /report:\n    get:\n      tags:\n        - Reports list\n      summary: Get a list of reports\n      description: |\n        Gets a list of reports\n      responses:\n        200:\n          description: Success. The list of reports is returned in the response body.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/report'\n        403:\n          description: Forbidden. The user doesn't have permissions to read the report\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /report/{reportId}:\n    get:\n      tags:\n        - Report\n      summary: Get a single report by id\n      description: |\n        Gets a single report by identifier\n      parameters:\n        - name: reportId\n          in: path\n          description: Report identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success. The report is returned in the response body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/reportFull'\n        403:\n          description: Forbidden. The user doesn't have permissions to read the report\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /group/{groupId}:\n    get:\n      tags:\n        - Group\n      summary: Get a single group by id\n      description: |\n        Gets a single group by identifier\n      parameters:\n        - name: groupId\n          in: path\n          description: Report Group identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success. The group is returned in the response body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/group'\n        403:\n          description: Forbidden. The user doesn't have permissions to read the report\n            group\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /run/{reportId}:\n    post:\n      tags:\n        - Run report\n      summary: Run report\n      description: |\n        Runs report and returns report document. The method expects a JSON with selected parameters and report template\n        in the request body\n      parameters:\n        - name: reportId\n          in: path\n          description: Report identifier\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/runObject'\n        required: false\n      responses:\n        200:\n          description: Success. The file contents is returned in the response body.\n          content: {}\n        400:\n          description: Bad request. For example, the condition value cannot be parsed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: Forbidden. The user doesn't have permissions to read the report\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      x-codegen-request-body-name: runObject\n  /docs/openapi.{format}:\n    get:\n      tags:\n        - Documentation\n      summary: Get the Reports REST API swagger documentation\n      description: Gets the swagger documentation in the JSON or YAML formats\n      parameters:\n        - name: format\n          in: path\n          description: swagger format (json or yaml)\n          required: true\n          schema:\n            type: string\n            default: yaml\n      responses:\n        200:\n          description: Success\n          content: {}\ncomponents:\n  schemas:\n    error:\n      type: object\n      properties:\n        error:\n          type: string\n          description: Error message\n        details:\n          type: string\n          description: Detailed error description\n    report:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Report id\n        name:\n          type: string\n          description: Report name\n        code:\n          type: string\n          description: Report code\n        group:\n          type: string\n          description: Group id\n    reportFull:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Report id\n        name:\n          type: string\n          description: Report name\n        code:\n          type: string\n          description: Report code\n        group:\n          type: string\n          description: Group id\n        inputParameters:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n              alias:\n                type: string\n              type:\n                type: string\n                enum:\n                  - DATE\n                  - TEXT\n                  - ENTITY\n                  - BOOLEAN\n                  - NUMERIC\n                  - ENTITY_LIST\n                  - ENUMERATION\n                  - DATETIME\n                  - TIME\n              required:\n                type: boolean\n              hidden:\n                type: boolean\n              entityMetaClass:\n                type: string\n                description: |\n                  For ENTITY, ENTITY_LIST type there will be a entity metaclass name here\n                example: sec_User\n              enumerationClass:\n                type: string\n                description: |\n                  For ENUMERATION type there will be a java class for enumeration here\n              defaultValue:\n                type: string\n                description: |\n                  Default value of parameter in string form\n        templates:\n          type: array\n          items:\n            type: object\n            properties:\n              code:\n                type: string\n              outputType:\n                type: string\n                enum:\n                  - XLS\n                  - DOC\n                  - PDF\n                  - HTML\n                  - DOCX\n                  - XLSX\n                  - CUSTOM\n                  - CSV\n              default:\n                  type: boolean\n    runObject:\n      type: object\n      properties:\n        template:\n          type: string\n          description: template code\n        attachment:\n          type: boolean\n        parameters:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n                description: parameter alias\n              value:\n                type: string\n              values:\n                type: array\n                items:\n                  type: string\n    group:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Group id\n        title:\n          type: string\n          description: Group title\n        code:\n          type: string\n          description: Group code\n  parameters:\n    reportIdParam:\n      name: reportId\n      in: path\n      description: Report identifier\n      required: true\n      schema:\n        type: string\n    groupIdParam:\n      name: groupId\n      in: path\n      description: Report Group identifier\n      required: true\n      schema:\n        type: string\n  securitySchemes:\n    oauth2:\n      type: oauth2\n      flows:\n        password:\n          tokenUrl: http://localhost:8080/oauth/token\n          scopes:\n            rest-api: use REST API\n    tokenEndpointBasic:\n      type: http\n      scheme: basic",
			"canonicalURL": "/github.com/jmix-framework/jmix@e56dc5ea54cf1fcecd191eddada369bf6df714bd/-/blob/jmix-reports/reports-rest/src/main/resources/io/jmix/reportsrest/reports-rest-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/jmix-framework/jmix/blob/e56dc5ea54cf1fcecd191eddada369bf6df714bd/jmix-reports/reports-rest/src/main/resources/io/jmix/reportsrest/reports-rest-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/docs/openapi.{format}\": get: security: security \"oauth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}