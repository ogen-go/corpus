{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/goadesign/plugins"
		},
		"file": {
			"name": "openapi3.yaml",
			"size": 0,
			"path": "goakit/examples/fetcher/fetcher/gen/http/openapi3.yaml",
			"byteSize": 4791,
			"content": "openapi: 3.0.3\ninfo:\n    title: The goakit example upstream service\n    description: Fetcher is a service that makes GET requests to arbitrary URLs and stores the results in the downstream 'archiver' service.\n    version: \"1.0\"\nservers:\n    - url: http://localhost:80\n      description: Default server for fetcher\npaths:\n    /fetch/{url}:\n        get:\n            tags:\n                - fetcher\n            summary: fetch fetcher\n            description: Fetch makes a GET request to the given URL and stores the results in the archiver service which must be running or the request fails\n            operationId: fetcher#fetch\n            parameters:\n                - name: url\n                  in: path\n                  description: URL to be fetched\n                  required: true\n                  schema:\n                    type: string\n                    description: URL to be fetched\n                    example: http://harveybauch.org/lulu\n                    format: uri\n                  example: http://mayert.info/alejandrin.kautzer\n            responses:\n                \"200\":\n                    description: OK response.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/FetchMedia'\n                            example:\n                                archive_href: /archive/1\n                                status: 200\n                \"400\":\n                    description: 'bad_request: Bad Request response.'\n                    content:\n                        application/vnd.goa.error:\n                            schema:\n                                $ref: '#/components/schemas/Error'\n                \"500\":\n                    description: 'internal_error: Internal Server Error response.'\n                    content:\n                        application/vnd.goa.error:\n                            schema:\n                                $ref: '#/components/schemas/Error'\n    /health:\n        get:\n            tags:\n                - health\n            summary: show health\n            description: Health check endpoint\n            operationId: health#show\n            responses:\n                \"200\":\n                    description: OK response.\n                    content:\n                        text/plain:\n                            schema:\n                                type: string\n                                example: Rem perspiciatis consequatur excepturi voluptatem.\n                            example: Sint fugit nesciunt.\ncomponents:\n    schemas:\n        Error:\n            type: object\n            properties:\n                fault:\n                    type: boolean\n                    description: Is the error a server-side fault?\n                    example: true\n                id:\n                    type: string\n                    description: ID is a unique identifier for this particular occurrence of the problem.\n                    example: 123abc\n                message:\n                    type: string\n                    description: Message is a human-readable explanation specific to this occurrence of the problem.\n                    example: parameter 'p' must be an integer\n                name:\n                    type: string\n                    description: Name is the name of this class of errors.\n                    example: bad_request\n                temporary:\n                    type: boolean\n                    description: Is the error temporary?\n                    example: true\n                timeout:\n                    type: boolean\n                    description: Is the error a timeout?\n                    example: false\n            example:\n                id: 3F1FKVRR\n                message: Value of ID must be an integer\n                name: bad_request\n            required:\n                - name\n                - id\n                - message\n                - temporary\n                - timeout\n                - fault\n        FetchMedia:\n            type: object\n            properties:\n                archive_href:\n                    type: string\n                    description: The href to the corresponding archive in the archiver service\n                    example: /archive/1\n                    pattern: ^/archive/[0-9]+$\n                status:\n                    type: integer\n                    description: HTTP status code returned by fetched service\n                    example: 200\n                    minimum: 0\n            example:\n                archive_href: /archive/1\n                status: 200\n            required:\n                - status\n                - archive_href\ntags:\n    - name: health\n    - name: fetcher\n",
			"canonicalURL": "/github.com/goadesign/plugins@cfecc53d74ae98a8e35bab68f1de7caa4df4c63d/-/blob/goakit/examples/fetcher/fetcher/gen/http/openapi3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/goadesign/plugins/blob/cfecc53d74ae98a8e35bab68f1de7caa4df4c63d/goakit/examples/fetcher/fetcher/gen/http/openapi3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/fetch/{url}\": get: responses: 400: contents: unsupported content types: [application/vnd.goa.error]",
	"NotImplemented": [
		"unsupported content types"
	]
}