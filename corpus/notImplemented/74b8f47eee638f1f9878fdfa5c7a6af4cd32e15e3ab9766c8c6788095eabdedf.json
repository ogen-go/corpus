{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/teamhanko/hanko"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "docs/spec/api.yaml",
			"byteSize": 25186,
			"content": "openapi: 3.0.0\ninfo:\n  version: '0.0.1'\n  title: 'Hanko 3.0'\n  license:\n    name: AGPL-3.0-or-later\nservers:\n  - url: 'localhost:3000'\npaths:\n  /passcode/login/initialize:\n    post:\n      summary: 'Initialize Passcode login'\n      operationId: passcodeInit\n      tags:\n        - authentication\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  $ref: '#/components/schemas/UUID4'\n      responses:\n        '200':\n          description: 'Passcode'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Passcode'\n        '400':\n          description: 'Bad request'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /passcode/login/finalize:\n    post:\n      summary: 'Finalize Passcode login'\n      operationId: passcodeFinal\n      tags:\n        - authentication\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  $ref: '#/components/schemas/UUID4'\n                code:\n                  type: string\n      responses:\n        '200':\n          description: 'Details about a used Passcode'\n          headers:\n            Set-Cookie:\n              schema:\n                $ref: '#/components/schemas/CookieSession'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Passcode'\n        '400':\n          description: 'Bad request'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /password/login:\n    post:\n      summary: 'Do password login'\n      operationId: passwordLogin\n      tags:\n        - authentication\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  $ref: '#/components/schemas/UUID4'\n                password:\n                  type: string\n              required:\n                - user_id\n                - password\n      responses:\n        '200':\n          description: 'Successful password login'\n          headers:\n            Set-Cookie:\n              schema:\n                $ref: '#/components/schemas/CookieSession'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Passcode'\n        '400':\n          description: 'Bad request'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorWithValidationErrors'\n        '401':\n          description: 'Unauthorized'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: 'Not found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /password:\n    put:\n      summary: 'Create/Set a password'\n      operationId: password\n      tags:\n        - authentication\n      security:\n        - CookieAuth: [ ]\n        - BearerTokenAuth: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_id:\n                  $ref: '#/components/schemas/UUID4'\n                password:\n                  type: string\n              required:\n                - user_id\n                - password\n      responses:\n        '200':\n          description: 'Successful password update'\n        '201':\n          description: 'Successful password creation'\n        '400':\n          description: 'Bad request'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorWithValidationErrors'\n        '403':\n          description: 'Forbidden'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: 'Not found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /webauthn/login/initialize:\n    post:\n      summary: 'Initialize WebAuthn login'\n      operationId: webauthnLoginInit\n      tags:\n        - authentication\n      responses:\n        '200':\n          description: 'Successful initialization'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialRequestOptions'\n        '400':\n          description: 'Bad request'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '409':\n          description: 'Conflict'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /webauthn/login/finalize:\n    post:\n      summary: 'Finalize WebAuthn login'\n      operationId: webauthnLoginFinal\n      tags:\n        - authentication\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PublicKeyCredentialAssertionResponse'\n      responses:\n        '204':\n          description: 'Successful login'\n          headers:\n            Set-Cookie:\n              schema:\n                $ref: '#/components/schemas/CookieSession'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebauthnLoginResponse'\n        '400':\n          description: 'Bad request'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /webauthn/registration/initialize:\n    post:\n      summary: 'Initialize WebAuthn registration'\n      operationId: webauthnRegInit\n      tags:\n        - authentication\n      security:\n        - CookieAuth: [ ]\n        - BearerTokenAuth: [ ]\n      responses:\n        '200':\n          description: 'Challenge'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialCreationOptions'\n        '400':\n          description: 'Bad request'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: 'Unauthorized'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /webauthn/registration/finalize:\n    post:\n      summary: 'Finalize WebAuthn registration'\n      operationId: webauthnRegFinal\n      tags:\n        - authentication\n      security:\n        - CookieAuth: [ ]\n        - BearerTokenAuth: [ ]\n      requestBody:\n        description: \"Challenge response\"\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PublicKeyCredentialAttestationResponse'\n      responses:\n        '200':\n          description: 'Credential ID'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  credential_id:\n                    type: string\n        '400':\n          description: 'Bad request'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: 'Unauthorized'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /.well-known/jwks.json:\n    get:\n      summary: 'Get public keys'\n      operationId: getPublicKey\n      tags:\n        - .well-known\n      responses:\n        '200':\n          description: 'Public Key'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONWebKeySet'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /.well-known/config:\n    get:\n      summary: 'Get hanko configuration'\n      operationId: getConfig\n      tags:\n        - .well-known\n      responses:\n        '200':\n          description: 'Configuration'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HankoConfiguration'\n  /user:\n    post:\n      summary: 'Get user ID'\n      operationId: getUserId\n      tags:\n        - authentication\n      parameters:\n        - in: query\n          name: email\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'User'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    $ref:  '#/components/schemas/UUID4'\n        '400':\n          description: 'Bad request'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: 'Not found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /me:\n    get:\n      summary: 'Redirects to user resource if user has valid session'\n      operationId: IsUserAuthorized\n      tags:\n        - authentication\n      security:\n        - CookieAuth: [ ]\n        - BearerTokenAuth: [ ]\n      responses:\n        '307':\n          description: 'Redirect'\n          headers:\n            Location:\n              schema:\n                type: string\n              description: Redirect target\n        '401':\n          description: 'Unauthorized'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users:\n    post:\n      summary: 'Create a user'\n      operationId: createUser\n      tags:\n        - management\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n              required:\n                - email\n      responses:\n        '200':\n          description: 'Details about a the registered account/user'\n          headers:\n            Set-Cookie:\n              schema:\n                $ref: '#/components/schemas/CookieSession'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: 'Bad request'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorWithValidationErrors'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      summary: 'Get a list of users'\n      operationId: listUsers\n      tags:\n        - management\n      responses:\n        '200':\n          description: 'Details about a user by ID'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /users/{id}:\n    get:\n      summary: 'Get a user by ID'\n      operationId: listUser\n      tags:\n        - management\n      parameters:\n        - name: id\n          in: path\n          description: ID of the user\n          required: true\n          schema:\n            $ref: '#/components/schemas/UUID4'\n      responses:\n        '200':\n          description: 'Details about a user by ID'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: 'Bad request'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: 'Not found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      summary: 'Update a user by ID'\n      operationId: updateUser\n      tags:\n        - management\n      parameters:\n        - name: id\n          in: path\n          description: ID of the user\n          required: true\n          schema:\n            $ref: '#/components/schemas/UUID4'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                status:\n                  type: string\n                  enum: [active, inactive]\n      responses:\n        '200':\n          description: 'Updated user'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: 'Bad request'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: 'Not found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: 'Delete a user by ID'\n      operationId: deleteUser\n      tags:\n        - management\n      parameters:\n        - name: id\n          in: path\n          description: ID of the user\n          required: true\n          schema:\n            $ref: '#/components/schemas/UUID4'\n      responses:\n        '204':\n          description: 'Deleted'\n        '404':\n          description: 'Not found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: 'Internal server error'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    HankoConfiguration:\n      type: object\n      externalDocs:\n        description: Hanko Configuration\n        url: https://github.com/teamhanko/hanko/blob/main/config/config.go\n    CookieSession:\n      type: string\n      example: HANKOSESSION=abcde12345; Path=/; HttpOnly\n    CredentialCreationOptions:\n      description: \"Options for Credential Creation with the WebAuthn API\"\n      externalDocs:\n        url: https://www.w3.org/TR/webauthn-2/#dictionary-makecredentialoptions\n      type: object\n      properties:\n        rp:\n          type: object\n        user:\n          type: object\n        challenge:\n          type: object\n        pubKeyCredParams:\n          type: array\n          items:\n            type: object\n        timeout:\n          type: number\n          format: int64\n        authenticatorSelection:\n          type: object\n        attestation:\n          type: string\n    CredentialRequestOptions:\n      description: \"Options for Assertion Generation with the WebAuthn API\"\n      externalDocs:\n        url: https://www.w3.org/TR/webauthn-2/#dictionary-assertion-options\n      type: object\n      properties:\n        challenge:\n          type: object\n        timeout:\n          type: number\n          format: int64\n        rp:\n          type: object\n        allowCredentials:\n          type: object\n        userVerification:\n          type: string\n          enum:\n            - required\n            - preferred\n            - discouraged\n    JSONWebKey:\n      type: object\n      externalDocs:\n        description: RFC7517 - JSON Web Key (JWK)\n        url: https://datatracker.ietf.org/doc/html/rfc7517\n      required:\n        - use\n        - kty\n        - kid\n        - alg\n      properties:\n        alg:\n          type: string\n          example: RS256\n        crv:\n          type: string\n          example: P-256\n        d:\n          type: string\n          example: T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE\n        dp:\n          type: string\n          example: G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0\n        dq:\n          type: string\n          example: s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk\n        e:\n          type: string\n          example: AQAB\n        k:\n          type: string\n          example: GawgguFyGrWKav7AX4VKUg\n        kid:\n          type: string\n          example: 1603dfe0af8f4596\n        kty:\n          type: string\n          example: RSA\n        'n':\n          type: string\n          example: vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0\n        p:\n          type: string\n          example: 6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ\n        q:\n          type: string\n          example: 0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ\n        qi:\n          type: string\n          example: GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU\n        use:\n          type: string\n          example: sig\n        x:\n          type: string\n          example: f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU\n        x5c:\n          type: array\n          items:\n            type: string\n        'y':\n          type: string\n          example: x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0\n    JSONWebKeySet:\n      type: object\n      properties:\n        keys:\n          type: array\n          items:\n            $ref: '#/components/schemas/JSONWebKey'\n    Passcode:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/UUID4'\n        ttl:\n          type: integer\n        created_at:\n          type: string\n          format: date-time\n    PublicKeyCredentialAssertionResponse:\n      description: 'WebAuthn API response to a navigator.credentials.get() call'\n      type: object\n      properties:\n        id:\n          type: string\n        rawId:\n          type: string\n        type:\n          type: string\n          enum:\n            - public-key\n        response:\n          type: object\n          properties:\n            clientDataJson:\n              type: string\n              format: base64url\n            authenticatorData:\n              type: string\n              format: base64url\n            signature:\n              type: string\n              format: base64url\n            userHandle:\n              type: string\n              format: base64url\n    PublicKeyCredentialAttestationResponse:\n      description: 'WebAuthn API response to a navigator.credentials.create() call'\n      type: object\n      properties:\n        id:\n          type: string\n        rawId:\n          type: string\n        type:\n          type: string\n          enum:\n            - public-key\n        response:\n          type: object\n          properties:\n            clientDataJson:\n              type: string\n              format: base64url\n            attestationObject:\n              type: string\n              format: base64url\n    User:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/UUID4'\n        email:\n          type: string\n          format: email\n        created_at:\n          type: string\n          format: date-time\n        updated_at:\n          type: string\n          format: date-time\n        verified:\n          type: boolean\n        webauthn_credentials:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                format: base64url\n    WebauthnLoginResponse:\n      description: 'Response after a successful login with webauthn'\n      type: object\n      properties:\n        credential_id:\n          type: string\n          format: base64url\n        user_id:\n          type: string\n          format: uuid4\n    UUID4:\n      type: string\n      format: uuid4\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    ErrorWithValidationErrors:\n      allOf:\n        - $ref: '#/components/schemas/Error'\n        - type: object\n          properties:\n            validation_errors:\n              type: array\n              items:\n                type: string\n  securitySchemes:\n    CookieAuth:\n      type: apiKey\n      in: cookie\n      name: HANKOSESSION\n    BearerTokenAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n",
			"canonicalURL": "/github.com/teamhanko/hanko@2a7a95a99e841f1022e8926415c30228f8376c8c/-/blob/docs/spec/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/teamhanko/hanko/blob/2a7a95a99e841f1022e8926415c30228f8376c8c/docs/spec/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/me\": get: security: security \"CookieAuth\" (index 0): cookie security not implemented",
	"NotImplemented": [
		"cookie security"
	]
}