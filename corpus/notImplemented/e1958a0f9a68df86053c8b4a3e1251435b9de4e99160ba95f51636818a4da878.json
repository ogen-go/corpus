{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kyma-incubator/reconciler"
		},
		"file": {
			"name": "external_api.yaml",
			"size": 0,
			"path": "openapi/external_api.yaml",
			"byteSize": 20846,
			"content": "openapi: 3.0.0\ninfo:\n  title: Reconciler mothership external API\n  description: External API describing communication between the mothership component and external client\n  version: 1.0.0\nservers:\n  - url: http://{host}:{port}/{version}\n    variables:\n      host:\n        default: localhost\n        description: Host for server\n      port:\n        default: \"8080\"\n        description: Port for server\n      version:\n        enum:\n          - \"v1\"\n        default: \"v1\"\n\npaths:\n  /operations/{schedulingID}/{correlationID}/stop:\n    post:\n      description: Stop executing of operation if status is NEW\n      parameters:\n        - name: schedulingID\n          required: true\n          in: path\n          schema:\n            type: string\n        - name: correlationID\n          required: true\n          in: path\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/operationStop'\n      responses:\n        '200':\n          description: \"Ok\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          description: \"Return forbidden when operation is in different state than new\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPErrorResponse'\n\n        '404':\n          description: 'Given operation not found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPErrorResponse'\n        '500':\n          $ref: '#/components/responses/InternalError'\n\n  /operations/{schedulingID}/{correlationID}/debug:\n    put:\n      description: \"Enable debug logs for an operation\"\n      parameters:\n        - name: schedulingID\n          required: true\n          in: path\n          schema:\n            type: string\n        - name: correlationID\n          required: true\n          in: path\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: \"Ok\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          description: \"Given operation is not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HTTPErrorResponse\"\n        \"500\":\n          $ref: \"#/components/responses/InternalError\"\n\n  /reconciliations/{schedulingID}/info:\n    get:\n      description: \"Get details of a reconciliation with operations\"\n      parameters:\n        - name: schedulingID\n          required: true\n          in: path\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ReconciliationInfoOKResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"500\":\n          $ref: \"#/components/responses/InternalError\"\n\n  /reconciliations/{schedulingID}/debug:\n    put:\n      description: \"Enable debug logs for all operations that belong to a reconciliation\"\n      parameters:\n        - name: schedulingID\n          required: true\n          in: path\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"Ok\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          description: \"Given reconciliation is not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HTTPErrorResponse\"\n        \"500\":\n          $ref: \"#/components/responses/InternalError\"\n\n  /reconciliations/cluster/{runtimeID}:\n    delete:\n      description: \"Purge reconciliations for specified cluster\"\n      parameters:\n        - name: runtimeID\n          required: true\n          in: path\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: \"Purge Succeded\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"500\":\n           $ref: \"#/components/responses/InternalError\"\n\n  /reconciliations:\n    get:\n      description: \"Get list of current working reconcilers\"\n      parameters:\n        - name: runtimeID\n          required: false\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n              format: uuid\n        - name: before\n          required: false\n          in: query\n          schema:\n            type: string\n            format: date-time\n        - name: after\n          required: false\n          in: query\n          schema:\n            type: string\n            format: date-time\n        - name: last\n          required: false\n          in: query\n          schema:\n            type: integer\n        - name: status\n          required: false\n          in: query\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/status\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ReconcilationsOKResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"500\":\n          $ref: \"#/components/responses/InternalError\"\n\n  /clusters:\n    put:\n      description: update existing cluster\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/cluster\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Ok\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"500\":\n          $ref: \"#/components/responses/InternalError\"\n\n    post:\n      description: create new cluster\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/cluster\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Ok\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"500\":\n          $ref: \"#/components/responses/InternalError\"\n\n  /clusters/{runtimeID}:\n    delete:\n      description: delete cluster\n      parameters:\n        - name: runtimeID\n          required: true\n          in: path\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Ok\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"500\":\n          $ref: \"#/components/responses/InternalError\"\n\n  /clusters/state:\n    get:\n      description: get cluster state. Use one of following parameters\n      parameters:\n        - name: runtimeID\n          required: false\n          in: query\n          schema:\n            type: string\n            format: uuid\n        - name: schedulingID\n          required: false\n          in: query\n          schema:\n            type: string\n            format: uuid\n        - name: correlationID\n          required: false\n          in: query\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: \"Return cluster state\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HTTPClusterStateResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"500\":\n          $ref: \"#/components/responses/InternalError\"\n\n  /clusters/{runtimeID}/status:\n    put:\n      description: update exisiting cluster status\n      parameters:\n        - name: runtimeID\n          required: true\n          in: path\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/statusUpdate\"\n      responses:\n        \"201\":\n          $ref: \"#/components/responses/Ok\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"500\":\n          $ref: \"#/components/responses/InternalError\"\n    get:\n      description: get cluster status\n      parameters:\n        - name: runtimeID\n          required: true\n          in: path\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Ok\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"500\":\n          $ref: \"#/components/responses/InternalError\"\n\n  /clusters/{runtimeID}/config/{version}:\n    get:\n      description: \"Get cluster configuration\"\n      parameters:\n        - name: runtimeID\n          required: true\n          in: path\n          schema:\n            type: string\n            format: uuid\n        - name: version\n          required: true\n          in: path\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/configurationOkResponse\"\n\n  /clusters/{runtimeID}/config/{configVersion}/status:\n    get:\n      description: test\n      parameters:\n        - name: runtimeID\n          required: true\n          in: path\n          schema:\n            type: string\n            format: uuid\n        - name: configVersion\n          required: true\n          in: path\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Ok\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"500\":\n          $ref: \"#/components/responses/InternalError\"\n\n  /clusters/{runtimeID}/statusChanges:\n    get:\n      description: test\n      parameters:\n        - name: runtimeID\n          required: true\n          in: path\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: \"Return list of status changes in cluster\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HTTPClusterStatusResponse\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundResponse\"\n        \"500\":\n          $ref: \"#/components/responses/InternalError\"\n\ncomponents:\n  responses:\n    Ok:\n      description: \"Ok\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/HTTPClusterResponse\"\n\n    configurationOkResponse:\n      description: \"OK\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/HTTPClusterConfig\"\n\n    ReconcilationsOKResponse:\n      description: \"OK\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/HTTPReconcilerStatus\"\n\n    ReconciliationInfoOKResponse:\n      description: \"OK\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/HTTPReconciliationInfo\"\n\n    InternalError:\n      description: \"Internal server error\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/HTTPErrorResponse\"\n\n    BadRequest:\n      description: \"Bad request\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/HTTPErrorResponse\"\n\n    NotFoundResponse:\n      description: \"Given resource not found\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/HTTPErrorResponse\"\n\n  schemas:\n    HTTPClusterStatusResponse:\n      type: object\n      required: [ statusChanges ]\n      properties:\n        statusChanges:\n          type: array\n          items:\n            $ref: \"#/components/schemas/statusChange\"\n\n    HTTPClusterStateResponse:\n      type: object\n      required: [ cluster, configuration, status ]\n      properties:\n        cluster:\n          $ref: \"#/components/schemas/clusterState\"\n        configuration:\n          $ref: \"#/components/schemas/clusterStateConfiguration\"\n        status:\n          $ref: \"#/components/schemas/clusterStateStatus\"\n\n    HTTPClusterConfig:\n      $ref: \"#/components/schemas/kymaConfig\"\n\n    HTTPErrorResponse:\n      type: object\n      required: [ error ]\n      properties:\n        error:\n          type: string\n\n    HTTPClusterResponse:\n      type: object\n      required:\n        [ cluster, clusterVersion, configurationVersion, status, statusURL ]\n      properties:\n        cluster:\n          type: string\n          format: uuid\n        clusterVersion:\n          type: integer\n          format: int64\n        configurationVersion:\n          type: integer\n          format: int64\n        failures:\n          type: array\n          items:\n            $ref: \"#/components/schemas/failure\"\n        status:\n          $ref: \"#/components/schemas/status\"\n        statusURL:\n          type: string\n          format: uri\n\n    HTTPReconciliationInfo:\n      type: object\n      required: [ runtimeID, schedulingID, configVersion, created, updated, status,operations, finished ]\n      properties:\n        runtimeID:\n          type: string\n        schedulingID:\n          type: string\n        configVersion:\n          type: integer\n          format: int64\n        created:\n          type: string\n          format: date-time\n        updated:\n          type: string\n          format: date-time\n        status:\n          $ref: \"#/components/schemas/status\"\n        finished:\n          type: boolean\n        operations:\n          type: array\n          items:\n            $ref: \"#/components/schemas/operation\"\n\n    HTTPReconcilerStatus:\n      type: array\n      items:\n        $ref: \"#/components/schemas/reconciliation\"\n    \n    clusterState:\n      type: object\n      properties:\n        version:\n          type: integer\n          format: int64\n        runtimeID:\n          type: string\n          format: uuid\n        runtime:\n          $ref: \"#/components/schemas/runtimeInput\"\n        metadata:\n          $ref: \"#/components/schemas/metadata\"\n        contract:\n          type: integer\n          format: int64\n        created:\n          type: string\n          format: date-time\n    \n    clusterStateConfiguration:\n      type: object\n      properties:\n        version:\n          type: integer\n          format: int64\n        runtimeID:\n          type: string\n          format: uuid\n        clusterVersion:\n          type: integer\n          format: int64\n        kymaVersion:\n          type: string\n        kymaProfile:\n          type: string\n        components:\n          type: array\n          items:\n            $ref: \"#/components/schemas/component\"\n        administrators:\n          type: array\n          items:\n            type: string\n        contract:\n          type: integer\n          format: int64\n        deleted:\n          type: boolean\n        created:\n          type: string\n          format: date-time\n\n    clusterStateStatus:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        runtimeID:\n          type: string\n          format: uuid\n        clusterVersion:\n          type: integer\n          format: int64\n        configVersion:\n          type: integer\n          format: int64\n        status:\n          $ref: \"#/components/schemas/status\"\n        deleted:\n          type: boolean\n        created:\n          type: string\n          format: date-time\n\n    reconciliation:\n      type: object\n      required:\n        [ lock, runtimeID, shootName, schedulingID, created, updated, status, finished ]\n      properties:\n        lock:\n          type: string\n        runtimeID:\n          type: string\n        schedulingID:\n          type: string\n        created:\n          type: string\n          format: date-time\n        updated:\n          type: string\n          format: date-time\n        status:\n          $ref: \"#/components/schemas/status\"\n        finished:\n          type: boolean\n\n    operation:\n      type: object\n      required:\n        [\n            priority,\n            schedulingID,\n            correlationID,\n            component,\n            state,\n            reason,\n            created,\n            updated,\n            type,\n        ]\n      properties:\n        priority:\n          type: integer\n          format: int64\n        schedulingID:\n          type: string\n          format: uuid\n        correlationID:\n          type: string\n          format: uuid\n        component:\n          type: string\n        state:\n          type: string # TODO: this should be enum\n        reason:\n          type: string\n        created:\n          type: string\n          format: date-time\n        updated:\n          type: string\n          format: date-time\n        type:\n          type: string\n\n    operationStop:\n      type: object\n      required: [ reason ]\n      properties:\n        reason:\n          type: string\n\n    reconcilerStatus:\n      type: object\n      required: [ cluster, metadata, created, status ]\n      properties:\n        cluster:\n          type: string\n        metadata:\n          $ref: \"#/components/schemas/metadata\"\n        created:\n          type: string\n          format: date-time\n        status:\n          type: string\n\n    statusChange:\n      type: object\n      required: [ started, duration, status ]\n      properties:\n        started:\n          type: string\n          format: date-time\n        duration:\n          #TODO: what to do with time.Duration\n          type: integer\n          format: int64\n        status:\n          $ref: \"#/components/schemas/status\"\n\n    statusUpdate:\n      type: object\n      required: [ status ]\n      properties:\n        status:\n          $ref: \"#/components/schemas/status\"\n\n    status:\n      type: string\n      enum:\n        - reconcile_pending\n        - reconcile_disabled\n        - ready\n        - error\n        - reconciling\n        - delete_pending\n        - delete_error\n        - deleting\n        - deleted\n        - reconcile_error_retryable\n        - delete_error_retryable\n\n    failure:\n      type: object\n      required: [ component, reason ]\n      properties:\n        component:\n          type: string\n        reason:\n          type: string\n\n    cluster:\n      type: object\n      required: [ runtimeID, runtimeInput, kymaConfig, metadata, kubeconfig ]\n      properties:\n        runtimeID:\n          type: string\n          format: uuid\n        runtimeInput:\n          $ref: \"#/components/schemas/runtimeInput\"\n        kymaConfig:\n          $ref: \"#/components/schemas/kymaConfig\"\n        metadata:\n          $ref: \"#/components/schemas/metadata\"\n        kubeconfig:\n          description: \"valid kubeconfig to cluster\"\n          type: string\n\n    runtimeInput:\n      type: object\n      required: [ name, description ]\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n\n    kymaConfig:\n      type: object\n      required: [ version, profile, components, administrators ]\n      properties:\n        version:\n          type: string\n        profile:\n          type: string\n        components:\n          type: array\n          items:\n            $ref: \"#/components/schemas/component\"\n        administrators:\n          type: array\n          items:\n            type: string\n\n    metadata:\n      type: object\n      required:\n        [\n            globalAccountID,\n            subAccountID,\n            serviceID,\n            servicePlanID,\n            servicePlanName,\n            shootName,\n            instanceID,\n            region,\n        ]\n      properties:\n        globalAccountID:\n          type: string\n        subAccountID:\n          type: string\n        serviceID:\n          type: string\n        servicePlanID:\n          type: string\n        servicePlanName:\n          type: string\n        shootName:\n          type: string\n        instanceID:\n          type: string\n        region:\n          type: string\n\n    component:\n      type: object\n      required: [ component, namespace, configuration, URL, version ]\n      properties:\n        component:\n          type: string\n        namespace:\n          type: string\n        configuration:\n          type: array\n          items:\n            $ref: \"#/components/schemas/configuration\"\n        URL:\n          type: string\n          format: uri\n        version:\n          type: string\n\n    configuration:\n      type: object\n      required: [ key, value, secret ]\n      properties:\n        key:\n          type: string\n        value:\n          anyOf:\n            - type: string\n            - type: boolean\n            - type: integer\n            - type: number\n        secret:\n          type: boolean\n",
			"canonicalURL": "/github.com/kyma-incubator/reconciler@5ff701d373650dc494cabc588bd902277b187f6a/-/blob/openapi/external_api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/kyma-incubator/reconciler/blob/5ff701d373650dc494cabc588bd902277b187f6a/openapi/external_api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/clusters/{runtimeID}/config/{version}\": get: responses: 200: contents: application/json: generate schema: field components: item: field configuration: item: field value: anyOf: complex anyOf not implemented",
	"NotImplemented": [
		"complex anyOf"
	]
}