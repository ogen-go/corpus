{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/authelia/authelia"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "api/openapi.yml",
			"byteSize": 39169,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  title: Authelia API\n  description: \u003e\n    Authelia is an open-source authentication and authorization server providing 2-factor authentication and single\n    sign-on (SSO) for your applications via a web portal.\n  contact:\n    name: Authelia Support\n    url: https://github.com/authelia/authelia#contact-options\n    email: team@authelia.com\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0\n  version: 1.0.0\ntags:\n  - name: State\n    description: Configuration, health and state endpoints\n  - name: Authentication\n    description: Authentication and verification endpoints\n  - name: Password Reset\n    description: Password reset endpoints\n  - name: User Information\n    description: User configuration endpoints\n  - name: Second Factor\n    description: TOTP, Webauthn and Duo endpoints\npaths:\n  /api/configuration:\n    get:\n      tags:\n        - State\n      summary: Application Configuration\n      description: \u003e\n        The configuration endpoint provides detailed information including available second factor methods, if any\n        second factor policies exist and the TOTP period configuration.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.configuration.ConfigurationBody'\n        \"403\":\n          description: Forbidden\n      security:\n        - authelia_auth: []\n  /api/configuration/password-policy:\n    get:\n      tags:\n        - State\n      summary: Password Policy Configuration\n      description: \u003e\n        The password policy configuration endpoint provides a password policy for resetting passwords.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.configuration.PasswordPolicyConfigurationBody'\n  /api/health:\n    get:\n      tags:\n        - State\n      summary: Application Health\n      description: The health check endpoint provides information about the health of Authelia.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n  /api/state:\n    get:\n      tags:\n        - State\n      summary: User Application State\n      description: \u003e\n        The state endpoint provides detailed information including the user, current authenticate level and Authelia's\n        configured default redirection URL.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.StateResponse'\n  /api/verify:\n    get:\n      tags:\n        - Authentication\n      summary: Verification\n      description: \u003e\n        The verify endpoint provides the ability to verify if a user has the necessary permissions to access a specified\n        domain.\n      parameters:\n        - $ref: '#/components/parameters/originalURLParam'\n        - $ref: '#/components/parameters/forwardedMethodParam'\n        - $ref: '#/components/parameters/authParam'\n      responses:\n        \"200\":\n          description: Successful Operation\n          headers:\n            remote-user:\n              description: Username\n              schema:\n                type: string\n                example: john\n            remote-name:\n              description: Name\n              schema:\n                type: string\n                example: John Doe\n            remote-email:\n              description: Email\n              schema:\n                type: string\n                example: john.doe@authelia.com\n            remote-groups:\n              description: Comma separated list of Groups\n              schema:\n                type: string\n                example: admin,devs\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n    head:\n      tags:\n        - Authentication\n      summary: Verification\n      description: \u003e\n        The verify endpoint provides the ability to verify if a user has the necessary permissions to access a specified\n        domain.\n      parameters:\n        - $ref: '#/components/parameters/originalURLParam'\n        - $ref: '#/components/parameters/forwardedMethodParam'\n        - $ref: '#/components/parameters/authParam'\n      responses:\n        \"200\":\n          description: Successful Operation\n          headers:\n            remote-user:\n              description: Username\n              schema:\n                type: string\n                example: john\n            remote-name:\n              description: Name\n              schema:\n                type: string\n                example: John Doe\n            remote-email:\n              description: Email\n              schema:\n                type: string\n                example: john.doe@authelia.com\n            remote-groups:\n              description: Comma separated list of Groups\n              schema:\n                type: string\n                example: admin,devs\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n  /api/firstfactor:\n    post:\n      tags:\n        - Authentication\n      summary: Login\n      description: \u003e\n        The firstfactor endpoint allows a user to login and generates an authentication cookie for authorization.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.firstFactorRequestBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.redirectResponse'\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n  /api/checks/safe-redirection:\n    post:\n      tags:\n        - Authentication\n      summary: Check whether URI is safe to redirect to.\n      description: \u003e\n        End users usually needs to be redirected to a target website after authentication. This endpoint aims to check\n        if target URL is safe to redirect to. This prevents open redirect attacks.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.checkURIWithinDomainRequestBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.checkURIWithinDomainResponseBody'\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n  /api/logout:\n    post:\n      tags:\n        - Authentication\n      summary: Logout\n      description: The logout endpoint allows a user to logout and destroy a sesssion.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.logoutRequestBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.logoutResponseBody'\n      security:\n        - authelia_auth: []\n  /api/reset-password/identity/start:\n    post:\n      tags:\n        - Password Reset\n      summary: Identity Verification Token Creation\n      description: \u003e\n        This endpoint is step 1 of 3 in the password reset process.\n\n        It validates the user session and sends the user an email with a token and a link to reset their password. This\n        step also generates a session cookie for the rest of the process.\n\n        The same session cookie must be used for all steps in this process.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.resetPasswordStep1RequestBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n      security:\n        - authelia_auth: []\n  /api/reset-password/identity/finish:\n    post:\n      tags:\n        - Password Reset\n      summary: Identity Verification Token Validation\n      description: \u003e\n        This endpoint is step 2 of 3 in the password reset process.\n\n        It validates the user session and reset token.\n\n        The same session cookie must be used for all steps in this process.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/middlewares.IdentityVerificationFinishBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n      security:\n        - authelia_auth: []\n  /api/reset-password:\n    post:\n      tags:\n        - Password Reset\n      summary: Password Reset\n      description: \u003e\n        This endpoint is step 3 of 3 in the password reset process.\n\n        It validates the user session and changes the password.\n\n        The same session cookie must be used for all steps in this process.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.resetPasswordStep2RequestBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n      security:\n        - authelia_auth: []\n  /api/user/info:\n    get:\n      tags:\n        - User Information\n      summary: User Configuration\n      description: \u003e\n        The user info endpoint provides detailed information including a users display name, preferred and registered\n        second factor method(s).\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.UserInfo'\n        \"403\":\n          description: Forbidden\n      security:\n        - authelia_auth: []\n    post:\n      tags:\n        - User Information\n      summary: User Configuration\n      description: \u003e\n        The user info endpoint provides detailed information including a users display name, preferred and registered\n        second factor method(s). The POST method also ensures the preferred method is configured correctly.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.UserInfo'\n        \"403\":\n          description: Forbidden\n      security:\n        - authelia_auth: []\n  /api/user/info/totp:\n    get:\n      tags:\n        - User Information\n      summary: User TOTP Configuration\n      description: \u003e\n        The user TOTP info endpoint provides information necessary to display the TOTP component to validate their\n        TOTP input such as the period/frequency and number of digits.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.UserInfoTOTP'\n        \"403\":\n          description: Forbidden\n      security:\n        - authelia_auth: []\n  /api/user/info/2fa_method:\n    post:\n      tags:\n        - User Information\n      summary: User Configuration\n      description: The user info 2fa_method endpoint sets the users preferred second factor method.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.UserInfo.MethodBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n        \"403\":\n          description: Forbidden\n      security:\n        - authelia_auth: []\n  /api/secondfactor/totp/identity/start:\n    post:\n      tags:\n        - Second Factor\n      summary: Identity Verification TOTP Token Creation\n      description: \u003e\n        This endpoint performs identity verification to begin the TOTP device registration process.\n\n        The session generated from this endpoint must be utilised for the subsequent step in the\n        `/api/secondfactor/totp/identity/finish` endpoint.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n      security:\n        - authelia_auth: []\n  /api/secondfactor/totp/identity/finish:\n    post:\n      tags:\n        - Second Factor\n      summary: Identity Verification TOTP Token Validation and Device Creation\n      description: \u003e\n        This endpoint performs identity and token verification, upon success also generates TOTP device secret and\n        registers said device.\n\n        The session cookie generated from the `/api/secondfactor/totp/identity/start` endpoint must be utilised for the\n        step here.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/middlewares.IdentityVerificationFinishBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.TOTPKeyResponse'\n      security:\n        - authelia_auth: []\n  /api/secondfactor/totp:\n    post:\n      tags:\n        - Second Factor\n      summary: Second Factor Authentication - TOTP\n      description: This endpoint performs second factor authentication with a TOTP key.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.signTOTPRequestBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.redirectResponse'\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.ErrorResponse'\n      security:\n        - authelia_auth: []\n  /api/secondfactor/webauthn/assertion:\n    get:\n      tags:\n        - Second Factor\n      summary: Second Factor Authentication - Webauthn (Request)\n      description: This endpoint starts the second factor authentication process with the FIDO2 Webauthn credential.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/webauthn.PublicKeyCredentialRequestOptions'\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n    post:\n      tags:\n        - Second Factor\n      summary: Second Factor Authentication - Webauthn\n      description: This endpoint completes the second factor authentication process with the FIDO2 Webauthn credential.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/webauthn.CredentialAssertionResponse\"\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.redirectResponse'\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n  /api/secondfactor/webauthn/identity/start:\n    post:\n      tags:\n        - Second Factor\n      summary: Identity Verification Webauthn Credential Creation\n      description: \u003e\n        This endpoint performs identity verification to begin the FIDO2 Webauthn credential attestation process\n        (registration).\n\n        The session generated from this endpoint must be utilised for the subsequent steps in the\n        `/api/secondfactor/webauthn/identity/finish` and `/api/secondfactor/webauthn/attestation` endpoints.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n      security:\n        - authelia_auth: []\n  /api/secondfactor/webauthn/identity/finish:\n    post:\n      tags:\n        - Second Factor\n      summary: Identity Verification FIDO2 Webauthn Credential Validation\n      description: \u003e\n        This endpoint performs identity and token verification, upon success generates a FIDO2 Webauthn device\n        attestation challenge (registration).\n\n        The session cookie generated from the `/api/secondfactor/webauthn/identity/start` endpoint must be utilised\n        for the subsequent steps here and in the `/api/secondfactor/webauthn/attestation` endpoint.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/middlewares.IdentityVerificationFinishBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/webauthn.PublicKeyCredentialCreationOptions'\n      security:\n        - authelia_auth: []\n  /api/secondfactor/webauthn/attestation:\n    post:\n      tags:\n        - Second Factor\n      summary: Webauthn Credential Attestation\n      description: This endpoint performs Webauthn credential attestation (registration).\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/webauthn.CredentialAttestationResponse'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n      security:\n        - authelia_auth: []\n  /api/secondfactor/duo:\n    post:\n      tags:\n        - Second Factor\n      summary: Second Factor Authentication - Duo Mobile Push\n      description: This endpoint performs second factor authentication with a Duo Mobile Push.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.signDuoRequestBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.redirectResponse'\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n  /api/secondfactor/duo_devices:\n    get:\n      tags:\n        - Second Factor\n      summary: Second Factor Authentication - Duo Mobile Push\n      description: This endpoint retreives a users available devices and capabilities from Duo.\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/handlers.DuoDevicesResponse'\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\n  /api/secondfactor/duo_device:\n    post:\n      tags:\n        - Second Factor\n      summary: Second Factor Authentication - Duo Mobile Push\n      description: This endpoint updates the users preferred Duo device and method.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/handlers.DuoDeviceBody'\n      responses:\n        \"200\":\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/middlewares.OkResponse'\n        \"401\":\n          description: Unauthorized\n      security:\n        - authelia_auth: []\ncomponents:\n  parameters:\n    originalURLParam:\n      name: X-Original-URL\n      in: header\n      description: Redirection URL\n      required: true\n      style: simple\n      explode: true\n      schema:\n        type: string\n    forwardedMethodParam:\n      name: X-Forwarded-Method\n      in: header\n      description: Request Method\n      required: false\n      style: simple\n      explode: true\n      schema:\n        type: string\n        enum:\n          - \"GET\"\n          - \"HEAD\"\n          - \"POST\"\n          - \"PUT\"\n          - \"PATCH\"\n          - \"DELETE\"\n          - \"TRACE\"\n          - \"CONNECT\"\n          - \"OPTIONS\"\n          - \"COPY\"\n          - \"LOCK\"\n          - \"MKCOL\"\n          - \"MOVE\"\n          - \"PROPFIND\"\n          - \"PROPPATCH\"\n          - \"UNLOCK\"\n    authParam:\n      name: auth\n      in: query\n      description: Switch authorization header and prompt for basic auth\n      required: false\n      schema:\n        type: string\n        enum: [\"basic\"]\n  schemas:\n    handlers.checkURIWithinDomainRequestBody:\n      type: object\n      properties:\n        uri:\n          type: string\n          example: https://secure.example.com\n    handlers.checkURIWithinDomainResponseBody:\n      type: object\n      properties:\n        ok:\n          type: boolean\n          example: true\n          description: If redirection URL is safe.\n    handlers.configuration.ConfigurationBody:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            available_methods:\n              type: array\n              description: List of available 2FA methods. If no methods exist 2FA is disabled.\n              items:\n                enum:\n                  - \"totp\"\n                  - \"webauthn\"\n                  - \"mobile_push\"\n              example: [totp, webauthn, mobile_push]\n    handlers.configuration.PasswordPolicyConfigurationBody:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            mode:\n              type: string\n              description: The password policy mode.\n              enum:\n                - \"disabled\"\n                - \"standard\"\n                - \"zxcvbn\"\n            min_length:\n              type: integer\n              description: The minimum password length when using the standard mode.\n            max_length:\n              type: integer\n              description: The maximum password length when using the standard mode.\n            min_score:\n              type: integer\n              description: The minimum password score when using the zxcvbn mode.\n            require_uppercase:\n              type: boolean\n              description: If uppercase characters are required when using the standard mode.\n            require_lowercase:\n              type: boolean\n              description: If uppercase characters are required when using the standard mode.\n            require_number:\n              type: boolean\n              description: If numeric characters are required when using the standard mode.\n            require_special:\n              type: boolean\n              description: If special characters are required when using the standard mode.\n    handlers.DuoDeviceBody:\n      required:\n        - device\n        - method\n      type: object\n      properties:\n        device:\n          type: string\n          example: ABCDE123456789FGHIJK\n        method:\n          type: string\n          example: push\n    handlers.DuoDevicesResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            result:\n              type: string\n              example: auth\n            devices:\n              type: array\n              items:\n                type: object\n                properties:\n                  device:\n                    type: string\n                    example: ABCDE123456789FGHIJK\n                  display_name:\n                    type: string\n                    example: iOS (+XX XXX XXX 123)\n                  capabilities:\n                    type: array\n                    items:\n                      type: string\n                      example: push\n    handlers.firstFactorRequestBody:\n      required:\n        - username\n        - password\n      type: object\n      properties:\n        username:\n          type: string\n          example: john\n        password:\n          type: string\n          example: password\n        targetURL:\n          type: string\n          example: https://home.example.com\n        requestMethod:\n          type: string\n          example: GET\n        keepMeLoggedIn:\n          type: boolean\n          example: true\n    handlers.logoutRequestBody:\n      type: object\n      properties:\n        targetURL:\n          type: string\n          example: https://redirect.example.com\n    handlers.logoutResponseBody:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            safeTargetURL:\n              type: boolean\n              example: true\n    handlers.redirectResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            redirect:\n              type: string\n              example: https://home.example.com\n    handlers.resetPasswordStep1RequestBody:\n      required:\n        - username\n      type: object\n      properties:\n        username:\n          type: string\n          example: john\n    handlers.resetPasswordStep2RequestBody:\n      required:\n        - password\n      type: object\n      properties:\n        password:\n          type: string\n          example: password\n    handlers.signDuoRequestBody:\n      type: object\n      properties:\n        targetURL:\n          type: string\n          example: https://secure.example.com\n    handlers.signTOTPRequestBody:\n      type: object\n      properties:\n        token:\n          type: string\n          example: \"123456\"\n        targetURL:\n          type: string\n          example: https://secure.example.com\n    handlers.StateResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            username:\n              type: string\n              example: john\n            authentication_level:\n              type: integer\n              example: 1\n            default_redirection_url:\n              type: string\n              example: https://home.example.com\n    handlers.TOTPKeyResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            base32_secret:\n              type: string\n              example: 5ZH7Y5CTFWOXN7EOLGBMMXADRNQFHVUDZSYKCN5HMFAIRSLAWY3Q\n            otpauth_url:\n              type: string\n              example: otpauth://totp/auth.example.com:john?algorithm=SHA1\u0026digits=6\u0026issuer=auth.example.com\u0026period=30\u0026secret=5ZH7Y5CTFWOXN7EOLGBMMXADRNQFHVUDZSYKCN5HMFAIRSLAWY3Q  # yamllint disable-line rule:line-length\n    handlers.UserInfo:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            display_name:\n              type: string\n              example: John Doe\n            method:\n              type: string\n              enum:\n                - \"totp\"\n                - \"webauthn\"\n                - \"mobile_push\"\n              example: totp\n            has_webauthn:\n              type: boolean\n              example: false\n            has_totp:\n              type: boolean\n              example: true\n            has_duo:\n              type: boolean\n              example: true\n    handlers.UserInfoTOTP:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            period:\n              default: 30\n              description: The period defined in the users TOTP configuration\n              type: integer\n              example: 30\n            digits:\n              default: 6\n              description: The number of digits defined in the users TOTP configuration\n              type: integer\n              example: 6\n    handlers.UserInfo.MethodBody:\n      required:\n        - method\n      type: object\n      properties:\n        method:\n          type: string\n          enum:\n            - \"totp\"\n            - \"webauthn\"\n            - \"mobile_push\"\n          example: totp\n    middlewares.ErrorResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          example: KO\n        message:\n          type: string\n          example: Authentication failed, please retry later.\n    middlewares.IdentityVerificationFinishBody:\n      required:\n        - token\n      type: object\n      properties:\n        token:\n          type: string\n          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MDc5MjU1OTYsImlzcyI6IkF1dGhlbGlhIiwiYWN0aW9uIjoiUmVzZXRQYXNzd29yZCIsInVzZXJuYW1lIjoiQW1pciJ9.636yqRrUCGCe4jsMCsonleX5CYWHncYqZum-YYb6VaY  # yamllint disable-line rule:line-length\n    middlewares.OkResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n    webauthn.PublicKeyCredential:\n      type: object\n      properties:\n        rawId:\n          type: string\n          format: byte\n        id:\n          type: string\n        type:\n          type: string\n    webauthn.AuthenticatorResponse:\n      type: object\n      properties:\n        clientDataJSON:\n          type: string\n          format: byte\n    webauthn.CredentialAttestationResponse:\n      allOf:\n        - $ref: '#/components/schemas/webauthn.PublicKeyCredential'\n        - type: object\n          properties:\n            clientExtensionResults:\n              type: object\n              properties:\n                appidExclude:\n                  type: boolean\n            response:\n              allOf:\n                - $ref: '#/components/schemas/webauthn.AuthenticatorResponse'\n                - type: object\n                  properties:\n                    attestationObject:\n                      type: string\n                      format: byte\n    webauthn.CredentialAssertionResponse:\n      allOf:\n        - $ref: '#/components/schemas/webauthn.PublicKeyCredential'\n        - type: object\n          properties:\n            response:\n              allOf:\n                - $ref: '#/components/schemas/webauthn.AuthenticatorResponse'\n                - type: object\n                  required: [authenticatorData, clientDataJSON, signature]\n                  properties:\n                    authenticatorData:\n                      type: string\n                      format: byte\n                    clientDataJSON:\n                      type: string\n                      format: byte\n                    clientExtensionResults:\n                      type: object\n                      properties:\n                        appid:\n                          type: boolean\n                          example: false\n                    signature:\n                      type: string\n                      format: byte\n                    userHandle:\n                      type: string\n                      format: byte\n    webauthn.PublicKeyCredentialCreationOptions:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            publicKey:\n              allOf:\n                - $ref: '#/components/schemas/webauthn.AttestationType'\n                - $ref: '#/components/schemas/webauthn.AuthenticatorSelectionCriteria'\n                - $ref: '#/components/schemas/webauthn.CredentialUserEntity'\n                - $ref: '#/components/schemas/webauthn.CredentialRPEntity'\n                - type: object\n                  required:\n                    - \"challenge\"\n                    - \"pubKeyCredParams\"\n                  properties:\n                    challenge:\n                      type: string\n                      format: byte\n                    pubKeyCredParams:\n                      type: array\n                      items:\n                        type: object\n                        required:\n                          - \"alg\"\n                          - \"type\"\n                        properties:\n                          alg:\n                            type: integer\n                          type:\n                            type: string\n                            example: public-key\n                            enum:\n                              - \"public-key\"\n                    timeout:\n                      type: integer\n                      example: 60000\n                    excludeCredentials:\n                      type: array\n                      items:\n                        allOf:\n                          - $ref: '#/components/schemas/webauthn.CredentialDescriptor'\n                    extensions:\n                      type: object\n                      properties:\n                        appidExclude:\n                          type: string\n                          example: https://auth.example.com\n    webauthn.PublicKeyCredentialRequestOptions:\n      type: object\n      properties:\n        status:\n          type: string\n          example: OK\n        data:\n          type: object\n          properties:\n            publicKey:\n              allOf:\n                - $ref: '#/components/schemas/webauthn.UserVerification'\n                - type: object\n                  required:\n                    - \"challenge\"\n                  properties:\n                    challenge:\n                      type: string\n                    timeout:\n                      type: integer\n                      example: 60000\n                    rpId:\n                      type: string\n                      example: auth.example.com\n                    allowCredentials:\n                      type: array\n                      items:\n                        allOf:\n                          - $ref: '#/components/schemas/webauthn.CredentialDescriptor'\n                    extensions:\n                      type: object\n                      properties:\n                        appid:\n                          type: string\n                          example: https://auth.example.com\n    webauthn.Transports:\n      type: object\n      properties:\n        transports:\n          type: array\n          items:\n            type: string\n            example:\n              - \"usb\"\n              - \"nfc\"\n            enum:\n              - \"usb\"\n              - \"nfc\"\n              - \"ble\"\n              - \"internal\"\n    webauthn.UserVerification:\n      type: object\n      properties:\n        userVerification:\n          type: string\n          example: preferred\n          enum:\n            - \"required\"\n            - \"preferred\"\n            - \"discouraged\"\n    webauthn.AttestationType:\n      type: object\n      properties:\n        attestation:\n          type: string\n          example: direct\n          enum:\n            - \"none\"\n            - \"indirect\"\n            - \"direct\"\n    webauthn.AuthenticatorSelectionCriteria:\n      type: object\n      properties:\n        authenticatorSelection:\n          type: object\n          properties:\n            authenticatorAttachment:\n              type: string\n              example: cross-platform\n              enum:\n                - \"platform\"\n                - \"cross-platform\"\n            residentKey:\n              type: string\n              example: discouraged\n              enum:\n                - \"discouraged\"\n                - \"preferred\"\n                - \"required\"\n            requireResidentKey:\n              type: boolean\n    webauthn.CredentialDescriptor:\n      allOf:\n        - $ref: '#/components/schemas/webauthn.Transports'\n        - type: object\n          required:\n            - \"id\"\n            - \"type\"\n          properties:\n            id:\n              type: string\n              format: byte\n            type:\n              type: string\n              example: public-key\n              enum:\n                - \"public-key\"\n    webauthn.CredentialEntity:\n      type: object\n      required:\n        - \"id\"\n        - \"name\"\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        icon:\n          type: string\n    webauthn.CredentialRPEntity:\n      type: object\n      required:\n        - \"rp\"\n      properties:\n        rp:\n          allOf:\n            - $ref: '#/components/schemas/webauthn.CredentialEntity'\n    webauthn.CredentialUserEntity:\n      type: object\n      required:\n        - \"user\"\n      properties:\n        user:\n          allOf:\n            - $ref: '#/components/schemas/webauthn.CredentialEntity'\n            - type: object\n              required:\n                - \"displayName\"\n              properties:\n                displayName:\n                  type: string\n    webauthn.AuthenticationExtensionsClientOutputs:\n      type: object\n      properties:\n        clientExtensionResults:\n          type: object\n          properties:\n            appid:\n              type: boolean\n              example: true\n            appidExclude:\n              type: boolean\n              example: false\n            uvm:\n              type: array\n              items:\n                type: string\n                format: byte\n            credProps:\n              type: object\n              properties:\n                rk:\n                  type: boolean\n                  example: false\n            largeBlob:\n              type: object\n              properties:\n                supported:\n                  type: boolean\n                  example: false\n                blob:\n                  type: string\n                written:\n                  type: boolean\n                  example: false\n  securitySchemes:\n    authelia_auth:\n      type: apiKey\n      name: \"{{.Session}}\"\n      in: cookie\n...\n",
			"canonicalURL": "/github.com/authelia/authelia@352b360a50cf32897649315cd1907e5f44f2cb73/-/blob/api/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/authelia/authelia/blob/352b360a50cf32897649315cd1907e5f44f2cb73/api/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/secondfactor/duo_devices\": get: security: security \"authelia_auth\" (index 0): cookie security not implemented",
	"NotImplemented": [
		"cookie security"
	]
}