{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/siemens.platformcore.identitymanagement/openapi.yml",
			"byteSize": 36385,
			"content": "openapi: 3.0.1\ninfo:\n  title: Identity Management API\n  description: |-\n    This is a generated connector from [Siemens identity management API](https://developer.mindsphere.io/apis/core-identitymanagement/api-identitymanagement-overview.html) OpenAPI Specification.\n    The Identity Management API provides a means form managing users, groups and OAuth clients.\u003cbr\u003e The user and group management is based on SCIM (System for Cross-domain Identity Management).\u003cbr\u003e\u003cbr\u003e \u003ci\u003eNote:\u003c/i\u003e Unless stated otherwise the Identity Management APIs allow each caller only to act within the context of the tenant to which the caller belong's to.\u003c/br\u003e\n    \u003ci\u003eNote2:\u003c/i\u003e UIAM stands for User Identity Access Management, since users and providers are separated in system. Therefore this API documentation is related to users generally.\n  version: 3.3.0\n  x-visibility: external\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials. \n \n    Create a (Siemens MindSphere)(https://siemens.mindsphere.io/en) account and obtain tokens by following [this guide](https://developer.mindsphere.io/howto/howto-selfhosted-api-access.html)\n  x-ballerina-display:\n   label: Siemens Platform Core Identity Management\n   iconPath: \"icon.png\"\n\ntags:\n- name: uiam user\n  description: API for Managing Users in a Tenant\n- name: uiam group\n  description: API for Managing Roles/Groups \u0026 Roles/Group Memberships of Users in\n    a Tenant\u003cbr\u003e\u003ci\u003eNote:\u003c/i\u003e Roles and groups are made available under /Groups.\u003cbr\u003e\u003ci\u003eReserved\n    displayNames:\u003c/i\u003e starting with \"mdspiam:subtenant:\"\npaths:\n  /Groups:\n    get:\n      tags:\n      - uiam group\n      summary: List all the groups of a tenant.\n      description: List all the groups of a tenant.\n      operationId: listGroups\n      parameters:\n      - name: filter\n        in: query\n        description: 'SCIM filter for searching see [here](http://www.simplecloud.info/specs/draft-scim-api-01.html).\n          The available filter attributes are: id, displayname, created or meta.created,\n          lastmodified or meta.lastmodified, version or meta.version'\n        schema:\n          type: string\n      - name: count\n        in: query\n        description: Number of objects to be returned (defaults to 100)\n        schema:\n          type: number\n          default: 100.0\n      - name: startIndex\n        in: query\n        description: The starting index of the search results when paginated. Index\n          starts with 1.\n        schema:\n          type: number\n          default: 1.0\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScimGroupSearchResults'\n        401:\n          description: Unauthorized\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      security:\n      - im_group_auth:\n        - im.g.r\n    post:\n      tags:\n      - uiam group\n      summary: Create group\n      description: Create a group.\n      operationId: createGroup\n      requestBody:\n        description: Details of group\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScimGroupPost'\n        required: true\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScimGroup'\n        400:\n          description: Bad request\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        409:\n          description: Conflict\n          content: {}\n      security:\n      - im_group_auth:\n        - im.g.c\n      x-codegen-request-body-name: group\n  /Groups/{id}:\n    get:\n      tags:\n      - uiam group\n      summary: Get group\n      description: Get details of a group.\u003cbr/\u003eExample path \u003cb\u003e/api/identitymanagement/v3/Groups/68af46d-e9b8-4t04-5a20-7d557f5da8d\n      operationId: getGroup\n      parameters:\n      - name: id\n        in: path\n        description: Id of group\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScimGroup'\n        401:\n          description: Unauthorized\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      security:\n      - im_group_auth:\n        - im.g.r\n    put:\n      tags:\n      - uiam group\n      summary: Update group.\n      description: Update details of a group. If any field is left empty or is is\n        omitted, it will be null.\u003cbr/\u003eExample path \u003cb\u003e/api/identitymanagement/v3/Groups/68af46d-e9b8-4t04-5a20-7d557f5da8d\n      operationId: updateGroup\n      parameters:\n      - name: id\n        in: path\n        description: Id of group\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: New details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScimGroupPost'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScimGroup'\n        400:\n          description: Bad request\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      security:\n      - im_group_auth:\n        - im.g.u\n      x-codegen-request-body-name: group\n    delete:\n      tags:\n      - uiam group\n      summary: Delete group\n      description: Delete group and every connection to that group, too.\u003cbr/\u003eExample\n        path \u003cb\u003e/api/identitymanagement/v3/Groups/68af46d-e9b8-4t04-5a20-7d557f5da8d\n      operationId: deleteGroup\n      parameters:\n      - name: id\n        in: path\n        description: Id of the group\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScimGroup'\n        401:\n          description: Unauthorized\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      security:\n      - im_group_auth:\n        - im.g.d\n  /Groups/{id}/members:\n    get:\n      tags:\n      - uiam group\n      summary: List members of a group\n      description: List the members (both users and groups) of a group.\u003cbr/\u003eExample\n        path \u003cb\u003e/api/identitymanagement/v3/Groups/68af46d-e9b8-4t04-5a20-7d557f5da8d/members\n      operationId: listGroupMembers\n      parameters:\n      - name: id\n        in: path\n        description: Id of group\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScimGroupMemberList'\n        401:\n          description: Unauthorized\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      security:\n      - im_group_auth:\n        - im.g.r\n    post:\n      tags:\n      - uiam group\n      summary: Add member to a group\n      description: Add new member (either user or group) to an existing group.\u003cbr/\u003eExample\n        path \u003cb\u003e/api/identitymanagement/v3/Groups/68af46d-e9b8-4t04-5a20-7d557f5da8d/members\n      operationId: addMemberToGroup\n      parameters:\n      - name: id\n        in: path\n        description: Id of group\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: Details of the new member\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScimGroupMember'\n        required: true\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScimGroupMember'\n        400:\n          description: Bad request\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n        409:\n          description: Conflict\n          content: {}\n      security:\n      - im_group_auth:\n        - im.g.u\n      x-codegen-request-body-name: member\n  /Groups/{id}/members/{memberId}:\n    delete:\n      tags:\n      - uiam group\n      summary: Delete member from a group\n      description: Delete member (either user or group) from a group.\u003cbr/\u003eExample\n        path \u003cb\u003e/api/identitymanagement/v3/Groups/68af46d-e9b8-4t04-5a20-7d557f5da8d/members/e74ff46d-8bb8-4d04-b420-7d557fe86a8d\n      operationId: removeMemberFromGroup\n      parameters:\n      - name: id\n        in: path\n        description: Id of user group\n        required: true\n        schema:\n          type: string\n      - name: memberId\n        in: path\n        description: Id of member\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScimGroupMember'\n        401:\n          description: Unauthorized\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      security:\n      - im_group_auth:\n        - im.g.u\n  /Users:\n    get:\n      tags:\n      - uiam user\n      summary: List of users of a tenant.\n      description: List of users of a tenant. Please note, in order to request only\n        the list of users (without the information to which group a user belongs)\n        it is recommended to make use of the \"attributes\" query parameter as follows\n        /Users?attributes=userName,name,meta (this will significantly improve the\n        performance over simply calling /Users).\n      operationId: list\n      parameters:\n      - name: filter\n        in: query\n        description: |\n          \"SCIM filter for searching see [here](http://www.simplecloud.info/specs/draft-scim-api-01.html). The available filter attributes are: id, username, email or emails.value, givenname, familyname, active, phonenumber, verified, origin, created or meta.created, lastmodified or meta.lastmodified, version or meta.version, groups.display.\n          \u003c/br\u003e\n          \u003cb\u003eNote\u003c/b\u003e: \u003ci\u003egroups.display\u003c/i\u003e parameter cannot be used in complex filter expression and only \u003ci\u003eeq\u003c/i\u003e operator is allowed eg. \u003ci\u003efilter=groups.display eq \"MyGroupName\"\u003c/i\u003e\n        schema:\n          type: string\n      - name: attributes\n        in: query\n        description: Comma separated list of attribute names to be returned, e.g.,\n          userName, name, meta. The attributes parameters does not support the parameter\n          \"subtenants\".\n        schema:\n          type: string\n      - name: sortBy\n        in: query\n        description: Sorting field name, like email or id\n        schema:\n          type: string\n      - name: sortOrder\n        in: query\n        description: Sort order, ascending/descending (defaults to ascending)\n        schema:\n          type: string\n          default: ascending\n      - name: count\n        in: query\n        description: Number of objects to be returned (defaults to 100)\n        schema:\n          type: number\n          default: 100.0\n      - name: startIndex\n        in: query\n        description: The starting index of the search results when paginated. Index\n          starts with 1 (defaults to 1).\n        schema:\n          type: number\n          default: 1.0\n      - name: subtenant\n        in: query\n        description: Filter for subtenant users\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScimUserResponseSearchResults'\n        401:\n          description: Unauthorized\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      security:\n      - im_user_auth:\n        - im.usr.r\n    post:\n      tags:\n      - uiam user\n      summary: Create user\n      description: 'Create a new user in a tenant.\u003cbr/\u003e\u003cbr/\u003e \u003cb\u003eNote\u003c/b\u003e: The ‘subtenants’\n        field is optional. If it is present, the user is considered to be a subtenant\n        user.'\n      operationId: create\n      requestBody:\n        description: Details of user\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScimUserPost'\n        required: true\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScimUserPostResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n        409:\n          description: Conflict\n          content: {}\n      security:\n      - im_user_auth:\n        - im.usr.c\n      x-codegen-request-body-name: user\n  /Users/{id}:\n    get:\n      tags:\n      - uiam user\n      summary: Get user\n      description: Get details of a user.\u003cbr/\u003eExample path \u003cb\u003e/api/identitymanagement/v3/Users/2f95913-d3d9-4a4a-951a-c21184080cf3\n      operationId: get\n      parameters:\n      - name: id\n        in: path\n        description: Id of user\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScimUserResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      security:\n      - im_user_auth:\n        - im.usr.r\n    put:\n      tags:\n      - uiam user\n      summary: Update user\n      description: 'Update details of user.\u003cbr/\u003e\u003cbr/\u003e \u003cb\u003eNote\u003c/b\u003e: Username must not\n        be changed. Email address is required and must be equal to the username.\u003cbr/\u003eThe\n        ‘subtenants’ field is optional. If it is present, the user is considered to\n        be a subtenant user. Upgrading a subtenant user to a tenant user and vice\n        versa is not allowed.\u003cbr/\u003eExample path \u003cb\u003e/api/identitymanagement/v3/Users/2f95913-d3d9-4a4a-951a-c21184080cf3'\n      operationId: update\n      parameters:\n      - name: id\n        in: path\n        description: Id of user\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: New details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScimUserPut'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScimUserResponse'\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      security:\n      - im_user_auth:\n        - im.usr.u\n      x-codegen-request-body-name: user\n    delete:\n      tags:\n      - uiam user\n      summary: Delete user\n      description: Delete user of tenant.\u003cbr/\u003e Note that tenant can have user if it\n        purchased at least the \u003cb\u003esimple\u003c/b\u003e offering.\u003cbr/\u003eExample path \u003cb\u003e/api/identitymanagement/v3/Users/2f95913-d3d9-4a4a-951a-c21184080cf3\n      operationId: delete\n      parameters:\n      - name: id\n        in: path\n        description: Id of user\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScimUserResponse'\n        401:\n          description: Unauthorized\n          content: {}\n      security:\n      - im_user_auth:\n        - im.usr.d\n  /Users/me:\n    get:\n      tags:\n      - uiam user\n      summary: Get list of groups starting with the prefix \"mdsp:\" in which the user\n        is a member.\n      description: Get list of groups starting with the prefix \"mdsp:\" in which the\n        user is a member.\n      operationId: getUserRoles\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Group'\n        401:\n          description: Unauthorized\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      security:\n      - im_user_auth:\n        - im.usr.me\n  /provider/oauth/clients/{id}:\n    get:\n      tags:\n      - piam oauth client\n      summary: Get OAuth client details\n      description: |-\n        Get details of OAuth client currently in use.\n        Example path \u003cb\u003e/api/identitymanagement/v3/provider/oauth/clients/assetManagementClient\u003c/b\u003e\n      operationId: getProviderOAuthClient\n      parameters:\n      - name: id\n        in: path\n        description: Id of your client. It must be the same as the `client_id` claim\n          in the bearer token.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OAuthClient'\n        400:\n          description: The `id` path parameter is different from the `client_id` claim\n            of the bearer token.\n          content: {}\n        401:\n          description: Unauthorized.\n          content: {}\n        403:\n          description: Insufficient priviledge.\n          content: {}\n        404:\n          description: No client exists with the given client id.\n          content: {}\n        500:\n          description: Internal server error.\n          content: {}\n      security:\n      - im_client_auth:\n        - prv.oc.r\n  /provider/oauth/clients/{id}/secrets:\n    put:\n      tags:\n      - piam oauth client\n      summary: Update OAuth client's secret\n      description: Replaces current client's secret(s) with new one. If a new secret\n        is not provided, it will be automatically generated. If the scope is `prv.oc.sec.ch`,\n        then the client can change it's own secret and needs to provide its old secret.\n        If the scope is `prv.oc.sec.admin`, then it can change arbitrary client secret\n        in the tenant. This is for technical users only.\n      operationId: updateSecret\n      parameters:\n      - name: id\n        in: path\n        description: Client identifier\n        required: true\n        schema:\n          type: string\n      - name: Current-Secret\n        in: header\n        description: Required, unless your have `prv.oc.sec.admin` scope. It is used\n          to make sure the requestor has permission to modify the given client's secret.\n        schema:\n          type: string\n      requestBody:\n        description: Parameters of the new secret.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChangeSecretRequest'\n        required: true\n      responses:\n        200:\n          description: Secret has been changed successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChangedSecretResponse'\n        400:\n          description: Invalid request.\n          content: {}\n        401:\n          description: Authorization information is missing or invalid.\n          content: {}\n        403:\n          description: Insufficient priviledge.\n          content: {}\n        404:\n          description: Client id was not found.\n          content: {}\n        500:\n          description: Internal server error.\n          content: {}\n      security:\n      - im_client_auth:\n        - prv.oc.sec.ch\n        - prv.oc.sec.admin\n      x-codegen-request-body-name: newSecretRequest\n    post:\n      tags:\n      - piam oauth client\n      summary: Add new OAuth client's secret\n      description: Introduce new secret. If a new secret is not provided, it will\n        be automatically generated. Up to two client secrets are supported. If the\n        scope is `prv.oc.sec.ch`, then the client can change it's own secret and needs\n        to provide its old secret. If the scope is `prv.oc.sec.admin`, then it can\n        change arbitrary client secret in the tenant. This is for technical users\n        only.\n      operationId: createSecret\n      parameters:\n      - name: id\n        in: path\n        description: Client identifier\n        required: true\n        schema:\n          type: string\n      - name: Current-Secret\n        in: header\n        description: Required, unless your have `prv.oc.sec.admin` scope. It is used\n          to make sure the requestor has permission to modify the given client's secret.\n        schema:\n          type: string\n      requestBody:\n        description: Parameters of the new secret.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChangeSecretRequest'\n        required: true\n      responses:\n        200:\n          description: Secret has been added successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChangedSecretResponse'\n        400:\n          description: Invalid request.\n          content: {}\n        401:\n          description: Authorization information is missing or invalid.\n          content: {}\n        403:\n          description: Insufficient priviledge.\n          content: {}\n        404:\n          description: Client id was not found.\n          content: {}\n        500:\n          description: Internal server error.\n          content: {}\n      security:\n      - im_client_auth:\n        - prv.oc.sec.ch\n        - prv.oc.sec.admin\n      x-codegen-request-body-name: newSecretRequest\n    delete:\n      tags:\n      - piam oauth client\n      summary: Delete old OAuth client's secret\n      description: Delete the old client's secret. If there is only one secret, the\n        request will fail. If the scope is `prv.oc.sec.ch`, then the client can change\n        it's own secret and needs to provide its old secret. If the scope is `prv.oc.sec.admin`,\n        then it can change arbitrary client secret in the tenant. This is for technical\n        users only.\n      operationId: deleteSecret\n      parameters:\n      - name: id\n        in: path\n        description: Client identifier\n        required: true\n        schema:\n          type: string\n      - name: Current-Secret\n        in: header\n        description: Required, unless your have `prv.oc.sec.admin` scope. It is used\n          to make sure the requestor has permission to modify the given client's secret.\n        schema:\n          type: string\n      responses:\n        204:\n          description: Older secret has been removed successfully.\n          content: {}\n        400:\n          description: Invalid request.\n          content: {}\n        401:\n          description: Authorization information is missing or invalid.\n          content: {}\n        403:\n          description: Insufficient priviledge.\n          content: {}\n        404:\n          description: Client id was not found.\n          content: {}\n        500:\n          description: Internal server error.\n          content: {}\n      security:\n      - im_client_auth:\n        - prv.oc.sec.ch\n        - prv.oc.sec.admin\ncomponents:\n  schemas:\n    Email:\n      required:\n      - value\n      type: object\n      properties:\n        value:\n          type: string\n          description: The email address.\n          example: johndoe@example.com\n    Group:\n      required:\n      - display\n      type: object\n      properties:\n        display:\n          type: string\n          example: mdsp:core:StandardUser\n        type:\n          type: string\n          example: DIRECT\n          enum:\n          - DIRECT\n          - INDIRECT\n        value:\n          type: string\n          example: 85300c9f-9616-4596-ac1c-1ca837426d7e\n    NameRequest:\n      description: Name request\n      required:\n      - familyName\n      - givenName\n      type: object\n      properties:\n        familyName:\n          type: string\n          example: Doe\n          description: Family name\n        givenName:\n          description: Given name\n          type: string\n          example: John\n    UserName:\n      maxLength: 60\n      pattern: ^[a-zA-Z0-9._%+\u0026*-]+(?:\\.[a-zA-Z0-9_+\u0026*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$\n      type: string\n      description: The e-mail address of the user.\n      format: email\n      example: johndoe@example.com\n    NameResponse:\n      type: object\n      properties:\n        familyName:\n          type: string\n          example: Doe\n        givenName:\n          type: string\n          example: John\n    ScimGroupPost:\n      required:\n      - displayName\n      type: object\n      properties:\n        description:\n          type: string\n          description: Human readable description of the group, displayed e.g. when\n            approving scopes\n          example: Very amazing group for amazing people\n        displayName:\n          type: string\n          description: The identifier specified upon creation of the group, unique\n            within the identity zone\n          example: AmazingGroup\n        members:\n          type: array\n          description: If given members array is empty, all members will be deleted.\n          items:\n            $ref: '#/components/schemas/ScimGroupMember'\n    ScimGroup:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The globally unique group ID\n          example: 68af46d-e9b8-4t04-5a20-7d557f5da8d\n        description:\n          type: string\n          description: Human readable description of the group, displayed e.g. when\n            approving scopes\n          example: Very amazing group for amazing people\n        displayName:\n          type: string\n          description: The identifier specified upon creation of the group, unique\n            within the identity zone\n          example: AmazingGroup\n        members:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScimGroupMember'\n        meta:\n          $ref: '#/components/schemas/ScimMeta'\n    ScimGroupMember:\n      required:\n      - type\n      - value\n      type: object\n      properties:\n        type:\n          type: string\n          description: Either \"USER\" or \"GROUP\"\n          example: USER\n          enum:\n          - USER\n          - GROUP\n        value:\n          type: string\n          description: Globally unique identifier of the member, either a user ID\n            or another group ID\n          example: e74ff46d-8bb8-4d04-b420-7d557fe86a8d\n    ScimMeta:\n      type: object\n      properties:\n        created:\n          type: string\n          format: date-time\n          example: 2018-02-08T15:20:43Z\n        lastModified:\n          type: string\n          format: date-time\n          example: 2018-02-08T15:20:43Z\n        version:\n          type: integer\n          format: int32\n          example: 0\n    ScimUserPut:\n      required:\n      - emails\n      - name\n      - userName\n      type: object\n      properties:\n        active:\n          type: boolean\n          description: False means a soft delete.\n        name:\n          $ref: '#/components/schemas/NameRequest'\n        userName:\n          $ref: '#/components/schemas/UserName'\n        emails:\n          description: An array of emails\n          type: array\n          items:\n            $ref: '#/components/schemas/Email'\n        subtenants:\n          description: An array of subtenants.\n          type: array\n          items:\n            $ref: '#/components/schemas/SubtenantId'\n      description: 'Name object can be null. Example: \"name\": {}. Name attributes\n        are fetched from WebKey during authentication.'\n    ScimUserPost:\n      required:\n      - userName\n      type: object\n      properties:\n        active:\n          type: boolean\n          description: False means a soft delete.\n        name:\n          $ref: '#/components/schemas/NameRequest'\n        userName:\n          $ref: '#/components/schemas/UserName'\n        subtenants:\n          type: array\n          items:\n            $ref: '#/components/schemas/SubtenantId'\n    ScimUserResponse:\n      type: object\n      properties:\n        schemas:\n          type: array\n          items:\n            type: string\n            example: urn:scim:schemas:core:1.0\n        id:\n          type: string\n          example: 2f95913-d3d9-4a4a-951a-c21184080cf3\n        userName:\n          type: string\n          description: The e-mail address of the user.\n          example: johndoe@example.com\n        name:\n          $ref: '#/components/schemas/NameResponse'\n        groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/Group'\n        emails:\n          type: array\n          items:\n            $ref: '#/components/schemas/Email'\n        active:\n          type: boolean\n        meta:\n          $ref: '#/components/schemas/ScimMeta'\n        subtenants:\n          type: array\n          items:\n            $ref: '#/components/schemas/SubtenantId'\n    ScimUserPostResponse:\n      type: object\n      properties:\n        schemas:\n          type: array\n          items:\n            type: string\n            example: urn:scim:schemas:core:1.0\n        id:\n          type: string\n          example: 2f95913-d3d9-4a4a-951a-c21184080cf3\n        userName:\n          type: string\n          description: The e-mail address of the user.\n          example: johndoe@example.com\n        name:\n          $ref: '#/components/schemas/NameResponse'\n        groups:\n          type: array\n          example: []\n          items:\n            $ref: '#/components/schemas/Group'\n        emails:\n          type: array\n          items:\n            $ref: '#/components/schemas/Email'\n        active:\n          type: boolean\n        meta:\n          $ref: '#/components/schemas/ScimMeta'\n        subtenants:\n          type: array\n          items:\n            $ref: '#/components/schemas/SubtenantId'\n    ScimGroupMemberList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ScimGroupMember'\n    ScimGroupSearchResults:\n      type: object\n      properties:\n        itemsPerPage:\n          type: integer\n          format: int32\n          example: 100\n        resources:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScimGroup'\n        schemas:\n          type: array\n          items:\n            type: string\n            example: urn:scim:schemas:core:1.0\n        startIndex:\n          type: integer\n          format: int32\n          example: 1\n        totalResults:\n          type: integer\n          format: int32\n          example: 1\n    ScimUserResponseSearchResults:\n      type: object\n      properties:\n        itemsPerPage:\n          type: integer\n          format: int32\n          example: 100\n        resources:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScimUserResponse'\n        schemas:\n          type: array\n          items:\n            type: string\n        startIndex:\n          type: integer\n          format: int32\n          example: 1\n        totalResults:\n          type: integer\n          format: int32\n          example: 1\n    SubtenantId:\n      required:\n      - id\n      type: object\n      properties:\n        id:\n          type: string\n          description: The ID / name of the subtenant.\n          example: octopus\n      example:\n        id: octopus\n    OAuthClient:\n      type: object\n      properties:\n        clientId:\n          type: string\n          description: Identifier of the client, unique within the identity zone\n        authorizedGrantTypes:\n          type: array\n          description: List of grant types that can be used to obtain a token with\n            this client. Can include authorization_code, password, implicit, and/or\n            client_credentials.\n          example:\n          - client_credentials\n          items:\n            type: string\n        redirectUri:\n          type: array\n          example:\n          - https://coreservicesqa-appname.eu-central-rc.mindapps.io/login\n          items:\n            type: string\n        name:\n          type: string\n          description: A human readable name for the client\n          example: Client for calling assetmanagement\n        authorities:\n          type: array\n          description: Scopes which the client is able to grant when creating a client.\n            Defaults to \"uaa.none\". E.g. with client_credentials as authorized_grant_types,\n            the client will get the scopes listed here.\n          example:\n          - client.r\n          - client.u\n          items:\n            type: string\n        scopes:\n          type: array\n          description: Scopes allowed for the client. Defaults to \"uaa.none\". E.g.\n            with *password* as authorized_grant_types the user can get the intersection\n            of his scopes and the scopes listed here.\n          example:\n          - client.c\n          - client.d\n          items:\n            type: string\n        lastModified:\n          type: integer\n          description: Epoch (milliseconds) of the moment the client information was\n            last altered. Not affected by secret changes.\n          format: int64\n          example: 1530798206000\n        secretCreationTimes:\n          $ref: '#/components/schemas/ClientSecretCreationTimes'\n    ClientSecretCreationTimes:\n      type: array\n      description: |-\n        Epoch (milliseconds) of the moment the client secret was introduced. Array contains creation times in ascending order.\n        Most of the time it should contain only one item, except during secret rotation - in that case, two items will be there.\n      example:\n      - 1530798206000\n      - 1550842313000\n      items:\n        type: integer\n        format: int64\n    ChangeSecretRequest:\n      type: object\n      properties:\n        newSecret:\n          type: string\n          description: |\n            New secret for the client. Must meet the following requirements:\n              * alphabet is a-zA-Z0-9\n              * minimum 43 characters\n              * maximum 255 characters\n            If parameter is missing, then new secret will be generated.\n    ChangedSecretResponse:\n      type: object\n      properties:\n        secret:\n          type: string\n          description: the new secret.\n  securitySchemes:\n    im_user_auth:\n      type: oauth2\n      description: User controller based scopes\n      flows:\n        authorizationCode:\n          authorizationUrl: http://UAA_DOMAIN/oauth/authorize\n          tokenUrl: http://UAA_DOMAIN/oauth/token\n          scopes:\n            im.usr.c: Create user\n            im.usr.r: See details of user; List users\n            im.usr.u: Update details of user\n            im.usr.d: Delete user\n            im.usr.me: See the assigened roles of the user\n    im_group_auth:\n      type: oauth2\n      description: Group controller based scopes\n      flows:\n        authorizationCode:\n          authorizationUrl: http://UAA_DOMAIN/oauth/authorize\n          tokenUrl: http://UAA_DOMAIN/oauth/token\n          scopes:\n            im.g.c: UserUaa - Create group\n            im.g.r: UserUaa - See details of group; UserUaa - List groups; UserUaa\n              - List members of group\n            im.g.u: UserUaa - Update details of group; UserUaa - Add member to group;\n              UserUaa - Remove member of group\n            im.g.d: UserUaa - Delete group\n    im_client_auth:\n      type: oauth2\n      description: OAuth client controller based scopes\n      flows:\n        authorizationCode:\n          authorizationUrl: http://UAA_DOMAIN/oauth/authorize\n          tokenUrl: http://UAA_DOMAIN/oauth/token\n          scopes:\n            prv.oc.r: read client informations\n            prv.oc.sec.ch: Change own client secret\n            prv.oc.sec.admin: Change arbitrary client secret\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/siemens.platformcore.identitymanagement/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/siemens.platformcore.identitymanagement/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/Groups/{id}/members/{memberId}\": delete: security: security \"im_group_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}