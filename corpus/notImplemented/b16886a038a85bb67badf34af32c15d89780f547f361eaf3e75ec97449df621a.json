{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/redhat-developer/app-services-sdk-java"
		},
		"file": {
			"name": "registry-instance-rest.yaml",
			"size": 0,
			"path": ".openapi/registry-instance-rest.yaml",
			"byteSize": 43445,
			"content": "openapi: 3.0.2\ninfo:\n  contact:\n    email: apicurio@lists.jboss.org\n    name: Apicurio\n    url: https://github.com/apicurio/apicurio-registry\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0\n  title: Apicurio Registry API [v2]\n  version: 2.0.1-SNAPSHOT\nservers:\n- description: Main (production) server\n  url: https://api.openshift.com\n- description: Staging server\n  url: https://api.stage.openshift.com\n- description: localhost\n  url: http://localhost:8000\n- description: current domain\n  url: /\ntags:\n- description: \"The primary way to interact with the Apicurio Registry API is to add,\\\n    \\ update, \\nor delete artifacts. This section includes all of these primary operations.\"\n  name: Artifacts\npaths:\n  /api/service-registry/v2/ids/contentIds/{contentId}:\n    get:\n      description: |\n        Gets the content for an artifact version in the registry using the unique content\n        identifier for that content.  This content ID may be shared by multiple artifact\n        versions in the case where the artifact versions are identical.\n\n        This operation may fail for one of the following reasons:\n\n        * No content with this `contentId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getContentById\n      parameters:\n      - description: Global identifier for a single artifact content.\n        explode: false\n        in: path\n        name: contentId\n        required: true\n        schema:\n          format: int64\n          type: integer\n        style: simple\n      responses:\n        \"200\":\n          content:\n            '*/*':\n              examples:\n                OpenAPI:\n                  value:\n                    openapi: 3.0.2\n                    info:\n                      title: Empty API\n                      version: 1.0.0\n                      description: An example API design using OpenAPI.\n              schema:\n                $ref: '#/components/schemas/FileContent'\n          description: The content of one version of one artifact.\n        \"500\":\n          content:\n            application/json:\n              examples:\n                ErrorExample:\n                  value:\n                    error_code: 500\n                    message: Lost connection to the database.\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Common response for all operations that can fail with an unexpected\n            server error.\n        \"404\":\n          content:\n            application/json:\n              examples:\n                NotFoundExample:\n                  value:\n                    error_code: 404\n                    message: No artifact with id 'Topic-1/Inbound' could be found.\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Common response for all operations that can return a `404`\n            error.\n      summary: Get artifact content by ID\n      tags:\n      - Artifacts\n    summary: Access artifact content utilizing the unique content identifier for that\n      content.\n  /api/service-registry/v2/groups/{groupId}/artifacts:\n    delete:\n      description: Deletes all of the artifacts that exist in a given group.\n      operationId: deleteArtifactsInGroup\n      parameters:\n      - description: Unique ID of an artifact group.\n        explode: false\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: '#/components/schemas/GroupId'\n        style: simple\n      responses:\n        \"204\":\n          description: When the delete operation is successful, a simple 204 is returned.\n        \"500\":\n          content:\n            application/json:\n              examples:\n                ErrorExample:\n                  value:\n                    error_code: 500\n                    message: Lost connection to the database.\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Common response for all operations that can fail with an unexpected\n            server error.\n      summary: Deletes all artifacts in a group\n      tags:\n      - Artifacts\n    get:\n      description: Returns a list of all artifacts in the group.  This list is paged.\n      operationId: listArtifactsInGroup\n      parameters:\n      - description: Unique ID of an artifact group.\n        explode: false\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: '#/components/schemas/GroupId'\n        style: simple\n      - description: The number of artifacts to return.  Defaults to 20.\n        explode: true\n        in: query\n        name: limit\n        required: false\n        schema:\n          type: integer\n        style: form\n      - description: The number of artifacts to skip before starting the result set.  Defaults\n          to 0.\n        explode: true\n        in: query\n        name: offset\n        required: false\n        schema:\n          type: integer\n        style: form\n      - description: Sort order, ascending (`asc`) or descending (`desc`).\n        explode: true\n        in: query\n        name: order\n        required: false\n        schema:\n          $ref: '#/components/schemas/SortOrder'\n        style: form\n      - description: |\n          The field to sort by.  Can be one of:\n\n          * `name`\n          * `createdOn`\n        explode: true\n        in: query\n        name: orderby\n        required: false\n        schema:\n          $ref: '#/components/schemas/SortBy'\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ArtifactSearchResults'\n          description: On a successful response, returns a bounded set of artifacts.\n        \"500\":\n          content:\n            application/json:\n              examples:\n                ErrorExample:\n                  value:\n                    error_code: 500\n                    message: Lost connection to the database.\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Common response for all operations that can fail with an unexpected\n            server error.\n      summary: List artifacts in group\n      tags:\n      - Artifacts\n    post:\n      description: \"Creates a new artifact by posting the artifact content.  The body\\\n        \\ of the request should\\nbe the raw content of the artifact.  This is typically\\\n        \\ in JSON format for *most* of the \\nsupported types, but may be in another\\\n        \\ format for a few (for example, `PROTOBUF`).\\n\\nThe registry attempts to\\\n        \\ figure out what kind of artifact is being added from the\\nfollowing supported\\\n        \\ list:\\n\\n* Avro (`AVRO`)\\n* Protobuf (`PROTOBUF`)\\n* JSON Schema (`JSON`)\\n\\\n        * Kafka Connect (`KCONNECT`)\\n* OpenAPI (`OPENAPI`)\\n* AsyncAPI (`ASYNCAPI`)\\n\\\n        * GraphQL (`GRAPHQL`)\\n* Web Services Description Language (`WSDL`)\\n* XML\\\n        \\ Schema (`XSD`)\\n\\nAlternatively, you can specify the artifact type using\\\n        \\ the `X-Registry-ArtifactType` \\nHTTP request header, or include a hint in\\\n        \\ the request's `Content-Type`.  For example:\\n\\n```\\nContent-Type: application/json;\\\n        \\ artifactType=AVRO\\n```\\n\\nAn artifact is created using the content provided\\\n        \\ in the body of the request.  This\\ncontent is created under a unique artifact\\\n        \\ ID that can be provided in the request\\nusing the `X-Registry-ArtifactId`\\\n        \\ request header.  If not provided in the request,\\nthe server generates a\\\n        \\ unique ID for the artifact.  It is typically recommended\\nthat callers provide\\\n        \\ the ID, because this is typically a meaningful identifier, \\nand for most\\\n        \\ use cases should be supplied by the caller.\\n\\nIf an artifact with the provided\\\n        \\ artifact ID already exists, the default behavior\\nis for the server to reject\\\n        \\ the content with a 409 error.  However, the caller can\\nsupply the `ifExists`\\\n        \\ query parameter to alter this default behavior. The `ifExists`\\nquery parameter\\\n        \\ can have one of the following values:\\n\\n* `FAIL` (*default*) - server rejects\\\n        \\ the content with a 409 error\\n* `UPDATE` - server updates the existing artifact\\\n        \\ and returns the new metadata\\n* `RETURN` - server does not create or add\\\n        \\ content to the server, but instead \\nreturns the metadata for the existing\\\n        \\ artifact\\n* `RETURN_OR_UPDATE` - server returns an existing **version**\\\n        \\ that matches the \\nprovided content if such a version exists, otherwise\\\n        \\ a new version is created\\n\\nThis operation may fail for one of the following\\\n        \\ reasons:\\n\\n* An invalid `ArtifactType` was indicated (HTTP error `400`)\\n\\\n        * No `ArtifactType` was indicated and the server could not determine one from\\\n        \\ the content (HTTP error `400`)\\n* Provided content (request body) was empty\\\n        \\ (HTTP error `400`)\\n* An artifact with the provided ID already exists (HTTP\\\n        \\ error `409`)\\n* The content violates one of the configured global rules\\\n        \\ (HTTP error `409`)\\n* A server error occurred (HTTP error `500`)\\n\"\n      operationId: createArtifact\n      parameters:\n      - description: Unique ID of an artifact group.\n        explode: false\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: '#/components/schemas/GroupId'\n        style: simple\n      - description: |-\n          Specifies the type of the artifact being added. Possible values include:\n\n          * Avro (`AVRO`)\n          * Protobuf (`PROTOBUF`)\n          * JSON Schema (`JSON`)\n          * Kafka Connect (`KCONNECT`)\n          * OpenAPI (`OPENAPI`)\n          * AsyncAPI (`ASYNCAPI`)\n          * GraphQL (`GRAPHQL`)\n          * Web Services Description Language (`WSDL`)\n          * XML Schema (`XSD`)\n        explode: false\n        in: header\n        name: X-Registry-ArtifactType\n        required: false\n        schema:\n          $ref: '#/components/schemas/ArtifactType'\n        style: simple\n      - description: A client-provided, globally unique identifier for the new artifact.\n        explode: false\n        in: header\n        name: X-Registry-ArtifactId\n        required: false\n        schema:\n          type: string\n        style: simple\n      - description: |-\n          Specifies the version number of this initial version of the artifact content.  This would typically\n          be a simple integer or a SemVer value.  If not provided, the server will assign a version number\n          automatically (starting with version `1`).\n        explode: false\n        in: header\n        name: X-Registry-Version\n        required: false\n        schema:\n          $ref: '#/components/schemas/Version'\n        style: simple\n      - description: Set this option to instruct the server on what to do if the artifact\n          already exists.\n        explode: true\n        in: query\n        name: ifExists\n        required: false\n        schema:\n          $ref: '#/components/schemas/IfExists'\n        style: form\n      - description: Used only when the `ifExists` query parameter is set to `RETURN_OR_UPDATE`,\n          this parameter can be set to `true` to indicate that the server should \"canonicalize\"\n          the content when searching for a matching version.  The canonicalization\n          algorithm is unique to each artifact type, but typically involves removing\n          extra whitespace and formatting the content in a consistent manner.\n        explode: true\n        in: query\n        name: canonical\n        required: false\n        schema:\n          type: boolean\n        style: form\n      requestBody:\n        content:\n          '*/*':\n            examples:\n              OpenAPI Example:\n                value:\n                  openapi: 3.0.2\n                  info:\n                    title: Empty API\n                    version: 1.0.7\n                    description: An example API design using OpenAPI.\n                  paths:\n                    /widgets:\n                      get:\n                        responses:\n                          \"200\":\n                            content:\n                              application/json:\n                                schema:\n                                  type: array\n                                  items:\n                                    type: string\n                            description: All widgets\n                        summary: Get widgets\n                  components:\n                    schemas:\n                      Widget:\n                        title: Root Type for Widget\n                        description: A sample data type.\n                        type: object\n                        properties:\n                          property-1:\n                            type: string\n                          property-2:\n                            type: boolean\n                        example:\n                          property-1: value1\n                          property-2: true\n            schema:\n              $ref: '#/components/schemas/FileContent'\n        description: |\n          The content of the artifact being created. This is often, but not always, JSON data\n          representing one of the supported artifact types:\n\n          * Avro (`AVRO`)\n          * Protobuf (`PROTOBUF`)\n          * JSON Schema (`JSON`)\n          * Kafka Connect (`KCONNECT`)\n          * OpenAPI (`OPENAPI`)\n          * AsyncAPI (`ASYNCAPI`)\n          * GraphQL (`GRAPHQL`)\n          * Web Services Description Language (`WSDL`)\n          * XML Schema (`XSD`)\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ArtifactMetaData'\n          description: Artifact was successfully created.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Common response for all operations that can return a `400`\n            error.\n        \"409\":\n          content:\n            application/json:\n              examples:\n                RuleViolationConflictExample:\n                  value:\n                    error_code: 409\n                    message: The artifact content was invalid\n                    causes:\n                    - description: API is missing a title\n                      context: /info[title]\n                    - description: Operation IDs must be unique\n                      context: /paths[/invoices]/put[operationId]\n              schema:\n                $ref: '#/components/schemas/RuleViolationError'\n          description: Common response used when an input conflicts with existing\n            data.\n        \"500\":\n          content:\n            application/json:\n              examples:\n                ErrorExample:\n                  value:\n                    error_code: 500\n                    message: Lost connection to the database.\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Common response for all operations that can fail with an unexpected\n            server error.\n      summary: Create artifact\n      tags:\n      - Artifacts\n      x-codegen-async: true\n    summary: Manage the collection of artifacts within a single group in the registry.\n  /api/service-registry/v2/groups/{groupId}/artifacts/{artifactId}:\n    delete:\n      description: |-\n        Deletes an artifact completely, resulting in all versions of the artifact also being\n        deleted.  This may fail for one of the following reasons:\n\n        * No artifact with the `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: deleteArtifact\n      parameters:\n      - description: The artifact group ID.  Must be a string provided by the client,\n          representing the name of the grouping of artifacts.\n        explode: false\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: '#/components/schemas/GroupId'\n        style: simple\n      - description: The artifact ID.  Can be a string (client-provided) or UUID (server-generated),\n          representing the unique artifact identifier.\n        explode: false\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          $ref: '#/components/schemas/ArtifactId'\n        style: simple\n      responses:\n        \"204\":\n          description: Returned when the artifact was successfully deleted.\n        \"404\":\n          content:\n            application/json:\n              examples:\n                NotFoundExample:\n                  value:\n                    error_code: 404\n                    message: No artifact with id 'Topic-1/Inbound' could be found.\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Common response for all operations that can return a `404`\n            error.\n        \"500\":\n          content:\n            application/json:\n              examples:\n                ErrorExample:\n                  value:\n                    error_code: 500\n                    message: Lost connection to the database.\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Common response for all operations that can fail with an unexpected\n            server error.\n      summary: Delete artifact\n      tags:\n      - Artifacts\n    get:\n      description: \"Returns the latest version of the artifact in its raw form.  The\\\n        \\ `Content-Type` of the\\nresponse depends on the artifact type.  In most cases,\\\n        \\ this is `application/json`, but \\nfor some types it may be different (for\\\n        \\ example, `PROTOBUF`).\\n\\nThis operation may fail for one of the following\\\n        \\ reasons:\\n\\n* No artifact with this `artifactId` exists (HTTP error `404`)\\n\\\n        * A server error occurred (HTTP error `500`)\\n\"\n      operationId: getLatestArtifact\n      parameters:\n      - description: The artifact group ID.  Must be a string provided by the client,\n          representing the name of the grouping of artifacts.\n        explode: false\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: '#/components/schemas/GroupId'\n        style: simple\n      - description: The artifact ID.  Can be a string (client-provided) or UUID (server-generated),\n          representing the unique artifact identifier.\n        explode: false\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          $ref: '#/components/schemas/ArtifactId'\n        style: simple\n      responses:\n        \"404\":\n          content:\n            application/json:\n              examples:\n                NotFoundExample:\n                  value:\n                    error_code: 404\n                    message: No artifact with id 'Topic-1/Inbound' could be found.\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Common response for all operations that can return a `404`\n            error.\n        \"500\":\n          content:\n            application/json:\n              examples:\n                ErrorExample:\n                  value:\n                    error_code: 500\n                    message: Lost connection to the database.\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Common response for all operations that can fail with an unexpected\n            server error.\n        \"200\":\n          content:\n            '*/*':\n              examples:\n                OpenAPI:\n                  value:\n                    openapi: 3.0.2\n                    info:\n                      title: Empty API\n                      version: 1.0.0\n                      description: An example API design using OpenAPI.\n              schema:\n                $ref: '#/components/schemas/FileContent'\n          description: The content of one version of one artifact.\n      summary: Get latest artifact\n      tags:\n      - Artifacts\n    put:\n      description: |-\n        Updates an artifact by uploading new content.  The body of the request should\n        be the raw content of the artifact.  This is typically in JSON format for *most*\n        of the supported types, but may be in another format for a few (for example, `PROTOBUF`).\n        The type of the content should be compatible with the artifact's type (it would be\n        an error to update an `AVRO` artifact with new `OPENAPI` content, for example).\n\n        The update could fail for a number of reasons including:\n\n        * Provided content (request body) was empty (HTTP error `400`)\n        * No artifact with the `artifactId` exists (HTTP error `404`)\n        * The new content violates one of the rules configured for the artifact (HTTP error `409`)\n        * A server error occurred (HTTP error `500`)\n\n        When successful, this creates a new version of the artifact, making it the most recent\n        (and therefore official) version of the artifact.\n      operationId: updateArtifact\n      parameters:\n      - description: The artifact group ID.  Must be a string provided by the client,\n          representing the name of the grouping of artifacts.\n        explode: false\n        in: path\n        name: groupId\n        required: true\n        schema:\n          $ref: '#/components/schemas/GroupId'\n        style: simple\n      - description: The artifact ID.  Can be a string (client-provided) or UUID (server-generated),\n          representing the unique artifact identifier.\n        explode: false\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          $ref: '#/components/schemas/ArtifactId'\n        style: simple\n      - description: |-\n          Specifies the version number of this new version of the artifact content.  This would typically\n          be a simple integer or a SemVer value.  If not provided, the server will assign a version number\n          automatically.\n        explode: false\n        in: header\n        name: X-Registry-Version\n        required: false\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          '*/*':\n            examples:\n              OpenAPI Example:\n                value:\n                  openapi: 3.0.2\n                  info:\n                    title: Empty API\n                    version: 1.0.7\n                    description: An example API design using OpenAPI.\n                  paths:\n                    /widgets:\n                      get:\n                        responses:\n                          \"200\":\n                            content:\n                              application/json:\n                                schema:\n                                  type: array\n                                  items:\n                                    type: string\n                            description: All widgets\n                        summary: Get widgets\n                  components:\n                    schemas:\n                      Widget:\n                        title: Root Type for Widget\n                        description: A sample data type.\n                        type: object\n                        properties:\n                          property-1:\n                            type: string\n                          property-2:\n                            type: boolean\n                        example:\n                          property-1: value1\n                          property-2: true\n            schema:\n              $ref: '#/components/schemas/FileContent'\n        description: |\n          The new content of the artifact being updated. This is often, but not always, JSON data\n          representing one of the supported artifact types:\n\n          * Avro (`AVRO`)\n          * Protobuf (`PROTOBUF`)\n          * JSON Schema (`JSON`)\n          * Kafka Connect (`KCONNECT`)\n          * OpenAPI (`OPENAPI`)\n          * AsyncAPI (`ASYNCAPI`)\n          * GraphQL (`GRAPHQL`)\n          * Web Services Description Language (`WSDL`)\n          * XML Schema (`XSD`)\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ArtifactMetaData'\n          description: When successful, returns the updated artifact metadata.\n        \"404\":\n          content:\n            application/json:\n              examples:\n                NotFoundExample:\n                  value:\n                    error_code: 404\n                    message: No artifact with id 'Topic-1/Inbound' could be found.\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Common response for all operations that can return a `404`\n            error.\n        \"409\":\n          content:\n            application/json:\n              examples:\n                ConflictExample:\n                  value:\n                    error_code: 409\n                    message: The artifact content was invalid.\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Common response used when an input conflicts with existing\n            data.\n        \"500\":\n          content:\n            application/json:\n              examples:\n                ErrorExample:\n                  value:\n                    error_code: 500\n                    message: Lost connection to the database.\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Common response for all operations that can fail with an unexpected\n            server error.\n      summary: Update artifact\n      tags:\n      - Artifacts\n      x-codegen-async: true\n    summary: Manage a single artifact.\ncomponents:\n  responses:\n    NotFound:\n      content:\n        application/json:\n          examples:\n            NotFoundExample:\n              value:\n                error_code: 404\n                message: No artifact with id 'Topic-1/Inbound' could be found.\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Common response for all operations that can return a `404` error.\n    ServerError:\n      content:\n        application/json:\n          examples:\n            ErrorExample:\n              value:\n                error_code: 500\n                message: Lost connection to the database.\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Common response for all operations that can fail with an unexpected\n        server error.\n    BadRequest:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Common response for all operations that can return a `400` error.\n    Conflict:\n      content:\n        application/json:\n          examples:\n            ConflictExample:\n              value:\n                error_code: 409\n                message: The artifact content was invalid.\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Common response used when an input conflicts with existing data.\n    RuleViolationConflict:\n      content:\n        application/json:\n          examples:\n            RuleViolationConflictExample:\n              value:\n                error_code: 409\n                message: The artifact content was invalid\n                causes:\n                - description: API is missing a title\n                  context: /info[title]\n                - description: Operation IDs must be unique\n                  context: /paths[/invoices]/put[operationId]\n          schema:\n            $ref: '#/components/schemas/RuleViolationError'\n      description: Common response used when an input conflicts with existing data.\n    ArtifactContent:\n      content:\n        '*/*':\n          examples:\n            OpenAPI:\n              value:\n                openapi: 3.0.2\n                info:\n                  title: Empty API\n                  version: 1.0.0\n                  description: An example API design using OpenAPI.\n          schema:\n            $ref: '#/components/schemas/FileContent'\n      description: The content of one version of one artifact.\n  schemas:\n    EditableMetaData:\n      example:\n        name: Artifact Name\n        description: The description of the artifact.\n        labels:\n        - regional\n        - global\n        properties:\n          custom-1: foo\n          custom-2: bar\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        labels:\n          items:\n            type: string\n          type: array\n        properties:\n          additionalProperties:\n            type: string\n          description: User-defined name-value pairs. Name and value must be strings.\n          type: object\n          x-codegen-inline: true\n          x-codegen-type: StringMap\n      title: Root Type for EditableArtifactMetaData\n      type: object\n    VersionMetaData:\n      example:\n        groupId: My-Group\n        id: my-artifact-id\n        version: 1221432\n        type: PROTOBUF\n        name: Artifact Name\n        description: The description of the artifact\n        createdBy: user1\n        createdOn: 2019-05-17T12:00:00Z\n        globalId: 183282932983\n        contentId: 12347\n        labels:\n        - label-1\n        - label-2\n        properties:\n          custom-1: foo\n          custom-2: bar\n      properties:\n        version:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        createdBy:\n          type: string\n        createdOn:\n          format: date-time\n          type: string\n        type:\n          $ref: '#/components/schemas/ArtifactType'\n        globalId:\n          format: int64\n          type: integer\n        state:\n          $ref: '#/components/schemas/ArtifactState'\n        id:\n          description: The ID of a single artifact.\n          example: example-artifact\n          type: string\n        labels:\n          items:\n            type: string\n          type: array\n        properties:\n          additionalProperties:\n            type: string\n          description: User-defined name-value pairs. Name and value must be strings.\n          type: object\n          x-codegen-inline: true\n          x-codegen-type: StringMap\n        groupId:\n          description: An ID of a single artifact group.\n          example: my-group\n          type: string\n        contentId:\n          format: int64\n          type: integer\n      required:\n      - contentId\n      - createdBy\n      - createdOn\n      - globalId\n      - id\n      - type\n      - version\n      title: Root Type for ArtifactVersionMetaData\n      type: object\n    Rule:\n      example:\n        type: VALIDITY\n        config: FULL\n      properties:\n        config:\n          type: string\n        type:\n          $ref: '#/components/schemas/RuleType'\n      required:\n      - config\n      title: Root Type for Rule\n      type: object\n    Error:\n      description: |-\n        All error responses, whether `4xx` or `5xx` will include one of these as the response\n        body.\n      example:\n        error_code: 500\n        message: An error occurred somewhere.\n      properties:\n        message:\n          description: The short error message.\n          type: string\n        error_code:\n          description: The server-side error code.\n          format: int32\n          type: integer\n        detail:\n          description: Full details about the error.  This might contain a server\n            stack trace, for example.\n          type: string\n        name:\n          description: The error name - typically the classname of the exception thrown\n            by the server.\n          type: string\n      title: Root Type for Error\n      type: object\n    RuleType:\n      enum:\n      - VALIDITY\n      - COMPATIBILITY\n      example: VALIDITY\n      type: string\n      x-codegen-package: io.apicurio.registry.types\n    ArtifactType:\n      enum:\n      - AVRO\n      - PROTOBUF\n      - JSON\n      - OPENAPI\n      - ASYNCAPI\n      - GRAPHQL\n      - KCONNECT\n      - WSDL\n      - XSD\n      - XML\n      example: AVRO\n      type: string\n      x-codegen-package: io.apicurio.registry.types\n    UpdateState:\n      example:\n        state: DISABLED\n      properties:\n        state:\n          $ref: '#/components/schemas/ArtifactState'\n      required:\n      - state\n      title: Root Type for UpdateState\n      type: object\n    ArtifactState:\n      description: |\n        Describes the state of an artifact or artifact version.  The following states\n        are possible:\n\n        * ENABLED\n        * DISABLED\n        * DEPRECATED\n      enum:\n      - ENABLED\n      - DISABLED\n      - DEPRECATED\n      type: string\n      x-codegen-package: io.apicurio.registry.types\n    ArtifactSearchResults:\n      description: Describes the response received when searching for artifacts.\n      example:\n        count: 0\n        artifacts:\n        - groupId: My-Group\n          id: Procurement-Invoice\n          name: Artifact Name\n          description: Description of the artifact\n          labels:\n          - current\n          - internal\n          type: AVRO\n          state: ENABLED\n          createdBy: user1\n          createdOn: 2019-03-22T12:51:19Z\n        - groupId: My-Group\n          id: Procurement-Invoice\n          name: Artifact Name\n          description: Description of the artifact\n          labels:\n          - current\n          - internal\n          type: AVRO\n          state: ENABLED\n          createdBy: user1\n          createdOn: 2019-03-22T12:51:19Z\n      properties:\n        artifacts:\n          description: The artifacts returned in the result set.\n          items:\n            $ref: '#/components/schemas/SearchedArtifact'\n          type: array\n        count:\n          description: \"The total number of artifacts that matched the query that\\\n            \\ produced the result set (may be \\nmore than the number of artifacts\\\n            \\ in the result set).\"\n          type: integer\n      required:\n      - artifacts\n      - count\n      type: object\n    SortOrder:\n      enum:\n      - asc\n      - desc\n      type: string\n    VersionSearchResults:\n      description: Describes the response received when searching for artifacts.\n      properties:\n        count:\n          description: |-\n            The total number of versions that matched the query (may be more than the number of versions\n            returned in the result set).\n          type: integer\n        versions:\n          description: The collection of artifact versions returned in the result\n            set.\n          items:\n            $ref: '#/components/schemas/SearchedVersion'\n          type: array\n      required:\n      - count\n      - versions\n      type: object\n    SearchedVersion:\n      description: Models a single artifact from the result set returned when searching\n        for artifacts.\n      example:\n        name: Artifact Version Name\n        description: Description of the artifact version\n        labels:\n        - current\n        - internal\n        type: AVRO\n        state: ENABLED\n        createdOn: 2018-02-10T09:30Z\n        createdBy: some text\n        globalId: 37\n        version: 85\n        properties: {}\n        contentId: 62\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        createdOn:\n          format: date-time\n          type: string\n        createdBy:\n          type: string\n        type:\n          $ref: '#/components/schemas/ArtifactType'\n        labels:\n          items:\n            type: string\n          type: array\n        state:\n          $ref: '#/components/schemas/ArtifactState'\n        globalId:\n          format: int64\n          type: integer\n        version:\n          type: string\n        properties:\n          additionalProperties:\n            type: string\n          description: User-defined name-value pairs. Name and value must be strings.\n          type: object\n          x-codegen-inline: true\n          x-codegen-type: StringMap\n        contentId:\n          format: int64\n          type: integer\n      required:\n      - contentId\n      - createdBy\n      - createdOn\n      - globalId\n      - state\n      - type\n      - version\n      type: object\n    RuleViolationError:\n      allOf:\n      - $ref: '#/components/schemas/RuleViolationError_allOf'\n      - $ref: '#/components/schemas/Error'\n      description: |-\n        All error responses, whether `4xx` or `5xx` will include one of these as the response\n        body.\n      example:\n        error_code: 409\n        message: Artifact failed validation\n        causes:\n        - description: API is missing a title\n          context: /info[title]\n        - description: Operation IDs must be unique\n          context: /paths[/invoices]/put[operationId]\n      title: Root Type for Error\n      type: object\n    RuleViolationCause:\n      example:\n        description: External documentation URL is not valid (it must be formatted\n          as a URL).\n        context: /info/externalDocs[url]\n      properties:\n        description:\n          type: string\n        context:\n          type: string\n      title: Root Type for RuleViolationCause\n      type: object\n    GroupId:\n      description: An ID of a single artifact group.\n      example: my-group\n      type: string\n    ArtifactId:\n      description: The ID of a single artifact.\n      example: example-artifact\n      type: string\n    Version:\n      description: |-\n        A single version of an artifact.  Can be provided by the client when creating a new version,\n        or it can be server-generated.  The value can be any string unique to the artifact, but it is\n        recommended to use a simple integer or a semver value.\n      example: 3.1.6\n      type: string\n    SearchedArtifact:\n      description: Models a single artifact from the result set returned when searching\n        for artifacts.\n      example:\n        groupId: My-Group\n        id: Procurement-Invoice\n        name: Artifact Name\n        description: Description of the artifact\n        labels:\n        - current\n        - internal\n        type: AVRO\n        state: ENABLED\n        createdBy: user1\n        createdOn: 2019-03-22T12:51:19Z\n      properties:\n        id:\n          description: The ID of a single artifact.\n          example: example-artifact\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        createdOn:\n          format: date-time\n          type: string\n        createdBy:\n          type: string\n        type:\n          $ref: '#/components/schemas/ArtifactType'\n        labels:\n          items:\n            type: string\n          type: array\n        state:\n          $ref: '#/components/schemas/ArtifactState'\n        modifiedOn:\n          format: date-time\n          type: string\n        modifiedBy:\n          type: string\n        groupId:\n          description: An ID of a single artifact group.\n          example: my-group\n          type: string\n      required:\n      - createdBy\n      - createdOn\n      - group\n      - id\n      - state\n      - type\n      type: object\n    ArtifactMetaData:\n      example:\n        groupId: My-Group\n        id: Procurement-Invoice\n        name: Artifact Name\n        description: Description of the artifact\n        type: AVRO\n        version: 18\n        createdBy: user1\n        createdOn: 2019-03-22T12:51:19Z\n        modifiedBy: user2\n        modifiedOn: 2019-07-19T15:09:00Z\n        globalId: 12984719247\n        contentId: 82736\n        labels:\n        - label-1\n        - label-2\n        properties:\n          custom-1: foo\n          custom-2: bar\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        createdBy:\n          type: string\n        createdOn:\n          format: date-time\n          type: string\n        modifiedBy:\n          type: string\n        modifiedOn:\n          format: date-time\n          type: string\n        id:\n          description: The ID of a single artifact.\n          example: example-artifact\n          type: string\n        version:\n          type: string\n        type:\n          $ref: '#/components/schemas/ArtifactType'\n        globalId:\n          format: int64\n          type: integer\n        state:\n          $ref: '#/components/schemas/ArtifactState'\n        labels:\n          items:\n            type: string\n          type: array\n        properties:\n          additionalProperties:\n            type: string\n          description: User-defined name-value pairs. Name and value must be strings.\n          type: object\n          x-codegen-inline: true\n          x-codegen-type: StringMap\n        groupId:\n          description: An ID of a single artifact group.\n          example: my-group\n          type: string\n        contentId:\n          format: int64\n          type: integer\n      required:\n      - contentId\n      - createdBy\n      - createdOn\n      - globalId\n      - group\n      - id\n      - modifiedBy\n      - modifiedOn\n      - state\n      - type\n      - version\n      title: Root Type for ArtifactMetaData\n      type: object\n    LogConfiguration:\n      properties:\n        level:\n          $ref: '#/components/schemas/LogLevel'\n      required:\n      - level\n      type: object\n    NamedLogConfiguration:\n      allOf:\n      - $ref: '#/components/schemas/NamedLogConfiguration_allOf'\n      - $ref: '#/components/schemas/LogConfiguration'\n      type: object\n    Properties:\n      additionalProperties:\n        type: string\n      description: User-defined name-value pairs. Name and value must be strings.\n      type: object\n      x-codegen-inline: true\n      x-codegen-type: StringMap\n    IfExists:\n      enum:\n      - FAIL\n      - UPDATE\n      - RETURN\n      - RETURN_OR_UPDATE\n      type: string\n    SortBy:\n      enum:\n      - name\n      - createdOn\n      type: string\n    LogLevel:\n      enum:\n      - DEBUG\n      - TRACE\n      - WARN\n      - ERROR\n      - SEVERE\n      - WARNING\n      - INFO\n      - CONFIG\n      - FINE\n      - FINER\n      - FINEST\n      type: string\n      x-codegen-package: io.apicurio.registry.types\n    SystemInfo:\n      example:\n        name: Apicurio Registry (SQL)\n        description: The Apicurio Registry application.\n        version: 2.0.0.Final\n        builtOn: 2021-03-19T12:55:00Z\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        version:\n          type: string\n        builtOn:\n          format: date-time\n          type: string\n      title: Root Type for SystemInfo\n      type: object\n    FileContent:\n      format: binary\n      type: string\n      x-codegen-inline: true\n    RuleViolationError_allOf:\n      properties:\n        causes:\n          description: List of rule violation causes.\n          items:\n            $ref: '#/components/schemas/RuleViolationCause'\n          type: array\n      required:\n      - causes\n      type: object\n    NamedLogConfiguration_allOf:\n      properties:\n        name:\n          type: string\n      required:\n      - name\n      type: object\nx-codegen:\n  bean-annotations:\n  - io.quarkus.runtime.annotations.RegisterForReflection",
			"canonicalURL": "/github.com/redhat-developer/app-services-sdk-java@4515520baf91913fe2f588ffeb8af92e60a1667c/-/blob/.openapi/registry-instance-rest.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/redhat-developer/app-services-sdk-java/blob/4515520baf91913fe2f588ffeb8af92e60a1667c/.openapi/registry-instance-rest.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/service-registry/v2/groups/{groupId}/artifacts\": post: requestBody: masked request content type not implemented",
	"NotImplemented": [
		"masked request content type"
	]
}