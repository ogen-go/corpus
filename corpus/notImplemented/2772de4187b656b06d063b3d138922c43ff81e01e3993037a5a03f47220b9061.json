{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/1password.local/connect/1.3.0/openapi.yaml",
			"byteSize": 38403,
			"content": "openapi: 3.0.2\nservers:\n  - url: http://1password.local\n  - url: http://localhost:8080/v1\ninfo:\n  contact:\n    email: support@1password.com\n    name: 1Password Integrations\n    url: https://support.1password.com/\n  description: REST API interface for 1Password Connect.\n  title: 1Password Connect\n  version: 1.3.0\n  x-apisguru-categories:\n    - security\n  x-logo:\n    url: https://upload.wikimedia.org/wikipedia/commons/thumb/e/e3/1password-logo.svg/1280px-1password-logo.svg.png\n  x-origin:\n    - format: openapi\n      url: https://i.1password.com/media/1password-connect/1password-connect-api.yaml\n      version: \"3.0\"\n  x-providerName: 1password.local\n  x-serviceName: connect\ntags:\n  - description: Access and manage items inside 1Password Vaults\n    name: Items\n  - description: Access 1Password Vaults\n    name: Vaults\n  - description: Access API Request Activity\n    name: Activity\npaths:\n  /activity:\n    get:\n      operationId: GetApiActivity\n      parameters:\n        - description: How many API Events should be retrieved in a single request.\n          in: query\n          name: limit\n          schema:\n            default: 50\n            example: 10\n            type: integer\n        - description: How far into the collection of API Events should the response start\n          in: query\n          name: offset\n          schema:\n            default: 0\n            example: 50\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/APIRequest\"\n                type: array\n          description: OK\n          headers:\n            Content-Range:\n              description: An decription of what part of the collection has been returned as well as the total size.\n              schema:\n                example: 1-50/1134\n                type: string\n        \"401\":\n          content:\n            application/json:\n              example:\n                message: Invalid token signature\n                status: 401\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Invalid or missing token\n      security:\n        - ConnectToken: []\n      summary: Retrieve a list of API Requests that have been made.\n      tags:\n        - Activity\n  /health:\n    get:\n      operationId: GetServerHealth\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                WaitingForAPIRequest:\n                  summary: API server waiting for first authenticated request\n                  value:\n                    dependencies:\n                      - service: sync\n                        status: TOKEN_NEEDED\n                      - message: Connected to./1password.sqlite\n                        service: sqlite\n                        status: ACTIVE\n                    name: 1Password Connect API\n                    version: 1.2.1\n              schema:\n                properties:\n                  dependencies:\n                    items:\n                      $ref: \"#/components/schemas/ServiceDependency\"\n                    type: array\n                  name:\n                    type: string\n                  version:\n                    description: The Connect server's version\n                    type: string\n                required:\n                  - name\n                  - version\n                type: object\n          description: OK\n      servers:\n        - url: http://localhost:8080\n      summary: Get state of the server and its dependencies.\n      tags:\n        - Health\n  /heartbeat:\n    get:\n      operationId: GetHeartbeat\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              schema:\n                example: .\n                type: string\n          description: OK\n      servers:\n        - url: http://localhost:8080\n      summary: Ping the server for liveness\n      tags:\n        - Health\n  /metrics:\n    get:\n      description: See Prometheus documentation for a complete data model.\n      operationId: GetPrometheusMetrics\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              schema:\n                example: |\n                  # HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.\n                  # TYPE go_gc_duration_seconds summary\n                  go_gc_duration_seconds{quantile=\"0\"} 2.9153e-05\n                  go_gc_duration_seconds{quantile=\"0.25\"} 6.2832e-05\n                  go_gc_duration_seconds{quantile=\"0.5\"} 9.7187e-05\n                  go_gc_duration_seconds{quantile=\"0.75\"} 0.000112967\n                  go_gc_duration_seconds{quantile=\"1\"} 0.000215819\n                  go_gc_duration_seconds_sum 0.001376862\n                  go_gc_duration_seconds_count 14\n                type: string\n          description: Successfully returned Prometheus metrics\n      servers:\n        - url: http://localhost:8080\n      summary: Query server for exposed Prometheus metrics\n      tags:\n        - Metrics\n  /vaults:\n    get:\n      operationId: GetVaults\n      parameters:\n        - description: Filter the Vault collection based on Vault name using SCIM eq filter\n          in: query\n          name: filter\n          schema:\n            example: name eq \"Some Vault Name\"\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Vault\"\n                type: array\n          description: OK\n        \"401\":\n          content:\n            application/json:\n              example:\n                message: Invalid token signature\n                status: 401\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Invalid or missing token\n      security:\n        - ConnectToken: []\n      summary: Get all Vaults\n      tags:\n        - Vaults\n  \"/vaults/{vaultUuid}\":\n    get:\n      operationId: GetVaultById\n      parameters:\n        - description: The UUID of the Vault to fetch Items from\n          in: path\n          name: vaultUuid\n          required: true\n          schema:\n            pattern: ^[\\da-z]{26}$\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Vault\"\n          description: OK\n        \"401\":\n          content:\n            application/json:\n              example:\n                message: Invalid token signature\n                status: 401\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Invalid or missing token\n        \"403\":\n          content:\n            application/json:\n              example:\n                message: vault {vaultUuid} is not in scope\n                status: 403\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Unauthorized access\n        \"404\":\n          content:\n            application/json:\n              example:\n                message: vault {itemUuid} not found\n                status: 404\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Vault not found\n      security:\n        - ConnectToken: []\n      summary: Get Vault details and metadata\n      tags:\n        - Vaults\n  \"/vaults/{vaultUuid}/items\":\n    get:\n      operationId: GetVaultItems\n      parameters:\n        - description: The UUID of the Vault to fetch Items from\n          in: path\n          name: vaultUuid\n          required: true\n          schema:\n            pattern: ^[\\da-z]{26}$\n            type: string\n        - description: Filter the Item collection based on Item name using SCIM eq filter\n          in: query\n          name: filter\n          schema:\n            example: title eq \"Some Item Name\"\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Item\"\n                type: array\n          description: OK\n        \"401\":\n          content:\n            application/json:\n              example:\n                message: Invalid token signature\n                status: 401\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Invalid or missing token\n        \"404\":\n          content:\n            application/json:\n              example:\n                message: vault {vaultUuid} not found\n                status: 404\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Vault not found\n      security:\n        - ConnectToken: []\n      summary: Get all items for inside a Vault\n      tags:\n        - Items\n    post:\n      operationId: CreateVaultItem\n      parameters:\n        - description: The UUID of the Vault to create an Item in\n          in: path\n          name: vaultUuid\n          required: true\n          schema:\n            pattern: ^[\\da-z]{26}$\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FullItem\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullItem\"\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              example:\n                message: Invalid item category\n                status: 400\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Unable to create item due to invalid input\n        \"401\":\n          content:\n            application/json:\n              example:\n                message: Invalid token signature\n                status: 401\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Invalid or missing token\n        \"403\":\n          content:\n            application/json:\n              example:\n                message: vault {vaultUuid} is not in scope\n                status: 403\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Unauthorized access\n        \"404\":\n          content:\n            application/json:\n              examples:\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    message: vault {vaultUuid} not found\n                    status: 404\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Item not found\n      security:\n        - ConnectToken: []\n      summary: Create a new Item\n      tags:\n        - Items\n  \"/vaults/{vaultUuid}/items/{itemUuid}\":\n    delete:\n      operationId: DeleteVaultItem\n      parameters:\n        - description: The UUID of the Vault the item is in\n          in: path\n          name: vaultUuid\n          required: true\n          schema:\n            pattern: ^[\\da-z]{26}$\n            type: string\n        - description: The UUID of the Item to update\n          in: path\n          name: itemUuid\n          required: true\n          schema:\n            pattern: ^[\\da-z]{26}$\n            type: string\n      responses:\n        \"204\":\n          description: Successfully deleted an item\n        \"401\":\n          content:\n            application/json:\n              example:\n                message: Invalid token signature\n                status: 401\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Invalid or missing token\n        \"403\":\n          content:\n            application/json:\n              example:\n                message: vault {vaultUuid} is not in scope\n                status: 403\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Unauthorized access\n        \"404\":\n          content:\n            application/json:\n              examples:\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    message: vault {vaultUuid} not found\n                    status: 404\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Item not found\n      security:\n        - ConnectToken: []\n      summary: Delete an Item\n      tags:\n        - Items\n    get:\n      operationId: GetVaultItemById\n      parameters:\n        - description: The UUID of the Vault to fetch Item from\n          in: path\n          name: vaultUuid\n          required: true\n          schema:\n            pattern: ^[\\da-z]{26}$\n            type: string\n        - description: The UUID of the Item to fetch\n          in: path\n          name: itemUuid\n          required: true\n          schema:\n            pattern: ^[\\da-z]{26}$\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullItem\"\n          description: OK\n        \"401\":\n          content:\n            application/json:\n              example:\n                message: Invalid token signature\n                status: 401\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Invalid or missing token\n        \"403\":\n          content:\n            application/json:\n              example:\n                message: vault {vaultUuid} is not in scope\n                status: 403\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Unauthorized access\n        \"404\":\n          content:\n            application/json:\n              examples:\n                itemNotFound:\n                  summary: Item not found\n                  value:\n                    message: item {itemUuid} not found\n                    status: 404\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    message: vault {vaultUuid} not found\n                    status: 404\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Item not found\n      security:\n        - ConnectToken: []\n      summary: Get the details of an Item\n      tags:\n        - Items\n    patch:\n      description: |\n        Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports `add`, `remove` and `replace` operations.\n\n        When modifying a specific ItemField, the ItemField's ID in the `path` attribute of the operation object: `/fields/{fieldId}`\n      operationId: PatchVaultItem\n      parameters:\n        - description: The UUID of the Vault the item is in\n          in: path\n          name: vaultUuid\n          required: true\n          schema:\n            pattern: ^[\\da-z]{26}$\n            type: string\n        - description: The UUID of the Item to update\n          in: path\n          name: itemUuid\n          required: true\n          schema:\n            pattern: ^[\\da-z]{26}$\n            type: string\n      requestBody:\n        content:\n          application/json:\n            examples:\n              PatchItemAttr:\n                summary: Update specific Item attributes\n                value:\n                  - op: replace\n                    path: /favorite\n                    value: true\n                  - op: remove\n                    path: /tags/1\n              PatchItemField:\n                summary: Add a new ItemField to the Item\n                value:\n                  - op: add\n                    path: /fields\n                    value:\n                      label: New Field\n                      type: string\n                      value: hunter2\n              PatchItemFieldAttr:\n                summary: Modify a specific ItemField attribute.\n                value:\n                  - op: add\n                    path: /fields/s2ju540zlna8bdj4uro7sj64rk/label\n                    value: New field name\n                  - op: remove\n                    path: /fields/s2ju540zlna8bdj4uro7sj64rk/value\n              PatchItemFieldWithID:\n                summary: Modify or remove an ItemField.\n                value:\n                  - op: replace\n                    path: /fields/r9qxq7xnhfhukoxsc8ymqr0y11\n                    value:\n                      label: Replacement Title\n                      type: string\n                      value: new value\n                  - op: remove\n                    path: /fields/h2nl155dshi043yse7wa3u1hs7\n              ReplaceAllAttributes:\n                summary: Replace an entire Item with new fields. Equivalent to a PUT request.\n                value:\n                  - op: replace\n                    path: /\n                    value:\n                      ...: Any attr from FullItem schema\n                      favorite: true\n                      tags:\n                        - tag1\n                        - tag2\n                      title: New Title\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullItem\"\n          description: OK - Item updated. If no Patch operations were provided, Item is unmodified.\n        \"401\":\n          content:\n            application/json:\n              example:\n                message: Invalid token signature\n                status: 401\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Invalid or missing token\n        \"403\":\n          content:\n            application/json:\n              example:\n                message: vault {vaultUuid} is not in scope\n                status: 403\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Unauthorized access\n        \"404\":\n          content:\n            application/json:\n              examples:\n                itemNotFound:\n                  summary: Item not found\n                  value:\n                    message: item {itemUuid} not found\n                    status: 404\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    message: vault {vaultUuid} not found\n                    status: 404\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Item not found\n      security:\n        - ConnectToken: []\n      summary: Update a subset of Item attributes\n      tags:\n        - Items\n    put:\n      operationId: UpdateVaultItem\n      parameters:\n        - description: The UUID of the Item's Vault\n          in: path\n          name: vaultUuid\n          required: true\n          schema:\n            pattern: ^[\\da-z]{26}$\n            type: string\n        - description: The UUID of the Item to update\n          in: path\n          name: itemUuid\n          required: true\n          schema:\n            pattern: ^[\\da-z]{26}$\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FullItem\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FullItem\"\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              example:\n                message: The item doesn't have a {example field name} field.\n                status: 400\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Unable to create item due to invalid input\n        \"401\":\n          content:\n            application/json:\n              example:\n                message: Invalid token signature\n                status: 401\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Invalid or missing token\n        \"403\":\n          content:\n            application/json:\n              example:\n                message: vault {vaultUuid} is not in scope\n                status: 403\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Unauthorized access\n        \"404\":\n          content:\n            application/json:\n              examples:\n                itemNotFound:\n                  summary: Item not found\n                  value:\n                    message: item {itemUuid} not found\n                    status: 404\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    message: vault {vaultUuid} not found\n                    status: 404\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Item not found\n      security:\n        - ConnectToken: []\n      summary: Update an Item\n      tags:\n        - Items\n  \"/vaults/{vaultUuid}/items/{itemUuid}/files\":\n    get:\n      operationId: GetItemFiles\n      parameters:\n        - description: The UUID of the Vault to fetch Items from\n          in: path\n          name: vaultUuid\n          required: true\n          schema:\n            format: uuid\n            type: string\n        - description: The UUID of the Item to fetch files from\n          in: path\n          name: itemUuid\n          required: true\n          schema:\n            format: uuid\n            type: string\n        - description: Tells server to return the base64-encoded file contents in the response.\n          in: query\n          name: inline_files\n          schema:\n            example: true\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/File\"\n                type: array\n          description: OK\n        \"401\":\n          content:\n            application/json:\n              example:\n                message: Invalid token signature\n                status: 401\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Invalid or missing token\n        \"404\":\n          content:\n            application/json:\n              examples:\n                itemNotFound:\n                  summary: Item not found\n                  value:\n                    message: item {itemUuid} not found\n                    status: 404\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    message: vault {vaultUuid} not found\n                    status: 404\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Item not found\n        \"413\":\n          content:\n            application/json:\n              examples:\n                fileTooLarge:\n                  summary: File too large\n                  value:\n                    message: File is too large to inline in request. Use the /v1/vaults/{vaultUUID}/items/{itemUUID}/files/{fileUUID}/content endpoint instead.\n                    status: 413\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: File content too large to display\n      security:\n        - ConnectToken: []\n      summary: Get all the files inside an Item\n      tags:\n        - Files\n  \"/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}\":\n    get:\n      operationId: GetDetailsOfFileById\n      parameters:\n        - description: The UUID of the Vault to fetch Item from\n          in: path\n          name: vaultUuid\n          required: true\n          schema:\n            format: uuid\n            type: string\n        - description: The UUID of the Item to fetch File from\n          in: path\n          name: itemUuid\n          required: true\n          schema:\n            format: uuid\n            type: string\n        - description: The UUID of the File to fetch\n          in: path\n          name: fileUuid\n          required: true\n          schema:\n            format: uuid\n            type: string\n        - description: Tells server to return the base64-encoded file contents in the response.\n          in: query\n          name: inline_files\n          schema:\n            example: true\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n          description: OK\n        \"401\":\n          content:\n            application/json:\n              example:\n                message: Invalid token signature\n                status: 401\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Invalid or missing token\n        \"403\":\n          content:\n            application/json:\n              example:\n                message: vault {vaultUuid} is not in scope\n                status: 403\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Unauthorized access\n        \"404\":\n          content:\n            application/json:\n              examples:\n                fileNotFound:\n                  summary: File not found\n                  value:\n                    message: file {fileUuid} not found\n                    status: 404\n                itemNotFound:\n                  summary: Item not found\n                  value:\n                    message: item {itemUuid} not found\n                    status: 404\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    message: vault {vaultUuid} not found\n                    status: 404\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: File not found\n        \"413\":\n          content:\n            application/json:\n              examples:\n                fileTooLarge:\n                  summary: File too large\n                  value:\n                    message: File is too large to inline in request. Use the /v1/vaults/{vaultUUID}/items/{itemUUID}/files/{fileUUID}/content endpoint instead.\n                    status: 413\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: File content too large to display\n      security:\n        - ConnectToken: []\n      summary: Get the details of a File\n      tags:\n        - Files\n  \"/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content\":\n    get:\n      operationId: DownloadFileByID\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              schema:\n                format: binary\n                type: string\n          description: Success\n          headers:\n            Content-Disposition:\n              schema:\n                example: attachment; filename=\"privkey.pem\"\n                type: string\n            Content-Length:\n              schema:\n                example: \"6432\"\n                type: string\n        \"401\":\n          content:\n            application/json:\n              example:\n                message: Invalid token signature\n                status: 401\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: Invalid or missing token\n        \"404\":\n          content:\n            application/json:\n              examples:\n                fileNotFound:\n                  summary: File not found\n                  value:\n                    message: file {fileUuid} not found\n                    status: 404\n                itemNotFound:\n                  summary: Item not found\n                  value:\n                    message: item {itemUuid} not found\n                    status: 404\n                vaultNotFound:\n                  summary: Vault not found\n                  value:\n                    message: vault {vaultUuid} not found\n                    status: 404\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n          description: File not found\n      security:\n        - ConnectToken: []\n      summary: Get the content of a File\n      tags:\n        - Files\n    parameters:\n      - description: The UUID of the Vault the item is in\n        in: path\n        name: vaultUuid\n        required: true\n        schema:\n          format: uuid\n          type: string\n      - description: The UUID of the Item the File is in\n        in: path\n        name: itemUuid\n        required: true\n        schema:\n          format: uuid\n          type: string\n      - description: UUID of the file to get content from\n        in: path\n        name: fileUuid\n        required: true\n        schema:\n          type: string\ncomponents:\n  schemas:\n    APIRequest:\n      description: Represents a request that was made to the API. Including what Token was used and what resource was accessed.\n      properties:\n        action:\n          enum:\n            - READ\n            - CREATE\n            - UPDATE\n            - DELETE\n          type: string\n        actor:\n          properties:\n            account:\n              type: string\n            id:\n              format: uuid\n              type: string\n            jti:\n              type: string\n            requestIp:\n              type: string\n            userAgent:\n              type: string\n          type: object\n        requestId:\n          description: The unique id used to identify a single request.\n          format: uuid\n          type: string\n        resource:\n          properties:\n            item:\n              properties:\n                id:\n                  pattern: ^[\\da-z]{26}$\n                  type: string\n              type: object\n            itemVersion:\n              type: integer\n            type:\n              enum:\n                - ITEM\n                - VAULT\n              type: string\n            vault:\n              properties:\n                id:\n                  pattern: ^[\\da-z]{26}$\n                  type: string\n              type: object\n          type: object\n        result:\n          enum:\n            - SUCCESS\n            - DENY\n          type: string\n        timestamp:\n          description: The time at which the request was processed by the server.\n          format: date-time\n          readOnly: true\n          type: string\n      type: object\n    ErrorResponse:\n      properties:\n        message:\n          description: A message detailing the error\n          type: string\n        status:\n          description: HTTP Status Code\n          type: integer\n      type: object\n    Field:\n      properties:\n        entropy:\n          description: For fields with a purpose of `PASSWORD` this is the entropy of the value\n          readOnly: true\n          type: number\n        generate:\n          default: false\n          description: If value is not present then a new value should be generated for this field\n          type: boolean\n        id:\n          type: string\n        label:\n          type: string\n        purpose:\n          description: Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types.\n          enum:\n            - \"\"\n            - USERNAME\n            - PASSWORD\n            - NOTES\n          type: string\n        recipe:\n          $ref: \"#/components/schemas/GeneratorRecipe\"\n        section:\n          properties:\n            id:\n              type: string\n          type: object\n        type:\n          default: STRING\n          enum:\n            - STRING\n            - EMAIL\n            - CONCEALED\n            - URL\n            - TOTP\n            - DATE\n            - MONTH_YEAR\n            - MENU\n          type: string\n        value:\n          type: string\n      required:\n        - id\n        - type\n      type: object\n    File:\n      example:\n        content: VGhlIGZ1dHVyZSBiZWxvbmdzIHRvIHRoZSBjdXJpb3VzLgo=\n        content_path: v1/vaults/ionaiwtdvgclrixbt6ztpqcxnq/items/p7eflcy7f5mk7vg6zrzf5rjjyu/files/6r65pjq33banznomn7q22sj44e/content\n        id: 6r65pjq33banznomn7q22sj44e\n        name: foo.txt\n        size: 35\n      properties:\n        content:\n          description: Base64-encoded contents of the file. Only set if size \u003c= OP_MAX_INLINE_FILE_SIZE_KB kb and `inline_files` is set to `true`.\n          format: byte\n          type: string\n        content_path:\n          description: Path of the Connect API that can be used to download the contents of this file.\n          readOnly: true\n          type: string\n        id:\n          description: ID of the file\n          type: string\n        name:\n          description: Name of the file\n          type: string\n        section:\n          description: For files that are in a section, this field describes the section.\n          properties:\n            id:\n              type: string\n          type: object\n        size:\n          description: Size in bytes of the file\n          type: integer\n      type: object\n    FullItem:\n      allOf:\n        - $ref: \"#/components/schemas/Item\"\n        - properties:\n            fields:\n              items:\n                $ref: \"#/components/schemas/Field\"\n              type: array\n            files:\n              items:\n                $ref: \"#/components/schemas/File\"\n              type: array\n            sections:\n              items:\n                properties:\n                  id:\n                    type: string\n                  label:\n                    type: string\n                type: object\n              type: array\n          type: object\n    GeneratorRecipe:\n      description: The recipe is used in conjunction with the \"generate\" property to set the character set used to generate a new secure value\n      properties:\n        characterSets:\n          items:\n            enum:\n              - LETTERS\n              - DIGITS\n              - SYMBOLS\n            type: string\n          maximum: 3\n          minimum: 0\n          type: array\n          uniqueItems: true\n        length:\n          default: 32\n          description: Length of the generated value\n          maximum: 64\n          minimum: 1\n          type: integer\n      type: object\n    Item:\n      properties:\n        category:\n          enum:\n            - LOGIN\n            - PASSWORD\n            - API_CREDENTIAL\n            - SERVER\n            - DATABASE\n            - CREDIT_CARD\n            - MEMBERSHIP\n            - PASSPORT\n            - SOFTWARE_LICENSE\n            - OUTDOOR_LICENSE\n            - SECURE_NOTE\n            - WIRELESS_ROUTER\n            - BANK_ACCOUNT\n            - DRIVER_LICENSE\n            - IDENTITY\n            - REWARD_PROGRAM\n            - DOCUMENT\n            - EMAIL_ACCOUNT\n            - SOCIAL_SECURITY_NUMBER\n            - CUSTOM\n          type: string\n        createdAt:\n          format: date-time\n          readOnly: true\n          type: string\n        favorite:\n          default: false\n          type: boolean\n        id:\n          pattern: ^[\\da-z]{26}$\n          type: string\n        lastEditedBy:\n          readOnly: true\n          type: string\n        state:\n          enum:\n            - ARCHIVED\n            - DELETED\n          readOnly: true\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n        title:\n          type: string\n        updatedAt:\n          format: date-time\n          readOnly: true\n          type: string\n        urls:\n          example:\n            - href: https://example.com\n              primary: true\n            - href: https://example.org\n          items:\n            properties:\n              href:\n                format: url\n                type: string\n              primary:\n                type: boolean\n            required:\n              - href\n            type: object\n          type: array\n        vault:\n          properties:\n            id:\n              pattern: ^[\\da-z]{26}$\n              type: string\n          required:\n            - id\n          type: object\n        version:\n          type: integer\n      required:\n        - vault\n        - category\n      type: object\n    Patch:\n      items:\n        properties:\n          op:\n            enum:\n              - add\n              - remove\n              - replace\n            type: string\n          path:\n            description: An RFC6901 JSON Pointer pointing to the Item document, an Item Attribute, and Item Field by Field ID, or an Item Field Attribute\n            example: /fields/06gnn2b95example10q91512p5/label\n            type: string\n          value:\n            type: object\n        required:\n          - op\n          - path\n        type: object\n      type: array\n    ServiceDependency:\n      description: The state of a registered server dependency.\n      properties:\n        message:\n          description: Human-readable message for explaining the current state.\n          type: string\n        service:\n          type: string\n        status:\n          type: string\n      type: object\n    Vault:\n      properties:\n        attributeVersion:\n          description: The vault version\n          type: integer\n        contentVersion:\n          description: The version of the vault contents\n          type: integer\n        createdAt:\n          format: date-time\n          readOnly: true\n          type: string\n        description:\n          type: string\n        id:\n          pattern: ^[\\da-z]{26}$\n          type: string\n        items:\n          description: Number of active items in the vault\n          type: integer\n        name:\n          type: string\n        type:\n          enum:\n            - USER_CREATED\n            - PERSONAL\n            - EVERYONE\n            - TRANSFER\n          type: string\n        updatedAt:\n          format: date-time\n          readOnly: true\n          type: string\n      type: object\n  securitySchemes:\n    ConnectToken:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/1password.local/connect/1.3.0/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/1password.local/connect/1.3.0/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/metrics\": get: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}