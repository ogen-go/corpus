{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/networknt/light-docker"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "light-oauth2/sqlserver/config/oauth2-user/openapi.yaml",
			"byteSize": 5544,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: OAuth2 User Service\n  description: OAuth2 User Service microservices endpoints.\n  contact:\n    email: stevehu@gmail.com\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\nservers:\n  - url: 'https://oauth2.networknt.com'    \npaths:\n  /oauth2/user:\n    get:\n      description: Return all users\n      operationId: getAllUsers\n      parameters:\n        - name: page\n          in: query\n          description: Page number\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: pageSize\n          in: query\n          description: Pag size\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: userId\n          in: query\n          description: Partial userId for filter\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n      security:\n        - user_auth:\n            - oauth.user.r\n    post:\n      description: Return a user object\n      operationId: createUser\n      responses:\n        '200':\n          description: Successful response\n      security:\n        - user_auth:\n            - oauth.user.w\n      requestBody:\n        $ref: '#/components/requestBodies/User'\n    put:\n      description: Return the updated user\n      operationId: updateUser\n      responses:\n        '200':\n          description: Successful response\n      security:\n        - user_auth:\n            - oauth.user.w\n      requestBody:\n        $ref: '#/components/requestBodies/User'\n  '/oauth2/user/{userId}':\n    delete:\n      description: Delete a user by Id\n      operationId: deleteUser\n      parameters:\n        - name: userId\n          in: path\n          description: User Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid userId supplied\n        '404':\n          description: User not found\n      security:\n        - user_auth:\n            - oauth.user.w\n    get:\n      description: Get a user by Id\n      operationId: getUser\n      parameters:\n        - name: userId\n          in: path\n          description: User Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: Invalid userId supplied\n        '404':\n          description: User not found\n      security:\n        - user_auth:\n            - oauth.user.r\n            - oauth.user.w\n  '/oauth2/password/{userId}':\n    post:\n      description: Reset Password\n      operationId: resetPassword\n      parameters:\n        - name: userId\n          in: path\n          description: User Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '404':\n          description: User not found\n      security:\n        - user_auth:\n            - oauth.user.w\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Password'\n        description: Password object that needs to be added\n        required: true\ncomponents:\n  requestBodies:\n    User:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/User'\n      description: User object that needs to be added\n      required: true\n  securitySchemes:\n    user_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: 'http://localhost:8888/oauth2/code'\n          scopes:\n            oauth.user.w: write user\n            oauth.user.r: read user\n  schemas:\n    User:\n      type: object\n      required:\n        - userId\n        - userType\n        - firstName\n        - lastName\n        - email\n      properties:\n        userId:\n          type: string\n          description: a unique id\n        userType:\n          type: string\n          description: user type\n          enum:\n            - admin\n            - employee\n            - customer\n            - partner\n        firstName:\n          type: string\n          description: first name\n        lastName:\n          type: string\n          description: last name\n        email:\n          type: string\n          description: email address\n        password:\n          type: string\n          format: password\n          description: password\n        passwordConfirm:\n          type: string\n          format: password\n          description: password confirm\n        createDt:\n          type: string\n          format: date-time\n          description: create date time\n        updateDt:\n          type: string\n          format: date-time\n          description: update date time\n    Password:\n      type: object\n      required:\n        - password\n        - newPassword\n        - newPasswordConfirm\n      properties:\n        password:\n          type: string\n          format: password\n          description: existing password\n        newPassword:\n          type: string\n          format: password\n          description: new password\n        newPasswordConfirm:\n          type: string\n          format: password\n          description: new password confirm",
			"canonicalURL": "/github.com/networknt/light-docker@781ec1d6ea78dbd6aa6391f9470936a6d779d4b0/-/blob/light-oauth2/sqlserver/config/oauth2-user/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/networknt/light-docker/blob/781ec1d6ea78dbd6aa6391f9470936a6d779d4b0/light-oauth2/sqlserver/config/oauth2-user/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/oauth2/password/{userId}\": post: security: security \"user_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}