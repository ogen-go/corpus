{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/rstropek/golang-samples"
		},
		"file": {
			"name": "api-spec.yaml",
			"size": 0,
			"path": "web-api/api-spec.yaml",
			"byteSize": 5290,
			"content": "openapi: 3.0.0\ninfo:\n  title: Customer Management\n  description: This is a sample API for customer management\n  termsOfService: https://my-events-demo.com/eula\n  contact:\n    name: API Support\n    url: https://my-events-demo.com/support\n    email: support@my-events-demo.com\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\n  version: 1.0.0\nservers:\n# Note the use of URL variables\n- url: http://localhost:{port}\n  description: The local test server\n  variables:\n    port:\n      description: Port on which the test server listens\n      default: '4000'\npaths:\n  /customers:\n    get:\n      operationId: GetCustomers\n      summary: Returns all customers\n      tags:\n      - Customers\n      description: Returns a list of all customers\n      responses:\n        '200':\n          description: A list of customers\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/customer'\n    post:\n      operationId: AddCustomer\n      summary: Adds a customer\n      tags:\n      - Customers\n      requestBody:\n        description: Data of the new customer\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/newCustomer'\n      responses:\n        '201':\n          description: Added event\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/customer'\n          headers:\n            Location:\n              description: URL where to get details of the created event\n              schema:\n                type: string\n          links:\n            event:\n              operationId: GetCustomer\n              parameters:\n                customerID: $response.body#/customerID\n        '400':\n          description: Invalid customer data in request body\n          content:\n            text/html:\n              schema:\n                type: string\n                description: Cause of the error\n                example: Company name must not be empty\n  /customers/{customerID}:\n    parameters:\n    - name: customerID\n      in: path\n      description: ID of the customer to load\n      required: true\n      schema:\n        type: string\n        pattern: '{id:[0-9A-Fa-f]{8}(?:-[0-9A-Fa-f]{4}){3}-[0-9A-Fa-f]{12}}'\n    get:\n      operationId: GetCustomer\n      summary: Returns a specific customer\n      tags:\n      - Customers\n      responses:\n        '200':\n          description: Customer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/customer'\n        '404':\n          $ref: '#/components/responses/notFoundResponse'\n    delete:\n      operationId: DeleteCustomer\n      summary: Delete a specific customer\n      tags:\n      - Customers\n      responses:\n        '204':\n          description: Customer deleted\n        '404':\n          $ref: '#/components/responses/notFoundResponse'\n    patch:\n      operationId: PatchCustomer\n      summary: Patch a specific customer\n      description: Only specify values in request body for those fields that you would like to update.\n      tags:\n      - Customers\n      requestBody:\n        description: Fields to patch\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/customerPatch'\n      responses:\n        '200':\n          description: Customer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/customer'\n        '404':\n          $ref: '#/components/responses/notFoundResponse'\ncomponents:\n  responses:\n    notFoundResponse:\n      description: Item not found\n  schemas:\n    newCustomer:\n      type: object\n      required:\n      - customerName\n      - contactName\n      - country\n      - hourlyRate\n      properties:\n        customerName:\n          type: string\n          description: Name of the customer\n        contactName:\n          type: string\n          description: Name of the primary contact person of the customer\n        country:\n          type: string\n          minLength: 3\n          maxLength: 3\n          description: ISO 3166-1 alpha-3 country code\n        hourlyRate:\n          type: number\n          format: float\n          minimum: 1\n    customer:\n      allOf:\n      - $ref: '#/components/schemas/newCustomer'\n      - properties:\n          customerID:\n            type: string\n            format: uuid\n            description: Unique identifier of the customer\n            pattern: '{id:[0-9A-Fa-f]{8}(?:-[0-9A-Fa-f]{4}){3}-[0-9A-Fa-f]{12}}'\n    customerPatch:\n      type: object\n      properties:\n        customerID:\n          type: string\n          format: uuid\n          description: Unique identifier of the customer\n          pattern: '{id:[0-9A-Fa-f]{8}(?:-[0-9A-Fa-f]{4}){3}-[0-9A-Fa-f]{12}}'\n        customerName:\n          type: string\n          description: Name of the customer\n        contactName:\n          type: string\n          description: Name of the primary contact person of the customer\n        country:\n          type: string\n          description: ISO 3166-1 alpha-3 country code\n        hourlyRate:\n          type: number\n          format: float\n",
			"canonicalURL": "/github.com/rstropek/golang-samples@2fed6b88065c03255aade6f89bb2530d168b2aca/-/blob/web-api/api-spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/rstropek/golang-samples/blob/2fed6b88065c03255aade6f89bb2530d168b2aca/web-api/api-spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/customers\": post: responses: 400: contents: unsupported content types: [text/html]",
	"NotImplemented": [
		"unsupported content types"
	]
}