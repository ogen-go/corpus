{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ozonep/openapi-fastify-codegen"
		},
		"file": {
			"name": "expression.yaml",
			"size": 0,
			"path": "tests/openapi3/expression.yaml",
			"byteSize": 13525,
			"content": "openapi: 3.0.2\ninfo:\n  title: Expression Service\n  description: |-\n    To express anything in a richer format than plaintext, you create an expression. An expression is a captured moment of menaingful communication - stored in a speficic medium and/or form. The medium may be anything from very basic forms such as text and code, all the way to more advanced forms such as 360 videos and interactive visualizations.\n    Below you can see the the different expression types.\n    \u003cimg src=\"/spec-assets/expression-types.svg\" /\u003e\n    Expressions makes it possible to make any field in other data structures  both richer and more consistent. As an example, a higher level feedback  service for providing feedback on exercises could use the expression  service to enable video feedback, etc.\n    Dealing with something so fundamental as expressions, it's crucial to have  it running very fast. Especially the read operations need to be extremely  performant. The expression service endpoint structure has universal  retrieval, but independent creation.\n  contact:\n    name: Developer @Sci-Code\n    url: https://sci-code.com\n    email: developer@sci-code.com\n  version: 0.0.2\n  license:\n    name: MIT\nservers:\n  - url: https://europe-west1-firestoreanswer.cloudfunctions.net/v1\n    description: Fake for now\ntags:\n  - name: Expression\n    description: The ```Expression``` object is a representation of a captured moment of menaingful communication - stored in a speficic medium and/or form.\npaths:\n  /expressions:\n    get:\n      tags:\n        - Expression\n      summary: Retrieve array of expressions\n      description: \"Retrieves all expressions or filtered list of expressions in form of array. \\nIf no query params will return ALL expressions from our DB.\"\n      parameters:\n        - name: type\n          in: query\n          schema:\n            type: string\n          description: type of expression to filter for\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  anyOf:\n                    - $ref: \"#/components/schemas/text_expression\"\n                    - $ref: \"#/components/schemas/math_expression\"\n                    - $ref: \"#/components/schemas/code_expression\"\n                    - $ref: \"#/components/schemas/image_expression\"\n                    - $ref: \"#/components/schemas/audio_expression\"\n                    - $ref: \"#/components/schemas/video_expression\"\n                    - $ref: \"#/components/schemas/animation_expression\"\n        \"404\":\n          description: Expression not Found\n          content:\n            application/json:\n              schema:\n                type: string\n      operationId: getExpressions\n    parameters: []\n    post:\n      summary: Create an expression\n      operationId: postExpression\n      responses:\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/text_expression\"\n                  - $ref: \"#/components/schemas/math_expression\"\n                  - $ref: \"#/components/schemas/code_expression\"\n                  - $ref: \"#/components/schemas/image_expression\"\n                  - $ref: \"#/components/schemas/audio_expression\"\n                  - $ref: \"#/components/schemas/animation_expression\"\n                  - $ref: \"#/components/schemas/video_expression\"\n            application/xml:\n              schema:\n                type: object\n                properties: {}\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n      description: Create any expression (audio/video/text)\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/create_text_expression\"\n                - $ref: \"#/components/schemas/create_math_expression\"\n                - $ref: \"#/components/schemas/create_code_expression\"\n                - $ref: \"#/components/schemas/create_image_expression\"\n                - $ref: \"#/components/schemas/create_audio_expression\"\n                - $ref: \"#/components/schemas/create_animation_expression\"\n                - $ref: \"#/components/schemas/create_video_expression\"\n        description: In the body, provide full expression with all required fields\n      tags:\n        - Expression\n  /expressions/{expressionId}:\n    parameters:\n      - schema:\n          type: string\n        name: expressionId\n        in: path\n        required: true\n    get:\n      summary: Retrieve single expression\n      tags:\n        - Expression\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/text_expression\"\n                  - $ref: \"#/components/schemas/math_expression\"\n                  - $ref: \"#/components/schemas/code_expression\"\n                  - $ref: \"#/components/schemas/image_expression\"\n                  - $ref: \"#/components/schemas/audio_expression\"\n                  - $ref: \"#/components/schemas/animation_expression\"\n                  - $ref: \"#/components/schemas/video_expression\"\n      operationId: getExpression\n      description: Get single expression object by its ID\ncomponents:\n  schemas:\n    expression:\n      type: object\n      properties:\n        id:\n          type: string\n          description: A unique identifier for the expression object.\n          format: uuid\n        type:\n          type: string\n          enum:\n            - animation\n            - audio\n            - code\n            - image\n            - math\n            - text\n            - video\n      required:\n        - id\n        - type\n    text_expression:\n      allOf:\n        - $ref: \"#/components/schemas/expression\"\n        - type: object\n          properties:\n            content:\n              description: The rich text content.\n              type: string\n            format:\n              description: The format of the rich text.\n              type: string\n              enum:\n                - Markdown\n          required:\n            - content\n            - format\n      example:\n        id: exp_ZZrEOIjc2kK3159uVMqxdw\n        format: Markdown\n        content: Hey ho, this is some text in *markdown* format.\n    create_text_expression:\n      properties:\n        content:\n          description: The rich text content.\n          type: string\n        format:\n          description: The format of the rich text.\n          type: string\n          enum:\n            - Markdown\n      required:\n        - content\n        - format\n      example:\n        content: Hey ho, this is some text in *markdown* format.\n        format: Markdown\n    math_expression:\n      allOf:\n        - $ref: \"#/components/schemas/expression\"\n        - type: object\n          properties:\n            content:\n              description: The mathematics content.\n              type: string\n            format:\n              description: The format of the rich text.\n              type: string\n              enum:\n                - KaTeX\n                - TeX\n          required:\n            - content\n            - format\n      example:\n        id: exp_ZZrEOIjc2kK3159uVMqxdw\n        content: \\f{a} = \\int_{-\\infty}^\\infty \\hat \\f\\xi\\,e^{2 \\pi i \\xi x} \\,d\\xi\n        format: KaTeX\n    create_math_expression:\n      properties:\n        content:\n          description: The mathematics content.\n          type: string\n        format:\n          description: The format of the rich text.\n          type: string\n          enum:\n            - KaTeX\n            - TeX\n      required:\n        - content\n        - format\n      example:\n        content: \\f{a} = \\int_{-\\infty}^\\infty \\hat \\f\\xi\\,e^{2 \\pi i \\xi x} \\,d\\xi\n        format: KaTeX\n    code_expression:\n      allOf:\n        - $ref: \"#/components/schemas/expression\"\n        - type: object\n          properties:\n            content:\n              description: The code content.\n              type: string\n            programmingLanguage:\n              description: The programming language of the code.\n              type: string\n              enum:\n                - javascript\n                - python\n          required:\n            - content\n            - format\n      example:\n        id: exp_ZZrEOIjc2kK3159uVMqxdw\n        content: |\n          function f(x,y) {\n            return x+y;\n          }\n        programmingLanguage: javascript\n    create_code_expression:\n      properties:\n        content:\n          description: The code content.\n          type: string\n        programmingLanguage:\n          description: The programming language of the code.\n          type: string\n          enum:\n            - javascript\n            - python\n      required:\n        - content\n        - format\n      example:\n        content: |\n          function f(x,y) {\n            return x+y;\n          }\n        programmingLanguage: javascript\n    image_expression:\n      allOf:\n        - $ref: \"#/components/schemas/expression\"\n        - type: object\n          properties:\n            src:\n              description: A link to where the file is stored.\n              type: string\n            fileFormat:\n              description: The format of the file.\n              type: string\n              enum:\n                - png\n                - jpg\n                - jpeg\n          required:\n            - src\n            - fileFormat\n      example:\n        id: exp_ZZrEOIjc2kK3159uVMqxdw\n        src: https://location-to-file-storage.com/maybe-some-structure/blob-identifier.jpg\n        fileFormat: jpg\n    create_image_expression:\n      properties:\n        fileName:\n          description: The actual image file you want to upload.\n          type: string\n          format: binary\n        fileFormat:\n          description: The format of the file.\n          type: string\n          enum:\n            - png\n            - jpg\n            - jpeg\n      required:\n        - fileName\n        - fileFormat\n      example:\n        fileName: example.png\n        fileFormat: png\n    audio_expression:\n      allOf:\n        - $ref: \"#/components/schemas/expression\"\n        - type: object\n          properties:\n            src:\n              description: A link to where the file is stored.\n              type: string\n            fileFormat:\n              description: The format of the file.\n              type: string\n              enum:\n                - mp3\n                - ogg\n          required:\n            - src\n            - fileFormat\n      example:\n        id: exp_ZZrEOIjc2kK3159uVMqxdw\n        src: https://location-to-file-storage.com/maybe-some-structure/blob-identifier.mp3\n        fileFormat: mp3\n    create_audio_expression:\n      properties:\n        fileName:\n          description: The actual audio file you want to upload.\n          type: string\n          format: binary\n        fileFormat:\n          description: The format of the file.\n          type: string\n          enum:\n            - mp3\n            - ogg\n      required:\n        - fileName\n        - fileFormat\n      example:\n        fileName: example.mp3\n        fileFormat: mp3\n    animation_expression:\n      allOf:\n        - $ref: \"#/components/schemas/expression\"\n        - type: object\n          properties:\n            src:\n              description: A link to where the file is stored.\n              type: string\n            fileFormat:\n              description: The format of the file.\n              type: string\n              enum:\n                - gif\n                - mp4\n          required:\n            - src\n            - fileFormat\n      example:\n        id: exp_ZZrEOIjc2kK3159uVMqxdw\n        src: https://location-to-file-storage.com/maybe-some-structure/blob-identifier.mp4\n        fileFormat: mp4\n    create_animation_expression:\n      properties:\n        fileName:\n          description: The actual animation file you want to upload.\n          type: string\n          format: binary\n        fileFormat:\n          description: The format of the file.\n          type: string\n          enum:\n            - gif\n            - mp4\n      required:\n        - fileName\n        - fileFormat\n      example:\n        fileName: example.mp4\n        fileFormat: mp4\n    video_expression:\n      allOf:\n        - $ref: \"#/components/schemas/expression\"\n        - type: object\n          properties:\n            src:\n              description: A link to where the file is stored.\n              type: string\n            fileFormat:\n              description: The format of the file.\n              type: string\n              enum:\n                - mp4\n          required:\n            - src\n            - fileFormat\n      example:\n        id: exp_ZZrEOIjc2kK3159uVMqxdw\n        src: https://location-to-file-storage.com/maybe-some-structure/blob-identifier.mp4\n        fileFormat: mp4\n    create_video_expression:\n      properties:\n        fileName:\n          description: The actual video file you want to upload.\n          type: string\n          format: binary\n        fileFormat:\n          description: The format of the file.\n          type: string\n          enum:\n            - mp4\n      required:\n        - fileName\n        - fileFormat\n      example:\n        fileName: example.mp4\n        fileFormat: mp4\n  securitySchemes: {}",
			"canonicalURL": "/github.com/ozonep/openapi-fastify-codegen@78d9a300b02dd9c0f33c35a4ff997b7e25acdb37/-/blob/tests/openapi3/expression.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ozonep/openapi-fastify-codegen/blob/78d9a300b02dd9c0f33c35a4ff997b7e25acdb37/tests/openapi3/expression.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/expressions/{expressionId}\": get: responses: 200: contents: application/json: generate schema: oneOf: oneOf GetExpressionOK: variant MathExpression: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"complex anyOf",
		"discriminator inference"
	]
}