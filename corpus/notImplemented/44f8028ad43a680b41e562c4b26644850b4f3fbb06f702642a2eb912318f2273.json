{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hhucn/dbas"
		},
		"file": {
			"name": "dbas_openapi_v3.yaml",
			"size": 0,
			"path": "api/swagger-ui/dbas_openapi_v3.yaml",
			"byteSize": 31175,
			"content": "openapi: 3.0.2\nservers:\n  - url: 'http://localhost:4284/api'\n  - url: 'https://dbas.cs.uni-duesseldorf.de/api'\ninfo:\n  version: \"1.27.2\"\n  title: D-BAS\n\npaths:\n  /whoami:\n    post:\n      summary: Validate token\n      description: \u003e-\n        Validate a login token and get a greeting message on success.\n      tags:\n        - user-management\n      parameters:\n        - $ref: '#/components/parameters/authentication-token'\n      responses:\n        200:\n          description: The token is valid and the user exists\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  nickname:\n                    type: string\n                  status:\n                    type: string\n                  message:\n                    type: string\n        401:\n          description: An error like 'Token expired'\n      security:\n        - token: []\n\n  /login:\n    post:\n      summary: Login and get a token\n      description: \u003e-\n        This operation shows how to override the global security defined above,\n        as we want to open it up for all users.\n      tags:\n        - user-management\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                nickname:\n                  type: string\n                password:\n                  type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  nickname:\n                    type: string\n                  token:\n                    type: string\n\n  /logout:\n    post:\n      summary: Logout the current user\n      description: \u003e-\n        Log out the current user and perform database operations to invalidate the\n        token and to delete the session\n      tags:\n        - user-management\n      parameters:\n        - $ref: '#/components/parameters/authentication-token'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  nickname:\n                    type: string\n                  token:\n                    type: string\n      security:\n        - token: []\n\n  /users:\n    get:\n      summary: List users\n      tags:\n        - user-management\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/user'\n    post:\n      summary: Add a new external (oauth) user\n      description: \u003e-\n        Add a new external (oauth) user. Requires an API-Token!  \n      tags:\n        - user-management\n      parameters:\n        - $ref: '#/components/parameters/authentication-token'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/oauth_user'\n      responses:\n        201:\n          description: The user was created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n        400:\n          description: An error like 'Nickname taken'\n      security:\n        - token: []\n\n  /users/{id}:\n    get:\n      summary: single user\n      tags:\n        - user-management\n      parameters:\n        - name: id\n          description: ID of a user.\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user'\n        404:\n          description: This user-id does not exist.\n\n  /user:\n    post:\n      summary: Add a new D-BAS user\n      description: \u003e-\n        Add a new D-BAS user. Requires an API-Token!\n      tags:\n        - user-management\n      parameters:\n        - $ref: '#/components/parameters/authentication-token'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/local_user'\n      responses:\n        201:\n          description: The user was created\n        400:\n          description: An error like 'Nickname taken'\n      security:\n        - token: []\n\n  /issue:\n    post:\n      summary: Create a new issue.\n      description: Create a new issue over the API. Need to pass a valid user-token.\n      tags:\n        - discussion\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/issue'\n\n  /issues:\n    get:\n      summary: List all issues.\n      description: Contains links to the next step.\n      tags:\n        - discussion\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/issue'\n\n  /issues/{slug}:\n    parameters:\n      - $ref: '#/components/parameters/slug-param'\n    get:\n      summary: Returns a single Issue\n      tags:\n        - discussion\n      responses:\n        200:\n          description: A single Issue\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/issue'\n    patch:\n      summary: Updates an Issue\n      description: Shallow merge the provided dict into the issue. The user either has to be an admin or the author of the issue.\n      tags:\n        - discussion\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  example: kads or doks\n                info:\n                  type: string\n                long_info:\n                  type: string\n      responses:\n        200:\n          description: The updated Issue\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/issue'\n        401:\n          description: Unauthorized\n      security:\n        - token: []\n\n  /{slug}:\n    get:\n      summary: List positions.\n      description:\n        Lists all available positions for a specific issue.\n      tags:\n        - discussion\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n      responses:\n        200:\n          description: List of positions. The url of a position links into the discussion.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/items-and-bubbles'\n        410:\n          description: Issue no longer available\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error-message'\n    post:\n      summary: Add position. Same as /{slug}/positions.\n      tags:\n        - add\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                position:\n                  type: string\n                reason:\n                  type: string\n                reference:\n                  type: string\n                  example: This optional reference supports the given reason\n                origin:\n                  $ref: '#/components/schemas/origin'\n      responses:\n        303:\n          description: Redirects to one of the other routes to procede.\n      security:\n        - token: []\n\n  /{slug}/aif:\n    get:\n      summary: Get the issue as in a json-aif format\n      tags:\n        - export\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              $ref: '#/components/schemas/json-aif-format'\n\n    post:\n      summary: Import a json-aif format argumentation. Only admins are allowed to do this.\n      tags:\n        - export\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n        - name: title\n          description: The title for the new issue.\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: lang\n          description: The language for the new issue.\n          in: path\n          required: true\n          schema:\n            type: string\n            example: en\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/json-aif-format'\n      responses:\n        201:\n          description: The issue was successfully imported.\n        401:\n          description: You are unauthorized. (You need to be an admin)\n        409:\n          description: The slug you choose is already in use.\n      security:\n        - token: []\n\n  /{slug}/dot:\n    get:\n      summary: Get the issue as in the dot format\n      tags:\n        - export\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n      responses:\n        200:\n          description: OK\n          content:\n            text/vnd.graphviz:\n              schema:\n                type: string\n                example: \u003e-\n                  digraph G {\n                     statement_2 [label=\"we should get a cat\"];\n                     statement_5 [label=\"cats are very independent\"];\n                     argument_2 [shape=diamond,color=\"green\"];\n                     argument_2 -\u003e statement_2;\n                     statement_5 -\u003e argument_2;\n                  }\n\n\n  /{slug}/positions:\n    post:\n      summary: Add position.\n      tags:\n        - add\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                position:\n                  type: string\n                reason:\n                  type: string\n                reference:\n                  type: string\n                  example: This optional reference supports the given reason\n                origin:\n                  $ref: '#/components/schemas/origin'\n      responses:\n        303:\n          description: Redirects to one of the other routes to procede.\n      security:\n        - token: []\n\n  /{slug}/attitude/{position}:\n    get:\n      tags:\n        - discussion\n      summary: agree, disagree, don't know fields\n      description: Returns links to the next step in the discussion, depending on the user's attitude.\n        Also contains speech bubbles.\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n        - name: position\n          description: ID of a position from the issue.\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  attitudes:\n                    type: object\n                    properties:\n                      agree:\n                        $ref: '#/components/schemas/item'\n                      disagree:\n                        $ref: '#/components/schemas/item'\n                      dontknow:\n                        $ref: '#/components/schemas/item'\n                  bubbles:\n                    $ref: '#/components/schemas/bubbles'\n\n  /{slug}/justify/{argument-id}/{attitude}/{relation}:\n    get:\n      tags:\n        - discussion\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n        - name: argument-id\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: attitude\n          in: path\n          required: true\n          schema:\n            type: string\n            enum: [agree, disagree, dontknow]\n        - name: relation\n          in: path\n          required: true\n          allowEmptyValue: true\n          schema:\n            $ref: '#/components/schemas/mode'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/items-and-bubbles'\n    post:\n      tags:\n        - add\n      summary: Add premise to an argument.\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n        - name: argument-id\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: attitude\n          in: path\n          required: true\n          schema:\n            type: string\n            enum: [agree, disagree, dontknow]\n        - name: relation\n          in: path\n          required: true\n          allowEmptyValue: true\n          schema:\n            $ref: '#/components/schemas/mode'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/justifying-response'\n      responses:\n        303:\n          description: Redirects to one of the other routes to procede.\n      security:\n        - token: []\n\n  /{slug}/justify/{statement-id}/{attitude}:\n    get:\n      tags:\n        - discussion\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n        - name: statement-id\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: attitude\n          in: path\n          required: true\n          schema:\n            type: string\n            enum: [agree, disagree, dontknow]\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/justifying-response'\n    post:\n      tags:\n        - add\n      summary: Add premise to a conclusion.\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n        - name: statement-id\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: attitude\n          in: path\n          required: true\n          schema:\n            type: string\n            enum: [agree, disagree, dontknow]\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                reason:\n                  type: string\n                  example: Because cats are cute\n                reference:\n                  type: string\n                  example: This reference supports the given reason\n                origin:\n                  $ref: '#/components/schemas/origin'\n              required:\n                - reason\n      responses:\n        303:\n          description: Redirects to one of the other routes to procede.\n      security:\n        - token: []\n\n  /attitude/{statement-id}/{attitude}:\n    post:\n      tags:\n        - add\n      summary: Save a user's attitude to a statement.\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n        - name: statement-id\n          in: path\n          required: true\n          schema:\n            type: integer\n        - name: attitude\n          in: path\n          required: true\n          schema:\n            type: string\n            enum: [agree, disagree]\n      responses:\n        201:\n          description: CREATED\n      security:\n        - token: []\n\n  /{slug}/reaction/{arg-user}/{relation}/{arg-sys}:\n    get:\n      summary: Reaction-options for an argument in a discussion.\n      description: Returns links to the next step in the discussion, depending on the user's attitude towards the argument of the system.\n        Also contains speech bubbles.\n      tags:\n        - discussion\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n        - $ref: '#/components/parameters/arg-user'\n        - $ref: '#/components/parameters/arg-sys'\n        - name: relation\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/mode'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  bubbles:\n                    $ref: '#/components/schemas/bubbles'\n                  attacks:\n                    type: object\n                    properties:\n                      undermine:\n                        $ref: '#/components/schemas/reaction-item'\n                      undercut:\n                        $ref: '#/components/schemas/reaction-item'\n                      support:\n                        $ref: '#/components/schemas/reaction-item'\n                      rebut:\n                        $ref: '#/components/schemas/reaction-item'\n                      no_opinion:\n                        $ref: '#/components/schemas/reaction-item'\n\n  /{slug}/support/{arg-user}/{arg-sys}:\n    get:\n      summary: Support-options for an argument in a discussion.\n      description: Returns links to the next step in the discussion, depending on the user's attitude towards the argument of the system.\n        Also contains speech bubbles.\n      tags:\n        - discussion\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n        - $ref: '#/components/parameters/arg-user'\n        - $ref: '#/components/parameters/arg-sys'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  bubbles:\n                    $ref: '#/components/schemas/bubbles'\n                  attacks:\n                    type: object\n                    properties:\n                      undermine:\n                        $ref: '#/components/schemas/reaction-item'\n                      undercut:\n                        $ref: '#/components/schemas/reaction-item'\n                      support:\n                        $ref: '#/components/schemas/reaction-item'\n                      rebut:\n                        $ref: '#/components/schemas/reaction-item'\n\n  /{slug}/finish/{argument-id}:\n    get:\n      summary: Bubbles for the end of a discussion.\n      tags:\n        - discussion\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n        - name: argument-id\n          in: path\n          required: true\n          schema:\n            type: integer\n            minimum: 1\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  bubbles:\n                    $ref: '#/components/schemas/bubbles'\n\n  /{slug}/jump/{argument-id}:\n    get:\n      tags:\n        - discussion\n      parameters:\n        - $ref: '#/components/parameters/slug-param'\n        - name: argument-id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/items-and-bubbles'\n\n  /search:\n    get:\n      summary: Search statements in D-BAS\n      tags:\n        - search\n      parameters:\n        - name: q\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    $ref: '#/components/schemas/search-results'\n\n  /references:\n    get:\n      summary: Query references by host and path\n      tags:\n        - references\n      parameters:\n        - name: host\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: path\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  references:\n                    $ref: '#/components/schemas/reference'\n\n  /reference/usages/{reference-id}:\n    get:\n      summary: Query all usages of a reference in the context of all discussions.\n      tags:\n        - references\n      parameters:\n        - name: reference-id\n          in: path\n          required: true\n          schema:\n            type: integer\n            minimum: 1\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reference:\n                    type: object\n                    properties:\n                      uid:\n                        type: integer\n                      title:\n                        type: string\n                      host:\n                        type: string\n                      path:\n                        type: string\n                      statement-uid:\n                        type: integer\n                      author:\n                        $ref: '#/components/schemas/dataauthor'\n                  arguments:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        uid:\n                          type: integer\n                        texts:\n                          type: object\n                          properties:\n                            display:\n                              type: string\n                              example: \"We should get a cat, because cats are fluffy\"\n                            conclusion:\n                              type: string\n                              example: \"We should get a cat\"\n                            premise:\n                              type: string\n                              example: \"they are fluffy\"\n                            attacks:\n                              type: object\n                              properties:\n                                conclusion:\n                                  type: string\n                                  example: \"Only filled if target is an undercut. Contains the conclusion of this target.\"\n                                premise:\n                                  type: string\n                        author:\n                          $ref: '#/components/schemas/dataauthor'\n                        issue:\n                          $ref: '#/components/schemas/issue'\n                  statement:\n                    type: object\n                    properties:\n                      uid:\n                        type: integer\n                      text:\n                        $ref: '#/components/schemas/text'\n                      url:\n                        $ref: '#/components/schemas/url'\n\n\ncomponents:\n  schemas:\n    bubbles:\n      type: array\n      items:\n        type: object\n        properties:\n          type:\n            type: string\n            enum: [user, system, status, info]\n          url:\n            type: string\n          html:\n            $ref: '#/components/schemas/html'\n          text:\n            $ref: '#/components/schemas/text'\n    reference:\n      type: array\n      items:\n        type: object\n        properties:\n          uid:\n            type: integer\n          text:\n            $ref: '#/components/schemas/text'\n          url:\n            $ref: '#/components/schemas/url'\n    search-results:\n      type: array\n      items:\n        type: object\n        properties:\n          uid:\n            type: integer\n          isPosition:\n            type: boolean\n          text:\n            $ref: '#/components/schemas/text'\n          author:\n            type: object\n            properties:\n              uid:\n                type: integer\n              nickname:\n                type: string\n          issue:\n            type: object\n            properties:\n              uid:\n                type: integer\n              slug:\n                $ref: '#/components/schemas/slug'\n              language:\n                type: string\n                format: ISO-639-1\n              title:\n                type: string\n              info:\n                type: string\n    issue:\n      type: object\n      properties:\n        slug:\n          $ref: '#/components/schemas/slug'\n        title:\n          type: string\n        summary:\n          type: string\n        description:\n          type: string\n        url:\n          $ref: '#/components/schemas/url'\n        author:\n          type: string\n        language:\n          type: string\n          format: ISO-639-1\n        date:\n          type: string\n          format: date-time\n    mode:\n      type: string\n      enum: [undermine, rebut, undercut, support]\n\n    item:\n      type: object\n      properties:\n        htmls:\n          type: array\n          items:\n            $ref: '#/components/schemas/html'\n        texts:\n          type: array\n          items:\n            $ref: '#/components/schemas/text'\n        url:\n          type: string\n          example: '/path/to/next/step'\n\n    reaction-item:\n      allOf:\n        - $ref: '#/components/schemas/item'\n        - type: object\n          properties:\n            attack-url:\n              type: string\n              example: '/cat-or-dog/justify/13/t'\n\n    items-and-bubbles:\n      type: object\n      properties:\n        bubbles:\n          $ref: '#/components/schemas/bubbles'\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/item'\n\n    error-message:\n      type: object\n      properties:\n        status:\n          type: string\n          example: error\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/error'\n\n    error:\n      type: object\n      properties:\n        location:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n\n    local_user:\n      type: object\n      properties:\n        firstname:\n          type: string\n          example: Jimmy\n        lastname:\n          type: string\n          example: McJimbo\n        nickname:\n          type: string\n          example: TheGreatJimbo\n        lang:\n          type: string\n          example: de\n        email:\n          type: string\n          example: jim@bo.com\n        gender:\n          type: string\n          example: m w n\n        id:\n          type: integer\n          example: 12345678247354\n        password:\n          type: string\n          example: 123456\n\n    oauth_user:\n      type: object\n      properties:\n        firstname:\n          type: string\n          example: Jimmy\n        lastname:\n          type: string\n          example: McJimbo\n        nickname:\n          type: string\n          example: TheGreatJimbo\n        service:\n          type: string\n          example: jeb\n        locale:\n          type: string\n          example: de_DE\n        email:\n          type: string\n          example: jim@bo.com\n        gender:\n          type: string\n          example: m w n\n        id:\n          type: integer\n          example: 12345678247354\n\n    user:\n      type: object\n      properties:\n        nickname:\n          type: string\n        id:\n          type: integer\n\n    dataauthor:\n      type: object\n      properties:\n        uid:\n          type: integer\n        nickname:\n          type: string\n    dataissue:\n      type: object\n      properties:\n        uid:\n          type: integer\n        slug:\n          $ref: '#/components/schemas/slug'\n        lang:\n          type: string\n        title:\n          type: string\n        info:\n          type: string\n\n    html:\n      type: string\n      example: 'I am text with \u003cstrong\u003ehtml\u003c/strong\u003e'\n    text:\n      type: string\n      example: 'I am pure text'\n    url:\n      type: string\n      example: '/cat-or-dog'\n    slug:\n      type: string\n      example: cat-or-dog\n      pattern: '/^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/'\n\n    justifying-response:\n      type: object\n      properties:\n        reason:\n          type: string\n          example: Because cats are cute\n        reference:\n          type: string\n          example: This optional reference supports the given reason\n        origin:\n          $ref: '#/components/schemas/origin'\n      required:\n        - reason\n\n    origin:\n      type: object\n      properties:\n        entity-id:\n          type: string\n        aggregate-id:\n          type: string\n        author:\n          type: string\n        version:\n          type: integer\n\n\n    json-aif-format:\n      type: object\n      properties:\n        nodes:\n          type: array\n          items:\n            type: object\n            properties:\n              nodeID:\n                type: string\n              type:\n                type: string\n              text:\n                type: string\n                optional: true\n              timestamp:\n                type: string\n                format: date-time\n        edges:\n          type: array\n          items:\n            type: object\n            properties:\n              edgeID:\n                type: string\n              toID:\n                type: string\n              fromID:\n                type: string\n\n      ##########################################\n\n  parameters:\n    slug-param:\n      name: slug\n      description: Slug of the issue.\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/slug'\n\n    arg-user:\n      name: arg-user\n      description: The argument the user has to defend.\n      in: path\n      required: true\n      schema:\n        type: integer\n\n    arg-sys:\n      name: arg-sys\n      description: The attacking argument of the system.\n      in: path\n      required: true\n      schema:\n        type: integer\n\n    authentication-token:\n      name: X-Authentication\n      in: header\n      description: User-authentication token\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            example: {\"nickname\": \"Christian\", \"token\":\"mytoken\"}\n            properties:\n              nickname:\n                type: string\n              token:\n                type: string\n\n  securitySchemes:\n    token:\n      type: http\n      scheme: bearer\n      description: \"Example: \\\"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJuaWNrbmFtZSI6IkNocmlzdGlhbiIsImlkIjozfQ.VWsWZ8vNTwe0rlYcr9kgI9ZjlUBnBZRJm3flXtOKzLR4lMLxVhhoe89ufu04UFfLhksFu7IMj9qGqIzZhhblaA\\\"\"\n      bearerFormat: JWT\n",
			"canonicalURL": "/github.com/hhucn/dbas@7996dbe0c66149c710217839877a1ec4e7eb46ed/-/blob/api/swagger-ui/dbas_openapi_v3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/hhucn/dbas/blob/7996dbe0c66149c710217839877a1ec4e7eb46ed/api/swagger-ui/dbas_openapi_v3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/{slug}/dot\": get: responses: 200: contents: unsupported content types: [text/vnd.graphviz]",
	"NotImplemented": [
		"empty schema",
		"unsupported content types"
	]
}