{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/shihanng/devto"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "pkg/devto/api/openapi.yaml",
			"byteSize": 57010,
			"content": "openapi: 3.0.2\ninfo:\n  contact:\n    email: yo@dev.to\n    name: DEV Team\n    url: https://dev.to/contact\n  description: Access DEV articles, comments and other resources via API\n  termsOfService: https://dev.to/terms\n  title: DEV API (beta)\n  version: 0.5.9\n  x-logo:\n    url: https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-128-1a9016906487b8ba17f2d3d3c28f9d1cb3ae9b45d685cc2711e20f6b3c6730df.png\n    backgroundColor: '#000'\n    altText: DEV logo\nservers:\n- description: Production server\n  url: https://dev.to/api\ntags:\n- description: Articles are all the posts users create on DEV\n  name: articles\n- description: Users own resources that require authentication\n  name: users\n- description: Webhooks are HTTP endpoints registered to receive events\n  name: webhooks\npaths:\n  /articles:\n    get:\n      description: |\n        This endpoint allows the client to retrieve a list of articles.\n\n        \"Articles\" are all the posts that users create on DEV that typically\n        show up in the feed. They can be a blog post, a discussion question,\n        a help thread etc. but is referred to as article within the code.\n\n        By default it will return featured, published articles ordered\n        by descending popularity.\n\n        Each page will contain `30` articles.\n\n        Responses, according to the combination of params, are cached for 24 hours.\n      operationId: getArticles\n      parameters:\n      - description: |\n          Pagination page.\n\n          This param can be used in conjuction with all other params\n          (except when asking for fresh and rising articles by themselves).\n        example: 1\n        explode: true\n        in: query\n        name: page\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      - description: |\n          Adding this parameter will return articles that contain the\n          requested tag.\n\n          This param can be used by itself, with `page` or with `top`.\n        example: discuss\n        explode: true\n        in: query\n        name: tag\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Adding this parameter will return articles belonging to a User or Organization\n          ordered by descending `published_at`.\n\n          If `state=all` the number of items returned will be `1000` instead of the default `30`.\n\n          This param can be used by itself or only with `page` and `state`.\n        example: ben\n        explode: true\n        in: query\n        name: username\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Adding this will allow the client to check which articles are fresh or rising.\n\n          If `state=fresh` the server will return published fresh articles.\n          If `state=rising` the server will return published rising articles.\n\n          This param can only be used by itself or with `username` if set to `all`.\n        example: ben\n        explode: true\n        in: query\n        name: state\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: |\n          Adding this will allow the client to return the most popular articles\n          in the last `N` days.\n\n          `top` indicates the number of days since publication of the articles\n          returned.\n\n          This param can only be used by itself or with `tag`.\n        example: 2\n        explode: true\n        in: query\n        name: top\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      responses:\n        200:\n          content:\n            application/json:\n              examples:\n                articles-success:\n                  $ref: '#/components/examples/ArticlesIndex'\n              schema:\n                items:\n                  $ref: '#/components/schemas/ArticleIndex'\n                type: array\n          description: A list of articles\n      summary: Published articles\n      tags:\n      - articles\n      x-code-samples:\n      - lang: Shell\n        label: curl (all articles)\n        source: |\n          curl https://dev.to/api/articles\n      - lang: Shell\n        label: curl (user's articles)\n        source: |\n          curl https://dev.to/api/articles?username=ben\n    post:\n      description: |\n        This endpoint allows the client to create a new article.\n\n        \"Articles\" are all the posts that users create on DEV that typically\n        show up in the feed. They can be a blog post, a discussion question,\n        a help thread etc. but is referred to as article within the code.\n\n        ### Rate limiting\n\n        There is a limit of 10 articles created each 30 seconds by the same user.\n\n        ### Additional resources\n\n        - [Rails tests for Articles API](https://github.com/thepracticaldev/dev.to/blob/master/spec/requests/api/v0/articles_spec.rb)\n      operationId: createArticle\n      requestBody:\n        content:\n          application/json:\n            examples:\n              article-create-title-body:\n                $ref: '#/components/examples/ArticleCreateTitleBody'\n              article-create-front-matter:\n                $ref: '#/components/examples/ArticleCreateFrontMatter'\n              article-create-organization:\n                $ref: '#/components/examples/ArticleCreateOrganization'\n            schema:\n              $ref: '#/components/schemas/ArticleCreate'\n        description: Article to create\n      responses:\n        201:\n          content:\n            application/json:\n              examples:\n                article-success:\n                  $ref: '#/components/examples/ArticleShow'\n              schema:\n                $ref: '#/components/schemas/ArticleShow'\n          description: A newly created article\n          headers:\n            Location:\n              description: The URL of the new article\n              explode: false\n              schema:\n                format: url\n                type: string\n              style: simple\n        400:\n          content:\n            application/json:\n              examples:\n                error-bad-request:\n                  $ref: '#/components/examples/ErrorBadRequest'\n              schema:\n                $ref: '#/components/schemas/APIError'\n          description: BadRequest\n        401:\n          content:\n            application/json:\n              examples:\n                error-unauthorized:\n                  $ref: '#/components/examples/ErrorUnauthorized'\n              schema:\n                $ref: '#/components/schemas/APIError'\n          description: Unauthorized\n        422:\n          content:\n            application/json:\n              examples:\n                error-unprocessable-entity:\n                  $ref: '#/components/examples/ErrorUnprocessableEntity'\n              schema:\n                $ref: '#/components/schemas/APIError'\n          description: Unprocessable Entity\n      security:\n      - api_key: []\n      - oauth2: []\n      summary: Create a new article\n      tags:\n      - articles\n      x-code-samples:\n      - lang: Shell\n        label: curl\n        source: |\n          curl -X POST -H \"Content-Type: application/json\" \\\n            -H \"api-key: API_KEY\" \\\n            -d '{\"article\":{\"title\":\"Title\",\"body_markdown\":\"Body\",\"published\":false,\"tags\":[\"discuss\", \"javascript\"]}}' \\\n            https://dev.to/api/articles\n      - lang: Shell\n        label: curl (with front matter)\n        source: |\n          curl -X POST -H \"Content-Type: application/json\" \\\n          -H \"api-key: API_KEY\" \\\n          -d '{\"article\":{\"body_markdown\":\"---\\ntitle:A sample article about...\\npublished:false\\n---\\n...\"}}' \\\n          https://dev.to/api/articles\n  /articles/{id}:\n    get:\n      description: |\n        This endpoint allows the client to retrieve a single\n        published article given its `id`.\n\n        Responses are cached for 5 minutes.\n      operationId: getArticleById\n      parameters:\n      - description: Id of the article\n        example: 150589\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              examples:\n                article-success:\n                  $ref: '#/components/examples/ArticleShow'\n              schema:\n                $ref: '#/components/schemas/ArticleShow'\n          description: An article\n        404:\n          content:\n            application/json:\n              examples:\n                article-not-found:\n                  $ref: '#/components/examples/ErrorNotFound'\n              schema:\n                $ref: '#/components/schemas/APIError'\n          description: Resource not found\n      summary: A published article\n      tags:\n      - articles\n      x-code-samples:\n      - lang: Shell\n        label: curl\n        source: |\n          curl https://dev.to/api/articles/150589\n    put:\n      description: |\n        This endpoint allows the client to updated an existing article.\n\n        \"Articles\" are all the posts that users create on DEV that typically\n        show up in the feed. They can be a blog post, a discussion question,\n        a help thread etc. but is referred to as article within the code.\n\n        ### Rate limiting\n\n        There are no limits on the amount of updates.\n\n        ### Additional resources\n\n        - [Rails tests for Articles API](https://github.com/thepracticaldev/dev.to/blob/master/spec/requests/api/v0/articles_spec.rb)\n      operationId: updateArticle\n      parameters:\n      - description: Id of the article\n        example: 150589\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            examples:\n              article-update-title-body:\n                $ref: '#/components/examples/ArticleCreateTitleBody'\n              article-update-front-matter:\n                $ref: '#/components/examples/ArticleCreateFrontMatter'\n              article-update-organization:\n                $ref: '#/components/examples/ArticleCreateOrganization'\n            schema:\n              $ref: '#/components/schemas/ArticleUpdate'\n        description: |\n          Article params to update.\n\n          *Note: if the article contains a front matter in its body, its front\n          matter properties will still take precedence over any JSON equivalent\n          params, which means that the full body_markdown with the modified\n          front matter params needs to be provided for an update to be successful*\n      responses:\n        200:\n          content:\n            application/json:\n              examples:\n                article-success:\n                  $ref: '#/components/examples/ArticleShow'\n              schema:\n                $ref: '#/components/schemas/ArticleShow'\n          description: The updated article\n        400:\n          content:\n            application/json:\n              examples:\n                error-bad-request:\n                  $ref: '#/components/examples/ErrorBadRequest'\n              schema:\n                $ref: '#/components/schemas/APIError'\n          description: BadRequest\n        401:\n          content:\n            application/json:\n              examples:\n                error-unauthorized:\n                  $ref: '#/components/examples/ErrorUnauthorized'\n              schema:\n                $ref: '#/components/schemas/APIError'\n          description: Unauthorized\n        422:\n          content:\n            application/json:\n              examples:\n                error-unprocessable-entity:\n                  $ref: '#/components/examples/ErrorUnprocessableEntity'\n              schema:\n                $ref: '#/components/schemas/APIError'\n          description: Unprocessable Entity\n      security:\n      - api_key: []\n      - oauth2: []\n      summary: Update an article\n      tags:\n      - articles\n      x-code-samples:\n      - lang: Shell\n        label: curl\n        source: |\n          curl -X PUT -H \"Content-Type: application/json\" \\\n            -H \"api-key: API_KEY\" \\\n            -d '{\"article\":{\"title\":\"Title\"}' \\\n            https://dev.to/api/articles/{id}\n  /articles/me:\n    get:\n      description: |\n        This endpoint allows the client to retrieve a list of published articles\n        on behalf of an authenticated user.\n\n        \"Articles\" are all the posts that users create on DEV that typically\n        show up in the feed. They can be a blog post, a discussion question,\n        a help thread etc. but is referred to as article within the code.\n\n        Published articles will be in reverse chronological publication order.\n\n        It will return published articles with pagination.\n        By default a page will contain `30` articles.\n      operationId: getUserArticles\n      parameters:\n      - description: Pagination page.\n        example: 1\n        explode: true\n        in: query\n        name: page\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      - description: Page size (defaults to 30 with a maximum of 1000).\n        example: 30\n        explode: true\n        in: query\n        name: per_page\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ArticleMe'\n                type: array\n          description: A list of published articles\n      security:\n      - api_key: []\n      - oauth2: []\n      summary: User's articles\n      tags:\n      - articles\n      - users\n      x-code-samples:\n      - lang: Shell\n        label: curl\n        source: |\n          curl -H \"api-key: API_KEY\" https://dev.to/api/articles/me\n  /articles/me/published:\n    get:\n      description: |\n        This endpoint allows the client to retrieve a list of published articles\n        on behalf of an authenticated user.\n\n        \"Articles\" are all the posts that users create on DEV that typically\n        show up in the feed. They can be a blog post, a discussion question,\n        a help thread etc. but is referred to as article within the code.\n\n        Published articles will be in reverse chronological publication order.\n\n        It will return published articles with pagination.\n        By default a page will contain `30` articles.\n      operationId: getUserPublishedArticles\n      parameters:\n      - description: Pagination page.\n        example: 1\n        explode: true\n        in: query\n        name: page\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      - description: Page size (defaults to 30 with a maximum of 1000).\n        example: 30\n        explode: true\n        in: query\n        name: per_page\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ArticleMe'\n                type: array\n          description: A list of published articles\n      security:\n      - api_key: []\n      - oauth2: []\n      summary: User's published articles\n      tags:\n      - articles\n      - users\n      x-code-samples:\n      - lang: Shell\n        label: curl\n        source: |\n          curl -H \"api-key: API_KEY\" https://dev.to/api/articles/me/published\n  /articles/me/unpublished:\n    get:\n      description: |\n        This endpoint allows the client to retrieve a list of unpublished articles\n        on behalf of an authenticated user.\n\n        \"Articles\" are all the posts that users create on DEV that typically\n        show up in the feed. They can be a blog post, a discussion question,\n        a help thread etc. but is referred to as article within the code.\n\n        Unpublished articles will be in reverse chronological creation order.\n\n        It will return unpublished articles with pagination.\n        By default a page will contain `30` articles.\n      operationId: getUserUnpublishedArticles\n      parameters:\n      - description: Pagination page.\n        example: 1\n        explode: true\n        in: query\n        name: page\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      - description: Page size (defaults to 30 with a maximum of 1000).\n        example: 30\n        explode: true\n        in: query\n        name: per_page\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ArticleMe'\n                type: array\n          description: A list of articles\n      security:\n      - api_key: []\n      - oauth2: []\n      summary: User's unpublished articles\n      tags:\n      - articles\n      - users\n      x-code-samples:\n      - lang: Shell\n        label: curl\n        source: |\n          curl -H \"api-key: API_KEY\" https://dev.to/api/articles/me/unpublished\n  /articles/me/all:\n    get:\n      description: |\n        This endpoint allows the client to retrieve a list of all articles on\n        behalf of an authenticated user.\n\n        \"Articles\" are all the posts that users create on DEV that typically\n        show up in the feed. They can be a blog post, a discussion question,\n        a help thread etc. but is referred to as article within the code.\n\n        It will return both published and unpublished articles with pagination.\n\n        Unpublished articles will be at the top of the list in reverse chronological creation order.\n        Published articles will follow in reverse chronological publication order.\n\n        By default a page will contain `30` articles.\n      operationId: getUserAllArticles\n      parameters:\n      - description: Pagination page.\n        example: 1\n        explode: true\n        in: query\n        name: page\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      - description: Page size (defaults to 30 with a maximum of 1000).\n        example: 30\n        explode: true\n        in: query\n        name: per_page\n        required: false\n        schema:\n          format: int32\n          type: integer\n        style: form\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/ArticleMe'\n                type: array\n          description: A list of articles\n      security:\n      - api_key: []\n      - oauth2: []\n      summary: User's all articles\n      tags:\n      - articles\n      - users\n      x-code-samples:\n      - lang: Shell\n        label: curl\n        source: |\n          curl -H \"api-key: API_KEY\" https://dev.to/api/articles/me/all\n  /webhooks:\n    get:\n      description: |\n        This endpoint allows the client to retrieve a list of webhooks they have\n        previously registered.\n\n        \"Webhooks\" are used to register HTTP endpoints that will be called once a relevant event is\n        triggered inside the web application, events like `article_created`, `article_updated`.\n\n        It will return all webhooks, without pagination.\n      operationId: getWebhooks\n      responses:\n        200:\n          content:\n            application/json:\n              examples:\n                webhooks-success:\n                  summary: Successful response\n                  value:\n                  - type_of: webhook_endpoint\n                    id: 1\n                    source: DEV\n                    target_url: https://example.com/webhooks/webhook1\n                    events:\n                    - article_created\n                    created_at: 2019-09-02T09:47:39.230Z\n              schema:\n                items:\n                  $ref: '#/components/schemas/WebhookIndex'\n                type: array\n          description: A list of webhooks\n      security:\n      - api_key: []\n      - oauth2: []\n      summary: Webhooks\n      tags:\n      - webhooks\n      x-code-samples:\n      - lang: Shell\n        label: curl\n        source: |\n          curl -H \"api-key: API_KEY\" https://dev.to/api/webhooks\n    post:\n      description: |\n        This endpoint allows the client to create a new webhook.\n\n        \"Webhooks\" are used to register HTTP endpoints that will be called once a relevant event is\n        triggered inside the web application, events like `article_created`, `article_updated`.\n      operationId: createWebhook\n      requestBody:\n        content:\n          application/json:\n            examples:\n              webhook-create:\n                $ref: '#/components/examples/WebhookCreate'\n            schema:\n              $ref: '#/components/schemas/WebhookCreate'\n        description: Webhook to create\n      responses:\n        201:\n          content:\n            application/json:\n              examples:\n                webhook-success:\n                  $ref: '#/components/examples/WebhookShow'\n              schema:\n                $ref: '#/components/schemas/WebhookShow'\n          description: A newly created webhook\n        400:\n          content:\n            application/json:\n              examples:\n                error-bad-request:\n                  $ref: '#/components/examples/ErrorBadRequest'\n              schema:\n                $ref: '#/components/schemas/APIError'\n          description: BadRequest\n        401:\n          content:\n            application/json:\n              examples:\n                error-unauthorized:\n                  $ref: '#/components/examples/ErrorUnauthorized'\n              schema:\n                $ref: '#/components/schemas/APIError'\n          description: Unauthorized\n        422:\n          content:\n            application/json:\n              examples:\n                error-unprocessable-entity:\n                  $ref: '#/components/examples/ErrorUnprocessableEntity'\n              schema:\n                $ref: '#/components/schemas/APIError'\n          description: Unprocessable Entity\n      security:\n      - api_key: []\n      - oauth2: []\n      summary: Create a new webhook\n      tags:\n      - webhooks\n      x-code-samples:\n      - lang: Shell\n        label: curl\n        source: |\n          curl -X POST -H \"Content-Type: application/json\" \\\n            -H \"api-key: API_KEY\" \\\n            -d '{\"webhook_endpoint\":{\"target_url\":\"https://example.org/webhooks/webhook1\",\"source\":\"DEV\",\"events\":[\"article_created\"]}}' \\\n            https://dev.to/api/webhooks\n  /webhooks/{id}:\n    delete:\n      description: |\n        This endpoint allows the client to delete a single\n        webhook given its `id`.\n      operationId: deleteWebhook\n      parameters:\n      - description: Id of the webhook\n        example: 123\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n        style: simple\n      responses:\n        204:\n          description: A successful deletion\n        401:\n          content:\n            application/json:\n              examples:\n                article-unauthorized:\n                  $ref: '#/components/examples/ErrorUnauthorized'\n              schema:\n                $ref: '#/components/schemas/APIError'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              examples:\n                article-not-found:\n                  $ref: '#/components/examples/ErrorNotFound'\n              schema:\n                $ref: '#/components/schemas/APIError'\n          description: Resource not found\n      security:\n      - api_key: []\n      - oauth2: []\n      summary: A webhook endpoint\n      tags:\n      - webhooks\n      x-code-samples:\n      - lang: Shell\n        label: curl\n        source: |\n          curl -X DELETE \\\n            -H \"api-key: API_KEY\" \\\n            https://dev.to/api/webhooks/1\n    get:\n      description: |\n        This endpoint allows the client to retrieve a single\n        webhook given its `id`.\n      operationId: getWebhookById\n      parameters:\n      - description: Id of the webhook\n        example: 123\n        explode: false\n        in: path\n        name: id\n        required: true\n        schema:\n          format: int32\n          type: integer\n        style: simple\n      responses:\n        200:\n          content:\n            application/json:\n              examples:\n                webhook-success:\n                  $ref: '#/components/examples/WebhookShow'\n              schema:\n                $ref: '#/components/schemas/WebhookShow'\n          description: A webhook endpoint\n        401:\n          content:\n            application/json:\n              examples:\n                article-unauthorized:\n                  $ref: '#/components/examples/ErrorUnauthorized'\n              schema:\n                $ref: '#/components/schemas/APIError'\n          description: Unauthorized\n        404:\n          content:\n            application/json:\n              examples:\n                article-not-found:\n                  $ref: '#/components/examples/ErrorNotFound'\n              schema:\n                $ref: '#/components/schemas/APIError'\n          description: Resource not found\n      security:\n      - api_key: []\n      - oauth2: []\n      summary: A webhook endpoint\n      tags:\n      - webhooks\n      x-code-samples:\n      - lang: Shell\n        label: curl\n        source: |\n          curl https://dev.to/api/webhooks/123\ncomponents:\n  examples:\n    ErrorBadRequest:\n      value:\n        error: bad request\n        status: 400\n    ErrorNotFound:\n      value:\n        error: not found\n        status: 404\n    ErrorUnauthorized:\n      value:\n        error: unauthorized\n        status: 401\n    ErrorUnprocessableEntity:\n      value:\n        error: 'param is missing or the value is empty: article'\n        status: 422\n    ArticlesIndex:\n      value:\n      - type_of: article\n        id: 194541\n        title: There's a new DEV theme in town for all you 10x hackers out there (plus\n          one actually useful new feature)\n        description: \"\"\n        cover_image: https://res.cloudinary.com/practicaldev/image/fetch/s--74Bl23tz--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--xU8cbIK4--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/8a39dzf3oovzc2snl7iv.png\n        readable_publish_date: Oct 24\n        social_image: https://res.cloudinary.com/practicaldev/image/fetch/s--SeMxdKIa--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--xU8cbIK4--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/8a39dzf3oovzc2snl7iv.png\n        tag_list:\n        - meta\n        - changelog\n        - css\n        - ux\n        tags: meta, changelog, css, ux\n        slug: there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk\n        path: /devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk\n        url: https://dev.to/devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk\n        canonical_url: https://dev.to/devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk\n        comments_count: 37\n        positive_reactions_count: 142\n        collection_id: null\n        created_at: 2019-10-24T13:41:29Z\n        edited_at: 2019-10-24T13:56:35Z\n        crossposted_at: null\n        published_at: 2019-10-24T13:52:17Z\n        last_comment_at: 2019-10-25T08:12:43Z\n        published_timestamp: 2019-10-24T13:52:17Z\n        user:\n          name: Ben Halpern\n          username: ben\n          twitter_username: bendhalpern\n          github_username: benhalpern\n          website_url: http://benhalpern.com\n          profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--Y1sq1tFG--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png\n          profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--DcW51A6v--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png\n        organization:\n          name: The DEV Team\n          username: devteam\n          slug: devteam\n          profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--0kDBq1Ne--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png\n          profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--8tTU-XkZ--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png\n    ArticleShow:\n      value:\n        type_of: article\n        id: 150589\n        title: 'Byte Sized Episode 2: The Creation of Graph Theory '\n        description: The full story of Leonhard Euler and the creation of this fundamental\n          computer science principle, delivered in a few minutes.\n        cover_image: https://res.cloudinary.com/practicaldev/image/fetch/s--qgutBUrH--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png\n        readable_publish_date: Aug  1\n        social_image: https://res.cloudinary.com/practicaldev/image/fetch/s--6wSHHfwd--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png\n        tag_list: computerscience, graphtheory, bytesized, history\n        tags:\n        - computerscience\n        - graphtheory\n        - bytesized\n        - history\n        slug: byte-sized-episode-2-the-creation-of-graph-theory-34g1\n        path: /bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1\n        url: https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1\n        canonical_url: https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1\n        comments_count: 21\n        positive_reactions_count: 322\n        collection_id: 1693\n        created_at: 2019-07-31T11:15:06Z\n        edited_at: null\n        crossposted_at: null\n        published_at: 2019-08-01T15:47:54Z\n        last_comment_at: 2019-08-06T16:48:10Z\n        published_timestamp: 2019-08-01T15:47:54Z\n        body_html: |\n          \u003cp\u003eToday's episode of Byte Sized is about Leonhard Euler and the creation of \u003ca href=\"https://en.wikipedia.org/wiki/Graph_theory\"\u003eGraph Theory\u003c/a\u003e.\u003c/p\u003e\n\n          \u003cp\u003eFor more about how Graph Theory works, check out this video from BaseCS!\u003c/p\u003e...\n        body_markdown: \"---\\r\\ntitle: Byte Sized Episode 2: The Creation of Graph\\\n          \\ Theory \\r\\npublished: true\\r\\ndescription: The full story of Leonhard\\\n          \\ Euler and the creation of this fundamental computer science principle,\\\n          \\ delivered in a few minutes.\\r\\ntags: computerscience, graphtheory, bytesized,\\\n          \\ history\\r\\ncover_image: https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png\\r\\\n          \\nseries: Byte Sized Season 1\\r\\n---\\r\\n\\r\\nToday's episode of Byte Sized\\\n          \\ is about Leonhard Euler and the creation of [Graph Theory](https://en.wikipedia.org/wiki/Graph_theory).\\r\\\n          \\n\\r\\nFor more about how Graph Theory works, check out this video from BaseCS!...\"\n        user:\n          name: Vaidehi Joshi\n          username: vaidehijoshi\n          twitter_username: vaidehijoshi\n          github_username: vaidehijoshi\n          website_url: http://www.vaidehi.com\n          profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--eDGAYAoK--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg\n          profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--htZnqMn3--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg\n        organization:\n          name: Byte Sized\n          username: bytesized\n          slug: bytesized\n          profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--sq0DrZfn--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/865/652f7998-32a8-4fd9-85ca-dd697d2a9ee9.png\n          profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--1Pt_ICL---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/865/652f7998-32a8-4fd9-85ca-dd697d2a9ee9.png\n    ArticleCreateTitleBody:\n      value:\n        article:\n          title: Hello, World!\n          published: true\n          body_markdown: Hello DEV, this is my first post\n          tags:\n          - discuss\n          - help\n          series: Hello series\n          canonical_url: https://example.com/blog/hello\n    ArticleCreateFrontMatter:\n      value:\n        article:\n          body_markdown: |\n            ---\n            title: Hello, World!\n            published: true\n            tags: discuss, help\n            date: 20190701T10:00Z\n            series: Hello series\n            canonical_url: https://example.com/blog/hello\n            ---\n\n            Hello DEV, this is my first post\n    ArticleCreateOrganization:\n      value:\n        article:\n          title: Hello, World!\n          published: true\n          body_markdown: Hello DEV, this is my first post\n          tags:\n          - discuss\n          - help\n          series: Hello series\n          canonical_url: https://example.com/blog/hello\n          organization_id: 1234\n    WebhookCreate:\n      value:\n        webhook_endpoint:\n          target_url: https://example.com/webhooks/webhook1\n          source: DEV\n          events:\n          - article_created\n    WebhookShow:\n      value:\n        type_of: webhook_endpoint\n        id: 1\n        source: DEV\n        target_url: https://example.com/webhooks/webhook1\n        events:\n        - article_created\n        created_at: 2019-09-02T09:47:39.230Z\n        user:\n          name: bob\n          username: bob\n          twitter_username: null\n          github_username: bob\n          website_url: null\n          profile_image: '...'\n          profile_image_90: '...'\n  schemas:\n    APIError:\n      properties:\n        error:\n          type: string\n        status:\n          format: int32\n          type: integer\n      required:\n      - error\n      - status\n      type: object\n    ArticleIndex:\n      example:\n        readable_publish_date: readable_publish_date\n        description: description\n        created_at: 2000-01-23T04:56:07.000+00:00\n        title: title\n        canonical_url: http://example.com/aeiou\n        flare_tag:\n          text_color_hex: text_color_hex\n          name: name\n          bg_color_hex: bg_color_hex\n        url: http://example.com/aeiou\n        tags: tags\n        social_image: http://example.com/aeiou\n        path: path\n        positive_reactions_count: 1\n        tag_list:\n        - tag_list\n        - tag_list\n        comments_count: 6\n        last_comment_at: 2000-01-23T04:56:07.000+00:00\n        organization:\n          profile_image: http://example.com/aeiou\n          name: name\n          slug: slug\n          profile_image_90: http://example.com/aeiou\n          username: username\n        type_of: type_of\n        edited_at: 2000-01-23T04:56:07.000+00:00\n        id: 0\n        cover_image: http://example.com/aeiou\n        published_at: 2000-01-23T04:56:07.000+00:00\n        crossposted_at: 2000-01-23T04:56:07.000+00:00\n        published_timestamp: 2000-01-23T04:56:07.000+00:00\n        user:\n          profile_image: profile_image\n          website_url: http://example.com/aeiou\n          name: name\n          twitter_username: twitter_username\n          github_username: github_username\n          profile_image_90: profile_image_90\n          username: username\n        slug: slug\n      properties:\n        type_of:\n          type: string\n        id:\n          format: int32\n          type: integer\n        title:\n          type: string\n        description:\n          type: string\n        cover_image:\n          format: url\n          type: string\n        readable_publish_date:\n          type: string\n        social_image:\n          format: url\n          type: string\n        tag_list:\n          items:\n            type: string\n          type: array\n        tags:\n          type: string\n        slug:\n          type: string\n        path:\n          format: path\n          type: string\n        url:\n          format: url\n          type: string\n        canonical_url:\n          format: url\n          type: string\n        comments_count:\n          format: int32\n          type: integer\n        positive_reactions_count:\n          format: int32\n          type: integer\n        created_at:\n          format: date-time\n          type: string\n        edited_at:\n          format: date-time\n          type: string\n        crossposted_at:\n          format: date-time\n          type: string\n        published_at:\n          format: date-time\n          type: string\n        last_comment_at:\n          format: date-time\n          type: string\n        published_timestamp:\n          description: Crossposting or published date time\n          format: date-time\n          type: string\n        user:\n          $ref: '#/components/schemas/ArticleUser'\n        organization:\n          $ref: '#/components/schemas/ArticleOrganization'\n        flare_tag:\n          $ref: '#/components/schemas/ArticleFlareTag'\n      required:\n      - canonical_url\n      - comments_count\n      - cover_image\n      - created_at\n      - crossposted_at\n      - description\n      - edited_at\n      - id\n      - last_comment_at\n      - path\n      - positive_reactions_count\n      - published_at\n      - published_timestamp\n      - readable_publish_date\n      - slug\n      - social_image\n      - tag_list\n      - tags\n      - title\n      - type_of\n      - url\n      - user\n      type: object\n    ArticleShow:\n      example:\n        body_html: body_html\n        readable_publish_date: readable_publish_date\n        description: description\n        created_at: 2000-01-23T04:56:07.000+00:00\n        title: title\n        path: path\n        tag_list: tag_list\n        type_of: type_of\n        edited_at: 2000-01-23T04:56:07.000+00:00\n        id: 0\n        cover_image: http://example.com/aeiou\n        published_at: 2000-01-23T04:56:07.000+00:00\n        published_timestamp: 2000-01-23T04:56:07.000+00:00\n        slug: slug\n        canonical_url: http://example.com/aeiou\n        flare_tag:\n          text_color_hex: text_color_hex\n          name: name\n          bg_color_hex: bg_color_hex\n        url: http://example.com/aeiou\n        tags:\n        - tags\n        - tags\n        social_image: http://example.com/aeiou\n        positive_reactions_count: 1\n        body_markdown: body_markdown\n        comments_count: 6\n        last_comment_at: 2000-01-23T04:56:07.000+00:00\n        organization:\n          profile_image: http://example.com/aeiou\n          name: name\n          slug: slug\n          profile_image_90: http://example.com/aeiou\n          username: username\n        crossposted_at: 2000-01-23T04:56:07.000+00:00\n        user:\n          profile_image: profile_image\n          website_url: http://example.com/aeiou\n          name: name\n          twitter_username: twitter_username\n          github_username: github_username\n          profile_image_90: profile_image_90\n          username: username\n      properties:\n        type_of:\n          type: string\n        id:\n          format: int32\n          type: integer\n        title:\n          type: string\n        description:\n          type: string\n        cover_image:\n          format: url\n          type: string\n        readable_publish_date:\n          type: string\n        social_image:\n          format: url\n          type: string\n        tag_list:\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n        slug:\n          type: string\n        path:\n          format: path\n          type: string\n        url:\n          format: url\n          type: string\n        canonical_url:\n          format: url\n          type: string\n        comments_count:\n          format: int32\n          type: integer\n        positive_reactions_count:\n          format: int32\n          type: integer\n        created_at:\n          format: date-time\n          type: string\n        edited_at:\n          format: date-time\n          type: string\n        crossposted_at:\n          format: date-time\n          type: string\n        published_at:\n          format: date-time\n          type: string\n        last_comment_at:\n          format: date-time\n          type: string\n        published_timestamp:\n          description: Crossposting or published date time\n          format: date-time\n          type: string\n        body_html:\n          type: string\n        body_markdown:\n          type: string\n        user:\n          $ref: '#/components/schemas/ArticleUser'\n        organization:\n          $ref: '#/components/schemas/ArticleOrganization'\n        flare_tag:\n          $ref: '#/components/schemas/ArticleFlareTag'\n      required:\n      - body_html\n      - body_markdown\n      - canonical_url\n      - comments_count\n      - cover_image\n      - created_at\n      - crossposted_at\n      - description\n      - edited_at\n      - id\n      - last_comment_at\n      - path\n      - positive_reactions_count\n      - published_at\n      - published_timestamp\n      - readable_publish_date\n      - slug\n      - social_image\n      - tag_list\n      - tags\n      - title\n      - type_of\n      - url\n      - user\n      type: object\n    ArticleCreate:\n      example:\n        article:\n          body_markdown: body_markdown\n          series: series\n          main_image: http://example.com/aeiou\n          organization_id: 0\n          description: description\n          published: true\n          title: title\n          canonical_url: http://example.com/aeiou\n          tags:\n          - tags\n          - tags\n      properties:\n        article:\n          $ref: '#/components/schemas/ArticleCreate_article'\n      type: object\n    ArticleUpdate:\n      example:\n        article:\n          body_markdown: body_markdown\n          series: series\n          main_image: http://example.com/aeiou\n          organization_id: 0\n          description: description\n          published: true\n          title: title\n          canonical_url: http://example.com/aeiou\n          tags:\n          - tags\n          - tags\n      properties:\n        article:\n          $ref: '#/components/schemas/ArticleUpdate_article'\n      type: object\n    ArticleMe:\n      example:\n        description: description\n        published: true\n        title: title\n        canonical_url: http://example.com/aeiou\n        flare_tag:\n          text_color_hex: text_color_hex\n          name: name\n          bg_color_hex: bg_color_hex\n        url: http://example.com/aeiou\n        path: path\n        positive_reactions_count: 1\n        tag_list:\n        - tag_list\n        - tag_list\n        comments_count: 6\n        organization:\n          profile_image: http://example.com/aeiou\n          name: name\n          slug: slug\n          profile_image_90: http://example.com/aeiou\n          username: username\n        type_of: type_of\n        page_views_count: 5\n        id: 0\n        cover_image: http://example.com/aeiou\n        published_at: 2000-01-23T04:56:07.000+00:00\n        published_timestamp: 2000-01-23T04:56:07.000+00:00\n        user:\n          profile_image: profile_image\n          website_url: http://example.com/aeiou\n          name: name\n          twitter_username: twitter_username\n          github_username: github_username\n          profile_image_90: profile_image_90\n          username: username\n        slug: slug\n      properties:\n        type_of:\n          type: string\n        id:\n          format: int32\n          type: integer\n        title:\n          type: string\n        description:\n          type: string\n        cover_image:\n          format: url\n          type: string\n        published:\n          type: boolean\n        published_at:\n          format: date-time\n          type: string\n        tag_list:\n          items:\n            type: string\n          type: array\n        slug:\n          type: string\n        path:\n          format: path\n          type: string\n        url:\n          format: url\n          type: string\n        canonical_url:\n          format: url\n          type: string\n        comments_count:\n          format: int32\n          type: integer\n        positive_reactions_count:\n          format: int32\n          type: integer\n        page_views_count:\n          format: int32\n          type: integer\n        published_timestamp:\n          description: Crossposting or published date time\n          format: date-time\n          type: string\n        user:\n          $ref: '#/components/schemas/ArticleUser'\n        organization:\n          $ref: '#/components/schemas/ArticleOrganization'\n        flare_tag:\n          $ref: '#/components/schemas/ArticleFlareTag'\n      required:\n      - body_markdown\n      - canonical_url\n      - comments_count\n      - cover_image\n      - description\n      - id\n      - page_views_count\n      - path\n      - positive_reactions_count\n      - published\n      - published_at\n      - published_timestamp\n      - slug\n      - tag_list\n      - title\n      - type_of\n      - url\n      - user\n      type: object\n    ArticleUser:\n      description: The article's creator\n      example:\n        profile_image: profile_image\n        website_url: http://example.com/aeiou\n        name: name\n        twitter_username: twitter_username\n        github_username: github_username\n        profile_image_90: profile_image_90\n        username: username\n      properties:\n        name:\n          type: string\n        username:\n          type: string\n        twitter_username:\n          type: string\n        github_username:\n          type: string\n        website_url:\n          format: url\n          type: string\n        profile_image:\n          description: Profile image (640x640)\n          type: string\n        profile_image_90:\n          description: Profile image (90x90)\n          type: string\n      type: object\n    ArticleOrganization:\n      description: The organization the article belongs to\n      example:\n        profile_image: http://example.com/aeiou\n        name: name\n        slug: slug\n        profile_image_90: http://example.com/aeiou\n        username: username\n      properties:\n        name:\n          type: string\n        username:\n          type: string\n        slug:\n          type: string\n        profile_image:\n          description: Profile image (640x640)\n          format: url\n          type: string\n        profile_image_90:\n          description: Profile image (90x90)\n          format: url\n          type: string\n      type: object\n    ArticleFlareTag:\n      description: Flare tag of the article\n      example:\n        text_color_hex: text_color_hex\n        name: name\n        bg_color_hex: bg_color_hex\n      properties:\n        name:\n          type: string\n        bg_color_hex:\n          description: Background color (hexadecimal)\n          type: string\n        text_color_hex:\n          description: Text color (hexadecimal)\n          type: string\n      type: object\n    WebhookCreate:\n      description: Webhook creation payload\n      example:\n        webhook_endpoint:\n          target_url: http://example.com/aeiou\n          source: source\n          events:\n          - events\n          - events\n      properties:\n        webhook_endpoint:\n          $ref: '#/components/schemas/WebhookCreate_webhook_endpoint'\n      type: object\n    WebhookShow:\n      description: Webhook\n      example:\n        target_url: http://example.com/aeiou\n        created_at: 2000-01-23T04:56:07.000+00:00\n        type_of: type_of\n        id: 0\n        source: source\n        user:\n          profile_image: profile_image\n          website_url: http://example.com/aeiou\n          name: name\n          twitter_username: twitter_username\n          github_username: github_username\n          profile_image_90: profile_image_90\n          username: username\n        events:\n        - events\n        - events\n      properties:\n        type_of:\n          type: string\n        id:\n          format: int64\n          type: integer\n        source:\n          description: The name of the requester, eg. \"DEV\"\n          type: string\n        target_url:\n          format: url\n          type: string\n        events:\n          description: An array of events identifiers\n          items:\n            type: string\n          type: array\n        created_at:\n          format: date-time\n          type: string\n        user:\n          $ref: '#/components/schemas/ArticleUser'\n      type: object\n    WebhookIndex:\n      description: Webhook\n      example:\n        target_url: http://example.com/aeiou\n        created_at: 2000-01-23T04:56:07.000+00:00\n        type_of: type_of\n        id: 0\n        source: source\n        events:\n        - events\n        - events\n      properties:\n        type_of:\n          type: string\n        id:\n          format: int64\n          type: integer\n        source:\n          description: The name of the requester, eg. \"DEV\"\n          type: string\n        target_url:\n          format: url\n          type: string\n        events:\n          description: An array of events identifiers\n          items:\n            type: string\n          type: array\n        created_at:\n          format: date-time\n          type: string\n      type: object\n    ArticleCreate_article:\n      example:\n        body_markdown: body_markdown\n        series: series\n        main_image: http://example.com/aeiou\n        organization_id: 0\n        description: description\n        published: true\n        title: title\n        canonical_url: http://example.com/aeiou\n        tags:\n        - tags\n        - tags\n      properties:\n        title:\n          type: string\n        body_markdown:\n          description: |\n            The body of the article.\n\n            It can contain an optional front matter. For example\n\n            ```markdown\n            ---\n            title: Hello, World!\n            published: true\n            tags: discuss, help\n            date: 20190701T10:00Z\n            series: Hello series\n            canonical_url: https://example.com/blog/hello\n            cover_image: article_published_cover_image\n            ---\n            ```\n\n            `date`, `series` and `canonical_url` are optional.\n            `date` is the publication date-time\n            `series` is the name of the series the article belongs to\n            `canonical_url` is the canonical URL of the article\n            `cover_image` is the main image of the article\n\n            *If the markdown contains a front matter, it will take precedence\n            on the equivalent params given in the JSON payload.*\n          type: string\n        published:\n          description: |\n            True to create a published article, false otherwise. Defaults to false\n          type: boolean\n        series:\n          description: |\n            Article series name.\n\n            All articles belonging to the same series need to have the same name\n            in this parameter.\n          type: string\n        main_image:\n          format: url\n          type: string\n        canonical_url:\n          format: url\n          type: string\n        description:\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n        organization_id:\n          description: |\n            Only users belonging to an organization can assign the article to it\n          format: int32\n          type: integer\n      required:\n      - title\n    ArticleUpdate_article:\n      example:\n        body_markdown: body_markdown\n        series: series\n        main_image: http://example.com/aeiou\n        organization_id: 0\n        description: description\n        published: true\n        title: title\n        canonical_url: http://example.com/aeiou\n        tags:\n        - tags\n        - tags\n      properties:\n        title:\n          type: string\n        body_markdown:\n          description: |\n            The body of the article.\n\n            It can contain an optional front matter. For example\n\n            ```markdown\n            ---\n            title: Hello, World!\n            published: true\n            tags: discuss, help\n            date: 20190701T10:00Z\n            series: Hello series\n            canonical_url: https://example.com/blog/hello\n            cover_image: article_published_cover_image\n            ---\n            ```\n\n            `date`, `series` and `canonical_url` are optional.\n            `date` is the publication date-time\n            `series` is the name of the series the article belongs to\n            `canonical_url` is the canonical URL of the article\n            `cover_image` is the main image of the article\n\n            *If the markdown contains a front matter, it will take precedence\n            on the equivalent params given in the JSON payload.*\n          type: string\n        published:\n          description: |\n            True to create a published article, false otherwise. Defaults to false\n          type: boolean\n        series:\n          description: |\n            Article series name.\n\n            All articles belonging to the same series need to have the same name\n            in this parameter.\n\n            To remove an article from a series, the `null` value can be used.\n          type: string\n        main_image:\n          format: url\n          type: string\n        canonical_url:\n          format: url\n          type: string\n        description:\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n        organization_id:\n          description: |\n            Only users belonging to an organization can assign the article to it\n          format: int32\n          type: integer\n    WebhookCreate_webhook_endpoint:\n      example:\n        target_url: http://example.com/aeiou\n        source: source\n        events:\n        - events\n        - events\n      properties:\n        source:\n          description: The name of the requester, eg. \"DEV\"\n          type: string\n        target_url:\n          format: url\n          type: string\n        events:\n          description: An array of events identifiers\n          items:\n            type: string\n          type: array\n      required:\n      - events\n      - source\n      - target_url\n  securitySchemes:\n    api_key:\n      description: |\n        API Key authentication.\n\n        Authentication for some endpoints, like write operations on the\n        Articles API require a DEV API key.\n\n        ### Getting an API key\n\n        To obtain one, please follow these steps:\n\n          - visit https://dev.to/settings/account\n          - in the \"DEV API Keys\" section create a new key by adding a\n            description and clicking on \"Generate API Key\"\n\n            ![obtain a DEV API Key](https://user-images.githubusercontent.com/146201/64421366-af3f8b00-d0a1-11e9-8ff6-7cc0ca6e854e.png)\n          - You'll see the newly generated key in the same view\n            ![generated DEV API Key](https://user-images.githubusercontent.com/146201/64421367-af3f8b00-d0a1-11e9-9831-73d3bdfdff66.png)\n      in: header\n      name: api-key\n      type: apiKey\n    oauth2:\n      description: |\n        OAuth2 authentication.\n\n        OAuth2 authentication is still in private alpha.\n      flows:\n        authorizationCode:\n          authorizationUrl: https://dev.to/oauth/authorize\n          refreshUrl: https://dev.to/oauth/token\n          scopes: {}\n          tokenUrl: https://dev.to/oauth/token\n        clientCredentials:\n          refreshUrl: https://dev.to/oauth/token\n          scopes: {}\n          tokenUrl: https://dev.to/oauth/token\n      type: oauth2\n",
			"canonicalURL": "/github.com/shihanng/devto@062835c89a417d1801231af9a99ea812f8d9da28/-/blob/pkg/devto/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/shihanng/devto/blob/062835c89a417d1801231af9a99ea812f8d9da28/pkg/devto/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/webhooks/{id}\": get: security: security \"oauth2\" (index 1): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}