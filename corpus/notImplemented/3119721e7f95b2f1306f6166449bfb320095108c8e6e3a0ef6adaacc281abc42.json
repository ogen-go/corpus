{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/GluuFederation/oxAuth"
		},
		"file": {
			"name": "oxAuthSwagger.yaml",
			"size": 0,
			"path": "docs/oxAuthSwagger.yaml",
			"byteSize": 196472,
			"content": "# raw swagger spec link:\n# https://raw.githubusercontent.com/GluuFederation/oxAuth/master/docs/oxAuthSwagger.yaml\n# https://gluu.org/swagger-ui/?url=https://raw.githubusercontent.com/GluuFederation/oxAuth/master/docs/oxAuthSwagger.yaml\nopenapi: 3.0.1\ninfo:\n  title: oxAuth\n  description: oxAuth - OAuth 2.0 server; OpenID Connect Provider (OP) \u0026 UMA Authorization Server (AS)\n  contact:\n    email: yuriyz@gluu.org\n  license:\n    name: License\n    url: https://github.com/GluuFederation/oxAuth/blob/master/LICENSE\n  version: \"4.3.1\"\nservers:\n\n  # Added by API Auto Mocking Plugin\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/yuriyz1/oxauth/4.3.1\n  - url: https://gluu.org/\ntags:\n  - name: developers\n    description: oxAuth is an open source OpenID Connect Provider (OP) and UMA Authorization Server (AS). The project also includes OpenID Connect Client code which can be used by websites to validate tokens.oxAuth currently implements all required aspects of the OpenID Connect stack, including an OAuth 2.0 authorization server, Simple Web Discovery, Dynamic Client Registration, JSON Web Tokens, JSON Web Keys, and User Info Endpoint.oxAuth is tightly coupled with oxTrust.\n\npaths:\n  /authorize:\n    get:\n      tags:\n        - Authorization\n      summary: The Authorization Endpoint performs Authentication of the End-User.\n      description: End-User Authentication and Authorization done by sending the User Agent to the Authorization Endpoint using request parameters defined by OAuth 2.0 and OpenID Connect.\n      operationId: get_authorize\n      parameters:\n        - name: scope\n          in: query\n          required: true\n          description: OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present.\n          schema:\n            type: string\n        - name: response_type\n          in: query\n          required: true\n          description: OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used.\n          schema:\n            type: string\n        - name: client_id\n          in: query\n          required: true\n          description: OAuth 2.0 Client Identifier valid at the Authorization Server.\n          schema:\n            type: string\n        - name: redirect_uri\n          in: query\n          required: true\n          description: Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider.\n          schema:\n            type: string\n        - name: state\n          in: query\n          required: false\n          description: Opaque value used to maintain state between the request and the callback.\n          schema:\n            type: string\n        - name: response_mode\n          in: query\n          required: false\n          description: Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint.\n          schema:\n            type: string\n        - name: nonce\n          in: query\n          required: false\n          description: String value used to associate a Client session with an ID Token, and to mitigate replay attacks.\n          schema:\n            type: string\n        - name: display\n          in: query\n          required: false\n          description: ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.\n          schema:\n            type: string\n        - name: prompt\n          in: query\n          required: false\n          description: Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The defined values are - none, login, consent, select_account.\n          schema:\n            type: string\n        - name: max_age\n          in: query\n          required: false\n          description: Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP.\n          schema:\n            type: integer\n        - name: ui_locales\n          in: query\n          required: false\n          description: End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference.\n          #example: \\\"fr-CA fr en\\\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation).\n          schema:\n            type: string\n        - name: id_token_hint\n          in: query\n          required: false\n          description: ID Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client. If the End-User identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response.\n          schema:\n            type: string\n        - name: login_hint\n          in: query\n          required: false\n          description: Hint to the Authorization Server about the login identifier the End-User might use to log in (if necessary).\n          schema:\n            type: string\n        - name: acr_values\n          in: query\n          required: false\n          description: Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference.\n          schema:\n            type: string\n        - name: amr_values\n          in: query\n          required: false\n          description: AMR Values.\n          schema:\n            type: string\n        - name: request\n          in: query\n          required: false\n          description: This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value. It represents the request as a JWT whose Claims are the request parameters.\n          schema:\n            type: string\n        - name: request_uri\n          in: query\n          required: false\n          description: This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.\n          schema:\n            type: string\n        - name: request_session_id\n          in: query\n          required: false\n          description: Request session id.\n          schema:\n            type: string\n        - name: session_id\n          in: query\n          required: false\n          description: Session id of this call.\n          schema:\n            type: string\n        - name: origin_headers\n          in: query\n          required: false\n          description: Origin headers. Used in custom workflows.\n          schema:\n            type: string\n        - name: code_challenge\n          in: query\n          required: false\n          description: PKCE code challenge.\n          schema:\n            type: string\n        - name: code_challenge_method\n          in: query\n          required: false\n          description: PKCE code challenge method.\n          schema:\n            type: string\n        - name: custom_response_headers\n          in: query\n          required: false\n          description: Custom Response Headers.\n          schema:\n            type: string\n        - name: claims\n          in: query\n          required: false\n          description: Requested Claims.\n          schema:\n            type: string\n        - name: auth_req_id\n          in: query\n          required: false\n          description: CIBA authentication request Id.\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        302:\n          description: Error codes for authorization endpoint.\n          content:\n            application/json:\n              schema:\n                title: AuthorizeError\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_request\n                      - unauthorized_client\n                      - disabled_client\n                      - access_denied\n                      - retry\n                      - unsupported_response_type\n                      - invalid_scope\n                      - server_error\n                      - temporarily_unavailable\n                      - invalid_request_redirect_uri\n                      - login_required\n                      - session_selection_required\n                      - consent_required\n                      - user_mismatched\n                      - invalid_request_uri\n                      - invalid_request_object\n                      - authentication_session_invalid\n                      - invalid_authentication_method\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        400:\n          $ref: '#/components/responses/InvalidRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Authorization\n      summary: The Authorization Endpoint performs Authentication of the End-User.\n      description: End-User Authentication and Authorization done by sending the User Agent to the Authorization Endpoint using request parameters defined by OAuth 2.0 and OpenID Connect.\n      operationId: post_authorize\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              required:\n                - scope\n                - response_type\n                - client_id\n                - redirect_uri\n              properties:\n                scope:\n                  type: string\n                  description: OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present.\n                response_type:\n                  type: string\n                  description: OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used.\n                client_id:\n                  type: string\n                  description: OAuth 2.0 Client Identifier valid at the Authorization Server.\n                redirect_uri:\n                  type: string\n                  description: Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider.\n                state:\n                  type: string\n                  description: Opaque value used to maintain state between the request and the callback.\n                response_mode:\n                  type: string\n                  description: Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint.\n                nonce:\n                  type: string\n                  description: String value used to associate a Client session with an ID Token, and to mitigate replay attacks.\n                display:\n                  type: string\n                  description: ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.\n                prompt:\n                  type: string\n                  description: Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent.\n                max_age:\n                  type: integer\n                  description: Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP.\n                ui_locales:\n                  type: string\n                  description: End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference.\n                  example: \\\"fr-CA fr en\\\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation).\n                id_token_hint:\n                  type: string\n                  description: ID Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client. If the End-User identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response.\n                login_hint:\n                  type: string\n                  description: Hint to the Authorization Server about the login identifier the End-User might use to log in (if necessary).\n                acr_values:\n                  type: string\n                  description: Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference.\n                amr_values:\n                  type: string\n                  description: AMR Values.\n                request:\n                  type: string\n                  description: This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value. It represents the request as a JWT whose Claims are the request parameters.\n                request_uri:\n                  type: string\n                  description: This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.\n                request_session_id:\n                  type: string\n                  description: Request session id.\n                session_id:\n                  type: string\n                  description: Session id of this call.\n                origin_headers:\n                  type: string\n                  description: Origin headers. Used in custom workflows.\n                code_challenge:\n                  type: string\n                  description: PKCE code challenge.\n                code_challenge_method:\n                  type: string\n                  description: PKCE code challenge method.\n                custom_response_headers:\n                  type: string\n                  description: Custom Response Headers.\n                claims:\n                  type: string\n                  description: Requested Claims.\n      responses:\n        200:\n          description: OK\n          content: {}\n        302:\n          description: Error codes for authorization endpoint.\n          content:\n            application/json:\n              schema:\n                title: AuthorizeError\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_request\n                      - unauthorized_client\n                      - disabled_client\n                      - access_denied\n                      - retry\n                      - unsupported_response_type\n                      - invalid_scope\n                      - server_error\n                      - temporarily_unavailable\n                      - invalid_request_redirect_uri\n                      - login_required\n                      - session_selection_required\n                      - consent_required\n                      - user_mismatched\n                      - invalid_request_uri\n                      - invalid_request_object\n                      - authentication_session_invalid\n                      - invalid_authentication_method\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        400:\n          $ref: '#/components/responses/InvalidRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /bc-authorize:\n    post:\n      tags:\n        - Authorization\n      summary: Performs backchannel authorization of the end-user.\n      description: The Backchannel Authentication Endpoint is used to initiate an out-of-band authentication of the end-user.\n      operationId: bc-authorize\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              required:\n                - client_id\n                - scope\n                - client_notification_token\n              properties:\n                client_id:\n                  type: string\n                  description: OAuth 2.0 Client Identifier valid at the Authorization Server.\n                scope:\n                  type: string\n                  description: CIBA authentication requests must contain the openid scope value.\n                client_notification_token:\n                  type: string\n                  description: It is a bearer token provided by the Client that will be used by the OpenID Provider to authenticate the callback request to the Client. It is required if the Client is registered to use Ping or Push modes.\n                acr_values:\n                  type: string\n                  description: Requested Authentication Context Class Reference values.\n                login_hint_token:\n                  type: string\n                  description: A token containing information identifying the end-user for whom authentication is being requested.\n                id_token_hint:\n                  type: string\n                  description: An ID Token previously issued to the Client by the OpenID Provider being passed back as a hint to identify the end-user for whom authentication is being requested.\n                login_hint:\n                  type: string\n                  description: A hint to the OpenID Provider regarding the end-user for whom authentication is being requested.\n                binding_message:\n                  type: string\n                  description: A human readable identifier or message intended to be displayed on both the consumption device and the authentication device to interlock them together for the transaction by way of a visual cue for the end-user.\n                user_code:\n                  type: string\n                  description: A secret code, such as password or pin, known only to the user but verifiable by the OP.\n                requested_expiry:\n                  type: integer\n                  description: A positive integer allowing the client to request the expires_in value for the auth_req_id the server will return.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Backchannel Authorization\n                required:\n                  - AUTH_REQ_ID\n                  - EXPIRES_IN\n                  - INTERVAL\n                type: object\n                properties:\n                  AUTH_REQ_ID:\n                    type: string\n                  EXPIRES_IN:\n                    type: integer\n                  INTERVAL:\n                    type: integer\n        400:\n          $ref: '#/components/responses/InvalidRequest'\n        401:\n          description: Unauthorized CIBA (Client Initiated Backchannel Authentication) access.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_request\n                      - invalid_scope\n                      - expired_login_hint_token\n                      - unknown_user_id\n                      - unauthorized_client\n                      - missing_user_code\n                      - invalid_user_code\n                      - invalid_binding_message\n                      - invalid_client\n                      - unauthorized_end_user_device\n                      - access_denied\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        403:\n          $ref: '#/components/responses/AccessDenied'\n  /bc-deviceRegistration:\n    post:\n      tags:\n        - Registration\n      summary: Performs backchannel device registration.\n      description: Performs backchannel device registration.\n      operationId: bc-deviceRegistration\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              required:\n                - id_token_hint\n                - device_registration_token\n              properties:\n                id_token_hint:\n                  type: string\n                  description: An ID Token previously issued to the Client by the OpenID Provider being passed back as a hint to identify the end-user for whom the device registration is being requested.\n                device_registration_token:\n                  type: string\n                  description: OAuth 2.0 Client Identifier valid at the Authorization Serve\n      responses:\n        200:\n          description: OK\n          content: {}\n        400:\n          description: Invalid parameters are provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_request\n                      - invalid_scope\n                      - expired_login_hint_token\n                      - unknown_user_id\n                      - unauthorized_client\n                      - missing_user_code\n                      - invalid_user_code\n                      - invalid_binding_message\n                      - invalid_client\n                      - unauthorized_end_user_device\n                      - access_denied\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        403:\n          $ref: '#/components/responses/AccessDenied'\n  /clientinfo:\n    get:\n      tags:\n        - Client Info\n      summary: To get Claims details about the registered client.\n      description: The ClientInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the registered client.\n      operationId: get_clientinfo\n      parameters:\n        - name: access_token\n          in: query\n          schema:\n            type: string\n            description: Client-specific access token.\n        - name: Authorization\n          in: header\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: ClientInfoResponse\n                description: Client details in response.\n                type: object\n                properties:\n                  displayName:\n                    type: string\n                  inum:\n                    type: string\n                    description: XRI i-number\n                  oxAuthAppType:\n                    type: string\n                    description: oxAuth Appication type\n                  oxAuthIdTokenSignedResponseAlg:\n                    type: string\n                    description: oxAuth ID Token Signed Response Algorithm\n                  oxAuthRedirectURI:\n                    type: array\n                    description: Array of redirect URIs values used in the Authorization\n                    items:\n                      type: string\n                  oxId:\n                    type: string\n                    example:\n                    description: oxAuth Attribute Scope Id\n                  custom_attributes:\n                    type: array\n                    items:\n                      type: string\n        400:\n          description: Invalid Request are provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_request\n                      - invalid_token\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n    post:\n      tags:\n        - Client Info\n      summary: To get Claims details about the registered client.\n      description: The ClientInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the registered client.\n      operationId: post_clientinfo\n      parameters:\n        - name: Authorization\n          in: header\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              required:\n                - access_token\n              properties:\n                access_token:\n                  type: string\n                  description: Client-specific access token.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: ClientInfoResponse\n                description: Client details in response.\n                type: object\n                properties:\n                  displayName:\n                    type: string\n                  inum:\n                    type: string\n                    description: XRI i-number\n                  oxAuthAppType:\n                    type: string\n                    description: oxAuth Appication type\n                  oxAuthIdTokenSignedResponseAlg:\n                    type: string\n                    description: oxAuth ID Token Signed Response Algorithm\n                  oxAuthRedirectURI:\n                    type: array\n                    description: Array of redirect URIs values used in the Authorization\n                    items:\n                      type: string\n                  oxId:\n                    type: string\n                    example:\n                    description: oxAuth Attribute Scope Id\n                  custom_attributes:\n                    type: array\n                    items:\n                      type: string\n        400:\n          description: Invalid Request are provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_request\n                      - invalid_token\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n  /.well-known/gluu-configuration:\n    post:\n      tags:\n        - Server Configuration\n      summary:  Gets GluuServer configuration data that contains non-standard OpenID Connect discovery metadata.\n      description: Gets GluuServer configuration data that contains non-standard OpenID Connect discovery metadata.\n      operationId: well-known-gluu-configuration\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: GluuConfigurationResponse\n                description: Client GluuAttribute by Dn(Distinguished Name) based on Authorization Scope.\n                required:\n                  - id_generation_endpoint\n                  - introspection_endpoint\n                type: object\n                properties:\n                  id_generation_endpoint:\n                    type: string\n                  introspection_endpoint:\n                    type: string\n                  auth_level_mapping:\n                    type: object\n                    additionalProperties:\n                      type: string\n                      description: Additional Custom Acr's map object\n                  scope_to_claims_mapping:\n                    type: object\n                    additionalProperties:\n                      type: string\n                      description: Scope map object\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /introspection:\n    get:\n      tags:\n        - Token\n      summary: The Introspection OAuth 2 Endpoint.\n      description: The Introspection OAuth 2 Endpoint.\n      operationId: get-introspection\n      parameters:\n        - name: Authorization\n          in: header\n          required: true\n          description: Client Authorization details that contains the access token along with other details.\n          schema:\n            type: string\n          example: Bearer 23410913-abewfq.123483\n        - name: token\n          in: query\n          required: true\n          schema:\n            type: string\n          example: token=2YotnFZFEjr1zCsicMWpAA\n        - name: token_type_hint\n          in: query\n          description: ID Token previously issued by the Authorization Server being passed as a hint about the End-User.\n          schema:\n            type: string\n        - name: response_as_jwt\n          in: query\n          description: OPTIONAL. Boolean value with default value false. If true, returns introspection response as JWT (signed based on client configuration used for authentication to Introspection Endpoint).\n          schema:\n            type: boolean\n          example: response_as_jwt=false\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: IntrospectionResponse\n                description: meta-information about token\n                required:\n                  - active\n                type: object\n                properties:\n                  active:\n                    type: boolean\n                    description: Boolean indicator of whether or not the presented token is currently active.\n                    example: true\n                  scope:\n                    type: array\n                    description: Provide list of scopes to which access was granted for this resource.\n                    example:\n                      - read write dolphin\n                    items:\n                      type: string\n                  client_id:\n                    type: string\n                    description:  Client identifier for the OAuth 2.0 client that requested this token.\n                    example: 1238j323ds-23ij4\n                  username:\n                    type: string\n                    description: Human-readable identifier for the resource owner who authorized this token.\n                    example: jdoe\n                  token_type:\n                    type: string\n                    description: Type of the token as defined in Section 5.1 of OAuth 2.0 [RFC6749].\n                    example: bearer, mac\n                  exp:\n                    type: integer\n                    description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission will expire.\n                  iat:\n                    type: integer\n                    example: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission was originally issued.\n                  sub:\n                    type: string\n                    description: Subject of the token, as defined in JWT [RFC7519].\n                    example: Z5O3upPC88QrAjx00dis\n                  aud:\n                    type: string\n                    description: Service-specific string identifier or list of string identifiers representing the intended audience for this token, as defined in JWT [RFC7519].\n                    example: https://protected.example.net/resource\n                  iss:\n                    type: string\n                    description: String representing the issuer of this token, as defined in JWT [RFC7519].\n                    example: https://server.example.com/\n                  acr_values:\n                    type: string\n                    description: Authentication Context Class Reference values.\n                  jti:\n                    type: string\n                    description: String identifier for the token, as defined in JWT.\n\n        400:\n          description: Error codes for introspection endpoint.\n          content:\n            application/json:\n              schema:\n                title: AuthorizeError\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_request\n                      - unauthorized_client\n                      - disabled_client\n                      - access_denied\n                      - retry\n                      - unsupported_response_type\n                      - invalid_scope\n                      - server_error\n                      - temporarily_unavailable\n                      - invalid_request_redirect_uri\n                      - login_required\n                      - session_selection_required\n                      - consent_required\n                      - user_mismatched\n                      - invalid_request_uri\n                      - invalid_request_object\n                      - authentication_session_invalid\n                      - invalid_authentication_method\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Token\n      summary: The Introspection OAuth 2 Endpoint.\n      description: The Introspection OAuth 2 Endpoint.\n      operationId: post-introspection\n      parameters:\n        - name: Authorization\n          in: header\n          required: true\n          description: Client Authorization details that contains the access token along with other details.\n          schema:\n            type: string\n          example: Bearer 23410913-abewfq.123483\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              required:\n                - token\n              properties:\n                token:\n                  type: string\n                  description: Client access token.\n                  example: token=2YotnFZFEjr1zCsicMWpAA\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: IntrospectionResponse\n                description: meta-information about token\n                required:\n                  - active\n                type: object\n                properties:\n                  active:\n                    type: boolean\n                    description: Boolean indicator of whether or not the presented token is currently active.\n                    example: true\n                  scope:\n                    type: array\n                    description: Provide list of scopes to which access was granted for this resource.\n                    example:\n                      - read write dolphin\n                    items:\n                      type: string\n                  client_id:\n                    type: string\n                    description:  Client identifier for the OAuth 2.0 client that requested this token.\n                    example: 1238j323ds-23ij4\n                  username:\n                    type: string\n                    description: Human-readable identifier for the resource owner who authorized this token.\n                    example: jdoe\n                  token_type:\n                    type: string\n                    description: Type of the token as defined in Section 5.1 of OAuth 2.0 [RFC6749].\n                    example: bearer, mac\n                  exp:\n                    type: integer\n                    description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission will expire.\n                  iat:\n                    type: integer\n                    example: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission was originally issued.\n                  sub:\n                    type: string\n                    description: Subject of the token, as defined in JWT [RFC7519].\n                    example: Z5O3upPC88QrAjx00dis\n                  aud:\n                    type: string\n                    description: Service-specific string identifier or list of string identifiers representing the intended audience for this token, as defined in JWT [RFC7519].\n                    example: https://protected.example.net/resource\n                  iss:\n                    type: string\n                    description: String representing the issuer of this token, as defined in JWT [RFC7519].\n                    example: https://server.example.com/\n                  acr_values:\n                    type: string\n                    description: Authentication Context Class Reference values.\n                  jti:\n                    type: string\n                    description: String identifier for the token, as defined in JWT.\n        400:\n          description: Error codes for introspection endpoint.\n          content:\n            application/json:\n              schema:\n                title: AuthorizeError\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_request\n                      - unauthorized_client\n                      - disabled_client\n                      - access_denied\n                      - retry\n                      - unsupported_response_type\n                      - invalid_scope\n                      - server_error\n                      - temporarily_unavailable\n                      - invalid_request_redirect_uri\n                      - login_required\n                      - session_selection_required\n                      - consent_required\n                      - user_mismatched\n                      - invalid_request_uri\n                      - invalid_request_object\n                      - authentication_session_invalid\n                      - invalid_authentication_method\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /jwks:\n    get:\n      tags:\n        - JWK - JSON Web Key Set (JWKs)\n      summary: A JSON Web Key (JWK) used by server. JWK is a JSON data structure that represents a set of public keys as a JSON object [RFC4627].\n      description: Provides list of JWK used by server.\n      operationId: jwks\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: WebKeysConfiguration\n                required:\n                  - keys\n                type: object\n                description: JSON Web Key Set (JWKS) - A JSON object that represents a set of JWKs. The JSON object MUST have a keys member, which is an array of JWKs.\n                properties:\n                  keys:\n                    type: array\n                    description: List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value.\n                    items:\n                      $ref: '#/components/schemas/JsonWebKey'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /register:\n    post:\n      tags:\n        - Registration\n      summary: Registers new client dynamically.\n      description: The Client Registration Endpoint is an OAuth 2.0 Protected Resource through which a new Client registration can be requested.\n      operationId: post-register\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: RegisterParams\n              required:\n                - redirect_uris\n              type: object\n              properties:\n                redirect_uris:\n                  type: array\n                  description: Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match\n                    the redirect_uri parameter value used in each Authorization Request\n                  items:\n                    type: string\n                  example:\n                    - https://client.example.org/cb\n                claims_redirect_uri:\n                  type: array\n                  description: Array of The Claims Redirect URIs to which the client wishes the authorization server to direct\n                    the requesting party's user agent after completing its interaction.\n                  items:\n                    type: string\n                response_types:\n                  type: array\n                  description: A list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using.\n                    If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token.\n                  items:\n                    type: string\n                grant_types:\n                  type: array\n                  description: A list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using.\n                  items:\n                    type: string\n                contacts:\n                  type: array\n                  description: e-mail addresses of people responsible for this Client.\n                  items:\n                    type: string\n                client_name:\n                  type: string\n                  description: Name of the Client to be presented to the user.\n                logo_uri:\n                  type: string\n                  description: URL that references a logo for the Client application\n                client_uri:\n                  type: string\n                  description: URL of the home page of the Client. The value of this field must point to a valid Web page.\n                policy_uri:\n                  type: string\n                  description: URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used.\n                tos_uri:\n                  type: string\n                  description: URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service.\n                jwks_uri:\n                  type: string\n                  description: URL for the Client's JSON Web Key Set (JWK) document containing key(s) that are used for signing requests\n                    to the OP. The JWK Set may also contain the Client's encryption\n                    keys(s) that are used by the OP to encrypt the responses to the\n                    Client. When both signing and encryption keys are made available,\n                    a use (Key Use) parameter value is required for all keys in the\n                    document to indicate each key's intended usage .\n                jwks:\n                  type: array\n                  description: List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value.\n                  items:\n                    $ref: '#/components/schemas/JsonWebKey'\n                  example: '{ \"keys\" : [ { \"e\" : \"AQAB\", \"n\" : \"gmlDX_mgMcHX..\" ] }'\n                sector_identifier_uri:\n                  type: string\n                  description: URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.\n                subject_type:\n                  type: string\n                  description: Subject type requested for the Client ID. Valid types include pairwise and public.\n                rpt_as_jwt:\n                  type: boolean\n                  description: Specifies whether RPT should be return as signed JWT.\n                access_token_as_jwt:\n                  type: boolean\n                  description: Specifies whether access token as signed JWT.\n                access_token_signing_alg:\n                  type: string\n                  description: Specifies signing algorithm that has to be used during JWT signing. If it's not specified,\n                    then the default OP signing algorithm will be used .\n                id_token_signed_response_alg:\n                  type: string\n                  description: JWS alg algorithm (JWA) required for signing the ID Token issued to this Client.\n                id_token_encrypted_response_alg:\n                  type: string\n                  description: JWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client.\n                id_token_encrypted_response_enc:\n                  type: string\n                  description: JWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client.\n                userinfo_signed_response_alg:\n                  type: string\n                  description: JWS alg algorithm (JWA) required for signing UserInfo Responses.\n                userinfo_encrypted_response_alg:\n                  type: string\n                  description: JWE alg algorithm (JWA) required for encrypting UserInfo Responses.\n                userinfo_encrypted_response_enc:\n                  type: string\n                  description: JWE enc algorithm (JWA) required for encrypting UserInfo Responses.\n                request_object_signing_alg:\n                  type: string\n                  description: JWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP.\n                request_object_encryption_alg:\n                  type: string\n                  description: JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.\n                request_object_encryption_enc:\n                  type: string\n                  description: JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.\n                token_endpoint_auth_method:\n                  type: string\n                  description: Requested Client Authentication method for the Token Endpoint.\n                token_endpoint_auth_signing_alg:\n                  type: string\n                  description: JWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint\n                    for the private_key_jwt and client_secret_jwt authentication methods.\n                default_max_age:\n                  type: integer\n                  description: Specifies the Default Maximum Authentication Age.\n                  example: 1000000\n                require_auth_time:\n                  type: boolean\n                  description: Boolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true.\n                default_acr_values:\n                  type: array\n                  description: Array of default requested Authentication Context Class Reference values that the Authorization Server must use for\n                    processing requests from the Client.\n                  items:\n                    type: string\n                initiate_login_uri:\n                  type: string\n                  description: Specifies the URI using the https scheme that the authorization server can call to initiate a login at the client.\n                post_logout_redirect_uris:\n                  type: array\n                  description: Provide the URLs supplied by the RP to request that the user be redirected to this location after a logout has been\n                    performed.\n                  example:\n                    - https://client.example.org/logout/page1\n                    - https://client.example.org/logout/page2\n                    - https://client.example.org/logout/page3\n                  items:\n                    type: string\n                frontchannel_logout_uri:\n                  type: string\n                  description: RP URL that will cause the RP to log itself out when rendered in an iframe by the OP.\n                frontchannel_logout_session_required:\n                  type: boolean\n                  description: Boolean value specifying whether the RP requires that a session ID query parameter be included\n                    to identify the RP session at the OP when the logout_uri is used. If omitted, the default value is false.\n                backchannel_logout_uri:\n                  type: string\n                  description: RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.\n                backchannel_logout_session_required:\n                  type: boolean\n                  description: Boolean value specifying whether the RP requires that a session ID Claim be included in the Logout Token\n                    to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.\n                request_uris:\n                  type: array\n                  description: Provide a list of request_uri values that are pre-registered by the Client for use at the Authorization Server.\n                  items:\n                    type: string\n                scopes:\n                  type: string\n                  deprecated: true\n                  description: This param will be removed in a future version because the correct is 'scope' not 'scopes', see (rfc7591).\n                claims:\n                  type: string\n                  description: String containing a space-separated list of claims that can be requested individually.\n                id_token_token_binding_cnf:\n                  type: string\n                  description: Specifies the JWT Confirmation Method member name (e.g. tbh) that the Relying Party expects\n                    when receiving Token Bound ID Tokens. The presence of this parameter indicates that the Relying Party\n                    supports Token Binding of ID Tokens.\n                    If omitted, the default is that the Relying Party does not support Token Binding of ID Tokens.\n                tls_client_auth_subject_dn:\n                  type: string\n                  description: An string representation of the expected subject distinguished name of the certificate,\n                    which the OAuth client will use in mutual TLS authentication.\n                allow_spontaneous_scopes:\n                  type: boolean\n                  description: Specifies whether to allow spontaneous scopes for client. The default value is false.\n                  example: false\n                spontaneous_scopes:\n                  type: array\n                  description: List of spontaneous scopes\n                  items:\n                    type: string\n                run_introspection_script_before_access_token_as_jwt_creation_and_include_claims:\n                  type: boolean\n                  description: Boolean value with default value false. If true and access_token_as_jwt=true then run introspection script\n                    and transfer claims into JWT.\n                keep_client_authorization_after_expiration:\n                  type: boolean\n                  description: Boolean value indicating if the client authorization will not be removed afer expiration\n                    (expiration date is same as client's expiration that created it). The default value is false.\n                scope:\n                  type: array\n                  description: Provide list of scope which are used during authentication to authorize access to resource.\n                  example:\n                    - openid\n                  items:\n                    type: string\n                authorized_origins:\n                  type: array\n                  description: specifies authorized JavaScript origins.\n                  items:\n                    type: string\n                access_token_lifetime:\n                  type: integer\n                  description: Specifies the Client-specific access token expiration.\n                  example: 100000000\n                software_id:\n                  type: string\n                  description: Specifies a unique identifier string (UUID) assigned\n                    by the client developer or software publisher used by registration\n                    endpoints to identify the client software to be dynamically registered.\n                  example: 4NRB1-0XZABZI9E6-5SM3R\n                software_version:\n                  type: string\n                  description: Specifies a version identifier string for the client\n                    software identified by 'software_id'. The value of the 'software_version'\n                    should change on any update to the client software identified\n                    by the same 'software_id'.\n                  example: \"2.1\"\n                software_statement:\n                  type: string\n                  description: specifies a software statement containing client metadata\n                    values about the client software as claims. This is a string value\n                    containing the entire signed JWT.\n                backchannel_token_delivery_mode:\n                  type: string\n                  description: specifies how backchannel token will be deliveried.\n                  example: push, poll, ping\n                backchannel_client_notification_endpoint:\n                  type: string\n                  description: Client Initiated Backchannel Authentication (CIBA) enables a Client to initiate the authentication of an end-user by means of out-of-band mechanisms. Upon receipt of the notification, the Client makes a request to the token endpoint to obtain the tokens.\n                backchannel_authentication_request_signing_alg:\n                  type: string\n                  description: The JWS algorithm alg value that the Client will use for signing authentication request, as described in Section 7.1.1. of OAuth 2.0 [RFC6749]. When omitted, the Client will not send signed authentication requests.\n                backchannel_user_code_parameter:\n                  type: boolean\n                  description: Boolean value specifying whether the Client supports the user_code parameter. If omitted, the default value is false.\n                additional_audience:\n                  type: array\n                  description: Additional audiences.\n                  items:\n                    type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: RegisterResponseParam\n                type: object\n                required:\n                  - client_id\n                properties:\n                  client_id:\n                    type: string\n                    description: Unique Client Identifier. It MUST NOT be currently valid for any other registered Client.\n                  client_secret:\n                    type: string\n                    description: This value is used by Confidential Clients to authenticate to the Token Endpoint\n                  registration_access_token:\n                    type: string\n                    description: Registration Access Token that can be used at the Client Configuration Endpoint to perform subsequent\n                      operations upon the Client registration.\n                  registration_client_uri:\n                    type: string\n                    description: Location of the Client Configuration Endpoint where the Registration Access Token can be used to perform subsequent operations upon the resulting Client registration.\n                  client_id_issued_at:\n                    type: integer\n                    description: Time at which the Client Identifier was issued.\n                  client_secret_expires_at:\n                    type: integer\n                    description: Time at which the client_secret will expire or 0 if it will not expire.\n        400:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_redirect_uri\n                      - invalid_claims_redirect_uri\n                      - invalid_client_metadata\n                      - invalid_token\n                      - invalid_logout_uri\n                      - invalid_software_statement\n                      - access_denied\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      tags:\n        - Registration\n      summary: Updates Client Metadata for a registered client.\n      description: Updates Client Metadata for a registered client.\n      operationId: put-register\n      parameters:\n        - name: client_id\n          in: query\n          required: true\n          description: Client ID that identifies client that must be updated by this request.\n          schema:\n            type: string\n        - name: Authorization\n          in: header\n          required: true\n          description: Authorization header carrying \\\"registration_access_token\\\" issued before as a Bearer token\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: RegisterParams\n              required:\n                - redirect_uris\n              type: object\n              properties:\n                redirect_uris:\n                  type: array\n                  description: Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match\n                    the redirect_uri parameter value used in each Authorization Request\n                  items:\n                    type: string\n                  example:\n                    - https://client.example.org/cb\n                claims_redirect_uri:\n                  type: array\n                  description: Array of The Claims Redirect URIs to which the client wishes the authorization server to direct\n                    the requesting party's user agent after completing its interaction.\n                  items:\n                    type: string\n                response_types:\n                  type: array\n                  description: A list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using.\n                    If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token.\n                  items:\n                    type: string\n                grant_types:\n                  type: array\n                  description: A list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using.\n                  items:\n                    type: string\n                contacts:\n                  type: array\n                  description: e-mail addresses of people responsible for this Client.\n                  items:\n                    type: string\n                client_name:\n                  type: string\n                  description: Name of the Client to be presented to the user.\n                logo_uri:\n                  type: string\n                  description: URL that references a logo for the Client application\n                client_uri:\n                  type: string\n                  description: URL of the home page of the Client. The value of this field must point to a valid Web page.\n                policy_uri:\n                  type: string\n                  description: URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used.\n                tos_uri:\n                  type: string\n                  description: URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service.\n                jwks_uri:\n                  type: string\n                  description: URL for the Client's JSON Web Key Set (JWK) document containing key(s) that are used for signing requests\n                    to the OP. The JWK Set may also contain the Client's encryption\n                    keys(s) that are used by the OP to encrypt the responses to the\n                    Client. When both signing and encryption keys are made available,\n                    a use (Key Use) parameter value is required for all keys in the\n                    document to indicate each key's intended usage .\n                jwks:\n                  type: array\n                  description: List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value.\n                  items:\n                    $ref: '#/components/schemas/JsonWebKey'\n                    example: '{ \"keys\" : [ { \"e\" : \"AQAB\", \"n\" : \"gmlDX_mgMcHX..\" ] }'\n                sector_identifier_uri:\n                  type: string\n                  description: URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.\n                subject_type:\n                  type: string\n                  description: Subject type requested for the Client ID. Valid types include pairwise and public.\n                rpt_as_jwt:\n                  type: boolean\n                  description: Specifies whether RPT should be return as signed JWT.\n                access_token_as_jwt:\n                  type: boolean\n                  description: Specifies whether access token as signed JWT.\n                access_token_signing_alg:\n                  type: string\n                  description: Specifies signing algorithm that has to be used during JWT signing. If it's not specified,\n                    then the default OP signing algorithm will be used .\n                id_token_signed_response_alg:\n                  type: string\n                  description: JWS alg algorithm (JWA) required for signing the ID Token issued to this Client.\n                id_token_encrypted_response_alg:\n                  type: string\n                  description: JWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client.\n                id_token_encrypted_response_enc:\n                  type: string\n                  description: JWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client.\n                userinfo_signed_response_alg:\n                  type: string\n                  description: JWS alg algorithm (JWA) required for signing UserInfo Responses.\n                userinfo_encrypted_response_alg:\n                  type: string\n                  description: JWE alg algorithm (JWA) required for encrypting UserInfo Responses.\n                userinfo_encrypted_response_enc:\n                  type: string\n                  description: JWE enc algorithm (JWA) required for encrypting UserInfo Responses.\n                request_object_signing_alg:\n                  type: string\n                  description: JWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP.\n                request_object_encryption_alg:\n                  type: string\n                  description: JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.\n                request_object_encryption_enc:\n                  type: string\n                  description: JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.\n                token_endpoint_auth_method:\n                  type: string\n                  description: Requested Client Authentication method for the Token Endpoint.\n                token_endpoint_auth_signing_alg:\n                  type: string\n                  description: JWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint\n                    for the private_key_jwt and client_secret_jwt authentication methods.\n                default_max_age:\n                  type: integer\n                  description: Specifies the Default Maximum Authentication Age.\n                  example: 1000000\n                require_auth_time:\n                  type: boolean\n                  description: Boolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true.\n                default_acr_values:\n                  type: array\n                  description: Array of default requested Authentication Context Class Reference values that the Authorization Server must use for\n                    processing requests from the Client.\n                  items:\n                    type: string\n                initiate_login_uri:\n                  type: string\n                  description: Specifies the URI using the https scheme that the authorization server can call to initiate a login at the client.\n                post_logout_redirect_uris:\n                  type: array\n                  description: Provide the URLs supplied by the RP to request that the user be redirected to this location after a logout has been\n                    performed.\n                  example:\n                    - https://client.example.org/logout/page1\n                    - https://client.example.org/logout/page2\n                    - https://client.example.org/logout/page3\n                  items:\n                    type: string\n                frontchannel_logout_uri:\n                  type: string\n                  description: RP URL that will cause the RP to log itself out when rendered in an iframe by the OP.\n                frontchannel_logout_session_required:\n                  type: boolean\n                  description: Boolean value specifying whether the RP requires that a session ID query parameter be included\n                    to identify the RP session at the OP when the logout_uri is used. If omitted, the default value is false.\n                backchannel_logout_uri:\n                  type: string\n                  description: RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.\n                backchannel_logout_session_required:\n                  type: boolean\n                  description: Boolean value specifying whether the RP requires that a session ID Claim be included in the Logout Token\n                    to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.\n                request_uris:\n                  type: array\n                  description: Provide a list of request_uri values that are pre-registered by the Client for use at the Authorization Server.\n                  items:\n                    type: string\n                scopes:\n                  type: string\n                  deprecated: true\n                  description: This param will be removed in a future version because the correct is 'scope' not 'scopes', see (rfc7591).\n                claims:\n                  type: string\n                  description: String containing a space-separated list of claims that can be requested individually.\n                id_token_token_binding_cnf:\n                  type: string\n                  description: Specifies the JWT Confirmation Method member name (e.g. tbh) that the Relying Party expects\n                    when receiving Token Bound ID Tokens. The presence of this parameter indicates that the Relying Party\n                    supports Token Binding of ID Tokens.\n                    If omitted, the default is that the Relying Party does not support Token Binding of ID Tokens.\n                tls_client_auth_subject_dn:\n                  type: string\n                  description: An string representation of the expected subject distinguished name of the certificate,\n                    which the OAuth client will use in mutual TLS authentication.\n                allow_spontaneous_scopes:\n                  type: boolean\n                  description: Specifies whether to allow spontaneous scopes for client. The default value is false.\n                  example: false\n                spontaneous_scopes:\n                  type: array\n                  description: List of spontaneous scopes\n                  items:\n                    type: string\n                run_introspection_script_before_access_token_as_jwt_creation_and_include_claims:\n                  type: boolean\n                  description: Boolean value with default value false. If true and access_token_as_jwt=true then run introspection script\n                    and transfer claims into JWT.\n                keep_client_authorization_after_expiration:\n                  type: boolean\n                  description: Boolean value indicating if the client authorization will not be removed afer expiration\n                    (expiration date is same as client's expiration that created it). The default value is false.\n                scope:\n                  type: array\n                  description: Provide list of scope which are used during authentication to authorize access to resource.\n                  example:\n                    - openid\n                  items:\n                    type: string\n                authorized_origins:\n                  type: array\n                  description: specifies authorized JavaScript origins.\n                  items:\n                    type: string\n                access_token_lifetime:\n                  type: integer\n                  description: Specifies the Client-specific access token expiration.\n                  example: 100000000\n                software_id:\n                  type: string\n                  description: Specifies a unique identifier string (UUID) assigned\n                    by the client developer or software publisher used by registration\n                    endpoints to identify the client software to be dynamically registered.\n                  example: 4NRB1-0XZABZI9E6-5SM3R\n                software_version:\n                  type: string\n                  description: Specifies a version identifier string for the client\n                    software identified by 'software_id'. The value of the 'software_version'\n                    should change on any update to the client software identified\n                    by the same 'software_id'.\n                  example: \"2.1\"\n                software_statement:\n                  type: string\n                  description: specifies a software statement containing client metadata\n                    values about the client software as claims. This is a string value\n                    containing the entire signed JWT.\n                backchannel_token_delivery_mode:\n                  type: string\n                  description: specifies how backchannel token will be deliveried.\n                  example: push, poll, ping\n                backchannel_client_notification_endpoint:\n                  type: string\n                  description: Client Initiated Backchannel Authentication (CIBA) enables a Client to initiate the authentication of an end-user by means of out-of-band mechanisms. Upon receipt of the notification, the Client makes a request to the token endpoint to obtain the tokens.\n                backchannel_authentication_request_signing_alg:\n                  type: string\n                  description: The JWS algorithm alg value that the Client will use for signing authentication request, as described in Section 7.1.1. of OAuth 2.0 [RFC6749]. When omitted, the Client will not send signed authentication requests.\n                backchannel_user_code_parameter:\n                  type: boolean\n                  description: Boolean value specifying whether the Client supports the user_code parameter. If omitted, the default value is false.\n                additional_audience:\n                  type: array\n                  description: Additional audiences.\n                  items:\n                    type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: RegisterResponseParam\n                type: object\n                required:\n                  - client_id\n                properties:\n                  client_id:\n                    type: string\n                    description: Unique Client Identifier. It MUST NOT be currently valid for any other registered Client.\n                  client_secret:\n                    type: string\n                    description: This value is used by Confidential Clients to authenticate to the Token Endpoint\n                  registration_access_token:\n                    type: string\n                    description: Registration Access Token that can be used at the Client Configuration Endpoint to perform subsequent\n                      operations upon the Client registration.\n                  registration_client_uri:\n                    type: string\n                    description: Location of the Client Configuration Endpoint where the Registration Access Token can be used to perform subsequent operations upon the resulting Client registration.\n                  client_id_issued_at:\n                    type: integer\n                    description: Time at which the Client Identifier was issued.\n                  client_secret_expires_at:\n                    type: integer\n                    description: Time at which the client_secret will expire or 0 if it will not expire.\n        400:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_client_metadata\n                      - invalid_token\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    get:\n      tags:\n        - Registration\n      summary: Get client information for a previously registered client.\n      description: Get client information for a previously registered client.\n      operationId: get-register\n      parameters:\n        - name: client_id\n          in: query\n          required: true\n          description: Client ID that identifies client.\n          schema:\n            type: string\n        - name: Authorization\n          in: header\n          required: true\n          description: Authorization header carrying \\\"registration_access_token\\\" issued before as a Bearer token\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: ClientResponse\n                type: object\n                properties:\n                  redirect_uris:\n                    type: array\n                    description: Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match\n                      the redirect_uri parameter value used in each Authorization Request\n                    items:\n                      type: string\n                    example:\n                      - https://client.example.org/cb\n                  claims_redirect_uri:\n                    type: array\n                    description: Array of The Claims Redirect URIs to which the client wishes the authorization server to direct\n                      the requesting party's user agent after completing its interaction.\n                    items:\n                      type: string\n                  response_types:\n                    type: array\n                    description: A list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using.\n                      If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token.\n                    items:\n                      type: string\n                  grant_types:\n                    type: array\n                    description: A list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using.\n                    items:\n                      type: string\n                  contacts:\n                    type: array\n                    description: e-mail addresses of people responsible for this Client.\n                    items:\n                      type: string\n                  client_name:\n                    type: string\n                    description: Name of the Client to be presented to the user.\n                  logo_uri:\n                    type: string\n                    description: URL that references a logo for the Client application\n                  client_uri:\n                    type: string\n                    description: URL of the home page of the Client. The value of this field must point to a valid Web page.\n                  policy_uri:\n                    type: string\n                    description: URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used.\n                  tos_uri:\n                    type: string\n                    description: URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service.\n                  jwks_uri:\n                    type: string\n                    description: URL for the Client's JSON Web Key Set (JWK) document containing key(s) that are used for signing requests\n                      to the OP. The JWK Set may also contain the Client's encryption\n                      keys(s) that are used by the OP to encrypt the responses to the\n                      Client. When both signing and encryption keys are made available,\n                      a use (Key Use) parameter value is required for all keys in the\n                      document to indicate each key's intended usage .\n                  jwks:\n                    type: string\n                    description: Client's JSON Web Key Set (JWK) document, passed by\n                      value. The semantics of the jwks parameter are the same as the\n                      jwks_uri parameter, other than that the JWK Set is passed by value,\n                      rather than by reference. This parameter is intended only to be\n                      used by Clients that, for some reason, are unable to use the jwks_uri\n                      parameter, for instance, by native applications that might not\n                      have a location to host the contents of the JWK Set. If a Client\n                      can use jwks_uri, it must not use jwks. One significant downside\n                      of jwks is that it does not enable key rotation. The jwks_uri\n                      and jwks parameters must not be used together.\n                    example: '{\"key1\": \"value1\", \"key2\": \"value2\"}'\n                  sector_identifier_uri:\n                    type: string\n                    description: URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.\n                  subject_type:\n                    type: string\n                    description: Subject type requested for the Client ID. Valid types include pairwise and public.\n                  rpt_as_jwt:\n                    type: boolean\n                    description: Specifies whether RPT should be return as signed JWT.\n                  access_token_as_jwt:\n                    type: boolean\n                    description: Specifies whether access token as signed JWT.\n                  access_token_signing_alg:\n                    type: string\n                    description: Specifies signing algorithm that has to be used during JWT signing. If it's not specified,\n                      then the default OP signing algorithm will be used .\n                  id_token_signed_response_alg:\n                    type: string\n                    description: JWS alg algorithm (JWA) required for signing the ID Token issued to this Client.\n                  id_token_encrypted_response_alg:\n                    type: string\n                    description: JWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client.\n                  id_token_encrypted_response_enc:\n                    type: string\n                    description: JWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client.\n                  userinfo_signed_response_alg:\n                    type: string\n                    description: JWS alg algorithm (JWA) required for signing UserInfo Responses.\n                  userinfo_encrypted_response_alg:\n                    type: string\n                    description: JWE alg algorithm (JWA) required for encrypting UserInfo Responses.\n                  userinfo_encrypted_response_enc:\n                    type: string\n                    description: JWE enc algorithm (JWA) required for encrypting UserInfo Responses.\n                  request_object_signing_alg:\n                    type: string\n                    description: JWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP.\n                  request_object_encryption_alg:\n                    type: string\n                    description: JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.\n                  request_object_encryption_enc:\n                    type: string\n                    description: JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.\n                  token_endpoint_auth_method:\n                    type: string\n                    description: Requested Client Authentication method for the Token Endpoint.\n                  token_endpoint_auth_signing_alg:\n                    type: string\n                    description: JWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint\n                      for the private_key_jwt and client_secret_jwt authentication methods.\n                  default_max_age:\n                    type: integer\n                    description: Specifies the Default Maximum Authentication Age.\n                    example: 1000000\n                  require_auth_time:\n                    type: boolean\n                    description: Boolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true.\n                  default_acr_values:\n                    type: array\n                    description: Array of default requested Authentication Context Class Reference values that the Authorization Server must use for\n                      processing requests from the Client.\n                    items:\n                      type: string\n                  initiate_login_uri:\n                    type: string\n                    description: Specifies the URI using the https scheme that the authorization server can call to initiate a login at the client.\n                  post_logout_redirect_uris:\n                    type: array\n                    description: Provide the URLs supplied by the RP to request that the user be redirected to this location after a logout has been\n                      performed.\n                    example:\n                      - https://client.example.org/logout/page1\n                      - https://client.example.org/logout/page2\n                      - https://client.example.org/logout/page3\n                    items:\n                      type: string\n                  frontchannel_logout_uri:\n                    type: string\n                    description: RP URL that will cause the RP to log itself out when rendered in an iframe by the OP.\n                  frontchannel_logout_session_required:\n                    type: boolean\n                    description: Boolean value specifying whether the RP requires that a session ID query parameter be included\n                      to identify the RP session at the OP when the logout_uri is used. If omitted, the default value is false.\n                  backchannel_logout_uri:\n                    type: string\n                    description: RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.\n                  backchannel_logout_session_required:\n                    type: boolean\n                    description: Boolean value specifying whether the RP requires that a session ID Claim be included in the Logout Token\n                      to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.\n                  request_uris:\n                    type: array\n                    description: Provide a list of request_uri values that are pre-registered by the Client for use at the Authorization Server.\n                    items:\n                      type: string\n                  scopes:\n                    type: string\n                    deprecated: true\n                    description: This param will be removed in a future version because the correct is 'scope' not 'scopes', see (rfc7591).\n                  claims:\n                    type: string\n                    description: String containing a space-separated list of claims that can be requested individually.\n                  id_token_token_binding_cnf:\n                    type: string\n                    description: Specifies the JWT Confirmation Method member name (e.g. tbh) that the Relying Party expects\n                      when receiving Token Bound ID Tokens. The presence of this parameter indicates that the Relying Party\n                      supports Token Binding of ID Tokens.\n                      If omitted, the default is that the Relying Party does not support Token Binding of ID Tokens.\n                  tls_client_auth_subject_dn:\n                    type: string\n                    description: An string representation of the expected subject distinguished name of the certificate,\n                      which the OAuth client will use in mutual TLS authentication.\n                  allow_spontaneous_scopes:\n                    type: boolean\n                    description: Specifies whether to allow spontaneous scopes for client. The default value is false.\n                    example: false\n                  spontaneous_scopes:\n                    type: array\n                    description: List of spontaneous scopes\n                    items:\n                      type: string\n                  run_introspection_script_before_access_token_as_jwt_creation_and_include_claims:\n                    type: boolean\n                    description: Boolean value with default value false. If true and access_token_as_jwt=true then run introspection script\n                      and transfer claims into JWT.\n                  keep_client_authorization_after_expiration:\n                    type: boolean\n                    description: Boolean value indicating if the client authorization will not be removed afer expiration\n                      (expiration date is same as client's expiration that created it). The default value is false.\n                  scope:\n                    type: array\n                    description: Provide list of scope which are used during authentication to authorize access to resource.\n                    example:\n                      - openid\n                    items:\n                      type: string\n                  authorized_origins:\n                    type: array\n                    description: specifies authorized JavaScript origins.\n                    items:\n                      type: string\n                  access_token_lifetime:\n                    type: integer\n                    description: Specifies the Client-specific access token expiration.\n                    example: 100000000\n                  software_id:\n                    type: string\n                    description: Specifies a unique identifier string (UUID) assigned\n                      by the client developer or software publisher used by registration\n                      endpoints to identify the client software to be dynamically registered.\n                    example: 4NRB1-0XZABZI9E6-5SM3R\n                  software_version:\n                    type: string\n                    description: Specifies a version identifier string for the client\n                      software identified by 'software_id'. The value of the 'software_version'\n                      should change on any update to the client software identified\n                      by the same 'software_id'.\n                    example: \"2.1\"\n                  software_statement:\n                    type: string\n                    description: specifies a software statement containing client metadata\n                      values about the client software as claims. This is a string value\n                      containing the entire signed JWT.\n                  backchannel_token_delivery_mode:\n                    type: string\n                    description: specifies how backchannel token will be deliveried.\n                    example: push, poll, ping\n                  backchannel_client_notification_endpoint:\n                    type: string\n                    description: Client Initiated Backchannel Authentication (CIBA) enables a Client to initiate the authentication of an end-user by means of out-of-band mechanisms. Upon receipt of the notification, the Client makes a request to the token endpoint to obtain the tokens.\n                  backchannel_authentication_request_signing_alg:\n                    type: string\n                    description: The JWS algorithm alg value that the Client will use for signing authentication request, as described in Section 7.1.1. of OAuth 2.0 [RFC6749]. When omitted, the Client will not send signed authentication requests.\n                  backchannel_user_code_parameter:\n                    type: boolean\n                    description: Boolean value specifying whether the Client supports the user_code parameter. If omitted, the default value is false.\n        400:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_token\n                      - invalid_client_metadata\n                      - access_denied\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        401:\n          $ref: '#/components/responses/InvalidRequest'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - Client Registration\n      summary: Deletes the client info for a previously registered client.\n      description: The Client Registration Endpoint removes the Client Metadata for a previously registered client.\n      operationId: delete-register\n      parameters:\n        - name: client_id\n          in: query\n          required: true\n          description: Client ID that identifies client.\n          schema:\n            type: string\n        - name: Authorization\n          in: header\n          required: true\n          description: Authorization header carrying \\\"registration_access_token\\\" issued before as a Bearer token\n          schema:\n            type: string\n      responses:\n        204:\n          description: OK\n          content: {}\n        400:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_token\n                      - invalid_client_metadata\n                      - access_denied\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        401:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_token\n                      - invalid_client_metadata\n                      - access_denied\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /revoke:\n    post:\n      tags:\n        - Token\n      summary: Revoke an Access Token or a Refresh Token, the RP (Client).\n      description: Revoke an Access Token or a Refresh Token, the RP (Client).\n      operationId: revoke\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              required:\n                - token\n              properties:\n                token:\n                  type: string\n                  description: The token that the client wants to get revoked.\n                token_type_hint:\n                  type: string\n                  description: A hint about the type of the token submitted for revocation.\n      responses:\n        200:\n          description: OK\n          content:\n            content: {}\n        400:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - unsupported_token_type\n                      - invalid_client\n                      - invalid_request\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n  /session_status:\n    get:\n      tags:\n        - Session Management\n      summary: Determine current sesion status.\n      description: Determine current sesion status.\n      operationId: session_status\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: SessionStateObject\n                type: object\n                properties:\n                  state:\n                    type: string\n                    description: String that represents the End-User's login state at the OP. It MUST NOT contain the space (\\\" \\\") character.\n                  auth_time:\n                    type: string\n                    format: date\n                    description: specifies the time at which session was authenticated.\n                    example: 100000000\n                  custom_state:\n                    type: string\n  /revoke_session:\n    post:\n      tags:\n        - Session Management\n      summary: Revoke all sessions for user.\n      description: Revoke all sessions for user (requires revoke_session scope).\n      operationId: revoke-session\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              required:\n                - user_criterion_key\n                - user_criterion_value\n              properties:\n                user_criterion_key:\n                  type: string\n                  description: user criterion key (e.g. uid)\n                user_criterion_value:\n                  type: string\n                  description: user criterion value (e.g. chris)\n      responses:\n        200:\n          description: OK - Returned if request was processed successfully. Means it will return in case sessions are found as well as in case sessions are not found (error is not returned to not disclose internal information).\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /end_session:\n    get:\n      tags:\n        - Session Management\n      summary: End current session.\n      description: End current session.\n      operationId: end_session\n      parameters:\n        - name: id_token_hint\n          in: query\n          description: Previously issued ID Token (id_token) passed to the logout endpoint as a hint about the End-User's current authenticated session with the Client. This is used as an indication of the identity of the End-User that the RP is requesting be logged out by the OP. The OP need not be listed as an audience of the ID Token when it is used as an id_token_hint value.\n          schema:\n            type: string\n        - name: post_logout_redirect_uri\n          in: query\n          description: URL to which the RP is requesting that the End-User's User Agent be redirected after a logout has been performed. The value MUST have been previously registered with the OP, either using the post_logout_redirect_uris Registration parameter or via another mechanism. If supplied, the OP SHOULD honor this request following the logout.\n          schema:\n            type: string\n        - name: state\n          in: query\n          description: Opaque value used by the RP to maintain state between the logout request and the callback to the endpoint specified by the post_logout_redirect_uri parameter. If included in the logout request, the OP passes this value back to the RP using the state query parameter when redirecting the User Agent back to the RP.\n          schema:\n            type: string\n        - name: session_id\n          in: query\n          description: Session Id\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK - User redirected to logout page\n          content: {}\n        302:\n          $ref: '#/components/responses/Found'\n        400:\n          description: Error codes for end session endpoint.\n          content:\n            application/json:\n              schema:\n                title: EndSessionError\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_grant\n                      - invalid_request\n                      - invalid_grant_and_session\n                      - session_not_passed\n                      - post_logout_uri_not_passed\n                      - post_logout_uri_not_associated_with_client\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /token:\n    post:\n      tags:\n        - Token\n      summary: To obtain an Access Token, an ID Token, and optionally a Refresh Token, the RP (Client).\n      description: To obtain an Access Token, an ID Token, and optionally a Refresh Token, the RP (Client).\n      operationId: post-token\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              required:\n                - grant_type\n              properties:\n                grant_type:\n                  type: array\n                  description: Provide a list of the OAuth 2.0 grant types that the\n                    Client is declaring that it will restrict itself to using.\n                  example:\n                    - authorization_code\n                    - client_credentials\n                  items:\n                    type: string\n                code:\n                  type: string\n                  description: Code which is returned by authorization endpoint. (For grant_type=authorization_code)\n                redirect_uri:\n                  type: string\n                  description: Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider.\n                username:\n                  type: string\n                  description: End-User username.\n                password:\n                  type: string\n                  description: End-User password.\n                scope:\n                  type: array\n                  description: OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.\n                  items:\n                    type: string\n                assertion:\n                  type: string\n                  description: Assertion.\n                refresh_token:\n                  type: string\n                  description: Refresh token.\n                client_id:\n                  type: string\n                  description: OAuth 2.0 Client Identifier valid at the Authorization Server.\n                client_secret:\n                  type: string\n                  description: The client secret.  The client MAY omit the parameter if the client secret is an empty string.\n                code_verifier:\n                  type: string\n                  description: The client's PKCE code verifier.\n                ticket:\n                  type: string\n                claim_token:\n                  type: string\n                claim_token_format:\n                  type: string\n                pct:\n                  type: string\n                rpt:\n                  type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: AccessTokenResponse.\n                required:\n                  - access_token\n                  - token_type\n                properties:\n                  access_token:\n                    type: string\n                    description: The access token issued by the authorization server.\n                  token_type:\n                    type: string\n                    description: The access token type provides the client with the information required to successfully utilize the access token to make a protected resource request (along with type-specific attributes).\n                  expires_in:\n                    type: integer\n                    description: The lifetime in seconds of the access token. For example, the value \\\"3600\\\" denotes that the access token will expire in one hour from the time the response was generated.\n                  refresh_token:\n                    type: string\n                    description: The refresh token, which can be used to obtain new access tokens using the same authorization grant\n                  scope:\n                    type: array\n                    example:\n                      - openid\n                      - oxd\n                    items:\n                      type: string\n                  id_token:\n                    type: string\n        400:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_client_metadata\n                      - invalid_token\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        403:\n          $ref: '#/components/responses/AccessDenied'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /uma/gather_claims:\n    get:\n      tags:\n        - UMA (User Managed Access)\n      summary: UMA Claims Gathering Endpoint.\n      description: UMA Claims Gathering Endpoint.\n      operationId: get-uma-gather_claims\n      parameters:\n        - name: client_id\n          in: query\n          description:  OAuth 2.0 Client Identifier valid at the Authorization Server.\n          schema:\n            type: string\n        - name: ticket\n          in: query\n          schema:\n            type: string\n        - name: claims_redirect_uri\n          in: query\n          schema:\n            type: string\n        - name: state\n          in: query\n          schema:\n            type: string\n        - name: reset\n          in: query\n          schema:\n            type: boolean\n        - name: authentication\n          in: query\n          schema:\n            type: boolean\n      responses:\n        302:\n          $ref: '#/components/responses/Found'\n        400:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_session\n                      - invalid_claims_gathering_script_name\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n    post:\n      tags:\n        - UMA (User Managed Access)\n      summary: UMA Claims Gathering Endpoint\n      description: UMA Claims Gathering Endpoint\n      operationId: post-uma-gather_claims\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                client_id:\n                  type: string\n                  description:  OAuth 2.0 Client Identifier valid at the Authorization Server.\n                ticket:\n                  type: string\n                claims_redirect_uri:\n                  type: string\n                state:\n                  type: string\n                reset:\n                  type: boolean\n                authentication:\n                  type: boolean\n      responses:\n        302:\n          $ref: '#/components/responses/Found'\n        400:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_session\n                      - invalid_claims_gathering_script_name\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n  /uma2-configuration:\n    get:\n      tags:\n        - UMA (User Managed Access)\n      summary: Gets UMA configuration data.\n      description: Gets UMA configuration data.\n      operationId: uma2-configuration\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: UmaMetadata\n                required:\n                  - issuer\n                  - authorization_endpoint\n                  - token_endpoint\n                  - response_types_supported\n                properties:\n                  issuer:\n                    type: string\n                    description: The authorization server's issuer identifier, which is\\n a URL that uses the \\\"https\\\" scheme and has no query or fragment\\n components.  This is the location where \\\".well-known\\\" RFC 5785\\n [RFC5785] resources containing information about the authorization\\n server are published.  Using these well-known resources is\\n described in Section 3.  The issuer identifier is used to prevent\\n authorization server mix-up attacks, as described in \\\"OAuth 2.0 Mix-Up Mitigation\\\"\n                    example: https://sample.com\n                  authorization_endpoint:\n                    type: string\n                    description: \"URL of the authorization server's authorization endpoint.\n                    example: https://sample.com/oxauth/restv1/authorize\n                  token_endpoint:\n                    type: string\n                    description: URL of the authorization server's token endpoint [RFC6749].  This is REQUIRED unless only the implicit grant type is used.\n                    example: https://sample.com/oxauth/restv1/token\n                  jwks_uri:\n                    type: string\n                    description: URL of the authorization server's JWK Set [JWK] document.  The referenced document contains the signing key(s) the client uses to validate signatures from the authorization server. This URL MUST use the \\\"https\\\" scheme.  The JWK Set MAY also contain the server's encryption key(s), which are used by clients to encrypt requests to the server.  When both signing and encryption keys are made available, a \\\"use\\\" (public key use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage.\n                    example: https://sample.com/oxauth/restv1/jwks\n                  registration_endpoint:\n                    type: string\n                    description: URL of the authorization server's OAuth 2.0 Dynamic Client Registration endpoint [RFC7591]\n                    example: https://sample.com/oxauth/restv1/register\n                  response_types_supported:\n                    type: array\n                    items:\n                      type: string\n                    description: JSON array containing a list of the OAuth 2.0 \\\"response_type\\\" values that this authorization server supports. The array values used are the same as those used with the \\\"response_types\\\" parameter defined by \\\"OAuth 2.0 Dynamic Client Registration Protocol\\\" [RFC7591].\n                    example:\n                    - code\n                    - id_token\n                    - token\n                  grant_types_supported:\n                    type: array\n                    items:\n                      type: string\n                    description: JSON array containing a list of the OAuth 2.0 grant type values that this authorization server supports.  The array values used are the same as those used with the \\\"grant_types\\\" parameter defined by \\\"OAuth 2.0 Dynamic Client Registration Protocol\\\" [RFC7591].  If omitted, the default value is \\\"[\\\"authorization_code\\\", \\\"implicit\\\"]\\\".\n                    example:\n                    - authorization_code\n                    - implicit\n                    - client_credentials\n                  token_endpoint_auth_methods_supported:\n                    type: array\n                    items:\n                      type: string\n                    description: JSON array containing a list of client authentication methods supported by this token endpoint.  Client authentication method values are used in the \\\"token_endpoint_auth_method\\\" parameter defined in Section 2 of [RFC7591].  If omitted, the default is \\\"client_secret_basic\\\" -- the HTTP Basic Authentication Scheme specified in Section 2.3.1 of OAuth 2.0 [RFC6749].\n                    example:\n                    - client_secret_basic\n                    - client_secret_post\n                    - client_secret_jwt\n                    - private_key_jwt\n                  token_endpoint_auth_signing_alg_values_supported:\n                    type: array\n                    items:\n                      type: string\n                    description: JSON array containing a list of the JWS signing algorithms (\\\"alg\\\" values) supported by the token endpoint for the signature on the JWT [JWT] used to authenticate the client at the token endpoint for the \\\"private_key_jwt\\\" and \\\"client_secret_jwt\\\" authentication methods.  Servers SHOULD support \\\"RS256\\\".  The value \\\"none\\\" MUST NOT be used.\n                    example:\n                    - HS256\n                    - HS384\n                    - HS512\n                    - RS256\n                    - RS384\n                    - RS512\n                    - ES256\n                    - ES384\n                    - ES512\n                  service_documentation:\n                    type: string\n                    description: URL of a page containing human-readable information that developers might want or need to know when using the authorization server.  In particular, if the authorization server does not support Dynamic Client Registration, then information on how to register clients needs to be provided in this documentation.\n                    example: http://\u003cop_docs\u003e\n                  ui_locales_supported:\n                    type: array\n                    items:\n                      type: string\n                    description: Languages and scripts supported for the user interface, represented as a JSON array of BCP47 [RFC5646] language tag values.\n                    example:\n                    - en\n                    - es\n                  op_policy_uri:\n                    type: string\n                    description: URL that the authorization server provides to the person registering the client to read about the authorization server's requirements on how the client can use the data provided by the authorization server.  The registration process SHOULD display this URL to the person registering the client if it is given.  As described in Section 5, despite the identifier \\\"op_policy_uri\\\", appearing to be OpenID-specific, its usage in this specification is actually referring to a general OAuth 2.0 feature that is not specific to OpenID Connect.\n                    example: http://ox.sample.com/doku.php?id=oxauth:policy\n                  op_tos_uri:\n                    type: string\n                    description: URL that the authorization server provides to the person registering the client to read about the authorization server's terms of service.  The registration process SHOULD display this URL to the person registering the client if it is given.  As described in Section 5, despite the identifier \\\"op_tos_uri\\\", appearing to be OpenID-specific, its usage in this specification is actually referring to a general OAuth 2.0 feature that is not specific to OpenID Connect.\n                    example: http://ox.sample.com/doku.php?id=oxauth:tos\n                  introspection_endpoint:\n                    type: string\n                    description: URL of the authorization server's OAuth 2.0 introspection endpoint [RFC7662].\n                    example: https://sample.com/oxauth/restv1/rpt/status\n                  code_challenge_methods_supported:\n                    type: array\n                    items:\n                      type: string\n                    description: JSON array containing a list of PKCE [RFC7636] code challenge methods supported by this authorization server.  Code challenge method values are used in the \\\"code_challenge_method\\\" parameter defined in Section 4.3 of [RFC7636].  The valid code challenge method values are those registered in the IANA \\\"PKCE Code Challenge Methods\\\" registry [IANA.OAuth.Parameters]\n                  claims_interaction_endpoint:\n                    type: string\n                    description: Static endpoint URI at which the authorization server declares that it interacts with end-user requesting parties to gather claims. If the authorization server also provides a claims interaction endpoint URI as part of its redirect_user hint in a need_info response to a client on authorization failure (see Section 3.3.6), that value overrides this metadata value. Providing the static endpoint URI is useful for enabling interactive claims gathering prior to any pushed-claims flows taking place, so that, for example, it is possible to gather requesting party authorization interactively for collecting all other claims in a \\\"silent\\\" fashion.\"\n                    example: https://sample.com/oxauth/restv1/uma/gather_claims\n                  uma_profiles_supported:\n                    type: array\n                    items:\n                      type: string\n                    description: UMA profiles supported by this authorization server. The value is an array of string values, where each string value is a URI identifying an UMA profile\n                  permission_endpoint:\n                    type: string\n                    description: The endpoint URI at which the resource server requests permissions on the client's behalf.\n                    example: https://sample.com/oxauth/restv1/host/rsrc_pr\n                  resource_registration_endpoint:\n                    type: string\n                    description: The endpoint URI at which the resource server registers resources to put them under authorization manager protection.\n                    example: https://sample.com/oxauth/restv1/host/rsrc/resource_set\n                  scope_endpoint:\n                    type: string\n                    description: The Scope endpoint URI.\n                    example: https://sample.com/oxauth/restv1/uma/scopes\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n  /host/rsrc_pr:\n    post:\n      tags:\n        - UMA (User Managed Access)\n      summary: Registers permission.\n      description: Registers permission.\n      operationId: host-rsrc_pr\n      parameters:\n        - name: Authorization\n          in: header\n          required: true\n          description: Client Authorization details that contains the access token along with other details.\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              title: UmaPermissiona\n              description: A permission is (requested or granted) authorized access to a particular resource with some number of scopes\n                bound to that resource.\n              type: object\n              required:\n                - resource_id\n                - resource_scopes\n              properties:\n                resource_id:\n                  type: string\n                  description: The identifier for a resource to which this client is seeking access.\n                    The identifier MUST correspond to a resource that was previously registered.\n                  example: 112210f47de98100\n                resource_scopes:\n                  type: array\n                  description: An array referencing zero or more strings representing scopes to which access was granted for this resource.\n                    Each string MUST correspond to a scope that was registered by this resource server for the referenced resource.\n                  items:\n                    type: string\n                params:\n                  type: object\n                  description: A key/value map that can contain custom parameters.\n                  additionalProperties:\n                    type: string\n      responses:\n        201:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: UmaPermissionList\n                type: array\n                description: List of Uma Permission.\n                items:\n                  type: object\n                  required:\n                    - resource_id\n                    - resource_scopes\n                  properties:\n                    resource_id:\n                      type: string\n                      description: The identifier for a resource to which this client is seeking access.\n                        The identifier MUST correspond to a resource that was previously registered.\n                      example: 112210f47de98100\n                    resource_scopes:\n                      type: array\n                      description: An array referencing zero or more strings representing scopes to which access was granted for this resource.\n                        Each string MUST correspond to a scope that was registered by this resource server for the referenced resource.\n                      items:\n                        type: string\n                      example:\n                        - http://photoz.example.com/dev/actions/add\n                        - http://photoz.example.com/dev/actions/internalClient\n                    params:\n                      type: object\n                      description: A key/value map that can contain custom parameters.\n                      additionalProperties:\n                        type: string\n                    exp:\n                      type: integer\n                      description: Number of seconds since January 1 1970 UTC, indicating when this token will expire.\n                      format: int64\n                      example: 1256953732\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n  /host/rsrc/resource_set:\n    post:\n      tags:\n        - UMA 2 Resource\n      summary: Adds a new resource description.\n      description: Adds a new resource description.\n      operationId: post-host-rsrc-resource_set\n      parameters:\n        - name: Authorization\n          in: header\n          required: true\n          description: Client Authorization details that contains the access token along with other details.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: UmaResource\n              description: Resource description\n              type: object\n              required:\n                - resource_scopes\n              properties:\n                name:\n                  type: string\n                  description: A human-readable string describing a set of one or more resources. This name MAY be used by the authorization server in its resource owner user interface for the resource owner.\n                icon_uri:\n                  type: string\n                  description: A URI for a graphic icon representing the resource set. The referenced icon MAY be used by the authorization server in its resource owner user interface for the resource owner.\n                  example: http://www.example.com/icons/sharesocial.png\n                type:\n                  type: string\n                  description: A string uniquely identifying the semantics of the resource set. For example, if the resource set consists of a single resource that is an identity claim that leverages standardized claim semantics for \\\"verified email address\\\", the value of this property could be an identifying URI for this claim.\n                resource_scopes:\n                  type: array\n                  items:\n                    type: string\n                  description: An array of strings, any of which MAY be a URI, indicating the available scopes for this resource set. URIs MUST resolve to scope descriptions as defined in Section 2.1. Published scope descriptions MAY reside anywhere on the web; a resource server is not required to self-host scope descriptions and may wish to point to standardized scope descriptions residing elsewhere. It is the resource server's responsibility to ensure that scope description documents are accessible to authorization servers through GET calls to support any user interface requirements. The resource server and authorization server are presumed to have separately negotiated any required interpretation of scope handling not conveyed through scope descriptions.\n                  example: \\\"read-public\\\", \\\"post-updates\"\\,\\\"read-private\"\\\n                scope_expression:\n                  type: string\n                description:\n                  type: string\n                  description: A human-readable string describing the resource\n                iat:\n                  type: integer\n                  description: number of seconds since January 1 1970 UTC, indicating when the token was issued at\n                  format: int64\n                  example: 1535709072\n                exp:\n                  type: integer\n                  description: number of seconds since January 1 1970 UTC, indicating when this token will expire.\n                  format: int64\n                  example: 1419356238\n      responses:\n        201:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: UmaResourceResponse\n                description: UmaResourceResponse Resource created.\n                type: object\n                required:\n                  - _id\n                properties:\n                  _id:\n                    type: string\n                    description: UMA Resource identifier\n                    example: KX3A-39WE\n                  user_access_policy_uri:\n                    type: string\n                    example: http://as.example.com/rs/222/resource/22/policy\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n    put:\n      tags:\n        - UMA 2 Resource\n      summary: Updates a previously registered resource.\n      description: Updates a previously registered resource.\n      operationId: put-host-rsrc-resource_set{rsid}\n      parameters:\n        - name: Authorization\n          in: header\n          required: true\n          schema:\n            type: string\n        - name: rsid\n          in: path\n          required: true\n          description: Resource ID.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: UmaResource\n              description: Resource description\n              type: object\n              required:\n                - resource_scopes\n              properties:\n                name:\n                  type: string\n                  description: A human-readable string describing a set of one or more resources. This name MAY be used by the authorization server in its resource owner user interface for the resource owner.\n                icon_uri:\n                  type: string\n                  description: A URI for a graphic icon representing the resource set. The referenced icon MAY be used by the authorization server in its resource owner user interface for the resource owner.\n                  example: http://www.example.com/icons/sharesocial.png\n                type:\n                  type: string\n                  description: A string uniquely identifying the semantics of the resource set. For example, if the resource set consists of a single resource that is an identity claim that leverages standardized claim semantics for \\\"verified email address\\\", the value of this property could be an identifying URI for this claim.\n                resource_scopes:\n                  type: array\n                  items:\n                    type: string\n                  description: An array of strings, any of which MAY be a URI, indicating the available scopes for this resource set. URIs MUST resolve to scope descriptions as defined in Section 2.1. Published scope descriptions MAY reside anywhere on the web; a resource server is not required to self-host scope descriptions and may wish to point to standardized scope descriptions residing elsewhere. It is the resource server's responsibility to ensure that scope description documents are accessible to authorization servers through GET calls to support any user interface requirements. The resource server and authorization server are presumed to have separately negotiated any required interpretation of scope handling not conveyed through scope descriptions.\n                  example: \\\"read-public\\\", \\\"post-updates\"\\,\\\"read-private\"\\\n                scope_expression:\n                  type: string\n                description:\n                  type: string\n                  description: A human-readable string describing the resource\n                iat:\n                  type: integer\n                  description: number of seconds since January 1 1970 UTC, indicating when the token was issued at\n                  format: int64\n                  example: 1535709072\n                exp:\n                  type: integer\n                  description: number of seconds since January 1 1970 UTC, indicating when this token will expire.\n                  format: int64\n                  example: 1419356238\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: UmaResourceResponse\n                description: UmaResourceResponse Resource created.\n                type: object\n                required:\n                  - _id\n                properties:\n                  _id:\n                    type: string\n                    description: UMA Resource identifier\n                    example: KX3A-39WE\n                  user_access_policy_uri:\n                    type: string\n                    example: http://as.example.com/rs/222/resource/22/policy\n        404:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - not_found\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n    get:\n      tags:\n        - UMA 2 Resource\n      summary: Lists all previously registered resource.\n      description: Lists all previously registered resource.\n      operationId: get-host-rsrc-resource_set\n      parameters:\n        - name: Authorization\n          in: header\n          required: true\n          schema:\n            type: string\n        - name: scope\n          in: query\n          description: Scope uri.\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: Uma Resource indetifiers\n                description: Uma Resource details\n                type: array\n                items:\n                  type: string\n                  description: List of resource identifers\n                  example: [ '11','22']\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n    delete:\n      tags:\n        - UMA 2 Resource\n      summary: Deletes a previously registered resource.\n      description: Deletes a previously registered resource.\n      operationId: delete-host-rsrc-resource_set\n      parameters:\n        - name: Authorization\n          in: header\n          required: true\n          schema:\n            type: string\n        - name: rsid\n          in: path\n          required: true\n          description: Resource ID\n          schema:\n            type: string\n      responses:\n        204:\n          description: OK\n          content: {}\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n  /host/rsrc/resource_set/{rsid}:\n    get:\n      tags:\n        - UMA 2 Resource\n      summary: Reads a previously registered resource.\n      description: Reads a previously registered resource.\n      operationId: get-host-rsrc-resource_set/{rsid}\n      parameters:\n        - name: Authorization\n          in: header\n          required: true\n          description: Client Authorization details that contains the access token along with other details.\n          schema:\n            type: string\n        - name: rsid\n          in: path\n          required: true\n          description: Resource description ID.\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: UmaResourceWithId\n                description: Uma Resource details\n                type: object\n                required:\n                  - _id\n                  - iat\n                  - exp\n                properties:\n                  _id:\n                    type: string\n                    description: UMA Resource identifier\n                    example: KX3A-39WE\n                  name:\n                    type: string\n                    description: A human-readable string describing a set of one or more resources. This name MAY be used by the authorization server in its resource owner user interface for the resource owner.\n                  uri:\n                    type: string\n                    description: A human-readable string describing the resource\n                  type:\n                    type: string\n                    description: A string uniquely identifying the semantics of the resource set. For example, if the resource set consists of a single resource that is an identity claim that leverages standardized claim semantics for \\\"verified email address\\\", the value of this property could be an identifying URI for this claim.\n                  scopes:\n                    type: array\n                    items:\n                      type: string\n                    description: An array of strings, any of which MAY be a URI, indicating the available scopes for this resource set. URIs MUST resolve to scope descriptions as defined in Section 2.1. Published scope descriptions MAY reside anywhere on the web; a resource server is not required to self-host scope descriptions and may wish to point to standardized scope descriptions residing elsewhere. It is the resource server's responsibility to ensure that scope description documents are accessible to authorization servers through GET calls to support any user interface requirements. The resource server and authorization server are presumed to have separately negotiated any required interpretation of scope handling not conveyed through scope descriptions.\n                  scope_expression:\n                    type: string\n                  description:\n                    type: string\n                    description: A human-readable string describing the resource\n                  icon_uri:\n                    type: string\n                    description: A URI for a graphic icon representing the resource set. The referenced icon MAY be used by the authorization server in its resource owner user interface for the resource owner.\n                    example: http://www.example.com/icons/sharesocial.png\n                  iat:\n                    type: integer\n                    description: number of seconds since January 1 1970 UTC, indicating when the token was issued at\n                    format: int64\n                    example: 1535709072\n                  exp:\n                    type: integer\n                    description: number of seconds since January 1 1970 UTC, indicating when this token will expire.\n                    format: int64\n                    example: 1419356238\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n  /rpt/status:\n    get:\n      tags:\n        - Token Introspection\n      summary: The Introspection OAuth 2 Endpoint for RPT.\n      description: The Introspection OAuth 2 Endpoint for RPT.\n      operationId: get-rpt-status\n      parameters:\n        - name: Authorization\n          in: header\n          required: true\n          schema:\n            type: string\n        - name: token\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: token_type_hint\n          in: query\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: RptIntrospectionResponse\n                type: object\n                required:\n                  - active\n                  - permissions\n                  - resource_id\n                  - resource_scopes\n                properties:\n                  active:\n                    type: boolean\n                    description: Boolean indicator of whether or not the presented token is currently active.\n                  exp:\n                    type: integer\n                    description: Integer timestamp, in seconds since January 1 1970 UTC, indicating when this token will expire.\n                    format: int64\n                    example: 1256953732\n                  iat:\n                    type: integer\n                    description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission was originally issued.\n                    example: 1256953732\n                  clientId:\n                    type: string\n                    description: Client id used to obtain RPT.\n                  sub:\n                    type: string\n                    description: Subject of the token. Usually a machine-readable identifier of the resource owner who authorized this token.\n                  aud:\n                    type: string\n                    description: Service-specific string identifier or list of string identifiers representing the intended audience for this token.\n                  permissions:\n                    type: array\n                    items:\n                      type: object\n                      description: List of UmaPermission granted to RPT. A permission is (requested or granted) authorized access to a\n                        particular resource with some number of scopes  bound to that resource.\n                      required:\n                        - resource_id\n                        - resource_scopes\n                      properties:\n                        resource_id:\n                          type: string\n                          description: A string that uniquely identifies the protected resource, access to which has been granted to this client on\n                            behalf of this requesting party. The identifier MUST correspond to a resource that was previously registered as protected.\n                        resource_scopes:\n                          type: array\n                          description: An array referencing zero or more strings representing scopes to which access was granted for this resource.\n                            Each string MUST correspond to a scope that was registered by this resource server for the referenced resource.\n                          items:\n                            type: string\n                        exp:\n                          type: integer\n                          description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission\n                            will expire. If the token-level exp value pre-dates a permission-level exp value, the token-level value takes\n                            precedence.\n                        iat:\n                          type: integer\n                          description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this\n                            permission was originally issued. If the token-level iat value post-dates a permission-level iat value,\n                            the token-level value takes precedence.\n                        nbf:\n                          type: integer\n                          description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating the time before\n                            which this permission is not valid. If the token-level nbf value post-dates a permission-level nbf value,\n                            the token-level value takes precedence.\n                  pct_claims:\n                    type: object\n                    additionalProperties:\n                      type: string\n                    description: PCT token claims.\n                    #example: {name:['John']}\n                  iss:\n                    type: string\n                    description: String representing the issuer of this token, as defined in JWT [RFC7519].\n                  jti:\n                    type: string\n                    description: String identifier for the token, as defined in JWT [RFC7519].\n                  nbf:\n                    type: integer\n                    description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating the time before which this permission is not valid.\n                  resource_id:\n                    type: string\n                    description: Resource ID.\n                  resource_scopes:\n                    type: array\n                    items:\n                      type: string\n        405:\n          description: Introspection of RPT is not allowed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n    post:\n      tags:\n        - Token Introspection\n      summary: The Introspection OAuth 2 Endpoint for RPT.\n      description: The Introspection OAuth 2 Endpoint for RPT.\n      operationId: post-rpt-status\n      parameters:\n        - name: Authorization\n          in: header\n          required: true\n          description: Client Authorization details that contains the access token along with other details.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              required:\n                - token\n              properties:\n                token:\n                  type: string\n                  description: Client access token.\n                token_type_hint:\n                  type: string\n                  description: ID Token previously issued by the Authorization Server being passed as a hint about the End-User.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: RptIntrospectionResponse\n                type: object\n                required:\n                  - active\n                  - permissions\n                  - resource_id\n                  - resource_scopes\n                properties:\n                  active:\n                    type: boolean\n                    description: Boolean indicator of whether or not the presented token is currently active.\n                  exp:\n                    type: integer\n                    description: Integer timestamp, in seconds since January 1 1970 UTC, indicating when this token will expire.\n                    format: int64\n                    example: 1256953732\n                  iat:\n                    type: integer\n                    description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission was originally issued.\n                    example: 1256953732\n                  clientId:\n                    type: string\n                    description: Client id used to obtain RPT.\n                  sub:\n                    type: string\n                    description: Subject of the token. Usually a machine-readable identifier of the resource owner who authorized this token.\n                  aud:\n                    type: string\n                    description: Service-specific string identifier or list of string identifiers representing the intended audience for this token.\n                  permissions:\n                    type: array\n                    items:\n                      type: object\n                      description: List of UmaPermission granted to RPT. A permission is (requested or granted) authorized access to a\n                        particular resource with some number of scopes  bound to that resource.\n                      required:\n                        - resource_id\n                        - resource_scopes\n                      properties:\n                        resource_id:\n                          type: string\n                          description: A string that uniquely identifies the protected resource, access to which has been granted to this client on\n                            behalf of this requesting party. The identifier MUST correspond to a resource that was previously registered as protected.\n                        resource_scopes:\n                          type: array\n                          description: An array referencing zero or more strings representing scopes to which access was granted for this resource.\n                            Each string MUST correspond to a scope that was registered by this resource server for the referenced resource.\n                          items:\n                            type: string\n                        exp:\n                          type: integer\n                          description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission\n                            will expire. If the token-level exp value pre-dates a permission-level exp value, the token-level value takes\n                            precedence.\n                        iat:\n                          type: integer\n                          description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this\n                            permission was originally issued. If the token-level iat value post-dates a permission-level iat value,\n                            the token-level value takes precedence.\n                        nbf:\n                          type: integer\n                          description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating the time before\n                            which this permission is not valid. If the token-level nbf value post-dates a permission-level nbf value,\n                            the token-level value takes precedence.\n                  pct_claims:\n                    type: object\n                    additionalProperties:\n                      type: string\n                      description: PCT token claims.\n                      example: '{name:[\"John\"]}'\n                  iss:\n                    type: string\n                    description: String representing the issuer of this token, as defined in JWT [RFC7519].\n                  jti:\n                    type: string\n                    description: String identifier for the token, as defined in JWT [RFC7519].\n                  nbf:\n                    type: integer\n                    description: Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating the time before which this permission is not valid.\n                  resource_id:\n                    type: string\n                    description: Resource ID.\n                  resource_scopes:\n                    type: array\n                    items:\n                      type: string\n        405:\n          description: Introspection of RPT is not allowed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n  /uma/scopes:\n    get:\n      tags:\n        - UMA Scope\n      summary: Provides UMA Scope description by scope id.\n      description: Provides UMA Scope description by scope id.\n      operationId: get-uma_scopes\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Resource description ID.\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: UmaScopeDescription\n                required:\n                  - name\n                properties:\n                  description:\n                    type: string\n                    description: A human-readable string describing the resource at length. The authorization server MAY use this description in any user interface it presents to a resource owner, for example, for resource protection monitoring or policy setting.\n                  iconUri:\n                    type: string\n                    description: A URI for a graphic icon representing the scope. The referenced icon MAY be used by the authorization server in any user interface it presents to the resource owner.\n                  name:\n                    type: string\n                    description: A human-readable string describing some scope (extent) of access. This name MAY be used by the authorization server in any user interface it presents to the resource owner.\n        404:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - not_found\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n  /userinfo:\n    get:\n      tags:\n        - User Info\n      summary: Returns Claims about the authenticated End-User.\n      description: Returns Claims about the authenticated End-User.\n      operationId: get-userinfo\n      parameters:\n        - name: access_token\n          in: query\n          required: true\n          description: OAuth 2.0 Access Token.\n          schema:\n            type: string\n        - name: Authorization\n          in: header\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/jwt:\n              schema:\n                title: User Claims details\n                properties:\n                  sub:\n                    type: integer\n                    example: 248289761001\n                  name:\n                    type: string\n                    example: Jane Doe\n                  given_name:\n                    type: string\n                    example: Jane\n                  family_name:\n                    type: string\n                    example: Doe\n                  preferred_username:\n                    type: string\n                    example: j.doe\n                  email:\n                    type: string\n                    example: janedoe@example.com\n                  picture:\n                    type: string\n                    example: http://example.com/janedoe/me.jpg\n        400:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_request\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        401:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_token\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        403:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - insufficient_scope\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - User Info\n      summary: Returns Claims about the authenticated End-User.\n      description: Returns Claims about the authenticated End-User.\n      operationId: post-userinfo\n      parameters:\n        - name: Authorization\n          in: header\n          description: Client Authorization details that contains the access token along with other details.\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              required:\n                - access_token\n              properties:\n                access_token:\n                  type: string\n                  description: OAuth 2.0 Access Token.\n      responses:\n        200:\n          description: OK\n          content:\n            application/jwt:\n              schema:\n                title: User Claims details\n                properties:\n                  sub:\n                    type: integer\n                    example: 248289761001\n                  name:\n                    type: string\n                    example: Jane Doe\n                  given_name:\n                    type: string\n                    example: Jane\n                  family_name:\n                    type: string\n                    example: Doe\n                  preferred_username:\n                    type: string\n                    example: j.doe\n                  email:\n                    type: string\n                    example: janedoe@example.com\n                  picture:\n                    type: string\n                    example: http://example.com/janedoe/me.jpg\n        400:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_request\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        401:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - invalid_token\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        403:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - insufficient_scope\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /fido/u2f/authentication:\n    get:\n      tags:\n        - FIDO U2F\n      summary: Performs FIDO U2F authentication of end-user.\n      description: Performs FIDO U2F authentication of end-user.\n      operationId: get-fido-u2f-authentication\n      parameters:\n        - name: username\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: keyhandle\n          in: query\n          schema:\n            type: string\n            description: Websafe-base64 encoding of the key handle obtained from the U2F token during registration.\n        - name: application\n          in: query\n          description: The application id that the RP would like to assert.\n          schema:\n            type: string\n        - name: session_id\n          in: query\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: AuthenticateRequestMessage\n                description: FIDO U2F device authentication request.\n                required:\n                  - version\n                  - challenge\n                  - appId\n                  - keyHandle\n                type: object\n                properties:\n                  version:\n                    type: string\n                    description: Version of the protocol that the to-be-registered U2F token must speak.\n                    example: U2F_V2\n                  challenge:\n                    type: string\n                    description: The websafe-base64-encoded challenge.\n                  appId:\n                    type: string\n                    description: The application id that the RP would like to assert.\n                  keyHandle:\n                    type: string\n                    description: Websafe-base64 encoding of the key handle obtained from the U2F token during registration.\n        403:\n          $ref: '#/components/responses/AccessDenied'\n        404:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - no_eligable_devices\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n    post:\n      tags:\n        - FIDO U2F\n      summary: Performs FIDO U2F authentication of end-user.\n      description: Performs FIDO U2F authentication of end-user.\n      operationId: post-fido-u2f-authentication\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: GetClientTokenParams\n              required:\n                - username\n                - tokenResponse\n              type: object\n              properties:\n                username:\n                  type: string\n                tokenResponse:\n                  type: object\n                  properties:\n                    clientData:\n                      type: string\n                      description: base64(UTF8(client data))\n                    signatureData:\n                      type: string\n                      description: base64(raw response from U2F device)\n                    keyHandle:\n                      type: string\n                      description: keyHandle originally passed\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: AuthenticateStatus\n                description: FIDO U2F device authentication status.\n                required:\n                  - status\n                  - challenge\n                type: object\n                properties:\n                  status:\n                    type: string\n                    description: Version of the protocol that the to-be-registered U2F token must speak.\n                    example: U2F_V2\n                  challenge:\n                    type: string\n                    description: The websafe-base64-encoded challenge.\n        403:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - session_expired\n                      - invalid_request\n                      - device_compromised\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n\n  /fido-configuration:\n    get:\n      tags:\n        - FIDO U2F\n      summary: Performs FIDO configuration data.\n      description: Performs FIDO configuration data.\n      operationId: fido-configuration\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: U2fConfiguration\n                description: FIDO U2F Configuration.\n                required:\n                  - version\n                  - issuer\n                properties:\n                  version:\n                    type: string\n                    description: The version of the FIDO U2F core protocol to which this server conforms. The value MUST be the string 1.0.\n                  issuer:\n                    type: string\n                    description: A URI indicating the party operating the FIDO U2F server.\n                  registration_endpoint:\n                    type: string\n                  authentication_endpoint:\n                    type: string\n        403:\n          $ref: '#/components/responses/AccessDenied'\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n  /fido/u2f/registration:\n    get:\n      tags:\n        - FIDO U2F\n      summary: U2F device registration.\n      description: U2F device registration.\n      operationId: get-fido-u2f-registration\n      parameters:\n        - name: username\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: application\n          in: query\n          description: The application id that the RP would like to assert.\n          schema:\n            type: string\n        - name: session_id\n          in: query\n          schema:\n            type: string\n        - name: enrollment_code\n          in: query\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: RegisterRequestMessage\n                description: RegisterRequestMessage\n                required:\n                  - authenticateRequests\n                  - registerRequests\n                type: object\n                properties:\n                  authenticateRequests:\n                    type: array\n                    items:\n                      type: object\n                      description: list of AuthenticateRequest\n                      properties:\n                        version:\n                          type: string\n                          description: Version of the protocol that the to-be-registered U2F token must speak.\n                          example: U2F_V2\n                        challenge:\n                          type: string\n                          description: The websafe-base64-encoded challenge.\n                        appId:\n                          type: string\n                          description: The application id that the RP would like to assert.\n                        keyHandle:\n                          type: string\n                          description: websafe-base64 encoding of the key handle obtained from the U2F token during registration\n                  registerRequests:\n                    type: array\n                    items:\n                      type: object\n                      description: list of RegisterRequest\n                      properties:\n                        version:\n                          type: string\n                          description: Version of the protocol that the to-be-registered U2F token must speak.\n                          example: U2F_V2\n                        challenge:\n                          type: string\n                          description: The websafe-base64-encoded challenge.\n                        appId:\n                          type: string\n                          description: The application id that the RP would like to assert.\n        403:\n          $ref: '#/components/responses/AccessDenied'\n        406:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - registration_not_allowed\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n    post:\n      tags:\n        - FIDO U2F\n      summary: U2F device registration.\n      description: U2F device registration.\n      operationId: post-fido-u2f-registration\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: RegisterSiteParams\n              required:\n                - username\n              type: object\n              properties:\n                username:\n                  type: string\n                tokenResponse:\n                  type: object\n                  description: FIDO U2F device registration details\n                  properties:\n                    registrationData:\n                      type: string\n                    clientData:\n                      type: string\n                    deviceData:\n                      type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: RegisterStatus\n                description: RegisterRequestMessage\n                type: object\n                properties:\n                  status:\n                    type: string\n                  challenge:\n                    type: string\n        403:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - session_expired\n                      - invalid_request\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        406:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - registration_not_allowed\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n        500:\n          description: Invalid parameters provided to endpoint.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - error\n                  - error_description\n                properties:\n                  error:\n                    type: string\n                    format: enum\n                    example:\n                      - server_error\n                  error_description:\n                    type: string\n                  details:\n                    type: string\n  /fido2/configuration:\n    get:\n      tags:\n        - FIDO2\n      summary: FIDO2 configuration\n      description: FIDO2 configuration\n      operationId: get-fido2-configuration\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: FIDO2 configuration\n                description: FIDO2 configuration.\n                required:\n                  - version\n                  - issuer\n                  - attestation\n                properties:\n                  version:\n                    type: string\n                    description: The version of the FIDO2 U2F core protocol to which this server conforms. The value MUST be the string 1.0.\n                  issuer:\n                    type: string\n                    description: A URI indicating the party operating the FIDO U2F server.\n                  attestation:\n                    type: array\n                    items:\n                      type: object\n                      description: list of fido2 attestation endpoints\n                      properties:\n                        base_path:\n                          type: string\n                          description: fido2 attestation endpoint\n                        options_enpoint:\n                          type: string\n                          description: fido2 attestation options endpoint\n                        result_enpoint:\n                          type: string\n                          description: fido2 attestation result endpoint\n                  assertion:\n                    type: array\n                    items:\n                      type: object\n                      description: list of fido2 assertion endpoints\n                      properties:\n                        base_path:\n                          type: string\n                          description: fido2 assertion endpoint\n                        options_enpoint:\n                          type: string\n                          description: fido2 assertion options endpoint\n                        result_enpoint:\n                          type: string\n                          description: fido2 assertion result endpoint\n        403:\n          $ref: '#/components/responses/AccessDenied'\n        406:\n          $ref: '#/components/responses/NotAcceptable'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /fido2/assertion/options:\n    post:\n      tags:\n        - FIDO2\n      summary: FIDO2 Assertion Options\n      description: FIDO2 Assertion Options\n      operationId: options\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: AssertionOptions\n              type: object\n              properties:\n                content:\n                  type: object\n                  description: An object that contains the extensions to enable, and the options to use for each of them.\n                  properties:\n                    username:\n                      type: string\n                    authenticatorSelection:\n                      type: array\n                      items:\n                        type: string\n                        description: Set of parameters required for FIDO2 assertion option.\n                    documentDomain:\n                      type: string\n                    extensions:\n                      type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: AssertionOptionsResponse\n                type: object\n                required:\n                  - challenge\n                  - user\n                  - allowCredentials\n                  - userVerification\n                  - extensions\n                properties:\n                  challenge:\n                    type: string\n                    description: Websafe-base64 encoding of the challenge.\n                  user:\n                    type: string\n                    description: username\n                  allowCredentials:\n                    type: array\n                    items:\n                      type: string\n                    example:\n                      - type\n                      - transports\n                      - id\n                  userVerification:\n                    type: string\n                  extensions:\n                    type: string\n        403:\n          $ref: '#/components/responses/AccessDenied'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /fido2/assertion/result:\n    post:\n      tags:\n        - FIDO2\n      summary: FIDO2 Assertion Result - Parses and validates an assertion response from the client.\n      description: FIDO2 Assertion Result.\n      operationId: result\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: AssertionOptions\n              required:\n                - clientDataJSON\n              type: object\n              properties:\n                id:\n                  type: string\n                  description: The base64url encoded id returned by the client\n                type:\n                  type: array\n                  items:\n                    type: string\n                  example:\n                    - public-key\n                rawId:\n                  type: string\n                  description: The base64url encoded rawId returned by the client. If res.rawId is missing, res.id will be used instead. If both are missing an error will be thrown.\n                userHandle:\n                  type: string\n                  description: The base64url encoded userHandle returned by the client. May be null or an empty string.\n                clientDataJSON:\n                  type: array\n                  description: The base64url encoded clientDataJSON returned by the client\n                  items:\n                    type: string\n                  example:\n                    - challenge\n                    - origin\n      responses:\n        200:\n          description: OK\n          content: {}\n        403:\n          $ref: '#/components/responses/AccessDenied'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /fido2/attestation/options:\n    post:\n      tags:\n        - FIDO2\n      summary: Created new registration.\n      description: Created new registration.\n      operationId: attestation-options\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: AttestationOptions\n              description: An object containing various options for the option creation\n              type: object\n              properties:\n                username:\n                  type: string\n                displayName:\n                  type: string\n                documentDomain:\n                  type: string\n                credentialType:\n                  type: string\n                authenticatorSelection:\n                  type: array\n                  items:\n                    type: string\n                    description: Set of parameters required for FIDO2 attestation option.\n                extensions:\n                  type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: CredentialCreationOptions\n                required:\n                  - challenge\n                  - rp\n                  - user\n                  - attestation\n                  - pubKeyCredParams\n                  - authenticatorSelection\n                  - excludeCredentials\n                  - extensions\n                type: object\n                properties:\n                  challenge:\n                    type: string\n                    description: The base64url encoded challenge that was sent to the client, as generated by assertionOptions.\n                  rp:\n                    type: array\n                    description: RP credentials\n                    items:\n                      type: string\n                    example:\n                      - name\n                      - id\n                  user:\n                    type: object\n                    description: User object\n                    required:\n                      - id\n                      - name\n                      - displayName\n                    properties:\n                      id:\n                        type: string\n                      name:\n                        type: string\n                      displayName:\n                        type: string\n                  attestation:\n                    type: string\n                    format: enum\n                  pubKeyCredParams:\n                    type: array\n                    items:\n                      type: string\n                      example:\n                        - public-key\n                        - type\n                        - alg\n                  authenticatorSelection:\n                    type: array\n                    items:\n                      type: string\n                      description: Set of parameters required for FIDO2 attestation option.\n                  excludeCredentials:\n                    type: array\n                    items:\n                      type: string\n                      description: Set of parameters required for FIDO2 attestation option.\n                  extensions:\n                    type: string\n        403:\n          $ref: '#/components/responses/AccessDenied'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /fido2/attestation/result:\n    post:\n      tags:\n        - FIDO2\n      summary: FIDO2 attestation result.\n      description: FIDO2 attestation result\n      operationId: attestation-result\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: AttestationOptions\n              description: An object containing various options for the option creation\n              type: object\n              required:\n                - _type\n                - clientDataJSON\n              properties:\n                type:\n                  type: string\n                clientDataJSON:\n                  type: array\n                  description: The base64url encoded clientDataJSON returned by the client\n                  items:\n                    type: string\n                  example:\n                    - challenge\n                    - origin\n                id:\n                  type: string\n\n      responses:\n        200:\n          description: OK\n          content: {}\n          $ref: '#/components/responses/AccessDenied'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\ncomponents:\n  responses:\n    Found: #302 - FOUND\n      description: Resource Found.\n      content: {}\n    InvalidRequest: #400 - BAD_REQUEST\n      description: Invalid parameters are provided to endpoint.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    Unauthorized: #401 - UNAUTHORIZED\n      description: Unauthorized access request.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    AccessDenied: #403 - FORBIDDEN\n      description: Invalid details provided hence access denied.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    NotFound: #404 - NOT_FOUND\n      description: Resource Not Found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    NotAcceptable: #406 - NOT_ACCEPTABLE\n      description: Request Not Acceptable.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    InternalServerError: #500 - INTERNAL_SERVER_ERROR\n      description: Internal error occured. Please check log file for details.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n\n  schemas:\n    ErrorResponse:\n      required:\n        - error\n        - error_description\n      type: object\n      properties:\n        error:\n          type: string\n        error_description:\n          type: string\n        details:\n          type: string\n    JsonWebKey:\n      required:\n        - alg\n        - exp\n        - key_ops\n        - kid\n        - kty\n        - use\n        - x5c\n      type: object\n      properties:\n        kid:\n          type: string\n        kty:\n          type: string\n        use:\n          type: string\n        alg:\n          type: string\n        crv:\n          type: string\n        exp:\n          type: integer\n          format: int64\n        x5c:\n          type: array\n          items:\n            type: string\n        n:\n          type: string\n        e:\n          type: string\n        x:\n          type: string\n        y:\n          type: string",
			"canonicalURL": "/github.com/GluuFederation/oxAuth@ccc8d98335dfd9fe30a982b4741ad8ad23dca0c0/-/blob/docs/oxAuthSwagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/GluuFederation/oxAuth/blob/ccc8d98335dfd9fe30a982b4741ad8ad23dca0c0/docs/oxAuthSwagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/userinfo\": get: responses: 200: contents: unsupported content types: [application/jwt]",
	"NotImplemented": [
		"object with additionalProperties",
		"unsupported content types"
	]
}