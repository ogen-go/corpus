{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/open-policy-agent/contrib"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "open_api/openapi.yaml",
			"byteSize": 47486,
			"content": "# Needs review by SMEs\n# 'pretty' parameter setting does not appear to affect anything. Omitting, setting to true or false all has the same result - always human-readable\nopenapi: 3.0.3\n# servers:\n#  - url: 'http://localhost:8181'\n#    description: Docker\ntags:\n  - name: Policy API\n    description: 'Allows you to add, remove and modify policy modules. *Policy module identifiers are only used for management purposes. They are not used outside the Policy API.*'\n  - name: Data API\n    description: 'Exposes endpoints for reading and writing documents in OPA. For an explanation of the different types of documents, see [the OPA document model](https://www.openpolicyagent.org/docs/latest/philosophy/#the-opa-document-model)'\n  - name: Query API\n    description: Posting queries to OPA\n  - name: Compile API\n    description: Posting partial queries to OPA\n  - name: Health API\n    description: Executes a simple built-in policy query to verify that the server is operational\ninfo:\n  title: Open Policy Agent (OPA) REST API\n  description: |-\n    OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.\n\n    ### API specification viewing options\n\n    - **[View the specification in *Redoc* (default)](index.html)**\n    - **[View the specification in *Swagger UI*](swagger-ui.html)**\n  version: 0.28.0\n  x-logo:\n    url: 'https://github.com/open-policy-agent/opa/blob/master/docs/website/static/img/logos/opa-horizontal-color.png?raw=true'\n    backgroundColor: '#FFFFFF'\n    altText: 'OPA logo'\n  contact:\n    name: The OPA team\n    url: 'https://github.com/open-policy-agent/opa'\n  license:\n    name: Apache 2.0\n    url: 'https://www.apache.org/licenses/LICENSE-2.0'\nexternalDocs:\n  description: OPA documentation\n  url: 'https://www.openpolicyagent.org/docs/latest/'\npaths:\n  /v1/policies:\n    get:\n      summary: List policies\n      description: This API endpoint responds with a list of all policy modules on the server (result response)\n      operationId: getPolicies\n      parameters:\n        - $ref: '#/components/parameters/prettyParameter'\n      tags:\n        - Policy API\n      responses:\n        '200':\n          $ref: '#/components/responses/successResult'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\n      x-code-samples:\n        - lang: JavaScript\n          source: |\n            fetch(\"http://localhost:8181/v1/policies\", {\n              \"method\": \"GET\",\n              \"headers\": {}\n              })\n              .then(response =\u003e {\n                 console.log(response);\n                })\n              .catch(err =\u003e {\n                console.error(err);\n                });\n        - lang: Python\n          source: |\n            import http.client\n            conn = http.client.HTTPConnection(\"localhost:8181\")\n            conn.request(\"GET\", \"/v1/policies\")\n            res = conn.getresponse()\n            data = res.read()\n            print(data.decode(\"utf-8\"))\n        - lang: Java\n          source: |\n            AsyncHttpClient client = new DefaultAsyncHttpClient();\n            client.prepare(\"GET\", \"http://localhost:8181/v1/policies\")\n              .execute()\n              .toCompletableFuture()\n              .thenAccept(System.out::println)\n              .join();\n            client.close();\n        - lang: Go\n          source: |\n            package main\n            import (\n              \"fmt\"\n              \"net/http\"\n              \"io/ioutil\"\n              )\n            func main() {\n              url := \"http://localhost:8181/v1/policies\"\n              req, _ := http.NewRequest(\"GET\", url, nil)\n              res, _ := http.DefaultClient.Do(req)\n              defer res.Body.Close()\n              body, _ := ioutil.ReadAll(res.Body)\n              fmt.Println(res)\n              fmt.Println(string(body))\n            }\n  '/v1/policies/{id}':\n    parameters:\n      - $ref: '#/components/parameters/idParameter'\n    get:\n      summary: Get a policy module\n      description: This API endpoint returns the details of the specified policy module (`{id}`)\n      operationId: getPolicyModule\n      parameters:\n        - $ref: '#/components/parameters/prettyParameter'\n      tags:\n        - Policy API\n      responses:\n        '200':\n          $ref: '#/components/responses/successResult'\n        '404':\n          $ref: '#/components/responses/notFoundResponse'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\n    put:\n      summary: Create or update a policy module\n      description: |-\n        - If the policy module does not exist, it is created.\n        - If the policy module already exists, it is replaced.\n\n        If the policy module isn't correctly defined, a *bad request* (400) response is returned.\n\n        ### Example policy module\n        ```yaml\n        package opa.examples\n\n        import data.servers\n        import data.networks\n        import data.ports\n\n        public_servers[server] {\n          some k, m\n          \tserver := servers[_]\n          \tserver.ports[_] == ports[k].id\n          \tports[k].networks[_] == networks[m].id\n          \tnetworks[m].public == true\n        }\n        ```\n      operationId: putPolicyModule\n      parameters:\n        - $ref: '#/components/parameters/prettyParameter'\n        - $ref: '#/components/parameters/metricsParameter'\n      requestBody:\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n              example: |-\n                package opa.examples\n\n                import data.servers\n                import data.networks\n                import data.ports\n\n                public_servers[server] {\n                  some k, m\n                  \tserver := servers[_]\n                  \tserver.ports[_] == ports[k].id\n                  \tports[k].networks[_] == networks[m].id\n                  \tnetworks[m].public == true\n                }\n      tags:\n        - Policy API\n      responses:\n        '200':\n          $ref: '#/components/responses/successResult'\n        '400':\n          $ref: '#/components/responses/badRequestResponse'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\n    delete:\n      summary: Delete a policy module\n      description: This API endpoint removes an existing policy module from the server\n      operationId: deletePolicyModule\n      parameters:\n        - $ref: '#/components/parameters/prettyParameter'\n      tags:\n        - Policy API\n      responses:\n        '200':\n          $ref: '#/components/responses/successResponse'\n        '400':\n          $ref: '#/components/responses/badRequestResponse'\n        '404':\n          $ref: '#/components/responses/notFoundResponse'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\n  '/v1/data/{path}':\n    parameters:\n      - $ref: '#/components/parameters/pathParameter'\n    get:\n      summary: Get a document\n      description: |-\n        This API endpoint returns the document specified by `path`.\n\n        The server will return a *bad request* (400) response if either:\n        - The query requires an input document and you do not provide it\n        - You provide the input document but the query has already defined it.\n      operationId: getDocument\n      parameters:\n        - $ref: '#/components/parameters/inputParameter'\n        - $ref: '#/components/parameters/prettyParameter'\n        - $ref: '#/components/parameters/provenanceParameter'\n        - $ref: '#/components/parameters/explainParameter'\n        - $ref: '#/components/parameters/metricsParameter'\n        - $ref: '#/components/parameters/instrumentParameter'\n      tags:\n        - Data API\n      responses:\n        '200':\n          $ref: '#/components/responses/successResponse'\n        '400':\n          $ref: '#/components/responses/badRequestResponse'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\n    put:\n      summary: Create or overwrite a document\n      description: |-\n        If the path does not refer to an existing document (for example *us-west/servers*), the server will attempt to create all the necessary containing documents.\n\n        This behavior is similar to the Unix command [mkdir -p](https://en.wikipedia.org/wiki/Mkdir#Options).\n      operationId: putDocument\n      requestBody:\n        description: The JSON document to write to the specified path.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/dataSchema'\n      parameters:\n        - $ref: '#/components/parameters/ifNoneMatchParameter'\n      tags:\n        - Data API\n      responses:\n        '204':\n          description: Success\n        '304':\n          description: Document was not modified\n        '400':\n          $ref: '#/components/responses/badRequestResponse'\n        '404':\n          $ref: '#/components/responses/notFoundResponse'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\n    patch:\n      summary: Update a document\n      description: 'This API endpoint updates an existing document on the server by describing the changes required (using [JSON patch operations](http://jsonpatch.com/))'\n      operationId: patchDocument\n      requestBody:\n        description: The list of JSON patch operations.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/patchesSchema'\n      tags:\n        - Data API\n      responses:\n        '204':\n          description: Success\n        '400':\n          $ref: '#/components/responses/badRequestResponse'\n        '404':\n          $ref: '#/components/responses/notFoundResponse'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\n    delete:\n      summary: Delete a document\n      description: 'This API endpoint deletes an existing document from the server'\n      operationId: deleteDocument\n      tags:\n        - Data API\n      responses:\n        '204':\n          description: Success\n        '404':\n          $ref: '#/components/responses/notFoundResponse'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\n    post:\n      summary: Get a document (with input)\n      description: |-\n        The server will return a *bad request* (400) response if either:\n        - The query requires an input document and you do not provide it\n        - You provided an input document but the query has already defined it.\n\n        If `path` indexes into an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, a *not found* response (404) will be returned.\n      operationId: getDocumentWithPath\n      parameters:\n        - $ref: '#/components/parameters/prettyParameter'\n        - $ref: '#/components/parameters/provenanceParameter'\n        - $ref: '#/components/parameters/explainParameter'\n        - $ref: '#/components/parameters/metricsParameter'\n        - $ref: '#/components/parameters/instrumentParameter'\n      requestBody:\n        description: The input document (in JSON format)\n        required: true\n        content:\n          application/x-yaml:\n            schema:\n              $ref: '#/components/schemas/inputSchema'\n      tags:\n        - Data API\n      responses:\n        '200':\n          $ref: '#/components/responses/successResponse'\n        '400':\n          $ref: '#/components/responses/badRequestResponse'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\n  '/v0/data/{path}':\n    parameters:\n      - $ref: '#/components/parameters/webhookPathParameter'\n    post:\n      summary: Get a document (with webhook)\n      description: |\n        The example given here assumes you have created a policy (with `PUT /v1/policies/{path}`), such as:\n\n          ```yaml\n          package opa.examples\n          import input.example.flag\n          allow_request { flag == true }\n          ```\n\n        The server will return a *not found* (404) response if the requested document is missing or undefined.\n      operationId: getDocumentWithWebHook\n      parameters:\n        - $ref: '#/components/parameters/prettyParameter'\n      requestBody:\n        description: The input document (in JSON format)\n        required: true\n        content:\n          application/x-yaml:\n            schema:\n              $ref: '#/components/schemas/webhookInputSchema'\n      tags:\n        - Data API\n      responses:\n        '200':\n          $ref: '#/components/responses/successResponse'\n        '400':\n          $ref: '#/components/responses/badRequestResponse'\n        '404':\n          $ref: '#/components/responses/notFoundResponse'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\n  /:\n    post:\n      summary: Execute a simple query\n      description: |-\n        This API queries the document at */data/system/main* by default (however, you can [configure OPA](https://www.openpolicyagent.org/docs/latest/configuration/) to use a different path to serve these queries). That document defines the response.\n        For example, use the following in `PUT /v1/policies/{path}`) to define a rule that will produce a value for the */data/system/main* document:\n\n          ```yaml\n          package system\n          main = msg {\n            msg := sprintf(\"hello, %v\", input.user)\n          }\n          ```\n\n        The server will return a *not found* (404) response if */data/system/main* is undefined.\n      operationId: postSimpleQuery\n      parameters:\n        - $ref: '#/components/parameters/prettyParameter'\n      requestBody:\n        description: The text of the input document (in JSON format)\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/queryInputSchema'\n      tags:\n        - Query API\n      responses:\n        '200':\n          description: Success\n        '400':\n          $ref: '#/components/responses/badRequestResponse'\n        '404':\n          $ref: '#/components/responses/notFoundResponse'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\n  /v1/query:\n    get:\n      summary: Execute an ad-hoc query (simple)\n      description: |-\n        This API endpoint returns bindings for the variables in the query.\n\n        For more complex JSON queries, use `POST /v1/query` instead.\n      operationId: getQuery\n      parameters:\n        - $ref: '#/components/parameters/qParameter'\n        - $ref: '#/components/parameters/prettyParameter'\n        - $ref: '#/components/parameters/explainParameter'\n        - $ref: '#/components/parameters/metricsParameter'\n      tags:\n        - Query API\n      responses:\n        '200':\n          $ref: '#/components/responses/successQuery'\n        '400':\n          $ref: '#/components/responses/badRequestResponse'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\n    post:\n      summary: Execute an ad-hoc query (complex)\n      description: |-\n        This API endpoint returns bindings for the variables in the query.\n\n        For simpler JSON queries, you may use `GET /v1/query` instead.\n      operationId: postQuery\n      parameters:\n        - $ref: '#/components/parameters/prettyParameter'\n        - $ref: '#/components/parameters/explainParameter'\n        - $ref: '#/components/parameters/metricsParameter'\n      requestBody:\n        description: The test of the query (in JSON format)\n        required: true\n        content:\n          application/x-yaml:\n            schema:\n              $ref: '#/components/schemas/qSchema'\n      tags:\n        - Query API\n      responses:\n        '200':\n          $ref: '#/components/responses/successQuery'\n        '400':\n          $ref: '#/components/responses/badRequestResponse'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\n        '501':\n          description: Streaming not implemented\n  '/v1/compile':\n    post:\n      summary: Compile\n      description: |-\n        This API endpoint allows you to partially evaluate Rego queries and obtain a simplified version of the policy. The example below assumes that OPA has been given the following policy (use `PUT /v1/policies/{path}`):\n\n        ```yaml\n        package example\n        allow {\n          input.subject.clearance_level \u003e= data.reports[_].clearance_level\n        }\n        ```\n        Compile API **request body** so that it contain the following fields:\n\n        | Field | Type | Required | Description |\n        | --- | --- | --- | --- |\n        | `query` | `string` | Yes | The query to partially evaluate and compile. |\n        | `input` | `any` | No | The input document to use during partial evaluation (default: undefined). |\n        | `unknowns` | `array[string]` | No | The terms to treat as unknown during partial evaluation (default: `[\"input\"]`]). |\n\n        For example:\n\n        ```json\n        {\n          \"query\": \"data.example.allow == true\",\n          \"input\": {\n            \"subject\": {\n              \"clearance_level\": 4\n            }\n          },\n          \"unknowns\": [\n            \"data.reports\"\n            ]\n        }\n        ```\n        ### Partial evaluation\n        In some cases, the result of partial valuation is a conclusive, unconditional answer. See [the guidance](https://www.openpolicyagent.org/docs/latest/rest-api/#unconditional-results-from-partial-evaluation) for details.\n      externalDocs:\n        description: Partial evaluation article\n        url: 'https://blog.openpolicyagent.org/partial-evaluation-162750eaf422'\n      operationId: postCompile\n      parameters:\n        - $ref: '#/components/parameters/prettyParameter'\n        - $ref: '#/components/parameters/explainParameter'\n        - $ref: '#/components/parameters/metricsParameter'\n        - $ref: '#/components/parameters/instrumentParameter'\n      requestBody:\n        description: The query (in JSON format)\n        required: false\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/partialQuerySchema'\n      tags:\n        - Compile API\n      responses:\n        '200':\n          $ref: '#/components/responses/successQuery'\n        '400':\n          $ref: '#/components/responses/badRequestResponse'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\n  /health:\n    get:\n      summary: Health\n      description: |-\n        This API endpoint verifies that the server is operational.\n\n        The response from the server is either 200 or 500:\n        - **200** - OPA service is healthy. If `bundles` is true, then all configured bundles have been activated. If `plugins` is true, then all plugins are in an 'OK' state.\n        - **500** - OPA service is *not* healthy. If `bundles` is true, at least one of configured bundles has not yet been activated. If `plugins` is true, at least one plugins is in a 'not OK' state.\n\n        ---\n        **Note**\n        This check is only for initial bundle activation. Subsequent downloads will not affect the health check.\n\n        Use the **status** endpoint (in the (management API)[management.html]) for more fine-grained bundle status monitoring.\n\n        ---\n      externalDocs:\n        description: Bundles\n        url: 'https://www.openpolicyagent.org/docs/latest/management/#bundles'\n      operationId: getHealth\n      parameters:\n        - $ref: '#/components/parameters/bundlesParameter'\n        - $ref: '#/components/parameters/pluginsParameter'\n      tags:\n        - Health API\n      responses:\n        '200':\n          description: OPA service is healthy\n        '500':\n          description: OPA service is not healthy\n  /v1/config:\n    get:\n      summary: Get configurations\n      description: |-\n        This API endpoint responds with active configuration (result response)\n\n        ---\n        **Note**\n        The `credentials` field in the `services` configuration and\n\n        The `private_key` and `key` fields in the `keys` configuration will be omitted from the API response\n\n        ---\n      operationId: getConfig\n      parameters:\n        - $ref: '#/components/parameters/prettyParameter'\n      tags:\n        - Config API\n      responses:\n        '200':\n          $ref: '#/components/responses/successSingleResult'\n        '500':\n          $ref: '#/components/responses/serverErrorResponse'\ncomponents:\n  parameters:\n    idParameter:\n      name: id\n      description: The name of a policy module\n      example: example1\n      in: path\n      required: true\n      schema:\n        type: string\n    prettyParameter:\n      name: pretty\n      description: 'If true, response will be in a human-readable format.'\n      example: true\n      in: query\n      required: false\n      schema:\n        type: boolean\n    metricsParameter:\n      name: metrics\n      description: 'If true, compiler performance metrics will be returned in the response.'\n      example: false\n      in: query\n      required: false\n      schema:\n        type: boolean\n    pathParameter:\n      name: path\n      description: 'A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404.'\n      example: opa/examples/public_servers\n      in: path\n      required: true\n      allowReserved: true\n      schema:\n        type: string\n    webhookPathParameter:\n      name: path\n      description: 'A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404.'\n      example: opa/examples/allow_request\n      in: path\n      required: true\n      schema:\n        type: string\n    provenanceParameter:\n      name: provenance\n      description: 'If true, response will include build and version information in addition to the result.'\n      example: false\n      in: query\n      required: false\n      schema:\n        type: boolean\n    explainParameter:\n      name: explain\n      description: 'If set to *full*, response will include query explanations in addition to the result.'\n      example: full\n      in: query\n      required: false\n      schema:\n        type: string\n    instrumentParameter:\n      name: instrument\n      description: |-\n        If true, response will return additional performance metrics in addition to the result and the standard metrics.\n\n        **Caution:** This can add significant overhead to query evaluation. The recommendation is to only use this parameter if you are debugging a performance problem.\n      example: false\n      in: query\n      required: false\n      schema:\n        type: boolean\n    ifNoneMatchParameter:\n      name: If-None-Match\n      description: 'The server will respect the If-None-Match header if it is set to * (in other words, it will not overwrite an existing document located at the specified `path`).'\n      example: '*'\n      in: header\n      required: false\n      schema:\n        type: string\n    qParameter:\n      name: q\n      description: 'The [URL-encoded](https://www.w3schools.com/tags/ref_urlencode.ASP) ad-hoc query to execute.'\n      example: '{\"query\": \"data.servers[i].ports[_] = \\\"p2\\\"; data.servers[i].name = name\"}'\n      in: query\n      required: true\n      schema:\n        type: string\n    inputParameter:\n      name: input\n      description: 'Provide the text for an [input document](https://www.openpolicyagent.org/docs/latest/kubernetes-primer/#input-document) in JSON format'\n      in: query\n      required: false\n      schema:\n        type: object\n        additionalProperties: {}\n        example: {\"input\": {\"example\": {\"flag\": true}}}\n    bundlesParameter:\n      name: bundles\n      description: |-\n        Reports on bundle activation status (useful for 'ready' checks at startup).\n\n        This includes any discovery bundles or bundles defined in the loaded discovery configuration.\n      example: true\n      in: query\n      required: false\n      schema:\n        type: boolean\n    pluginsParameter:\n      name: plugins\n      description: Reports on plugin status\n      example: false\n      in: query\n      required: false\n      schema:\n        type: boolean\n  responses:\n    successResult:\n      description: Success\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/200Result'\n    successSingleResult:\n      description: Success\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/200SingleResult'\n    successResponse:\n      description: Success\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: '#/components/schemas/200Result'\n              - $ref: '#/components/schemas/200Provenance'\n              - $ref: '#/components/schemas/200Metrics'\n              - $ref: '#/components/schemas/200Explanations'\n    successQuery:\n      description: Success\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: '#/components/schemas/200Result'\n              - $ref: '#/components/schemas/200Metrics'\n              - $ref: '#/components/schemas/200Explanations'\n    successZipResponse:\n      description: Success. You will find a gzip file is in the response's message body\n      content:\n        application/gzip:\n          schema:\n            type: string\n            format: binary\n    notFoundResponse:\n      description: Not found (for example, a requested policy module or document does not exist)\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/404'\n    badRequestResponse:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/400'\n    serverErrorResponse:\n      description: Server error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/400'\n  schemas:\n    '400':\n      type: object\n      properties:\n        code:\n          description: The error code name\n          example: invalid_parameter\n          type: string\n          minLength: 1\n        message:\n          description: The description of the error\n          type: string\n          minLength: 1\n          example: error(s) occurred while compiling module(s)\n        errors:\n          description: 'Errors that may have been generated during the parse, compile, or installation of a policy module'\n          type: array\n          uniqueItems: true\n          items:\n            properties:\n              code:\n                description: The error code name\n                type: string\n                minLength: 1\n                example: rego_unsafe_var_error\n              message:\n                description: A general description of the error\n                type: string\n                minLength: 1\n                example: var x is unsafe\n              location:\n                description: Where the error occurred\n                type: object\n                properties:\n                  file:\n                    description: The policy module name that generated the error\n                    type: string\n                    example: example1\n                  row:\n                    description: The line number in the policy module where the error occurred\n                    type: number\n                    example: 3\n                  col:\n                    description: The column in the policy module where the error occurred\n                    type: number\n                    example: 1\n      required:\n        - code\n        - message\n    '404':\n      type: object\n      properties:\n        code:\n          description: The error code name\n          example: resource_not_found\n          type: string\n          minLength: 1\n        message:\n          description: The description of the error (including the name of any undefined policy module)\n          example: 'storage_not_found_error: policy id \\\"partial\\\"'\n          type: string\n          minLength: 1\n      required:\n        - code\n        - message\n    inputSchema:\n      type: object\n      example: |-\n        {\n          \"input\": {\n           \"example\": {\n             \"flag\": true\n             }\n           }\n         }\n      additionalProperties: {}\n      x-examples:\n        example: |-\n          {\n            \"input\": {\n             \"example\": {\n               \"flag\": true\n               }\n             }\n           }\n    dataSchema:\n      example: |-\n        {\n          \"users\": {\n            \"user-id-1\": {\n              \"isAdmin\": true\n            }\n          }\n        }\n    webhookInputSchema:\n      type: object\n      example: |-\n        {\n          \"example\": {\n            \"flag\": true\n            }\n         }\n      additionalProperties: {}\n    queryInputSchema:\n      type: object\n      example: |-\n        {\n          \"user\": [\"alice\"]\n        }\n      additionalProperties: {}\n    qSchema:\n      type: object\n      example: |-\n        {\n          \"query\": \"data.servers[i].ports[_] = \\\"p2\\\"; data.servers[i].name = name\"\n        }\n      additionalProperties: {}\n    partialQuerySchema:\n      type: object\n      example: |-\n        {\n          \"query\": \"data.example.allow == true\",\n          \"input\": {\n            \"subject\": {\n              \"clearance_level\": 4\n            }\n          },\n          \"unknowns\": [\n            \"data.reports\"\n            ]\n        }\n      additionalProperties: {}\n    patchesSchema:\n      type: array\n      minItems: 1\n      description: 'A list of one or more [JSON patch operations](http://jsonpatch.com/)'\n      items:\n        type: object\n        description: A JSON patch operation\n        properties:\n          op:\n            type: string\n            minLength: 1\n            description: JSON patch operation type\n            enum:\n              - add\n              - remove\n              - replace\n              - move\n              - copy\n              - test\n            example: add\n          path:\n            type: string\n            minLength: 1\n            example: '-'\n            description: |-\n              A [JSON pointer](https://tools.ietf.org/html/rfc6901) to a location within the target document where the operation is performed.\n\n              The *effective path* is this value prefixed with the API call's `path` parameter.\n\n              The server will return a *bad request* (404) response if:\n\n              - The *parent* of the effective path does not refer to an existing document\n              - For **remove** and **replace** operations, the effective path does not refer to an existing document.\n          value:\n            type: object\n            example: |-\n              {\n                \"id\": \"s5\",\n                \"name\": \"job\",\n                \"protocols\": [\"amqp\"],\n                \"ports\": [\"p3\"]\n              }\n            description: 'The value to add, replace or test.'\n            additionalProperties: {}\n        required:\n          - op\n          - path\n    200Result:\n      type: object\n      properties:\n        result:\n          type: array\n          items:\n            properties:\n              id:\n                description: The name of a policy module\n                example: example2\n                type: string\n                minLength: 1\n              raw:\n                description: 'A string representation of the full Rego policy'\n                type: string\n                example: 'package opa.examples\\n\\nimport data.servers\\n\\nviolations[server] {\\n\\tserver = servers[_]\\n\\tserver.protocols[_] = \\\"http\\\"\\n\\tpublic_servers[server]\\n}\\n'\n                minLength: 1\n              ast:\n                description: The types for declarations and runtime objects passed to your implementation. This consists of an abstract syntax tree (AST) of policy modules, package and import declarations, rules, expressions, and terms.\n                externalDocs:\n                  description: AST\n                  url: 'https://godoc.org/github.com/open-policy-agent/opa/ast'\n                type: object\n                properties:\n                  package:\n                    type: object\n                    properties:\n                      path:\n                        description: 'The path to the package'\n                        type: array\n                        items:\n                          properties:\n                            type:\n                              description: The type of the path operation\n                              example: import\n                              type: string\n                              enum:\n                                - import\n                                - package\n                            value:\n                              description: The path variable\n                              example: data.opa.example\n                              type: string\n                  rules:\n                    description: 'When OPA evaluates a rule, it generates the content of a [virtual documents](https://www.openpolicyagent.org/docs/latest/philosophy/#the-opa-document-model)'\n                    externalDocs:\n                      description: Rules\n                      url: 'https://www.openpolicyagent.org/docs/latest/policy-language/#rules'\n                    type: array\n                    uniqueItems: true\n                    items:\n                      properties:\n                        head:\n                          type: object\n                          properties:\n                            name:\n                              description: The head of the rule\n                              example: violations\n                              type: string\n                            key:\n                              description: The type/value pairing for this rule's head\n                              type: object\n                              properties:\n                                type:\n                                  description: The type of the head\n                                  example: var\n                                  type: string\n                                value:\n                                  description: The value of the head\n                                  example: $0\n                                  type: string\n                        body:\n                          description: A list of the terms in this rule\n                          type: array\n                          items:\n                            properties:\n                              index:\n                                description: The location of this term in the list (starts at 0)\n                                example: 1\n                                type: number\n                              terms:\n                                description: The type/value pairing for this term\n                                type: array\n                                items:\n                                  properties:\n                                    type:\n                                      description: The type of the term variable\n                                      example: var\n                                      type: string\n                                    value:\n                                      description: The list of types and values for the term variable\n                                      type: array\n                                      items:\n                                        properties:\n                                          type:\n                                            type: string\n                                          value:\n                                            type: string\n    200SingleResult:\n      type: object\n      properties:\n        result:\n          type: object\n          properties:\n            services:\n              description: The types of services\n              type: object\n              properties:\n                acmecorp:\n                  type: object\n                  properties:\n                    url:\n                      example: 'https://example.com/control-plane-api/v1'\n                      type: string\n            labels:\n              description: Labels\n              type: object\n              properties:\n                id:\n                  description: Label ID\n                  type: string\n                  example: 'test-id'\n                  minLength: 1\n                version:\n                  description: Version\n                  type: string\n                  example: '0.27.0'\n                  minLength: 1\n            keys:\n              description: Keys\n              type: object\n              properties:\n                global-key:\n                  description: Global Key\n                  type: object\n                  properties:\n                    scope:\n                      description: Scope\n                      type: string\n                      example: 'read'\n                      minLength: 1\n            decision_logs:\n              description: Logs\n              type: object\n              properties:\n                service:\n                  description: Service\n                  type: string\n                  example: 'acmecorp'\n                  minLength: 1\n            status:\n              description: Status\n              type: object\n              properties:\n                service:\n                  description: Service\n                  type: string\n                  example: 'acmecorp'\n                  minLength: 1\n            bundles:\n              description: Bundles\n              type: object\n              properties:\n                authz:\n                  description: Auth\n                  type: object\n                  properties:\n                    service:\n                      description: Service\n                      type: string\n                      example: 'acmecorp'\n                      minLength: 1\n            default_authorization_decision:\n              type: string\n              example: '/system/authz/allow'\n            default_decision:\n              type: string\n              example: '/system/main'\n    200Metrics:\n      type: object\n      properties:\n        metrics:\n          type: object\n          properties:\n            timer_rego_input_parse_ns:\n              description: Time taken (in nanonseconds) to parse the input\n              type: number\n              example: 69994\n            timer_rego_query_parse_ns:\n              description: Time taken (in nanoseconds) to parse the query\n              type: number\n              example: 4096\n            timer_rego_query_compile_ns:\n              description: Time taken (in nanoseconds) to compile the query\n              type: number\n              example: 4096\n            timer_rego_query_eval_ns:\n              description: Time taken (in nanonseconds) to evaluate the query\n              type: number\n              example: 69994\n            timer_rego_module_parse_ns:\n              description: Time taken (in nanoseconds) to parse the input policy module\n              type: number\n              example: 12345\n            timer_rego_module_compile_ns:\n              description: Time taken (in nanonseconds) to compile the loaded policy modules\n              type: number\n              example: 69994\n            timer_server_handler_ns:\n              description: Time taken (in nanoseconds) to handle the API request\n              type: number\n              example: 631000\n            timer_server_read_bytes_ns:\n              description: '*Description is forthcoming*'\n              type: number\n              example: 631000\n            counter_server_query_cache_hit:\n              description: '*Description is forthcoming*'\n              type: number\n              example: 0\n            timer_query_compile_stage_build_comprehension_index_ns:\n              description: '(Only returned if `instrument` is true.) *Description is forthcoming*'\n              type: number\n              example: 43000\n            timer_query_compile_stage_check_safety_ns:\n              description: '(Only returned if `instrument` is true.) *Description is forthcoming*'\n              type: number\n              example: 852000\n            timer_query_compile_stage_check_types_ns:\n              description: '(Only returned if `instrument` is true.) *Description is forthcoming*'\n              type: number\n              example: 577000\n            timer_query_compile_stage_check_undefined_funcs_ns:\n              description: '(Only returned if `instrument` is true.) *Description is forthcoming*'\n              type: number\n              example: 426000\n            timer_query_compile_stage_check_unsafe_builtins_ns:\n              description: '(Only returned if `instrument` is true.) *Description is forthcoming*'\n              type: number\n              example: 14000\n            timer_query_compile_stage_resolve_refs_ns:\n              description: '(Only returned if `instrument` is true.) *Description is forthcoming*'\n              type: number\n              example: 3000\n            timer_query_compile_stage_rewrite_comprehension_terms_ns:\n              description: '(Only returned if `instrument` is true.) *Description is forthcoming*'\n              type: number\n              example: 329000\n            timer_query_compile_stage_rewrite_dynamic_terms_ns:\n              description: '(Only returned if `instrument` is true.) *Description is forthcoming*'\n              type: number\n              example: 27000\n            timer_query_compile_stage_rewrite_expr_terms_ns:\n              description: '(Only returned if `instrument` is true.) *Description is forthcoming*'\n              type: number\n              example: 40000\n            timer_query_compile_stage_rewrite_local_vars_ns:\n              description: '(Only returned if `instrument` is true.) *Description is forthcoming*'\n              type: number\n              example: 187000\n            timer_query_compile_stage_rewrite_to_capture_value_ns:\n              description: '(Only returned if `instrument` is true.) *Description is forthcoming*'\n              type: number\n              example: 1178000\n            timer_query_compile_stage_rewrite_with_values_ns:\n              description: '(Only returned if `instrument` is true.) *Description is forthcoming*'\n              type: number\n              example: 23000\n    200Provenance:\n      type: object\n      properties:\n        provenance:\n          type: object\n          properties:\n            version:\n              type: string\n              description: The version of this OPA instance\n            build_commit:\n              type: string\n              example: 4c6e524\n              description: The Git commit id of this OPA build.\n            build_timestamp:\n              type: string\n              description: 'When this OPA instance was built (in [ISO8601 format](https://www.w3.org/TR/NOTE-datetime))'\n            build_hostname:\n              type: string\n              description: The hostname where this instance was built.\n              example: 3bb58334a5a9\n            bundles:\n              type: object\n              description: A set of key-value pairs describing each bundle activated on the server.\n              additionalProperties: {}\n    200Explanations:\n      type: object\n      properties:\n        explanation:\n          type: array\n          items:\n              type: object\n              properties:\n                op:\n                  type: string\n                  description: |-\n                    The kind of *trace event*\n\n                    Each trace event represents a step in the query evaluation process. Trace events are emitted at the following points:\n                    - enter - before a body or rule is evaluated\n                    - exit - after a body or rule has evaluated successfully\n                    - eval - before an expression is evaluated\n                    - fail - after an expression has evaluated to false.\n                    - redo - before evaluation restarts from a body, rule, or expression.\n\n                    By default, OPA searches for all sets of term bindings that make all expressions in the query evaluate to true. Because there may be multiple answers, the search can restart when OPA determines the query is true or false. When the search restarts, a *redo trace event* is emitted.\n                  enum:\n                    - enter\n                    - exit\n                    - eval\n                    - fail\n                    - redo\n                  example: enter\n                query_id:\n                  type: number\n                  description: The query that the trace event was emitted for. Use this field to distinguish trace events emitted by from different queries.\n                  example: 0\n                  minimum: 0\n                parent_id:\n                  type: number\n                  description: |-\n                    The parent query. Use this field to identify trace events from related queries.\n\n                    For example, if query A references rule R, trace events emitted when evaluating rule R will have the *parent_id* field set to query A’s *query_id*.\n                  example: 0\n                  minimum: 0\n                type:\n                  type: string\n                  description: The type of the **node** field\n                  example: expr\n                  enum:\n                    - expr\n                    - rule\n                    - body\n                node:\n                  type: object\n                  description: 'The AST element associated with the evaluation step.'\n                  externalDocs:\n                    description: AST\n                    url: 'https://godoc.org/github.com/open-policy-agent/opa/ast'\n                  properties:\n                    index:\n                      type: number\n                      description: Node number\n                    terms:\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          type:\n                            type: string\n                            example: var\n                          value:\n                            type: string\n                            example: $term1\n                locals:\n                  type: array\n                  description: The query's term bindings at the point when the trace event was emitted.\n                  items:\n                    type: object\n                    properties:\n                      key:\n                        type: object\n                        properties:\n                          type:\n                            type: string\n                          value:\n                            type: string\n                      value:\n                        type: object\n                        properties:\n                          type:\n                            type: string\n                          value:\n                            type: string\n  securitySchemes: {}\nsecurity: []\n",
			"canonicalURL": "/github.com/open-policy-agent/contrib@105043de43257e751235850d90e016a619e62ad7/-/blob/open_api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/open-policy-agent/contrib/blob/105043de43257e751235850d90e016a619e62ad7/open_api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: \"input\": object with additionalProperties not implemented",
	"NotImplemented": [
		"object with additionalProperties",
		"unsupported content types"
	]
}