{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Redocly/openapi-template"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 8972,
			"content": "# This is an **example** API to demonstrate features of OpenAPI specification.\n# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended\n\nopenapi: 3.0.2\ninfo:\n  version: '1.0.0' # Your API version\n  # It can be any string but it is better to use semantic versioning: http://semver.org/\n  # Warning: OpenAPI requires the version to be a string, but without quotation marks YAML can recognize it as a number.\n  \n  title: Example.com # Replace with your API title\n  # Keep it simple. Don't add \"API\" or version at the end of the string.\n\n  termsOfService: 'https://example.com/terms/' # [Optional] Replace with an URL to your ToS\n  contact:\n    email: contact@example.com # [Optional] Replace with your contact email\n    url: 'http://example.com/contact' # [Optional] Replace with link to your contact form\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n  x-logo:\n    url: 'https://redocly.github.io/openapi-template/logo.png'\n  \n  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here\n  description: |\n    This is an **example** API to demonstrate features of OpenAPI specification\n    # Introduction\n    This API definition is intended to to be a good starting point for describing your API in \n    [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).\n    It also demonstrates features of [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool and \n    [Redoc](https://github.com/Redocly/Redoc) documentation engine. So beyond the standard OpenAPI syntax we use a few \n    [vendor extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n    # OpenAPI Specification\n    The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which\n    allows both humans and computers to discover and understand the capabilities of the service without access to source\n    code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can \n    understand and interact with the remote service with a minimal amount of implementation logic. Similar to what\n    interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.\nexternalDocs:\n  description: Find out how to create a GitHub repo for your OpenAPI definition.\n  url: 'https://github.com/Rebilly/generator-openapi-repo'\n\n# A list of tags used by the definition with additional metadata.\n# The order of the tags can be used to reflect on their order by the parsing tools.\ntags:\n  - name: Echo\n    description: Example echo operations\n  - name: User\n    description: Operations about user\nservers:\n  - url: 'http://example.com/api/v1'\n  - url: 'https://example.com/api/v1'\n\n# Holds the relative paths to the individual endpoints. The path is appended to the\n# basePath in order to construct the full URL. \npaths:\n  '/users/{username}': # path parameter in curly braces\n\n    # parameters list that are used with each operation for this path\n    parameters:\n      - name: pretty_print\n        in: query\n        description: Pretty print response\n        schema:\n          type: boolean\n    get: # documentation for GET operation for this path\n      tags:\n        - User\n      \n      # summary is up to 120 symbold but we recommend to be shortest as possible\n      summary: Get user by user name\n      \n      # you can use GFM in operation description too: https://guides.github.com/features/mastering-markdown\n      description: |\n        Some description of the operation. \n        You can use `markdown` here.\n      \n      # operationId should be unique across the whole specification\n      operationId: getUserByName\n      \n      # list of parameters for the operation\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be fetched\n          required: true\n          schema:\n            type: string\n        - name: with_email\n          in: query\n          description: Filter users without email\n          schema:\n            type: boolean\n      \n      # security schemas applied to this operation\n      security:\n        - main_auth:\n            - 'read:users' # for oauth2 provide list of scopes here\n        - api_key: []\n      responses: # list of responses\n        '200':\n          description: Success\n          content:\n            application/json: # operation response mime type\n              schema: # response schema can be specified for each response\n                $ref: '#/components/schemas/User'\n              example: # response example\n                username: user1\n                email: user@example.com\n        '403':\n          description: Forbidden\n        '404':\n          description: User not found\n    # documentation for PUT operation for this path\n    put:\n      tags:\n        - User\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be updated\n          required: true\n          schema:\n            type: string\n      security:\n        - main_auth:\n            - 'write:users'\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n      # request body documentation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Updated user object\n        required: true\n  /echo: # path parameter in curly braces\n    post: # documentation for POST operation for this path\n      tags:\n        - Echo\n      summary: Echo test\n      description: Receive the exact message you've sent\n      operationId: echo\n      security:\n        - api_key: []\n        - basic_auth: []\n      responses:\n        '200':\n          description: OK\n          # document headers for this response\n          headers:\n            X-Rate-Limit: # Header name\n              description: calls per hour allowed by the user\n              schema: # Header schema\n                type: integer\n                format: int32\n            X-Expires-After:\n              $ref: '#/components/headers/ExpiresAfter'\n          content:\n            application/json:\n              schema:\n                type: string\n              examples:\n                response:\n                  value: Hello world!\n            application/xml:\n              schema:\n                type: string\n            text/csv:\n              schema:\n                type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n              example: Hello world!\n          application/xml:\n            schema:\n              type: string\n              example: Hello world!\n        description: Echo payload\n        required: true\n        \n# An object to hold reusable parts that can be used across the definition\ncomponents:\n  schemas:\n    Email:\n      description: User email address\n      type: string\n      format: test\n      example: john.smith@example.com\n    User:\n      type: object\n      properties:\n        username:\n          description: User supplied username\n          type: string\n          minLength: 4\n          example: John78\n        firstName:\n          description: User first name\n          type: string\n          minLength: 1\n          example: John\n        lastName:\n          description: User last name\n          type: string\n          minLength: 1\n          example: Smith\n        email:\n          $ref: '#/components/schemas/Email'\n  headers:\n    ExpiresAfter:\n      description: date in UTC when token expires\n      schema:\n        type: string\n        format: date-time\n  # Security scheme definitions that can be used across the definition.\n  securitySchemes:\n    main_auth: # security definition name (you can name it as you want)\n      # the following options are specific to oauth2 type\n      type: oauth2 # authorization type, one of: oauth2, apiKey, http\n      flows:\n        implicit:\n          authorizationUrl: 'http://example.com/api/oauth/dialog'\n          scopes:\n            'read:users': read users info\n            'write:users': modify or remove users\n    api_key:  # security definition name (you can name it as you want)\n      type: apiKey \n      # The following options are specific to apiKey type\n      in: header # Where API key will be passed: header or query\n      name: api_key # API key parameter name\n    basic_auth: # security definition name (you can name it as you want)\n      type: http\n      scheme: basic\n",
			"canonicalURL": "/github.com/Redocly/openapi-template@e73504eeca913683d0ce7063ce036e1dbf793b68/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Redocly/openapi-template/blob/e73504eeca913683d0ce7063ce036e1dbf793b68/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/users/{username}\": get: security: security \"main_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}