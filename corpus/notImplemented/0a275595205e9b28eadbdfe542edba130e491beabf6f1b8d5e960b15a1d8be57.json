{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/deepset-ai/haystack"
		},
		"file": {
			"name": "openapi-1.2.1rc0.json",
			"size": 0,
			"path": "docs/v1.5.0/_src/api/openapi/openapi-1.2.1rc0.json",
			"byteSize": 31946,
			"content": "{\n    \"openapi\": \"3.0.2\",\n    \"info\": {\n        \"title\": \"Haystack REST API\",\n        \"version\": \"1.2.1rc0\"\n    },\n    \"paths\": {\n        \"/initialized\": {\n            \"get\": {\n                \"tags\": [\n                    \"search\"\n                ],\n                \"summary\": \"Check Status\",\n                \"description\": \"This endpoint can be used during startup to understand if the\\nserver is ready to take any requests, or is still loading.\\n\\nThe recommended approach is to call this endpoint with a short timeout,\\nlike 500ms, and in case of no reply, consider the server busy.\",\n                \"operationId\": \"check_status_initialized_get\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {}\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/hs_version\": {\n            \"get\": {\n                \"tags\": [\n                    \"search\"\n                ],\n                \"summary\": \"Haystack Version\",\n                \"description\": \"Get the running Haystack version.\",\n                \"operationId\": \"haystack_version_hs_version_get\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {}\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/query\": {\n            \"post\": {\n                \"tags\": [\n                    \"search\"\n                ],\n                \"summary\": \"Query\",\n                \"description\": \"This endpoint receives the question as a string and allows the requester to set\\nadditional parameters that will be passed on to the Haystack pipeline.\",\n                \"operationId\": \"query_query_post\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/QueryRequest\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/QueryResponse\"\n                                }\n                            }\n                        }\n                    },\n                    \"422\": {\n                        \"description\": \"Validation Error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/feedback\": {\n            \"get\": {\n                \"tags\": [\n                    \"feedback\"\n                ],\n                \"summary\": \"Get Feedback\",\n                \"description\": \"This endpoint allows the API user to retrieve all the feedback that has been submitted\\nthrough the `POST /feedback` endpoint.\",\n                \"operationId\": \"get_feedback_feedback_get\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {}\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"tags\": [\n                    \"feedback\"\n                ],\n                \"summary\": \"Post Feedback\",\n                \"description\": \"This endpoint allows the API user to submit feedback on an answer for a particular query.\\n\\nFor example, the user can send feedback on whether the answer was correct and\\nwhether the right snippet was identified as the answer.\\n\\nInformation submitted through this endpoint is used to train the underlying QA model.\",\n                \"operationId\": \"post_feedback_feedback_post\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"title\": \"Feedback\",\n                                \"anyOf\": [\n                                    {\n                                        \"$ref\": \"#/components/schemas/LabelSerialized\"\n                                    },\n                                    {\n                                        \"$ref\": \"#/components/schemas/CreateLabelSerialized\"\n                                    }\n                                ]\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {}\n                            }\n                        }\n                    },\n                    \"422\": {\n                        \"description\": \"Validation Error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"feedback\"\n                ],\n                \"summary\": \"Delete Feedback\",\n                \"description\": \"This endpoint allows the API user to delete all the\\nfeedback that has been sumbitted through the\\n`POST /feedback` endpoint\",\n                \"operationId\": \"delete_feedback_feedback_delete\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {}\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/eval-feedback\": {\n            \"post\": {\n                \"tags\": [\n                    \"feedback\"\n                ],\n                \"summary\": \"Get Feedback Metrics\",\n                \"description\": \"This endpoint returns basic accuracy metrics based on user feedback,\\ne.g., the ratio of correct answers or correctly identified documents.\\nYou can filter the output by document or label.\\n\\nExample:\\n\\n`curl --location --request POST 'http://127.0.0.1:8000/eval-doc-qa-feedback'      --header 'Content-Type: application/json'      --data-raw '{ \\\"filters\\\": {\\\"document_id\\\": [\\\"XRR3xnEBCYVTkbTystOB\\\"]} }'`\",\n                \"operationId\": \"get_feedback_metrics_eval_feedback_post\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/FilterRequest\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {}\n                            }\n                        }\n                    },\n                    \"422\": {\n                        \"description\": \"Validation Error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/export-feedback\": {\n            \"get\": {\n                \"tags\": [\n                    \"feedback\"\n                ],\n                \"summary\": \"Export Feedback\",\n                \"description\": \"This endpoint returns JSON output in the SQuAD format for question/answer pairs\\nthat were marked as \\\"relevant\\\" by user feedback through the `POST /feedback` endpoint.\\n\\nThe context_size param can be used to limit response size for large documents.\",\n                \"operationId\": \"export_feedback_export_feedback_get\",\n                \"parameters\": [\n                    {\n                        \"required\": false,\n                        \"schema\": {\n                            \"title\": \"Context Size\",\n                            \"type\": \"integer\",\n                            \"default\": 100000\n                        },\n                        \"name\": \"context_size\",\n                        \"in\": \"query\"\n                    },\n                    {\n                        \"required\": false,\n                        \"schema\": {\n                            \"title\": \"Full Document Context\",\n                            \"type\": \"boolean\",\n                            \"default\": true\n                        },\n                        \"name\": \"full_document_context\",\n                        \"in\": \"query\"\n                    },\n                    {\n                        \"required\": false,\n                        \"schema\": {\n                            \"title\": \"Only Positive Labels\",\n                            \"type\": \"boolean\",\n                            \"default\": false\n                        },\n                        \"name\": \"only_positive_labels\",\n                        \"in\": \"query\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {}\n                            }\n                        }\n                    },\n                    \"422\": {\n                        \"description\": \"Validation Error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/file-upload\": {\n            \"post\": {\n                \"tags\": [\n                    \"file-upload\"\n                ],\n                \"summary\": \"Upload File\",\n                \"description\": \"You can use this endpoint to upload a file for indexing\\n(see https://haystack.deepset.ai/guides/rest-api#indexing-documents-in-the-haystack-rest-api-document-store).\",\n                \"operationId\": \"upload_file_file_upload_post\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"multipart/form-data\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/Body_upload_file_file_upload_post\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {}\n                            }\n                        }\n                    },\n                    \"422\": {\n                        \"description\": \"Validation Error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/documents/get_by_filters\": {\n            \"post\": {\n                \"tags\": [\n                    \"document\"\n                ],\n                \"summary\": \"Get Documents\",\n                \"description\": \"This endpoint allows you to retrieve documents contained in your document store.\\nYou can filter the documents to delete by metadata (like the document's name),\\nor provide an empty JSON object to clear the document store.\\n\\nExample of filters:\\n`'{\\\"filters\\\": {{\\\"name\\\": [\\\"some\\\", \\\"more\\\"], \\\"category\\\": [\\\"only_one\\\"]}}'`\\n\\nTo get all documents you should provide an empty dict, like:\\n`'{\\\"filters\\\": {}}'`\",\n                \"operationId\": \"get_documents_documents_get_by_filters_post\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/FilterRequest\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Response Get Documents Documents Get By Filters Post\",\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/DocumentSerialized\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"422\": {\n                        \"description\": \"Validation Error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/documents/delete_by_filters\": {\n            \"post\": {\n                \"tags\": [\n                    \"document\"\n                ],\n                \"summary\": \"Delete Documents\",\n                \"description\": \"This endpoint allows you to delete documents contained in your document store.\\nYou can filter the documents to delete by metadata (like the document's name),\\nor provide an empty JSON object to clear the document store.\\n\\nExample of filters:\\n`'{\\\"filters\\\": {{\\\"name\\\": [\\\"some\\\", \\\"more\\\"], \\\"category\\\": [\\\"only_one\\\"]}}'`\\n\\nTo get all documents you should provide an empty dict, like:\\n`'{\\\"filters\\\": {}}'`\",\n                \"operationId\": \"delete_documents_documents_delete_by_filters_post\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/FilterRequest\"\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"title\": \"Response Delete Documents Documents Delete By Filters Post\",\n                                    \"type\": \"boolean\"\n                                }\n                            }\n                        }\n                    },\n                    \"422\": {\n                        \"description\": \"Validation Error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"AnswerSerialized\": {\n                \"title\": \"AnswerSerialized\",\n                \"required\": [\n                    \"answer\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"answer\": {\n                        \"title\": \"Answer\",\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"title\": \"Type\",\n                        \"enum\": [\n                            \"generative\",\n                            \"extractive\",\n                            \"other\"\n                        ],\n                        \"type\": \"string\",\n                        \"default\": \"extractive\"\n                    },\n                    \"score\": {\n                        \"title\": \"Score\",\n                        \"type\": \"number\"\n                    },\n                    \"context\": {\n                        \"title\": \"Context\",\n                        \"type\": \"string\"\n                    },\n                    \"offsets_in_document\": {\n                        \"title\": \"Offsets In Document\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/Span\"\n                        }\n                    },\n                    \"offsets_in_context\": {\n                        \"title\": \"Offsets In Context\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/Span\"\n                        }\n                    },\n                    \"document_id\": {\n                        \"title\": \"Document Id\",\n                        \"type\": \"string\"\n                    },\n                    \"meta\": {\n                        \"title\": \"Meta\",\n                        \"type\": \"object\"\n                    }\n                }\n            },\n            \"Body_upload_file_file_upload_post\": {\n                \"title\": \"Body_upload_file_file_upload_post\",\n                \"required\": [\n                    \"files\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"files\": {\n                        \"title\": \"Files\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"format\": \"binary\"\n                        }\n                    },\n                    \"meta\": {\n                        \"title\": \"Meta\",\n                        \"type\": \"string\",\n                        \"default\": \"null\"\n                    },\n                    \"remove_numeric_tables\": {\n                        \"title\": \"Remove Numeric Tables\"\n                    },\n                    \"valid_languages\": {\n                        \"title\": \"Valid Languages\"\n                    },\n                    \"clean_whitespace\": {\n                        \"title\": \"Clean Whitespace\"\n                    },\n                    \"clean_empty_lines\": {\n                        \"title\": \"Clean Empty Lines\"\n                    },\n                    \"clean_header_footer\": {\n                        \"title\": \"Clean Header Footer\"\n                    },\n                    \"split_by\": {\n                        \"title\": \"Split By\"\n                    },\n                    \"split_length\": {\n                        \"title\": \"Split Length\"\n                    },\n                    \"split_overlap\": {\n                        \"title\": \"Split Overlap\"\n                    },\n                    \"split_respect_sentence_boundary\": {\n                        \"title\": \"Split Respect Sentence Boundary\"\n                    }\n                }\n            },\n            \"CreateLabelSerialized\": {\n                \"title\": \"CreateLabelSerialized\",\n                \"required\": [\n                    \"query\",\n                    \"document\",\n                    \"is_correct_answer\",\n                    \"is_correct_document\",\n                    \"origin\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"title\": \"Id\",\n                        \"type\": \"string\"\n                    },\n                    \"query\": {\n                        \"title\": \"Query\",\n                        \"type\": \"string\"\n                    },\n                    \"document\": {\n                        \"$ref\": \"#/components/schemas/DocumentSerialized\"\n                    },\n                    \"is_correct_answer\": {\n                        \"title\": \"Is Correct Answer\",\n                        \"type\": \"boolean\"\n                    },\n                    \"is_correct_document\": {\n                        \"title\": \"Is Correct Document\",\n                        \"type\": \"boolean\"\n                    },\n                    \"origin\": {\n                        \"title\": \"Origin\",\n                        \"enum\": [\n                            \"user-feedback\",\n                            \"gold-label\"\n                        ],\n                        \"type\": \"string\"\n                    },\n                    \"answer\": {\n                        \"$ref\": \"#/components/schemas/AnswerSerialized\"\n                    },\n                    \"no_answer\": {\n                        \"title\": \"No Answer\",\n                        \"type\": \"boolean\"\n                    },\n                    \"pipeline_id\": {\n                        \"title\": \"Pipeline Id\",\n                        \"type\": \"string\"\n                    },\n                    \"created_at\": {\n                        \"title\": \"Created At\",\n                        \"type\": \"string\"\n                    },\n                    \"updated_at\": {\n                        \"title\": \"Updated At\",\n                        \"type\": \"string\"\n                    },\n                    \"meta\": {\n                        \"title\": \"Meta\",\n                        \"type\": \"object\"\n                    },\n                    \"filters\": {\n                        \"title\": \"Filters\",\n                        \"type\": \"object\"\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"DocumentSerialized\": {\n                \"title\": \"DocumentSerialized\",\n                \"required\": [\n                    \"content\",\n                    \"content_type\",\n                    \"id\",\n                    \"meta\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"content\": {\n                        \"title\": \"Content\",\n                        \"type\": \"string\"\n                    },\n                    \"content_type\": {\n                        \"title\": \"Content Type\",\n                        \"enum\": [\n                            \"text\",\n                            \"table\",\n                            \"image\"\n                        ],\n                        \"type\": \"string\"\n                    },\n                    \"id\": {\n                        \"title\": \"Id\",\n                        \"type\": \"string\"\n                    },\n                    \"meta\": {\n                        \"title\": \"Meta\",\n                        \"type\": \"object\"\n                    },\n                    \"score\": {\n                        \"title\": \"Score\",\n                        \"type\": \"number\"\n                    },\n                    \"embedding\": {\n                        \"title\": \"Embedding\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"number\"\n                        }\n                    }\n                }\n            },\n            \"FilterRequest\": {\n                \"title\": \"FilterRequest\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"filters\": {\n                        \"title\": \"Filters\",\n                        \"type\": \"object\",\n                        \"additionalProperties\": {\n                            \"anyOf\": [\n                                {\n                                    \"type\": \"string\"\n                                },\n                                {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"string\"\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                }\n            },\n            \"HTTPValidationError\": {\n                \"title\": \"HTTPValidationError\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"detail\": {\n                        \"title\": \"Detail\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/ValidationError\"\n                        }\n                    }\n                }\n            },\n            \"LabelSerialized\": {\n                \"title\": \"LabelSerialized\",\n                \"required\": [\n                    \"id\",\n                    \"query\",\n                    \"document\",\n                    \"is_correct_answer\",\n                    \"is_correct_document\",\n                    \"origin\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"title\": \"Id\",\n                        \"type\": \"string\"\n                    },\n                    \"query\": {\n                        \"title\": \"Query\",\n                        \"type\": \"string\"\n                    },\n                    \"document\": {\n                        \"$ref\": \"#/components/schemas/DocumentSerialized\"\n                    },\n                    \"is_correct_answer\": {\n                        \"title\": \"Is Correct Answer\",\n                        \"type\": \"boolean\"\n                    },\n                    \"is_correct_document\": {\n                        \"title\": \"Is Correct Document\",\n                        \"type\": \"boolean\"\n                    },\n                    \"origin\": {\n                        \"title\": \"Origin\",\n                        \"enum\": [\n                            \"user-feedback\",\n                            \"gold-label\"\n                        ],\n                        \"type\": \"string\"\n                    },\n                    \"answer\": {\n                        \"$ref\": \"#/components/schemas/AnswerSerialized\"\n                    },\n                    \"no_answer\": {\n                        \"title\": \"No Answer\",\n                        \"type\": \"boolean\"\n                    },\n                    \"pipeline_id\": {\n                        \"title\": \"Pipeline Id\",\n                        \"type\": \"string\"\n                    },\n                    \"created_at\": {\n                        \"title\": \"Created At\",\n                        \"type\": \"string\"\n                    },\n                    \"updated_at\": {\n                        \"title\": \"Updated At\",\n                        \"type\": \"string\"\n                    },\n                    \"meta\": {\n                        \"title\": \"Meta\",\n                        \"type\": \"object\"\n                    },\n                    \"filters\": {\n                        \"title\": \"Filters\",\n                        \"type\": \"object\"\n                    }\n                }\n            },\n            \"QueryRequest\": {\n                \"title\": \"QueryRequest\",\n                \"required\": [\n                    \"query\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"query\": {\n                        \"title\": \"Query\",\n                        \"type\": \"string\"\n                    },\n                    \"params\": {\n                        \"title\": \"Params\",\n                        \"type\": \"object\"\n                    },\n                    \"debug\": {\n                        \"title\": \"Debug\",\n                        \"type\": \"boolean\",\n                        \"default\": false\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"QueryResponse\": {\n                \"title\": \"QueryResponse\",\n                \"required\": [\n                    \"query\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"query\": {\n                        \"title\": \"Query\",\n                        \"type\": \"string\"\n                    },\n                    \"answers\": {\n                        \"title\": \"Answers\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/AnswerSerialized\"\n                        },\n                        \"default\": []\n                    },\n                    \"documents\": {\n                        \"title\": \"Documents\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/DocumentSerialized\"\n                        },\n                        \"default\": []\n                    },\n                    \"_debug\": {\n                        \"title\": \" Debug\",\n                        \"type\": \"object\"\n                    }\n                }\n            },\n            \"Span\": {\n                \"title\": \"Span\",\n                \"required\": [\n                    \"start\",\n                    \"end\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"start\": {\n                        \"title\": \"Start\",\n                        \"type\": \"integer\"\n                    },\n                    \"end\": {\n                        \"title\": \"End\",\n                        \"type\": \"integer\"\n                    }\n                }\n            },\n            \"ValidationError\": {\n                \"title\": \"ValidationError\",\n                \"required\": [\n                    \"loc\",\n                    \"msg\",\n                    \"type\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"loc\": {\n                        \"title\": \"Location\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"msg\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"title\": \"Error Type\",\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        }\n    }\n}",
			"canonicalURL": "/github.com/deepset-ai/haystack@1e01cd0efb20d98905c84461e0433d5db4084b7e/-/blob/docs/v1.5.0/_src/api/openapi/openapi-1.2.1rc0.json",
			"externalURLs": [
				{
					"url": "https://github.com/deepset-ai/haystack/blob/1e01cd0efb20d98905c84461e0433d5db4084b7e/docs/v1.5.0/_src/api/openapi/openapi-1.2.1rc0.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/feedback\": post: requestBody: contents: application/json: generate schema: anyOf: complex anyOf not implemented",
	"NotImplemented": [
		"any type parameter",
		"complex anyOf"
	]
}