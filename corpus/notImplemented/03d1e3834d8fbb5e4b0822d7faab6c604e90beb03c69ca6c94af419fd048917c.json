{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wsvincent/restapiswithdjango"
		},
		"file": {
			"name": "schema.yml",
			"size": 0,
			"path": "ch10-blog-schemas-docs/schema.yml",
			"byteSize": 22309,
			"content": "openapi: 3.0.3\ninfo:\n  title: Blog API Project\n  version: 1.0.0\n  description: A sample blog to learn about DRF\npaths:\n  /api/v1/:\n    get:\n      operationId: root_list\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Post'\n          description: ''\n    post:\n      operationId: root_create\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Post'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Post'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Post'\n        required: true\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: ''\n  /api/v1/{id}/:\n    get:\n      operationId: root_retrieve\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this post.\n        required: true\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: ''\n    put:\n      operationId: root_update\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this post.\n        required: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Post'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Post'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Post'\n        required: true\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: ''\n    patch:\n      operationId: root_partial_update\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this post.\n        required: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedPost'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PatchedPost'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedPost'\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: ''\n    delete:\n      operationId: root_destroy\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this post.\n        required: true\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '204':\n          description: No response body\n  /api/v1/dj-rest-auth/login/:\n    post:\n      operationId: dj_rest_auth_login_create\n      description: |-\n        Check the credentials and return the REST Token\n        if the credentials are valid and authenticated.\n        Calls Django Auth login method to register User ID\n        in Django session framework\n\n        Accept the following POST parameters: username, password\n        Return the REST Framework Token Object's key.\n      tags:\n      - dj-rest-auth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Login'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Login'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Login'\n        required: true\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n          description: ''\n  /api/v1/dj-rest-auth/logout/:\n    post:\n      operationId: dj_rest_auth_logout_create\n      description: |-\n        Calls Django logout method and delete the Token object\n        assigned to the current User object.\n\n        Accepts/Returns nothing.\n      tags:\n      - dj-rest-auth\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestAuthDetail'\n          description: ''\n  /api/v1/dj-rest-auth/password/change/:\n    post:\n      operationId: dj_rest_auth_password_change_create\n      description: |-\n        Calls Django Auth SetPasswordForm save method.\n\n        Accepts the following POST parameters: new_password1, new_password2\n        Returns the success/fail message.\n      tags:\n      - dj-rest-auth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordChange'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PasswordChange'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PasswordChange'\n        required: true\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestAuthDetail'\n          description: ''\n  /api/v1/dj-rest-auth/password/reset/:\n    post:\n      operationId: dj_rest_auth_password_reset_create\n      description: |-\n        Calls Django Auth PasswordResetForm save method.\n\n        Accepts the following POST parameters: email\n        Returns the success/fail message.\n      tags:\n      - dj-rest-auth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordReset'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PasswordReset'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PasswordReset'\n        required: true\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestAuthDetail'\n          description: ''\n  /api/v1/dj-rest-auth/password/reset/confirm/:\n    post:\n      operationId: dj_rest_auth_password_reset_confirm_create\n      description: |-\n        Password reset e-mail link is confirmed, therefore\n        this resets the user's password.\n\n        Accepts the following POST parameters: token, uid,\n            new_password1, new_password2\n        Returns the success/fail message.\n      tags:\n      - dj-rest-auth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordResetConfirm'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PasswordResetConfirm'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PasswordResetConfirm'\n        required: true\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestAuthDetail'\n          description: ''\n  /api/v1/dj-rest-auth/registration/:\n    post:\n      operationId: dj_rest_auth_registration_create\n      tags:\n      - dj-rest-auth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Register'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Register'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/Register'\n        required: true\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      - {}\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n          description: ''\n  /api/v1/dj-rest-auth/registration/resend-email/:\n    post:\n      operationId: dj_rest_auth_registration_resend_email_create\n      tags:\n      - dj-rest-auth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResendEmailVerification'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/ResendEmailVerification'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/ResendEmailVerification'\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      - {}\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestAuthDetail'\n          description: ''\n  /api/v1/dj-rest-auth/registration/verify-email/:\n    post:\n      operationId: dj_rest_auth_registration_verify_email_create\n      tags:\n      - dj-rest-auth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VerifyEmail'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/VerifyEmail'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/VerifyEmail'\n        required: true\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestAuthDetail'\n          description: ''\n  /api/v1/dj-rest-auth/user/:\n    get:\n      operationId: dj_rest_auth_user_retrieve\n      description: |-\n        Reads and updates UserModel fields\n        Accepts GET, PUT, PATCH methods.\n\n        Default accepted fields: username, first_name, last_name\n        Default display fields: pk, username, email, first_name, last_name\n        Read-only fields: pk, email\n\n        Returns UserModel fields.\n      tags:\n      - dj-rest-auth\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDetails'\n          description: ''\n    put:\n      operationId: dj_rest_auth_user_update\n      description: |-\n        Reads and updates UserModel fields\n        Accepts GET, PUT, PATCH methods.\n\n        Default accepted fields: username, first_name, last_name\n        Default display fields: pk, username, email, first_name, last_name\n        Read-only fields: pk, email\n\n        Returns UserModel fields.\n      tags:\n      - dj-rest-auth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserDetails'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/UserDetails'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/UserDetails'\n        required: true\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDetails'\n          description: ''\n    patch:\n      operationId: dj_rest_auth_user_partial_update\n      description: |-\n        Reads and updates UserModel fields\n        Accepts GET, PUT, PATCH methods.\n\n        Default accepted fields: username, first_name, last_name\n        Default display fields: pk, username, email, first_name, last_name\n        Read-only fields: pk, email\n\n        Returns UserModel fields.\n      tags:\n      - dj-rest-auth\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedUserDetails'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PatchedUserDetails'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedUserDetails'\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDetails'\n          description: ''\n  /api/v1/users/:\n    get:\n      operationId: users_list\n      tags:\n      - users\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n          description: ''\n    post:\n      operationId: users_create\n      tags:\n      - users\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: ''\n  /api/v1/users/{id}/:\n    get:\n      operationId: users_retrieve\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this user.\n        required: true\n      tags:\n      - users\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: ''\n    put:\n      operationId: users_update\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this user.\n        required: true\n      tags:\n      - users\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/User'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: ''\n    patch:\n      operationId: users_partial_update\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this user.\n        required: true\n      tags:\n      - users\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedUser'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PatchedUser'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedUser'\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: ''\n    delete:\n      operationId: users_destroy\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        description: A unique integer value identifying this user.\n        required: true\n      tags:\n      - users\n      security:\n      - cookieAuth: []\n      - tokenAuth: []\n      responses:\n        '204':\n          description: No response body\ncomponents:\n  schemas:\n    Login:\n      type: object\n      properties:\n        username:\n          type: string\n        email:\n          type: string\n          format: email\n        password:\n          type: string\n      required:\n      - password\n    PasswordChange:\n      type: object\n      properties:\n        new_password1:\n          type: string\n          maxLength: 128\n        new_password2:\n          type: string\n          maxLength: 128\n      required:\n      - new_password1\n      - new_password2\n    PasswordReset:\n      type: object\n      description: Serializer for requesting a password reset e-mail.\n      properties:\n        email:\n          type: string\n          format: email\n      required:\n      - email\n    PasswordResetConfirm:\n      type: object\n      description: Serializer for confirming a password reset attempt.\n      properties:\n        new_password1:\n          type: string\n          maxLength: 128\n        new_password2:\n          type: string\n          maxLength: 128\n        uid:\n          type: string\n        token:\n          type: string\n      required:\n      - new_password1\n      - new_password2\n      - token\n      - uid\n    PatchedPost:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        author:\n          type: integer\n        title:\n          type: string\n          maxLength: 50\n        body:\n          type: string\n        created_at:\n          type: string\n          format: date-time\n          readOnly: true\n    PatchedUser:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        username:\n          type: string\n          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_\n            only.\n          pattern: ^[\\w.@+-]+$\n          maxLength: 150\n    PatchedUserDetails:\n      type: object\n      description: User model w/o password\n      properties:\n        pk:\n          type: integer\n          readOnly: true\n          title: ID\n        username:\n          type: string\n          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_\n            only.\n          pattern: ^[\\w.@+-]+$\n          maxLength: 150\n        email:\n          type: string\n          format: email\n          readOnly: true\n          title: Email address\n        first_name:\n          type: string\n          maxLength: 150\n        last_name:\n          type: string\n          maxLength: 150\n    Post:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        author:\n          type: integer\n        title:\n          type: string\n          maxLength: 50\n        body:\n          type: string\n        created_at:\n          type: string\n          format: date-time\n          readOnly: true\n      required:\n      - author\n      - body\n      - created_at\n      - id\n      - title\n    Register:\n      type: object\n      properties:\n        username:\n          type: string\n          maxLength: 150\n          minLength: 1\n        email:\n          type: string\n          format: email\n        password1:\n          type: string\n          writeOnly: true\n        password2:\n          type: string\n          writeOnly: true\n      required:\n      - password1\n      - password2\n      - username\n    ResendEmailVerification:\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n    RestAuthDetail:\n      type: object\n      properties:\n        detail:\n          type: string\n          readOnly: true\n      required:\n      - detail\n    Token:\n      type: object\n      description: Serializer for Token model.\n      properties:\n        key:\n          type: string\n          maxLength: 40\n      required:\n      - key\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        username:\n          type: string\n          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_\n            only.\n          pattern: ^[\\w.@+-]+$\n          maxLength: 150\n      required:\n      - id\n      - username\n    UserDetails:\n      type: object\n      description: User model w/o password\n      properties:\n        pk:\n          type: integer\n          readOnly: true\n          title: ID\n        username:\n          type: string\n          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_\n            only.\n          pattern: ^[\\w.@+-]+$\n          maxLength: 150\n        email:\n          type: string\n          format: email\n          readOnly: true\n          title: Email address\n        first_name:\n          type: string\n          maxLength: 150\n        last_name:\n          type: string\n          maxLength: 150\n      required:\n      - email\n      - pk\n      - username\n    VerifyEmail:\n      type: object\n      properties:\n        key:\n          type: string\n      required:\n      - key\n  securitySchemes:\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: sessionid\n    tokenAuth:\n      type: apiKey\n      in: header\n      name: Authorization\n      description: Token-based authentication with required prefix \"Token\"\n",
			"canonicalURL": "/github.com/wsvincent/restapiswithdjango@4a12e5289beeb00308f2d8ceefa343666fa11c05/-/blob/ch10-blog-schemas-docs/schema.yml",
			"externalURLs": [
				{
					"url": "https://github.com/wsvincent/restapiswithdjango/blob/4a12e5289beeb00308f2d8ceefa343666fa11c05/ch10-blog-schemas-docs/schema.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/v1/\": get: security: security \"cookieAuth\" (index 0): cookie security not implemented",
	"NotImplemented": [
		"cookie security"
	]
}