{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/irods/irods_client_rest_cpp"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "swagger.yaml",
			"byteSize": 9743,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: iRODS REST API\n  description: This is the iRODS REST API\n  version: 0.1.0\n  contact:\n    email: info@irods.org\n  license:\n    name: BSD 3-Clause\n    url: https://opensource.org/licenses/BSD-3-Clause\n\nservers:\n  - url: /v1\n\nsecurity:\n  - BearerAuth:\n      - read\n      - write\n  - BasicAuth:\n      - read\n      - write\n  - ApiKeyAuth: []\n\ntags:\n  - name: auth\n    description: Authentication endpoint\n  - name: rodsadmin\n    description: Secured Admin-only calls\n  - name: rodsuser\n    description: Operations available to regular users\n\npaths:\n  /access:\n    post:\n      tags:\n        - auth\n        - rodsuser\n      summary:\n        obtain an access token and url for a given object\n      operationId: access\n      description:\n        obtain an access token and url for a given object\n      parameters:\n        - in: query\n          name: path\n          description: irods absolute logical path of the object\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: token acquired\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: access token and url to use in subsequent operations\n        '401':\n          description: token acquisition failed\n\n  /admin:\n    get:\n      tags:\n        - rodsadmin\n      summary: Administration interface for changes to zone configuration\n      description: |\n        Interface for zone administration including modification of users, resources, and\n        zone federation.\n      operationId: admin\n      parameters:\n        - in: query\n          name: action\n          description: dictates the action taken - add, modify, or remove\n          required: true\n          schema:\n            type: string\n        - name: target\n          in: query\n          description: the subject of the action - user, zone, resource, childtoresc, childfromresc, token, group, rebalance, unusedAVUs, specificQuery\n          required: true\n          schema:\n            type: string\n        - name: arg2\n          in: query\n          description: generic argument, could be user name, resource name, etc.\n          required: true\n          schema:\n            type: string\n        - name: arg3\n          in: query\n          description: generic argument\n          required: true\n          schema:\n            type: string\n        - name: arg4\n          in: query\n          description: generic argument\n          required: true\n          schema:\n            type: string\n        - name: arg5\n          in: query\n          description: generic argument\n          required: true\n          schema:\n            type: string\n        - name: arg6\n          in: query\n          description: generic argument\n          required: true\n          schema:\n            type: string\n        - name: arg7\n          in: query\n          description: generic argument\n          required: true\n          schema:\n            type: string\n\n      responses:\n        200:\n          description: OK\n        400:\n          description: bad input parameter\n\n  /list:\n    get:\n      tags:\n        - rodsuser\n      summary: Recursively list the contents of a logical collection\n      description: |\n        Recursively list the contents of a logical collection\n      operationId: list\n      parameters:\n        - name: path\n          in: query\n          description: irods absolute logical path of the collection\n          required: true\n          schema:\n            type: string\n        - name: stat\n          in: query\n          description: flag to include status information\n          schema:\n            type: boolean\n        - name: permissions\n          in: query\n          description: flag to include permission information\n          schema:\n            type: boolean\n        - name: metadata\n          in: query\n          description: flag to include metadata information\n          schema:\n            type: boolean\n        - name: offset\n          in: query\n          description: number of records to skip for pagination\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n        - name: limit\n          in: query\n          description: maximum number of records to return\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n      security:\n        - BasicAuth: [read]\n        - ApiKeyAuth: [read]\n        - BearerAuth: [read]\n\n      responses:\n        '200':\n          description: listing of logical collection\n          content:\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: bad input parameter\n        '404':\n          description: data not found/no access\n\n  /stream:\n    get:\n      tags:\n        - rodsuser\n      summary: Obtains an HTTP stream of file bytes\n      description: |\n        Obtains an HTTP stream of file bytes\n      operationId: stream\n      parameters:\n        - name: path\n          in: query\n          description: absolute logical path of the data object\n          required: true\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: number of bytes to skip for pagination\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n        - name: limit\n          in: query\n          description: maximum number of bytes to return\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n      security:\n        - BasicAuth: [read]\n        - ApiKeyAuth: [read]\n        - BearerAuth: [read]\n\n      responses:\n        '200':\n          description: bytestream of the (partial) data object\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        '400':\n          description: bad input parameter\n        '404':\n          description: data not found/no access\n\n    put:\n      tags:\n        - rodsuser\n      summary: Sends an HTTP stream of file bytes\n      description: |\n        Sends an HTTP stream of file bytes\n      operationId: stream_put\n      parameters:\n        - in: query\n          name: path\n          description: absolute logical path of the data object\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: offset\n          description: number of bytes to skip for pagination\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n        - in: query\n          name: limit\n          description: maximum number of bytes to return\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n      security:\n        - BasicAuth: [read]\n        - ApiKeyAuth: [read]\n        - BearerAuth: [read]\n\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: bad input parameter\n        '404':\n          description: data not found/no access\n\n  /query:\n    get:\n      tags:\n        - rodsuser\n      summary: searches iRODS Catalog using the General Query Language\n      description: |\n        By passing in the appropriate options, you can search for\n        anything within the iRODS Catalog\n      operationId: catalogQuery\n      parameters:\n      - name: query_string\n        in: query\n        description: an iRODS general query string or iRODS specific query string or iRODS specific query alias\n        required: true\n        schema:\n          type: string\n      - name: query_limit\n        in: query\n        description: maximum number of records to return\n        required: false\n        schema:\n          type: integer\n          maximum: 50\n          minimum: 0\n          format: string\n      - name: row_offset\n        in: query\n        description: number of records to skip for pagination\n        required: false\n        schema:\n          type: integer\n          minimum: 0\n          format: string\n      - name: query_type\n        in: query\n        description: which type of query to perform\n        required: true\n        schema:\n          type: string\n          enum: ['general', 'specific']\n\n      responses:\n        200:\n          description: search results matching criteria\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/query_results'\n\n        400:\n          description: bad input parameter\n\n  /zone_report:\n    get:\n      tags:\n        - rodsadmin\n      summary: produces a json description of an iRODS Zone\n      description: |\n        Produces an iRODS Zone Report, a json description of the entire\n        zone, including all configuration.  This API is for administrators\n        only.\n      operationId: zone_report\n\n      responses:\n        200:\n          description: json description of an iRODS Zone\n          content:\n            application/json:\n              schema:\n                type: string\n                description: json representation of irods zone\n        400:\n          description: bad input parameter\n\ncomponents:\n  securitySchemes:\n\n    BasicAuth:\n      type: http\n      scheme: basic\n\n    ApiKeyAuth:        # arbitrary name for the security scheme\n      type: apiKey\n      in: header       # can be \"header\", \"query\" or \"cookie\"\n      name: X-API-KEY  # name of the header, query parameter or cookie\n\n    BearerAuth:\n        type: http\n        scheme: bearer\n        bearerFormat: JWT\n\n  schemas:\n    query_results:\n      type: object\n      properties:\n        results:\n          type: string\n          example: { \"results\" : [ [], [] ] }\n      required:\n        - results\n",
			"canonicalURL": "/github.com/irods/irods_client_rest_cpp@bd5393556f20533e44c338b6f47b95077a12b3c5/-/blob/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/irods/irods_client_rest_cpp/blob/bd5393556f20533e44c338b6f47b95077a12b3c5/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/access\": post: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}