{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mu-box/core"
		},
		"file": {
			"name": "logvac-log-aggregation-api.yaml",
			"size": 0,
			"path": "docs/servers/logvac-log-aggregation-api.yaml",
			"byteSize": 4895,
			"content": "openapi: 3.0.0\n# Added by API Auto Mocking Plugin\nservers:\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/danhunsaker/logvac-log-aggregation/1.0.0\n  - description: Individual application server\n    url: https://{host}:6360\n    variables:\n      host:\n        default: ''\n        description: The host IP of the server\ninfo:\n  version: '1.0.0'\n  title: 'LogVac Logging API'\n  description: 'The API spec for the LogVac log aggregation component.'\npaths:\n  /logs:\n    get:\n      summary: List all logs\n      tags: [logs]\n      parameters:\n        - name: id\n          in: query\n          schema:\n            type: string\n        - name: tag\n          in: query\n          schema:\n            type: string\n        - name: type\n          in: query\n          schema:\n            type: string\n        - name: start\n          in: query\n          schema:\n            type: number\n        - name: end\n          in: query\n          schema:\n            type: number\n        - name: level\n          in: query\n          schema:\n            type: string\n        - name: limit\n          in: query\n          schema:\n            type: integer\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Log'\n    post:\n      summary: Post a log\n      tags: [logs]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Log'\n      responses:\n        200:\n          description: ''\n  '/add-token':\n    get:\n      summary: Add a log read/write token\n      tags: [tokens]\n      security: [User: [], Auth: []]\n      responses:\n        200:\n          description: ''\n  '/remove-token':\n    get:\n      summary: Remove a log read/write token\n      tags: [tokens]\n      security: [User: [], Auth: []]\n      responses:\n        200:\n          description: ''\n  /drains:\n    get:\n      summary: List Drains\n      responses:\n        200:\n          description: ''\n    post:\n      summary: Add a Drain\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Drain'\n      responses:\n        200:\n          description: ''\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: |\n                  success!\n  /drains/{type}:\n    parameters:\n      - name: type\n        in: path\n        schema:\n          type: string\n        description: The type of Drain to operate on\n        required: true\n    put:\n      summary: Replace a Drain\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Drain'\n      responses:\n        200:\n          description: ''\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: |\n                  success!\n    delete:\n      summary: Remove a Drain\n      responses:\n        200:\n          description: ''\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: |\n                  success!\ncomponents:\n  schemas:\n    Log:\n      type: object\n      properties:\n        time:\n          type: string\n          description: Timestamp of log (time.Now() on post)\n        id:\n          type: string\n          description: Id or hostname of sender\n        tag:\n          type: string\n          description: Tag for log\n        type:\n          type: string\n          description: Log type (commonly 'app' or 'deploy'. default value configured via log-type)\n        priority:\n          type: integer\n          description: Severity of log (0(trace)-5(fatal))\n        message:\n          type: string\n          description: Log data\n      required:\n        - message\n      example:\n        id: my-app\n        tag: build-1234\n        type: deploy\n        priority: 4\n        message: |-\n          $ mv nanobox/.htaccess .htaccess\n          [âœ“] SUCCESS\n    Drain:\n      type: object\n      properties:\n        type:\n          type: string\n          description: Type of service (\"papertrail\", \"datadog\")\n        endpoint:\n          type: string\n          description: URI of endpoint\n        id:\n          type: string\n          description: ID to identify this app with external logger\n        key:\n          type: string\n          description: Key or user for authentication\n        secret:\n          type: string\n          description: Password or secret for authentication\n  securitySchemes:\n    User:\n      type: apiKey\n      in: header\n      name: X-User-Token\n    Auth:\n      type: apiKey\n      in: header\n      name: X-Auth-Token\nsecurity:\n  - User: []\n",
			"canonicalURL": "/github.com/mu-box/core@a66c79bb43fe850bcd6c1ede58051555e1736204/-/blob/docs/servers/logvac-log-aggregation-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mu-box/core/blob/a66c79bb43fe850bcd6c1ede58051555e1736204/docs/servers/logvac-log-aggregation-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/drains/{type}\": put: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}