{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/authpass/authpass-cloud"
		},
		"file": {
			"name": "authpass_cloud.openapi.yaml",
			"size": 0,
			"path": "packages/authpass_cloud_shared/lib/src/api/authpass_cloud.openapi.yaml",
			"byteSize": 24567,
			"content": "openapi: 3.0.0\ninfo:\n  title: AuthPass\n  description: Never mind.\n  version: 1.0.0\n  x-dart-name: AuthPassCloud\n  contact:\n    url: 'https://authpass.app/'\n    email: herbert@authpass.app\n    name: Herbert Poul\nservers:\n  - url: https\npaths:\n  /check:\n    get:\n      summary: Health check.\n      security: []\n      responses:\n        '200':\n          description: Everything OK\n      description: Health check of endpoint data\n  /check/status:\n    post:\n      summary: Status Check.\n      parameters:\n        - name: x-secret\n          in: header\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemStatus'\n  /user:\n    get:\n      summary: 'Retrieve info about the currently logged in user and about the token.'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema: { $ref: '#/components/schemas/UserInfo' }\n  /user/register:\n    post:\n      summary: 'Create new user, or login the user using confirmation email.'\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterRequest'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterResponse'\n  /email/status:\n    get:\n      summary: Get the status of the current auth token (whether it was confirmed or not).\n      responses:\n        '200':\n          description: Whether it was confirmed or not.\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    type: string\n                    enum:\n                      - created\n                      - confirmed\n  /email/confirm:\n    get:\n      summary: Confirm email address\n      security: []\n      parameters:\n        - name: token\n          in: query\n          required: true\n          description: Unique token which was sent to email address.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            text/html:\n              schema:\n                type: string\n        '400':\n          description: Invalid token or email address.\n          content:\n            text/html:\n              schema:\n                type: string\n    post:\n      summary: Confirm with recaptcha\n      security: []\n      requestBody:\n        required: true\n        description: ''\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                g-recaptcha-response:\n                  type: string\n              required:\n                - token\n                - g-recaptcha-response\n      responses:\n        '200':\n          description: OK\n          content:\n            text/html:\n              schema:\n                type: string\n        '400':\n          description: Invalid token or email address.\n  /status:\n    get:\n      summary: Get status of the user account.\n      responses:\n        '200':\n          description: Information of the logged in account.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  mail:\n                    type: object\n                    properties:\n                      messagesUnread:\n                        type: integer\n                    required:\n                      - messagesUnread\n                required:\n                  - mail\n  /mailbox:\n    get:\n      summary: List of all mailboxes of the current user.\n      responses:\n        '200':\n          description: On Success returns unpaginated list (right now) of all mailboxes.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Mailbox'\n  /mailbox/create:\n    post:\n      summary: Creates a new (random) email address mailbox.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                label:\n                  type: string\n                  description: 'label for this mailbox, can be an empty string.'\n                entryUuid:\n                  type: string\n                  description: 'Client provided entry uuid to match with password entry, can be an empty string.'\n              required:\n                - label\n                - entryUuid\n      responses:\n        '200':\n          description: Successfully created mailbox.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  address:\n                    type: string\n                    description: The address of the new mailbox.\n  /mailbox/list:\n    get:\n      summary: List all emails in all mailboxes of the current user.\n      responses:\n        '200':\n          description: Successful list\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  page:\n                    $ref: '#/components/schemas/Page'\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/EmailMessage'\n                required:\n                  - page\n                  - data\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: page_token\n          description: Page token as returned by Page\n        - schema:\n            type: string\n          in: query\n          name: since_token\n          description: As returned from a previous page object for a finished sync.\n      description: ''\n  /mail/massupdate:\n    post:\n      description: Apply the given update to all matching mails.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                filter:\n                  type: string\n                  enum:\n                    - messageIds\n                    - all\n                messageIds:\n                  description: 'Only used if filter=messageIds'\n                  type: array\n                  items:\n                    type: string\n                isRead:\n                  type: boolean\n              required:\n                - filter\n      responses:\n        '200':\n          description: Update finished.\n  /mailbox/update/{mailboxAddress}:\n    parameters:\n      - name: mailboxAddress\n        in: path\n        schema:\n          type: string\n        required: true\n    put:\n      operationId: MailboxUpdate\n      summary: 'Update information about mailbox'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                label:\n                  type: string\n                entryUuid:\n                  type: string\n                isDeleted:\n                  type: boolean\n                isDisabled:\n                  type: boolean\n                isHidden:\n                  type: boolean\n      responses:\n        '200':\n          description: 'Success.'\n  /mailbox/message/{messageId}:\n    parameters:\n      - name: messageId\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    get:\n      operationId: MailboxMessageGet\n      summary: 'Fetch raw email message.'\n      responses:\n        '200':\n          description: Raw email message incluuding all headers, body and attachment.\n          content:\n            'text/plain':\n              schema:\n                type: string\n    delete:\n      operationId: MailboxMessageDelete\n      summary: 'Delete the given message.'\n      responses:\n        '200':\n          description: Message was deleted successfully.\n  /mailbox/message/{messageId}/forward:\n    parameters:\n      - name: messageId\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    post:\n      operationId: MailboxMessageForward\n      summary: 'Forward email to users actual email address'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n      responses:\n        '200':\n          description: 'Successfully forwarded message.'\n  /mailbox/message/{messageId}/read:\n    parameters:\n      - name: messageId\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    put:\n      operationId: MailboxMessageMarkRead\n      summary: 'Mark message as read'\n      responses:\n        '200':\n          description: 'Successfully marked as read.'\n    delete:\n      operationId: MailboxMessageMarkUnRead\n      summary: 'Mark message as unread (again)'\n      responses:\n        '200':\n          description: 'Successfully marked as unread.'\n  /email/receive:\n    post:\n      summary: Receive emails throw smtp bridge.\n      parameters:\n        - name: x-authpass-token\n          in: header\n          style: simple\n          schema:\n            type: string\n          required: true\n          description: Security token to validate origin from trusted server\n      security: []\n      requestBody:\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n              description: Email content (header and body)\n      responses:\n        '200':\n          description: Received and delivered successfully.\n        '403':\n          description: Delivery not accepted.\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: 'Email error codes similar to https://tools.ietf.org/html/rfc3463 expected.'\n  /filecloud/file/metadata:\n    post:\n      summary: Retrieve file meta data.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FileId'\n      responses:\n        '200':\n          description: Successful retrieving file metadata.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileInfo'\n\n  /filecloud/file/retrieve:\n    post:\n      summary: Retrieve a previously created file.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FileId'\n      responses:\n        '200':\n          description: 'The requested file'\n          headers:\n            etag:\n              required: true\n              schema:\n                type: string\n          content:\n            application/octet-set:\n              schema:\n                type: string\n                format: binary\n  /filecloud/file/delete:\n    post:\n      summary: Deletes a file with the given fileToken\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FileId'\n      responses:\n        '204':\n          description: 'Successfully deleted the file.'\n\n  /filecloud/file/token/create:\n    post:\n      summary: 'Create file tokens which can be used to share the file.'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required: [fileToken, label]\n              properties:\n                fileToken:\n                  description: 'The fileToken identifying the file to share'\n                  type: string\n                label:\n                  description: 'Some label to help the user remember why they created the token.'\n                  type: string\n                userEmail:\n                  description: 'Email address for the user to create a token. If null, the token will not be bound to a specific user.'\n                  type: string\n                readOnly:\n                  type: boolean\n                  default: false\n      responses:\n        '200':\n          description: 'Successfully created token.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileId'\n  /filecloud/file/token/list:\n    post:\n      summary: 'List all tokens for a given file. Only available for the owner of the file.'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FileId'\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: object\n                required: ['tokens']\n                properties:\n                  tokens:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/FileTokenInfo'\n  /filecloud/file:\n    get:\n      summary: List available files for user\n      responses:\n        '200':\n          description: 'List of files of the user'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileListResponse'\n    post:\n      summary: Create new file\n      parameters:\n        - name: fileName\n          in: header\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '200':\n          description: 'successful file creation.'\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [fileToken, versionToken]\n                properties:\n                  fileToken:\n                    type: string\n                    description: 'Unique token to reference the newly created file.'\n                  versionToken:\n                    type: string\n                    description: 'Token identifieing the version of this file. Must be used for updating the file.'\n    put:\n      summary: Update file\n      parameters:\n        - name: fileToken\n          in: header\n          required: true\n          schema:\n            type: string\n        - name: versionToken\n          in: header\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '200':\n          description: 'Successful file update'\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [versionToken]\n                properties:\n                  versionToken:\n                    type: string\n                    description: 'Token identifieing the version of this file. Must be used for updating the file.'\n        '409':\n          description: 'conflict: versionToken was not the latest version.'\n  /filecloud/attachment:\n    post:\n      summary: Create attachment\n      parameters:\n        - name: fileName\n          in: header\n          required: true\n          schema:\n            type: string\n        - name: fileToken\n          in: header\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '200':\n          description: 'successfully created attachment.'\n          content:\n            application/json:\n              schema:\n                type: object\n                required: [attachmentToken]\n                properties:\n                  attachmentToken:\n                    type: string\n                    description: 'Unique token to reference the newly created file.'\n  /filecloud/attachment/touch:\n    post:\n      summary: Touches an attachment that it is still in use for the given file.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AttachmentTouch'\n      responses:\n        '200':\n          description: 'Successfully touched all attachments.'\n  /filecloud/attachment/unlink:\n    post:\n      summary: Release a attachment - used when an attachment is removed from a file.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AttachmentTouch'\n      responses:\n        '200':\n          description: 'Successfully removed association.'\n  /filecloud/attachment/retrieve:\n    post:\n      summary: Retrieve an attachment.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AttachmentId'\n      responses:\n        '200':\n          description: 'The requested file'\n          headers:\n            etag:\n              required: true\n              schema:\n                type: string\n          content:\n            application/octet-set:\n              schema:\n                type: string\n                format: binary\n  /website/image:\n    get:\n      summary: Load the best image for the given website.\n      parameters:\n        - name: url\n          in: query\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: 'Image'\n          content:\n            image/*:\n              schema:\n                type: string\n                format: binary\n        '404':\n          description: 'No image found for this url.'\ncomponents:\n  schemas:\n    SystemStatus:\n      properties:\n        user: { $ref: '#/components/schemas/SystemStatusUser' }\n        website: { $ref: '#/components/schemas/SystemStatusWebsite' }\n        mailbox: { $ref: '#/components/schemas/SystemStatusMailbox' }\n        fileCloud: { $ref: '#/components/schemas/SystemStatusFileCloud' }\n        queryTime: { type: integer }\n      required: [user, website, mailbox, queryTime, fileCloud]\n    SystemStatusUser:\n      properties:\n        emailConfirmed:\n          type: integer\n        userConfirmed:\n          type: integer\n        emailUnconfirmed:\n          type: integer\n      required: [emailConfirmed, userConfirmed, emailUnconfirmed]\n    SystemStatusWebsite:\n      properties:\n        websiteCount:\n          type: integer\n        urlCanonicalCount:\n          type: integer\n      required: [websiteCount, urlCanonicalCount]\n    SystemStatusMailbox:\n      properties:\n        mailboxCount: { type: integer }\n        messageCount: { type: integer }\n        messageReadCount: { type: integer }\n      required: [mailboxCount, messageCount, messageReadCount]\n    SystemStatusFileCloud:\n      properties:\n        fileCount: { type: integer }\n        fileTotalLength: { type: integer }\n        fileContentCount: { type: integer }\n        attachmentLength: { type: integer }\n        attachmentCount: { type: integer }\n        attachmentUntouchedMonth: { type: integer }\n        countRecentlyAccessed:\n          description: Number of files accessed in the last 24 hours, but are older than 48 hours.\n          type: integer\n        countWeekAccessed:\n          description: Number of files older than 14 days, accessed within the last 7 days.\n          type: integer\n      required: [fileCount, fileContentCount, fileTotalLength, countRecentlyAccessed, countWeekAccessed, attachmentCount, attachmentLength, attachmentUntouchedMonth]\n    UserInfo:\n      required: [emails]\n      properties:\n        emails:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserEmail'\n    UserEmail:\n      properties:\n        address: { type: string }\n        confirmedAt: { type: string, format: date-time }\n      required: [address, confirmedAt]\n    RegisterRequest:\n      properties:\n        email:\n          type: string\n          description: Email address for the current user.\n      required:\n        - email\n    RegisterResponse:\n      properties:\n        userUuid:\n          type: string\n          description: Uuid of the newly registered user.\n        authToken:\n          type: string\n          description: 'Auth token which can be used for authentication, once email is confirmed.'\n        status:\n          type: string\n          description: Status of the user and auth token (created or confirmed).\n          enum:\n            - created\n            - confirmed\n      required:\n        - userUuid\n        - authToken\n        - status\n    Page:\n      title: Page\n      type: object\n      properties:\n        nextPageToken:\n          description: Token for the next page, might be null if there are no more pages.\n          type: string\n        sinceToken:\n          description: Once everything is synced, this token can be used for subsequent syncs.\n          type: string\n    EmailMessage:\n      title: EmailMessage\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        subject:\n          type: string\n        sender:\n          type: string\n        mailboxEntryUuid:\n          type: string\n          format: uuid\n        createdAt:\n          type: string\n          format: date-time\n        size:\n          type: integer\n          description: 'Body size in bytes.'\n        isRead:\n          type: boolean\n          description: true if this mail was marked as read.\n      required:\n        - id\n        - subject\n        - sender\n        - mailboxEntryUuid\n        - createdAt\n        - size\n        - isRead\n    Mailbox:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        address:\n          type: string\n          description: Unique email address (a@example.com)\n        label:\n          type: string\n          description: Label as given during create. (Can be empty string)\n        entryUuid:\n          type: string\n          description: Entry uuid given during create. (Can be empty string)\n        createdAt:\n          type: string\n          format: date-time\n        isDisabled:\n          type: boolean\n      required:\n        - id\n        - address\n        - label\n        - entryUuid\n        - createdAt\n        - isDisabled\n    FileListResponse:\n      type: object\n      required: [files]\n      properties:\n        files:\n          type: array\n          items:\n            $ref: '#/components/schemas/FileInfo'\n    AttachmentId:\n      description: Object wrapping a [attachmentToken].\n      type: object\n      required: [attachmentToken]\n      properties:\n        attachmentToken:\n          type: string\n    AttachmentTouch:\n      type: object\n      required: [file, attachmentTokens]\n      properties:\n        file:\n          $ref: '#/components/schemas/FileId'\n        attachmentTokens:\n          type: array\n          items:\n            type: string\n    FileId:\n      description: Object wrapping a [fileToken].\n      type: object\n      required: [fileToken]\n      properties:\n        fileToken:\n          type: string\n    FileInfo:\n      type: object\n      required: [fileToken, versionToken, name, createdAt, updatedAt, size, readOnly]\n      properties:\n        fileToken:\n          type: string\n        versionToken:\n          type: string\n        name:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        readOnly:\n          type: boolean\n        size:\n          type: integer\n    FileTokenInfo:\n      type: object\n      required: [fileToken, createdAt, label, readOnly]\n      properties:\n        fileToken:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n        label:\n          type: string\n        readOnly:\n          type: boolean\n  securitySchemes:\n    auth_token:\n      type: http\n      scheme: bearer\nsecurity:\n  - auth_token: []\n",
			"canonicalURL": "/github.com/authpass/authpass-cloud@f1453a19ae1581479fbb2da31c12cc971b4a6a44/-/blob/packages/authpass_cloud_shared/lib/src/api/authpass_cloud.openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/authpass/authpass-cloud/blob/f1453a19ae1581479fbb2da31c12cc971b4a6a44/packages/authpass_cloud_shared/lib/src/api/authpass_cloud.openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/email/receive\": post: requestBody: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}