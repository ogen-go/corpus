{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/disit/snap4city"
		},
		"file": {
			"name": "notificator-openapiv3.yaml",
			"size": 0,
			"path": "swagger/internal/notificator-openapiv3.yaml",
			"byteSize": 5814,
			"content": "openapi: 3.0.1\ninfo:\n  title: Notificator API\n  version: 1.0.0\nservers:\n  - url: http://notificator.km4city.org/notificator\npaths:\n  /restInterfaceExternal.php:\n    get:\n      tags: [External]\n      parameters:\n        - name: operation\n          in: query\n          description: The operation to be performed.\n          required: true\n          schema: \n            type: string\n            enum: [getDashboardsList, getDashboardWidgets, getEvents]\n          example: getDashboardsList\n        - name: dashboardTitle\n          in: query\n          description: Titolo della dashboard. Utilizzato come parametro obbligatorio nella richiesta  _getDashboardWidgets_ e come parametro opzionale nella richiesta _getEvents_.\n          schema: \n            type: string\n          example: Web monitoring - Status (mobile)\n        - name: startDate\n          in: query\n          description: Eventi occorsi prima di questo timestamp non verranno restituiti. Utilizzato (opzionalmente) per la sola richiesta _getEvents_.\n          schema: \n            type: string\n            format: date-time\n          example: '2018-04-06 10:27:27'\n        - name: endDate\n          in: query\n          description: Eventi occorsi dopo questo timestamp non verranno restituiti. Utilizzato (opzionalmente) per la sola richiesta _getEvents_.\n          schema:\n            type: string\n            format: date-time\n          example: '2018-04-07 10:27:27'\n        - name: widgetTitle\n          in: query\n          description: Titolo di widget generatore di eventi di interesse. Utilizzato (opzionalmente) per la sola richiesta _getEvents_.\n          schema: \n            type: string\n          example: Disit.org\n      responses:\n        200:\n          description: |\n            * **getDashboardsList** - Elenco dei titoli delle Dashboards contenenti widgets registrati sul Notificatore come generatori di eventi. Per ogni dashboard vengono restituiti titolo ed URL.\n            \n            * **getDashboardWidgets** - Elenco degli widgets (istanze di widget) appartenenti ad una certa dashboard e registrati sul Notificatore come generatori di eventi. \n            \n            * **getEvents** - Un elenco di eventi (istanze di evento, accadimenti) in base ai parametri che gli mandi in ingresso.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - detail\n                  - data\n                properties:\n                  detail:\n                    description: _Ok_ for success, a short description of the error otherwise.\n                    type: string\n                    example: Ok\n                  data:\n                    description: An array where the retrieved data can be found.\n                    oneOf:\n                      - type: array\n                        items:\n                          $ref: '#/components/schemas/dashboard'\n                      - type: array\n                        items:\n                          $ref: '#/components/schemas/widget'\n                      - type: array\n                        items:\n                          $ref: '#/components/schemas/event'\ncomponents:\n  schemas:\n    dashboard:\n      type: object\n      properties:\n        dashboardTitle:\n          type: string\n          example: DataCenter\n        dashboardUrl:\n          type: string\n          example: http://dashboard.km4city.org/dashboardSmartCity/view/index.php?iddasboard=NDI=\n    widget:\n      type: object\n      properties:\n        generatorId:\n          description: Identificativo interno al Notificatore del widget.\n          type: integer\n          format: int32\n          example: 261\n        widgetTitle:\n          description: Titolo del widget.\n          type: string\n          example: Disit.org\n        metricName:\n          description: Nome della metrica mostrata da quel widget.\n          type: string\n          example: Disit_Org_status\n        user:\n          description: Utente che ha creato il widget.\n          type: string\n          example: marazzini\n        eventTypes:\n          description: Un array con l'elenco dei tipi di evento innescati da questo widget.\n          type: array\n          items:\n            type: string\n          example: [\"Value != token found - KO\"]\n    event:\n      type: object\n      properties:\n        id: \n          description: Identificativo interno al Notificatore dell'evento.\n          type: integer\n          format: int32\n          example: 73780\n        eventTime: \n          description: Timestamp dell'evento.\n          type: string\n          format: date-time\n          example: 2018-04-12 17:22:19\n        eventType: \n          description: Tipo di evento (coerente con quanto detto per l'elenco degli widgets generatori di eventi).\n          type: string \n          example: Value \u003e 50 - eccolo\n        appName:\n          description: Applicazione (sar√† sempre \"Dashboard Manager\" nel tuo caso).\n          type: string\n          example: Dashboard Manager\n        appUsr: \n          description: Utente che ha creato il widget.\n          type: string\n          example: marazzini\n        genName: \n          description: Titolo del widget che ha generato l'evento.\n          type: string\n          example: Gas1 (day)\n        genType: \n          description: Nome della metrica mostrata da quel widget.\n          type: string\n          example: DCGas1\n        genContainer: \n          description: Titolo della dashboard contenente quel widget.\n          type: string\n          example: Snap4City - DataCenter gas and smoke (mobile)\n        url: \n          description: Url della dashboard contenente quel widget.\n          type: string\n          format: url\n          example: https://dashboard.km4city.org/view/index.php?iddasboard=MjIw",
			"canonicalURL": "/github.com/disit/snap4city@523488172f08a8e700ea3a777117724aac25eb65/-/blob/swagger/internal/notificator-openapiv3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/disit/snap4city/blob/523488172f08a8e700ea3a777117724aac25eb65/swagger/internal/notificator-openapiv3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/restInterfaceExternal.php\": get: responses: 200: contents: application/json: generate schema: field data: oneOf: oneOf RestInterfaceExternalPhpGetOKData: variant DashboardArray: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"discriminator inference"
	]
}