{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/treeverse/lakeFS"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "docs/assets/js/swagger.yml",
			"byteSize": 92322,
			"content": "openapi: \"3.0.0\"\n\ninfo:\n  description: lakeFS HTTP API\n  title: lakeFS API\n  version: 0.1.0\n\nservers:\n  - url: \"/api/v1\"\n    description: lakeFS server endpoint\nsecurity:\n  - jwt_token: []\n  - basic_auth: []\n  - cookie_auth: []\n  - oidc_auth: []\ncomponents:\n  securitySchemes:\n    basic_auth:\n      type: http\n      scheme: basic\n    jwt_token:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    cookie_auth:\n      type: apiKey\n      in: cookie\n      name: internal_auth_session\n    oidc_auth:\n      type: apiKey\n      in: cookie\n      name: oidc_auth_session\n  parameters:\n    PaginationPrefix:\n      in: query\n      name: prefix\n      description: return items prefixed with this value\n      schema:\n        type: string\n\n    PaginationAfter:\n      in: query\n      name: after\n      description: return items after this value\n      schema:\n        type: string\n\n    PaginationAmount:\n      in: query\n      name: amount\n      description: how many items to return\n      schema:\n        type: integer\n        minimum: -1\n        maximum: 1000\n        default: 100\n\n    PaginationDelimiter:\n      in: query\n      name: delimiter\n      description: delimiter used to group common prefixes by\n      schema:\n        type: string\n\n  responses:\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    ServerError:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    NotFound:\n      description: Resource Not Found\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    Conflict:\n      description: Resource Conflicts With Target\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    PreconditionFailed:\n      description: Precondition Failed\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    ValidationError:\n      description: Validation Error\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n\n  schemas:\n    Pagination:\n      type: object\n      required:\n        - has_more\n        - max_per_page\n        - results\n        - next_offset\n      properties:\n        has_more:\n          type: boolean\n          description: Next page is available\n        next_offset:\n          type: string\n          description: Token used to retrieve the next page\n        results:\n          type: integer\n          minimum: 0\n          description: Number of values found in the results\n        max_per_page:\n          type: integer\n          minimum: 0\n          description: Maximal number of entries per page\n\n    ImportPagination:\n      type: object\n      required:\n        - has_more\n        - last_key\n      properties:\n        has_more:\n          type: boolean\n          description: More keys to be ingested.\n        continuation_token:\n          type: string\n          description: Opaque. Token used to import the next range.\n        last_key:\n          type: string\n          description: Last object store key that was ingested.\n\n    Repository:\n      type: object\n      required:\n        - creation_date\n        - id\n        - default_branch\n        - storage_namespace\n      properties:\n        id:\n          type: string\n        creation_date:\n          type: integer\n          format: int64\n          description: Unix Epoch in seconds\n        default_branch:\n          type: string\n        storage_namespace:\n          type: string\n          description: Filesystem URI to store the underlying data in (e.g. \"s3://my-bucket/some/path/\")\n\n    RepositoryList:\n      type: object\n      required:\n        - pagination\n        - results\n      properties:\n        pagination:\n          $ref: \"#/components/schemas/Pagination\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Repository\"\n\n    MergeResult:\n      type: object\n      required:\n        - summary\n        - reference\n      properties:\n        summary:\n          type: object\n          required:\n            - added\n            - removed\n            - changed\n            - conflict\n          properties:\n            added:\n              type: integer\n            removed:\n              type: integer\n            changed:\n              type: integer\n            conflict:\n              type: integer\n        reference:\n          type: string\n\n    RepositoryCreation:\n      type: object\n      required:\n        - name\n        - storage_namespace\n      properties:\n        name:\n          type: string\n          pattern: \"^[a-z0-9][a-z0-9-]{2,62}$\"\n        storage_namespace:\n          type: string\n          description: 'Filesystem URI to store the underlying data in (e.g. \"s3://my-bucket/some/path/\")'\n          example: \"s3://example-bucket/\"\n          pattern: \"^(s3|gs|https?|mem|local|transient)://.*$\"\n        default_branch:\n          type: string\n          example: \"main\"\n\n    PathList:\n      type: object\n      required:\n        - paths\n      properties:\n        paths:\n          type: array\n          items:\n            type: string\n            description: Object path\n\n\n    ObjectStats:\n      type: object\n      required:\n        - checksum\n        - physical_address\n        - path\n        - path_type\n        - mtime\n      properties:\n        path:\n          type: string\n        path_type:\n          type: string\n          enum: [ common_prefix, object ]\n        physical_address:\n          type: string\n        checksum:\n          type: string\n        size_bytes:\n          type: integer\n          format: int64\n        mtime:\n          type: integer\n          format: int64\n          description: Unix Epoch in seconds\n        metadata:\n          $ref: \"#/components/schemas/ObjectUserMetadata\"\n        content_type:\n          type: string\n          description: Object media type\n\n    ObjectStatsList:\n      type: object\n      required:\n        - pagination\n        - results\n      properties:\n        pagination:\n          $ref: \"#/components/schemas/Pagination\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ObjectStats\"\n\n    ObjectStageCreation:\n      type: object\n      required:\n        - physical_address\n        - checksum\n        - size_bytes\n      properties:\n        physical_address:\n          type: string\n        checksum:\n          type: string\n        size_bytes:\n          type: integer\n          format: int64\n        mtime:\n          type: integer\n          format: int64\n          description: Unix Epoch in seconds\n        metadata:\n          $ref: \"#/components/schemas/ObjectUserMetadata\"\n        content_type:\n          type: string\n          description: Object media type\n\n    ObjectUserMetadata:\n      type: object\n      additionalProperties:\n        type: string\n\n    UnderlyingObjectProperties:\n      type: object\n      properties:\n        storage_class:\n          type: string\n          nullable: true\n    Ref:\n      type: object\n      required:\n        - id\n        - commit_id\n      properties:\n        id:\n          type: string\n        commit_id:\n          type: string\n\n    RefList:\n      type: object\n      required:\n        - pagination\n        - results\n      properties:\n        pagination:\n          $ref: \"#/components/schemas/Pagination\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Ref\"\n\n    Diff:\n      type: object\n      required:\n        - type\n        - path\n        - path_type\n      properties:\n        type:\n          type: string\n          enum: [ added, removed, changed, conflict ]\n        path:\n          type: string\n        path_type:\n          type: string\n          enum: [ common_prefix, object ]\n        size_bytes:\n          type: integer\n          description: represents the size of the added/changed/deleted entry\n          format: int64\n\n    DiffList:\n      type: object\n      required:\n        - pagination\n        - results\n      properties:\n        pagination:\n          $ref: \"#/components/schemas/Pagination\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Diff\"\n\n    ResetCreation:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n          enum: [ object, common_prefix, reset ]\n        path:\n          type: string\n\n    RevertCreation:\n      type: object\n      required:\n        - parent_number\n        - ref\n      properties:\n        ref:\n          type: string\n          description: the commit to revert, given by a ref\n        parent_number:\n          type: integer\n          description: when reverting a merge commit, the parent number (starting from 1) relative to which to perform the revert.\n\n    Commit:\n      type: object\n      required:\n        - id\n        - parents\n        - committer\n        - message\n        - creation_date\n        - meta_range_id\n      properties:\n        id:\n          type: string\n        parents:\n          type: array\n          items:\n            type: string\n        committer:\n          type: string\n        message:\n          type: string\n        creation_date:\n          type: integer\n          format: int64\n          description: Unix Epoch in seconds\n        meta_range_id:\n          type: string\n        metadata:\n          type: object\n          additionalProperties:\n            type: string\n\n    CommitList:\n      type: object\n      required:\n        - pagination\n        - results\n      properties:\n        pagination:\n          $ref: \"#/components/schemas/Pagination\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Commit\"\n\n    CommitCreation:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          type: string\n        metadata:\n          type: object\n          additionalProperties:\n            type: string\n        date:\n          description: set date to override creation date in the commit (Unix Epoch in seconds)\n          type: integer\n          format: int64\n\n    Merge:\n      type: object\n      properties:\n        message:\n          type: string\n        metadata:\n          type: object\n          additionalProperties:\n            type: string\n        strategy:\n          description: In case of a merge conflict, this option will force the merge process to automatically favor changes from the dest branch ('dest-wins') or from the source branch('source-wins'). In case no selection is made, the merge process will fail in case of a conflict\n          type: string\n\n    BranchCreation:\n      type: object\n      required:\n        - name\n        - source\n      properties:\n        name:\n          type: string\n        source:\n          type: string\n\n    TagCreation:\n      type: object\n      required:\n        - id\n        - ref\n      properties:\n        id:\n          type: string\n        ref:\n          type: string\n\n    RefsDump:\n      type: object\n      required:\n        - branches_meta_range_id\n        - tags_meta_range_id\n        - commits_meta_range_id\n      properties:\n        commits_meta_range_id:\n          type: string\n        tags_meta_range_id:\n          type: string\n        branches_meta_range_id:\n          type: string\n\n    StorageURI:\n      description: URI to a path in a storage provider (e.g. \"s3://bucket1/path/to/object\")\n      required:\n        - location\n      type: object\n      properties:\n        location:\n          type: string\n\n    Error:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          description: short message explaining the error\n          type: string\n\n    ObjectError:\n      type: object\n      required:\n        - status_code\n        - message\n      properties:\n        status_code:\n          type: integer\n          description: HTTP status code associated for operation on path\n        message:\n          type: string\n          description: short message explaining status_code\n        path:\n          type: string\n          description: affected path\n\n    ObjectErrorList:\n      type: object\n      required:\n        - errors\n      properties:\n        errors:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ObjectError\"\n\n    User:\n      type: object\n      required:\n        - id\n        - creation_date\n      properties:\n        id:\n          type: string\n        creation_date:\n          type: integer\n          format: int64\n          description: Unix Epoch in seconds\n        friendly_name:\n          type: string\n        email:\n          type: string\n\n    CurrentUser:\n      type: object\n      required:\n        - user\n      properties:\n        user:\n          $ref: \"#/components/schemas/User\"\n\n    ForgotPasswordRequest:\n      type: object\n      required:\n        - email\n      properties:\n        email:\n          type: string\n\n    UserCreation:\n      type: object\n      properties:\n        id:\n          type: string\n        invite_user:\n          type: boolean\n      required:\n        - id\n    SetupState:\n      type: object\n      properties:\n        state:\n          type: string\n          enum: [initialized, not_initialized]\n        oidc_enabled:\n          type: boolean\n    AccessKeyCredentials:\n      type: object\n      properties:\n        # Example values as seen on\n        # https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html\n        access_key_id:\n          description: access key ID to set for user for use in integration testing.\n          example: AKIAIOSFODNN7EXAMPLE\n          type: string\n          minLength: 1\n        secret_access_key:\n          description: secret access key to set for user for use in integration testing.\n          example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n          type: string\n          minLength: 1\n      required:\n        - access_key_id\n        - secret_access_key\n\n    Setup:\n      type: object\n      properties:\n        username:\n          description: an identifier for the user (e.g. jane.doe)\n          type: string\n        key:\n          $ref: \"#/components/schemas/AccessKeyCredentials\"\n      required:\n        - username\n\n      \n    UpdatePasswordByToken:\n      type: object\n      properties:\n        token:\n          description: token used for authentication\n          type: string\n        newPassword:\n          description: new password to update\n          type: string\n        email:\n          description: optional user email to match the token for verification\n          type: string\n      required:\n        - token\n        - newPassword\n\n\n    Credentials:\n      type: object\n      required:\n        - creation_date\n        - access_key_id\n      properties:\n        access_key_id:\n          type: string\n        creation_date:\n          type: integer\n          format: int64\n          description: Unix Epoch in seconds\n\n    CredentialsList:\n      type: object\n      required:\n        - pagination\n        - results\n      properties:\n        pagination:\n          $ref: \"#/components/schemas/Pagination\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Credentials\"\n\n    CredentialsWithSecret:\n      type: object\n      required:\n        - access_key_id\n        - creation_date\n        - secret_access_key\n      properties:\n        access_key_id:\n          type: string\n        secret_access_key:\n          type: string\n        creation_date:\n          type: integer\n          format: int64\n          description: Unix Epoch in seconds\n\n    Group:\n      type: object\n      required:\n        - creation_date\n        - id\n      properties:\n        id:\n          type: string\n        creation_date:\n          type: integer\n          format: int64\n          description: Unix Epoch in seconds\n\n    GroupList:\n      type: object\n      required:\n        - results\n        - pagination\n      properties:\n        pagination:\n          $ref: \"#/components/schemas/Pagination\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Group\"\n\n    AuthCapabilities:\n      type: object\n      properties:\n        invite_user:\n          type: boolean\n        forgot_password:\n          type: boolean\n\n    UserList:\n      type: object\n      required:\n        - pagination\n        - results\n      properties:\n        pagination:\n          $ref: \"#/components/schemas/Pagination\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/User\"\n\n    LoginInformation:\n      type: object\n      required:\n        - access_key_id\n        - secret_access_key\n      properties:\n        access_key_id:\n          type: string\n        secret_access_key:\n          type: string\n\n    AuthenticationToken:\n      type: object\n      required:\n        - token\n      properties:\n        token:\n          description: a JWT token that could be used to authenticate requests\n          type: string\n\n    GroupCreation:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n\n    Statement:\n      type: object\n      required:\n        - effect\n        - resource\n        - action\n      properties:\n        effect:\n          type: string\n          enum: [ allow, deny ]\n        resource:\n          type: string\n        action:\n          type: array\n          items:\n            type: string\n          minItems: 1\n\n    Policy:\n      type: object\n      required:\n        - id\n        - statement\n      properties:\n        id:\n          type: string\n        creation_date:\n          type: integer\n          format: int64\n          description: Unix Epoch in seconds\n        statement:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Statement\"\n          minItems: 1\n\n    PolicyList:\n      type: object\n      required:\n        - pagination\n        - results\n      properties:\n        pagination:\n          $ref: \"#/components/schemas/Pagination\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Policy\"\n\n    StorageConfig:\n      type: object\n      required:\n        - blockstore_type\n        - blockstore_namespace_example\n        - blockstore_namespace_ValidityRegex\n      properties:\n        blockstore_type:\n          type: string\n        blockstore_namespace_example:\n          type: string\n        blockstore_namespace_ValidityRegex:\n          type: string\n        default_namespace_prefix:\n          type: string\n    VersionConfig:\n      type: object\n      properties:\n        version:\n          type: string\n        upgrade_recommended:\n          type: boolean\n        upgrade_url:\n          type: string\n\n    ActionRun:\n      type: object\n      required:\n        - run_id\n        - branch\n        - start_time\n        - commit_id\n        - event_type\n        - status\n      properties:\n        run_id:\n          type: string\n        branch:\n          type: string\n        start_time:\n          type: string\n          format: date-time\n        end_time:\n          type: string\n          format: date-time\n        event_type:\n          type: string\n          enum: [ pre_commit, pre_merge ]\n        status:\n          type: string\n          enum: [ failed, completed ]\n        commit_id:\n          type: string\n\n    ActionRunList:\n      type: object\n      required:\n        - pagination\n        - results\n      properties:\n        pagination:\n          $ref: \"#/components/schemas/Pagination\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ActionRun\"\n\n    HookRun:\n      type: object\n      required:\n        - hook_run_id\n        - action\n        - hook_id\n        - start_time\n        - status\n      properties:\n        hook_run_id:\n          type: string\n        action:\n          type: string\n        hook_id:\n          type: string\n        start_time:\n          type: string\n          format: date-time\n        end_time:\n          type: string\n          format: date-time\n        status:\n          type: string\n          enum: [ failed, completed ]\n\n    HookRunList:\n      type: object\n      required:\n        - pagination\n        - results\n      properties:\n        pagination:\n          $ref: \"#/components/schemas/Pagination\"\n        results:\n          type: array\n          items:\n            $ref: \"#/components/schemas/HookRun\"\n\n    StagingLocation:\n      type: object\n      description: location for placing an object when staging it\n      required:\n        - token\n      properties:\n        physical_address:\n          type: string\n        token:\n          type: string\n          description: opaque staging token to use to link uploaded object\n\n    StagingMetadata:\n      type: object\n      description: information about uploaded object\n      properties:\n        staging:\n          $ref: \"#/components/schemas/StagingLocation\"\n        checksum:\n          type: string\n          description: unique identifier of object content on backing store (typically ETag)\n        size_bytes:\n          type: integer\n          format: int64\n        user_metadata:\n          type: object\n          additionalProperties:\n            type: string\n        content_type:\n          type: string\n          description: Object media type\n      required:\n        - staging\n        - checksum\n        - size_bytes\n\n    GarbageCollectionPrepareRequest:\n      type: object\n      properties:\n        previous_run_id:\n          type: string\n          description: run id of a previous successful GC job\n          example: 64eaa103-d726-4a33-bcb8-7c0b4abfe09e\n\n    GarbageCollectionPrepareResponse:\n      type: object\n      properties:\n        run_id:\n          type: string\n          description: a unique identifier generated for this GC job\n          example: 64eaa103-d726-4a33-bcb8-7c0b4abfe09e\n        gc_commits_location:\n          type: string\n          description: location of the resulting commits csv table (partitioned by run_id)\n          example: s3://my-storage-namespace/_lakefs/retention/commits\n        gc_addresses_location:\n          type: string\n          description: location to use for expired addresses parquet table (partitioned by run_id)\n          example: s3://my-storage-namespace/_lakefs/retention/addresses\n      required:\n        - run_id\n        - gc_commits_location\n        - gc_addresses_location\n\n    GarbageCollectionRule:\n      type: object\n      properties:\n        branch_id:\n          type: string\n        retention_days:\n          type: integer\n      required:\n        - branch_id\n        - retention_days\n\n    GarbageCollectionRules:\n      type: object\n      properties:\n        default_retention_days:\n          type: integer\n        branches:\n          type: array\n          items:\n            $ref: '#/components/schemas/GarbageCollectionRule'\n      required:\n        - default_retention_days\n        - branches\n\n    BranchProtectionRule:\n      type: object\n      properties:\n        pattern:\n          type: string\n          description: fnmatch pattern for the branch name, supporting * and ? wildcards\n          example: \"stable_*\"\n          minLength: 1\n      required:\n        - pattern\n\n    StageRangeCreation:\n      type: object\n      required:\n        - fromSourceURI\n        - after\n        - prepend\n      properties:\n        fromSourceURI:\n          type: string\n          description: The source location of the ingested files. Must match the lakeFS installation blockstore type.\n          example: s3://my-bucket/production/collections/\n        after:\n          type: string\n          description: Only objects after this key would be ingested.\n          example: production/collections/some/file.parquet\n        prepend:\n          type: string\n          description: A prefix to prepend to ingested objects.\n          example: collections/\n        continuation_token:\n          type: string\n          description: Opaque. Client should pass the continuation_token received from server to continue creation ranges from the same key.\n\n    RangeMetadata:\n      type: object\n      required:\n         - id\n         - min_key\n         - max_key\n         - count\n         - estimated_size\n      properties:\n        id:\n          type: string\n          description: ID of the range.\n          example: 480e19972a6fbe98ab8e81ae5efdfd1a29037587e91244e87abd4adefffdb01c\n        min_key:\n          type: string\n          description: First key in the range.\n          example: production/collections/some/file_1.parquet\n        max_key:\n          type: string\n          description: Last key in the range.\n          example: production/collections/some/file_8229.parquet\n        count:\n          type: integer\n          description: Number of records in the range.\n        estimated_size:\n          type: integer\n          description: Estimated size of the range in bytes\n\n    IngestRangeCreationResponse:\n      type: object\n      properties:\n        range:\n          $ref: '#/components/schemas/RangeMetadata'\n        pagination:\n          $ref: '#/components/schemas/ImportPagination'\n\n    MetaRangeCreation:\n      type: object\n      properties:\n        ranges:\n          type: array\n          items:\n            $ref: '#/components/schemas/RangeMetadata'\n          minItems: 1\n      required:\n        - ranges\n\n    MetaRangeCreationResponse:\n      type: object\n      properties:\n        id:\n          description: The id of the created metarange\n          type: string\n\npaths:\n  /setup_lakefs:\n    get:\n      tags:\n        - config\n      operationId: getSetupState\n      summary: check if the lakeFS installation is already set up\n      security: []\n      responses:\n        200:\n          description: lakeFS setup state\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SetupState\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    post:\n      tags:\n        - config\n      operationId: setup\n      summary: setup lakeFS and create a first user\n      security: [ ]\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Setup\"\n      responses:\n        200:\n          description: user created successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CredentialsWithSecret\"\n        400:\n          description: bad request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        409:\n          description: setup was already called\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /user:\n    get:\n      tags:\n        - auth\n      operationId: getCurrentUser\n      summary: get current user\n      responses:\n        200:\n          description: user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CurrentUser\"\n\n  /oidc/callback:\n    get:\n      tags:\n        - auth\n      operationId: oauthCallback\n      security: []\n      responses:\n        302:\n          description: successfully got token\n        401:\n          description: failed to exchange authorization code for token\n        default:\n          $ref: \"#/components/responses/ServerError\"\n  /auth/login:\n    post:\n      tags:\n        - auth\n      operationId: login\n      summary: perform a login\n      security: []  # No authentication\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LoginInformation\"\n      responses:\n        200:\n          description: successful login\n          headers:\n            Set-Cookie:\n              schema:\n                type: string\n                example: \"access_token=abcde12356; Path=/; HttpOnly\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthenticationToken\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/logout:\n    post:\n      tags:\n        - auth\n      operationId: logout\n      summary: logs out a cookie-authenticated user\n      security:\n        - cookie_auth: []\n      responses:\n        200:\n          description: successful logout\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/password:\n      post:\n        tags:\n          - auth\n        operationId: updatePassword\n        summary: Update user password by reset_password token\n        security:\n          - cookie_auth: []\n        requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UpdatePasswordByToken\"\n        responses:\n          201:\n            description: successful reset\n          401:\n            $ref: \"#/components/responses/Unauthorized\"\n          default:\n            $ref: \"#/components/responses/ServerError\"\n \n  /auth/password/forgot:\n      post:\n        tags:\n          - auth\n        operationId: forgotPassword\n        summary: forgot password request initiates the password reset process\n        security: []\n        requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForgotPasswordRequest\"\n        responses:\n          204:\n            description: No content\n          400:\n            description: bad request\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/Error\"\n          default:\n            $ref: \"#/components/responses/ServerError\"\n\n  /auth/capabilities:\n    get:\n      tags:\n        - auth\n      operationId: getAuthCapabilities\n      summary: list authentication capabilities supported\n      security: []\n      responses:\n        200:\n          description: auth capabilities\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthCapabilities\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/users:\n    get:\n      tags:\n        - auth\n      operationId: listUsers\n      summary: list users\n      parameters:\n        - $ref: \"#/components/parameters/PaginationPrefix\"\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n      responses:\n        200:\n          description: user list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    post:\n      tags:\n        - auth\n      operationId: createUser\n      summary: create user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserCreation\"\n      responses:\n        201:\n          description: user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        400:\n          description: validation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/users/{userId}:\n    parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - auth\n      operationId: getUser\n      summary: get user\n      responses:\n        200:\n          description: user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      tags:\n        - auth\n      operationId: deleteUser\n      summary: delete user\n      responses:\n        204:\n          description: user deleted successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/groups:\n    get:\n      tags:\n        - auth\n      operationId: listGroups\n      summary: list groups\n      parameters:\n        - $ref: \"#/components/parameters/PaginationPrefix\"\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n      responses:\n        200:\n          description: group list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GroupList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    post:\n      tags:\n        - auth\n      operationId: createGroup\n      summary: create group\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GroupCreation\"\n      responses:\n        201:\n          description: group\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/groups/{groupId}:\n    parameters:\n      - in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - auth\n      operationId: getGroup\n      summary: get group\n      responses:\n        200:\n          description: group\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      tags:\n        - auth\n      operationId: deleteGroup\n      summary: delete group\n      responses:\n        204:\n          description: group deleted successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/policies:\n    get:\n      tags:\n        - auth\n      operationId: listPolicies\n      summary: list policies\n      parameters:\n        - $ref: \"#/components/parameters/PaginationPrefix\"\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n      responses:\n        200:\n          description: policy list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PolicyList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    post:\n      tags:\n        - auth\n      operationId: createPolicy\n      summary: create policy\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Policy\"\n      responses:\n        201:\n          description: policy\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Policy\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        400:\n          $ref: \"#/components/responses/ValidationError\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/policies/{policyId}:\n    parameters:\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - auth\n      operationId: getPolicy\n      summary: get policy\n      responses:\n        200:\n          description: policy\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Policy\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    put:\n      tags:\n        - auth\n      operationId: updatePolicy\n      summary: update policy\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Policy\"\n      responses:\n        200:\n          description: policy\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Policy\"\n        400:\n          $ref: \"#/components/responses/ValidationError\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      tags:\n        - auth\n      operationId: deletePolicy\n      summary: delete policy\n      responses:\n        204:\n          description: policy deleted successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/groups/{groupId}/members:\n    parameters:\n      - in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - auth\n      operationId: listGroupMembers\n      summary: list group members\n      parameters:\n        - $ref: \"#/components/parameters/PaginationPrefix\"\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n      responses:\n        200:\n          description: group memeber list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/groups/{groupId}/members/{userId}:\n    parameters:\n      - in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n    put:\n      tags:\n        - auth\n      operationId: addGroupMembership\n      summary: add group membership\n      responses:\n        201:\n          description: membership added successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n    delete:\n      tags:\n        - auth\n      operationId: deleteGroupMembership\n      summary: delete group membership\n      responses:\n        204:\n          description: membership deleted successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/users/{userId}/credentials:\n    parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/parameters/PaginationPrefix\"\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n      operationId: listUserCredentials\n      summary: list user credentials\n      responses:\n        200:\n          description: credential list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CredentialsList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n    post:\n      tags:\n        - auth\n      operationId: createCredentials\n      summary: create credentials\n      responses:\n        201:\n          description: credentials\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CredentialsWithSecret\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/users/{userId}/credentials/{accessKeyId}:\n    parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: accessKeyId\n        required: true\n        schema:\n          type: string\n    delete:\n      tags:\n        - auth\n      operationId: deleteCredentials\n      summary: delete credentials\n      responses:\n        204:\n          description: credentials deleted successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n    get:\n      tags:\n        - auth\n      operationId: getCredentials\n      summary: get credentials\n      responses:\n        200:\n          description: credentials\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Credentials\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/users/{userId}/groups:\n    parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/parameters/PaginationPrefix\"\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n      operationId: listUserGroups\n      summary: list user groups\n      responses:\n        200:\n          description: group list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GroupList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/users/{userId}/policies:\n    parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/parameters/PaginationPrefix\"\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n        - in: query\n          name: effective\n          schema:\n            type: boolean\n            default: false\n          description: will return all distinct policies attached to the user or any of its groups\n      operationId: listUserPolicies\n      summary: list user policies\n      responses:\n        200:\n          description: policy list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PolicyList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/users/{userId}/policies/{policyId}:\n    parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n    put:\n      tags:\n        - auth\n      operationId: attachPolicyToUser\n      summary: attach policy to user\n      responses:\n        201:\n          description: policy attached successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      tags:\n        - auth\n      operationId: detachPolicyFromUser\n      summary: detach policy from user\n      responses:\n        204:\n          description: policy detached successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/groups/{groupId}/policies:\n    parameters:\n      - in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/parameters/PaginationPrefix\"\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n      operationId: listGroupPolicies\n      summary: list group policies\n      responses:\n        200:\n          description: policy list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PolicyList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /auth/groups/{groupId}/policies/{policyId}:\n    parameters:\n      - in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n    put:\n      tags:\n        - auth\n      operationId: attachPolicyToGroup\n      summary: attach policy to group\n      responses:\n        201:\n          description: policy attached successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n    delete:\n      tags:\n        - auth\n      operationId: detachPolicyFromGroup\n      summary: detach policy from group\n      responses:\n        204:\n          description: policy detached successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories:\n    get:\n      tags:\n        - repositories\n      parameters:\n        - $ref: \"#/components/parameters/PaginationPrefix\"\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n      operationId: listRepositories\n      summary: list repositories\n      responses:\n        200:\n          description: repository list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RepositoryList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    post:\n      tags:\n        - repositories\n      operationId: createRepository\n      summary: create repository\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RepositoryCreation\"\n      parameters:\n        - in: query\n          name: bare\n          schema:\n            type: boolean\n            default: false\n          description: If true, create a bare repository with no initial commit and branch\n      responses:\n        201:\n          description: repository\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Repository\"\n        400:\n          $ref: \"#/components/responses/ValidationError\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        409:\n          $ref: \"#/components/responses/Conflict\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - repositories\n      operationId: getRepository\n      summary: get repository\n      responses:\n        200:\n          description: repository\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Repository\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      tags:\n        - repositories\n      operationId: deleteRepository\n      summary: delete repository\n      responses:\n        204:\n          description: repository deleted successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/refs/dump:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n    put:\n      tags:\n        - refs\n      operationId: dumpRefs\n      summary: Dump repository refs (tags, commits, branches) to object store\n      responses:\n        201:\n          description: refs dump\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RefsDump\"\n        400:\n          $ref: \"#/components/responses/ValidationError\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/refs/restore:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n    put:\n      tags:\n        - refs\n      operationId: restoreRefs\n      summary: Restore repository refs (tags, commits, branches) from object store\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RefsDump\"\n      responses:\n        200:\n          description: refs successfully loaded\n        400:\n          $ref: \"#/components/responses/ValidationError\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/tags:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - tags\n      operationId: listTags\n      summary: list tags\n      parameters:\n        - $ref: \"#/components/parameters/PaginationPrefix\"\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n      responses:\n        200:\n          description: tag list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RefList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n    post:\n      tags:\n        - tags\n      operationId: createTag\n      summary: create tag\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TagCreation\"\n      responses:\n        201:\n          description: tag\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Ref\"\n        400:\n          $ref: \"#/components/responses/ValidationError\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        409:\n          $ref: \"#/components/responses/Conflict\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/tags/{tag}:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: tag\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - tags\n      operationId: getTag\n      summary: get tag\n      responses:\n        200:\n          description: tag\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Ref\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      tags:\n        - tags\n      operationId: deleteTag\n      summary: delete tag\n      responses:\n        204:\n          description: tag deleted successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/branches:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - branches\n      operationId: listBranches\n      summary: list branches\n      parameters:\n        - $ref: \"#/components/parameters/PaginationPrefix\"\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n      responses:\n        200:\n          description: branch list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RefList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    post:\n      tags:\n        - branches\n      operationId: createBranch\n      summary: create branch\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BranchCreation\"\n      responses:\n        201:\n          description: reference\n          content:\n            text/html:\n              schema:\n                type: string\n        400:\n          $ref: \"#/components/responses/ValidationError\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        409:\n          $ref: \"#/components/responses/Conflict\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/refs/{ref}/commits:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: ref\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - refs\n      operationId: logCommits\n      summary: get commit log from ref. If both objects and prefixes are empty, return all commits.\n      parameters:\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n        - in: query\n          name: objects\n          description: list of paths, each element is a path of a specific object\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: prefixes\n          description: list of paths, each element is a path of a prefix\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: commit log\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CommitList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/branches/{branch}/commits:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n    get:\n      deprecated: true\n      tags:\n        - commits\n      operationId: logBranchCommits\n      summary: |\n        get commit log from branch.\n        Deprecated: replaced by logCommits by passing branch name as ref\n      parameters:\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n      responses:\n        200:\n          description: commit log\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CommitList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    post:\n      parameters:\n        - in: query\n          name: source_metarange\n          required: false\n          description: The source metarange to commit. Branch must not have uncommitted changes.\n          schema:\n            type: string\n      tags:\n        - commits\n      operationId: commit\n      summary: create commit\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CommitCreation\"\n      responses:\n        201:\n          description: commit\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Commit\"\n        400:\n          $ref: \"#/components/responses/ValidationError\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n        412:\n          description: Precondition Failed (e.g. a pre-commit hook returned a failure)\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /repositories/{repository}/branches/{branch}:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - branches\n      operationId: getBranch\n      summary: get branch\n      responses:\n        200:\n          description: branch\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Ref\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      tags:\n        - branches\n      operationId: deleteBranch\n      summary: delete branch\n      responses:\n        204:\n          description: branch deleted successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    put:\n      tags:\n        - branches\n      operationId: resetBranch\n      summary: reset branch\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ResetCreation\"\n      responses:\n        204:\n          description: reset successful\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/branches/{branch}/revert:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - branches\n      operationId: revertBranch\n      summary: revert\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RevertCreation\"\n      responses:\n        204:\n          description: revert successful\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        409:\n          description: Conflict Found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/refs/{sourceRef}/merge/{destinationBranch}:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: sourceRef\n        required: true\n        schema:\n          type: string\n        description: source ref\n      - in: path\n        name: destinationBranch\n        required: true\n        schema:\n          type: string\n        description: destination branch name\n    post:\n      tags:\n        - refs\n      operationId: mergeIntoBranch\n      summary: merge references\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Merge\"\n      responses:\n        200:\n          description: merge completed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MergeResult\"\n        400:\n          $ref: \"#/components/responses/ValidationError\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        409:\n          description: conflict\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MergeResult\"\n        412:\n          description: precondition failed (e.g. a pre-merge hook returned a failure)\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/branches/{branch}/diff:\n    parameters:\n      - $ref: \"#/components/parameters/PaginationAfter\"\n      - $ref: \"#/components/parameters/PaginationAmount\"\n      - $ref: \"#/components/parameters/PaginationPrefix\"\n      - $ref: \"#/components/parameters/PaginationDelimiter\"\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n\n    get:\n      tags:\n        - branches\n      operationId: diffBranch\n      summary: diff branch\n      responses:\n        200:\n          description: diff of branch uncommitted changes\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DiffList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/refs/{leftRef}/diff/{rightRef}:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: leftRef\n        required: true\n        schema:\n          type: string\n        description: a reference (could be either a branch or a commit ID)\n      - in: path\n        name: rightRef\n        required: true\n        schema:\n          type: string\n        description: a reference (could be either a branch or a commit ID) to compare against\n      - $ref: \"#/components/parameters/PaginationAfter\"\n      - $ref: \"#/components/parameters/PaginationAmount\"\n      - $ref: \"#/components/parameters/PaginationPrefix\"\n      - $ref: \"#/components/parameters/PaginationDelimiter\"\n      - in: query\n        name: type\n        schema:\n          type: string\n      - in: query\n        name: diff_type\n        schema:\n          type: string\n          enum: [two_dot, three_dot]\n          default: three_dot\n\n    get:\n      tags:\n        - refs\n      operationId: diffRefs\n      summary: diff references\n      responses:\n        200:\n          description: diff between refs\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DiffList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/commits/{commitId}:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: commitId\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - commits\n      operationId: getCommit\n      summary: get commit\n      responses:\n        200:\n          description: commit\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Commit\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/refs/{ref}/objects:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: ref\n        required: true\n        schema:\n          type: string\n        description: a reference (could be either a branch or a commit ID)\n      - in: query\n        name: path\n        description: relative to the ref\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - objects\n      operationId: getObject\n      summary: get object content\n      responses:\n        200:\n          description: object content\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n          headers:\n            Content-Length:\n              schema:\n                type: integer\n                format: int64\n            Last-Modified:\n              schema:\n                type: string\n            ETag:\n              schema:\n                type: string\n            Content-Disposition:\n              schema:\n                type: string\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n        410:\n          description: object expired\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /repositories/{repository}/branches/{branch}/staging/backing:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: path\n        description: relative to the branch\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - staging\n      operationId: getPhysicalAddress\n      summary: get a physical address and a return token to write object to underlying storage\n      responses:\n        200:\n          description: physical address for staging area\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StagingLocation\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n    put:\n      tags: \n       - staging\n      operationId: linkPhysicalAddress\n      summary: associate staging on this physical address with a path\n      description: |\n        If the supplied token matches the current staging token, associate the object as the\n        physical address with the supplied path.\n\n        Otherwise, if staging has been committed and the token has expired, return a conflict\n        and hint where to place the object to try again.  Caller should copy the object to the\n        new physical address and PUT again with the new staging token.  (No need to back off,\n        this is due to losing the race against a concurrent commit operation.)\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/StagingMetadata\"\n      responses:\n        200:\n          # This actually violates HTTP, which requires returning 201 if a new object was\n          # created or 200 if an existing object was modified,\n          # https://tools.ietf.org/html/rfc7231#section-4.3.4\n          description: object metadata\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ObjectStats\"\n        400:\n          $ref: \"#/components/responses/ValidationError\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/ServerError\"\n        409:\n          description: conflict with a commit, try here\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StagingLocation\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/branches/metaranges:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n    post:\n        tags:\n          - import\n        operationId: createMetaRange\n        summary: create a lakeFS metarange file from the given ranges\n        requestBody:\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MetaRangeCreation\"\n        responses:\n          201:\n            description: metarange metadata\n            content:\n              application/json:\n                schema:\n                  $ref: \"#/components/schemas/MetaRangeCreationResponse\"\n          400:\n            $ref: \"#/components/responses/ValidationError\"\n          401:\n            $ref: \"#/components/responses/Unauthorized\"\n          404:\n            $ref: \"#/components/responses/NotFound\"\n          default:\n            $ref: \"#/components/responses/ServerError\"\n\n\n  /repositories/{repository}/branches/ranges:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n         - import\n      operationId: ingestRange\n      summary: create a lakeFS range file from the source uri\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/StageRangeCreation\"\n      responses:\n        201:\n          description: range metadata\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IngestRangeCreationResponse\"\n\n        400:\n          $ref: \"#/components/responses/ValidationError\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/branches/{branch}/objects:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: path\n        description: relative to the branch\n        required: true\n        schema:\n          type: string\n    put:\n      tags:\n        - objects\n      operationId: stageObject\n      summary: stage an object's metadata for the given branch\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ObjectStageCreation\"\n      responses:\n        201:\n          description: object metadata\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ObjectStats\"\n        400:\n          $ref: \"#/components/responses/ValidationError\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    post:\n      tags:\n        - objects\n      operationId: uploadObject\n      x-validation-exclude-body: true\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                content:\n                  description: Only a single file per upload which must be named \"content\".\n                  type: string\n                  format: binary\n\n      parameters:\n        - in: query\n          name: storageClass\n          required: false\n          schema:\n            type: string\n        - in: header\n          name: If-None-Match\n          description: Currently supports only \"*\" to allow uploading an object only if one doesn't exist yet\n          example: \"*\"\n          required: false\n          schema:\n            type: string\n            pattern: '^\\*$'  # Currently, only \"*\" is supported\n      responses:\n        201:\n          description: object metadata\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ObjectStats\"\n        400:\n          $ref: \"#/components/responses/ValidationError\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        412:\n          $ref: \"#/components/responses/PreconditionFailed\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      tags:\n        - objects\n      operationId: deleteObject\n      summary: delete object\n      responses:\n        204:\n          description: object deleted successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/branches/{branch}/objects/delete:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - objects\n      operationId: deleteObjects\n      summary: delete objects\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PathList\"\n      responses:\n        200:\n          description: Delete objects response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ObjectErrorList\"\n        204:\n          description: all requested objects successfully deleted\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/refs/{ref}/objects/stat:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: ref\n        required: true\n        schema:\n          type: string\n        description: a reference (could be either a branch or a commit ID)\n      - in: query\n        name: path\n        description: relative to the branch\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: user_metadata\n        required: false\n        schema: \n          type: boolean\n          default: true\n    get:\n      tags:\n        - objects\n      operationId: statObject\n      summary: get object metadata\n      responses:\n        200:\n          description: object metadata\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ObjectStats\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n        410:\n          description: object gone (but partial metadata may be available)\n\n  /repositories/{repository}/refs/{ref}/objects/underlyingProperties:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: ref\n        required: true\n        schema:\n          type: string\n        description: a reference (could be either a branch or a commit ID)\n      - in: query\n        name: path\n        description: relative to the branch\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - objects\n      operationId: getUnderlyingProperties\n      summary: get object properties on underlying storage\n      responses:\n        200:\n          description: object metadata on underlying storage\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnderlyingObjectProperties\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/refs/{ref}/objects/ls:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: ref\n        required: true\n        schema:\n          type: string\n        description: a reference (could be either a branch or a commit ID)\n      - in: query\n        name: user_metadata\n        required: false\n        schema: \n          type: boolean\n          default: true\n      - $ref: \"#/components/parameters/PaginationAfter\"\n      - $ref: \"#/components/parameters/PaginationAmount\"\n      - $ref: \"#/components/parameters/PaginationDelimiter\"\n      - $ref: \"#/components/parameters/PaginationPrefix\"\n\n    get:\n      tags:\n        - objects\n      operationId: listObjects\n      summary: list objects under a given prefix\n      responses:\n        200:\n          description: object listing\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ObjectStatsList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/refs/{branch}/symlink:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: location\n        schema:\n          type: string\n        description: path to the table data\n    post:\n      tags:\n        - metadata\n      operationId: createSymlinkFile\n      summary: creates symlink files corresponding to the given directory\n\n      responses:\n        201:\n          description: location created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StorageURI\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/actions/runs:\n    get:\n      tags:\n        - actions\n      operationId: listRepositoryRuns\n      summary: list runs\n      parameters:\n        - in: path\n          name: repository\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n        - in: query\n          name: branch\n          schema:\n            type: string\n        - in: query\n          name: commit\n          schema:\n            type: string\n      responses:\n        200:\n          description: list action runs\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ActionRunList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/actions/runs/{run_id}:\n    get:\n      tags:\n        - actions\n      operationId: getRun\n      summary: get a run\n      parameters:\n        - in: path\n          name: repository\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: run_id\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: action run result\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ActionRun\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/actions/runs/{run_id}/hooks:\n    get:\n      tags:\n        - actions\n      operationId: listRunHooks\n      summary: list run hooks\n      parameters:\n        - in: path\n          name: repository\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: run_id\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/PaginationAfter\"\n        - $ref: \"#/components/parameters/PaginationAmount\"\n      responses:\n        200:\n          description: list specific run hooks\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HookRunList\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/actions/runs/{run_id}/hooks/{hook_run_id}/output:\n    get:\n      tags:\n        - actions\n      operationId: getRunHookOutput\n      summary: get run hook output\n      parameters:\n        - in: path\n          name: repository\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: run_id\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: hook_run_id\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: run hook output\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/metadata/meta_range/{meta_range}:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: meta_range\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - metadata\n      operationId: getMetaRange\n      summary: return URI to a meta-range file\n      responses:\n        200:\n          description: meta-range URI\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StorageURI\"\n          headers:\n            Location:\n              schema:\n                type: string\n              description: redirect to S3\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/metadata/range/{range}:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: range\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - metadata\n      operationId: getRange\n      summary: return URI to a range file\n      responses:\n        200:\n          description: range URI\n          headers:\n            Location:\n              schema:\n                type: string\n              description: redirect to S3\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StorageURI\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n  /repositories/{repository}/gc/rules:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - retention\n      operationId: getGarbageCollectionRules\n      responses:\n        200:\n          description: gc rule list\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GarbageCollectionRules\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    post:\n      tags:\n        - retention\n      operationId: set garbage collection rules\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GarbageCollectionRules\"\n      responses:\n        204:\n          description: set garbage collection rules successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n\n  /repositories/{repository}/gc/prepare_commits:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GarbageCollectionPrepareRequest\"\n      tags:\n        - retention\n      operationId: prepareGarbageCollectionCommits\n      summary: save lists of active and expired commits for garbage collection\n      responses:\n        201:\n          description: paths to commit dataset\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GarbageCollectionPrepareResponse\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n  /repositories/{repository}/branch_protection:\n    parameters:\n      - in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - repositories\n      operationId: getBranchProtectionRules\n      summary: get branch protection rules\n      responses:\n        200:\n          description: branch protection rules\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/BranchProtectionRule\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    post:\n      tags:\n        - repositories\n      operationId: createBranchProtectionRule\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BranchProtectionRule\"\n      responses:\n        204:\n          description: branch protection rule created successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n    delete:\n      tags:\n        - repositories\n      operationId: deleteBranchProtectionRule\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                pattern:\n                  type: string\n              required:\n                - pattern\n      responses:\n        204:\n          description: branch protection rule deleted successfully\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n        default:\n          $ref: \"#/components/responses/ServerError\"\n  /healthcheck:\n    get:\n      operationId: healthCheck\n      security: [ ]\n      tags:\n        - healthCheck\n      description: check that the API server is up and running\n      responses:\n        204:\n          description: NoContent\n  /config/version:\n    get:\n      tags:\n        - config\n      operationId: getLakeFSVersion\n      description: get version of lakeFS server\n      responses:\n        200:\n          description: lakeFS version\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VersionConfig\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n  /config/storage:\n    get:\n      tags:\n        - config\n      operationId: getStorageConfig\n      description: retrieve lakeFS storage configuration\n      responses:\n        200:\n          description: lakeFS storage configuration\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StorageConfig\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n",
			"canonicalURL": "/github.com/treeverse/lakeFS@fddcc835593baac5bbc10e4bec1722d7e7784513/-/blob/docs/assets/js/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/treeverse/lakeFS/blob/fddcc835593baac5bbc10e4bec1722d7e7784513/docs/assets/js/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/repositories/{repository}/branches/{branch}/commits\": get: security: security \"cookie_auth\" (index 2): cookie security not implemented",
	"NotImplemented": [
		"cookie security",
		"unsupported content types"
	]
}