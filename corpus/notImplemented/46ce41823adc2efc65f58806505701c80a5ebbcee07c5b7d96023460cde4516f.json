{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ObeoNetwork/InformationSystem"
		},
		"file": {
			"name": "Obeo Designer Team Server - Administration Server-1.0.0.yaml",
			"size": 0,
			"path": "addons/swagger/plugins/org.obeonetwork.dsl.soa.gen.swagger.tests/data/export/odts-admin-ws/yaml/Obeo Designer Team Server - Administration Server-1.0.0.yaml",
			"byteSize": 18865,
			"content": "openapi: 3.0.1\ninfo:\n  title: Obeo Designer Team Server - Administration Server\n  description: |\n    This guide describe the REST API of the administration server for Obeo Designer Team Server. This API will allow you to manage CDO repositories, shared modeling projects and depending on the type of repository you manage, you will be able to manager the repository users. If you already have configured the [administration server](../Obeo_Designer_Team_Administration_Server.html) for Obeo Designer Team Server you can start to use our API.\n\n    Remark: The protocol, host and port can be different from your server configuration.\n\n    In this documentation we will use the web service API in the version **v1.0**.\n\n    **Disclaimer:** As basic authentication is enabled for the administration server, the _Authorization_ header must be added in all requests with the base64 encoded credentials.\n  termsOfService: /tos\n  contact:\n    name: Obeo\n    url: https://contact.obeosoft.com/\n    email: contact@obeosoft.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\ntags:\n- name: Repositories\n  description: null\n- name: Projects\n  description: null\n- name: Users\n  description: null\npaths:\n  /repositories:\n    get:\n      tags:\n      - Repositories\n      description: |\n        Retrieve all repositories on the current server.\n      operationId: getRepositories\n      responses:\n        200:\n          description: \"OK\\n\\nOk\"\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Repositories_GetRepositoriesOutput200'\n              examples:\n                name:\n                  summary: summary\n                  description: description\n                  value:\n                    attribute: value\n        404:\n          description: Not Found\n    post:\n      tags:\n      - Repositories\n      description: |\n        This request will allow you to creates a repository.\n        The body of the request take a JSON object with the following parameters: *repositoryName*, *authenticationType* and *datasourceType* which are mandatory and also *authenticationData* and *datasourceData* which are optional.\n\n        While the *authenticationType* value can be empty, the *repositoryName* and the *datasourceType* values cannot.\n\n        By default you can use the following values to manage your repositories:\n          * *authenticationType* can take:\n            * an empty value\n            * LDAP\n            * FILE\n            * LDAP_FILE\n            * USERPROFILE\n            * LDAP_USERPROFILE\n          * *datasourceType* can take:\n            * H2_EMBEDDED\n            * H2_SERVER\n\n        You can also contribute your own extensions and use the key value of your extension as described in the Administration Server [documentation](../Obeo_Designer_Team_Administration_Server.html#Contribute_administration_server).\n\n        Those values describe how your repository will manage authentication and database.\n\n        As the optional parameters (*authenticationData* and *datasourceDat*) depends on the mandatory parameters, we will use examples to describe how to use them.\n\n        The repository is started after its creation and lifecycle hooks are called before and after its start.\n      operationId: addRepository\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewRepository'\n      responses:\n        201:\n          description: \"Created\\n\\nRepository response\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Repositories_Output201Output200'\n        400:\n          description: \"Bad Request\\n\\nBad Request\\n\\nSome parameters depend on\\\n            \\ the repository type (authentication and database), their validation\\\n            \\ is done by the corresponding extensions. \\n\"\n        500:\n          description: \"Internal Server Error\\n\\nInternal error\\n\\nSomething unexpected\\\n            \\ occurred during the repository creation.\\n\"\n  /repositories/{repositoryId}:\n    delete:\n      tags:\n      - Repositories\n      description: |\n        Delete a repository that was created using the *create repository* web service.\n\n        The deletetion of repository removes the folder and all of its content in the directory that contains the repositories. This directory can be configured in the properties files of the administration server as described in [Administration Server configuration](../Obeo_Designer_Team_Administration_Server.html#Webservice_configuration).\n\n        No effect on static repositories.\n      operationId: deleteRepository\n      parameters:\n      - name: repositoryId\n        in: path\n        description: id of a repository\n        required: true\n        schema:\n          type: string\n      - name: deleteDatabase\n        in: query\n        description: Parameter to indicate if the databse must be deleted or kep.\n          true by default. No effect for the moment\n        required: false\n        schema:\n          type: boolean\n      responses:\n        200:\n          description: \"OK\\n\\nOk\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Output200'\n        204:\n          description: No Content\n        404:\n          description: Not Found\n        500:\n          description: \"Internal Server Error\\n\\nServer error for static repository\"\n  /repositories/start/{repositoryId}:\n    get:\n      tags:\n      - Repositories\n      description: |\n        Start a repository that was created using the web service to create a repository.\n\n        The lifecycle hooks will be called before and after its start.\n\n        No effect on static repositories.\n      operationId: startRepository\n      parameters:\n      - name: repositoryId\n        in: path\n        description: id of a repository\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"OK\\n\\nOk\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Repositories_Output201Output200'\n        400:\n          description: \"Bad Request\\n\\nKo\"\n        404:\n          description: Not Found\n  /repositories/stop/{repositoryId}:\n    get:\n      tags:\n      - Repositories\n      description: |\n        Stop a repository that was created using the web service to create a repository.\n\n        The lifecycle hooks will be called before and after its stop.\n\n        No effect on static repositories.\n      operationId: stopRepository\n      parameters:\n      - name: repositoryId\n        in: path\n        description: id of a repository\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"OK\\n\\nOk\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Repositories_StopRepositoryOutput200'\n        400:\n          description: \"Bad Request\\n\\nNot Found\"\n        404:\n          description: Not Found\n        500:\n          description: \"Internal Server Error\\n\\nServer error for static repository\"\n  /repositories/export/{repositoryId}:\n    post:\n      tags:\n      - Repositories\n      description: |\n        Export the database of the repository into an xml file.\n\n        The body of the request take two parameters: *needsEncryption* which is mandatory and *password* which is optional but needed if *needsEncryption* is set to true.\n\n        As the export of the database can take time, the web service will schedule an asynchronous job and return the link where you will be able to download the file in the response under the *url* attribute.\n\n        If *needsEncryption* is set to false the export of the database will create an xml file representing the CDO database in the *export* folder which can be configured in the properties files of the Administration Server as described in [Administration Server configuration](../Obeo_Designer_Team_Administration_Server.html#Webservice_configuration). If *needsEncryption* is set to true then an encrypted zip file containing the xml file will be created instead.\n      operationId: exportRepository\n      parameters:\n      - name: repositoryId\n        in: path\n        description: id of a repository\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Repositories_ExportRepositoryBody'\n      responses:\n        202:\n          description: \"Accepted\\n\\nOk\"\n        400:\n          description: \"Bad Request\\n\\nBad request\"\n        404:\n          description: Not Found\n  /repositories/import/{repositoryId}:\n    post:\n      tags:\n      - Repositories\n      description: |\n        Restore a repository from the uploaded xml file.\n\n        This file must be a backup of the database.\n\n        As this API needs a file, we suggest you to use the input file of your favorite browser in order to let it set the correct headers for the upload of the file.\n        As the import of the database can take time, the web service will schedule an asynchronous job.\n\n        The state (ONLINE | OFFLINE) of the repository will be the same after the import as before the import.\n\n        Static repositories are not managed.\n      operationId: importRepository\n      parameters:\n      - name: repositoryId\n        in: path\n        description: id of a repository\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Repositories_ImportRepositoryBody'\n      responses:\n        202:\n          description: \"Accepted\\n\\nRequest accepted\"\n        400:\n          description: Bad Request\n        404:\n          description: Not Found\n  /projects:\n    post:\n      tags:\n      - Projects\n      description: |\n        Create an empty shared modeling project.\n\n        The repository where you want to create the shared modeling project should be started.\n\n        The project post creation lifcycle hook will be called after the project creation.\n        For example, the user profile extension lifecycle hook will create roles for users. The name of the created role will have the project name and will authorize a user to create, read, update and delete resources inside the project.\n      operationId: createSharedProject\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Projects_CreateSharedProjectBody'\n      responses:\n        201:\n          description: \"Created\\n\\nOk\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Projects_CreateSharedProjectOutput201'\n        404:\n          description: Not Found\n  /users:\n    get:\n      tags:\n      - Users\n      description: |\n        List all users the given repository.\n      operationId: listUsers\n      parameters:\n      - name: repositoryName\n        in: query\n        description: id of a repository\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"OK\\n\\nOk\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Users_ListUsersOutput200'\n        400:\n          description: \"Bad Request\\n\\nNot Found\"\n    post:\n      tags:\n      - Users\n      description: |\n        Create a user in the repository.\n\n        The body of the request take a JSON object with the following parameters: *id*, *isAdministrator*, *password* and *permissions*.\n        The *id* and *isAdministrator* are mandatory.\n\n        The *password* is required if the repository authentication is not managed with LDAP.\n\n        The *permissions* parameter is used for repositories with authorization managed with user profiles. This parameter is an array of project name which will be used to grant writing rights to the user for those projects.\n      operationId: addUser\n      parameters:\n      - name: repositoryName\n        in: query\n        description: id of a repository\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewUser'\n      responses:\n        200:\n          description: \"OK\\n\\nOk\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Users_Output200'\n        400:\n          description: Bad Request\n  /users/{userName}:\n    put:\n      tags:\n      - Users\n      description: |\n        Update user data.\n\n        The behavior of this service is to delete and recreate the user with the new data.\n\n        The body of the request takes the same data than the creation request.\n      operationId: updateUser\n      parameters:\n      - name: userName\n        in: path\n        description: id of a user\n        required: true\n        schema:\n          type: string\n      - name: repositoryName\n        in: query\n        description: id of a repository\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewUser'\n      responses:\n        200:\n          description: \"OK\\n\\nOk\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Users_Output200'\n        400:\n          description: Bad Request\n        404:\n          description: Not Found\n    delete:\n      tags:\n      - Users\n      description: |\n        Deletes the user from the repository.\n      operationId: delteUser\n      parameters:\n      - name: userName\n        in: path\n        description: id of a user\n        required: true\n        schema:\n          type: string\n      - name: repositoryName\n        in: query\n        description: id of a repository\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"OK\\n\\nOk\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Output200'\n        404:\n          description: Not Found\n        400:\n          description: Bad Request\ncomponents:\n  schemas:\n    AuthenticationType:\n      type: string\n      enum:\n      - \"\"\n      - LDAP_FILE\n      - LDAP\n      - USERPROFILE\n      - LDAP_USERPROFILE\n      - FILE\n    DatasourceType:\n      type: string\n      enum:\n      - H2_EMBEDDED\n      - H2_SERVER\n    NewRepository:\n      required:\n      - authenticationType\n      - datasourceType\n      type: object\n      properties:\n        authenticationData:\n          type: string\n        datasourceType:\n          $ref: '#/components/schemas/DatasourceType'\n        authenticationType:\n          $ref: '#/components/schemas/AuthenticationType'\n        repositorName:\n          type: string\n        datasourceData:\n          type: string\n    NewUser:\n      required:\n      - id\n      - isAdmin\n      type: object\n      properties:\n        password:\n          type: string\n        id:\n          type: string\n        isAdmin:\n          type: boolean\n        permissions:\n          type: array\n          items:\n            type: string\n    Output200:\n      type: object\n      properties:\n        repositoryName:\n          type: string\n        message:\n          type: string\n        status:\n          type: string\n    Projects_CreateSharedProjectBody:\n      required:\n      - projectName\n      - repositoryName\n      type: object\n      properties:\n        projectName:\n          type: string\n        repositoryName:\n          type: string\n    Projects_CreateSharedProjectOutput201:\n      type: object\n      properties:\n        projectName:\n          type: string\n        message:\n          type: string\n        status:\n          type: string\n    Repositories_ExportRepositoryBody:\n      required:\n      - needsEncryption\n      type: object\n      properties:\n        password:\n          type: string\n        needsEncryption:\n          type: boolean\n    Repositories_GetRepositoriesOutput200:\n      type: object\n      properties:\n        message:\n          type: string\n        status:\n          type: string\n        repositories:\n          type: array\n          items:\n            $ref: '#/components/schemas/Repository'\n    Repositories_ImportRepositoryBody:\n      type: object\n      properties:\n        upFile:\n          type: string\n          format: binary\n    Repositories_Output201Output200:\n      type: object\n      properties:\n        message:\n          type: string\n        status:\n          type: string\n        repository:\n          $ref: '#/components/schemas/Repository'\n    Repositories_StopRepositoryOutput200:\n      type: object\n      properties:\n        message:\n          type: string\n        status:\n          type: string\n        repository:\n          $ref: '#/components/schemas/SimpleRepository'\n    Repository:\n      type: object\n      properties:\n        datasourceType:\n          $ref: '#/components/schemas/DatasourceType'\n        authenticationType:\n          $ref: '#/components/schemas/AuthenticationType'\n        repositorName:\n          type: string\n        type:\n          $ref: '#/components/schemas/Type'\n        status:\n          $ref: '#/components/schemas/Status'\n    SimpleRepository:\n      type: object\n      properties:\n        repositorName:\n          type: string\n        type:\n          $ref: '#/components/schemas/Type'\n        status:\n          $ref: '#/components/schemas/Status'\n    Status:\n      type: string\n      enum:\n      - ONLINE\n      - OFFLINE\n    Type:\n      type: string\n      enum:\n      - STATIC\n      - DYNAMIC\n    User:\n      type: object\n      properties:\n        id:\n          type: string\n        isAdmin:\n          type: boolean\n        permissions:\n          type: array\n          items:\n            type: string\n    Users_ListUsersOutput200:\n      type: object\n      properties:\n        repositoryName:\n          type: string\n        message:\n          type: string\n        status:\n          type: string\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n    Users_Output200:\n      type: object\n      properties:\n        repositoryName:\n          type: string\n        message:\n          type: string\n        projectNames:\n          type: array\n          items:\n            type: string\n        status:\n          type: string\n        user:\n          $ref: '#/components/schemas/User'\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n",
			"canonicalURL": "/github.com/ObeoNetwork/InformationSystem@cf8e8f33bec957c4a1032b50c0bec7f8100eaf53/-/blob/addons/swagger/plugins/org.obeonetwork.dsl.soa.gen.swagger.tests/data/export/odts-admin-ws/yaml/Obeo%20Designer%20Team%20Server%20-%20Administration%20Server-1.0.0.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ObeoNetwork/InformationSystem/blob/cf8e8f33bec957c4a1032b50c0bec7f8100eaf53/addons/swagger/plugins/org.obeonetwork.dsl.soa.gen.swagger.tests/data/export/odts-admin-ws/yaml/Obeo Designer Team Server - Administration Server-1.0.0.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/repositories\": get: responses: 200: contents: unsupported content types: [application/xml]",
	"NotImplemented": [
		"unsupported content types"
	]
}