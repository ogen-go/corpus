{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Backbase/stream-services"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "stream-cursor/api/openapi.yaml",
			"byteSize": 8664,
			"content": "openapi: 3.0.1\ninfo:\n  title: Backbase Stream Ingestion Cursor  API\n  version: 1.0.0\n  x-logo:\n    url: \"http://www.backbase.com/wp-content/uploads/2017/04/backbase-logo-png.png\"\n    backgroundColor: \"#FFFFFF\"\n    altText: \"Backbase logo\"\nservers:\n  - url: http://stream-cursor-http.proto.backbasecloud.com/\n    description: The server\npaths:\n  ###############################################\n  ## Ingestion Cursors\n  ###############################################\n  /cursors:\n    summary: Ingestion Cursors\n    post:\n      tags:\n        - cursors\n      description: Creates a new Ingestion Cursor which is executed by the the executors\n      operationId: createNewIngestionCursor\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IngestionCursor'\n      responses:\n        201:\n          description: Ingestion Cursor created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IngestionCursor'\n    get:\n      tags:\n        - cursors\n      description: Retrieves a list in ingestion cursors which are used to start the ingestion process\n      operationId: getIngestionCursors\n      responses:\n        200:\n          description: |\n            # Ingestion Cursors\n            The ingestion cursors identify the cursor from which to ingest.\n            A cursor should contain all necessary information to query a core banking transaction provider to feed into DBS\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/IngestionCursor'\n    delete:\n      summary: Deletes all ingestion cursors\n      tags:\n        - cursors\n      description: |\n        # Delete all ingestion cursors\n\n        This operation removes all ingestion cursors in the cursor database. This can not be undone.\n\n        **Use at your own risk**\n      operationId: deleteAllCursors\n      responses:\n        204:\n          description: All ingestiomn cursors are removed\n  /cursors/{cursorId}:\n    get:\n      tags:\n        - cursors\n      description: Get a cursor\n      operationId: getCursorById\n      parameters:\n        - name: cursorId\n          in: path\n          description: ID of cursor to update\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Ingestion Cursor created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IngestionCursor\"\n        404:\n          description: \"Cannot find ingestion cursor with ID\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - cursors\n      summary: Replace Cursor with new denition\n      operationId: updateCursorById\n      parameters:\n        - name: cursorId\n          in: path\n          description: ID of cursor to update\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IngestionCursor'\n      responses:\n        204:\n          description: Update successfull\n    delete:\n      tags:\n        - cursors\n      summary: Deletes a cursor\n      operationId: deleteCursorById\n      parameters:\n        - name: cursorId\n          in: path\n          description: ID of cursor to update\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        204:\n          description: Delete succesfull\n  /cursor-stream:\n    get:\n      tags:\n        - \"cursor-stream\"\n      description: Retrieves a list in ingestion cursors which are used to start the ingestion process\n      operationId: getIngestionCursorStream\n      parameters:\n        - name: source\n          in: query\n          description: \"The source of events to listen to\"\n          schema:\n            type: string\n        - name: state\n          in: query\n          description: \"The state of the cursor\"\n          schema:\n            type: string\n      responses:\n        200:\n          description: |\n            # Ingestion Cursors\n            The ingestion cursors identify the cursor from which to ingest.\n            A cursor should contain all necessary information to query a core banking transaction provider to feed into DBS\n          content:\n            text/event-stream:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/IngestionCursor'\n\n\ncomponents:\n  schemas:\n\n    ###############################################\n    ## Ingestion Cursor Schemas\n    ###############################################\n    IngestionCursor:\n      type: object\n      description: Ingestion Cursor\n      properties:\n        id:\n          type: string\n          description: \"Unique Identifier of the Ingestion Cursor\"\n          readOnly: true\n          format: uuid\n        cursor_created_at:\n          type: string\n          description: \"Ingestion Cursor Creation Date\"\n          format: 'date-time'\n          readOnly: true\n        cursor_modified_at:\n          type: string\n          description: \"Ingestion Cursor Modified At\"\n          format: 'date-time'\n        cursor_type:\n          type: string\n          description: \"Type of the Ingestion Cursor. Real Time are generated from Events inside DBS, where as BATCH cursors are created from a scheduled process\"\n          enum: [\"BATCH\", \"REAL_TIME\"]\n        cursor_state:\n          type: string\n          description: \"State of the cursor.  Newly created cursors start with NOT_STARTED state.\"\n          enum: [\"not_started\",  \"abandoned\", \"completed\", \"failed\", \"started\", \"starting\", \"stopped\", \"stopping\", \"unknown\"]\n        cursor_source:\n          type: string\n          description: \"Event which created the Ingestion Cursor\"\n          enum: [\"arrangement_added_event\", \"arrangement_updated_event\", \"login_event\", \"payment_created_event\"]\n        record_uuid:\n          type: string\n          description: \"Record UUID from which to start ingestion\"\n        internal_legal_entity_id:\n          type: string\n          description: \"Legal Entity ID of the user for which to ingest into\"\n        external_legal_entity_id:\n          type: string\n          description: \"Legal Entity ID of the user for which to ingest into\"\n        external_user_id:\n          type: string\n          description: \"External User ID\"\n        internal_user_id:\n          type: string\n          description: \"Internal User ID\"\n        arrangement_id:\n          type: string\n          description: \"The arrangement all transactions are added too\"\n        external_arrangement_id:\n          type: string\n          description: \"The external arrangement id used to query Core Bank\"\n        bban:\n          type: string\n          description: \"The Base Bank Account Number to query transactions\"\n        iban:\n          type: string\n          description: \"The International Bank Account Number to query transactions for\"\n        date_from:\n          type: string\n          format: \"date\"\n        date_to:\n          type: string\n          format: \"date\"\n        date_time_from:\n          type: string\n          format: \"date-time\"\n        date_time_to:\n          type: string\n          format: \"date-time\"\n        additionalProperties:\n          type: object\n          additionalProperties: true\n\n\n    ###############################################\n    ## Generic Schemas\n    ###############################################\n    Error:\n      type: object\n      properties:\n        message:\n          type: string\n          description: Any further information\n        errors:\n          type: array\n          description: Detailed error information\n          items:\n            type: object\n            properties:\n              message:\n                type: string\n                description: Default Message. Any further information.\n              key:\n                type: string\n                description: '{capability-name}.api.{api-key-name}. For generated\n                  validation errors this is the path in the document the error resolves\n                  to. e.g. object name + ''.'' + field'\n              context:\n                type: object\n                description: Context can be anything used to construct localised messages.\n                x-java-type: java.util.Map\u003cString,String\u003e\n            description: A validation error\n",
			"canonicalURL": "/github.com/Backbase/stream-services@31f490c801528737906d8861c59ee6d5ddd70366/-/blob/stream-cursor/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Backbase/stream-services/blob/31f490c801528737906d8861c59ee6d5ddd70366/stream-cursor/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/cursor-stream\": get: responses: 200: contents: unsupported content types: [text/event-stream]",
	"NotImplemented": [
		"unsupported content types"
	]
}