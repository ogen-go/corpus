{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "npm/openapi-to-graphql"
		},
		"file": {
			"name": "example_oas6.json",
			"size": 0,
			"path": "test/fixtures/example_oas6.json",
			"byteSize": 8997,
			"content": "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"Example API 6\",\n    \"description\": \"An API to test converting Open API Specs 3.0 to GraphQL\",\n    \"version\": \"1.0.0\",\n    \"termsOfService\": \"http://example.com/terms/\",\n    \"contact\": {\n      \"name\": \"Erik Wittern\",\n      \"url\": \"http://www.example.com/support\"\n    },\n    \"license\": {\n      \"name\": \"Apache 2.0\",\n      \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    }\n  },\n  \"externalDocs\": {\n    \"url\": \"http://example.com/docs\",\n    \"description\": \"Some more natural language description.\"\n  },\n  \"tags\": [\n    {\n      \"name\": \"test\",\n      \"description\": \"Indicates this API is for testing\"\n    }\n  ],\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:{port}/{basePath}\",\n      \"description\": \"The location of the local test server.\",\n      \"variables\": {\n        \"port\": {\n          \"default\": \"3006\"\n        },\n        \"basePath\": {\n          \"default\": \"api\"\n        }\n      }\n    }\n  ],\n  \"paths\": {\n    \"/object\": {\n      \"get\": {\n        \"description\": \"An arbitrary object\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"data\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            },\n            \"links\": {\n              \"object2Link\": {\n                \"operationId\": \"getObject2\",\n                \"description\": \"Link with exposed parameter\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/object2\": {\n      \"get\": {\n        \"operationId\": \"getObject2\",\n        \"description\": \"Serves as a link of GET /object\",\n        \"parameters\": [\n          {\n            \"name\": \"specialheader\",\n            \"description\": \"HTTP headers are case-insensitive\",\n            \"in\": \"header\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"data\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/formUrlEncoded\": {\n      \"post\": {\n        \"description\": \"Basic application/x-www-form-urlencoded test\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/x-www-form-urlencoded\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/pet\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A pet\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/pet\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cars/{id}\": {\n      \"get\": {\n        \"description\": \"A particular car\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/html\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/cacti/{cactusId}\": {\n      \"get\": {\n        \"description\": \"A particular cactus\",\n        \"parameters\": [\n          {\n            \"name\": \"cactusId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/html\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/eateries/{eatery}/breads/{breadName}/dishes/{dishKey}\": {\n      \"get\": {\n        \"parameters\": [\n          {\n            \"name\": \"eatery\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"breadName\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"dishKey\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/html\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/nestedReferenceInParameter\": {\n      \"get\": {\n        \"description\": \"Resolve a nested reference in the parameter schema\",\n        \"parameters\": [\n          {\n            \"name\": \"russianDoll\",\n            \"in\": \"query\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/russianDoll\"\n                }\n              }\n            },\n            \"description\": \"Arbitrary query parameter object\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Names of all the russian dolls\",\n            \"content\": {\n              \"text/html\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/inputUnion\": {\n      \"post\": {\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"oneOf\": [\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"dogBreed\": {\n                        \"type\": \"string\"\n                      }\n                    }\n                  },\n                  {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"catBreed\": {\n                        \"type\": \"string\"\n                      }\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/html\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/strictGetOperation\": {\n      \"get\": {\n        \"description\": \"An arbitrary object\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Mandatory field\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/noResponseSchema\": {\n      \"get\": {\n        \"description\": \"No provided response schema test\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"example\": \"Hello world\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"pet\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"description\": \"Name of the pet\",\n            \"type\": \"string\"\n          },\n          \"status\": {\n            \"description\": \"Status of the pet\",\n            \"type\": \"string\"\n          },\n          \"weight\": {\n            \"description\": \"Weight of the pet\",\n            \"type\": \"number\"\n          },\n          \"previous_owner\": {\n            \"description\": \"Previouw owner of the pet\",\n            \"type\": \"string\"\n          },\n          \"history\": {\n            \"description\": \"History of the pet\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"data\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"history2\": {\n            \"description\": \"History of the pet\",\n            \"type\": \"object\"\n          }\n        },\n        \"required\": [\"status\"]\n      },\n      \"russianDoll\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"nestedDoll\": {\n            \"$ref\": \"#/components/schemas/russianDoll\"\n          }\n        }\n      }\n    }\n  }\n}\n",
			"canonicalURL": "/npm/openapi-to-graphql@48a4010a81790e58c861298e6c6de052497234ce/-/blob/test/fixtures/example_oas6.json",
			"externalURLs": []
		}
	},
	"Error": "notImplemented: path \"/cars/{id}\": get: responses: 200: contents: unsupported content types: [text/html]",
	"NotImplemented": [
		"unsupported content types"
	]
}