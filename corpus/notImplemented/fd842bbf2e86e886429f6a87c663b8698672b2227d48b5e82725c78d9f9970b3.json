{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/webscraping.ai/openapi.yml",
			"byteSize": 15797,
			"content": "openapi: 3.0.2\ninfo:\n  x-ballerina-display:\n    label: WebScraping.AI\n    iconPath: \"icon.png\"\n  title: WebScraping.AI\n  contact:\n    name: WebScraping.AI Support\n    url: https://webscraping.ai\n    email: support@webscraping.ai\n  version: 2.0.4\n  description: \u003e\n    This is a generated connector for [WebScraping.AI API v2.0.4](https://webscraping.ai/docs) OpenAPI specification.\n    \n    It provides a web scaping automation API with Chrome JS rendering, rotating proxies and builtin HTML parsing.\n\n    More information about the WebScraping.AI API can be found at https://webscraping.ai.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials. \n  \n    Create a [WebScraping.AI account](https://webscraping.ai) and obtain tokens from the [dashboard](https://webscraping.ai/dashboard).\ntags:\n  - name: HTML\n    description: Get full HTML content of pages with proxies and Chrome JS rendering\n  - name: Selected HTML\n    description: Get HTML content of selected page areas (like price, search results, page title, etc.)\n  - name: Account\n    description: Information about your account calls quota\npaths:\n  /html:\n    get:\n      summary: Page HTML by URL\n      description: Returns just HTML on success, JSON on error\n      operationId: getHTML\n      tags: [\"HTML\"]\n      parameters:\n        - $ref: '#/components/parameters/url'\n        - $ref: '#/components/parameters/headers'\n        - $ref: '#/components/parameters/timeout'\n        - $ref: '#/components/parameters/js'\n        - $ref: '#/components/parameters/proxy'\n      responses:\n        200:\n          description: Success\n          content:\n            text/html:\n              schema:\n                type: string\n              example: \"\u003chtml\u003e\u003chead\u003e\\n    \u003ctitle\u003eExample Domain\u003c/title\u003e\\n\u003c/head\u003e\\n\\n\u003cbody\u003e\\n\u003cdiv\u003e\\n    \u003ch1\u003eExample Domain\u003c/h1\u003e\\n\u003c/body\u003e\u003c/html\u003e\"\n        400:\n          $ref: '#/components/responses/400'\n        402:\n          $ref: '#/components/responses/402'\n        403:\n          $ref: '#/components/responses/403'\n        429:\n          $ref: '#/components/responses/429'\n        500:\n          $ref: '#/components/responses/500'\n        502:\n          $ref: '#/components/responses/502'\n        504:\n          $ref: '#/components/responses/504'\n        \n#    post:\n#      summary: Page HTML by URL with POST request to the target page\n#      description: Returns just HTML on success, JSON on error. Request body will be passed to the target page.\n#      operationId: postHTML\n#      tags: [ \"HTML\" ]\n#      parameters:\n#        - $ref: '#/components/parameters/postUrl'\n#        - $ref: '#/components/parameters/headers'\n#        - $ref: '#/components/parameters/timeout'\n#        - $ref: '#/components/parameters/js'\n#        - $ref: '#/components/parameters/proxy'\n#      requestBody:\n#        $ref: '#/components/requestBodies/Body'\n#      responses:\n#        400:\n#          $ref: '#/components/responses/400'\n#        402:\n#          $ref: '#/components/responses/402'\n#        403:\n#          $ref: '#/components/responses/403'\n#        429:\n#          $ref: '#/components/responses/429'\n#        500:\n#          $ref: '#/components/responses/500'\n#        502:\n#          $ref: '#/components/responses/502'\n#        504:\n#          $ref: '#/components/responses/504'\n#        200:\n#          description: Success\n#          content:\n#            text/html:\n#              schema:\n#                type: string\n#              example: \"\u003chtml\u003e\u003chead\u003e\\n    \u003ctitle\u003eExample Domain\u003c/title\u003e\\n\u003c/head\u003e\\n\\n\u003cbody\u003e\\n\u003cdiv\u003e\\n    \u003ch1\u003eExample Domain\u003c/h1\u003e\\n\u003c/body\u003e\u003c/html\u003e\"\n  /selected:\n    get:\n      summary: HTML of a selected page area by URL and CSS selector\n      description: Returns just HTML on success, JSON on error\n      operationId: getSelected\n      tags: [\"Selected HTML\"]\n      parameters:\n        - in: query\n          name: selector\n          description: CSS selector (null by default, returns whole page HTML)\n          example: \"h1\"\n          schema:\n            type: string\n        - $ref: '#/components/parameters/url'\n        - $ref: '#/components/parameters/headers'\n        - $ref: '#/components/parameters/timeout'\n        - $ref: '#/components/parameters/js'\n        - $ref: '#/components/parameters/proxy'\n      responses:\n        200:\n          description: Success\n          content:\n            text/html:\n              schema:\n                type: string\n              example: \"\u003ca href=\\\"https://www.iana.org/domains/example\\\"\u003eMore information...\u003c/a\u003e\"\n        400:\n          $ref: '#/components/responses/400'\n        402:\n          $ref: '#/components/responses/402'\n        403:\n          $ref: '#/components/responses/403'\n        429:\n          $ref: '#/components/responses/429'\n        500:\n          $ref: '#/components/responses/500'\n        502:\n          $ref: '#/components/responses/502'\n        504:\n          $ref: '#/components/responses/504'\n#    post:\n#      summary: HTML of a selected page areas by URL and CSS selector, with POST request to the target page\n#      description: Returns just HTML on success, JSON on error. Request body will be passed to the target page.\n#      operationId: postSelected\n#      tags: [ \"Selected HTML\" ]\n#      parameters:\n#        - in: query\n#          name: selector\n#          description: CSS selector (null by default, returns whole page HTML)\n#          example: \"h1\"\n#          schema:\n#            type: string\n#        - $ref: '#/components/parameters/postUrl'\n#        - $ref: '#/components/parameters/headers'\n#        - $ref: '#/components/parameters/timeout'\n#        - $ref: '#/components/parameters/js'\n#        - $ref: '#/components/parameters/proxy'\n#      requestBody:\n#        $ref: '#/components/requestBodies/Body'\n#      responses:\n#        400:\n#          $ref: '#/components/responses/400'\n#        402:\n#          $ref: '#/components/responses/402'\n#        403:\n#          $ref: '#/components/responses/403'\n#        429:\n#          $ref: '#/components/responses/429'\n#        500:\n#          $ref: '#/components/responses/500'\n#        502:\n#          $ref: '#/components/responses/502'\n#        504:\n#          $ref: '#/components/responses/504'\n#        200:\n#          description: Success\n#          content:\n#            text/html:\n#              schema:\n#                type: string\n#              example: \"\u003ca href=\\\"https://www.iana.org/domains/example\\\"\u003eMore information...\u003c/a\u003e\"\n  /selected-multiple:\n    get:\n      summary: HTML of multiple page areas by URL and CSS selectors\n      description: Always returns JSON\n      operationId: getSelectedMultiple\n      tags: [\"Selected HTML\"]\n      parameters:\n        - in: query\n          name: selectors\n          description: Multiple CSS selectors (null by default, returns whole page HTML)\n          example: [\"h1\"]\n          schema:\n            type: array\n            items:\n              type: string\n        - $ref: '#/components/parameters/url'\n        - $ref: '#/components/parameters/headers'\n        - $ref: '#/components/parameters/timeout'\n        - $ref: '#/components/parameters/js'\n        - $ref: '#/components/parameters/proxy'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SelectedAreas\"\n              example: [\n                \"\u003ca href='/test'\u003esome link\u003c/a\u003e\",\n                \"Hello\"\n              ]\n        400:\n          $ref: '#/components/responses/400'\n        402:\n          $ref: '#/components/responses/402'\n        403:\n          $ref: '#/components/responses/403'\n        429:\n          $ref: '#/components/responses/429'\n        500:\n          $ref: '#/components/responses/500'\n        502:\n          $ref: '#/components/responses/502'\n        504:\n          $ref: '#/components/responses/504'\n#    post:\n#      summary: HTML of multiple page areas by URL and CSS selectors, with POST request to the target page\n#      description: Always returns JSON. Request body will be passed to the target page.\n#      operationId: postSelectedMultiple\n#      tags: [ \"Selected HTML\" ]\n#      parameters:\n#        - in: query\n#          name: selectors\n#          description: Multiple CSS selectors (null by default, returns whole page HTML)\n#          example: [ \"h1\" ]\n#          schema:\n#            type: array\n#            items:\n#              type: string\n#        - $ref: '#/components/parameters/postUrl'\n#        - $ref: '#/components/parameters/headers'\n#        - $ref: '#/components/parameters/timeout'\n#        - $ref: '#/components/parameters/js'\n#        - $ref: '#/components/parameters/proxy'\n#      requestBody:\n#        $ref: '#/components/requestBodies/Body'\n#      responses:\n#        400:\n#          $ref: '#/components/responses/400'\n#        402:\n#          $ref: '#/components/responses/402'\n#        403:\n#          $ref: '#/components/responses/403'\n#        429:\n#          $ref: '#/components/responses/429'\n#        500:\n#          $ref: '#/components/responses/500'\n#        502:\n#          $ref: '#/components/responses/502'\n#        504:\n#          $ref: '#/components/responses/504'\n#        200:\n#          description: Success\n#          content:\n#            application/json:\n#              schema:\n#                $ref: \"#/components/schemas/SelectedAreas\"\n#              example: [\n#                  \"\u003ca href='/test'\u003esome link\u003c/a\u003e\",\n#                  \"Hello\"\n#              ]\n  /account:\n    get:\n      summary: Information about your account calls quota\n      description: Always returns JSON\n      operationId: account\n      tags: [ \"Account\" ]\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n              example:\n                remaining_api_calls: 200000\n                resets_at: 1617073667\n                remaining_concurrency: 100\n        403:\n          $ref: '#/components/responses/403'\nsecurity:\n  - api_key: []\nservers:\n  - url: https://api.webscraping.ai\ncomponents:\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api_key\n      in: query\n      description: Represents API Key `api_key`\n  responses:\n    400:\n      description: Parameters validation error\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            {\n              \"message\": \"Invalid CSS selector\"\n            }\n\n    402:\n      description: Billing issue, probably you've ran out of credits\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            {\n              message: \"Some error\"\n            }\n    403:\n      description: Wrong API key\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            {\n              message: \"Some error\"\n            }\n    429:\n      description: Too many concurrent requests\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            {\n              message: \"Some error\"\n            }\n    500:\n      description: Unexpected error, try again or contact support@webscraping.ai\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            {\n              message: \"Some error\"\n            }\n    502:\n      description: Non-2xx and non-404 HTTP status code on the target page\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PageError\"\n          example:\n            {\n              \"status_code\": 500,\n              \"status_message\": \"Some website error\",\n            }\n    504:\n      description: Timeout error, try increasing timeout parameter value\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            {\n              message: \"Some error\"\n            }\n  parameters:\n    ## Shared everywhere\n    url:\n      in: query\n      name: url\n      description: URL of the target page\n      required: true\n      example: \"https://example.com\"\n      schema:\n        type: string\n    postUrl:\n      in: query\n      name: url\n      description: URL of the target page\n      required: true\n      example: \"https://httpbin.org/post\"\n      schema:\n        type: string\n    headers:\n      in: query\n      name: headers\n      description: \"HTTP headers to pass to the target page. Can be specified either via a nested query parameter (...\u0026headers[One]=value1\u0026headers=[Another]=value2) or as a JSON encoded object (...\u0026headers={\\\"One\\\": \\\"value1\\\", \\\"Another\\\": \\\"value2\\\"})\"\n      example:\n        Cookie: session=some_id\n      schema:\n        type: object\n        additionalProperties:\n          type: string\n    timeout:\n      in: query\n      name: timeout\n      description: Maximum processing time in ms. Increase it in case of timeout errors (5000 by default, maximum is 30000)\n      example: 5000\n      schema:\n        type: integer\n        default: 5000\n        minimum: 1\n        maximum: 30000\n    js:\n      in: query\n      name: js\n      description: Execute on-page JavaScript using a headless browser (true by default)\n      example: true\n      schema:\n        type: boolean\n        default: true\n    js_timeout:\n      in: query\n      name: timeout\n      description: Maximum JavaScript rendering time in ms. Increase it in case if you see a loading indicator instead of data on the target page.\n      example: 5000\n      schema:\n        type: integer\n        default: 2000\n        minimum: 1\n        maximum: 20000\n    proxy:\n      in: query\n      name: proxy\n      description: Type of proxy, use residential proxies if your site restricts traffic from datacenters (datacenter by default). Note that residential proxy requests are more expensive than datacenter, see the pricing page for details.\n      example: \"datacenter\"\n      schema:\n        type: string\n        default: \"datacenter\"\n        enum: [ \"datacenter\", \"residential\" ]\n  requestBodies:\n    Body:\n      description: Request body to pass to the target page\n      content:\n        application/json:\n          schema:\n            type: object\n            additionalProperties: true\n        application/x-www-form-urlencoded:\n          schema:\n            type: object\n            additionalProperties: true\n        application/xml:\n          schema:\n            type: object\n            additionalProperties: true\n        text/plain:\n          schema:\n            type: string\n  schemas:\n    Error:\n      title: Generic error\n      type: object\n      properties:\n        message:\n          type: string\n          description: Error description\n    PageError:\n      title: Non-2xx and non-404 HTTP status code on the target page\n      type: object\n      properties:\n        status_code:\n          type: integer\n          description: Response HTTP status code (403, 500, etc)\n        status_message:\n          type: string\n          description: Response HTTP status message\n    SelectedAreas:\n      title: HTML for selected page areas\n      type: array\n      description: Array of elements matched by selectors\n      items:\n        type: string\n    Account:\n      title: Account limits info\n      type: object\n      properties:\n        remaining_api_calls:\n          type: integer\n          description: Remaining API calls quota\n        resets_at:\n          type: integer\n          description: Next billing cycle start time (UNIX timestamp)\n        remaining_concurrency:\n          type: integer\n          description: Remaining concurrent requests\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/webscraping.ai/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/webscraping.ai/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: \"headers\": object with additionalProperties not implemented",
	"NotImplemented": [
		"object with additionalProperties",
		"unsupported content types"
	]
}