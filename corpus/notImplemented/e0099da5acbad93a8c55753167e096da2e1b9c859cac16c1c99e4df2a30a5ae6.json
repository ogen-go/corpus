{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/grimsi/accservermanager"
		},
		"file": {
			"name": "api-spec.yaml",
			"size": 0,
			"path": "api-spec/api-spec.yaml",
			"byteSize": 17295,
			"content": "openapi: 3.0.0\ninfo:\n  description: REST API Spec for a ACC server manager backend.\n  version: 0.3.0\n  title: AC Competizione Server Manager - Backend\n  license:\n    name: Dont Be a Dick Public License\n    url: https://dbad-license.org/\nservers:\n  - url: http://localhost:8000/v1\n    description: Local development server\n  - url: http://accservermanager.grimsi.de/v1\n    description: Production Server\ntags:\n  - name: auth\n    description: Authorization\n  - name: events\n    description: Manage events\n  - name: instances\n    description: Manage server instances\n  - name: results\n    description: Access server instance results\n  - name: metrics\n    description: Access to various metrics\n  - name: info\n    description: Miscellaneous information about the system\npaths:\n  /login:\n    post:\n      summary: Authorize the client\n      operationId: auth\n      tags:\n        - auth\n      requestBody:\n        description: A JSON object containing user credentials\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: a JWT token\n          content:\n            application/json:\n              schema:\n                type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security: []\n  /info:\n    get:\n      summary: Get information about the system\n      operationId: getInfo\n      tags:\n        - info\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SystemInfo\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security: []\n  /events:\n    get:\n      summary: List all events\n      operationId: getEvents\n      tags:\n        - events\n      parameters:\n        - name: name\n          in: query\n          description: Filter by name\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A array of events\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Events\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: Create a event\n      operationId: createEvent\n      tags:\n        - events\n      requestBody:\n        description: A JSON object containing the event\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Event'\n      responses:\n        '201':\n          description: the created event\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /event/{eventId}:\n    get:\n      summary: Get a specific event\n      operationId: getEventById\n      tags:\n        - events\n      parameters:\n        - name: eventId\n          in: path\n          required: true\n          description: The id of the event to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    put:\n      summary: Update a event\n      operationId: updateEventById\n      tags:\n        - events\n      parameters:\n        - name: eventId\n          in: path\n          required: true\n          description: The id of the event to retrieve\n          schema:\n            type: string\n      requestBody:\n        description: A JSON object containing the event\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Event'\n      responses:\n        '201':\n          description: the created configuration\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      summary: Delete a specific event\n      operationId: deleteEventById\n      tags:\n        - events\n      parameters:\n        - name: eventId\n          in: path\n          required: true\n          description: The id of the event to delete\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Empty response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /events/stream:\n    get:\n      summary: Get a event stream for event related events (that sounds really bad, sorry)\n      operationId: getEventStream\n      tags:\n        - events\n      responses:\n        '200':\n          description: EventSource object\n          content:\n            text/event-stream:\n              schema:\n                type: object\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /events/schema:\n    get:\n      summary: Get the event schema\n      operationId: getEventSchema\n      tags:\n        - events\n      responses:\n        '200':\n          description: JSON Schema object for the event\n          content:\n            application/json:\n              schema:\n                type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /instances:\n    get:\n      summary: List all instances\n      operationId: getInstances\n      tags:\n        - instances\n      parameters:\n        - name: name\n          in: query\n          description: Filter by name\n          required: false\n          schema:\n            type: string\n        - name: state\n          in: query\n          required: false\n          schema:\n            $ref: \"#/components/schemas/InstanceState\"\n      responses:\n        '200':\n          description: An array of instances\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Instances\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: Create a instance\n      operationId: createInstance\n      tags:\n        - instances\n      requestBody:\n        description: A JSON object containing the instance\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Instance'\n      responses:\n        '201':\n          description: the created instance\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Instance\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /instances/{instanceId}:\n    get:\n      summary: Get a specific instance\n      operationId: getInstanceById\n      tags:\n        - instances\n      parameters:\n        - name: instanceId\n          in: path\n          required: true\n          description: The id of the instance to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Instance\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    put:\n      summary: Update a instance\n      operationId: updateInstanceById\n      tags:\n        - instances\n      parameters:\n        - name: instanceId\n          in: path\n          required: true\n          description: The id of the instance to retrieve\n          schema:\n            type: string\n      requestBody:\n        description: A JSON object containing the instance\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Instance'\n      responses:\n        '201':\n          description: the created configuration\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Instance\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      summary: Delete a specific instance\n      operationId: deleteInstanceById\n      tags:\n        - instances\n      parameters:\n        - name: instanceId\n          in: path\n          required: true\n          description: The id of the instance to delete\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Empty response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /instances/{instanceId}/start:\n    get:\n      summary: Start a specific instance\n      operationId: startInstanceById\n      tags:\n        - instances\n      parameters:\n        - name: instanceId\n          in: path\n          required: true\n          description: The id of the instance to start\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /instances/{instanceId}/stop:\n    get:\n      summary: Stop a specific instance\n      operationId: stopInstanceById\n      tags:\n        - instances\n      parameters:\n        - name: instanceId\n          in: path\n          required: true\n          description: The id of the instance to stop\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /instances/{instanceId}/pause:\n    get:\n      summary: Pause a specific instance\n      operationId: pauseInstanceById\n      tags:\n        - instances\n      parameters:\n        - name: instanceId\n          in: path\n          required: true\n          description: The id of the instance to start\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /instances/{instanceId}/resume:\n    get:\n      summary: Resume a specific instance\n      operationId: resumeInstanceById\n      tags:\n        - instances\n      parameters:\n        - name: instanceId\n          in: path\n          required: true\n          description: The id of the instance to stop\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /instances/stream:\n    get:\n      summary: Get a event stream for instance related events\n      operationId: getInstanceStream\n      tags:\n        - instances\n      responses:\n        '200':\n          description: EventSource object\n          content:\n            text/event-stream:\n              schema:\n                type: object\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /instances/schema:\n    get:\n      summary: Get the instance schema\n      operationId: getInstanceSchema\n      tags:\n        - instances\n      responses:\n        '200':\n          description: JSON Schema object for the instance\n          content:\n            application/json:\n              schema:\n                type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /prometheus:\n    get:\n      summary: Get metrics in prometheus.io compatible format. Uses Port 9554\n      operationId: getMetricsPrometheus\n      tags:\n        - metrics\n      responses:\n        '200':\n          description: Various metrics in prometheus compatible format\n          content:\n            application/json:\n              schema:\n                type: string\n      security: []\ncomponents:\n  schemas:\n    User:\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n    Event:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        track:\n          type: string\n          enum: [nurburgring, misano, paul_ricard, hungaroring, zolder, monza]\n        eventType:\n          type: string\n          enum: [E_3h, E_6h, E_24h]\n        preRaceWaitingTimeSeconds:\n          type: integer\n          format: int64\n        sessionOverTimeSeconds:\n          type: integer\n          format: int64\n        ambientTemp:\n          type: integer\n          format: int64\n        trackTemp:\n          type: integer\n          format: int64\n        cloudLevel:\n          type: number\n          format: BigDecimal\n        rain:\n          type: number\n          format: BigDecimal\n        sessions:\n          $ref: \"#/components/schemas/Sessions\"\n    Events:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Event\"\n    Sessions:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Session\"\n    Session:\n      type: object\n      properties:\n        hourOfDay:\n          type: integer\n          format: int64\n        dayOfWeekend:\n          type: integer\n          format: int64\n        timeMultiplier:\n          type: number\n          format: BigDecimal\n        sessionType:\n          type: string\n          enum: [p, q, r]\n        sessionDurationMinutes:\n          type: integer\n          format: int64\n    Instance:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        state:\n          $ref: \"#/components/schemas/InstanceState\"\n        container:\n          type: string\n        event:\n          $ref: \"#/components/schemas/Event\"\n        configuration:\n          $ref: \"#/components/schemas/Configuration\"\n        settings:\n          $ref: \"#/components/schemas/Settings\"\n    Instances:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Instance\"\n    InstanceState:\n      type: string\n      enum: [stopped, running, crashed, paused, unknown]\n    Settings:\n      type: object\n      properties:\n        serverName:\n          type: string\n        password:\n          type: string\n        adminPassword:\n          type: string\n        configVersion:\n          type: integer\n          enum: [1]\n    Configuration:\n      type: object\n      properties:\n        udpPort:\n          type: integer\n          format: int64\n        tcpPort:\n          type: integer\n          format: int64\n        maxClients:\n          type: integer\n          format: int64\n        configVersion:\n          type: integer\n          enum: [1]\n    SystemInfo:\n      type: object\n      properties:\n        version:\n          type: string\n        accVersion:\n          type: string\n        metricsEnabled:\n          type: boolean\n        supportedAccVersions:\n          type: array\n          items:\n            type: string\n    Error:\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n  securitySchemes:\n    auth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\nsecurity:\n  - auth: []\n",
			"canonicalURL": "/github.com/grimsi/accservermanager@570e94f6dc4da61fa6d468e90f12f72d2d4b1b0b/-/blob/api-spec/api-spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/grimsi/accservermanager/blob/570e94f6dc4da61fa6d468e90f12f72d2d4b1b0b/api-spec/api-spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/events/stream\": get: responses: 200: contents: unsupported content types: [text/event-stream]",
	"NotImplemented": [
		"unsupported content types"
	]
}