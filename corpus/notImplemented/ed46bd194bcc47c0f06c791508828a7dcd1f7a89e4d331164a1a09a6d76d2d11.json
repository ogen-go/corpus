{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/medium/openapi.yaml",
			"byteSize": 16749,
			"content": "openapi: 3.0.1\ninfo:\n  title: Medium.com - API Specification\n  description: \u003e-\n    This is a generated connector for [Medium API v1](https://github.com/Medium/medium-api-docs) OpenAPI Specification.\n\n    Medium’s Publishing API provides capability to access the Medium network, create your content on Medium from \n    anywhere you write, and expand your audience and your influence.\n  version: 1.0.0\n  x-ballerina-init-description: \u003e-\n    The connector initialization requires setting the API credentials. \n    \n    Create a [Medium account](https://medium.com/) \n    and obtain tokens following [this guide](https://github.com/Medium/medium-api-docs#2-authentication).\n  x-ballerina-display:\n    label: Medium\n    iconPath: \"icon.png\"\nservers:\n- url: https://api.medium.com/v1\npaths:\n  /me:\n    get:\n      tags:\n      - Users\n      summary: Get the authenticated user’s details\n      operationId: getUserDetail\n      responses:\n        200:\n          description: If success returns details of the user who has granted permission to the application otherwise the relevant error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        401:\n          description: The `accessToken` is invalid or has been revoked.\n          content: {}\n      security:\n      - OauthSecurity:\n        - basicProfile\n  /users/{userId}/publications:\n    get:\n      tags:\n      - Publications\n      summary: List the user’s publications\n      operationId: getPublicationList\n      parameters:\n      - name: userId\n        in: path\n        description: A unique identifier for the user.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: If success returns a list of publications that the user is subscribed to, writes to, or edits otherwise the relevant error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PublicationResponse'\n        401:\n          description: The `accessToken` is invalid, lacks the `listPublications`\n            scope or has been revoked.\n          content: {}\n        403:\n          description: The request attempts to list publications for another user.\n          content: {}\n      security:\n      - OauthSecurity:\n        - listPublications\n  /publications/{publicationId}/contributors:\n    get:\n      tags:\n      - Publications\n      - Users\n      summary: List contributors for a given publication\n      operationId: getContributorList\n      parameters:\n      - name: publicationId\n        in: path\n        description: A unique identifier for the publication.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: If success returns a list of contributors\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContributorResponse'\n        401:\n          description: The `accessToken` is invalid or has been revoked.\n          content: {}\n      security:\n      - OauthSecurity:\n        - listPublications\n  /users/{authorId}/posts:\n    post:\n      tags:\n      - Users\n      - Posts\n      summary: Creates a post on the authenticated user’s profile\n      operationId: CreateUserPost\n      parameters:\n      - name: authorId\n        in: path\n        description: authorId is the user id of the authenticated user.\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: Creates a post for user.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Post'\n        required: true\n      responses:\n        200:\n          description: If success returns a Post record that includes the newly created post detail otherwise the relevant error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostResponse'\n        400:\n          description: Required fields were invalid, not specified.\n          content: {}\n        401:\n          description: The `accessToken` is invalid or has been revoked.\n          content: {}\n        403:\n          description: The user does not have permission to publish, or the authorId\n            in the request path points to wrong/non-existent user.\n          content: {}\n      security:\n      - OauthSecurity:\n        - publishPost\n      x-codegen-request-body-name: body\ncomponents:\n  schemas:\n    PostResponse:\n      title: Post response\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/PostDetails'\n      description: Container object for post info\n    UserResponse:\n      title: User Container\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/User'\n      description: Container object for user info\n      example:\n        data:\n          id: 5303d74c64f66366f00cb9b2a94f3251bf5\n          username: majelbstoat\n          name: Jamie Talbot\n          url: https://medium.com/@majelbstoat\n          imageUrl: https://images.medium.com/0*fkfQiTzT7TlUGGyI.png\n    User:\n      type: object\n      description: Represents a user\n      properties:\n        id:\n          type: string\n          description: A unique identifier for the user.\n        username:\n          type: string\n          description: The user’s username on Medium.\n        name:\n          type: string\n          description: The user’s name on Medium.\n        url:\n          type: string\n          description: The URL to the user’s profile on Medium\n        imageUrl:\n          type: string\n          description: The URL to the user’s avatar on Medium\n      example:\n        id: 5303d74c64f66366f00cb9b2a94f3251bf5\n        username: majelbstoat\n        name: Jamie Talbot\n        url: https://medium.com/@majelbstoat\n        imageUrl: https://images.medium.com/0*fkfQiTzT7TlUGGyI.png\n    PublicationResponse:\n      title: Publication List Container\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/Publication'\n      description: Container object for publication list.\n      example:\n        data:\n        - id: b969ac62a46b\n          name: About Medium\n          description: What is this thing and how does it work?\n          url: https://medium.com/about\n          imageUrl: https://cdn-images-1.medium.com/fit/c/200/200/0*ae1jbP_od0W6EulE.jpeg\n        - id: b45573563f5a\n          name: Developers\n          description: Medium’s Developer resources\n          url: https://medium.com/developers\n          imageUrl: https://cdn-images-1.medium.com/fit/c/200/200/1*ccokMT4VXmDDO1EoQQHkzg@2x.png\n    Publication:\n      title: Publication Info\n      type: object\n      properties:\n        id:\n          type: string\n          description: A unique identifier for the publication.\n        name:\n          type: string\n          description: The publication’s name on Medium.\n        description:\n          type: string\n          description: Short description of the publication\n        url:\n          type: string\n          description: The URL to the publication’s homepage\n        imageUrl:\n          type: string\n          description: The URL to the publication’s image/logo\n      description: Publications provide a way for authors to work collaboratively\n        within a common narrative framework, brand or point of view.\n      example:\n        id: b969ac62a46b\n        name: About Medium\n        description: What is this thing and how does it work?\n        url: https://medium.com/about\n        imageUrl: https://cdn-images-1.medium.com/fit/c/200/200/0*ae1jbP_od0W6EulE.jpeg\n    ContributorResponse:\n      title: Contributors list for a publication\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/Contributor'\n      description: list of contributors for a given publication\n      example:\n        data:\n        - publicationId: b45573563f5a\n          userId: 13a06af8f81849c64dafbce822cbafbfab7ed7cecf82135bca946807ea351290d\n          role: editor\n        - publicationId: b45573563f5a\n          userId: 1c9c63b15b874d3e354340b7d7458d55e1dda0f6470074df1cc99608a372866ac\n          role: editor\n        - publicationId: b45573563f5a\n          userId: 1cc07499453463518b77d31650c0b53609dc973ad8ebd33690c7be9236e9384ad\n          role: editor\n        - publicationId: b45573563f5a\n          userId: 196f70942410555f4b3030debc4f199a0d5a0309a7b9df96c57b8ec6e4b5f11d7\n          role: writer\n        - publicationId: b45573563f5a\n          userId: 14d4a581f21ff537d245461b8ff2ae9b271b57d9554e25d863e3df6ef03ddd480\n          role: writer\n    Contributor:\n      title: Contributor\n      type: object\n      properties:\n        publicationId:\n          type: string\n          description: An ID for the publication. This can be lifted from response\n            of publications above\n        userId:\n          type: string\n          description: A user ID of the contributor.\n        role:\n          type: string\n          description: Role of the user identified by userId in the publication identified\n            by `publicationId`. *editor* or *writer*\n      description: Contributor\n    Post:\n      title: Post\n      required:\n      - content\n      - contentFormat\n      - title\n      type: object\n      properties:\n        title:\n          type: string\n          description: The title of the post. Note that this title is used for SEO\n            and when rendering the post as a listing, but will not appear in the actual\n            post—for that, the title must be specified in the content field as well.\n            Titles longer than 100 characters will be ignored. In that case, a title\n            will be synthesized from the first content in the post when it is published.\n        contentFormat:\n          type: string\n          description: The format of the \"content\" field. There are two valid values,\n            \"html\", and \"markdown\"\n        content:\n          type: string\n          description: The body of the post, in a valid, semantic, HTML fragment,\n            or Markdown. Further markups may be supported in the future. For a full\n            list of accepted HTML tags, see here. If you want your title to appear\n            on the post page, you must also include it as part of the post content.\n        tags:\n          type: array\n          description: Tags to classify the post. Only the first three will be used.\n            Tags longer than 25 characters will be ignored.\n          items:\n            type: string\n        canonicalUrl:\n          type: string\n          description: The original home of this content, if it was originally published\n            elsewhere.\n        publishStatus:\n          type: string\n          description: The status of the post. Valid values are `public`, `draft`,\n            or `unlisted`. The default is `public`.\n          default: public\n          enum:\n          - public\n          - draft\n          - unlisted\n        license:\n          type: string\n          description: The license of the post. Valid values are `all-rights-reserved`,\n            `cc-40-by`, `cc-40-by-sa`, `cc-40-by-nd`, `cc-40-by-nc`, `cc-40-by-nc-nd`,\n            `cc-40-by-nc-sa`, `cc-40-zero`, `public-domain`. The default is `all-rights-reserved`.\n          default: all-rights-reserved\n          enum:\n          - all-rights-reserved\n          - cc-40-by\n          - cc-40-by-sa\n          - cc-40-by-nd\n          - cc-40-by-nc\n          - cc-40-by-nc-nd\n          - cc-40-by-nc-sa\n          - cc-40-zero\n          - public-domain\n      example:\n        title: Liverpool FC\n        contentFormat: html\n        content: \u003ch1\u003eLiverpool FC\u003c/h1\u003e\u003cp\u003eYou’ll never walk alone.\u003c/p\u003e\n        canonicalUrl: http://jamietalbot.com/posts/liverpool-fc\n        tags:\n        - football\n        - sport\n        - Liverpool\n        publishStatus: public\n    PostDetails:\n      title: Post Details\n      type: object\n      properties:\n        id:\n          type: string\n          description: A unique identifier for the post.\n        title:\n          type: string\n          description: The post’s title\n        authorId:\n          type: string\n          description: The userId of the post’s author\n        tags:\n          type: array\n          description: The post’s tags\n          items:\n            type: string\n        url:\n          type: string\n          description: The URL of the post on Medium\n        canonicalUrl:\n          type: string\n          description: The canonical URL of the post. If canonicalUrl was not specified\n            in the creation of the post, this field will not be present.\n        publishStatus:\n          type: string\n          description: The publish status of the post.\n        publishedAt:\n          type: integer\n          description: The post’s published date. If created as a draft, this field\n            will not be present.\n          format: date\n        license:\n          type: string\n          description: The license of the post.\n          enum:\n          - all-rights-reserved\n          - cc-40-by\n          - cc-40-by-sa\n          - cc-40-by-nd\n          - cc-40-by-nc\n          - cc-40-by-nc-nd\n          - cc-40-by-nc-sa\n          - cc-40-zero\n          - public-domain\n        licenseUrl:\n          type: string\n          description: The URL to the license of the post.\n      description: Details of Post\n      example:\n        data:\n          id: e6f36a\n          title: Liverpool FC\n          authorId: 5303d74c64f66366f00cb9b2a94f3251bf5\n          tags:\n          - football\n          - sport\n          - Liverpool\n          url: https://medium.com/@majelbstoat/liverpool-fc-e6f36a\n          canonicalUrl: http://jamietalbot.com/posts/liverpool-fc\n          publishStatus: public\n          publishedAt: 1442286338435\n          license: all-rights-reserved\n          licenseUrl: https://medium.com/policy/9db0094a1e0f\n  securitySchemes:\n    BearerToken:\n      type: http\n      scheme: Bearer\n      description: |\n        Self-issued access tokens (described in user-facing copy as integration tokens) are explicitly designed for desktop integrations where implementing browser-based authentication is non-trivial, or software like plugins where it is impossible to secure a client secret. You should not request that a user give you an integration token if you don’t meet these criteria. Users will be cautioned within Medium to treat integration tokens like passwords, and dissuaded from making them generally available.\n\n        Users can generate an access token from the [Settings page](https://medium.com/me/settings) of their Medium account.\n\n        You should instruct your user to visit this URL and generate an integration token from the Integration Tokens section. You should suggest a description for this token - typically the name of your product or feature - and use it consistently for all users.\n\n        Self-issued access tokens currently grant the `basicProfile` and `publishPost` scope. A future iteration of the API will require a user to select the scope they wish to grant access to.\n\n        Self-issued access tokens do not expire, though they may be revoked by the user at any time.\n    OauthSecurity:    \n      type: oauth2\n      description: First you must register an application on Medium. Then we will\n        supply you a clientId and a clientSecret with which you may access Medium’s\n        API. Each integration should have its own clientId and clientSecret. The clientSecret\n        should be treated like a password and stored securely.\n      flows:\n        authorizationCode:\n          authorizationUrl: https://medium.com/m/oauth/authorize\n          tokenUrl: https://medium.com/v1/tokens\n          scopes:\n            basicProfile: Grants basic access to a user’s profile (not including their\n              email).\n            listPublications: Grants the ability to list publications related to the\n              user.\n            publishPost: Grants the ability to publish a post to the user’s profile.\n            uploadImage: \"Grants the ability to upload an image for use within a Medium\\\n              \\ post. \\n\\nNOTE - This is an **extended permission**.\\n\\nIntegrations\\\n              \\ are not permitted to request extended scope from users without explicit\\\n              \\ prior permission from Medium. Attempting to request these permissions\\\n              \\ through the standard user authentication flow will result in an error\\\n              \\ if extended scope has not been authorized for an integration.\\n\"\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/medium/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/medium/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/users/{userId}/publications\": get: security: security \"OauthSecurity\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}