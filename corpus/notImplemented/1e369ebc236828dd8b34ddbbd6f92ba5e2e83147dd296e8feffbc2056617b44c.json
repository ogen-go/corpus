{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geonetwork/geonetwork-ui"
		},
		"file": {
			"name": "spec.yaml",
			"size": 0,
			"path": "libs/data-access/datafeeder/src/spec.yaml",
			"byteSize": 19938,
			"content": "openapi: 3.0.0\nservers:\n  - description: SwaggerHub API Auto Mocking\n    url: https://localhost:8080/\ninfo:\n  title: DataFeeder API\n  description: This API covers dataset upload and publishing features of the application\n  version: \"1.0.0\"\n  contact:\n    email: psc@georchestra.org\ntags:\n  - name: File Upload\n    description: 'API to control jobs related to form based file upload of geospatial datasets'\n  - name: Data Publishing\n    description: 'API to control jobs related to publishing geospatial datasets previously uploaded'\n\npaths:\n  /config/frontend:\n    get:\n      tags:\n        - Config\n      description: 'Get the front-end application configuration object'\n      operationId: getFrontendConfig\n      responses:\n        200:\n          description: Front-end application configuration object\n          content:\n            application/json:\n              schema:\n                type: object\n        401:\n          description: 'Not authenticated'\n\n  /upload:\n    post:\n      tags:\n        - File Upload\n      description: Upload one or multiple files to the server, and get a handle to the job.\n        Once the files are uploaded, the analysis process is automatically triggered. Its status can be polled with GET /upload/{jobId}\n      operationId: uploadFiles\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                filename:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      responses:\n        200:\n          $ref: '#/components/responses/UploadStatusResponse'\n        401:\n          description: 'Not authenticated'\n        403:\n          description: 'Forbidden. User has no priviledges to upload files'\n    get:\n      tags:\n        - File Upload\n      description: 'Poll the status of all the upload jobs owned by the calling user'\n      operationId: findUserUploadJobs\n      responses:\n        200:\n          $ref: '#/components/responses/UploadStatusResponseList'\n        401:\n          description: 'Not authenticated'\n        403:\n          description: 'Forbidden. User has no priviledges to query other users jobs'\n\n  /upload/all:\n    get:\n      tags:\n        - File Upload\n      description: 'Poll the status of all the upload jobs. Access restricted to administrators'\n      operationId: findAllUploadJobs\n      responses:\n        200:\n          $ref: '#/components/responses/UploadStatusResponseList'\n        401:\n          description: 'Not authenticated'\n        403:\n          description: 'Forbidden. User has no priviledges to upload files'\n\n  /upload/{jobId}:\n    get:\n      tags:\n        - File Upload\n      description: 'Poll the status of a given upload job by id'\n      operationId: findUploadJob\n      parameters:\n        - $ref: '#/components/parameters/jobId'\n      responses:\n        200:\n          $ref: '#/components/responses/UploadStatusResponse'\n        401:\n          description: 'Not authenticated'\n        403:\n          description: 'Forbidden. User has no priviledges access the requested job'\n    delete:\n      tags:\n        - File Upload\n      description: 'Remove a job and all its resources (e.g. temporary files). Does not unpublish. Use abort=true to abort a running analysis or publishing job'\n      operationId: removeJob\n      parameters:\n        - $ref: '#/components/parameters/jobId'\n        - name: abort\n          in: query\n          description: If true, abort the dataset analysis or publishing, if running. Defaults to false\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        204:\n          description: 'Job removed.'\n        401:\n          description: 'Not authenticated'\n        403:\n          description: 'Forbidden. User has no priviledges access the requested job'\n        409:\n          description: 'Conflict. The abort=true parameter was not provided and the analysis or publishing job is running'\n\n  /upload/{jobId}/{typeName}/sampleFeature:\n    get:\n      tags:\n        - File Upload\n      operationId: getSampleFeature\n      description: Obtain a sample dataset feature in GeoJSON format, optionally specifying a feature index, crs, and/or dataset's character encoding.\n        The response encoding is always UTF-8. The 'encoding' parameter can be used to force reading the native data in a different charset.\n        The returned geometry CRS is controlled by the \"srs\", and \"srsOverride\" query parameters.\n        If none is provided, the geometry is returned as-is, in the dataset's native CRS (possibly null).\n        The \"srsOverride\" parameter allows to override the dataset's native CRS, which also means assuming a native CRS when the\n        dataset didn't provide a native CRS (e.g. a shapefile uploaded without .prj side-car file).\n        The \"srs\" parameter specifies the output geometry CRS. The geometry will be reprojected from the source CRS to the output CRS.\n      parameters:\n        - $ref: '#/components/parameters/jobId'\n        - $ref: '#/components/parameters/typeName'\n        - name: featureIndex\n          in: query\n          description: Optional feature index, if unspecified, the first feature (index 0) is returned\n          required: false\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n        - name: encoding\n          in: query\n          description: Optional, force dataset encoding\n          required: false\n          schema:\n            type: string\n        - name: srs\n          in: query\n          description: Optional, coordinate reference system (e.g. 'EPSG:3857')\n          required: false\n          schema:\n            type: string\n        - name: srsOverride\n          in: query\n          description: Optional, EPSG SRS used to override the native CRS, or assume a native SRS when the native CRS is unknown (for example, a shapefile uploaded without .prj side-car file).\n            This allows to request a feature using a source CRS for datasets that do not specify a native CRS, and still get a reprojected response to\n            another CRS in combination with the \"srs\" parameter.\n          required: false\n          schema:\n            type: string\n          example: EPSG:4326\n      responses:\n        202:\n          $ref: '#/components/responses/SampleFeatureResponse'\n        400:\n          description: 'Bad request. Some parameter is not acceptable or missing'\n        401:\n          description: 'Not authenticated'\n        403:\n          description: 'Forbidden. User has no priviledges access the requested job'\n\n  /upload/{jobId}/{typeName}/bounds:\n    get:\n      tags:\n        - File Upload\n      operationId: getBounds\n      description: Get the bounding box of the dataset, optionally indicating the CRS and whether to reproject from the native CRS to the new one\n        The returned geometry CRS is controlled by the \"srs\", and \"srsOverride\" query parameters.\n        If none is provided, the geometry is returned as-is, in the dataset's native CRS (possibly null).\n        The \"srsOverride\" parameter allows to override the dataset's native CRS, which also means assuming a native CRS when the\n        dataset didn't provide a native CRS (e.g. a shapefile uploaded without .prj side-car file).\n        The \"srs\" parameter specifies the output geometry CRS. The geometry will be reprojected from the source CRS to the output CRS.\n      parameters:\n        - $ref: '#/components/parameters/jobId'\n        - $ref: '#/components/parameters/typeName'\n        - name: srs\n          in: query\n          description: Optional, output coordinate reference system (e.g. 'EPSG:3857')\n          required: false\n          schema:\n            type: string\n        - name: srsOverride\n          in: query\n          description: Optional, EPSG SRS used to override the native CRS, or assume a native SRS when the native CRS is unknown (for example, a shapefile uploaded without .prj side-car file).\n            This allows to request the dataset bounds using a user defined native CRS for datasets that do not specify a native CRS,\n            and still get a reprojected response to another CRS in combination with the \"srs\" parameter.\n          required: false\n          schema:\n            type: string\n          example: EPSG:4326\n      responses:\n        202:\n          $ref: '#/components/responses/BoundingBoxResponse'\n        400:\n          description: 'Bad request. Some parameter is not acceptable or missing'\n        401:\n          description: 'Not authenticated'\n        403:\n          description: 'Forbidden. User has no priviledges access the requested job'\n\n  /upload/{jobId}/publish:\n    post:\n      tags:\n        - Data Publishing\n      description: 'Publish the dataset(s) from the given upload'\n      operationId: publish\n      parameters:\n        - $ref: '#/components/parameters/jobId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PublishRequest'\n      responses:\n        202:\n          $ref: '#/components/responses/PublishStatusResponse'\n        400:\n          description: 'Bad request. Some parameter is not acceptable or missing'\n        401:\n          description: 'Not authenticated'\n        403:\n          description: 'Forbidden. User has no priviledges access the requested job'\n        409:\n          description: 'Conflict. The upload is not ready for publishing.'\n    get:\n      tags:\n        - Data Publishing\n      description: 'Poll the publishing staus of the given job'\n      operationId: getPublishingStatus\n      parameters:\n        - $ref: '#/components/parameters/jobId'\n      responses:\n        200:\n          $ref: '#/components/responses/PublishStatusResponse'\n        400:\n          description: 'Bad request. Some parameter is not acceptable or missing'\n        401:\n          description: 'Not authenticated'\n        403:\n          description: 'Forbidden. User has no priviledges access the requested job'\n\ncomponents:\n  parameters:\n    jobId:\n      name: jobId\n      in: path\n      description: Unique job identifier\n      required: true\n      schema:\n        type: string\n        format: uuid\n    typeName:\n      name: typeName\n      in: path\n      description: Feature type name\n      required: true\n      schema:\n        type: string\n  responses:\n    UploadStatusResponseList:\n      description: Processing status of a list of dataset upload job\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/UploadJobStatus'\n    UploadStatusResponse:\n      description: Processing status of a dataset upload job\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UploadJobStatus'\n    PublishStatusResponse:\n      description: Processing status of a dataset publishing job\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PublishJobStatus'\n    SampleFeatureResponse:\n      description: Sample feature for an uploaded dataset\n      content:\n        application/geo+json:\n          schema:\n            type: object\n    BoundingBoxResponse:\n      description: dataset bounds in the requested CRS, if given, defaults to the native CRS\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BoundingBox'\n  schemas:\n    AnalysisStatusEnum:\n      type: string\n      enum: [PENDING, ANALYZING, DONE, ERROR]\n    PublishStatusEnum:\n      type: string\n      enum: [PENDING, RUNNING, DONE, ERROR]\n    PublishStepEnum:\n      type: string\n      enum: [SKIPPED, SCHEDULED, DATA_IMPORT_STARTED, DATA_IMPORT_FINISHED, OWS_PUBLISHING_STARTED, OWS_PUBLISHING_FINISHED, METADATA_PUBLISHING_STARTED, METADATA_PUBLISHING_FINISHED, OWS_METADATA_UPDATE_STARTED, OWS_METADATA_UPDATE_FINISHED, COMPLETED]\n\n    UploadJobStatus:\n      type: object\n      description: Describes the status of processing a dataset upload\n      properties:\n        jobId:\n          type: string\n          format: uuid\n          description: Identifier for the upload processing job\n        progress:\n          description: Estimated completion progress, from 0 to 1.\n          type: number\n          format: double\n          minimum: 0.0\n          maximum: 1.0\n          default: 0.0\n        status:\n          $ref: '#/components/schemas/AnalysisStatusEnum'\n          description: aggregate of status of all datasets in the upload package. If any dataset status is PENDING, ANALYZING, or ERROR, that's the job's status.\n            If at least one dataset status is ERROR, then the job status is ERROR. If no datasets where recognized in the upload, status is ERROR.\n        error:\n          type: string\n          description: short description of the error that prevents the job to complete successfully\n        datasets:\n          type: array\n          items:\n            $ref: '#/components/schemas/DatasetUploadStatus'\n\n    DatasetUploadStatus:\n      type: object\n      description: Describes a recognized uploaded dataset\n      properties:\n        name:\n          type: string\n          description: Name of the dataset in the uploaded package\n        status:\n          $ref: '#/components/schemas/AnalysisStatusEnum'\n        error:\n          type: string\n          description: short description of the error that prevents the dataset to be analysed\n        featureCount:\n          type: integer\n          format: int32\n          description: Number of features in the dataset\n        nativeBounds:\n          $ref: '#/components/schemas/BoundingBox'\n        encoding:\n          type: string\n          description: detected charset\n\n    Property:\n      type: object\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        type:\n          type: string\n\n    CRS:\n      type: object\n      description: Coordinate Reference System\n      properties:\n        srs:\n          type: string\n          description: Coordinate Reference System's EPSG identifier.\n            Can be null if a matching reference system couldn't be found in the EPSG database.\n        wkt:\n          type: string\n          description: Coordinate Reference System's Well Known Text representation. Despite the 'srs' identifier being found or not, the WKT representation is still available.\n    BoundingBox:\n      type: object\n      properties:\n        crs:\n          $ref: '#/components/schemas/CRS'\n        minx:\n          type: number\n          format: double\n        maxx:\n          type: number\n          format: double\n        miny:\n          type: number\n          format: double\n        maxy:\n          type: number\n          format: double\n\n    PublishRequest:\n      type: object\n      properties:\n        datasets:\n          type: array\n          items:\n            $ref: '#/components/schemas/DatasetPublishRequest'\n\n    DatasetMetadata:\n      type: object\n      description: User supplied dataset metadata information\n      required:\n        - title\n        - abstract\n      properties:\n        title:\n          type: string\n          description: Metadata title for the dataset\n        abstract:\n          type: string\n          description: Metadata abtract text for the dataset\n        tags:\n          type: array\n          description: metadata keyworkds for the dataset\n          items:\n            type: string\n        creationDate:\n          description: Dataset creation date, in RFC3339 format\n          type: string\n          format: date\n          example: 2017-07-21\n        scale:\n          description: Optional, scale the data was created for (e.g. 500000 for a 1:500000 scale)\n          type: integer\n          format: int32\n          example: 25000\n        creationProcessDescription:\n          type: string\n          description: textual description of dataset lineage\n\n    DatasetPublishRequest:\n      type: object\n      description: Name of the dataset in the uploaded package, necessary to identify which dataset to publish from the UploadJobStatus\n      required:\n        - nativeName\n        - metadata\n      properties:\n        nativeName:\n          type: string\n          description: Name of the dataset in the uploaded package, necessary to identify which dataset to publish from the UploadJobStatus\n        publishedName:\n          type: string\n          description: Name under which the dataset is published to GeoServer, defaults to nativeName. It can be modified by the system to avoid duplicated layer names.\n        encoding:\n          type: string\n          description: Specify which charset (e.g. ISO-8859-1, UTF-8, etc.) to interpret the dataset alphanumeric properties with. Takes effect only for uploaded shapefiles.\n        srs:\n          description: Optional, Coordinate Reference System identifier to publish the dataset in. If not provided, the dataset is published using the CRS inferred\n            during the upload analysis process. If no CRS identifier was determined, the job will fail.\n          type: string\n        srs_reproject:\n          description: Optional, whether to reproject from the native CRS to the one provided in the srs parameter.\n            If false or not provided, the srs parameter overrides the native CRS without reprojection.\n          type: boolean\n          default: false\n        metadata:\n          $ref: '#/components/schemas/DatasetMetadata'\n\n    PublishJobStatus:\n      type: object\n      description: Describes the processing status of a publishing job for a given upload\n      properties:\n        jobId:\n          type: string\n          format: uuid\n          description: Identifier for the upload processing job\n        progress:\n          description: Estimated completion progress, from 0 to 1.\n          type: number\n          format: double\n          minimum: 0.0\n          maximum: 1.0\n          default: 0.0\n        status:\n          $ref: '#/components/schemas/PublishStatusEnum'\n        error:\n          type: string\n          description: short description of the error that prevents the job to complete successfully\n        datasets:\n          type: array\n          items:\n            $ref: '#/components/schemas/DatasetPublishingStatus'\n\n    DatasetPublishingStatus:\n      type: object\n      description: Describes the status of publishing a given dataset\n      properties:\n        nativeName:\n          type: string\n          description: Name of the dataset in the uploaded package, necessary to identify which dataset to publish from the UploadJobStatus\n        publishedWorkspace:\n          type: string\n          description: Name of the GeoServer workspace under which the dataset has been published.\n        publishedName:\n          type: string\n          description: Final name under which the layer was published to GeoServer. It may have been modified from the requested layer name\n            in order to avoid duplication if a layer with such name already exists in the target GeoServer workspace.\n        metadataRecordId:\n          type: string\n          description: Identifier for the metadta record created while publishing the dataset's metadata to GeoNetwork.\n        title:\n          type: string\n        status:\n          $ref: '#/components/schemas/PublishStatusEnum'\n        error:\n          type: string\n          description: short description of the error that prevents the dataset to be published\n        publish:\n          type: boolean\n          description: true if this dataset is scheduled to be published (as requested through a PublishRequest)\n        progress:\n          description: Estimated completion progress, from 0 to 1.\n          type: number\n          format: double\n          minimum: 0.0\n          maximum: 1.0\n          default: 0.0\n        progressStep:\n          $ref: '#/components/schemas/PublishStepEnum'\n\n",
			"canonicalURL": "/github.com/geonetwork/geonetwork-ui@198896361fb91168f27627b21ba44ae2270cd6e3/-/blob/libs/data-access/datafeeder/src/spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/geonetwork/geonetwork-ui/blob/198896361fb91168f27627b21ba44ae2270cd6e3/libs/data-access/datafeeder/src/spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/upload/{jobId}/{typeName}/sampleFeature\": get: responses: 202: contents: unsupported content types: [application/geo+json]",
	"NotImplemented": [
		"unsupported content types"
	]
}