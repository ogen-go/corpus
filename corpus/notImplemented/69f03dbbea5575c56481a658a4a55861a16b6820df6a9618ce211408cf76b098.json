{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/odan/slim4-skeleton"
		},
		"file": {
			"name": "example_v1.yaml",
			"size": 0,
			"path": "resources/api/example_v1.yaml",
			"byteSize": 9323,
			"content": "openapi: 3.0.2\ninfo:\n  version: 1.0.0\n  title: Slim API\n  contact:\n    name: Company AG\n    url: 'https://example.com'\n    email: apiteam@example.com\n  description: |-\n    This is a sample RESTful Server based on the OpenAPI 3.0 specification. You can find out more about\n    Swagger at [https://swagger.io](https://swagger.io).\n  license:\n    name: Proprietary License\n    url: 'https://en.wikipedia.org/wiki/Proprietary_software'\nexternalDocs:\n  description: External Documentation\n  url: 'https://example.com/documentation'\nservers:\n  - url: 'https://test.example.com/api/v1'\n    description: Test\n  - url: 'https://staging.example.com/api/v1'\n    description: Staging\n  - url: 'https://example.com/api/v1'\n    description: Production\ntags:\n  - name: Customer\nsecurity:\n  - BasicAuth: []\npaths:\n  '/customers':\n    get:\n      tags:\n        - Customer\n      summary: List customers\n      description: 'My description.'\n      operationId: findCustomers\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Customers'\n        '400':\n          $ref: '#/components/responses/400'\n        '403':\n          $ref: '#/components/responses/403'\n        '422':\n          $ref: '#/components/responses/422'\n        '500':\n          $ref: '#/components/responses/500'\n    post:\n      tags:\n        - Customer\n      summary: Create customer\n      description: 'My description.'\n      operationId: createCustomer\n      requestBody:\n        description: Created\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Customer'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  customer_id:\n                    type: integer\n                    format: int32\n                    example: 10\n        '400':\n          $ref: '#/components/responses/400'\n        '403':\n          $ref: '#/components/responses/403'\n        '422':\n          $ref: '#/components/responses/422'\n        '500':\n          $ref: '#/components/responses/500'\n  '/customers/{customer_id}':\n    get:\n      tags:\n        - Customer\n      summary: Get customer\n      description: 'My description.'\n      operationId: getCustomerById\n      parameters:\n        - name: customer_id\n          in: path\n          description: 'The ID that needs to be fetched.'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Customer'\n        '400':\n          $ref: '#/components/responses/400'\n        '403':\n          $ref: '#/components/responses/403'\n        '422':\n          $ref: '#/components/responses/422'\n        '500':\n          $ref: '#/components/responses/500'\n    put:\n      tags:\n        - Customer\n      summary: Update customer\n      description: 'My description.'\n      operationId: updateCustomer\n      parameters:\n        - name: customer_id\n          in: path\n          description: ID that need to be deleted\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Update an existent customer\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Customer'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '403':\n          $ref: '#/components/responses/403'\n        '422':\n          $ref: '#/components/responses/422'\n        '500':\n          $ref: '#/components/responses/500'\n    delete:\n      tags:\n        - Customer\n      summary: Delete customer\n      description: 'My description.'\n      operationId: deleteCustomer\n      parameters:\n        - name: customer_id\n          in: path\n          description: The ID that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '403':\n          $ref: '#/components/responses/403'\n        '422':\n          $ref: '#/components/responses/422'\n        '500':\n          $ref: '#/components/responses/500'\ncomponents:\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n  responses:\n    '200':\n      description: OK.\n      content:\n        application/json: {}\n    '201':\n      description: Created.\n      content:\n        application/json: {}\n    '204':\n      description: Successfully processed.\n      content:\n        application/json: {}\n    '400':\n      description: Bad request.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            error:\n              message: Your request does not seem to be valid.\n              details:\n                - message: 'A more detailed report, if available.'\n    '401':\n      description: Authorization information is missing or invalid.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            error:\n              message: Authorization information is missing or invalid.\n    '403':\n      description: Forbidden.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            error:\n              message: Forbidden. You are not allowed to access this location.\n    '404':\n      description: Not Found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            error:\n              message: Not Found.\n    '405':\n      description: Method not allowed.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            error:\n              message: Request Method not allowed.\n    '406':\n      description: Not acceptable.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            error:\n              message: The requested format is not supported.\n    '415':\n      description: Unsupported Media Type.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            error:\n              message: The media type is not supported.\n    '422':\n      description: Unprocessable Entity.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            error:\n              message: Input validation failed\n              details:\n                - field: email\n                  message: Invalid email address.\n    '500':\n      description: Unexpected error.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            error:\n              message: Unexpected internal Server Error.\n              details:\n                - message: 'A more detailed report, if available.'\n    '503':\n      description: 'Service Unavailable, e.g. Maintenance.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            error:\n              message: Service Unavailable.\n              details:\n                - message: Barakuda is currently under maintenance.\n  schemas:\n    Customer:\n      type: object\n      properties:\n        customer_id:\n          type: integer\n          format: int32\n          example: 10\n        number:\n          type: string\n          example: '100001'\n        name:\n          type: string\n          example: 'Acme AG'\n        street:\n          type: string\n          example: '192 Market Square'\n        postal_code:\n          type: string\n          example: '31772'\n        city:\n          type: string\n          example: 'Atlanta'\n        country:\n          type: string\n          example: 'US'\n        email:\n          type: string\n          example: name@example.com\n    Customers:\n      required:\n        - customers\n      properties:\n        customers:\n          type: array\n          description: List of customers\n          items:\n            $ref: '#/components/schemas/Customer'\n    Error:\n      required:\n        - error\n      properties:\n        error:\n          type: object\n          required:\n            - message\n          properties:\n            message:\n              type: string\n              description: The error message\n            details:\n              type: array\n              items:\n                $ref: '#/components/schemas/ErrorDetails'\n              description: The error details (e.g. validation errors)\n\n    ErrorDetails:\n      properties:\n        field:\n          type: string\n          description: The name of the invalid field\n        message:\n          type: string\n          description: The error message\n",
			"canonicalURL": "/github.com/odan/slim4-skeleton@4e685661d8510dd22284fd7d7e8c4ad7e50a74b4/-/blob/resources/api/example_v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/odan/slim4-skeleton/blob/4e685661d8510dd22284fd7d7e8c4ad7e50a74b4/resources/api/example_v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/customers/{customer_id}\": put: responses: 200: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema"
	]
}