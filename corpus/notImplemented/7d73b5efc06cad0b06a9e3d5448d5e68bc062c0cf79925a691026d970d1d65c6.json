{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/FernandoCalmet/PHP-Slim-REST-API"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "public/docs/swagger.yaml",
			"byteSize": 22908,
			"content": "openapi: 3.0.0\ninfo:\n  title: php-slim-rest-api\n  description: \u003e\n    Example of REST API with [Slim PHP micro framework](http://www.slimframework.com).\n\n\n    This simple RESTful API made in Slim version 3, allows CRUD operations to manage entities like: Users, Tasks and Notes :-)\n  contact: {}\n  version: '1.0'\nservers:\n- url: https://php-slim-rest-api-sql.herokuapp.com/\n  description: My Heroku server using PHP built-in web server.\n- url: http://localhost:8080\n  description: My localhost server using PHP built-in web server.\n- url: http://localhost:8081\n  description: My localhost server using docker and docker compose.\npaths:\n  /:\n    get:\n      tags:\n      - Info\n      summary: Get Help\n      description: Get help about this api.\n      operationId: GetHelp\n      parameters: []\n      responses:\n        200:\n          description: ''\n          headers:\n            Host:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: localhost:8080\n            Date:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: Tue, 18 Jun 2019 22:39:02 +0000\n            Connection:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: close\n            X-Powered-By:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: PHP/7.3.4\n            Access-Control-Allow-Origin:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: '*'\n            Content-Length:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: 463\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetHelp'\n              example:\n                code: 200\n                status: success\n                message:\n                  endpoints:\n                    tasks: http://localhost:8080/api/v1/tasks\n                    users: http://localhost:8080/api/v1/users\n                    notes: http://localhost:8080/api/v1/notes\n                    status: http://localhost:8080/status\n                    this help: http://localhost:8080\n                  version: 0.22.2\n                  timestamp: 1560897542\n      deprecated: false\n  /status:\n    get:\n      tags:\n      - Info\n      summary: Get Status\n      description: Get status of this api.\n      operationId: GetStatus\n      parameters: []\n      responses:\n        200:\n          description: ''\n          headers:\n            Host:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: localhost:8080\n            Date:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: Tue, 18 Jun 2019 22:39:39 +0000\n            Connection:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: close\n            X-Powered-By:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: PHP/7.3.4\n            Access-Control-Allow-Origin:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: '*'\n            Content-Length:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: 228\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetStatus'\n              example:\n                code: 200\n                status: success\n                message:\n                  db:\n                    users: 9\n                    tasks: 10\n                    notes: 5\n                  version: 0.22.2\n                  timestamp: 1560897579\n      deprecated: false\n  /login:\n    post:\n      tags:\n      - Login\n      summary: Login\n      description: Login and get a JWT Token Authorization Bearer to use this api.\n      operationId: Login\n      parameters: []\n      requestBody:\n        description: ''\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoginRequest'\n            example:\n              email: super.email@host.com\n              password: OnePass1\n        required: true\n      responses:\n        200:\n          description: ''\n          headers:\n            Host:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: localhost:8080\n            Date:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: Wed, 22 May 2019 19:24:12 +0000\n            Connection:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: close\n            X-Powered-By:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: PHP/7.3.4\n            Access-Control-Allow-Origin:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: '*'\n            Content-Length:\n              content:\n                text/plain:\n                  schema:\n                    type: string\n                  example: 291\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoginOK'\n              example:\n                code: 200\n                status: success\n                message:\n                  Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMSIsImVtYWlsIjoibUBiLmNvbS5hciIsIm5hbWUiOiJNTkIiLCJpYXQiOjE1NTg1NTMwNTIsImV4cCI6MTU1OTE1Nzg1Mn0.OQyICWlGW0oSUB-ANrYL2OJTdC2v0OQQO3RQQ3W_KLo\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LoginFailed'\n              example:\n                message: 'Login failed: Email or password incorrect.'\n                class: UserException\n                status: error\n                code: 400\n      deprecated: false\n  /api/v1/users:\n    get:\n      tags:\n      - Users\n      summary: Get All Users\n      operationId: GetAllUsers\n      parameters:\n      - name: Authorization\n        in: header\n        description: ''\n        required: true\n        style: simple\n        schema:\n          type: string\n          example: '{{jwt}}'\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n      security: []\n    post:\n      tags:\n      - Users\n      summary: Create User\n      description: Register a new user.\n      operationId: CreateUser\n      parameters: []\n      requestBody:\n        description: ''\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUserRequest'\n            example:\n              name: John User\n              email: super.email@host.com\n              password: OnePass1\n        required: true\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n  /api/v1/users/8:\n    get:\n      tags:\n      - Users\n      summary: Get One User\n      operationId: GetOneUser\n      parameters:\n      - name: Authorization\n        in: header\n        description: ''\n        required: true\n        style: simple\n        schema:\n          type: string\n          example: '{{jwt}}'\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n      security: []\n  /api/v1/users/search/d:\n    get:\n      tags:\n      - Users\n      summary: Search Users\n      operationId: SearchUsers\n      parameters:\n      - name: Authorization\n        in: header\n        description: ''\n        required: true\n        style: simple\n        schema:\n          type: string\n          example: '{{jwt}}'\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n      security: []\n  /api/v1/users/4:\n    put:\n      tags:\n      - Users\n      summary: Update User\n      description: Update a user.\n      operationId: UpdateUser\n      parameters:\n      - name: Authorization\n        in: header\n        description: ''\n        required: true\n        style: simple\n        schema:\n          type: string\n          example: '{{jwt}}'\n      requestBody:\n        description: ''\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUserRequest'\n            example:\n              name: Jhon R\n              email: ram@hotmail.com\n        required: true\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n      security: []\n  /api/v1/users/112:\n    delete:\n      tags:\n      - Users\n      summary: Delete User\n      description: Delete a user.\n      operationId: DeleteUser\n      parameters:\n      - name: Authorization\n        in: header\n        description: ''\n        required: true\n        style: simple\n        schema:\n          type: string\n          example: '{{jwt}}'\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n      security: []\n  /api/v1/tasks:\n    get:\n      tags:\n      - Tasks\n      summary: Get All Tasks\n      description: Get all tasks of a user.\n      operationId: GetAllTasks\n      parameters:\n      - name: Authorization\n        in: header\n        description: ''\n        required: true\n        style: simple\n        schema:\n          type: string\n          example: '{{jwt}}'\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n      security: []\n    post:\n      tags:\n      - Tasks\n      summary: Create Task\n      description: Create a task.\n      operationId: CreateTask\n      parameters:\n      - name: Authorization\n        in: header\n        description: ''\n        required: true\n        style: simple\n        schema:\n          type: string\n          example: '{{jwt}}'\n      requestBody:\n        description: ''\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateTaskRequest'\n            example:\n              name: Go To Sleep\n              description: It's too late, go to sleep man ;-)\n              status: 0\n        required: true\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n      security: []\n  /api/v1/tasks/7:\n    get:\n      tags:\n      - Tasks\n      summary: Get One Task\n      description: Get one task of a user.\n      operationId: GetOneTask\n      parameters:\n      - name: Authorization\n        in: header\n        description: ''\n        required: true\n        style: simple\n        schema:\n          type: string\n          example: '{{jwt}}'\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n      security: []\n  /api/v1/tasks/search:\n    get:\n      tags:\n      - Tasks\n      summary: Search Tasks\n      description: Search tasks of a user.\n      operationId: SearchTasks\n      parameters:\n      - name: statuss\n        in: query\n        description: ''\n        required: true\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int32\n          example: 0\n      - name: Authorization\n        in: header\n        description: ''\n        required: true\n        style: simple\n        schema:\n          type: string\n          example: '{{jwt}}'\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n      security: []\n  /api/v1/tasks/29:\n    put:\n      tags:\n      - Tasks\n      summary: Update Task\n      description: Update a task of a user.\n      operationId: UpdateTask\n      parameters:\n      - name: Authorization\n        in: header\n        description: ''\n        required: true\n        style: simple\n        schema:\n          type: string\n          example: '{{jwt}}'\n      requestBody:\n        description: ''\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateTaskRequest'\n            example:\n              name: Go To Sleep NOW!!\n              description: It's too late, go to sleep man haha...\n              status: 1\n        required: true\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n      security: []\n    delete:\n      tags:\n      - Tasks\n      summary: Delete Task\n      description: Delete a task of a user.\n      operationId: DeleteTask\n      parameters:\n      - name: Authorization\n        in: header\n        description: ''\n        required: true\n        style: simple\n        schema:\n          type: string\n          example: '{{jwt}}'\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n      security: []\n  /api/v1/notes:\n    get:\n      tags:\n      - Notes\n      summary: Get All Notes\n      operationId: GetAllNotes\n      parameters: []\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n    post:\n      tags:\n      - Notes\n      summary: Create Note\n      operationId: CreateNote\n      parameters: []\n      requestBody:\n        description: ''\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateNoteRequest'\n            example:\n              name: New Soccer Note\n              description: Magic Goal...\n        required: true\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n  /api/v1/notes/3:\n    get:\n      tags:\n      - Notes\n      summary: Get One Note\n      operationId: GetOneNote\n      parameters: []\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n  /api/v1/notes/search/note:\n    get:\n      tags:\n      - Notes\n      summary: Search Notes\n      operationId: SearchNotes\n      parameters: []\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n  /api/v1/notes/4:\n    put:\n      tags:\n      - Notes\n      summary: Update Note\n      operationId: UpdateNote\n      parameters: []\n      requestBody:\n        description: ''\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateNoteRequest'\n            example:\n              name: My Note Number 433333\n              description: Free Note?!?!?!\n        required: true\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\n  /api/v1/notes/38:\n    delete:\n      tags:\n      - Notes\n      summary: Delete Note\n      operationId: DeleteNote\n      parameters: []\n      responses:\n        200:\n          description: ''\n          headers: {}\n      deprecated: false\ncomponents:\n  schemas:\n    GetHelp:\n      title: GetHelp\n      required:\n      - code\n      - status\n      - message\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        status:\n          type: string\n        message:\n          $ref: '#/components/schemas/Message'\n      example:\n        code: 200\n        status: success\n        message:\n          endpoints:\n            tasks: http://localhost:8080/api/v1/tasks\n            users: http://localhost:8080/api/v1/users\n            notes: http://localhost:8080/api/v1/notes\n            status: http://localhost:8080/status\n            this help: http://localhost:8080\n          version: 0.22.2\n          timestamp: 1560897542\n    Message:\n      title: Message\n      required:\n      - endpoints\n      - version\n      - timestamp\n      type: object\n      properties:\n        endpoints:\n          $ref: '#/components/schemas/Endpoints'\n        version:\n          type: string\n        timestamp:\n          type: integer\n          format: int32\n      example:\n        endpoints:\n          tasks: http://localhost:8080/api/v1/tasks\n          users: http://localhost:8080/api/v1/users\n          notes: http://localhost:8080/api/v1/notes\n          status: http://localhost:8080/status\n          this help: http://localhost:8080\n        version: 0.22.2\n        timestamp: 1560897542\n    Endpoints:\n      title: Endpoints\n      required:\n      - tasks\n      - users\n      - notes\n      - status\n      - this help\n      type: object\n      properties:\n        tasks:\n          type: string\n        users:\n          type: string\n        notes:\n          type: string\n        status:\n          type: string\n        this help:\n          type: string\n      example:\n        tasks: http://localhost:8080/api/v1/tasks\n        users: http://localhost:8080/api/v1/users\n        notes: http://localhost:8080/api/v1/notes\n        status: http://localhost:8080/status\n        this help: http://localhost:8080\n    GetStatus:\n      title: GetStatus\n      required:\n      - code\n      - status\n      - message\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        status:\n          type: string\n        message:\n          $ref: '#/components/schemas/Message1'\n      example:\n        code: 200\n        status: success\n        message:\n          db:\n            users: 9\n            tasks: 10\n            notes: 5\n          version: 0.22.2\n          timestamp: 1560897579\n    Message1:\n      title: Message1\n      required:\n      - db\n      - version\n      - timestamp\n      type: object\n      properties:\n        db:\n          $ref: '#/components/schemas/Db'\n        version:\n          type: string\n        timestamp:\n          type: integer\n          format: int32\n      example:\n        db:\n          users: 9\n          tasks: 10\n          notes: 5\n        version: 0.22.2\n        timestamp: 1560897579\n    Db:\n      title: Db\n      required:\n      - users\n      - tasks\n      - notes\n      type: object\n      properties:\n        users:\n          type: integer\n          format: int32\n        tasks:\n          type: integer\n          format: int32\n        notes:\n          type: integer\n          format: int32\n      example:\n        users: 9\n        tasks: 10\n        notes: 5\n    LoginRequest:\n      title: LoginRequest\n      required:\n      - email\n      - password\n      type: object\n      properties:\n        email:\n          type: string\n        password:\n          type: string\n      example:\n        email: super.email@host.com\n        password: OnePass1\n    LoginOK:\n      title: LoginOK\n      required:\n      - code\n      - status\n      - message\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        status:\n          type: string\n        message:\n          $ref: '#/components/schemas/Message2'\n      example:\n        code: 200\n        status: success\n        message:\n          Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMSIsImVtYWlsIjoibUBiLmNvbS5hciIsIm5hbWUiOiJNTkIiLCJpYXQiOjE1NTg1NTMwNTIsImV4cCI6MTU1OTE1Nzg1Mn0.OQyICWlGW0oSUB-ANrYL2OJTdC2v0OQQO3RQQ3W_KLo\n    Message2:\n      title: Message2\n      required:\n      - Authorization\n      type: object\n      properties:\n        Authorization:\n          type: string\n      example:\n        Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMSIsImVtYWlsIjoibUBiLmNvbS5hciIsIm5hbWUiOiJNTkIiLCJpYXQiOjE1NTg1NTMwNTIsImV4cCI6MTU1OTE1Nzg1Mn0.OQyICWlGW0oSUB-ANrYL2OJTdC2v0OQQO3RQQ3W_KLo\n    LoginFailed:\n      title: LoginFailed\n      required:\n      - message\n      - class\n      - status\n      - code\n      type: object\n      properties:\n        message:\n          type: string\n        class:\n          type: string\n        status:\n          type: string\n        code:\n          type: integer\n          format: int32\n      example:\n        message: 'Login failed: Email or password incorrect.'\n        class: UserException\n        status: error\n        code: 400\n    CreateUserRequest:\n      title: CreateUserRequest\n      required:\n      - name\n      - email\n      - password\n      type: object\n      properties:\n        name:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n      example:\n        name: John User\n        email: super.email@host.com\n        password: OnePass1\n    UpdateUserRequest:\n      title: UpdateUserRequest\n      required:\n      - name\n      - email\n      type: object\n      properties:\n        name:\n          type: string\n        email:\n          type: string\n      example:\n        name: Jhon R\n        email: ram@hotmail.com\n    CreateTaskRequest:\n      title: CreateTaskRequest\n      required:\n      - name\n      - description\n      - status\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        status:\n          type: integer\n          format: int32\n      example:\n        name: Go To Sleep\n        description: It's too late, go to sleep man ;-)\n        status: 0\n    UpdateTaskRequest:\n      title: UpdateTaskRequest\n      required:\n      - name\n      - description\n      - status\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        status:\n          type: integer\n          format: int32\n      example:\n        name: Go To Sleep NOW!!\n        description: It's too late, go to sleep man haha...\n        status: 1\n    CreateNoteRequest:\n      title: CreateNoteRequest\n      required:\n      - name\n      - description\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n      example:\n        name: New Soccer Note\n        description: Magic Goal...\n    UpdateNoteRequest:\n      title: UpdateNoteRequest\n      required:\n      - name\n      - description\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n      example:\n        name: My Note Number 433333\n        description: Free Note?!?!?!\ntags:\n- name: Info\n  description: Get information about API.\n- name: Login\n- name: Users\n  description: Manage Users.\n- name: Tasks\n  description: Manage Tasks.\n- name: Notes\n  description: Manage Notes.\n",
			"canonicalURL": "/github.com/FernandoCalmet/PHP-Slim-REST-API@39e28d18aa74928ecc88b7884ce90f1587e1d73b/-/blob/public/docs/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/FernandoCalmet/php-slim-rest-api/blob/39e28d18aa74928ecc88b7884ce90f1587e1d73b/public/docs/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: \"Content-Length\": \"text/plain\": parameter content encoding not implemented",
	"NotImplemented": [
		"parameter content encoding"
	]
}