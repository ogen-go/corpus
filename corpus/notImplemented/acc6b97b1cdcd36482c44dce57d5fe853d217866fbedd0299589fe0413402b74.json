{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dmm-com/mission-dmm-bootcamp-go"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi.yml",
			"byteSize": 14784,
			"content": "openapi: 3.0.0\ninfo:\n  description:\n    \"This is a sample server Twitter Clone server.  You can find out more\n    about     Swagger at [http://swagger.io](http://swagger.io) or on\n    [irc.freenode.net, #swagger](http://swagger.io/irc/).\"\n  version: 1.0.0\n  title: Swagger Twitter Clone\n  contact: {}\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: http://localhost:8080/v1\ntags:\n  - name: health\n    description: Endpoint for healthchecks\n  - name: accounts\n    description: Everything about Accounts\n    externalDocs:\n      description: Find out more\n      url: http://example.com\n  - name: media\n    description: Everything about Media\n    externalDocs:\n      description: Find out more\n      url: http://example.com\n  - name: statuses\n    description: Everything about Statuses\n    externalDocs:\n      description: Find out more\n      url: http://example.com\n  - name: timelines\n    description: Everything about Timelines\n    externalDocs:\n      description: Find out more\n      url: http://example.com\npaths:\n  /health:\n    head:\n      tags:\n        - health\n      summary: Endpoint for healthchecks\n      description: \"\"\n      operationId: headHealth\n      responses:\n        \"200\":\n          description: OK\n    get:\n      tags:\n        - health\n      summary: Endpoint for healthchecks\n      description: \"\"\n      operationId: getHealth\n      responses:\n        \"200\":\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: OK\n  /accounts:\n    post:\n      tags:\n        - accounts\n      summary: Creating an account\n      description: \"\"\n      operationId: addAcount\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  example: john\n                  description: The username of the account\n                password:\n                  type: string\n                  example: P@ssw0rd\n                  description: Password of user\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n  /accounts/update_credentials:\n    post:\n      security:\n      - Auth: []\n      tags:\n        - accounts\n      summary: Updating an account\n      description: \"\"\n      operationId: updateAccount\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                display_name:\n                  description: \"The name to display in the user's profile  \"\n                  type: string\n                note:\n                  description: A new biography for the user\n                  type: string\n                avatar:\n                  description: An avatar for the user (encoded using multipart/form-data)\n                  type: string\n                  format: binary\n                header:\n                  description: A header image for the user (encoded using\n                    multipart/form-data)\n                  type: string\n                  format: binary\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n  \"/accounts/{username}\":\n    get:\n      tags:\n        - accounts\n      summary: Fetching an account\n      description: \"\"\n      operationId: findAccountByID\n      parameters:\n        - name: username\n          in: path\n          description: Username of account to return\n          required: true\n          example: john\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n  \"/accounts/{username}/follow\":\n    post:\n      security:\n      - Auth: []\n      tags:\n        - accounts\n      summary: Following an account\n      description: \"\"\n      operationId: followAcount\n      parameters:\n        - name: username\n          in: path\n          description: Username of account to follow\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Relationship\"\n  \"/accounts/{username}/following\":\n    get:\n      tags:\n        - accounts\n      summary: Getting who account is following\n      description: \"\"\n      operationId: findFollowing\n      parameters:\n        - name: username\n          in: path\n          description: Username of account to follow\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: Maximum number of followings to get (Default 40, Max 80)\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Account\"\n  \"/accounts/{username}/followers\":\n    get:\n      tags:\n        - accounts\n      summary: Getting an account's followers\n      description: \"\"\n      operationId: findFollowers\n      parameters:\n        - name: username\n          in: path\n          description: Username of account to follow\n          required: true\n          schema:\n            type: string\n        - name: max_id\n          in: query\n          description: Get a list of followings with ID less than this value\n          required: false\n          schema:\n            type: integer\n        - name: since_id\n          in: query\n          description: Get a list of followings with ID greater than this value\n          required: false\n          schema:\n            type: integer\n        - name: limit\n          in: query\n          description: Maximum number of followings to get (Default 40, Max 80)\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Account\"\n  \"/accounts/{username}/unfollow\":\n    post:\n      security:\n      - Auth: []\n      tags:\n        - accounts\n      summary: Unfollowing an account\n      description: \"\"\n      operationId: unfollowAccount\n      parameters:\n        - name: username\n          in: path\n          description: Username of account to follow\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Relationship\"\n  /accounts/relationships:\n    get:\n      security:\n      - Auth: []\n      tags:\n        - accounts\n      summary: Getting an account's relationships\n      description: \"\"\n      operationId: findRelationships\n      parameters:\n        - name: username\n          in: query\n          description: Account Usernames (Username Must be Separated by Comma)\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Relationship\"\n  /media:\n    post:\n      tags:\n        - media\n      summary: Uploading a media attachment\n      description: \"\"\n      operationId: addMedia\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  description: Media to be uploaded (encoded using multipart/form-data)\n                  type: string\n                  format: binary\n                description:\n                  description:\n                    A plain-text description of the media, for accessibility\n                    (max 420 chars)\n                  type: string\n              required:\n                - file\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Attachment\"\n  /statuses:\n    post:\n      security:\n      - Auth: []\n      tags:\n        - statuses\n      summary: Posting a new status\n      description: \"\"\n      operationId: addStatus\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                status:\n                  type: string\n                  example: ピタ ゴラ スイッチ♪\n                  description: The text of the status\n                media_ids:\n                  type: array\n                  items:\n                    type: integer\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n  \"/statuses/{id}\":\n    get:\n      tags:\n        - statuses\n      summary: Fetching an status\n      description: \"\"\n      operationId: findStatusByID\n      parameters:\n        - name: id\n          in: path\n          description: ID of Status to return\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n    delete:\n      security:\n      - Auth: []\n      tags:\n        - statuses\n      summary: Deleting a status\n      description: \"\"\n      operationId: deleteStatus\n      parameters:\n        - name: id\n          in: path\n          description: ID of Status to delete\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n  /timelines/home:\n    get:\n      security:\n      - Auth: []\n      tags:\n        - timelines\n      summary: Retrieving a timeline\n      description: \"\"\n      operationId: findHomeTimelines\n      parameters:\n        - \u0026a1\n          name: only_media\n          in: query\n          description:\n            Only return statuses that have media attachments (public and tag\n            timelines only)\n          required: false\n          schema:\n            type: integer\n        - \u0026a2\n          name: max_id\n          in: query\n          description: Get a list of followings with ID less than this value\n          required: false\n          schema:\n            type: integer\n        - \u0026a3\n          name: since_id\n          in: query\n          description: Get a list of followings with ID greater than this value\n          required: false\n          schema:\n            type: integer\n        - \u0026a4\n          name: limit\n          in: query\n          description: Maximum number of followings to get (Default 40, Max 80)\n          required: false\n          schema:\n            type: integer\n      responses: \u0026a5\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Status\"\n  /timelines/public:\n    get:\n      tags:\n        - timelines\n      summary: Retrieving a timeline\n      description: \"\"\n      operationId: findPublicTimelines\n      parameters:\n        - *a1\n        - *a2\n        - *a3\n        - *a4\n      responses: *a5\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://example.com\ncomponents:\n  securitySchemes:\n    Auth:\n      type: apiKey\n      name: Authentication\n      in: header\n  schemas:\n    Account:\n      type: object\n      properties:\n        username:\n          type: string\n          description: The username of the account\n          example: john\n        display_name:\n          type: string\n          description: The account's display name\n          example: ジョン\n        create_at:\n          type: string\n          format: date-time\n          description: The time the account was created\n        followers_count:\n          type: integer\n          description: The number of followers for the account\n          example: 52\n        following_count:\n          type: integer\n          description: The number of accounts the given account is following\n          example: 128\n        note:\n          type: string\n          description: Biography of user\n        avatar:\n          type: string\n          description: URL to the avatar image\n        header:\n          type: string\n          description: URL to the header image\n    Relationship:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Target account id\n        following:\n          type: boolean\n          description: Whether the user is currently following the account\n        followed_by:\n          type: boolean\n          description: Whether the user is currently being followed by the account\n    Attachment:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the attachment\n          example: 123\n        type:\n          type: string\n          description: 'One of: \"image\", \"video\", \"gifv\", \"unknown\"'\n          example: \"image\"\n        url:\n          type: string\n          description: URL of the image\n        description:\n          type: string\n          description: A description of the image for the visually impaired (maximum 420 characters), or `null` if none provided\n    Status:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The ID of the status\n          example: 123\n        account:\n          $ref: \"#/components/schemas/Account\"\n        content:\n          type: string\n          description: Body of the status; this will contain HTML (remote HTML already sanitized)\n          example: ピタ ゴラ スイッチ♪\n        create_at:\n          type: string\n          format: date-time\n          description: The time the status was created\n        media_attachments:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Attachment\"\n",
			"canonicalURL": "/github.com/dmm-com/mission-dmm-bootcamp-go@43ad709097a3f711a990ff67508855e40474b00c/-/blob/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/dmm-com/mission-dmm-bootcamp-go/blob/43ad709097a3f711a990ff67508855e40474b00c/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/health\": get: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}