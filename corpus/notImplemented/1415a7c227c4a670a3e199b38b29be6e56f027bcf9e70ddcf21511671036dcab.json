{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hpi-schul-cloud/schulcloud-server"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "src/services/roster/docs/openapi.yaml",
			"byteSize": 4917,
			"content": "security:\n  - jwtBearer: []\ninfo:\n  title: Schul-Cloud Roster Service API\n  description: This is the API specification for the Schul-Cloud Roster service.\n\n  contact:\n    name: support\n    email: info@dbildungscloud.de\n  license:\n    name: GPL-3.0\n    url: 'https://github.com/hpi-schul-cloud/schulcloud-server/blob/master/LICENSE'\n  version: 1.0.0\ncomponents:\n  securitySchemes:\n    jwtBearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    user_roster_metadata:\n      description: Roster metadata of a user\n      properties:\n        data:\n          type: object\n          properties:\n            user_id:\n              type: string\n              pattern: '[a-f0-9]{24}'\n            username:\n              type: string\n            'type':\n              type: string\n              enum:\n                - teacher\n                - student\n    usergroup_roster_metadata:\n      description: Roster metadata for a user groups\n      type: object\n      properties:\n        group_id:\n          type: string\n          pattern: '[a-f0-9]{24}'\n          description: course id reference\n        name:\n          type: string\n          description: course name\n        student_count:\n          type: integer\n          minimum: 1\n    usergroups_roster_metadata:\n      type: object\n      properties:\n        data:\n          type: object\n          properties:\n            groups:\n              type: array\n              items:\n                $ref: '#/components/schemas/usergroup_roster_metadata'\n    usergroup_user_roster_metadata:\n      type: object\n      properties:\n        user_id:\n          type: string\n          description: users pseudonym\n        username:\n          type: string\n          description: iframe html data with client url to display username in browsers\n    groups_roster_metadata:\n      type: object\n      properties:\n        data:\n          type: object\n          properties:\n            students:\n              type: array\n              items:\n                $ref: '#/components/schemas/usergroup_user_roster_metadata'\n            teachers:\n              items:\n                $ref: '#/components/schemas/usergroup_user_roster_metadata'\npaths:\n  /roster:\n    get:\n      parameters: []\n      responses:\n        '200':\n          description: success\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: Roster interface available\n      description: Health check for roster service.\n      summary: ''\n      tags:\n        - roster\n      security: []\n  '/roster/users/{user}/metadata':\n    get:\n      parameters:\n        - in: path\n          name: user\n          schema:\n            type: string\n          required: true\n          description: user parameter\n        - in: query\n          name: pseudonym\n          schema:\n            type: string\n          required: true\n          description: user pseudonym\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_roster_metadata'\n        '500':\n          description: general error\n      description: Retrieves user metadata for roster.\n      summary: ''\n      tags:\n        - roster\n      security: []\n  '/roster/users/{user}/groups':\n    get:\n      parameters:\n        - in: path\n          name: user\n          schema:\n            type: string\n          required: true\n          description: user parameter\n        - in: query\n          name: toolId\n          schema:\n            type: string\n          required: true\n          description: tool id\n        - in: query\n          name: pseudonym\n          schema:\n            type: string\n          required: true\n          description: user pseudonym\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/usergroups_roster_metadata'\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - roster\n      security: []\n  '/roster/groups/{id}':\n    get:\n      parameters:\n        - in: path\n          name: id\n          description: ID of groups to return\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/groups_roster_metadata'\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - roster\n      security: []\n\nopenapi: 3.0.2\ntags:\n  - name: roster\n    description: A roster service.\n",
			"canonicalURL": "/github.com/hpi-schul-cloud/schulcloud-server@4e31cf4d98cb961a0a1143c57607e2e6fc67d71c/-/blob/src/services/roster/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/hpi-schul-cloud/schulcloud-server/blob/4e31cf4d98cb961a0a1143c57607e2e6fc67d71c/src/services/roster/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/roster\": get: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}