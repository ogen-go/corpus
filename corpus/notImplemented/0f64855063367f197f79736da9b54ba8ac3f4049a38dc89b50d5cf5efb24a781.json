{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Swagger2Markup/swagger2markup"
		},
		"file": {
			"name": "swagger_petstore.yaml",
			"size": 0,
			"path": "openapi2markup/src/test/resources/yaml/swagger_petstore.yaml",
			"byteSize": 19208,
			"content": "openapi: 3.0.0\ninfo:\n  description: \u003e\n    This is a sample server Petstore server.\n\n\n    [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.\n\n\n    For this sample, you can use the api key `special-key` to test the authorization filters\n  version: 1.0.0\n  title: Swagger Petstore\n  termsOfService: http://helloreverb.com/terms/\n  contact:\n    name: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: pet\n    description: Pet resource\n  - name: store\n    description: Store resource\n  - name: user\n    description: User resource\npaths:\n  /pets:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"405\":\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write_pets\n            - read_pets\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"400\":\n          $ref: \"#/components/responses/InvalidId\"\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - write_pets\n            - read_pets\n  /pets/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma seperated strings\n      operationId: findPetsByStatus\n      parameters:\n        - in: query\n          name: status\n          description: Status values that need to be considered for filter\n          required: false\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n            X-Rate-Limit-Remaining:\n              description: The number of remaining requests in the current period\n              schema:\n                type: integer\n            X-Rate-Limit-Reset:\n              description: The number of seconds left in the current period\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid status value\n      security:\n        - petstore_auth:\n            - write_pets\n            - read_pets\n  /pets/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Muliple tags can be provided with comma seperated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - in: query\n          name: tags\n          description: Tags to filter by\n          required: false\n          example: adorable\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n            X-Rate-Limit-Remaining:\n              description: The number of remaining requests in the current period\n              schema:\n                type: integer\n            X-Rate-Limit-Reset:\n              description: The number of seconds left in the current period\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid tag value\n      security:\n        - petstore_auth:\n            - write_pets\n            - read_pets\n  \"/pets/{petId}\":\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a pet when ID \u003c 10.  ID \u003e 10 or nonintegers will simulate API\n        error conditions\n      operationId: getPetById\n      parameters:\n        - in: path\n          name: petId\n          description: ID of pet that needs to be fetched\n          required: true\n          example: 30\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n            X-Rate-Limit-Remaining:\n              description: The number of remaining requests in the current period\n              schema:\n                type: integer\n            X-Rate-Limit-Reset:\n              description: The number of seconds left in the current period\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          $ref: \"#/components/responses/InvalidId\"\n        \"404\":\n          description: Pet not found\n      security:\n        - api_key: []\n        - petstore_auth:\n            - write_pets\n            - read_pets\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n        - in: path\n          name: petId\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n              required:\n                - name\n                - status\n      responses:\n        \"405\":\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write_pets\n            - read_pets\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: \"\"\n      operationId: deletePet\n      parameters:\n        - in: header\n          name: api_key\n          description: \"\"\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: petId\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid pet value\n      security:\n        - petstore_auth:\n            - write_pets\n            - read_pets\n  /stores/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: \"\"\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        description: order placed for purchasing the pet\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n            X-Rate-Limit-Remaining:\n              description: The number of remaining requests in the current period\n              schema:\n                type: integer\n            X-Rate-Limit-Reset:\n              description: The number of seconds left in the current period\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid Order\n  \"/stores/order/{orderId}\":\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value \u003c= 5 or \u003e 10. Other values\n        will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - in: path\n          name: orderId\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n            X-Rate-Limit-Remaining:\n              description: The number of remaining requests in the current period\n              schema:\n                type: integer\n            X-Rate-Limit-Reset:\n              description: The number of seconds left in the current period\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          $ref: \"#/components/responses/InvalidId\"\n        \"404\":\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with value \u003c 1000. Anything above\n        1000 or nonintegers will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - in: path\n          name: orderId\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          $ref: \"#/components/responses/InvalidId\"\n        \"404\":\n          description: Order not found\n  /users:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Created user object\n      responses:\n        default:\n          description: successful operation\n  /users/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /users/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /users/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: \"\"\n      operationId: loginUser\n      parameters:\n        - in: query\n          name: username\n          description: The user name for login\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: password\n          description: The password for login in clear text\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n            X-Rate-Limit-Remaining:\n              description: The number of remaining requests in the current period\n              schema:\n                type: integer\n            X-Rate-Limit-Reset:\n              description: The number of seconds left in the current period\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                type: string\n            application/xml:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid username/password supplied\n  /users/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  \"/users/{username}\":\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: \"\"\n      operationId: getUserByName\n      parameters:\n        - in: path\n          name: username\n          description: The name that needs to be fetched. Use user1 for testing.\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit-Limit:\n              description: The number of allowed requests in the current period\n              schema:\n                type: integer\n            X-Rate-Limit-Remaining:\n              description: The number of remaining requests in the current period\n              schema:\n                type: integer\n            X-Rate-Limit-Reset:\n              description: The number of seconds left in the current period\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - in: path\n          name: username\n          description: name that need to be deleted\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Updated user object\n      responses:\n        \"400\":\n          description: Invalid user supplied\n        \"404\":\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - in: path\n          name: username\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: http://petstore.swagger.io/v2\ncomponents:\n  responses:\n    InvalidId:\n      description: Invalid ID supplied\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/User\"\n      description: List of user object\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n      description: Pet object that needs to be added to the store\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n      description: This is another description\n    petstore_auth:\n      type: oauth2\n      description: This is a standard oauth flow\n      flows:\n        implicit:\n          authorizationUrl: http://petstore.swagger.io/api/oauth/dialog\n          scopes:\n            write_pets: modify pets in your account\n            read_pets: read your pets\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n          description: The name of the category\n          minLength: 0\n          maxLength: 255\n          pattern: \"[A-Za-zäöüÄÖÜß]{0,255}\"\n          default: DefaultCategory\n          example: FoobarCategory\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \"#/components/schemas/Category\"\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          items:\n            type: string\n        tags:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        status:\n          type: string\n          description: pet status in the store,\n          enum:\n            - Dead\n            - Alive\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n          minimum: 0\n          maximum: 10000\n          default: 0\n          example: 10\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - Ordered\n            - Cancelled\n        complete:\n          type: boolean",
			"canonicalURL": "/github.com/Swagger2Markup/swagger2markup@ac22f6340410daeae82fe2c5954624f82076d6c3/-/blob/openapi2markup/src/test/resources/yaml/swagger_petstore.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Swagger2Markup/swagger2markup/blob/ac22f6340410daeae82fe2c5954624f82076d6c3/openapi2markup/src/test/resources/yaml/swagger_petstore.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/pets\": put: security: security \"petstore_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}