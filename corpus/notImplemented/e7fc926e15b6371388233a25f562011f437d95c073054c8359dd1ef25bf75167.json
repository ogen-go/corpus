{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SecureIdentityAlliance/osia"
		},
		"file": {
			"name": "cms.yaml",
			"size": 0,
			"path": "src/doc/yaml/cms.yaml",
			"byteSize": 31361,
			"content": "\n# (c) Secure Identity Alliance\n\nopenapi: 3.0.0\ninfo:\n  description: |\n    The OSIA Credential Management System Interface.\n    \n    Change log:\n    \n    - 1.2.1:\n      - Add missing values in BiometricSubType\n    - 1.2.0:\n      - Change date to date-time\n      - Add the impressionType, mimeType to biometricData\n      - Do not mix fixed properties and additional properties, use a subobject for the additional properties\n      - Add credentialNumber, issuingAuthority, issuingPlace to the credential\n      - Add quality, qualityFormat, algorithm, vendor, templateRef fields to biometricData\n      - Add fields credentialNumber and deliveryOffice to requestData\n      - Add field credentialIds to credentialRequest\n      - Mark some fields (ID, etc.) as readOnly\n      - Rename entity Credential as CredentialData\n      - Remove deleteCredentialRequest and replace it with cancelCredentialRequest\n      - Change the type of priority from string to integer to be consistent with other OSIA interfaces\n    - 1.1.0:\n      - Add error structure on 400 errors\n      - Add signature in biometricType\n      - Force additionalProperties to false when extension is not allowed\n      - Add fields on BiometricData: instance, metadata, comment, missing, template (needed when inserted in the credential)\n      - Add a requestData entity to group the request of data\n      - Extend the allowed values for the status\n      - Add a service to change the status\n    - 1.0.0: Initial version\n\n  version: 1.2.1\n  title: OSIA Credential Management System Interface\n  license:\n    name: SIA\n    url: \"https://raw.githubusercontent.com/SecureIdentityAlliance/osia/master/LICENSE\"\ntags:\n  - name: Credential Request\n  - name: Credential\n  - name: Credential Profile\nservers:\n  - url: http://cms.com/\n  - url: https://cms.com/\npaths:\n\n  /v1/credentialRequests/{credentialRequestId}:\n    post:\n      tags:\n        - Credential Request\n      summary: Create a request for a credential\n      operationId: createCredentialRequest\n      security:\n        - BearerAuth: [cms.request.write]\n      parameters:\n        - name: credentialRequestId\n          in: path\n          description: the id of the credential request\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CredentialRequest'\n      responses:\n        '201':\n          description: Operation successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Operation not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n    get:\n      tags:\n        - Credential Request\n      summary: Read a credential request\n      operationId: readCredentialRequest\n      security:\n        - BearerAuth: [cms.request.read]\n      parameters:\n        - name: credentialRequestId\n          in: path\n          description: the id of the credential request\n          required: true\n          schema:\n            type: string\n        - name: attributes\n          in: query\n          description: The (optional) set of attributes to retrieve\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            example:\n              - lastname\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Read successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialRequest'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Read not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - Credential Request\n      summary: Update a credential request\n      operationId: updateCredentialRequest\n      security:\n        - BearerAuth: [cms.request.write]\n      parameters:\n        - name: credentialRequestId\n          in: path\n          description: the id of the credential request\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CredentialRequest'\n      responses:\n        '204':\n          description: Update successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Update not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v1/credentialRequests/{credentialRequestId}/cancel:\n    post:\n      tags:\n        - Credential Request\n      summary: Cancel a credential request\n      operationId: cancelCredentialRequest\n      security:\n        - BearerAuth: [cms.request.write]\n      parameters:\n        - name: credentialRequestId\n          in: path\n          description: the id of the credential request\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Cancel successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Cancel not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/credentials:\n    post:\n      tags:\n        - Credential\n      summary: Retrieve a list of credentials that match the given search criteria\n      operationId: findCredentials\n      security:\n        - BearerAuth: [cms.credential.read]\n      parameters:\n        - name: attributes\n          in: query\n          description: The (optional) set of required attributes to retrieve\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Expressions'\n      responses:\n        '200':\n          description: Read successful\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CredentialData'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Read not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/credentials/{credentialId}:\n    get:\n      tags:\n        - Credential\n      summary: Read a credential\n      operationId: readCredential\n      security:\n        - BearerAuth: [cms.credential.read]\n      parameters:\n        - name: credentialId\n          in: path\n          description: the id of the credential\n          required: true\n          schema:\n            type: string\n        - name: attributes\n          in: query\n          description: The (optional) set of required attributes to retrieve\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Read successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialData'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Read not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/credentials/{credentialId}/suspend:\n    post:\n      tags:\n        - Credential\n      summary: Suspend a credential\n      operationId: suspendCredential\n      security:\n        - BearerAuth: [cms.credential.write]\n      parameters:\n        - name: credentialId\n          in: path\n          description: the id of the credential\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                reason:\n                  type: string\n                  description: the reason for suspension\n      responses:\n        '204':\n          description: Update successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Update not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/credentials/{credentialId}/unsuspend:\n    post:\n      tags:\n        - Credential\n      summary: Unsuspend a credential\n      operationId: unsuspendCredential\n      security:\n        - BearerAuth: [cms.credential.write]\n      parameters:\n        - name: credentialId\n          in: path\n          description: the id of the credential\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                reason:\n                  type: string\n                  description: the reason for unsuspension\n      responses:\n        '204':\n          description: Update successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Update not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/credentials/{credentialId}/revoke:\n    post:\n      tags:\n        - Credential\n      summary: Revoke a credential\n      operationId: revokeCredential\n      security:\n        - BearerAuth: [cms.credential.write]\n      parameters:\n        - name: credentialId\n          in: path\n          description: the id of the credential\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                reason:\n                  type: string\n                  description: the reason for revocation\n\n      responses:\n        '204':\n          description: Update successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Update not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/credentials/{credentialId}/status:\n    post:\n      tags:\n        - Credential\n      summary: Change the status of a credential\n      operationId: setCredentialStatus\n      security:\n        - BearerAuth: [cms.credential.write]\n      parameters:\n        - name: credentialId\n          in: path\n          description: the id of the credential\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - status\n              properties:\n                status:\n                  type: string\n                  description: The new status of the credential\n                reason:\n                  type: string\n                  description: The reason for the change of status\n                requester:\n                  type: string\n                  description: The ID/name of the entity requesting the change\n                comment:\n                  type: string\n                  description: A free comment\n              additionalProperties: false\n      responses:\n        '204':\n          description: Operation successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Operation not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /v1/credentialProfiles:\n    post:\n      tags:\n        - Credential Profile\n      summary: Retrieve a list of credential profiles that match the given search criteria\n      operationId: findCredentialProfiles\n      security:\n        - BearerAuth: [cms.profile.read]\n      parameters:\n        - name: attributes\n          in: query\n          description: The (optional) set of required attributes to retrieve\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Expressions'\n      responses:\n        '200':\n          description: Read successful\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CredentialProfile'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Read not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n\ncomponents:\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          description: Error code\n          type: integer\n          format: int32\n        message:\n          description: Error message\n          type: string\n      additionalProperties: false\n    Address:\n      type: object\n      properties:\n        address1:\n          type: string\n          description: the first line of the address\n        address2:\n          type: string\n          description: the second line of the address\n        city:\n          type: string\n          description: the city of the address\n        state:\n          type: string\n          description: the state of the address\n        postalCode:\n          type: string\n          description: the postal code of the address\n        country:\n          type: string\n          description: the country of the address\n        others:\n          type: object\n          additionalProperties: true\n      additionalProperties: false\n      example:\n        address1: 11 Rue des Rosiers\n        address2: '1st floor'\n        city: Libourne\n        state: 'Gironde'\n        postalCode: '33500'\n        country: France\n    BiographicData:\n      type: object\n      description: The set of biographic data.\n      additionalProperties: true\n      example:\n        firstName: John\n        lastName: Doo\n        dateOfBirth: \"1985-11-30\"\n        gender: M\n        nationality: FRA\n    BiometricData:\n      type: object\n      required:\n        - biometricType\n      properties:\n        biometricType:\n          $ref: '#/components/schemas/BiometricType'\n        biometricSubType:\n          $ref: '#/components/schemas/BiometricSubType'\n        instance:\n          type: string\n          description: Used to separate two distincts biometric items of the same type and subtype\n        encounterId:\n          type: string\n          description: the id of the encounter owner of this biometric\n        image:\n          type: string\n          format: byte\n          description: Base64-encoded image\n        imageRef:\n          type: string\n          format: uri\n          description: URI to an image\n          example: \"http://imageserver.com/image?id=00003\"\n        captureDate:\n          type: string\n          format: date-time\n          example: \"2019-05-21T12:00:00Z\"\n        captureDevice:\n          type: string\n          description: A string identifying the device used to capture the biometric\n        impressionType:\n          $ref: '#/components/schemas/ImpressionType'\n        width:\n          type: integer\n          description: the width of the image\n        height:\n          type: integer\n          description: the height of the image\n        bitdepth:\n          type: integer\n        mimeType:\n          type: string\n          description: the nature and format of the image. The mime type definitions should be in compliance with RFC 6838.\n        resolution:\n          type: integer\n          description: the image resolution (in DPI)\n        compression:\n          $ref: '#/components/schemas/CompressionType'\n        missing:\n          description: Optional properties indicating if a part of the biometric data is missing\n          type: array\n          items:\n            $ref: '#/components/schemas/MissingType'\n        metadata:\n          type: string\n          description: An optional string used to convey information vendor-specific\n        comment:\n          type: string\n          description: A comment about the biometric data\n        template:\n          type: string\n          format: byte\n          description: Base64-encoded template\n        templateRef:\n          type: string\n          format: uri\n          description: URI to the template when it is managed in a dedicated data server\n          example: \"http://dataserver.com/template?id=00014\"\n        templateFormat:\n          $ref: '#/components/schemas/TemplateFormat'\n        quality:\n          type: integer\n          format: int64\n          description: Quality, as a number, of the biometric\n        qualityFormat:\n          $ref: '#/components/schemas/QualityFormat'\n        algorithm:\n          type: string\n        vendor:\n          type: string\n      additionalProperties: false\n    TemplateFormat:\n      type: string\n      description: |\n        Format of the template.\n        One of ISO_19794_2, ISO_19794_2_NS, ISO_19794_2_CS, ISO_19794_2_2011, ANSI_378_2009 or ANSI_378.\n        Can be extended to include additional proprietary template format\n    QualityFormat:\n      type: string\n      description: |\n        Format of the quality.\n        One of ISO_19794, NFIQ, or NFIQ2.\n        Can be extended to include additional proprietary quality format\n    MissingType:\n      type: object\n      properties:\n        biometricSubType:\n          $ref: '#/components/schemas/BiometricSubType'\n        presence:\n          type: string\n          enum: [BANDAGED, AMPUTATED, DAMAGED]\n      additionalProperties: false\n    ImpressionType:\n      type: string\n      enum:\n        - LIVE_SCAN_PLAIN\n        - LIVE_SCAN_ROLLED\n        - NONLIVE_SCAN_PLAIN\n        - NONLIVE_SCAN_ROLLED\n        - LATENT_IMPRESSION\n        - LATENT_TRACING\n        - LATENT_PHOTO\n        - LATENT_LIFT\n        - LIVE_SCAN_SWIPE\n        - LIVE_SCAN_VERTICAL_ROLL\n        - LIVE_SCAN_PALM\n        - NONLIVE_SCAN_PALM\n        - LATENT_PALM_IMPRESSION\n        - LATENT_PALM_TRACING\n        - LATENT_PALM_PHOTO\n        - LATENT_PALM_LIFT\n        - LIVE_SCAN_OPTICAL_CONTACTLESS_PLAIN\n        - OTHER\n        - UNKNOWN\n    BiometricType:\n      type: string\n      enum:\n        - FACE\n        - FINGER\n        - IRIS\n        - SIGNATURE\n        - UNKNOWN\n      example: FINGER\n    BiometricSubType:\n      type: string\n      enum:\n        - UNKNOWN\n        - RIGHT_THUMB\n        - RIGHT_INDEX\n        - RIGHT_MIDDLE\n        - RIGHT_RING\n        - RIGHT_LITTLE\n        - LEFT_THUMB\n        - LEFT_INDEX\n        - LEFT_MIDDLE\n        - LEFT_RING\n        - LEFT_LITTLE\n        - PLAIN_RIGHT_FOUR_FINGERS\n        - PLAIN_LEFT_FOUR_FINGERS\n        - PLAIN_THUMBS\n        \n        - UNKNOWN_PALM\n        - RIGHT_FULL_PALM\n        - RIGHT_WRITERS_PALM\n        - LEFT_FULL_PALM\n        - LEFT_WRITERS_PALM\n        - RIGHT_LOWER_PALM\n        - RIGHT_UPPER_PALM\n        - LEFT_LOWER_PALM\n        - LEFT_UPPER_PALM\n        - RIGHT_OTHER\n        - LEFT_OTHER\n        - RIGHT_INTERDIGITAL\n        - RIGHT_THENAR\n        - RIGHT_HYPOTHENAR\n        - LEFT_INTERDIGITAL\n        - LEFT_THENAR\n        - LEFT_HYPOTHENAR\n        \n        - RIGHT_INDEX_AND_MIDDLE\n        - RIGHT_MIDDLE_AND_RING\n        - RIGHT_RING_AND_LITTLE\n        - LEFT_INDEX_AND_MIDDLE\n        - LEFT_MIDDLE_AND_RING\n        - LEFT_RING_AND_LITTLE\n        - RIGHT_INDEX_AND_LEFT_INDEX\n        - RIGHT_INDEX_AND_MIDDLE_AND_RING\n        - RIGHT_MIDDLE_AND_RING_AND_LITTLE\n        - LEFT_INDEX_AND_MIDDLE_AND_RING\n        - LEFT_MIDDLE_AND_RING_AND_LITTLE\n        \n        - EYE_UNDEF\n        - EYE_RIGHT\n        - EYE_LEFT\n        - EYE_BOTH\n        \n        - PORTRAIT\n        - LEFT_PROFILE\n        - RIGHT_PROFILE\n      example: RIGHT_INDEX\n\n    CompressionType:\n      type: string\n      enum: [NONE, WSQ, JPEG, JPEG2000, PNG]\n      example: WSQ\n\n    RequestData:\n      type: object\n      description: The data describing the request itself\n      required:\n        - priority\n        - credentialProfileId\n        - requestType\n      properties:\n        priority:\n          type: integer\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n        credentialProfileId:\n          type: string\n          description: The id of the credential profile to request\n        requestType:\n          type: string\n          description: The type of request, e.g. first issuance, renewal, etc.\n          enum: [FIRST_ISSUANCE, RENEWAL, REPLACEMENT, OTHER]\n        requestTypeOther:\n          type: string\n          description: Details about the request type when OTHER is selected\n        validFromDate:\n          type: string\n          format: date-time\n          description: May be used to override the default start date of the\n            requested credential.  This must only be later than the current\n            date, not earlier.\n        validToDate:\n          type: string\n          format: date-time\n          description: May be used to override the default expiry date of the\n            requested credential.  This must only be earlier than the default\n            expiry, not later.\n        credentialNumber:\n          type: string\n          description: |\n            Number to be used for the new credentials created.\n            It can be used for example when requesting a digital credential sharing the same\n            number with a physical credential, or when the number is not created by the issuance system.\n        issuingAuthority:\n          type: string\n        deliveryOffice:\n          type: string\n          description: Single code or name identifying the office where the credential has to be delivered\n        deliveryAddress:\n          $ref: '#/components/schemas/Address'\n        parentCredentialId:\n          type: string\n          description: The ID credential used as a reference, or parent, to build a new one\n        others:\n          type: object\n          additionalProperties: true\n      additionalProperties: false\n      example:\n        priority: 1\n        credentialProfileId: ABC\n        requestType: \"FIRST_ISSUANCE\"\n        validFromDate: \"2020-10-08T18:38:56Z\"\n        validToDate: \"2025-10-08T18:38:56Z\"\n        issuingAuthority: OSIA\n        deliveryAddress:\n          address1: 11 Rue des Rosiers\n          city: Libourne\n          postalCode: \"33500\"\n          country: France\n    CredentialRequest:\n      type: object\n      description: A request for a credential\n      required:\n        - personId\n        - biographicData\n        - requestData\n      properties:\n        credentialRequestId:\n          type: string\n          description: The unique id of this credential request\n          readOnly: true\n        status:\n          type: string\n          enum: [PENDING, ISSUED, CANCELLED, FAILED]\n        requestData:\n          $ref: '#/components/schemas/RequestData'\n        personId:\n          type: string\n          description: The id of the person who is the target of the request\n        biographicData:\n          $ref: '#/components/schemas/BiographicData'\n        biometricData:\n          type: array\n          items:\n            $ref: '#/components/schemas/BiometricData'\n        credentialIds:\n          type: array\n          description: The id of the credentials created for this request.\n          items:\n            type: string\n            description: The unique id of the credential\n          readOnly: true\n      additionalProperties: false\n\n    CredentialData:\n      description: A credential\n      type: object\n      required:\n        - credentialId\n        - status\n        - personId\n        - credentialProfileId\n      properties:\n        credentialId:\n          type: string\n          description: The unique id for this credential\n          readOnly: true\n        status:\n          type: string\n          description: The status of the credential\n          enum: [NEW, ACTIVE, SUSPENDED, REVOKED, OTHER]\n          readOnly: true\n        statusOther:\n          type: string\n          description: Details about the status when OTHER is used\n          readOnly: true\n        credentialNumber:\n          type: string\n          description: \"The number attached to the credential (ex: passport number)\"\n        personId:\n          type: string\n          description: The unique id of the person that the credential request is for\n        credentialProfileId:\n          type: string\n          description: The unique id of the credential profile\n        issuedDate:\n          type: string\n          format: date-time\n          description: The date and time that this credential was issued\n        expiryDate:\n          type: string\n          format: date-time\n          description: The date and time that this credential expires\n        serialNumber:\n          type: string\n          description: the serial number of the credential\n        issuingAuthority:\n          type: string\n          description: \"The authority issuing the credential (ex: the Ministry of Interior)\"\n        issuingPlace:\n          type: string\n          description: \"The place where the credential was issued (ex: Paris)\"\n        others:\n          type: object\n          additionalProperties: true\n      additionalProperties: false\n    CredentialProfile:\n      description: A credential profile\n      type: object\n      properties:\n        credentialProfileId:\n          type: string\n          description: The unique id for this credential profile\n        name:\n          type: string\n          description: The name of the credential profile\n        description:\n          type: string\n          description: The description of the credential profile\n        credentialType:\n          description: The type of credential that this profile will issue\n          type: string\n          enum:\n            - SMARTCARD\n            - VIRTUAL_SMARTCARD\n            - MOBILE\n            - PASSPORT\n            - ID_CARD\n        defaultLifetime:\n          type: integer\n          description: The default number of days that this credential will be considered valid for after issuance.\n      additionalProperties: false\n    Expression:\n      type: object\n      required:\n        - attributeName\n        - operator\n        - value\n      properties:\n        attributeName:\n          type: string\n        operator:\n          type: string\n          enum: ['\u003c', '\u003e', '=', '\u003e=', '\u003c=', '!=']\n        value:\n          oneOf:\n          - type: string\n          - type: integer\n          - type: number\n          - type: boolean\n      additionalProperties: false\n    Expressions:\n      type: array\n      items:\n        $ref: '#/components/schemas/Expression'\n        \n",
			"canonicalURL": "/github.com/SecureIdentityAlliance/osia@3985bcb9999ca644b07865dd7e1424cd0e47946e/-/blob/src/doc/yaml/cms.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/SecureIdentityAlliance/osia/blob/3985bcb9999ca644b07865dd7e1424cd0e47946e/src/doc/yaml/cms.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1/credentialProfiles\": post: requestBody: contents: application/json: generate schema: item: field value: oneOf: oneOf ExpressionValue: variant String: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"discriminator inference"
	]
}