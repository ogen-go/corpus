{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/eclipse/codewind"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "docs/openapi.yml",
			"byteSize": 81022,
			"content": "openapi: 3.0.0\n# servers:\n#   - description: Production\n#     url: http://localhost:9090\ninfo:\n  description: Codewind API\n  version: 0.1.0\n  title: Codewind API\n  contact:\n    name: API support\n    email: example@ibm.com\n  license:\n    name: Codewind Developer License\n    url: 'https://github.com/eclipse/codewind/blob/master/LICENSE'\n\n# tags:\n  # - name: users\n  #   description: Operations available to regular users\n  # - name: admin\n  #   description: Operations available only to authenticated admins\npaths:\n  /ready:\n    get:\n      summary: Return true when codewind is ready to accept requests\n      responses:\n        200:\n          description: Status of codewind as a boolean\n\n  /api/v1/environment:\n    get:\n      summary: Get information on the current environment\n      responses:\n        200:\n          description: Returned information about the current environment successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - running_in_k8s\n                  - user_string\n                  - socket_namespace\n                  - codewind_version\n                  - os_platform\n                  - tekton_dashboard\n                properties:\n                  running_in_k8s:\n                    type: boolean\n                    example: false\n                  user_string:\n                    type: string\n                    nullable: true\n                  socket_namespace:\n                    type: string\n                    example: '/default'\n                  codewind_version:\n                    type: string\n                    example: '/latest'\n                  os_platform:\n                    type: string\n                    example: 'Linux'\n                  tekton_dashboard_url:\n                    type: object\n                    properties:\n                      status:\n                        type: boolean\n                      message:\n                        type: string\n                      url:\n                        type: string\n                    example:\n                      status: true\n                      message: ''\n                      url: '9.20.195.90.nip.io'\n                    description: \"An object containing the Ingress URL of Tekton dashboard. If the dashboard is configured and available status=true, if not available then status=false along with a message providing more information.\"\n                  workspace_location:\n                    type: string\n                    example: '/home/user/codewind-workspace'\n        500:\n          description: Internal error occurred\n  /api/v1/projects:\n    get:\n      summary: List all projects Codewind is aware of\n      responses:\n        200:\n          description: Got all projects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Project'\n\n  /api/v1/projects/{id}/build:\n    post:\n      summary: Build a given project\n      parameters:\n        - name: id\n          in: path\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n      requestBody:\n        description: JSON object with the action for the build\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                action:\n                  description: 'Action for build'\n                  type: string\n                  enum: [build, enableautobuild, disableautobuild]\n      responses:\n        202:\n          description: Build successful\n          content:\n            text/html:\n              schema:\n                type: string\n        400:\n          description: Cannot perform action\n          content:\n            text/html:\n              schema:\n                type: string\n        404:\n          description: Unknown action or Project not found\n          content:\n            text/html:\n              schema:\n                type: string\n        500:\n          description: Internal error\n\n  /api/v1/projects/{id}/open:\n    put:\n      summary: Open project\n      parameters:\n        - name: id\n          in: path\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n      responses:\n        200:\n          description: Project successfully opened\n          content:\n            text/html:\n              schema:\n                type: string\n        404:\n          $ref: '#/components/responses/ProjectNotFound'\n\n  /api/v1/projects/{id}/close:\n    put:\n      summary: Send project close request\n      description: \u003e\n        Project close is asynchronous. A return of 202 indicates that the request to close has been accepted.\n        When the close operation completes, a projectClosed socket event will be emitted.\n      parameters:\n        - name: id\n          in: path\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n      responses:\n        202:\n          description: Project close request accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MsgObject'\n        404:\n          description: Project Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MsgObject'\n        409:\n          description: Project is closing or closed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MsgObject'\n\n  /api/v1/projects/{id}/restart:\n    post:\n      summary: Restart a project\n      description: \u003e\n        There are 3 start modes ('run', 'debug', and 'debugNoInit').\n        3 project types can be restarted.\n\n        Microprofile can start in run or debug mode.\n        If restarted in debug mode, it will hang in the starting state until debugger attaches.\n\n        Spring can start in run, debug or debugNoInit modes.\n        If restarted in debug mode, it will hang in the starting state until debugger attaches.\n        To start normally but allow a debugger to connect later use debugNoInit.\n\n        Node can start in run or debugNoInit modes.\n      parameters:\n      - name: id\n        in: path\n        schema:\n          $ref: '#/components/schemas/ProjectID'\n        required: true\n        description: id of project\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - startMode\n              properties:\n                startMode:\n                  type: string\n                  enum: ['run', 'debug', 'debugNoInit']\n      responses:\n        202:\n          description: Successfully initiated restart\n        400:\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/CodewindError'\n                  - type: string\n        404:\n          description: Project Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MsgObject'\n        500:\n          description: Internal error\n\n  /api/v1/projects/bind/start:\n    post:\n      summary: Begin binding a project to Codewind\n      description: \u003e\n        Start binding a project to codewind. The bind api will be passed the location on disk of an existing project so that Codewind\n        adds it to the list of projects it monitors. The project will initially be created in disabled state.\n      requestBody:\n        description: project bind start options\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - name\n                - path\n                - language\n                - projectType\n                - creationTime\n              properties:\n                name:\n                  $ref: '#/components/schemas/ProjectName'\n                path:\n                  description: the absolute path on the file system to the project\n                  type: string\n                  example: /Documents/projectDir/\n                language:\n                  $ref: '#/components/schemas/ProjectLanguage'\n                projectType:\n                  $ref: '#/components/schemas/ProjectType'\n                creationTime:\n                  description: the time in milliseconds since epoch that the project was bound to Codewind\n                  type: number\n                  example: 1574256801163\n\n      responses:\n        202:\n          description: \u003e\n            Bind start request accepted. Will attempt to bind the provided path as a Codewind project.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n        400:\n          $ref: '#/components/responses/400'\n        409:\n          description: The project path or name are already in use\n          content:\n            text/html:\n              schema:\n                type: string\n        500:\n          description: Any other error\n\n  /api/v1/projects/{id}/bind/end:\n    post:\n      summary: Complete binding the project to Codewind\n      description: \u003e\n        Complete binding the project to codewind. The project will be enabled and built.\n      parameters:\n        - name: id\n          in: path\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of the project\n      responses:\n        200:\n          description: \u003e\n            Bind end request accepted. Will complete binding the Codewind project.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n        400:\n          description: \u003e\n            Malformed request or missing project build-file\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CodewindError'\n        404:\n          $ref: '#/components/responses/ProjectNotFound'\n        500:\n          description: Any other error\n\n  /api/v1/projects/{id}/upload:\n    put:\n      summary: Receive gzipped content of a file for the project and write this to the codewind workspace\n      parameters:\n        - name: id\n          in: path\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n      requestBody:\n          description: JSON object containing file info and content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Upload'\n\n      responses:\n        200:\n          description: The file upload was successful\n          content:\n            text/html:\n              schema:\n                type: string\n                example: OK\n        404:\n          $ref: '#/components/responses/ProjectNotFound'\n        500:\n          description: Any other error\n\n  /api/v1/projects/{id}/upload/end:\n    post:\n      summary: Mark the completion of a number of upload events for this project.\n      description: \u003e\n        Complete the upload process for this project. If enabled, the project will be built.\n      parameters:\n        - name: id\n          in: path\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of the project\n      requestBody:\n          description: JSON object containing project information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UploadEnd'\n      responses:\n        200:\n          description: \u003e\n            The project uploads completed successfully and it will now be built.\n          content:\n            text/html:\n              schema:\n                type: string\n                example: OK\n        404:\n          $ref: '#/components/responses/ProjectNotFound'\n        500:\n          description: Any other error\n\n\n  /api/v1/projects/{id}:\n    get:\n      summary: Get the project object for a single project\n      description: Get the project object for the object specified by {id}\n      parameters:\n        - name: id\n          in: path\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n      responses:\n        200:\n          description: The project was found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n        404:\n          $ref: '#/components/responses/ProjectNotFound'\n        500:\n          description: Any other error\n\n  /api/v1/projects/{id}/loadtest:\n    post:\n      summary: Run load against a project\n      description: Run a load test against a project with the specified id\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n          description: id of project\n      requestBody:\n        description: An optional description of the test run\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                description:\n                  description: A description of the test\n                  example: A new load test\n      responses:\n        202:\n          description: Request to run-load accepted\n          content:\n            text/html:\n              schema:\n                type: string\n        404:\n          $ref: '#/components/responses/ProjectNotFound'\n        409:\n          description: Load test already in progress\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CodewindError'\n        503:\n          description: Project is not running\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CodewindError'\n\n  /api/v1/projects/{id}/loadtest/cancel:\n    post:\n      summary: Cancels a load-test against a project\n      description: Cancel a load-test against a given project\n      parameters:\n          - name: id\n            in: path\n            schema:\n              type: string\n            required: true\n            description: id of project\n      responses:\n        200:\n          description: Successful\n          content:\n            text/html:\n              schema:\n                type: string\n        404:\n          $ref: '#/components/responses/ProjectNotFound'\n        409:\n          description: No run in progress for this project\n          content:\n            text/html:\n              schema:\n                $ref: '#/components/schemas/CodewindError'\n        500:\n          description: Internal error\n\n  /api/v1/projects/{id}/capabilities:\n    get:\n      summary: Get a list of supported capabilities for the project\n      parameters:\n          - in: path\n            name: id\n            schema:\n              type: string\n            required: true\n            description: id of project\n      responses:\n        200:\n          description: Successfully completed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  startModes:\n                    type: array\n                    items:\n                      type: string\n                      enum: ['run', 'debug']\n                  controlCommands:\n                    type: array\n                    items:\n                      type: string\n                      enum: ['restart']\n        404:\n          description: Project with given projectID not found\n        500:\n          description: Internal error occurred\n\n  /api/v1/projects/{id}/loadtest/config:\n    post:\n      summary: Writes to runLoad/config.json for a project\n      description: Writes a valid json to the config file used by loadrunner\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n          description: id of project\n      requestBody:\n        description: The config.json object, with all fields required\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoadrunnerConfig'\n      responses:\n        200:\n          description: Write to runLoad/config.json successful\n          content:\n            application/json:\n              schema:\n                type: string\n        400:\n          description: Incorrect parameters given\n        404:\n          $ref: '#/components/responses/ProjectNotFound'\n        500:\n          description: Internal error\n\n    get:\n      summary: Reads the runLoad/config.json\n      description: Reads the runLoad/config.json. If it does not exist, a file with default parameters will be created\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n          description: id of project\n      responses:\n        200:\n          description: Successful read of config.json file\n          content:\n            application/json:\n              schema:\n               $ref: '#/components/schemas/LoadrunnerConfig'\n        400:\n          description: Incorrect parameters given\n        404:\n          $ref: '#/components/responses/ProjectNotFound'\n        500:\n          description: Internal error\n\n  /api/v1/projects/{id}/profiling/{testRunTime}:\n    get:\n      summary: Reads the load run data for the given timestamp\n      description: Reads profiling data from pfe and returns a stream of the file. For java projects, this first copies profiling data\n        from the project pod to PFE.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: id of project\n        - in: path\n          schema:\n            type: string\n          name: testRunTime\n          required: true\n          description: Time of loadtest run\n      responses:\n        200:\n          description: Successful read of load run data\n        400:\n          description: Incorrect parameters given\n        404:\n          description: Project not found\n        500:\n          description: Internal error\n\n\n  /api/v1/projects/{id}/profiling/{testRunTime}/querytree:\n    post:\n      summary: Queries the profiling tree data for the given timestamp\n      description: \u003e\n        Reads profiling data from pfe, runs the supplied JSONPath query against it and returns the results.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: id of project\n        - in: path\n          schema:\n            type: string\n          name: testRunTime\n          required: true\n          description: Time of loadtest run\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - path\n              properties:\n                path:\n                  type: string\n                  description: a JSONPath expression to run.\n      responses:\n        200:\n          description: Successful read of load run data\n        400:\n          description: Incorrect parameters given\n        404:\n          $ref: '#/components/responses/ProjectNotFound'\n        500:\n          description: Internal error\n\n  /api/v1/projects/{id}/profiling/{testRunTime}/querysummary:\n    post:\n      summary: Queries the profiling summary data for the given timestamp\n      description: \u003e\n        Reads profiling summary data from pfe, runs the supplied JSONPath query against it and returns the results.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: id of project\n        - in: path\n          schema:\n            type: string\n          name: testRunTime\n          required: true\n          description: Time of loadtest run\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - path\n              properties:\n                path:\n                  type: string\n                  description: a JSONPath expression to run.\n      responses:\n        200:\n          description: Successful read of load run data\n        400:\n          description: Incorrect parameters given\n        404:\n          $ref: '#/components/responses/ProjectNotFound'\n        500:\n          description: Internal error\n\n  /api/v1/projects/{id}/unbind:\n      post:\n        summary: Unbind a given project from codewind\n        description: \u003e\n          This requests Codewind unbinds the project location for the project with the specified id.\n          Codewind will emit a `projectDeletion` event on completion.\n        parameters:\n          - in: path\n            name: id\n            schema:\n              type: string\n            required: true\n            description: id of project\n        responses:\n          202:\n            description: if project deletion was accepted\n            content:\n              text/html:\n                schema:\n                  type: string\n          404:\n            $ref: '#/components/responses/ProjectNotFound'\n          409:\n            description: if unbind was already in progress\n\n  /api/v1/projects/{id}/compare:\n    get:\n      summary: Compare previous two metrics test runs\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: id of project\n      responses:\n        200:\n          description: \u003e\n            An array of metrics returned as type value pairs.\n            The values are the +/- percentage change (i.e. delta) between the previous two test runs.\n            The delta value can be a single number, an object, or an array of objects.\n            The comparison is only created for data that is common between the two files.\n            If a piece of data is missing from one of the two files, a \"Data unavailable\" message will be returned for that given piece of data, alongside the successfully compared data.\n          content:\n            application/json:\n              schema:\n                type: array\n                minItems: 4\n                maxItems: 4\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/LoadRunMetric'\n        404:\n          description: Specified project doesn't exist, or snapshot is not available (e.g. less than two runs collected for the project)\n          content:\n            text/html:\n              schema:\n                type: string\n        422:\n          description: Specified project doesn't exist, or snapshot is not available (e.g. less than two runs collected for the project)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CodewindError'\n\n  /api/v1/projects/{id}/logs:\n    get:\n      summary: Retrieve the list of logs available for a project.\n      description: \u003e\n        This requests the list of logs currently available for a project.\n        This list may change over time as a project is built and run.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n      responses:\n        200:\n          description: Lists of the logs available grouped by type, build or app.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  build:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/LogDetails'\n                  app:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/LogDetails'\n        404:\n          description: if the project with id was not found\n    post:\n      summary: Start streaming all logs for a given project\n      description: \u003e\n        This requests that all logs currently available for a project start streaming.\n        Logs are sent over socket.io via the 'log-update' event. When a log is enabled\n        for streaming it's current content is sent in one or more 'log-update' events and\n        then any further updates are sent via further 'log-update' events as they occur.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n      responses:\n        200:\n          description: Lists of the logs that have been enabled grouped by type, build or app.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  build:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/LogDetails'\n                  app:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/LogDetails'\n        404:\n          description: if the project with id was not found\n        500:\n          description: if an error occurred\n    delete:\n      summary: Stop streaming any enabled logs for a project.\n      description: \u003e\n        This stops all current log streams for a project.\n        If the log streams are re-enabled later then the logs will be sent from the beginning\n        again.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n          required: true\n          description: id of project\n      responses:\n        200:\n          description: if the log streams were successfully stopped\n        404:\n          description: if the project with id was not found\n        500:\n          description: if an error occurred\n  /api/v1/projects/invalidNameChars:\n    get:\n      summary: Get the list of characters that cannot be used in a project name\n      responses:\n        200:\n          description: The list of characters that are invalid for a project name\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  illegalNameChars:\n                    type: array\n                    items:\n                      type: string\n                      minItems: 10\n                      enum: ['\u0026', '/', '?', '%', '*', ':', '|', '\u003c', '\u003e', ' ']\n        500:\n          description: if error occurred\n\n  /api/v1/projects/{id}/logs/{type}/{name}:\n    post:\n      summary: Start streaming one log for a given project\n      description: \u003e\n        This requests that the specified log for a project starts streaming.\n        Logs are sent over socket.io via the 'log-update' event. When a log is enabled\n        for streaming its current content is sent in one or more 'log-update' events and\n        then any further updates are sent via further 'log-update' events as they occur.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n        - in: path\n          name: type\n          schema:\n            type: string\n            enum: ['app', 'build']\n          required: true\n          description: type of log\n        - in: path\n          name: name\n          schema:\n            type: string\n          required: true\n          description: name of log\n      responses:\n        200:\n          description: if the log stream was successfully enabled\n        404:\n          description: if the project or the specified log were not found\n        500:\n          description: if an error occurred\n    delete:\n      summary: Stop streaming one log for a given project\n      description: \u003e\n        This requests that streaming stops for the specified log.\n        If the log stream is re-enabled later then the log will be sent from the beginning.\n        again.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n        - in: path\n          name: type\n          schema:\n            type: string\n            enum: ['app', 'build']\n          required: true\n          description: type of log\n        - in: path\n          name: name\n          schema:\n            type: string\n          required: true\n          description: name of log\n      responses:\n        200:\n          description: if the log stream was successfully stopped\n        404:\n          description: if the project with id was not found\n        500:\n          description: if an error occurred\n\n  /api/v1/projects/{id}/metrics:\n    get:\n      summary: Get available metrics types with their associated endpoints\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n      responses:\n        200:\n          description: list of objects containing available metric types as strings with their associated endpoints for example\n          content:\n            application/json:\n                schema:\n                 type: array\n                 items:\n                  type: object\n                  example: {\"type\":\"cpu\", \"endpoint\":\"/metrics/cpu\"}\n        404:\n          description: if the project with id was not found\n        500:\n          description: internal error occurred\n\n  /api/v1/locale:\n    post:\n      summary: Sets the backend locale\n      requestBody:\n        description: JSON array with the list of locales in priority order.\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - locale\n              properties:\n                locale:\n                  type: array\n                  example: [ 'en-us', 'en' ]\n      responses:\n        200:\n          description: Language correctly set\n        500:\n          description: Internal error occurred\n\n\n  /api/v1/projects/{id}/metrics/{testRunTime}:\n    put:\n      summary: Add or update the description of the results for a specified loadtest on a project\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n        - in: path\n          name: testRunTime\n          schema:\n            $ref: '#/components/schemas/testRunTime'\n          required: true\n          description: Time of loadtest run\n      requestBody:\n        description: New description for the load-test-results\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                description:\n                  type: string\n                  example: 'new description'\n      responses:\n        200:\n          description: Successful\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - description\n                properties:\n                  description:\n                    type: string\n                additionalProperties: false\n        400:\n          description: Request body missing fields\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MessageObject'\n        404:\n          description: Project or load test results do not exist\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/MessageObject'\n                  - $ref: '#/components/schemas/CodewindError'\n\n        500:\n          description: Internal error\n    delete:\n      summary: Delete the results of a specified load-test run on a project.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n        - in: path\n          name: testRunTime\n          schema:\n            $ref: '#/components/schemas/testRunTime'\n          required: true\n          description: Time of loadtest run\n      responses:\n        200:\n          description: Successful\n          content:\n            text/html:\n              schema:\n                type: string\n        404:\n          description: Project or load test results do not exist\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/MessageObject'\n                  - $ref: '#/components/schemas/CodewindError'\n        500:\n          description: Internal error\n\n  /api/v1/projects/{id}/metrics/inject:\n    post:\n      summary: Enable auto injection of metrics\n      description: \u003e\n        Injects metrics collector into project, or remove injected collector from project\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n          description: id of project\n      requestBody:\n        description: Value indicating whether metrics should be injected\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - enable\n              properties:\n                enable:\n                  type: boolean\n      responses:\n        202:\n          description: Successful update of project information and build triggered\n          content:\n            application/json:\n              schema:\n                type: object\n        404:\n          description: Project not found\n\n  /api/v1/projects/{id}/metrics/auth:\n    post:\n      summary: Disable Microprofile metrics authentication\n      description: \u003e\n        Injects a file into the project container which disables Microprofile metrics authentication\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n          description: id of project\n      requestBody:\n        description: Value indicating whether the file that disables metrics authentication should be injected\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - disable\n              properties:\n                enable:\n                  type: boolean\n      responses:\n        202:\n          description: Successful update of project information and build triggered\n          content:\n            application/json:\n              schema:\n                type: object\n        404:\n          description: Project not found\n\n\n  /api/v1/projects/{id}/metrics/types:\n    post:\n      summary: Get project metrics of a certain type\n      description: \u003e\n        Get all metrics for a certain type or types of metric, for a specific\n        project as specified by the project ID.\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n          description: id of project\n      requestBody:\n        description: Metric types to get metrics for\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - types\n              properties:\n                types:\n                  description: Array of the metric types to get metrics for\n                  type: array\n                  example: [cpu, memory]\n      responses:\n        200:\n          description: \u003e\n            Array of data points in JSON format, as time/value pairs grouped by types.\n            Times are the start time of the load test as Unix Epoch time in milliseconds.\n            The value can be a single number, an object, or an array of objects.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  cpu:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/CpuMetric'\n                  memory:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/BasicMetric'\n\n  /api/v1/projects/{id}/metrics/status:\n    get:\n      summary: Returns the current state of a project's metrics\n      description: \u003e\n        Determines whether a project has a /metric endpoint, is\n        running appmetrics and scans its build file to determine\n        whether it contains the appmetrics or microprofile\n        dependencies\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n          description: id of project\n      responses:\n        200:\n          description: The metrics status check completed successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  metricsAvailable:\n                    type: boolean\n                    example: true\n                  metricsEndpoint:\n                    type: boolean\n                    example: true\n                  appmetricsEndpoint:\n                    type: boolean\n                    example: true\n                  microprofilePackage:\n                    type: boolean\n                    example: true\n                  appmetricsPackage:\n                    type: boolean\n                    example: true\n        404:\n          description: Project not found\n\n  /api/v1/templates:\n    get:\n      summary: List all templates Codewind is aware of\n      parameters:\n        - name: projectStyle\n          in: query\n          schema:\n            type: string\n          required: false\n          description: Specify this to filter templates returned by project style\n        - name: showEnabledOnly\n          in: query\n          schema:\n            type: string\n            enum: ['true', 'false']\n          required: false\n          description: Set this to 'true' to return only templates from enabled repositories\n      responses:\n        200:\n          description: Returns all the templates that Codewind can generate a project from\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Template'\n        204:\n          description: No templates found\n        423:\n          description: The templates object is currently locked to prevent incorrect data being accessed and returned. Retry later\n\n  /api/v1/templates/repositories:\n    get:\n      summary: List all template repositories Codewind is aware of\n      responses:\n        200:\n          description: Returns all the templates repositories that Codewind will use to find templates\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TemplateRepo'\n        423:\n          description: The templates object is currently locked to prevent incorrect data being accessed and returned. Retry later\n    post:\n      summary: Make Codewind aware of a template repository\n      requestBody:\n        description: repository details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TemplateRepoCreate'\n      responses:\n        200:\n          description: Returns all the templates repositories that Codewind will use to find templates\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TemplateRepo'\n        400:\n          description: Bad request\n          content:\n            text/plain:\n              schema:\n                type: string\n        423:\n          description: The templates object is currently locked to prevent incorrect data being accessed and returned. Retry later\n    delete:\n      summary: Remove a template repository from the list Codewind is aware of\n      requestBody:\n        description: repository details\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - url\n              properties:\n                url:\n                  type: string\n      responses:\n        200:\n          description: Returns all the templates repositories that Codewind will use to find templates\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TemplateRepo'\n        400:\n          description: Bad request\n        404:\n          description: Template repository not found\n          content:\n            text/html:\n              schema:\n                type: string\n        423:\n          description: The templates object is currently locked to prevent incorrect data being accessed and returned. Retry later\n  /api/v1/batch/templates/repositories:\n    patch:\n      summary: Batch change settings for a template repository of which Codewind is aware\n      requestBody:\n        description: repository settings\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/TemplateRepoSetting'\n      responses:\n        207:\n          description: Returns success/failure statuses of settings operations\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  required:\n                    - status\n                    - requestedOperation\n                  properties:\n                    status:\n                      type: integer\n                    requestedOperation:\n                      $ref: '#/components/schemas/TemplateRepoSetting'\n                    error:\n                      type: string\n        423:\n          description: The templates object is currently locked to prevent incorrect data being accessed and returned. Retry later\n  /api/v1/templates/styles:\n    get:\n      summary: List all project styles for which Codewind has templates\n      responses:\n        200:\n          description: Returns all project styles for which Codewind has templates\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  description: project style\n                  type: string\n                  enum: ['Codewind', 'Appsody']\n  /api/v1/project-types:\n    get:\n      summary: List all project types Codewind is aware of\n      responses:\n        200:\n          description: Returns the list of supported project types a project can be bound as\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProjectTypeDescriptor'\n        204:\n          description: No templates found\n        423:\n          description: The templates object is currently locked to prevent incorrect data being accessed and returned. Retry later\n\n  /api/v1/logging:\n    put:\n      summary: Overwrite the default logging level of the Portal container\n      requestBody:\n        description: Location on disk\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - level\n              properties:\n                level:\n                  $ref: '#/components/schemas/PfeLogLevel'\n      responses:\n        200:\n          description: Successful\n          content:\n            text/html:\n              schema:\n                type: string\n        400:\n          description: Bad request\n          content:\n            text/html:\n              schema:\n                type: string\n        500:\n          description: Internal Error\n    get:\n      summary: Get all logging information for the Portal container\n      responses:\n        200:\n          description: Successful\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - currentLevel\n                  - defaultLevel\n                  - allLevels\n                properties:\n                  currentLevel:\n                    $ref: '#/components/schemas/PfeLogLevel'\n                  defaultLevel:\n                    $ref: '#/components/schemas/PfeLogLevel'\n                  allLevels:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/PfeLogLevel'\n        500:\n          description: Internal Error\n\n  /api/v1/projects/watchlist:\n    get:\n      summary: List the files that should not be monitored for changes for each open project that has been added to codewind\n      responses:\n        200:\n          description: Got the watchedList for all open projects\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - projects\n                properties:\n                  projects:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/WatchList'\n        500:\n          description: if an error occured\n\n  /api/v1/projects/{id}/file-changes/{projectWatchStateId}/status:\n    put:\n      summary: Report the project watch state, either success or failed,  for a particular projectWatchStateId\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n          description: id of project\n        - name: projectWatchStateId\n          in: path\n          schema:\n            type: string\n          required: true\n          description: projectWatchStateId represents a file watching client's current state. projectWatchStateId is generated and returned when first time calling the endpoint `GET /api/v1/projects/watchlist`. Additionally, if the ignored paths list for a project is changed, a new projectWatchStateId is generated and sent to file watchers via WebSocket event from `/websockets/file-changes/v1`\n        - name: clientUuid\n          in: query\n          schema:\n            oneOf:\n              - type: string\n                format: uuid\n              - type: string\n                pattern: ^[0-9a-f]{32}$\n          required: true\n          description: a unique id of the client\n      requestBody:\n        description: A JSON object to report the project watch state, either success or failed\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - success\n              properties:\n                success:\n                  type: boolean\n                  example: true\n\n      responses:\n        200:\n          description: if successfully received the request\n        400:\n          $ref: '#/components/responses/400'\n        404:\n          $ref: '#/components/responses/404'\n        500:\n          $ref: '#/components/responses/500'\n\n  /api/v1/projects/:id/file-changes:\n    post:\n      summary: Notify the event occurrance with a list of changed files of the project\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n          description: id of project\n        - name: timestamp\n          in: query\n          schema:\n            type: number\n          required: true\n          description: timestamp of this file change event\n        - name: chunk\n          in: query\n          schema:\n            type: number\n          required: true\n          description: chunk number of this current chunk\n        - name: chunk_total\n          in: query\n          schema:\n            type: number\n          required: true\n          description: total chunks expected for this timestamp\n      requestBody:\n        description: A JSON array of which file paths have changed, which is then compressed with zlib, then converted to base64. The example shows JSON content before converted to base64\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - msg\n              properties:\n                msg:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/FileChangeList'\n      responses:\n        200:\n          description: if successfully received the request\n        400:\n          $ref: '#/components/responses/400'\n        404:\n          $ref: '#/components/responses/404'\n        500:\n          $ref: '#/components/responses/500'\n  /api/v1/registrysecrets:\n    post:\n      summary: Create a Docker registry secret in Codewind PFE\n      description: \u003e\n        This will create or update the Codewind PFE Docker config registry `/root/.docker/config.json`. In Kubernetes environment, a secret is then created with the base64 encoded value of the Docker config file and the Service Account is then patched with the created Kubernetes secret.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - address\n                - credentials\n              properties:\n                address:\n                  type: string\n                credentials:\n                  type: string\n                  description: base64 encoded value of object { username:\"username\", password:\"password\" }\n      responses:\n        201:\n          description: Successfully created. Returns an updated list of the registry secrets in Codewind PFE.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    address:\n                      type: string\n                      description: Registry address\n                      example: docker.io\n                    username:\n                      type: string\n                      description: Registry username\n                      example: username\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: Reason for the bad request\n                example: Cannot have multiple docker registries with url \u003curl\u003e. Please delete the previous registry and try again.\n        500:\n          description: Internal Server Error\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: Reason for the internal error\n                example: Failed to create the Codewind Registry Kubernetes Secret and/or patch the Service Account.\n    get:\n      summary: Get all the Docker registry secrets in Codewind PFE\n      description: \u003e\n        This will get the Docker registry secrets in Codewind PFE. The API returns a list of the available registries in the PFE container.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    address:\n                      type: string\n                      description: Registry address\n                      example: docker.io\n                    username:\n                      type: string\n                      description: Registry username\n                      example: username\n        500:\n          description: Internal Server Error\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: Reason for the internal error\n                example: Failed to get the Codewind Docker Config Registries\n    delete:\n      summary: Delete a Docker registry secret from Codewind PFE\n      description: \u003e\n        This will update the Codewind PFE Docker config registry `/root/.docker/config.json` and remove the specified secret. In Kubernetes environment, a secret is then created with the base64 encoded value of the Docker config file and the Service Account is then patched with the created Kubernetes secret.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - address\n              properties:\n                address:\n                  type: string\n      responses:\n        200:\n          description: OK. Returns an updated list of the registry secrets in Codewind PFE.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    address:\n                      type: string\n                      description: Registry address\n                      example: docker.io\n                    username:\n                      type: string\n                      description: Registry username\n                      example: username\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: Reason for the bad request\n                example: No Docker Config file present, no Docker Registry to remove from the list.\n        500:\n          description: Internal Server Error\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: Reason for the internal error\n                example: Failed to create the Codewind Registry Kubernetes Secret and/or patch the Service Account.\n\n\n  /api/v1/imagepushregistry:\n    get:\n      summary: Get the status of the Image Push Registry in the Workspace Settings File\n      responses:\n        200:\n          description: Successfully completed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  imagePushRegistry:\n                    type: boolean\n                    description: true if image push registry was set\n                    example: true\n                  address:\n                    type: string\n                    description: registry address, if image push registry is true\n                    example: \"docker.io\"\n                  namespace:\n                    type: string\n                    description: registry namespace, if image push registry is true\n                    example: \"docker.io\"\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  imagePushRegistry:\n                    type: boolean\n                    description: false if image push registry was not set\n                    example: false\n    post:\n      summary: Test or set the specified Image Push Registry\n      description: \u003e\n        On test the API also emits a socket event `imagePushRegistryStatus` with data\n        `{imagePushRegistryTest \":\" true, msg \":\" message related to the socket for pass/failure}`\n        A set operation will set the registry without testing to allow the client to force save the\n        value.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - address\n                - namespace\n              properties:\n                address:\n                  type: string\n                namespace:\n                  type: string\n                operation:\n                  type: string\n                  enum:\n                    - test\n                    - set\n      responses:\n        200:\n          description: Successfully completed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  statusCode:\n                    type: integer\n                    description: The response status code\n                    example: 200\n                  imagePushRegistryTest:\n                    type: boolean\n                    description: true if image push registry is valid\n                    example: true\n                  msg:\n                    type: string\n                    description: Message related to the request\n                    example: Success message\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  statusCode:\n                    type: integer\n                    description: The response status code\n                    example: 400\n                  imagePushRegistryTest:\n                    type: boolean\n                    description: false because it is a bad request\n                    example: false\n                  msg:\n                    type: string\n                    description: Message related to the request\n                    example: Reason for failure\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  statusCode:\n                    type: integer\n                    description: The response status code\n                    example: 500\n                  imagePushRegistryTest:\n                    type: boolean\n                    description: false if image push registry is invalid\n                    example: false\n                  msg:\n                    type: string\n                    description: Message related to the request\n                    example: Reason for failure\n    delete:\n      summary: Remove the specified Image Push Registry address\n      description: \u003e\n        Removes the Image Push Registry namespace for the specified address\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - address\n              properties:\n                address:\n                  type: string\n      responses:\n        200:\n          description: Successfully completed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  statusCode:\n                    type: integer\n                    description: The response status code\n                    example: 200\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  statusCode:\n                    type: integer\n                    description: The response status code\n                    example: 400\n                  msg:\n                    type: string\n                    description: Message related to the request\n                    example: Reason for failure\n        500:\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  statusCode:\n                    type: integer\n                    description: The response status code\n                    example: 500\n                  msg:\n                    type: string\n                    description: Message related to the request\n                    example: Reason for failure\n\n  /api/v1/extensions:\n    get:\n      summary: List all extensions Codewind is aware of\n      responses:\n        200:\n          description: Returns the list of Codewind extensions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Extension'\n        500:\n          description: if an error occurred\n\n  /api/v1/ignoredPaths:\n    get:\n      summary: Get the ignoredPaths for a projectType\n      parameters:\n        - name: projectType\n          in: query\n          schema:\n            $ref: '#/components/schemas/ProjectType'\n          required: true\n          description: Type of project\n      responses:\n       200:\n          description: The build type for the project. Built-in types are 'liberty', 'spring', 'swift', 'nodejs', and 'docker'.\n          content:\n            application/json:\n                schema:\n                  type: array\n                  items:\n                    type: string\n                    example: \"/Dockerfile-tools\"\n       500:\n          description: Internal Server Error\n  /api/v1/projects/{id}/links:\n    get:\n      summary: Returns the links for a project\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n      responses:\n        200:\n          description: Returns the links to a given project\n    post:\n      summary: Adds a new link to a project\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n      requestBody:\n        description: JSON object containing details of the project to link this project to\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LinkRequestBody'\n      responses:\n        202:\n          description: \u003e\n            The link has been created.\n            A further response will be sent over WebSocket once the project has restarted (using the event 'projectLink')\n        400:\n          description: Invalid parameters given\n        409:\n          description: A link with the envName specified already exists\n    put:\n      summary: Updates a project link\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n      requestBody:\n        description: JSON object containing the envName of the link to update and an updated envName\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - envName\n              properties:\n                envName:\n                  type: string\n                updatedEnvName:\n                  type: string\n      responses:\n          202:\n            description: \u003e\n              The link has been updated.\n              A further response will be sent over WebSocket once the project has restarted (using the event 'projectLink')\n          404:\n            description: The link does not exists\n    delete:\n      summary: Deletes a project link\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n      requestBody:\n        description: JSON object containing the envName of the link to delete\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - envName\n              properties:\n                envName:\n                  type: string\n      responses:\n        202:\n          description: \u003e\n            The link has been deleted.\n            A further response will be sent over WebSocket once the project has restarted (using the event 'projectLink')\n        404:\n          description: The link does not exist\n\n  /api/v1/projects/{id}/missingLocalDir:\n    post:\n      summary: Register that the local directory, associated with the project, is not present on disk\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n      responses:\n        200:\n          description: Action successful\n        404:\n          description: Project not found\n        500:\n          description: Internal server error\n\n  /api/v1/projects/{id}/fileList:\n    get:\n      summary: Return a list of files for this project\n      parameters:\n        - in: path\n          name: id\n          schema:\n            $ref: '#/components/schemas/ProjectID'\n          required: true\n          description: id of project\n      responses:\n        200:\n          description: The list of files this project contains\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string    \n        404:\n          description: Project not found\n        500:\n          description: Internal server error\n\ncomponents:\n  schemas:\n    Project:\n      type: object\n      required:\n        - projectID\n        - name\n        - language\n        - projectType\n        - host\n        - ports\n      properties:\n        projectID:\n          $ref: '#/components/schemas/ProjectID'\n        name:\n          $ref: '#/components/schemas/ProjectName'\n        language:\n          $ref: '#/components/schemas/ProjectLanguage'\n        projectType:\n          $ref: '#/components/schemas/ProjectType'\n        host:\n          type: string\n          example: localhost\n        ports:\n          type: object\n          properties:\n            exposedPort:\n              type: string\n              example: \"32801\"\n            internalPort:\n              type: string\n              example: \"3000\"\n            internalDebugPort:\n              type: string\n              example: \"9229\"\n    ProjectID:\n      type: string\n      format: uuid\n      example: d290f1ee-6c54-4b01-90e6-d701748f0851\n      pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'\n    ProjectName:\n      description: Name of project, cannot contain any of \", \u0026, /, \\\\, ?, %, *, :, |, \u003c, \u003e or spaces\n      type: string\n      example: tobesproject\n    ProjectLanguage:\n      type: string\n    ProjectType:\n      description: the build type for the project. Built-in types are 'liberty', 'spring', 'swift', 'nodejs', and 'docker'.\n      type: string\n    ProjectTypeDescriptor:\n      description: Descriptor of a project type, including possible subtypes\n      type: object\n      required:\n        - projectType\n        - projectSubtypes\n      properties:\n        projectType:\n          $ref: '#/components/schemas/ProjectType'\n        projectSubtypes:\n          $ref: '#/components/schemas/ProjectSubtypesDescriptor'\n    ProjectSubtype:\n      description: A project subtype defined by a project extension\n      type: object\n      required:\n        - id\n        - label\n      properties:\n        id:\n          type: string\n        version:\n          type: string\n        label:\n          type: string\n        description:\n          type: string\n    ProjectSubtypesDescriptor:\n      description: Descriptor for subtypes of a project type\n      type: object\n      required:\n        - items\n      properties:\n        label:\n          description: A name label to refer to the subtype\n          type: string\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProjectSubtype'\n    testRunTime:\n      description: The time of a load-test run, whose format is yyyymmddHHMMss\n      type: number\n      example: 20190326154749\n    Template:\n      type: object\n      required:\n        - label\n        - description\n        - language\n        - url\n        - projectType\n      properties:\n        label:\n          type: string\n          example: \"python hello world\"\n        description:\n          type: string\n          example: \"python microservice\"\n        language:\n          type: string\n          example: \"python\"\n        url:\n          type: string\n          example: \"https://github.com/codewind-resources/pythonTemplate\"\n        projectType:\n          type: string\n          enum:\n            - docker\n            - liberty\n            - nodejs\n            - spring\n            - swift\n            - appsodyExtension\n        source:\n          type: string\n          example: \"Default Codewind Templates\"\n        sourceId:\n          type: string\n    TemplateRepoCreate:\n      type: object\n      required:\n        - url\n      properties:\n        url:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        enabled:\n          type: boolean\n        protected:\n          type: boolean\n        gitCredentials:\n          oneOf:\n          - $ref: '#/components/schemas/BasicGitHubCredentials'\n          - $ref: '#/components/schemas/GitHubPersonalAccessToken'\n    TemplateRepo:\n      type: object\n      required:\n        - url\n      properties:\n        id:\n          type: string\n        url:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        projectStyles:\n          type: array\n          items:\n            type: string\n          example: ['Codewind', 'Appsody']\n        enabled:\n          type: boolean\n        protected:\n          type: boolean\n        authentication:\n          type: object\n          properties:\n            username:\n              description: user's github username\n              type: string\n              example: 'user'\n\n    TemplateRepoSetting:\n      type: object\n      required:\n        - op\n        - url\n        - value\n      properties:\n        op:\n          description: repository setting to change\n          type: string\n          enum: [enable]\n        url:\n          description: url of the modified template repository\n          type: string\n          example: https://raw.githubusercontent.com/codewind-resources/codewind-templates/master/devfiles/index.json\n        value:\n          type: string\n          example: 'true'\n    BasicGitHubCredentials:\n      type: object\n      additionalProperties: false\n      required:\n        - username\n        - password\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n    GitHubPersonalAccessToken:\n      type: object\n      additionalProperties: false\n      required:\n        - personalAccessToken\n      properties:\n        personalAccessToken:\n          type: string\n    BasicMetric:\n      properties:\n        time:\n          type: integer\n          example: 1530537586856\n        endTime:\n          type: integer\n          example: 1530537586979\n        value:\n          type: object\n    CpuMetric:\n      allOf:\n        - $ref: '#/components/schemas/BasicMetric'\n        - type: object\n          properties:\n            value:\n              properties:\n                systemMean:\n                  type: number\n                  example: 0.352322\n                systemPeak:\n                  type: number\n                  example: 0.956481\n                processMean:\n                  type: number\n                  example: 0.070466\n                processPeak:\n                  type: number\n                  example: 0.090362\n    UploadEnd:\n      type: object\n      required:\n        - timeStamp\n        - fileList\n        - directoryList\n        - modifiedList\n      properties:\n        timeStamp:\n          description: time since epoch of last upload\n          type: number\n          example: 157139320301\n        fileList:\n          description: an array of all files the project contains\n          type: array\n          nullable: true\n          example: [\"/project/file1\", \"/project/file2\", \"project/modifiedfile1\"]\n        directoryList:\n          description: an array of all directories the project contains\n          type: array\n          nullable: true\n          example: [\"/project\"]\n        modifiedList:\n          description: an array of files that have been modified since the last project upload\n          type: array\n          nullable: true\n          example: [\"/project/modifiedfile1\"]\n\n    Upload:\n      type: object\n      required:\n        - path\n        - msg\n      properties:\n        path:\n          description: the path of the file, relative to the project directory\n          type: string\n          example: \"/project1/src/file1\"\n        msg:\n          description: the gzipped file content\n          type: string\n          example: \"gzipped file content\"\n        mode:\n          type: number\n          description: the permissions for the file https://nodejs.org/api/fs.html#fs_file_modes\n          example: 0o775\n\n    LoadrunnerConfig:\n      type: object\n      required:\n        - path\n        - requestsPerSecond\n        - concurrency\n        - maxSeconds\n      properties:\n        path:\n          description: The HTTP endpoint that loadrunner will hit\n          type: string\n          example: \"/loadtest\"\n        query:\n          description: The query parameters to be hit with loadrunner (optional)\n          type: object\n          example: { a : '1', b : '2' }\n        requestsPerSecond:\n          description: The rate of requests made by loadrunner\n          type: string\n          example: \"200\"\n        concurrency:\n          description: The number of concurrent threads\n          type: string\n          example: \"200\"\n        maxSeconds:\n          description: The maximum duration for loadrunner to run\n          type: string\n          example: \"20\"\n        method:\n          description: The type of request loadrunner will make\n          type: string\n          example: \"GET\"\n        body:\n          description: A JSON body object that will sent with each load run request\n          oneOf:\n            - type: object\n              example: { id: 1, message: 'codewind' }\n            - type: string\n              example: \"{ id: 1, message: 'codewind'}\"\n\n    LoadRunMetric:\n      type: object\n      required:\n        - type\n        - delta\n      properties:\n        type:\n          type: string\n          enum:\n            - cpu\n            - gc\n            - memory\n            - http\n        delta:\n          oneOf:\n            - type: string\n              enum: ['Data unavailable']\n            - type: object\n              minProperties: 1\n              properties:\n                systemMean:\n                  type: number\n                systemPeak:\n                  type: number\n                processMean:\n                  type: number\n                processPeak:\n                  type: number\n                gcTime:\n                  type: number\n                usedHeapAfterGCPeak:\n                  type: number\n                usedNativePeak:\n                  type: number\n                avergaeHttpResponseTime:\n                  type: number\n      example: \u003e\n        {\n          \"type\": \"cpu\",\n          \"delta\": {\n            \"systemMean\": 1.352,\n            \"systemPeak\" : 1.956,\n            \"processMean\" : -7.334,\n            \"processPeak\"  : -9.469\n          }\n        }\n\n    LogDetails:\n      type: object\n      required:\n        - logName\n      properties:\n        logName:\n          type: string\n          example: 'docker.build.log'\n        workspaceLogPath:\n          type: string\n    WatchList:\n      type: object\n      required:\n        - projectID\n        - pathToMonitor\n        - ignoredPaths\n        - projectWatchStateId\n        - projectCreationTime\n      properties:\n        projectID:\n          $ref: '#/components/schemas/ProjectID'\n        pathToMonitor:\n          description: the absolute path on the file system to the project\n          type: string\n          example: /Documents/projectDir/\n        ignoredPaths:\n          description: regex of paths to be ignored for changes\n          type: array\n          example: [ \"/target\", \"/.m2\", \"*/.git/*\" ]\n        refPaths:\n          description: additional referenced paths outside of the project folder to monitor\n          type: array\n          items:\n            $ref: '#/components/schemas/WatchListRefPath'\n        projectWatchStateId:\n          description: projectWatchStateId represents a file watching client's current state. projectWatchStateId is generated and returned when first time calling the endpoint `GET /api/v1/projects/watchlist`. Additionally, if the ignored paths list for a project is changed, a new projectWatchStateId is generated and sent to file watchers via WebSocket event from `/websockets/file-changes/v1`\n          type: string\n          format: uuid\n          example: \"e3f3ba629b5a9e75ebb0818934575a66\"\n        projectCreationTime:\n          description: the time in millisconds since epoch that the project was last updated in codewind\n          type: number\n          example: 1576080088223\n    WatchListRefPath:\n      type: object\n      required:\n        - from\n        - to\n      properties:\n        from:\n          description: absolute path to file on local machine\n          type: string\n        to:\n          description: relative path to root of project inside container\n          type: string\n    FileChangeList:\n        type: object\n        required:\n          - path\n          - timestamp\n          - type\n          - directory\n        properties:\n          path:\n            description: the absolute path on the file system to the file\n            type: string\n            example: Documents/projectDir/File1\n          timestamp:\n            description: the timestamp of this change\n            type: number\n            example: 2117514496\n          type:\n            description: the change type, one of the following CREATE / MODIFY / DELETE\n            type: string\n            example: CREATE\n          directory:\n            description: true or false, on whether the path refers to a directory\n            type: boolean\n            example: false\n    Extension:\n      type: object\n      properties:\n        name:\n          type: string\n          example: \"knappExtension\"\n        version:\n          type: string\n          example: \"1.0.0\"\n        description:\n          type: string\n          example: \"Codewind extension for knapp support\"\n        commands:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExtensionCommand'\n        detection:\n          type: string\n          example: \"knap_config.yaml\"\n        templates:\n          type: string\n          example: \"https://github.com/microclimate-dev2ops/myTemplates\"\n        config:\n          description: Extra configuration properties for the extension\n          type: object\n    ExtensionCommand:\n      type: object\n      properties:\n        name:\n          type: string\n        command:\n          type: string\n        args:\n          type: array\n          items:\n            type: string\n    MsgObject:\n      type: object\n      required:\n        - msg\n      properties:\n        msg:\n          type: string\n      additionalProperties: false\n    MessageObject:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          type: string\n      additionalProperties: false\n    CodewindError:\n      type: object\n      required:\n        - name\n        - code\n        - message\n      properties:\n        name:\n          type: string\n        code:\n          type: string\n        message:\n          type: string\n    PfeLogLevel:\n      type: string\n      enum: ['trace', 'debug', 'info', 'warn', 'error']\n    LinkRequestBody:\n      type: object\n      required:\n        - targetProjectID\n        - envName\n      properties:\n        targetProjectID:\n          $ref: '#/components/schemas/ProjectID'\n        envName:\n          type: string\n\n  responses:\n    400:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            type: string\n    404:\n      description: The specified resource was not found.\n      content:\n        application/json:\n          schema:\n            type: string\n    500:\n      description: Internal error occurred.\n      content:\n        application/json:\n          schema:\n            type: string\n    ProjectNotFound:\n      description: Project not found\n      content:\n        text/html:\n          schema:\n            type: string\n",
			"canonicalURL": "/github.com/eclipse/codewind@0b845a418b484532fc46a1167325e6b7ed3acf38/-/blob/docs/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/eclipse/codewind/blob/0b845a418b484532fc46a1167325e6b7ed3acf38/docs/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/v1/projects/{id}/open\": put: responses: 200: contents: unsupported content types: [text/html]",
	"NotImplemented": [
		"discriminator inference",
		"unsupported content types"
	]
}