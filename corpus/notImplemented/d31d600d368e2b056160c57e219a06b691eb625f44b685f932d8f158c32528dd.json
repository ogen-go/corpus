{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "googleapis.com-cloudtrace-v1-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/googleapis.com-cloudtrace-v1-swagger.yaml",
			"byteSize": 18944,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    name: Google\n    url: https://google.com\n  description: \u003e\n    Sends application trace data to Stackdriver Trace for viewing. Trace data is\n    collected for all App Engine applications by default. Trace data from other\n    applications can be provided using this API. This library is used to\n    interact with the Trace API directly. If you are looking to instrument your\n    application for Stackdriver Trace, we recommend using OpenCensus.\n  license:\n    name: Creative Commons Attribution 3.0\n    url: http://creativecommons.org/licenses/by/3.0/\n  termsOfService: https://developers.google.com/terms/\n  title: Stackdriver Trace\n  version: v1\n  x-apiClientRegistration:\n    url: https://console.developers.google.com\n  x-logo:\n    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\n  x-origin:\n    - converter:\n        url: https://github.com/lucybot/api-spec-converter\n        version: 2.7.31\n      format: google\n      url: https://cloudtrace.googleapis.com/$discovery/rest?version=v1\n      version: v1\n  x-preferred: false\n  x-providerName: googleapis.com\n  x-serviceName: cloudtrace\nexternalDocs:\n  url: https://cloud.google.com/trace\ntags:\n  - name: projects\npaths:\n  \"/v1/projects/{projectId}/traces\":\n    get:\n      description: Returns of a list of traces that match the specified filter conditions.\n      operationId: cloudtrace.projects.traces.list\n      parameters:\n        - description: |-\n            End of the time interval (inclusive) during which the trace data was\n            collected from the application.\n          in: query\n          name: endTime\n          schema:\n            type: string\n        - description: \u003e-\n            Optional. A filter against labels for the request.\n\n\n            By default, searches use prefix matching. To specify exact match, prepend\n\n            a plus symbol (`+`) to the search term.\n\n            Multiple terms are ANDed. Syntax:\n\n\n            *   `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root\n                span starts with `NAME_PREFIX`.\n            *   `+root:NAME` or `+NAME`: Return traces where any root span's name is\n                exactly `NAME`.\n            *   `span:NAME_PREFIX`: Return traces where any span starts with\n                `NAME_PREFIX`.\n            *   `+span:NAME`: Return traces where any span's name is exactly\n                `NAME`.\n            *   `latency:DURATION`: Return traces whose overall latency is\n                greater or equal to than `DURATION`. Accepted units are nanoseconds\n                (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For\n                example, `latency:24ms` returns traces whose overall latency\n                is greater than or equal to 24 milliseconds.\n            *   `label:LABEL_KEY`: Return all traces containing the specified\n                label key (exact match, case-sensitive) regardless of the key:value\n                pair's value (including empty values).\n            *   `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified\n                label key (exact match, case-sensitive) whose value starts with\n                `VALUE_PREFIX`. Both a key and a value must be specified.\n            *   `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair\n                exactly matching the specified text. Both a key and a value must be\n                specified.\n            *   `method:VALUE`: Equivalent to `/http/method:VALUE`.\n\n            *   `url:VALUE`: Equivalent to `/http/url:VALUE`.\n          in: query\n          name: filter\n          schema:\n            type: string\n        - description: \u003e-\n            Optional. Field used to sort the returned traces.\n\n            Can be one of the following:\n\n\n            *   `trace_id`\n\n            *   `name` (`name` field of root span in the trace)\n\n            *   `duration` (difference between `end_time` and `start_time` fields of\n                 the root span)\n            *   `start` (`start_time` field of the root span)\n\n\n            Descending order can be specified by appending `desc` to the sort field\n\n            (for example, `name desc`).\n\n\n            Only one sort field is permitted.\n          in: query\n          name: orderBy\n          schema:\n            type: string\n        - description: \u003e-\n            Optional. Maximum number of traces to return. If not specified or \u003c=\n            0, the\n\n            implementation selects a reasonable value.  The implementation may\n\n            return fewer traces than the requested page size.\n          in: query\n          name: pageSize\n          schema:\n            type: integer\n        - description: \u003e-\n            Token identifying the page of results to return. If provided, use\n            the\n\n            value of the `next_page_token` field from a previous request.\n          in: query\n          name: pageToken\n          schema:\n            type: string\n        - description: Required. ID of the Cloud project where the trace data is stored.\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: string\n        - description: \u003e-\n            Start of the time interval (inclusive) during which the trace data\n            was\n\n            collected from the application.\n          in: query\n          name: startTime\n          schema:\n            type: string\n        - description: |-\n            Optional. Type of data returned for traces in the list. Default is\n            `MINIMAL`.\n          in: query\n          name: view\n          schema:\n            type: string\n            enum:\n              - VIEW_TYPE_UNSPECIFIED\n              - MINIMAL\n              - ROOTSPAN\n              - COMPLETE\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/ListTracesResponse\"\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/cloud-platform\n          Oauth2c:\n            - https://www.googleapis.com/auth/cloud-platform\n        - Oauth2:\n            - https://www.googleapis.com/auth/trace.readonly\n          Oauth2c:\n            - https://www.googleapis.com/auth/trace.readonly\n      tags:\n        - projects\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/uploadType\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n    patch:\n      description: \u003e-\n        Sends new traces to Stackdriver Trace or updates existing traces. If the\n        ID\n\n        of a trace that you send matches that of an existing trace, any fields\n\n        in the existing trace and its spans are overwritten by the provided values,\n\n        and any new fields provided are merged with the existing trace data. If the\n\n        ID does not match, a new trace is created.\n      operationId: cloudtrace.projects.patchTraces\n      parameters:\n        - description: Required. ID of the Cloud project where the trace data is stored.\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Traces\"\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Empty\"\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/cloud-platform\n          Oauth2c:\n            - https://www.googleapis.com/auth/cloud-platform\n        - Oauth2:\n            - https://www.googleapis.com/auth/trace.append\n          Oauth2c:\n            - https://www.googleapis.com/auth/trace.append\n      tags:\n        - projects\n  \"/v1/projects/{projectId}/traces/{traceId}\":\n    get:\n      description: Gets a single trace by its ID.\n      operationId: cloudtrace.projects.traces.get\n      parameters:\n        - description: Required. ID of the Cloud project where the trace data is stored.\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: string\n        - description: Required. ID of the trace to return.\n          in: path\n          name: traceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Trace\"\n      security:\n        - Oauth2:\n            - https://www.googleapis.com/auth/cloud-platform\n          Oauth2c:\n            - https://www.googleapis.com/auth/cloud-platform\n        - Oauth2:\n            - https://www.googleapis.com/auth/trace.readonly\n          Oauth2c:\n            - https://www.googleapis.com/auth/trace.readonly\n      tags:\n        - projects\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/uploadType\"\n      - $ref: \"#/components/parameters/upload_protocol\"\nservers:\n  - url: https://cloudtrace.googleapis.com/\ncomponents:\n  parameters:\n    access_token:\n      description: OAuth access token.\n      in: query\n      name: access_token\n      schema:\n        type: string\n    alt:\n      description: Data format for response.\n      in: query\n      name: alt\n      schema:\n        type: string\n        enum:\n          - json\n          - media\n          - proto\n        default: json\n    callback:\n      description: JSONP\n      in: query\n      name: callback\n      schema:\n        type: string\n    fields:\n      description: Selector specifying which fields to include in a partial response.\n      in: query\n      name: fields\n      schema:\n        type: string\n    key:\n      description: API key. Your API key identifies your project and provides you with API\n        access, quota, and reports. Required unless you provide an OAuth 2.0\n        token.\n      in: query\n      name: key\n      schema:\n        type: string\n    oauth_token:\n      description: OAuth 2.0 token for the current user.\n      in: query\n      name: oauth_token\n      schema:\n        type: string\n    prettyPrint:\n      description: Returns response with indentations and line breaks.\n      in: query\n      name: prettyPrint\n      schema:\n        type: boolean\n        default: true\n    quotaUser:\n      description: Available to use for quota purposes for server-side applications. Can be\n        any arbitrary string assigned to a user, but should not exceed 40\n        characters.\n      in: query\n      name: quotaUser\n      schema:\n        type: string\n    uploadType:\n      description: Legacy upload protocol for media (e.g. \"media\", \"multipart\").\n      in: query\n      name: uploadType\n      schema:\n        type: string\n    upload_protocol:\n      description: Upload protocol for media (e.g. \"raw\", \"multipart\").\n      in: query\n      name: upload_protocol\n      schema:\n        type: string\n    _.xgafv:\n      description: V1 error format.\n      in: query\n      name: $.xgafv\n      schema:\n        type: string\n        enum:\n          - \"1\"\n          - \"2\"\n  securitySchemes:\n    Oauth2:\n      description: Oauth 2.0 implicit authentication\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services\n            https://www.googleapis.com/auth/trace.append: Write Trace data for a project or application\n            https://www.googleapis.com/auth/trace.readonly: Read Trace data for a project or application\n    Oauth2c:\n      description: Oauth 2.0 accessCode authentication\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          tokenUrl: https://accounts.google.com/o/oauth2/token\n          scopes:\n            https://www.googleapis.com/auth/cloud-platform: View and manage your data across Google Cloud Platform services\n            https://www.googleapis.com/auth/trace.append: Write Trace data for a project or application\n            https://www.googleapis.com/auth/trace.readonly: Read Trace data for a project or application\n  schemas:\n    Empty:\n      description: \u003e-\n        A generic empty message that you can re-use to avoid defining duplicated\n\n        empty messages in your APIs. A typical example is to use it as the request\n\n        or the response type of an API method. For instance:\n\n            service Foo {\n              rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n            }\n\n        The JSON representation for `Empty` is empty JSON object `{}`.\n      properties: {}\n      type: object\n    ListTracesResponse:\n      description: The response message for the `ListTraces` method.\n      properties:\n        nextPageToken:\n          description: \u003e-\n            If defined, indicates that there are more traces that match the\n            request\n\n            and that this value should be passed to the next request to continue\n\n            retrieving additional traces.\n          type: string\n        traces:\n          description: List of trace records as specified by the view parameter.\n          items:\n            $ref: \"#/components/schemas/Trace\"\n          type: array\n      type: object\n    Trace:\n      description: \u003e-\n        A trace describes how long it takes for an application to perform an\n\n        operation. It consists of a set of spans, each of which represent a single\n\n        timed event within the operation.\n      properties:\n        projectId:\n          description: Project ID of the Cloud project where the trace data is stored.\n          type: string\n        spans:\n          description: Collection of spans in the trace.\n          items:\n            $ref: \"#/components/schemas/TraceSpan\"\n          type: array\n        traceId:\n          description: \u003e-\n            Globally unique identifier for the trace. This identifier is a\n            128-bit\n\n            numeric value formatted as a 32-byte hex string. For example,\n\n            `382d4f4c6b7bb2f4a972559d9085001d`.\n          type: string\n      type: object\n    TraceSpan:\n      description: \u003e-\n        A span represents a single timed event within a trace. Spans can be\n        nested\n\n        and form a trace tree. Often, a trace contains a root span that describes the\n\n        end-to-end latency of an operation and, optionally, one or more subspans for\n\n        its suboperations. Spans do not need to be contiguous. There may be gaps\n\n        between spans in a trace.\n      properties:\n        endTime:\n          description: End time of the span in nanoseconds from the UNIX epoch.\n          format: google-datetime\n          type: string\n        kind:\n          description: \u003e-\n            Distinguishes between spans generated in a particular context. For\n            example,\n\n            two spans with the same name may be distinguished using `RPC_CLIENT`\n\n            and `RPC_SERVER` to identify queueing latency associated with the span.\n          enum:\n            - SPAN_KIND_UNSPECIFIED\n            - RPC_SERVER\n            - RPC_CLIENT\n          type: string\n        labels:\n          additionalProperties:\n            type: string\n          description: \u003e-\n            Collection of labels associated with the span. Label keys must be\n            less than\n\n            128 bytes. Label values must be less than 16 kilobytes (10MB for\n\n            `/stacktrace` values).\n\n\n            Some predefined label keys exist, or you may create your own. When creating\n\n            your own, we recommend the following formats:\n\n\n            * `/category/product/key` for agents of well-known products (e.g.\n              `/db/mongodb/read_size`).\n            * `short_host/path/key` for domain-specific keys (e.g.\n              `foo.com/myproduct/bar`)\n\n            Predefined labels include:\n\n\n            *   `/agent`\n\n            *   `/component`\n\n            *   `/error/message`\n\n            *   `/error/name`\n\n            *   `/http/client_city`\n\n            *   `/http/client_country`\n\n            *   `/http/client_protocol`\n\n            *   `/http/client_region`\n\n            *   `/http/host`\n\n            *   `/http/method`\n\n            *   `/http/path`\n\n            *   `/http/redirected_url`\n\n            *   `/http/request/size`\n\n            *   `/http/response/size`\n\n            *   `/http/route`\n\n            *   `/http/status_code`\n\n            *   `/http/url`\n\n            *   `/http/user_agent`\n\n            *   `/pid`\n\n            *   `/stacktrace`\n\n            *   `/tid`\n          type: object\n        name:\n          description: \u003e-\n            Name of the span. Must be less than 128 bytes. The span name is\n            sanitized\n\n            and displayed in the Stackdriver Trace tool in the\n\n            Google Cloud Platform Console.\n\n            The name may be a method name or some other per-call site name.\n\n            For the same executable and the same call point, a best practice is\n\n            to use a consistent name, which makes it easier to correlate\n\n            cross-trace spans.\n          type: string\n        parentSpanId:\n          description: Optional. ID of the parent span, if any.\n          format: uint64\n          type: string\n        spanId:\n          description: |-\n            Identifier for the span. Must be a 64-bit integer other than 0 and\n            unique within a trace. For example, `2205310701640571284`.\n          format: uint64\n          type: string\n        startTime:\n          description: Start time of the span in nanoseconds from the UNIX epoch.\n          format: google-datetime\n          type: string\n      type: object\n    Traces:\n      description: List of new or updated traces.\n      properties:\n        traces:\n          description: List of traces.\n          items:\n            $ref: \"#/components/schemas/Trace\"\n          type: array\n      type: object\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/googleapis.com-cloudtrace-v1-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/googleapis.com-cloudtrace-v1-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1/projects/{projectId}/traces\": get: responses: 200: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}