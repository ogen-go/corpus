{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/observatorium/api"
		},
		"file": {
			"name": "spec.yaml",
			"size": 0,
			"path": "rules/spec.yaml",
			"byteSize": 3416,
			"content": "openapi: 3.0.0\ninfo:\n  description: The Rules Backend API\n  version: \"0.0.2\"\n  title: Rules Backend API\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: rulesv1\n    description: Calls related to rules\npaths:\n  /api/v1/rules/{tenant}:\n    parameters:\n      - in: path\n        name: tenant\n        description: name of the tenant\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - rulesv1\n      summary: lists all rules for a tenant\n      operationId: listRules\n      description: |\n        You can list all rules for a tenant\n      responses:\n        '200':\n          description: all rules for that tenant\n          content:\n            application/yaml:\n              schema:\n                $ref: '#/components/schemas/Rules'\n        '404':\n          description: invalid tenant\n    put:\n      tags:\n        - rulesv1\n      summary: set/overwrite the rules for the tenant\n      operationId: setRules\n      description: Set rules for the tenant\n      responses:\n        '201':\n          description: rule file created\n        '400':\n          description: 'invalid rules object'\n      requestBody:\n        content:\n          application/yaml:\n            schema:\n              $ref: '#/components/schemas/Rules'\n        description: Rules to set\n  /api/v1/rules:\n    get:\n      tags:\n        - rulesv1\n      summary: lists all rules for all tenants\n      operationId: listAllRules\n      description: |\n        You can list all rules for all tenants\n      responses:\n        '200':\n          description: rules for all tenants\n          content:\n            application/yaml:\n              schema:\n                $ref: '#/components/schemas/Rules'\ncomponents:\n  schemas:\n    Rules:\n      type: object\n      required:\n        - groups\n      properties:\n        groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/RuleGroup'\n    RuleGroup:\n      type: object\n      required:\n        - interval\n        - name\n        - rules\n      properties:\n        interval:\n          type: string\n          example: '1m'\n        name:\n          type: string\n          example: 'telemeter.rules'\n        rules:\n          type: array\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/RecordingRule'\n              - $ref: '#/components/schemas/AlertingRule'\n    RecordingRule:\n      type: object\n      required:\n        - expr\n        - record\n        - labels\n      properties:\n        expr:\n          type: string\n          example: 'count by (name) (cluster{condition=\"halted\"} == 1)'\n        record:\n          type: string\n          example: 'count:cluster_halted'\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n    AlertingRule:\n      type: object\n      required:\n        - alert\n        - expr\n        - for\n        - labels\n        - annotations\n      properties:\n        alert:\n          type: string\n          example: 'HighRequestLatency'\n        expr:\n          type: string\n          example: 'job:request_latency_seconds:mean5m{job=\"myjob\"} \u003e 0.5'\n        for:\n          type: string\n          example: '10m'\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n        annotations:\n          type: object\n          additionalProperties:\n            type: string\n",
			"canonicalURL": "/github.com/observatorium/api@bb839682a04321c837f9a99579297747dd7663c3/-/blob/rules/spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/observatorium/api/blob/bb839682a04321c837f9a99579297747dd7663c3/rules/spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/v1/rules\": get: responses: 200: contents: unsupported content types: [application/yaml]",
	"NotImplemented": [
		"unsupported content types"
	]
}