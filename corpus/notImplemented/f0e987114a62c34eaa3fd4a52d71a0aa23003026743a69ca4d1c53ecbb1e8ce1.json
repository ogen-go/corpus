{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "visiblethread.com-1.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/visiblethread.com-1.0-swagger.yaml",
			"byteSize": 24419,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    x-twitter: VisibleThread\n  description: \u003e-\n    ## Introduction\n\n    The VisibleThread b API provides services for analyzing/searching documents and web pages.\n\n    To use the service you need an API key. \n\n\n    **Contact us at support@visiblethread.com to request an API key**. \n\n\n    The services are split into **Documents** and **Webscans**.\n\n\n    ### Documents\n\n    Upload documents and dictionaries so you can :\n\n    - Measure the readability of your document\n\n    - search a document for all terms from a dictionary\n\n    - retrieve all paragraphs from a document or only matching paragraphs\n\n\n    ### Webscans\n\n    Analyze web pages so you can: \n\n    - Measure the readability of your web content\n\n    - Identify \u0026 highlight content issues e.g. long sentences, passive voice\n\n\n    The VisibleThread API allows you to programatially submit webpage urls to be scanned, \n\n    check on the results of a scan, and view a list of previous scans you have performed.\n        \n    -------------\n\n\n    The VisibleThread API is a HTTP-based JSON API, accessible at https://api.visiblethread.com \n\n    Each request to the service requires your API key to be successful.\n\n\n    ## Getting Started With Webscans\n\n\n    Steps:\n\n    1. Enter your API key above and hit **Explore**. \n\n    2. Run a new scan by submitting a **POST to /webscans** (title and some webUrls are required).\n       The scan runs asynchronously in the background but returns immediately with a JSON response containing an \"id\" that represents your scan.\n    3. Check on the status of a scan by submitting **GET /webscans/{scanId}**, if the scan is still in progress it will return a HTTP 503. If \n       it is complete it will return a HTTP 200 with the appropriate JSON outlining the urls scanned and the summary statistics for each url.\n    4. Retrieve all your previous scan results by submitting **GET /webscans**.  \n\n    5. Retrieve detailed results for a url within a scan (readability, long sentence and passive language instances) by submitting \n       **GET /webscans/{scanId}/webUrls/{urlId}** (scanId and urlId are required)\n\n    ## Getting Started With Document scans:\n\n\n    Steps:\n\n    1. Enter your API key above and hit **Explore**\n\n    2. Run a new scan by submitting a **POST to /documents** (document required). The scan runs asynchronously in the background but returns\n       immediately with a JSON response containins an \"id\" that represents your scan\n    3. Check on the status of a scan by submitting **GET /documents/{scanId}**, if the scan is still in progress it will return a HTTP 503. If \n       it is complete it will return a HTTP 200 with the appropriate JSON outlining the document readability results. It will contain detailed\n       analysis of each paragraph in the document\n    4. Retrieve all your previous scan results by submitting **GET /documents**\n\n\n    ### Searching a document for keywords\n\n\n    The VisibleThread API allows you to upload a set of keywords or a 'dictionary'. You can then perform a search of a already uploaded document \n\n    using that dictionary\n\n\n    Steps (Assuming you have uploaded your document using the steps above):\n\n    1. Upload a csv file to use as a keyword dictionary by submitting a **POST to /dictionaries** (csv file required). This returns a JSON \n       response with the dictionary Id \n    2. Search a document with the dictionary by submitting a **POST to /searches** (document id and dictionary id required). \n\n    3. Get the resuhlts of the search by submitting  **GET /searches/{docId}/{dictionaryId}\" . This will return JSON response containing \n       detailed results of searching the document using the dictionary.\n    4. To view the list of all searches you have performed submit a **GET /searches**. \n\n\n    Below is a list of the available API endpoints, documentation \u0026 a form to try out each operation.\n  title: VisibleThread\n  version: \"1.0\"\n  x-apisguru-categories:\n    - text\n  x-logo:\n    url: https://twitter.com/VisibleThread/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: https://api.visiblethread.com/example/vt.yaml\n      version: \"2.0\"\n  x-providerName: visiblethread.com\nsecurity:\n  - api_key: []\npaths:\n  /dictionaries:\n    get:\n      description: Get your list of dictionaries\n      responses:\n        \"200\":\n          description: Successful response\n      summary: Get your list of dictionaries\n      tags:\n        - Documents\n    post:\n      description: \"Upload a dictionary (CSV format) to your VisibleThread account. \"\n      operationId: uploadDictionary\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  description: The uploaded CSV dictionary\n                  type: string\n                  format: binary\n              required:\n                - file\n      responses:\n        \"200\":\n          description: Successful response\n        \"405\":\n          description: Invalid input\n      summary: Upload a dictionary (CSV)\n      tags:\n        - Documents\n  /documents:\n    get:\n      description: Get your list of documents\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/DocumentListSummary\"\n                title: Documents\n                type: array\n      summary: Get your list of documents\n      tags:\n        - Documents\n    post:\n      description: \u003e-\n        Upload a document to your VisibleThread account. \n\n        We return a JSON response that contains a \"docId\" that represents your document.        \n\n        You can use this id in other requests to check on the analysis status for the document and run a dictionary search and retrieve search\n\n        results. \n      operationId: uploadDoc\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  description: The uploaded file data\n                  type: string\n                  format: binary\n                longSentenceWordCount:\n                  description: Optional setting what constitutes a long sentence (default\n                    25)\n                  type: integer\n                  format: int32\n                veryLongSentenceWordCount:\n                  description: Optional setting what constitutes a very long sentence\n                    (default 30)\n                  type: integer\n                  format: int32\n              required:\n                - file\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NewDocumentResponse\"\n        \"405\":\n          description: Invalid input\n        \"413\":\n          description: The document exceeds the maximum supported file size (15mb)\n      summary: Upload a document\n      tags:\n        - Documents\n  \"/documents/{docId}\":\n    get:\n      description: Get data from a previously submitted document identified by ***docId***\n      operationId: getDocById\n      parameters:\n        - description: Id of document to fetch\n          in: path\n          name: docId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: document response contained readability details for the document\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DocumentResponseDetailed\"\n        \"404\":\n          description: document not found\n        \"415\":\n          description: the document is an unsupported file type\n        \"500\":\n          description: an unknown error occurred processing the document\n        \"503\":\n          description: the document analysis has not yet completed, try again later\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DocumentResponseNotReady\"\n      summary: Get data from a previously submitted document\n      tags:\n        - Documents\n  /searches:\n    get:\n      description: Get your list of searches\n      responses:\n        \"200\":\n          description: Successful response\n      summary: Get your list of searches\n      tags:\n        - Documents\n    post:\n      description: \"Run a search on document **docId** using dictionary **dictId** \"\n      operationId: runSearch\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Search\"\n        description: Run a search on document **docId** using dictionary**dictId**\n        required: true\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            text/plain:\n              schema:\n                type: object\n        \"405\":\n          description: Invalid input\n      summary: Run a search\n      tags:\n        - Documents\n  \"/searches/{docId}/{dictionaryId}\":\n    get:\n      description: Get detailed results for a scan/url (readability, long sentence and\n        passive language instances), identified by **scanId** \u0026 **urlId**\n      operationId: getSearchResults\n      parameters:\n        - description: Id of document\n          in: path\n          name: docId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Id of dictionary\n          in: path\n          name: dictionaryId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Only returning paragraphs containing a match\n          in: query\n          name: matchingOnly\n          required: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: scan response\n      summary: Gets search results for a particular document/dictionary\n      tags:\n        - Documents\n  /webscans:\n    get:\n      description: Get your list of scans\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ScanResponseSummary\"\n                title: Scans\n                type: array\n      summary: Get your list of scans\n      tags:\n        - Webscans\n    post:\n      description: \u003e-\n        The scan runs in the background but returns immediately with a JSON\n        response containing an \"id\" that represents your scan.        \n\n        You can use this id in other requests to retrieve your scan result. \n\n\n        Also, an \"id\" is returned for each url which can be used to retrieve detailed results for individual scan urls. \n      operationId: runScan\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/NewScan\"\n        description: Scan title and webUrls to analyze\n        required: true\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NewScanResponse\"\n        \"405\":\n          description: Invalid input\n      summary: Run a new scan\n      tags:\n        - Webscans\n  \"/webscans/{scanId}\":\n    get:\n      description: Get data from a previously run scan, identified by **scanId**\n      operationId: getScanById\n      parameters:\n        - description: Id of scan to fetch\n          in: path\n          name: scanId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: scan response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScanResponseDetailed\"\n        \"404\":\n          description: webscan not found\n        \"503\":\n          description: the web analysis has not yet completed, try again later\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebResponseNotReady\"\n      summary: Get data from a previously run scan\n      tags:\n        - Webscans\n  \"/webscans/{scanId}/webUrls/{urlId}\":\n    get:\n      description: Get detailed results for a scan/url (readability, long sentence and\n        passive language instances), identified by **scanId** \u0026 **urlId**\n      operationId: getScanUrlById\n      parameters:\n        - description: Id of scan\n          in: path\n          name: scanId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Id of url to fetch\n          in: path\n          name: urlId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: scan response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebUrlDetail\"\n        \"404\":\n          description: scan url not found\n      summary: Gets data for a particular scan/webUrl\n      tags:\n        - Webscans\nservers:\n  - url: https://api.visiblethread.com/api/v1\ncomponents:\n  securitySchemes:\n    api_key:\n      in: header\n      name: apiKey\n      type: apiKey\n  schemas:\n    Adverbs:\n      items:\n        properties:\n          end:\n            example: 399\n            type: integer\n          start:\n            example: 386\n            type: integer\n          text:\n            example: exceptionally\n            type: string\n        type: object\n      type: array\n    Analysis:\n      properties:\n        stats:\n          $ref: \"#/components/schemas/Stats\"\n        title:\n          example: My funky scan title\n          type: string\n      type: object\n    DocumentListSummary:\n      properties:\n        id:\n          format: int64\n          type: integer\n        name:\n          example: My Document.pdf\n          type: string\n      type: object\n    DocumentResponseDetailed:\n      properties:\n        completed:\n          format: date-time\n          type: string\n        eta:\n          format: date-time\n          type: string\n        id:\n          format: int64\n          type: integer\n        paragraphs:\n          items:\n            properties:\n              paragraphCounter:\n                example: 12\n                type: integer\n              paragraphIndex:\n                example: 22\n                type: integer\n              stats:\n                properties:\n                  adverbs:\n                    items:\n                      $ref: \"#/components/schemas/Adverbs\"\n                    type: array\n                  hiddenVerbs:\n                    items:\n                      $ref: \"#/components/schemas/HiddenVerbs\"\n                    type: array\n                  longSentences:\n                    items:\n                      $ref: \"#/components/schemas/LongSentences\"\n                    type: array\n                  passives:\n                    items:\n                      $ref: \"#/components/schemas/Passives\"\n                    type: array\n                  veryLongSentences:\n                    items:\n                      $ref: \"#/components/schemas/VeryLongSentences\"\n                    type: array\n                type: object\n              text:\n                example: This is an exmaple sentence which was extracted from a web\n                  page during a scan previously run using the VisibleThread API\n                  service. This is a short, simple sentence.\n                type: string\n            type: object\n          type: array\n        scanSettings:\n          properties:\n            longSentenceWordCount:\n              format: int32\n              type: integer\n            veryLongSentenceWordCount:\n              format: int32\n              type: integer\n          type: object\n        started:\n          format: date-time\n          type: string\n        stats:\n          $ref: \"#/components/schemas/Stats\"\n        title:\n          type: string\n      type: object\n    DocumentResponseNotReady:\n      properties:\n        eta:\n          format: date-time\n          type: string\n        id:\n          format: int64\n          type: integer\n        started:\n          format: date-time\n          type: string\n      type: object\n    HiddenVerbs:\n      items:\n        properties:\n          end:\n            example: 210\n            type: integer\n          noun:\n            example: investment\n            type: string\n          start:\n            example: 185\n            type: integer\n          text:\n            example: investment in intangibles\n            type: string\n        type: object\n      type: array\n    LongSentences:\n      items:\n        properties:\n          end:\n            example: 130\n            type: integer\n          start:\n            example: 0\n            type: integer\n          wordCount:\n            example: 22\n            type: integer\n        type: object\n      type: array\n    NewDocumentResponse:\n      properties:\n        docId:\n          format: int64\n          type: integer\n        scanSettings:\n          properties:\n            longSentenceWordCount:\n              format: int32\n              type: integer\n            veryLongSentenceWordCount:\n              format: int32\n              type: integer\n          type: object\n        task:\n          example: parse\n          type: string\n      required:\n        - docId\n        - task\n        - scanSettings\n      type: object\n    NewScan:\n      properties:\n        scanSettings:\n          properties:\n            longSentenceWordCount:\n              example: 20\n              format: int32\n              type: integer\n            veryLongSentenceWordCount:\n              example: 30\n              format: int32\n              type: integer\n          type: object\n        title:\n          example: My fancy scan title\n          type: string\n        webUrls:\n          items:\n            properties:\n              url:\n                example: http://visiblethread.com\n                type: string\n            required:\n              - url\n            type: object\n          type: array\n      required:\n        - title\n        - webUrls\n      type: object\n    NewScanResponse:\n      properties:\n        id:\n          example: 56487\n          format: int64\n          type: integer\n        title:\n          example: My fancy scan title\n          type: string\n        webUrls:\n          items:\n            properties:\n              id:\n                example: 88596\n                format: int64\n                type: integer\n              url:\n                example: http://visiblethread.com\n                type: string\n            required:\n              - url\n              - id\n            type: object\n          type: array\n      required:\n        - id\n        - title\n        - webUrls\n      type: object\n    Passives:\n      items:\n        properties:\n          end:\n            example: 47\n            type: integer\n          passivePiece:\n            example: was extracted\n            type: string\n          start:\n            example: 34\n            type: integer\n          verb:\n            example: extracted\n            type: string\n        type: object\n      type: array\n    ScanDetailed:\n      properties:\n        stats:\n          $ref: \"#/components/schemas/Stats\"\n        title:\n          example: My fancy scan title\n          type: string\n        webUrls:\n          items:\n            $ref: \"#/components/schemas/WebUrl\"\n          type: array\n      required:\n        - title\n        - webUrls\n        - stats\n      type: object\n    ScanResponseDetailed:\n      properties:\n        completed:\n          format: date-time\n          type: string\n        eta:\n          format: date-time\n          type: string\n        id:\n          format: int64\n          type: integer\n        scan:\n          $ref: \"#/components/schemas/ScanDetailed\"\n        started:\n          format: date-time\n          type: string\n      type: object\n    ScanResponseSummary:\n      properties:\n        completed:\n          format: date-time\n          type: string\n        eta:\n          format: date-time\n          type: string\n        id:\n          format: int64\n          type: integer\n        scan:\n          $ref: \"#/components/schemas/ScanSummary\"\n        started:\n          format: date-time\n          type: string\n      type: object\n    ScanSummary:\n      properties:\n        title:\n          example: My fancy scan title\n          type: string\n        webUrls:\n          items:\n            $ref: \"#/components/schemas/WebUrlHeader\"\n          type: array\n      required:\n        - title\n        - webUrls\n      type: object\n    Search:\n      properties:\n        dictId:\n          example: 47364\n          format: int64\n          type: integer\n        docId:\n          example: 56487\n          format: int64\n          type: integer\n      required:\n        - docId\n        - dictId\n      type: object\n    Stats:\n      properties:\n        avgSentenceLength:\n          type: integer\n        fleschKincaidGradeLevel:\n          format: float\n          type: number\n        fleschReadingLevel:\n          type: integer\n        longSentenceCount:\n          type: integer\n        passiveSentenceCount:\n          type: integer\n        sentenceCount:\n          type: integer\n        wordCount:\n          type: integer\n      type: object\n    VeryLongSentences:\n      items:\n        properties:\n          end:\n            example: 130\n            type: integer\n          start:\n            example: 0\n            type: integer\n          wordCount:\n            example: 34\n            type: integer\n        type: object\n      type: array\n    WebResponseNotReady:\n      properties:\n        eta:\n          format: date-time\n          type: string\n        id:\n          format: int64\n          type: integer\n        started:\n          format: date-time\n          type: string\n      type: object\n    WebUrl:\n      allOf:\n        - $ref: \"#/components/schemas/WebUrlHeader\"\n        - properties:\n            analysis:\n              $ref: \"#/components/schemas/Analysis\"\n          required:\n            - analysis\n          type: object\n    WebUrlDetail:\n      properties:\n        paragraphs:\n          items:\n            properties:\n              paragraphCounter:\n                example: 12\n                type: integer\n              paragraphIndex:\n                example: 22\n                type: integer\n              stats:\n                properties:\n                  adverbs:\n                    items:\n                      $ref: \"#/components/schemas/Adverbs\"\n                    type: array\n                  hiddenVerbs:\n                    items:\n                      $ref: \"#/components/schemas/HiddenVerbs\"\n                    type: array\n                  longSentences:\n                    items:\n                      $ref: \"#/components/schemas/LongSentences\"\n                    type: array\n                  passives:\n                    items:\n                      $ref: \"#/components/schemas/Passives\"\n                    type: array\n                  veryLongSentences:\n                    items:\n                      $ref: \"#/components/schemas/VeryLongSentences\"\n                    type: array\n                type: object\n              text:\n                example: This is an exmaple sentence which was extracted from a web\n                  page during a scan previously run using the VisibleThread API\n                  service. This is a short, simple sentence.\n                type: string\n            type: object\n          type: array\n        stats:\n          $ref: \"#/components/schemas/Stats\"\n        title:\n          example: My fancy scan title\n          type: string\n        url:\n          example: http://visiblethread.com\n          type: string\n      required:\n        - title\n        - url\n        - stats\n      type: object\n    WebUrlHeader:\n      properties:\n        id:\n          format: int64\n          type: integer\n        url:\n          example: http://visiblethread.com\n          type: string\n      required:\n        - id\n        - url\n      type: object\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/visiblethread.com-1.0-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/visiblethread.com-1.0-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/searches\": post: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}