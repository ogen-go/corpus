{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cornflourblue/node-mongo-jwt-refresh-tokens-api"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "swagger.yaml",
			"byteSize": 11403,
			"content": "openapi: 3.0.0\ninfo:\n  title: Node.js + MongoDB API - JWT Authentication with Refresh Tokens\n  version: 1.0.0\n\nservers:\n  - url: http://localhost:4000\n    description: Local development server\n\npaths:\n  /users/authenticate:\n    post:\n      summary: Authenticate user credentials and return a JWT token and a cookie with a refresh token\n      operationId: authenticate\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  example: \"jason\"\n                password:\n                  type: string\n                  example: \"pass123\"\n              required:\n                - username\n                - password\n      responses:\n        \"200\":\n          description: User details, a JWT access token and a refresh token cookie\n          headers:\n            Set-Cookie:\n              description: \"`refreshToken`\"\n              schema:\n                type: string\n                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    example: \"5eb12e197e06a76ccdefc121\"\n                  firstName:\n                    type: string\n                    example: \"Jason\"\n                  lastName:\n                    type: string\n                    example: \"Watmore\"\n                  username:\n                    type: string\n                    example: \"jason\"\n                  role:\n                    type: string\n                    example: \"Admin\"\n                  jwtToken:\n                    type: string\n                    example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y\"\n        \"400\":\n          description: The username or password is incorrect\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Username or password is incorrect\"\n  /users/refresh-token:\n    post:\n      summary: Use a refresh token to generate a new JWT token and a new refresh token\n      description: The refresh token is sent and returned via cookies.\n      operationId: refreshToken\n      parameters:\n        - in: cookie\n          name: refreshToken\n          description: The `refreshToken` cookie\n          schema:\n            type: string\n            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550\n      responses:\n        \"200\":\n          description: User details, a JWT access token and a new refresh token cookie\n          headers:\n            Set-Cookie:\n              description: \"`refreshToken`\"\n              schema:\n                type: string\n                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    example: \"5eb12e197e06a76ccdefc121\"\n                  firstName:\n                    type: string\n                    example: \"Jason\"\n                  lastName:\n                    type: string\n                    example: \"Watmore\"\n                  username:\n                    type: string\n                    example: \"jason\"\n                  role:\n                    type: string\n                    example: \"Admin\"\n                  jwtToken:\n                    type: string\n                    example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y\"\n        \"400\":\n          description: The refresh token is invalid, revoked or expired\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Invalid token\"\n  /users/revoke-token:\n    post:\n      summary: Revoke a refresh token\n      description: Admin users can revoke the tokens of any user, regular users can only revoke their own tokens.\n      operationId: revokeToken\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: cookie\n          name: refreshToken\n          description: The refresh token can be sent in a cookie or the post body, if both are sent the token in the body is used.\n          schema:\n            type: string\n            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                  example: \"51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550\"\n      responses:\n        \"200\":\n          description: The refresh token was successfully revoked\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Token revoked\"\n        \"400\":\n          description: The refresh token is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Invalid token\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n  /users:\n    get:\n      summary: Get a list of all users\n      description: Restricted to admin users.\n      operationId: getAllUsers\n      security:\n        - bearerAuth: []\n      responses:\n        \"200\":\n          description: An array of all users\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      example: \"5eb12e197e06a76ccdefc121\"\n                    firstName:\n                      type: string\n                      example: \"Jason\"\n                    lastName:\n                      type: string\n                      example: \"Watmore\"\n                    username:\n                      type: string\n                      example: \"jason\"\n                    role:\n                      type: string\n                      example: \"Admin\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n  /users/{id}:\n    parameters:\n      - in: path\n        name: id\n        description: User id\n        required: true\n        example: \"5eb12e197e06a76ccdefc121\"\n        schema:\n          type: string\n    get:\n      summary: Get a single user by id\n      description: Admin users can access any user record, regular users are restricted to their own user record.\n      operationId: getUserById\n      security:\n        - bearerAuth: []\n      responses:\n        \"200\":\n          description: Details of the specified user\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    example: \"5eb12e197e06a76ccdefc121\"\n                  firstName:\n                    type: string\n                    example: \"Jason\"\n                  lastName:\n                    type: string\n                    example: \"Watmore\"\n                  username:\n                    type: string\n                    example: \"jason\"\n                  role:\n                    type: string\n                    example: \"Admin\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n  /users/{id}/refresh-tokens:\n    parameters:\n      - in: path\n        name: id\n        description: User id\n        required: true\n        example: \"5eb12e197e06a76ccdefc121\"\n        schema:\n          type: string\n    get:\n      summary: Get a list of all refresh tokens (active and revoked) of the user with the specified id\n      description: Admin users can access any user's refresh tokens, regular users are restricted to their own refresh tokens.\n      operationId: getRefreshTokens\n      security:\n        - bearerAuth: []\n      responses:\n        \"200\":\n          description: An array of refresh tokens for the specified user id\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    token:\n                      type: string\n                      example: \"79ea9a5e825da7c27d30839c89295071842f2a44b22e917aaf795126f4486509d8511c6fdedb6f1e\"\n                    expires:\n                      type: string\n                      example: \"2020-06-24T03:29:13.871Z\"\n                    created:\n                      type: string\n                      example: \"2020-06-17T03:29:13.871Z\"\n                    createdByIp:\n                      type: string\n                      example: \"127.0.0.1\"\n                    isExpired:\n                      type: boolean\n                      example: false\n                    isActive:\n                      type: boolean\n                      example: true\n                    revoked:\n                      type: string\n                      example: \"2020-06-17T03:29:13.871Z\"\n                    revokedByIp:\n                      type: string\n                      example: \"127.0.0.1\"                    \n                    replacedByToken:\n                      type: string\n                      example: \"a01d3818db64961742f249beeded65739e9c3d1019570ea48ea820d274eac607043a6cbefd23c297\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  responses:\n    UnauthorizedError:\n      description: Access token is missing or invalid, or the user does not have access to perform the action\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                example: \"Unauthorized\"\n    NotFoundError:\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                example: \"Not Found\"",
			"canonicalURL": "/github.com/cornflourblue/node-mongo-jwt-refresh-tokens-api@87e94a5c9c35b10aca74260c55c772bc7cbb6677/-/blob/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/cornflourblue/node-mongo-jwt-refresh-tokens-api/blob/87e94a5c9c35b10aca74260c55c772bc7cbb6677/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: cookie params not implemented",
	"NotImplemented": [
		"cookie params"
	]
}