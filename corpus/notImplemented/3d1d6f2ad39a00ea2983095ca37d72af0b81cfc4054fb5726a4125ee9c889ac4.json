{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/XeroAPI/Xero-OpenAPI"
		},
		"file": {
			"name": "xero-projects.yaml",
			"size": 0,
			"path": "xero-projects.yaml",
			"byteSize": 55130,
			"content": "openapi: 3.0.0\ninfo:\n  version: \"2.23.0\"\n  title: Xero Projects API\n  description: This is the Xero Projects API \n  termsOfService: \"https://developer.xero.com/xero-developer-platform-terms-conditions/\"\n  contact:\n    name: \"Xero Platform Team\"\n    email: \"api@xero.com\"\n    url: \"https://developer.xero.com\"\n  license:\n    name: MIT \n    url: 'https://github.com/XeroAPI/Xero-OpenAPI/blob/master/LICENSE'\nservers:\n  - description: Xero API server for projects\n    url: 'https://api.xero.com/projects.xro/2.0'\npaths:\n  /Projects:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [projects, projects.read]\n      tags:\n        - Project\n      summary: Retrieves all projects\n      operationId: getProjects\n      description: Allows you to retrieve, create and update projects.\n      parameters:\n        - name: projectIds\n          x-snake: project_ids\n          in: query\n          required: false\n          description: Search for all projects that match a comma separated list of projectIds\n          schema: \n            type: array\n            items:\n              type: string\n              format: uuid\n        - name: contactID\n          x-snake: contact_id\n          in: query\n          required: false\n          description: Filter for projects for a specific contact\n          schema: \n            type: string\n            format: uuid\n        - name: states\n          in: query\n          required: false\n          description: Filter for projects in a particular state (INPROGRESS or CLOSED)\n          schema: \n            type: string\n        - name: page\n          in: query\n          required: false\n          description: set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0.\n          schema: \n            type: integer\n            example: 1\n            default: 1\n        - name: pageSize\n          x-snake: page_size\n          in: query\n          required: false\n          description: Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500.\n          schema: \n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 50\n            example: 100\n      responses:\n        '200':\n          description: OK/success, returns a list of project objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Projects'\n              example: '{\n                          \"pagination\": {\n                            \"page\": 1,\n                            \"pageSize\": 50,\n                            \"pageCount\": 1,\n                            \"itemCount\": 9\n                          },\n                          \"items\": [\n                            {\n                              \"projectId\": \"00000000-0000-0000-0000-000000000000\",\n                              \"contactId\": \"00000000-0000-0000-0000-000000000000\",\n                              \"name\": \"FooProject28916\",\n                              \"currencyCode\": \"AUD\",\n                              \"minutesLogged\": 180,\n                              \"totalTaskAmount\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 60.0\n                              },\n                              \"totalExpenseAmount\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 499.0\n                              },\n                              \"minutesToBeInvoiced\": 180,\n                              \"taskAmountToBeInvoiced\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 60.0\n                              },\n                              \"taskAmountInvoiced\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 0.0\n                              },\n                              \"expenseAmountToBeInvoiced\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 499.0\n                              },\n                              \"expenseAmountInvoiced\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 0.0\n                              },\n                              \"projectAmountInvoiced\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 0.0\n                              },\n                              \"deposit\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 0.0\n                              },\n                              \"depositApplied\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 0.0\n                              },\n                              \"creditNoteAmount\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 0.0\n                              },\n                              \"totalInvoiced\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 0.0\n                              },\n                              \"totalToBeInvoiced\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 559.0\n                              },\n                              \"deadlineUtc\": \"2020-03-03T15:00:00Z\",\n                              \"estimate\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 99.99\n                              },\n                              \"status\": \"INPROGRESS\"\n                            }\n                          ]\n                        }'\n        '400':\n          $ref: '#/components/responses/400Error' \n    post:\n      security: \n        - OAuth2: [projects]\n      tags:\n        - Project\n      summary: Create one or more new projects\n      operationId: createProject\n      requestBody:\n        required: true\n        description: Create a new project with ProjectCreateOrUpdate object\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectCreateOrUpdate'\n            example:\n              '{\n                \"contactId\": \"00000000-0000-0000-000-000000000000\",\n                \"name\": \"New Kitchen\",\n                \"deadlineUtc\": \"2019-12-10T12:59:59Z\",\n                \"estimateAmount\": \"99.99\"\n               }'\n      responses:\n        '201':\n          description: OK/success, returns the new project object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n              example: '{ \n                          \"projectId\": \"00000000-0000-0000-0000-000000000000\",\n                          \"contactId\": \"00000000-0000-0000-0000-000000000000\",\n                          \"name\": \"New Kitchen\",\n                          \"currencyCode\": \"AUD\",\n                          \"minutesLogged\": 0,\n                          \"totalTaskAmount\": { \n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"totalExpenseAmount\": { \n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"minutesToBeInvoiced\": 0,\n                          \"taskAmountToBeInvoiced\": { \n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"taskAmountInvoiced\": { \n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"expenseAmountToBeInvoiced\": { \n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"expenseAmountInvoiced\": { \n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"projectAmountInvoiced\": { \n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"deposit\": { \n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"depositApplied\": { \n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"creditNoteAmount\": { \n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"totalInvoiced\": { \n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"totalToBeInvoiced\": { \n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"deadlineUtc\": \"2020-03-03T15:00:00Z\",\n                          \"estimate\": { \n                            \"currency\": \"AUD\",\n                            \"value\": 99.99\n                          },\n                          \"status\": \"INPROGRESS\"\n                        }'\n        '400':\n          $ref: '#/components/responses/400Error'\n  '/Projects/{projectId}':\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [projects, projects.read]\n      tags:\n        - Project\n      summary: Retrieves a single project\n      operationId: getProject\n      description: Allows you to retrieve a specific project using the projectId\n      parameters:\n        - name: projectId\n          x-snake: project_id\n          in: path\n          required: true\n          description: You can specify an individual project by appending the projectId to the endpoint\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: OK/success, returns a list of project objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n              example: '{\n                          \"projectId\": \"00000000-0000-0000-0000-000000000000\",\n                          \"contactId\": \"00000000-0000-0000-0000-000000000000\",\n                          \"name\": \"Remodeling 2012\",\n                          \"currencyCode\": \"AUD\",\n                          \"minutesLogged\": 180,\n                          \"totalTaskAmount\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 60.0\n                          },\n                          \"totalExpenseAmount\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 499.0\n                          },\n                          \"minutesToBeInvoiced\": 180,\n                          \"taskAmountToBeInvoiced\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 60.0\n                          },\n                          \"taskAmountInvoiced\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"expenseAmountToBeInvoiced\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 499.0\n                          },\n                          \"expenseAmountInvoiced\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"projectAmountInvoiced\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"deposit\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"depositApplied\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"creditNoteAmount\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"totalInvoiced\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 0.0\n                          },\n                          \"totalToBeInvoiced\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 559.0\n                          },\n                          \"deadlineUtc\": \"2020-03-03T15:00:00Z\",\n                          \"estimate\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 99.99\n                          },\n                          \"status\": \"INPROGRESS\"\n                        }'\n        '400':\n          $ref: '#/components/responses/400Error' \n    put:\n      security: \n        - OAuth2: [projects]\n      tags:\n        - Project\n      summary: Updates a specific project\n      operationId: updateProject\n      description: Allows you to update a specific projects.\n      parameters:\n        - name: projectId\n          x-snake: project_id\n          in: path\n          required: true\n          description: You can specify an individual project by appending the projectId to the endpoint\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        required: true\n        description: Request of type ProjectCreateOrUpdate\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectCreateOrUpdate'\n            example:\n              '{\n                \"name\": \"New Kitchen\",\n                \"deadlineUtc\": \"2017-04-23T18:25:43.511Z\",\n                \"estimateAmount\": 99.99\n              }'\n      responses:\n        '204':\n          description: Success - return response 204 no content\n          x-isEmpty: true\n        '400':\n          $ref: '#/components/responses/400Error'\n    patch:\n      security: \n        - OAuth2: [projects]\n      tags:\n        - Project\n      summary: creates a project for the specified contact\n      operationId: patchProject\n      description: Allows you to update a specific projects.\n      parameters:\n        - name: projectId\n          x-snake: project_id\n          in: path\n          required: true\n          description: You can specify an individual project by appending the projectId to the endpoint\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        required: true\n        description: Update the status of an existing Project\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectPatch'\n            example:\n              '{\n                \"status\": \"INPROGRESS\"\n                }'\n      responses:\n        '204':\n          description: Success - return response 204 no content\n          x-isEmpty: true\n        '400':\n          $ref: '#/components/responses/400Error'\n  /ProjectsUsers:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [projects, projects.read]\n      tags:\n        - Project\n      summary: Retrieves a list of all project users\n      operationId: getProjectUsers\n      description: Allows you to retrieve the users on a projects.\n      parameters:\n        - name: page\n          in: query\n          required: false\n          description: set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0.\n          schema: \n            type: integer\n            example: 1\n            default: 1\n        - name: pageSize\n          x-snake: page_size\n          in: query\n          required: false\n          description: Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500.\n          schema: \n            type: integer\n            minimum: 1\n            maximum: 500\n            default: 50\n            example: 100\n      responses:\n        '200':\n          description: OK/success, returns a list of project objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectUsers'\n              example: '{\n                          \"pagination\": {\n                            \"page\": 1,\n                            \"pageSize\": 50,\n                            \"pageCount\": 1,\n                            \"itemCount\": 2\n                          },\n                          \"items\":[\n                            {\n                              \"userId\": \"00000000-0000-0000-0000-000000000000\",\n                              \"name\": \"Test User\",\n                              \"email\": \"test@xero.com\"\n                            },\n                            {\n                              \"userId\": \"00000000-0000-0000-0000-000000000000\",\n                              \"name\": \"API Team\",\n                              \"email\": \"api@xero.com\"\n                            }\n                          ]\n                        }'\n        '400':\n          $ref: '#/components/responses/400Error' \n  /Projects/{projectId}/Tasks:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [projects, projects.read]\n      tags:\n        - Project\n      summary: Retrieves all project tasks\n      operationId: getTasks\n      description: Allows you to retrieve a specific project\n      parameters:\n        - name: projectId\n          x-snake: project_id\n          in: path\n          required: true\n          description: You can specify an individual project by appending the projectId to the endpoint\n          schema:\n            type: string\n            format: uuid\n        - name: page\n          in: query\n          description: Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0.  \n          schema:\n            type: integer\n            example: 1\n        - name: pageSize\n          x-snake: page_size\n          in: query\n          description: Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500.\n          schema:\n            type: integer\n            example: 10\n        - name: taskIds\n          x-snake: task_ids\n          in: query\n          description: \"taskIds\tSearch for all tasks that match a comma separated list of taskIds, i.e. GET https://.../tasks?taskIds={taskID},{taskID}\"  \n          schema:\n            type: string\n        - name: chargeType\n          $ref: '#/components/parameters/chargeType'  \n      responses:\n        '200':\n          description: OK/success, returns a list of task objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tasks'\n              example: '{\n                          \"pagination\": {\n                            \"page\": 1,\n                            \"pageSize\": 50,\n                            \"pageCount\": 1,\n                            \"itemCount\": 1\n                          },\n                          \"items\": [\n                            {\n                              \"name\": \"Demolition\",\n                              \"rate\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 20.0\n                              },\n                              \"chargeType\": \"TIME\",\n                              \"status\": \"ACTIVE\",\n                              \"estimateMinutes\": 12000,\n                              \"taskId\": \"00000000-0000-0000-0000-000000000000\",\n                              \"projectId\": \"00000000-0000-0000-0000-000000000000\",\n                              \"totalMinutes\": 180,\n                              \"totalAmount\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 60.0\n                              },\n                              \"minutesToBeInvoiced\": 180,\n                              \"minutesInvoiced\": 0,\n                              \"nonChargeableMinutes\": 0,\n                              \"fixedMinutes\": 0,\n                              \"amountToBeInvoiced\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 60.0\n                              },\n                              \"amountInvoiced\": {\n                                \"currency\": \"AUD\",\n                                \"value\": 0.0\n                              }\n                            }\n                          ]\n                        }'\n        '400':\n          $ref: '#/components/responses/400Error'\n    post:\n      security:\n        - OAuth2: [projects]\n      tags:\n        - Project\n      summary: Allows you to create a task\n      operationId: createTask\n      description: Allows you to create a specific task\n      parameters:\n        - name: projectId\n          x-snake: project_id\n          in: path\n          required: true\n          description: You can create a task on a specified projectId\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        required: true\n        description: The task object you are creating\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskCreateOrUpdate'\n            example:\n              '{\n                \"status\": \"INPROGRESS\"\n                }'\n      responses:\n        '201':\n          description: OK/Success - return response 201 no content\n          x-isEmpty: true\n        '400':\n          $ref: '#/components/responses/400Error'\n  /Projects/{projectId}/Tasks/{taskId}:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [projects, projects.read]\n      tags:\n        - Project\n      summary: Retrieves a single project task\n      operationId: getTask\n      description: Allows you to retrieve a specific project\n      parameters:\n        - name: projectId\n          x-snake: project_id\n          in: path\n          required: true\n          description: You can specify an individual project by appending the projectId to the endpoint\n          schema:\n            type: string\n            format: uuid\n        - name: taskId\n          x-snake: task_id\n          in: path\n          required: true\n          description: \"You can specify an individual task by appending the taskId to the endpoint, i.e. GET https://.../tasks/{taskID}\" \n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: OK/success, returns a list of task objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n              example: '{\n                          \"name\": \"Demolition\",\n                          \"rate\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 20\n                          },\n                          \"chargeType\": \"TIME\",\n                          \"status\": \"ACTIVE\",\n                          \"estimateMinutes\": 12000,\n                          \"taskId\": \"00000000-0000-0000-0000-000000000000\",\n                          \"projectId\": \"00000000-0000-0000-0000-000000000000\",\n                          \"totalMinutes\": 300,\n                          \"totalAmount\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 100\n                          },\n                          \"minutesToBeInvoiced\": 300,\n                          \"minutesInvoiced\": 0,\n                          \"nonChargeableMinutes\": 0,\n                          \"fixedMinutes\": 0,\n                          \"amountToBeInvoiced\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 100\n                          },\n                          \"amountInvoiced\": {\n                            \"currency\": \"AUD\",\n                            \"value\": 0\n                          }\n                        }'\n        '400':\n          $ref: '#/components/responses/400Error'\n    put:\n      security:\n        - OAuth2: [projects]\n      tags:\n        - Project\n      summary: Allows you to update a task\n      operationId: updateTask\n      description: Allows you to update a specific task\n      parameters:\n        - name: projectId\n          x-snake: project_id\n          in: path\n          required: true\n          description: You can specify an individual project by appending the projectId to the endpoint\n          schema:\n            type: string\n            format: uuid\n        - name: taskId\n          x-snake: task_id\n          in: path\n          required: true\n          description: You can specify an individual task by appending the id to the endpoint\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        required: true\n        description: The task object you are updating\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskCreateOrUpdate'\n            example: ''\n      responses:\n        '204':\n          description: OK/Success - return response 204 no content\n          x-isEmpty: true\n        '400':\n          $ref: '#/components/responses/400Error'\n    delete:\n      security:\n        - OAuth2: [projects]\n      tags:\n        - Project\n      summary: Allows you to delete a task\n      operationId: deleteTask\n      description: Allows you to delete a specific task\n      parameters:\n        - name: projectId\n          x-snake: project_id\n          in: path\n          required: true\n          description: You can specify an individual project by appending the projectId to the endpoint\n          schema:\n            type: string\n            format: uuid\n        - name: taskId\n          x-snake: task_id\n          in: path\n          required: true\n          description: You can specify an individual task by appending the id to the endpoint\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '204':\n          description: Success - return response 204 no content\n          x-isEmpty: true\n        '400':\n          $ref: '#/components/responses/400Error'\n  /Projects/{projectId}/Time:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [projects, projects.read]\n      tags:\n        - Project\n      summary: Retrieves all time entries associated with a specific project\n      operationId: getTimeEntries\n      description: Allows you to retrieve the time entries associated with a specific project\n      parameters:\n        - name: projectId\n          x-snake: project_id\n          in: path\n          required: true\n          description: Identifier of the project, that the task (which the time entry is logged against) belongs to.\n          schema:\n            type: string\n            format: uuid\n        - name: userId\n          x-snake: user_id\n          in: query\n          description: The xero user identifier of the person who logged time.\n          schema:\n            type: string\n            format: uuid\n        - name: taskId\n          x-snake: task_id\n          in: query\n          description: Identifier of the task that time entry is logged against.\n          schema:\n            type: string\n            format: uuid\n        - name: invoiceId\n          x-snake: invoice_id\n          in: query\n          description: Finds all time entries for this invoice.\n          schema:\n            type: string\n            format: uuid\n        - name: contactId\n          x-snake: contact_id\n          in: query\n          description: Finds all time entries for this contact identifier.\n          schema:\n            type: string\n            format: uuid\n        - name: page\n          in: query\n          description: Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0.  \n          schema:\n            type: integer\n            example: 1\n        - name: pageSize\n          x-snake: page_size\n          in: query\n          description: Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500.\n          schema:\n            type: integer\n            example: 10\n        - name: states\n          in: query\n          description: \"Comma-separated list of states to find. Will find all time entries that are in the status of whatever is specified.\t\"  \n          schema: \n            type: array\n            items:\n              type: string\n        - name: isChargeable\n          x-snake: is_chargeable\n          in: query\n          description: \"Finds all time entries which relate to tasks with the charge type `TIME` or `FIXED`.\"\n          schema:\n            type: boolean\n        - name: dateAfterUtc\n          x-snake: date_after_utc\n          in: query\n          description: \"ISO 8601 UTC date. Finds all time entries on or after this date filtered on the `dateUtc` field.\"\n          schema:\n            type: string\n            format: date-time\n        - name: dateBeforeUtc\n          x-snake: date_before_utc\n          in: query\n          description: \"ISO 8601 UTC date. Finds all time entries on or before this date filtered on the `dateUtc` field.\"\n          schema:\n            type: string\n            format: date-time\n      responses:\n        '200':\n          description: OK/success, returns a list of time entry objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TimeEntries'\n              example: '{\n                          \"pagination\": {\n                              \"page\": 1,\n                              \"pageSize\": 50,\n                              \"pageCount\": 1,\n                              \"itemCount\": 9\n                          },\n                          \"items\":[\n                            {\n                              \"timeEntryId\": \"00000000-0000-0000-0000-000000000000\",\n                              \"userId\": \"00000000-0000-0000-0000-000000000000\",\n                              \"projectId\": \"00000000-0000-0000-0000-000000000000\",\n                              \"taskId\": \"00000000-0000-0000-0000-000000000000\",\n                              \"dateUtc\": \"2020-02-27T15:00:00Z\",\n                              \"dateEnteredUtc\": \"00000000-0000-0000-0000-000000000000\n                              \"duration\":45,\n                              \"description\": \"My description\",\n                              \"status\": \"ACTIVE\"\n                              },\n                              {\n                                \"timeEntryId\": \"00000000-0000-0000-0000-000000000000\",\n                                \"userId\": \"00000000-0000-0000-0000-000000000000\",\n                                \"projectId\": \"00000000-0000-0000-0000-000000000000\",\n                                \"taskId\": \"00000000-0000-0000-0000-000000000000\",\n                                \"dateUtc\": \"2020-02-26T15:00:00Z\",\n                                \"dateEnteredUtc\": \"2020-02-28T03:24:29.2215641Z\",\n                                \"duration\":30,\n                                \"description\": \"My description\",\n                                \"status\": \"ACTIVE\"\n                              }\n                          ]\n                        }'\n        '400':\n          $ref: '#/components/responses/400Error'\n    post:\n      security:\n        - OAuth2: [projects]\n      tags:\n        - Project\n      summary: Creates a time entry for a specific project\n      operationId: createTimeEntry\n      description: Allows you to create a specific task\n      parameters:\n        - name: projectId\n          x-snake: project_id\n          in: path\n          required: true\n          description: You can specify an individual project by appending the projectId to the endpoint\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        required: true\n        description: The time entry object you are creating\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TimeEntryCreateOrUpdate'\n            example: '{\n                        \"userId\": \"00000000-0000-0000-0000-000000000000\",\n                        \"taskId\": \"00000000-0000-0000-0000-000000000000\",\n                        \"dateUtc\": \"2020-02-26T15:00:00Z\",\n                        \"duration\":30,\n                        \"description\": \"My description\"\n                      }'\n      responses:\n        '200':\n          description: OK/success, returns the newly created time entry\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TimeEntry'\n              example: '{\n                          \"timeEntryId\": \"00000000-0000-0000-0000-000000000000\",\n                          \"userId\": \"00000000-0000-0000-0000-000000000000\",\n                          \"projectId\": \"00000000-0000-0000-0000-000000000000\",\n                          \"taskId\": \"00000000-0000-0000-0000-000000000000\",\n                          \"dateUtc\": \"2020-02-26T15:00:00Z\",\n                          \"dateEnteredUtc\": \"2020-02-28T20:37:42.8652832Z\",\n                          \"duration\":30,\n                          \"description\": \"My description\",\n                          \"status\": \"ACTIVE\"\n                        }'\n        '400':\n          $ref: '#/components/responses/400Error'\n  /Projects/{projectId}/Time/{timeEntryId}:\n    parameters:\n      - $ref: '#/components/parameters/requiredHeader'\n    get:\n      security:\n        - OAuth2: [projects, projects.read]\n      tags:\n        - Project\n      summary: Retrieves a single time entry for a specific project\n      operationId: getTimeEntry\n      description: Allows you to get a single time entry in a project\n      parameters:\n        - name: projectId\n          x-snake: project_id\n          in: path\n          required: true\n          description: You can specify an individual project by appending the projectId to the endpoint\n          schema:\n            type: string\n            format: uuid\n        - name: timeEntryId\n          x-snake: time_entry_id\n          in: path\n          required: true\n          description: You can specify an individual time entry by appending the id to the endpoint\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: OK/success, returns a single time entry \n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TimeEntry'\n              example: '{\n                          \"timeEntryId\": \"00000000-0000-0000-0000-000000000000\",\n                          \"userId\": \"00000000-0000-0000-0000-000000000000\",\n                          \"projectId\": \"00000000-0000-0000-0000-000000000000\",\n                          \"taskId\": \"00000000-0000-0000-0000-000000000000\",\n                          \"dateUtc\": \"2020-02-27T15:00:00Z\",\n                          \"dateEnteredUtc\": \"2020-02-21T21:41:22.2642727Z\",\n                          \"duration\":45,\n                          \"description\": \"My description\",\n                          \"status\": \"ACTIVE\"\n                        }'\n        '400':\n          $ref: '#/components/responses/400Error'\n    put:\n      security:\n        - OAuth2: [projects]\n      tags:\n        - Project\n      summary: Updates a time entry for a specific project\n      operationId: updateTimeEntry\n      description: Allows you to update time entry in a project\n      parameters:\n        - name: projectId\n          x-snake: project_id\n          in: path\n          required: true\n          description: You can specify an individual project by appending the projectId to the endpoint\n          schema:\n            type: string\n            format: uuid\n        - name: timeEntryId\n          x-snake: time_entry_id\n          in: path\n          required: true\n          description: You can specify an individual time entry by appending the id to the endpoint\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        required: true\n        description: The time entry object you are updating\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TimeEntryCreateOrUpdate'\n            example: '{\n                        \"userId\": \"00000000-0000-0000-0000-000000000000\",\n                        \"taskId\": \"00000000-0000-0000-0000-000000000000\",\n                        \"dateUtc\": \"2020-02-27T15:00:00Z\",\n                        \"duration\":45,\n                        \"description\": \"My UPDATED description\"\n                      }'\n      responses:\n        '204':\n          description: Success - return response 204 no content\n          x-isEmpty: true\n        '400':\n          $ref: '#/components/responses/400Error'\n    delete:\n      security:\n        - OAuth2: [projects]\n      tags:\n        - Project\n      summary: Deletes a time entry for a specific project\n      operationId: deleteTimeEntry\n      description: Allows you to delete a specific time entry\n      parameters:\n        - name: projectId\n          x-snake: project_id\n          in: path\n          required: true\n          description: You can specify an individual project by appending the projectId to the endpoint\n          schema:\n            type: string\n            format: uuid\n        - name: timeEntryId\n          x-snake: time_entry_id\n          in: path\n          required: true\n          description: You can specify an individual task by appending the id to the endpoint\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '204':\n          description: Success - return response 204 no content\n          x-isEmpty: true\n        '400':\n          $ref: '#/components/responses/400Error'\ncomponents:\n  securitySchemes:\n    OAuth2:\n      type: oauth2\n      description: For more information\n      flows: \n        authorizationCode:\n          authorizationUrl: 'https://login.xero.com/identity/connect/authorize'\n          tokenUrl: 'https://identity.xero.com/connect/token'\n          scopes:\n            email: Grant read-only access to your email\n            openid: Grant read-only access to your open id\n            profile: your profile information\n            projects: Grant read-write access to projects\n            projects.read: Grant read-only access to projects\n  parameters:\n    requiredHeader: \n      in: header\n      name: Xero-Tenant-Id\n      x-snake: xero_tenant_id\n      description: Xero identifier for Tenant\n      schema:\n        type: string\n      required: true \n    chargeType:\n      in: query\n      name: chargeType\n      x-snake: charge_type\n      schema: \n        $ref: '#/components/schemas/ChargeType'\n  schemas:\n    Projects: \n      externalDocs:\n        url: 'https://developer.xero.com/documentation/projects/projects'\n      type: object\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Project'\n    ProjectCreateOrUpdate:\n      externalDocs:\n        url: 'https://developer.xero.com/documentation/projects/projects'\n      type: object\n      properties:\n        contactId:\n          externalDocs:\n            url: 'https://developer.xero.com/documentation/api/contacts'\n          type: string\n          format: uuid\n          example: '01234567-89ab-cdef-0123-456789abcdef'\n          description: Identifier of the contact this project was created for.\n        name: \n          type: string\n          example: 'New Kitchen'\n          description: Name of the project.\n        estimateAmount:\n          type: number\n          format: double\n          x-is-money: true\n          example: 1.00\n        deadlineUtc:\n          type: string\n          format: date-time\n          example: '2019-12-10T12:59:59Z'\n          description: Deadline for the project. UTC Date Time in ISO-8601 format.\n      required:\n        - name\n    ProjectPatch:\n      externalDocs:\n        url: 'https://developer.xero.com/documentation/projects/projects'\n      type: object\n      properties:      \n        status:\n          $ref: '#/components/schemas/ProjectStatus'\n          type: string\n      required:\n        - status\n    Project:\n      externalDocs:\n        url: 'https://developer.xero.com/documentation/projects/projects'\n      type: object\n      properties:\n        projectId:\n          type: string\n          format: uuid\n          example: '254553fa-2be8-4991-bd5e-70a97ea12ef8'\n          description: Identifier of the project.\n        contactId:\n          externalDocs:\n            url: 'https://developer.xero.com/documentation/api/contacts'\n          type: string\n          format: uuid\n          example: '01234567-89ab-cdef-0123-456789abcdef'\n          description: Identifier of the contact this project was created for.\n        name: \n          type: string\n          example: 'New Kitchen'\n          description: Name of the project.\n        currencyCode:\n          $ref: '#/components/schemas/CurrencyCode'\n          type: string\n        minutesLogged:\n          type: integer\n          example: 0\n          description: A total of minutes logged against all tasks on the Project.\n        totalTaskAmount:\n          $ref: '#/components/schemas/Amount'\n        totalExpenseAmount:\n          $ref: '#/components/schemas/Amount'\n        estimateAmount:\n          $ref: '#/components/schemas/Amount'\n        minutesToBeInvoiced:\n          type: integer\n          example: 0\n          description: Minutes which have not been invoiced across all chargeable tasks in the project.\n        taskAmountToBeInvoiced:\n          $ref: '#/components/schemas/Amount'\n        taskAmountInvoiced:\n          $ref: '#/components/schemas/Amount'\n        expenseAmountToBeInvoiced:\n          $ref: '#/components/schemas/Amount'\n        expenseAmountInvoiced:\n          $ref: '#/components/schemas/Amount'\n        projectAmountInvoiced:\n          $ref: '#/components/schemas/Amount'\n        deposit:\n          $ref: '#/components/schemas/Amount'\n        depositApplied:\n          $ref: '#/components/schemas/Amount'\n        creditNoteAmount:\n          $ref: '#/components/schemas/Amount'\n        deadlineUtc:\n          type: string\n          format: date-time\n          example: '2019-12-10T12:59:59Z'\n          description: Deadline for the project. UTC Date Time in ISO-8601 format.\n        totalInvoiced:\n          $ref: '#/components/schemas/Amount'\n        totalToBeInvoiced:\n          $ref: '#/components/schemas/Amount'\n        estimate:\n          $ref: '#/components/schemas/Amount'\n        status:\n          type: string\n          $ref: '#/components/schemas/ProjectStatus'\n      required:\n        - name    \n    Pagination:\n      properties:\n        page:\n          type: integer\n          example: 1\n          description: Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0.  \n        pageSize:\n          type: integer\n          example: 10\n          description: Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500.\n        pageCount:\n          type: integer\n          example: 1\n          description: Number of pages available\n        itemCount:\n          type: integer\n          example: 2\n          description: Number of items returned\n    ProjectUsers: \n      externalDocs:\n        url: 'https://developer.xero.com/documentation/projects/users'\n      type: object\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProjectUser'\n    ProjectUser:\n      externalDocs:\n        url: 'https://developer.xero.com/documentation/projects/users'\n      type: object\n      properties:\n        userId:\n          type: string\n          format: uuid\n          example: '254553fa-2be8-4991-bd5e-70a97ea12ef8'\n          description: Identifier of the user of the project.\n        name: \n          type: string\n          example: 'Sidney Allen'\n          description: Full name of the user.\n        email: \n          type: string\n          example: 'sidneyallen@xero.com'\n          description: Email address of the user.\n    Amount:\n      type: object\n      properties:\n          currency:\n            $ref: '#/components/schemas/CurrencyCode'\n            type: string\n          value:\n            type: number\n            format: double\n            x-is-money: true\n            example: 1.00\n    ProjectStatus:\n      description: Status for project\n      example: \"INPROGRESS\"\n      type: string\n      enum:    \n      - INPROGRESS\n      - CLOSED\n    CurrencyCode:\n      description: 3 letter alpha code for the ISO-4217 currency code, e.g. USD, AUD.\n      example: \"AUD\"\n      type: string\n      enum:\n      - AED \n      - AFN\n      - ALL\n      - AMD\n      - ANG\n      - AOA\n      - ARS\n      - AUD\n      - AWG\n      - AZN\n      - BAM\n      - BBD\n      - BDT\n      - BGN\n      - BHD\n      - BIF\n      - BMD\n      - BND\n      - BOB\n      - BRL\n      - BSD\n      - BTN\n      - BWP\n      - BYN\n      - BZD\n      - CAD\n      - CDF\n      - CHF\n      - CLP\n      - CNY\n      - COP\n      - CRC\n      - CUC\n      - CUP\n      - CVE\n      - CZK\n      - DJF\n      - DKK\n      - DOP\n      - DZD\n      - EGP\n      - ERN\n      - ETB\n      - EUR\n      - FJD\n      - FKP\n      - GBP\n      - GEL\n      - GGP\n      - GHS\n      - GIP\n      - GMD\n      - GNF\n      - GTQ\n      - GYD\n      - HKD\n      - HNL\n      - HRK\n      - HTG\n      - HUF\n      - IDR\n      - ILS\n      - IMP\n      - INR\n      - IQD\n      - IRR\n      - ISK\n      - JEP\n      - JMD\n      - JOD\n      - JPY\n      - KES\n      - KGS\n      - KHR\n      - KMF\n      - KPW\n      - KRW\n      - KWD\n      - KYD\n      - KZT\n      - LAK\n      - LBP\n      - LKR\n      - LRD\n      - LSL\n      - LYD\n      - MAD\n      - MDL\n      - MGA\n      - MKD\n      - MMK\n      - MNT\n      - MOP\n      - MRU\n      - MUR\n      - MVR\n      - MWK\n      - MXN\n      - MYR\n      - MZN\n      - NAD\n      - NGN\n      - NIO\n      - NOK\n      - NPR\n      - NZD\n      - OMR\n      - PAB\n      - PEN\n      - PGK\n      - PHP\n      - PKR\n      - PLN\n      - PYG\n      - QAR\n      - RON\n      - RSD\n      - RUB\n      - RWF\n      - SAR\n      - SBD\n      - SCR\n      - SDG\n      - SEK\n      - SGD\n      - SHP\n      - SLL\n      - SOS\n      - SPL\n      - SRD\n      - STN\n      - SVC\n      - SYP\n      - SZL\n      - THB\n      - TJS\n      - TMT\n      - TND\n      - TOP\n      - TRY\n      - TTD\n      - TVD\n      - TWD\n      - TZS\n      - UAH\n      - UGX\n      - USD\n      - UYU\n      - UZS\n      - VEF\n      - VND\n      - VUV\n      - WST\n      - XAF\n      - XCD\n      - XDR\n      - XOF\n      - XPF\n      - YER\n      - ZAR\n      - ZMW\n      - ZMK\n      - ZWD\n      - \"\"\n    Error:\n      externalDocs:\n        url: 'https://developer.xero.com/documentation/projects/projects-response-codes'\n      type: object\n      properties:\n        message:\n          type: string\n          description: Exception message\n        modelState:\n          type: object\n          description: Array of Elements of validation Errors\n    Tasks: \n      externalDocs:\n        url: 'https://developer.xero.com/documentation/projects/projects'\n      type: object\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Task'\n    Task:\n      externalDocs:\n        url: 'https://developer.xero.com/documentation/projects/projects'\n      type: object\n      properties:\n        taskId:\n          type: string\n          format: uuid\n          example: '00000000-0000-0000-000-000000000000'\n          description: Identifier of the task.\n        name:\n          type: string\n          description: Name of the task.\n        rate:\n          $ref: '#/components/schemas/Amount'\n          type: number\n        chargeType:\n          $ref: '#/components/schemas/ChargeType'\n          type: string\n        estimateMinutes:\n          type: integer\n          description: An estimated time to perform the task\n        projectId:\n          type: string\n          format: uuid\n          example: '00000000-0000-0000-000-000000000000'\n          description: Identifier of the project task belongs to.\n        totalMinutes:\n          type: integer\n          description: Total minutes which have been logged against the task. Logged by assigning a time entry to a task\n        totalAmount:\n          $ref: '#/components/schemas/Amount'\n          type: number\n        minutesInvoiced:\n          type: integer\n          description: Minutes on this task which have been invoiced.\n        minutesToBeInvoiced:\n          type: integer\n          description: Minutes on this task which have not been invoiced.\n        fixedMinutes:\n          type: integer\n          description: Minutes logged against this task if its charge type is `FIXED`.\n        nonChargeableMinutes:\n          type: integer\n          description: Minutes logged against this task if its charge type is `NON_CHARGEABLE`.\n        amountToBeInvoiced:\n          $ref: '#/components/schemas/Amount'\n          type: number\n        amountInvoiced:\n          $ref: '#/components/schemas/Amount'\n          type: number\n        status:\n          type: string\n          enum:\n            - ACTIVE\n            - INVOICED\n            - LOCKED\n          description: Status of the task. When a task of ChargeType is `FIXED` and the rate amount is invoiced the status will be set to `INVOICED` and can't be modified. A task with ChargeType of `TIME` or `NON_CHARGEABLE` cannot have a status of `INVOICED`. A `LOCKED` state indicates that the task is currently changing state (for example being invoiced) and can't be modified.\n    ChargeType:\n      description: \"Can be `TIME`, `FIXED` or `NON_CHARGEABLE`, defines how the task will be charged. Use `TIME` when you want to charge per hour and `FIXED` to charge as a fixed amount. If the task will not be charged use `NON_CHARGEABLE`.\"\n      type: string\n      enum:\n        - TIME\n        - FIXED\n        - NON_CHARGEABLE\n    TaskCreateOrUpdate:\n      externalDocs:\n        url: 'https://developer.xero.com/documentation/projects/projects'\n      type: object\n      properties:\n        name:\n          type: string\n          description: \"Name of the task. Max length 100 characters.\"\n          maximum: 100\n        rate: \n          $ref: '#/components/schemas/Amount'\n          type: number\n        chargeType:\n          $ref: '#/components/schemas/ChargeType'\n          type: string\n        estimateMinutes:\n          type: integer\n          description: An estimated time to perform the task\n      required:\n        - name\n        - rate\n        - chargeType\n    TimeEntries:\n      externalDocs:\n        url: 'https://developer.xero.com/documentation/projects/time'\n      type: object\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/TimeEntry'\n    TimeEntry:\n      externalDocs:\n        url: 'https://developer.xero.com/documentation/projects/time'\n      type: object\n      properties:\n        timeEntryId:\n          type: string\n          format: uuid\n          example: '00000000-0000-0000-000-000000000000'\n          description: Identifier of the time entry.\n        userId:\n          type: string\n          format: uuid\n          example: '00000000-0000-0000-000-000000000000'\n          description: The xero user identifier of the person who logged time.\n        projectId:\n          type: string\n          format: uuid\n          example: '00000000-0000-0000-000-000000000000'\n          description: Identifier of the project, that the task (which the time entry is logged against) belongs to.\n        taskId:\n          type: string\n          format: uuid\n          example: '00000000-0000-0000-000-000000000000'\n          description: Identifier of the task that time entry is logged against.\n        dateUtc:\n          type: string\n          format: date-time\n          description: The date time that time entry is logged on. UTC Date Time in ISO-8601 format.\n        dateEnteredUtc:\n          type: string\n          format: date-time\n          description: The date time that time entry is created. UTC Date Time in ISO-8601 format. By default it is set to server time.\n        duration:\n          type: integer\n          description: The duration of logged minutes.\n        description:\n          type: string\n          description: A description of the time entry.\n        status:\n          type: string\n          enum:\n            - ACTIVE\n            - LOCKED\n            - INVOICED\n          description: \"Status of the time entry. By default a time entry is created with status of `ACTIVE`. A `LOCKED` state indicates that the time entry is currently changing state (for example being invoiced). Updates are not allowed when in this state. It will have a status of INVOICED once it is invoiced.\"\n    TimeEntryCreateOrUpdate:\n      externalDocs:\n        url: 'https://developer.xero.com/documentation/projects/time'\n      type: object\n      properties:\n        userId:\n          type: string\n          format: uuid\n          example: '00000000-0000-0000-000-000000000000'\n          description: \"The xero user identifier of the person logging the time.\"\n        taskId:\n          type: string\n          format: uuid\n          example: '00000000-0000-0000-000-000000000000'\n          description: \"Identifier of the task that time entry is logged against.\"\n        dateUtc:\n          type: string\n          format: date-time\n          description: \"Date time entry is logged on. UTC Date Time in ISO-8601 format.\"\n        duration:\n          type: integer\n          description: \"Number of minutes to be logged. Duration is between 1 and 59940 inclusively.\"\n        description:\n          type: string\n          description: \"An optional description of the time entry, will be set to null if not provided during update.\"\n      required:\n        - userId\n        - taskId\n        - dateUtc\n        - duration\n  responses:\n    400Error:\n      description: A failed request due to validation error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n",
			"canonicalURL": "/github.com/XeroAPI/Xero-OpenAPI@36ba3f99bd14a6111b631ae9153811960f272727/-/blob/xero-projects.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/XeroAPI/Xero-OpenAPI/blob/36ba3f99bd14a6111b631ae9153811960f272727/xero-projects.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/Projects\": get: security: security \"OAuth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}