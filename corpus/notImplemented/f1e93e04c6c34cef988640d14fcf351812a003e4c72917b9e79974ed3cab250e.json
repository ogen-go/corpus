{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openl-tablets/openl-tablets"
		},
		"file": {
			"name": "EPBDS-10439_overloaded_spreadsheet.yaml",
			"size": 0,
			"path": "Util/openl-openapi-parser/test-resources/test.converter/spreadsheets/EPBDS-10439_overloaded_spreadsheet.yaml",
			"byteSize": 21710,
			"content": "openapi: 3.0.0\r\ninfo:\r\n  title: OpenAPI Petstore\r\n  description: This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters. For OAuth2 flow, you may use `user` as both username and password when asked to login.\r\n  license:\r\n    name: Apache-2.0\r\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\r\n  version: 1.0.0\r\nexternalDocs:\r\n  description: Find out more about OpenAPI generator\r\n  url: https://openapi-generator.tech\r\ntags:\r\n  - name: pet\r\n    description: Everything about your Pets\r\n  - name: store\r\n    description: Access to Petstore orders\r\n  - name: user\r\n    description: Operations about user\r\npaths:\r\n  /pet:\r\n    put:\r\n      tags:\r\n        - pet\r\n      summary: Update an existing pet\r\n      operationId: updatePet\r\n      requestBody:\r\n        $ref: '#/components/requestBodies/Pet'\r\n      responses:\r\n        400:\r\n          description: Invalid ID supplied\r\n        404:\r\n          description: Pet not found\r\n        405:\r\n          description: Validation exception\r\n      security:\r\n        - petstore_auth:\r\n            - write:pets\r\n            - read:pets\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: pet\r\n      x-contentType: application/json\r\n    post:\r\n      tags:\r\n        - pet\r\n      summary: Add a new pet to the store\r\n      operationId: addPet\r\n      requestBody:\r\n        $ref: '#/components/requestBodies/Pet'\r\n      responses:\r\n        405:\r\n          description: Invalid input\r\n      security:\r\n        - petstore_auth:\r\n            - write:pets\r\n            - read:pets\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: pet\r\n      x-contentType: application/json\r\n  /pet/findByStatus:\r\n    get:\r\n      tags:\r\n        - pet\r\n      summary: Finds Pets by status\r\n      description: Multiple status values can be provided with comma separated strings\r\n      operationId: findPetsByStatus\r\n      parameters:\r\n        - name: status\r\n          in: query\r\n          description: Status values that need to be considered for filter\r\n          required: true\r\n          style: form\r\n          explode: false\r\n          schema:\r\n            type: array\r\n            items:\r\n              type: string\r\n              default: available\r\n              enum:\r\n                - available\r\n                - pending\r\n                - sold\r\n      responses:\r\n        200:\r\n          description: successful operation\r\n          content:\r\n            application/xml:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Pet'\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Pet'\r\n        400:\r\n          description: Invalid status value\r\n      security:\r\n        - petstore_auth:\r\n            - write:pets\r\n            - read:pets\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: pet\r\n  /pet/findByTags:\r\n    get:\r\n      tags:\r\n        - pet\r\n      summary: Finds Pets by tags\r\n      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\r\n      operationId: findPetsByTags\r\n      parameters:\r\n        - name: tags\r\n          in: query\r\n          description: Tags to filter by\r\n          required: true\r\n          style: form\r\n          explode: false\r\n          schema:\r\n            type: array\r\n            items:\r\n              type: string\r\n      responses:\r\n        200:\r\n          description: successful operation\r\n          content:\r\n            application/xml:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Pet'\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Pet'\r\n        400:\r\n          description: Invalid tag value\r\n      deprecated: true\r\n      security:\r\n        - petstore_auth:\r\n            - write:pets\r\n            - read:pets\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: pet\r\n  /pet/{petId}:\r\n    get:\r\n      tags:\r\n        - pet\r\n      summary: Find pet by ID\r\n      description: Returns a single pet\r\n      operationId: getPetById\r\n      parameters:\r\n        - name: petId\r\n          in: path\r\n          description: ID of pet to return\r\n          required: true\r\n          style: simple\r\n          explode: false\r\n          schema:\r\n            type: integer\r\n            format: int64\r\n      responses:\r\n        200:\r\n          description: successful operation\r\n          content:\r\n            application/xml:\r\n              schema:\r\n                $ref: '#/components/schemas/Pet'\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Pet'\r\n        400:\r\n          description: Invalid ID supplied\r\n        404:\r\n          description: Pet not found\r\n      security:\r\n        - api_key: [ ]\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: pet\r\n    post:\r\n      tags:\r\n        - pet\r\n      summary: Updates a pet in the store with form data\r\n      operationId: updatePetWithForm\r\n      parameters:\r\n        - name: petId\r\n          in: path\r\n          description: ID of pet that needs to be updated\r\n          required: true\r\n          style: simple\r\n          explode: false\r\n          schema:\r\n            type: integer\r\n            format: int64\r\n      requestBody:\r\n        content:\r\n          application/x-www-form-urlencoded:\r\n            schema:\r\n              $ref: '#/components/schemas/body'\r\n      responses:\r\n        405:\r\n          description: Invalid input\r\n      security:\r\n        - petstore_auth:\r\n            - write:pets\r\n            - read:pets\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: pet\r\n      x-contentType: application/x-www-form-urlencoded\r\n    delete:\r\n      tags:\r\n        - pet\r\n      summary: Deletes a pet\r\n      operationId: deletePet\r\n      parameters:\r\n        - name: api_key\r\n          in: header\r\n          required: false\r\n          style: simple\r\n          explode: false\r\n          schema:\r\n            type: string\r\n        - name: petId\r\n          in: path\r\n          description: Pet id to delete\r\n          required: true\r\n          style: simple\r\n          explode: false\r\n          schema:\r\n            type: integer\r\n            format: int64\r\n      responses:\r\n        400:\r\n          description: Invalid pet value\r\n      security:\r\n        - petstore_auth:\r\n            - write:pets\r\n            - read:pets\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: pet\r\n  /pet/{petId}/uploadImage:\r\n    post:\r\n      tags:\r\n        - pet\r\n      summary: uploads an image\r\n      operationId: uploadFile\r\n      parameters:\r\n        - name: petId\r\n          in: path\r\n          description: ID of pet to update\r\n          required: true\r\n          style: simple\r\n          explode: false\r\n          schema:\r\n            type: integer\r\n            format: int64\r\n      requestBody:\r\n        content:\r\n          multipart/form-data:\r\n            schema:\r\n              $ref: '#/components/schemas/body_1'\r\n      responses:\r\n        200:\r\n          description: successful operation\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ApiResponse'\r\n      security:\r\n        - petstore_auth:\r\n            - write:pets\r\n            - read:pets\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: pet\r\n      x-contentType: multipart/form-data\r\n  /store/inventory:\r\n    get:\r\n      tags:\r\n        - store\r\n      summary: Returns pet inventories by status\r\n      description: Returns a map of status codes to quantities\r\n      operationId: getInventory\r\n      responses:\r\n        200:\r\n          description: successful operation\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                additionalProperties:\r\n                  type: integer\r\n                  format: int32\r\n      security:\r\n        - api_key: [ ]\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: store\r\n  /store/order:\r\n    post:\r\n      tags:\r\n        - store\r\n      summary: Place an order for a pet\r\n      operationId: placeOrder\r\n      requestBody:\r\n        description: order placed for purchasing the pet\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Order'\r\n        required: true\r\n      responses:\r\n        200:\r\n          description: successful operation\r\n          content:\r\n            application/xml:\r\n              schema:\r\n                $ref: '#/components/schemas/Order'\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Order'\r\n        400:\r\n          description: Invalid Order\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: store\r\n      x-contentType: application/json\r\n  /store/order/{orderId}:\r\n    get:\r\n      tags:\r\n        - store\r\n      summary: Find purchase order by ID\r\n      description: For valid response try integer IDs with value \u003c= 5 or \u003e 10. Other values will generated exceptions\r\n      operationId: getOrderById\r\n      parameters:\r\n        - name: orderId\r\n          in: path\r\n          description: ID of pet that needs to be fetched\r\n          required: true\r\n          style: simple\r\n          explode: false\r\n          schema:\r\n            maximum: 5\r\n            minimum: 1\r\n            type: integer\r\n            format: int64\r\n      responses:\r\n        200:\r\n          description: successful operation\r\n          content:\r\n            application/xml:\r\n              schema:\r\n                $ref: '#/components/schemas/Order'\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Order'\r\n        400:\r\n          description: Invalid ID supplied\r\n        404:\r\n          description: Order not found\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: store\r\n    delete:\r\n      tags:\r\n        - store\r\n      summary: Delete purchase order by ID\r\n      description: For valid response try integer IDs with value \u003c 1000. Anything above 1000 or nonintegers will generate API errors\r\n      operationId: deleteOrder\r\n      parameters:\r\n        - name: orderId\r\n          in: path\r\n          description: ID of the order that needs to be deleted\r\n          required: true\r\n          style: simple\r\n          explode: false\r\n          schema:\r\n            type: string\r\n      responses:\r\n        400:\r\n          description: Invalid ID supplied\r\n        404:\r\n          description: Order not found\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: store\r\n  /user:\r\n    post:\r\n      tags:\r\n        - user\r\n      summary: Create user\r\n      description: This can only be done by the logged in user.\r\n      operationId: createUser\r\n      requestBody:\r\n        description: Created user object\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/User'\r\n        required: true\r\n      responses:\r\n        default:\r\n          description: successful operation\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: user\r\n      x-contentType: application/json\r\n  /user/createWithArray:\r\n    post:\r\n      tags:\r\n        - user\r\n      summary: Creates list of users with given input array\r\n      operationId: createUsersWithArrayInput\r\n      requestBody:\r\n        $ref: '#/components/requestBodies/UserArray'\r\n      responses:\r\n        default:\r\n          description: successful operation\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: user\r\n      x-contentType: application/json\r\n  /user/createWithList:\r\n    post:\r\n      tags:\r\n        - user\r\n      summary: Creates list of users with given input array\r\n      operationId: createUsersWithListInput\r\n      requestBody:\r\n        $ref: '#/components/requestBodies/UserArray'\r\n      responses:\r\n        default:\r\n          description: successful operation\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: user\r\n      x-contentType: application/json\r\n  /user/login:\r\n    get:\r\n      tags:\r\n        - user\r\n      summary: Logs user into the system\r\n      operationId: loginUser\r\n      parameters:\r\n        - name: username\r\n          in: query\r\n          description: The user name for login\r\n          required: true\r\n          style: form\r\n          explode: true\r\n          schema:\r\n            type: string\r\n        - name: password\r\n          in: query\r\n          description: The password for login in clear text\r\n          required: true\r\n          style: form\r\n          explode: true\r\n          schema:\r\n            type: string\r\n      responses:\r\n        200:\r\n          description: successful operation\r\n          headers:\r\n            X-Rate-Limit:\r\n              description: calls per hour allowed by the user\r\n              style: simple\r\n              explode: false\r\n              schema:\r\n                type: integer\r\n                format: int32\r\n            X-Expires-After:\r\n              description: date in UTC when toekn expires\r\n              style: simple\r\n              explode: false\r\n              schema:\r\n                type: string\r\n                format: date-time\r\n          content:\r\n            application/xml:\r\n              schema:\r\n                type: string\r\n            application/json:\r\n              schema:\r\n                type: string\r\n        400:\r\n          description: Invalid username/password supplied\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: user\r\n  /user/logout:\r\n    get:\r\n      tags:\r\n        - user\r\n      summary: Logs out current logged in user session\r\n      operationId: logoutUser\r\n      responses:\r\n        default:\r\n          description: successful operation\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: user\r\n  /user/{username}:\r\n    get:\r\n      tags:\r\n        - user\r\n      summary: Get user by user name\r\n      operationId: getUserByName\r\n      parameters:\r\n        - name: username\r\n          in: path\r\n          description: The name that needs to be fetched. Use user1 for testing.\r\n          required: true\r\n          style: simple\r\n          explode: false\r\n          schema:\r\n            type: string\r\n      responses:\r\n        200:\r\n          description: successful operation\r\n          content:\r\n            application/xml:\r\n              schema:\r\n                $ref: '#/components/schemas/User'\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/User'\r\n        400:\r\n          description: Invalid username supplied\r\n        404:\r\n          description: User not found\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: user\r\n    put:\r\n      tags:\r\n        - user\r\n      summary: Updated user\r\n      description: This can only be done by the logged in user.\r\n      operationId: updateUser\r\n      parameters:\r\n        - name: username\r\n          in: path\r\n          description: name that need to be deleted\r\n          required: true\r\n          style: simple\r\n          explode: false\r\n          schema:\r\n            type: string\r\n      requestBody:\r\n        description: Updated user object\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/User'\r\n        required: true\r\n      responses:\r\n        400:\r\n          description: Invalid user supplied\r\n        404:\r\n          description: User not found\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: user\r\n      x-contentType: application/json\r\n    delete:\r\n      tags:\r\n        - user\r\n      summary: Delete user\r\n      description: This can only be done by the logged in user.\r\n      operationId: deleteUser\r\n      parameters:\r\n        - name: username\r\n          in: path\r\n          description: The name that needs to be deleted\r\n          required: true\r\n          style: simple\r\n          explode: false\r\n          schema:\r\n            type: string\r\n      responses:\r\n        400:\r\n          description: Invalid username supplied\r\n        404:\r\n          description: User not found\r\n      x-accepts: application/json\r\n      x-tags:\r\n        - tag: user\r\ncomponents:\r\n  schemas:\r\n    Order:\r\n      title: Pet Order\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n          format: int64\r\n        petId:\r\n          type: integer\r\n          format: int64\r\n        quantity:\r\n          type: integer\r\n          format: int32\r\n        shipDate:\r\n          type: string\r\n          format: date-time\r\n        status:\r\n          type: string\r\n          description: Order Status\r\n          enum:\r\n            - placed\r\n            - approved\r\n            - delivered\r\n        complete:\r\n          type: boolean\r\n          default: false\r\n      description: An order for a pets from the pet store\r\n      example:\r\n        petId: 6\r\n        quantity: 1\r\n        id: 0\r\n        shipDate: 2000-01-23T04:56:07.000+00:00\r\n        complete: false\r\n        status: placed\r\n      xml:\r\n        name: Order\r\n    Category:\r\n      title: Pet category\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n          format: int64\r\n        name:\r\n          type: string\r\n      description: A category for a pet\r\n      example:\r\n        name: name\r\n        id: 6\r\n      xml:\r\n        name: Category\r\n    User:\r\n      title: a User\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n          format: int64\r\n        username:\r\n          type: string\r\n        firstName:\r\n          type: string\r\n        lastName:\r\n          type: string\r\n        email:\r\n          type: string\r\n        password:\r\n          type: string\r\n        phone:\r\n          type: string\r\n        userStatus:\r\n          type: integer\r\n          description: User Status\r\n          format: int32\r\n      description: A User who is purchasing from the pet store\r\n      example:\r\n        firstName: firstName\r\n        lastName: lastName\r\n        password: password\r\n        userStatus: 6\r\n        phone: phone\r\n        id: 0\r\n        email: email\r\n        username: username\r\n      xml:\r\n        name: User\r\n    Tag:\r\n      title: Pet Tag\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n          format: int64\r\n        name:\r\n          type: string\r\n      description: A tag for a pet\r\n      example:\r\n        name: name\r\n        id: 1\r\n      xml:\r\n        name: Tag\r\n    Pet:\r\n      title: a Pet\r\n      required:\r\n        - name\r\n        - photoUrls\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n          format: int64\r\n        category:\r\n          $ref: '#/components/schemas/Category'\r\n        name:\r\n          type: string\r\n          example: doggie\r\n        photoUrls:\r\n          type: array\r\n          xml:\r\n            name: photoUrl\r\n            wrapped: true\r\n          items:\r\n            type: string\r\n        tags:\r\n          type: array\r\n          xml:\r\n            name: tag\r\n            wrapped: true\r\n          items:\r\n            $ref: '#/components/schemas/Tag'\r\n        status:\r\n          type: string\r\n          description: pet status in the store\r\n          enum:\r\n            - available\r\n            - pending\r\n            - sold\r\n      description: A pet for sale in the pet store\r\n      example:\r\n        photoUrls:\r\n          - photoUrls\r\n          - photoUrls\r\n        name: doggie\r\n        id: 0\r\n        category:\r\n          name: name\r\n          id: 6\r\n        tags:\r\n          - name: name\r\n            id: 1\r\n          - name: name\r\n            id: 1\r\n        status: available\r\n      xml:\r\n        name: Pet\r\n    ApiResponse:\r\n      title: An uploaded response\r\n      type: object\r\n      properties:\r\n        code:\r\n          type: integer\r\n          format: int32\r\n        type:\r\n          type: string\r\n        message:\r\n          type: string\r\n      description: Describes the result of uploading an image resource\r\n      example:\r\n        code: 0\r\n        type: type\r\n        message: message\r\n    body:\r\n      type: object\r\n      properties:\r\n        name:\r\n          type: string\r\n          description: Updated name of the pet\r\n        status:\r\n          type: string\r\n          description: Updated status of the pet\r\n    body_1:\r\n      type: object\r\n      properties:\r\n        additionalMetadata:\r\n          type: string\r\n          description: Additional data to pass to server\r\n        file:\r\n          type: string\r\n          description: file to upload\r\n          format: binary\r\n  requestBodies:\r\n    UserArray:\r\n      description: List of user object\r\n      content:\r\n        application/json:\r\n          schema:\r\n            type: array\r\n            items:\r\n              $ref: '#/components/schemas/User'\r\n      required: true\r\n    Pet:\r\n      description: Pet object that needs to be added to the store\r\n      content:\r\n        application/json:\r\n          schema:\r\n            $ref: '#/components/schemas/Pet'\r\n        application/xml:\r\n          schema:\r\n            $ref: '#/components/schemas/Pet'\r\n      required: true\r\n  securitySchemes:\r\n    petstore_auth:\r\n      type: oauth2\r\n      flows:\r\n        implicit:\r\n          authorizationUrl: /api/oauth/dialog\r\n          scopes:\r\n            write:pets: modify pets in your account\r\n            read:pets: read your pets\r\n    api_key:\r\n      type: apiKey\r\n      name: api_key\r\n      in: header",
			"canonicalURL": "/github.com/openl-tablets/openl-tablets@ced3429fe2ac07371d46d337c2e43477c07cc096/-/blob/Util/openl-openapi-parser/test-resources/test.converter/spreadsheets/EPBDS-10439_overloaded_spreadsheet.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/openl-tablets/openl-tablets/blob/ced3429fe2ac07371d46d337c2e43477c07cc096/Util/openl-openapi-parser/test-resources/test.converter/spreadsheets/EPBDS-10439_overloaded_spreadsheet.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/pet/{petId}\": post: security: security \"petstore_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}