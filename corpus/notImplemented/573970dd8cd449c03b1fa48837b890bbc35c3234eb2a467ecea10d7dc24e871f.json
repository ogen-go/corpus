{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/FraunhoferISST/diva"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "core/services/entity-management/apiDoc/openapi.yml",
			"byteSize": 53375,
			"content": "openapi: 3.0.0\ninfo:\n  description: Entity Management Service is responsible for all CRUD operations on entities\n  version: 1.0.0\n  title: Entity Management API\ntags:\n  - name: resources\n    description: CRUD operations for the resources\n  - name: assets\n    description: CRUD operations for the assets\n  - name: users\n    description: CRUD operations for the users\n  - name: services\n    description: CRUD operations for the services\n  - name: reviews\n    description: CRUD operations for the reviews\npaths:\n  /api:\n    get:\n      tags:\n        - api\n      summary: API documentation\n      description: In development mode this documentations is served on this route\n      responses:\n        '200':\n          content:\n            text/html: {}\n          description: ''\n  /resources:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    post:\n      tags:\n        - resources\n      summary: Create entity\n      description: \u003e-\n        Create new entity with the provided data. The attributes of the entity\n        may vary depending on the `entityType`. The request body must contains\n        at least all the attributes defined in the request schema. This\n        operations supports bulk mode so that multiple entities can be created\n        with one request\n      requestBody:\n        $ref: '#/components/requestBodies/EntityCreate'\n      responses:\n        '201':\n          $ref: '#/components/responses/EntityCreateSuccess'\n        '207':\n          $ref: '#/components/responses/Multi'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    get:\n      tags:\n        - resources\n      summary: Get list of resources\n      description: \u003e-\n        To get the list of resources you can specify projection with `fields`\n        parameter and set the page size with `pageSize`. Default page size is\n        **30**. The next page can be fetched by using `cursor` parameter. The\n        cursor to the next page will be included in the response body.\n      parameters:\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          example: title,entityType,description\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n        - name: cursor\n          in: query\n          description: Pagination cursor\n          required: false\n          explode: true\n          example: aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg==\n          schema:\n            type: string\n        - name: pageSize\n          in: query\n          description: Page size\n          required: false\n          explode: true\n          example: 10\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  collectionSize:\n                    type: integer\n                  collection:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Entity'\n                  cursor:\n                    type: string\n                  total:\n                    type: number\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /resources/{id}:\n    parameters:\n      - $ref: '#/components/parameters/entityIdParam'\n      - $ref: '#/components/parameters/actoridParam'\n    get:\n      tags:\n        - resources\n      summary: Get entity by id\n      description: Projection can be specified with `fields` parameter\n      parameters:\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityResponse'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    put:\n      tags:\n        - resources\n      summary: Update entity\n      description: \u003e-\n        Use this method, if you want to replace complete entity. New entity is\n        created if no entity with the provided `id` exists. Note that on this\n        operation **all** fields are replaced.\n      parameters:\n        - name: id\n          in: path\n          description: id of the resource\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/EntityUpdate'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '201':\n          description: Resource created\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    patch:\n      tags:\n        - resources\n      summary: Patch entity\n      description: \u003e-\n        Use this method to do a partial update of the entity. In the request\n        provided fields will be merged with the existing entity object. Merge is\n        always performed at the root level. Empty patches are not accepted\n      parameters:\n        - name: id\n          in: path\n          description: id of the entity\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/EntityPatch'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    post:\n      tags:\n        - resources\n      summary: Post entity (alias for PATCH)\n      description: \u003e-\n        Use this method to do a partial updated of the entity document. In the\n        request provided fields will be merged with the existing entity object.\n      requestBody:\n        $ref: '#/components/requestBodies/EntityPatch'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    delete:\n      tags:\n        - resources\n      summary: Delete entity\n      description: Delete existing entity by id\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /resources/{id}/images:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    post:\n      tags:\n        - resources\n      summary: Upload entity image\n      description: \u003e-\n        An entity can have several images that you can use as the entity icon or\n        banner. The operation returns an image `id` that represents the uploaded\n        image. The image `id` can be set as `entityIcon` or `entityBanner` to be\n        displayed as banner or icon. One entity can have up to 15 images\n      parameters:\n        - name: id\n          in: path\n          description: Entity id\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n      requestBody:\n        $ref: '#/components/requestBodies/Image'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /resources/{id}/images/{imageId}:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    get:\n      tags:\n        - resources\n      summary: Get entity image\n      description: \u003e-\n        Get uploaded entity image by image `id`. You can obtain the image ID\n        from the corresponding user document\n      parameters:\n        - name: id\n          in: path\n          description: ID of the entity image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n        - name: imageId\n          in: path\n          description: Unique identifier of the image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/ImageId'\n      responses:\n        '200':\n          description: Success\n          content:\n            image/png:\n              schema:\n                description: User image as PNG\n                type: string\n                format: binary\n            image/jpeg:\n              schema:\n                description: User image as JPG\n                type: string\n                format: binary\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    delete:\n      tags:\n        - resources\n      summary: Delete entity image\n      description: Delete the uploaded entity image\n      parameters:\n        - name: id\n          in: path\n          description: ID of the entity\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n        - name: imageId\n          in: path\n          description: Unique identifier of the image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/ImageId'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /assets:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    post:\n      tags:\n        - assets\n      summary: Create entity\n      description: \u003e-\n        Create new entity with the provided data. The attributes of the entity\n        may vary depending on the `entityType`. The request body must contains\n        at least all the attributes defined in the request schema. This\n        operations supports bulk mode so that multiple entities can be created\n        with one request\n      requestBody:\n        $ref: '#/components/requestBodies/EntityCreate'\n      responses:\n        '201':\n          $ref: '#/components/responses/EntityCreateSuccess'\n        '207':\n          $ref: '#/components/responses/Multi'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    get:\n      tags:\n        - assets\n      summary: Get list of assets\n      description: \u003e-\n        To get the list of resources you can specify projection with `fields`\n        parameter and set the page size with `pageSize`. Default page size is\n        **30**. The next page can be fetched by using `cursor` parameter. The\n        cursor to the next page will be included in the response body.\n      parameters:\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          example: title,entityType,description\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n        - name: cursor\n          in: query\n          description: Pagination cursor\n          required: false\n          explode: true\n          example: aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg==\n          schema:\n            type: string\n        - name: pageSize\n          in: query\n          description: Page size\n          required: false\n          explode: true\n          example: 10\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  collectionSize:\n                    type: integer\n                  collection:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Entity'\n                  cursor:\n                    type: string\n                  total:\n                    type: number\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /assets/{id}:\n    parameters:\n      - $ref: '#/components/parameters/useridParam'\n      - $ref: '#/components/parameters/actoridParam'\n    get:\n      tags:\n        - assets\n      summary: Get entity by id\n      description: Projection can be specified with `fields` parameter\n      parameters:\n        - name: id\n          in: path\n          description: The id of the entity to fetch\n          required: true\n          schema:\n            type: string\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityResponse'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    put:\n      tags:\n        - assets\n      summary: Update entity\n      description: \u003e-\n        Use this method, if you want to replace complete entity. New entity is\n        created if no entity with the provided `id` exists. Note that on this\n        operation **all** fields are replaced.\n      parameters:\n        - name: id\n          in: path\n          description: id of the resource\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/EntityUpdate'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '201':\n          description: Resource created\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    patch:\n      tags:\n        - assets\n      summary: Patch entity\n      description: \u003e-\n        Use this method to do a partial update of the entity. In the request\n        provided fields will be merged with the existing entity object. Merge is\n        always performed at the root level. Empty patches are not accepted\n      parameters:\n        - name: id\n          in: path\n          description: id of the entity\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/EntityPatch'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    post:\n      tags:\n        - assets\n      summary: Post entity (alias for PATCH)\n      description: \u003e-\n        Use this method to do a partial updated of the entity document. In the\n        request provided fields will be merged with the existing entity object.\n      requestBody:\n        $ref: '#/components/requestBodies/EntityPatch'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    delete:\n      tags:\n        - assets\n      summary: Delete entity\n      description: Delete existing entity by id\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /assets/{id}/images:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    post:\n      tags:\n        - assets\n      summary: Upload entity image\n      description: \u003e-\n        An entity can have several images that you can use as the entity icon or\n        banner. The operation returns an image `id` that represents the uploaded\n        image. The image `id` can be set as `entityIcon` or `entityBanner` to be\n        displayed as banner or icon. One entity can have up to 15 images\n      parameters:\n        - name: id\n          in: path\n          description: Entity id\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n      requestBody:\n        $ref: '#/components/requestBodies/Image'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /assets/{id}/images/{imageId}:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    get:\n      tags:\n        - assets\n      summary: Get entity image\n      description: \u003e-\n        Get uploaded entity image by image `id`. You can obtain the image ID\n        from the corresponding user document\n      parameters:\n        - name: id\n          in: path\n          description: ID of the entity image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n        - name: imageId\n          in: path\n          description: Unique identifier of the image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/ImageId'\n      responses:\n        '200':\n          description: Success\n          content:\n            image/png:\n              schema:\n                description: User image as PNG\n                type: string\n                format: binary\n            image/jpeg:\n              schema:\n                description: User image as JPG\n                type: string\n                format: binary\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    delete:\n      tags:\n        - assets\n      summary: Delete entity image\n      description: Delete the uploaded entity image\n      parameters:\n        - name: id\n          in: path\n          description: ID of the entity\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n        - name: imageId\n          in: path\n          description: Unique identifier of the image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/ImageId'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /users:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    post:\n      tags:\n        - users\n      summary: Create entity\n      description: \u003e-\n        Create new entity with the provided data. The attributes of the entity\n        may vary depending on the `entityType`. The request body must contains\n        at least all the attributes defined in the request schema. This\n        operations supports bulk mode so that multiple entities can be created\n        with one request\n      requestBody:\n        $ref: '#/components/requestBodies/EntityCreate'\n      responses:\n        '201':\n          $ref: '#/components/responses/EntityCreateSuccess'\n        '207':\n          $ref: '#/components/responses/Multi'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    get:\n      tags:\n        - users\n      summary: Get list of users\n      description: \u003e-\n        To get the list of resources you can specify projection with `fields`\n        parameter and set the page size with `pageSize`. Default page size is\n        **30**. The next page can be fetched by using `cursor` parameter. The\n        cursor to the next page will be included in the response body.\n      parameters:\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          example: title,entityType,description\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n        - name: cursor\n          in: query\n          description: Pagination cursor\n          required: false\n          explode: true\n          example: aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg==\n          schema:\n            type: string\n        - name: pageSize\n          in: query\n          description: Page size\n          required: false\n          explode: true\n          example: 10\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  collectionSize:\n                    type: integer\n                  collection:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Entity'\n                  cursor:\n                    type: string\n                  total:\n                    type: number\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /users/{id}:\n    parameters:\n      - $ref: '#/components/parameters/useridParam'\n      - $ref: '#/components/parameters/actoridParam'\n    get:\n      tags:\n        - users\n      summary: Get entity by id\n      description: Projection can be specified with `fields` parameter\n      parameters:\n        - name: id\n          in: path\n          description: The id of the entity to fetch\n          required: true\n          schema:\n            type: string\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityResponse'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    put:\n      tags:\n        - users\n      summary: Update entity\n      description: \u003e-\n        Use this method, if you want to replace complete entity. New entity is\n        created if no entity with the provided `id` exists. Note that on this\n        operation **all** fields are replaced.\n      parameters:\n        - name: id\n          in: path\n          description: id of the resource\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/EntityUpdate'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '201':\n          description: Resource created\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    patch:\n      tags:\n        - users\n      summary: Patch entity\n      description: \u003e-\n        Use this method to do a partial update of the entity. In the request\n        provided fields will be merged with the existing entity object. Merge is\n        always performed at the root level. Empty patches are not accepted\n      parameters:\n        - name: id\n          in: path\n          description: id of the entity\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/EntityPatch'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    post:\n      tags:\n        - users\n      summary: Post entity (alias for PATCH)\n      description: \u003e-\n        Use this method to do a partial updated of the entity document. In the\n        request provided fields will be merged with the existing entity object.\n      requestBody:\n        $ref: '#/components/requestBodies/EntityPatch'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    delete:\n      tags:\n        - users\n      summary: Delete entity\n      description: Delete existing entity by id\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /users/{id}/images:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    post:\n      tags:\n        - users\n      summary: Upload entity image\n      description: \u003e-\n        An entity can have several images that you can use as the entity icon or\n        banner. The operation returns an image `id` that represents the uploaded\n        image. The image `id` can be set as `entityIcon` or `entityBanner` to be\n        displayed as banner or icon. One entity can have up to 15 images\n      parameters:\n        - name: id\n          in: path\n          description: Entity id\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n      requestBody:\n        $ref: '#/components/requestBodies/Image'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /users/{id}/images/{imageId}:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    get:\n      tags:\n        - users\n      summary: Get entity image\n      description: \u003e-\n        Get uploaded entity image by image `id`. You can obtain the image ID\n        from the corresponding user document\n      parameters:\n        - name: id\n          in: path\n          description: ID of the entity image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n        - name: imageId\n          in: path\n          description: Unique identifier of the image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/ImageId'\n      responses:\n        '200':\n          description: Success\n          content:\n            image/png:\n              schema:\n                description: User image as PNG\n                type: string\n                format: binary\n            image/jpeg:\n              schema:\n                description: User image as JPG\n                type: string\n                format: binary\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    delete:\n      tags:\n        - users\n      summary: Delete entity image\n      description: Delete the uploaded entity image\n      parameters:\n        - name: id\n          in: path\n          description: ID of the entity\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n        - name: imageId\n          in: path\n          description: Unique identifier of the image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/ImageId'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /services:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    post:\n      tags:\n        - services\n      summary: Create entity\n      description: \u003e-\n        Create new entity with the provided data. The attributes of the entity\n        may vary depending on the `entityType`. The request body must contains\n        at least all the attributes defined in the request schema. This\n        operations supports bulk mode so that multiple entities can be created\n        with one request\n      requestBody:\n        $ref: '#/components/requestBodies/EntityCreate'\n      responses:\n        '201':\n          $ref: '#/components/responses/EntityCreateSuccess'\n        '207':\n          $ref: '#/components/responses/Multi'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    get:\n      tags:\n        - services\n      summary: Get list of services\n      description: \u003e-\n        To get the list of resources you can specify projection with `fields`\n        parameter and set the page size with `pageSize`. Default page size is\n        **30**. The next page can be fetched by using `cursor` parameter. The\n        cursor to the next page will be included in the response body.\n      parameters:\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          example: title,entityType,description\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n        - name: cursor\n          in: query\n          description: Pagination cursor\n          required: false\n          explode: true\n          example: aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg==\n          schema:\n            type: string\n        - name: pageSize\n          in: query\n          description: Page size\n          required: false\n          explode: true\n          example: 10\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  collectionSize:\n                    type: integer\n                  collection:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Entity'\n                  cursor:\n                    type: string\n                  total:\n                    type: number\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /services/{id}:\n    parameters:\n      - $ref: '#/components/parameters/useridParam'\n      - $ref: '#/components/parameters/actoridParam'\n    get:\n      tags:\n        - services\n      summary: Get entity by id\n      description: Projection can be specified with `fields` parameter\n      parameters:\n        - name: id\n          in: path\n          description: The id of the entity to fetch\n          required: true\n          schema:\n            type: string\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityResponse'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    put:\n      tags:\n        - services\n      summary: Update entity\n      description: \u003e-\n        Use this method, if you want to replace complete entity. New entity is\n        created if no entity with the provided `id` exists. Note that on this\n        operation **all** fields are replaced.\n      parameters:\n        - name: id\n          in: path\n          description: id of the resource\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/EntityUpdate'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '201':\n          description: Resource created\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    patch:\n      tags:\n        - services\n      summary: Patch entity\n      description: \u003e-\n        Use this method to do a partial update of the entity. In the request\n        provided fields will be merged with the existing entity object. Merge is\n        always performed at the root level. Empty patches are not accepted\n      parameters:\n        - name: id\n          in: path\n          description: id of the entity\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/EntityPatch'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    post:\n      tags:\n        - services\n      summary: Post entity (alias for PATCH)\n      description: \u003e-\n        Use this method to do a partial updated of the entity document. In the\n        request provided fields will be merged with the existing entity object.\n      requestBody:\n        $ref: '#/components/requestBodies/EntityPatch'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    delete:\n      tags:\n        - services\n      summary: Delete entity\n      description: Delete existing entity by id\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /services/{id}/images:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    post:\n      tags:\n        - services\n      summary: Upload entity image\n      description: \u003e-\n        An entity can have several images that you can use as the entity icon or\n        banner. The operation returns an image `id` that represents the uploaded\n        image. The image `id` can be set as `entityIcon` or `entityBanner` to be\n        displayed as banner or icon. One entity can have up to 15 images\n      parameters:\n        - name: id\n          in: path\n          description: Entity id\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n      requestBody:\n        $ref: '#/components/requestBodies/Image'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /services/{id}/images/{imageId}:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    get:\n      tags:\n        - services\n      summary: Get entity image\n      description: \u003e-\n        Get uploaded entity image by image `id`. You can obtain the image ID\n        from the corresponding user document\n      parameters:\n        - name: id\n          in: path\n          description: ID of the entity image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n        - name: imageId\n          in: path\n          description: Unique identifier of the image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/ImageId'\n      responses:\n        '200':\n          description: Success\n          content:\n            image/png:\n              schema:\n                description: User image as PNG\n                type: string\n                format: binary\n            image/jpeg:\n              schema:\n                description: User image as JPG\n                type: string\n                format: binary\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    delete:\n      tags:\n        - services\n      summary: Delete entity image\n      description: Delete the uploaded entity image\n      parameters:\n        - name: id\n          in: path\n          description: ID of the entity\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n        - name: imageId\n          in: path\n          description: Unique identifier of the image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/ImageId'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /reviews:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    post:\n      tags:\n        - reviews\n      summary: Create entity\n      description: \u003e-\n        Create new entity with the provided data. The attributes of the entity\n        may vary depending on the `entityType`. The request body must contains\n        at least all the attributes defined in the request schema. This\n        operations supports bulk mode so that multiple entities can be created\n        with one request\n      requestBody:\n        $ref: '#/components/requestBodies/EntityCreate'\n      responses:\n        '201':\n          $ref: '#/components/responses/EntityCreateSuccess'\n        '207':\n          $ref: '#/components/responses/Multi'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    get:\n      tags:\n        - reviews\n      summary: Get list of reviews\n      description: \u003e-\n        To get the list of resources you can specify projection with `fields`\n        parameter and set the page size with `pageSize`. Default page size is\n        **30**. The next page can be fetched by using `cursor` parameter. The\n        cursor to the next page will be included in the response body.\n      parameters:\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          example: title,entityType,description\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n        - name: cursor\n          in: query\n          description: Pagination cursor\n          required: false\n          explode: true\n          example: aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg==\n          schema:\n            type: string\n        - name: pageSize\n          in: query\n          description: Page size\n          required: false\n          explode: true\n          example: 10\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  collectionSize:\n                    type: integer\n                  collection:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Entity'\n                  cursor:\n                    type: string\n                  total:\n                    type: number\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /reviews/{id}:\n    parameters:\n      - $ref: '#/components/parameters/useridParam'\n      - $ref: '#/components/parameters/actoridParam'\n    get:\n      tags:\n        - reviews\n      summary: Get entity by id\n      description: Projection can be specified with `fields` parameter\n      parameters:\n        - name: id\n          in: path\n          description: The id of the entity to fetch\n          required: true\n          schema:\n            type: string\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/EntityResponse'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    put:\n      tags:\n        - reviews\n      summary: Update entity\n      description: \u003e-\n        Use this method, if you want to replace complete entity. New entity is\n        created if no entity with the provided `id` exists. Note that on this\n        operation **all** fields are replaced.\n      parameters:\n        - name: id\n          in: path\n          description: id of the resource\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/EntityUpdate'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '201':\n          description: Resource created\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    patch:\n      tags:\n        - reviews\n      summary: Patch entity\n      description: \u003e-\n        Use this method to do a partial update of the entity. In the request\n        provided fields will be merged with the existing entity object. Merge is\n        always performed at the root level. Empty patches are not accepted\n      parameters:\n        - name: id\n          in: path\n          description: id of the entity\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/EntityPatch'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    post:\n      tags:\n        - reviews\n      summary: Post entity (alias for PATCH)\n      description: \u003e-\n        Use this method to do a partial updated of the entity document. In the\n        request provided fields will be merged with the existing entity object.\n      requestBody:\n        $ref: '#/components/requestBodies/EntityPatch'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    delete:\n      tags:\n        - reviews\n      summary: Delete entity\n      description: Delete existing entity by id\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /reviews/{id}/images:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    post:\n      tags:\n        - reviews\n      summary: Upload entity image\n      description: \u003e-\n        An entity can have several images that you can use as the entity icon or\n        banner. The operation returns an image `id` that represents the uploaded\n        image. The image `id` can be set as `entityIcon` or `entityBanner` to be\n        displayed as banner or icon. One entity can have up to 15 images\n      parameters:\n        - name: id\n          in: path\n          description: Entity id\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n      requestBody:\n        $ref: '#/components/requestBodies/Image'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n  /reviews/{id}/images/{imageId}:\n    parameters:\n      - $ref: '#/components/parameters/actoridParam'\n    get:\n      tags:\n        - reviews\n      summary: Get entity image\n      description: \u003e-\n        Get uploaded entity image by image `id`. You can obtain the image ID\n        from the corresponding user document\n      parameters:\n        - name: id\n          in: path\n          description: ID of the entity image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n        - name: imageId\n          in: path\n          description: Unique identifier of the image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/ImageId'\n      responses:\n        '200':\n          description: Success\n          content:\n            image/png:\n              schema:\n                description: User image as PNG\n                type: string\n                format: binary\n            image/jpeg:\n              schema:\n                description: User image as JPG\n                type: string\n                format: binary\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\n    delete:\n      tags:\n        - reviews\n      summary: Delete entity image\n      description: Delete the uploaded entity image\n      parameters:\n        - name: id\n          in: path\n          description: ID of the entity\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/EntityId'\n        - name: imageId\n          in: path\n          description: Unique identifier of the image\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/ImageId'\n      responses:\n        '200':\n          $ref: '#/components/responses/SuccessEmpty'\n        4XX:\n          $ref: '#/components/responses/BadRequestError'\n        5XX:\n          $ref: '#/components/responses/UnexpectedError'\nservers:\n  - url: http://localhost:3000\ncomponents:\n  requestBodies:\n    EntityCreate:\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: '#/components/schemas/EntityCreate'\n              - $ref: '#/components/schemas/EntityCreateBulk'\n    EntityUpdate:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EntityCreate'\n    EntityPatch:\n      required: true\n      content:\n        application/json:\n          schema:\n            title: Patch body\n            description: \u003e-\n              The body can be any attribute defined in the corresponding entity\n              JSON schema. The supplied attributes overwrite the existing\n            type: object\n            minProperties: 1\n    Image:\n      required: true\n      content:\n        multipart/form-data:\n          schema:\n            title: Patch body\n            additionalProperties: false\n            description: \u003e-\n              The body can be any attribute defined in the corresponding entity\n              JSON schema. The supplied attributes overwrite the existing\n            type: object\n            properties:\n              image:\n                type: string\n                format: binary\n          encoding:\n            image:\n              contentType: image/png, image/jpeg\n  schemas:\n    EntityCreate:\n      description: Minimal required attributes for entity creation\n      type: object\n      required:\n        - entityType\n      properties:\n        entityType:\n          type: string\n          title: Entity Type\n          description: The general type of the entity\n          minLength: 1\n          enum:\n            - resource\n            - user\n            - asset\n            - service\n            - review\n    EntityCreateBulk:\n      type: array\n      title: Entity create bulk request\n      description: Array of entities to create multiple entities in one bulk request\n      items:\n        $ref: '#/components/schemas/EntityCreate'\n    Entity:\n      title: General Entity Data\n      type: object\n      description: \u003e-\n        The representation of an entity. For more details please refer to the\n        corresponding JSON schema\n      required:\n        - entityType\n        - id\n      additionalProperties: true\n      properties:\n        id:\n          $ref: '#/components/schemas/EntityId'\n    Error:\n      type: object\n      title: Operation error\n      description: Error that can occur on request processing\n      required:\n        - type\n        - message\n        - code\n      properties:\n        type:\n          title: Error type\n          description: Futher error type information\n          type: string\n        message:\n          title: Error message\n          description: Details about error\n          type: string\n        code:\n          title: Error code\n          description: HTTP error code\n          type: number\n          format: int32\n          example: 409\n        errors:\n          title: Errors\n          description: \u003e-\n            More error details that are reference in most case specification or\n            schema validation errors\n          type: array\n          items:\n            type: object\n    UserId:\n      title: User id\n      description: Unique user identifier\n      type: string\n      example: user:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189\n      pattern: \u003e-\n        ^user:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\n    EntityId:\n      title: Entity id\n      description: Unique entity identifier\n      type: string\n      example: resource:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189\n      pattern: \u003e-\n        (resource|user|asset|service|review):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\n    ImageId:\n      title: Image id\n      description: Unique image identifier\n      type: string\n      example: image:uuid:asdsad4d1fcb08-b894-4bdf-b662-0f105d597189\n      pattern: \u003e-\n        image:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\n  responses:\n    Success:\n      description: Successful\n      content:\n        text/html:\n          schema:\n            type: string\n    SuccessEmpty:\n      description: Successful operation\n    Multi:\n      description: Multi-status response in case of a bulk request\n      content:\n        application/json:\n          schema:\n            title: Multi-status response\n            description: \u003e-\n              Indicates the status for operation for each entity in a bulk\n              request\n            type: array\n            items:\n              type: object\n              required:\n                - statusCode\n                - uniqueFingerprint\n              properties:\n                statusCode:\n                  title: Status Code\n                  description: \u003e-\n                    Status Code for single entity operation. Can be one of the\n                    codes that is returned for opeartion on a single entity\n                  type: integer\n                  example: 201\n                data:\n                  title: Operation data\n                  description: Data as a result of a single entity operation\n                  oneOf:\n                    - type: string\n                    - type: object\n                error:\n                  $ref: '#/components/schemas/Error'\n    EntityCreateSuccess:\n      description: Succesful entity creation retruns created entity id\n      content:\n        text/html:\n          schema:\n            $ref: '#/components/schemas/EntityId'\n    EntityResponse:\n      description: ENńtity data response\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Entity'\n    UnexpectedError:\n      description: Internal service error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    BadRequestError:\n      description: \u003e-\n        Error with status code 4XX indicating a wrong supplied parameters or\n        violation of the JSOn schema\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  parameters:\n    actoridParam:\n      in: header\n      description: \u003e-\n        The id of the origin that produces action/message. Can be an user or a\n        service\n      name: x-actorid\n      required: true\n      schema:\n        $ref: '#/components/schemas/UserId'\n    useridParam:\n      in: path\n      description: \u003e-\n        The id of the origin that produces action/message. Can be a user or\n        service\n      name: id\n      schema:\n        $ref: '#/components/schemas/UserId'\n      required: true\n    entityIdParam:\n      in: path\n      description: The id of the entity\n      name: id\n      schema:\n        $ref: '#/components/schemas/EntityId'\n      required: true\n",
			"canonicalURL": "/github.com/FraunhoferISST/diva@67fac716105e2a805c392529c3b5b14d59dd3773/-/blob/core/services/entity-management/apiDoc/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/FraunhoferISST/diva/blob/67fac716105e2a805c392529c3b5b14d59dd3773/core/services/entity-management/apiDoc/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/reviews/{id}/images\": post: requestBody: contents: multipart/form-data: complex form schema not implemented",
	"NotImplemented": [
		"HTTP code pattern",
		"complex form schema",
		"unsupported content types"
	]
}