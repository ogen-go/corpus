{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/RobinTail/express-zod-api"
		},
		"file": {
			"name": "example.swagger.yaml",
			"size": 0,
			"path": "example/example.swagger.yaml",
			"byteSize": 9955,
			"content": "openapi: 3.0.0\ninfo:\n  title: Example API\n  version: 7.3.0\npaths:\n  /v1/user/retrieve:\n    get:\n      responses:\n        \"200\":\n          description: GET /v1/user/retrieve Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum:\n                      - success\n                  data:\n                    type: object\n                    properties:\n                      id:\n                        type: integer\n                        format: int64\n                        minimum: 0\n                        exclusiveMinimum: false\n                        maximum: 9007199254740991\n                        exclusiveMaximum: false\n                      name:\n                        type: string\n                    required:\n                      - id\n                      - name\n                required:\n                  - status\n                  - data\n        \"400\":\n          description: GET /v1/user/retrieve Error response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum:\n                      - error\n                  error:\n                    type: object\n                    properties:\n                      message:\n                        type: string\n                    required:\n                      - message\n                required:\n                  - status\n                  - error\n              examples:\n                example1:\n                  value:\n                    status: error\n                    error:\n                      message: Sample error message\n      description: example user retrieval endpoint\n      parameters:\n        - name: id\n          in: query\n          required: true\n          schema:\n            description: a numeric string containing the id of the user\n            type: string\n            pattern: /\\d+/\n  \"/v1/user/{id}\":\n    post:\n      responses:\n        \"200\":\n          description: POST /v1/user/:id Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum:\n                      - success\n                  data:\n                    example:\n                      name: John Doe\n                      createdAt: 2021-12-31T00:00:00.000Z\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      createdAt:\n                        type: string\n                        format: date-time\n                        description: YYYY-MM-DDTHH:mm:ss.sssZ\n                        externalDocs:\n                          url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n                    required:\n                      - name\n                      - createdAt\n                required:\n                  - status\n                  - data\n              examples:\n                example1:\n                  value:\n                    status: success\n                    data:\n                      name: John Doe\n                      createdAt: 2021-12-31T00:00:00.000Z\n        \"400\":\n          description: POST /v1/user/:id Error response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum:\n                      - error\n                  error:\n                    type: object\n                    properties:\n                      message:\n                        type: string\n                    required:\n                      - message\n                required:\n                  - status\n                  - error\n              examples:\n                example1:\n                  value:\n                    status: error\n                    error:\n                      message: Sample error message\n      description: example user update endpoint\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            description: POST /v1/user/:id parameter\n            type: string\n          examples:\n            example1:\n              value: \"12\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: POST /v1/user/:id request body\n              allOf:\n                - example:\n                    key: 1234-5678-90\n                  type: object\n                  properties:\n                    key:\n                      type: string\n                      minLength: 1\n                  required:\n                    - key\n                - example:\n                    name: John Doe\n                    birthday: 1963-04-21\n                  type: object\n                  properties:\n                    name:\n                      type: string\n                      minLength: 1\n                    birthday:\n                      type: string\n                      format: date-time\n                      pattern: ^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?)?Z?$\n                      description: YYYY-MM-DDTHH:mm:ss.sssZ\n                      externalDocs:\n                        url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n                  required:\n                    - name\n                    - birthday\n            examples:\n              example1:\n                value:\n                  key: 1234-5678-90\n                  name: John Doe\n                  birthday: 1963-04-21\n  /v1/avatar/send:\n    get:\n      responses:\n        \"200\":\n          description: GET /v1/avatar/send Successful response\n          content:\n            image/svg+xml:\n              schema:\n                type: string\n        \"400\":\n          description: GET /v1/avatar/send Error response\n          content:\n            text/plain:\n              schema:\n                type: string\n      parameters:\n        - name: userId\n          in: query\n          required: true\n          schema:\n            description: GET /v1/avatar/send parameter\n            type: string\n            pattern: /\\d+/\n  /v1/avatar/stream:\n    get:\n      responses:\n        \"200\":\n          description: GET /v1/avatar/stream Successful response\n          content:\n            image/*:\n              schema:\n                type: string\n                format: binary\n        \"400\":\n          description: GET /v1/avatar/stream Error response\n          content:\n            text/plain:\n              schema:\n                type: string\n      parameters:\n        - name: userId\n          in: query\n          required: true\n          schema:\n            description: GET /v1/avatar/stream parameter\n            type: string\n            pattern: /\\d+/\n  /v1/avatar/upload:\n    post:\n      responses:\n        \"200\":\n          description: POST /v1/avatar/upload Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum:\n                      - success\n                  data:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                      size:\n                        type: integer\n                        format: int64\n                        minimum: 0\n                        exclusiveMinimum: false\n                        maximum: 9007199254740991\n                        exclusiveMaximum: false\n                      mime:\n                        type: string\n                      hash:\n                        type: string\n                      otherInputs:\n                        type: object\n                        additionalProperties:\n                          nullable: true\n                          format: any\n                    required:\n                      - name\n                      - size\n                      - mime\n                      - hash\n                      - otherInputs\n                required:\n                  - status\n                  - data\n        \"400\":\n          description: POST /v1/avatar/upload Error response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum:\n                      - error\n                  error:\n                    type: object\n                    properties:\n                      message:\n                        type: string\n                    required:\n                      - message\n                required:\n                  - status\n                  - error\n              examples:\n                example1:\n                  value:\n                    status: error\n                    error:\n                      message: Sample error message\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              description: POST /v1/avatar/upload request body\n              type: object\n              properties:\n                avatar:\n                  type: string\n                  format: binary\n              required:\n                - avatar\ncomponents:\n  schemas: {}\n  responses: {}\n  parameters: {}\n  examples: {}\n  requestBodies: {}\n  headers: {}\n  securitySchemes: {}\n  links: {}\n  callbacks: {}\ntags: []\nservers:\n  - url: http://example.com\n\n",
			"canonicalURL": "/github.com/RobinTail/express-zod-api@cc0acf89e0a42d4a3732136d07f0e7364cfb4cdb/-/blob/example/example.swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/RobinTail/express-zod-api/blob/cc0acf89e0a42d4a3732136d07f0e7364cfb4cdb/example/example.swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1/avatar/send\": get: responses: 200: contents: unsupported content types: [image/svg+xml]",
	"NotImplemented": [
		"unsupported content types"
	]
}