{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/skhg/traffic-light-controller"
		},
		"file": {
			"name": "openapi-spec.yaml",
			"size": 0,
			"path": "openapi-spec.yaml",
			"byteSize": 7036,
			"content": "openapi: 3.0.1\ninfo:\n  title: Ampelmännchen traffic light API\n  description: This is the documentation for the Ampelmann traffic light REST endpoints.\n  contact:\n    email: git@jackhiggins.ie\n  license:\n    name: MIT Licence\n    url: 'https://github.com/skhg/traffic-light-controller/blob/master/LICENSE'\n  version: latest\nexternalDocs:\n  description: Project documentation\n  url: 'https://github.com/skhg/traffic-light-controller/'\ntags:\n  - name: web\n    description: Loads web pages\n  - name: lights\n    description: Control or query the lights\n  - name: music\n    description: Control or query info related to the song and current tempo\n  - name: status\n    description: General system status information\npaths:\n  /:\n    get:\n      tags:\n        - web\n      summary: Load the web application\n      responses:\n        '200':\n          description: Webapp body response\n          content:\n            text/html:\n              example:\n                latestFile:\n                  externalValue: 'https://raw.githubusercontent.com/skhg/traffic-light-controller/master/webapp/index.html'\n  /api/red:\n    get:\n      tags:\n        - lights\n      summary: Get the red light status\n      responses:\n        '200':\n          description: Got the status\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  red:\n                    type: boolean\n    put:\n      tags:\n        - lights\n      summary: Put on the red light (Roxanne)\n      responses:\n        '204':\n          description: Turned the light on\n    delete:\n      tags:\n        - lights\n      summary: Switch off the red light\n      responses:\n        '204':\n          description: Switched the light off\n  \n  /api/green:\n    get:\n      tags:\n        - lights\n      summary: Get the green light status\n      responses:\n        '200':\n          description: Got the status\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  red:\n                    type: boolean\n    put:\n      tags:\n        - lights\n      summary: Switch on the green light\n      responses:\n        '204':\n          description: Turned the light on\n    delete:\n      tags:\n        - lights\n      summary: Switch off the green light\n      responses:\n        '204':\n          description: Switched the light off\n          \n  /api/party:\n    get:\n      tags:\n        - lights\n      summary: Get the party mode status\n      responses:\n        '200':\n          description: Got the status\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  party:\n                    type: boolean\n    put:\n      tags:\n        - lights\n      summary: Get the party started\n      responses:\n        '204':\n          description: The lights will have started pulsing\n    delete:\n      tags:\n        - lights\n      summary: Stop the party\n      responses:\n        '204':\n          description: The lights will remain in their last state and will stop pulsing\n          \n  /api/tempo:\n    get:\n      tags:\n        - music\n      summary: Get the current tempo (Song BPM)\n      responses:\n        '200':\n          description: Got the status\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  bpm:\n                    type: integer\n                    example: 99\n    put:\n      tags:\n        - music\n      summary: Set the current tempo (Song BPM)\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                bpm:\n                  type: integer\n                  description: New BPM value\n                  example: 120\n      responses:\n        '204':\n          description: Set the BPM\n          \n  /api/song:\n    get:\n      tags:\n        - music\n      summary: Get the currently playing track details\n      responses:\n        '200':\n          description: Got the track details\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  title:\n                    type: string\n                    example: 'Exits'\n                  artist:\n                    type: string\n                    example: 'Foals'\n                  album:\n                    type: string\n                    example: 'Part 1 Everything Not Saved Will Be Lost'\n                  \n    put:\n      tags:\n        - music\n      summary: Set the currently playing track details\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n                type: object\n                properties:\n                  title:\n                    type: string\n                    example: 'Parfum thérémine - Version acoustique'\n                  artist:\n                    type: string\n                    example: 'LImpératrice'\n                  album:\n                    type: string\n                    example: 'Odyssée (Version acoustique)'\n      responses:\n        '204':\n          description: Set the track details\n    delete:\n      tags:\n        - music\n      summary: Clear the currently playing track\n      responses:\n        '204':\n          description: Current track details cleared\n        \n  /api/status:\n    get:\n      tags:\n        - status\n      summary: Get all the current system status details.\n      description: This is a combination of all other GET responses, plus some additional fields.\n      responses:\n        '200':\n          description: Got the system status\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  bpm:\n                    type: integer\n                    example: 110\n                  green:\n                    type: boolean\n                  red:\n                    type: boolean\n                  party:\n                    type: boolean\n                  title:\n                    type: string\n                    example: 'Parfum thérémine - Version acoustique'\n                  artist:\n                    type: string\n                    example: 'LImpératrice'\n                  album:\n                    type: string\n                    example: 'Odyssée (Version acoustique)'\n                  redTemperature:\n                    type: number\n                    example: 20.2\n                  greenTemperature:\n                    type: number\n                    example: 21.2\n                  greenHumidity:\n                    type: number\n                    example: 53\n                  redHumidity:\n                    type: number\n                    example: 56\n                    \nservers:\n  - url: 'http://traffic-light.fritz.box'\n    variables: {}\n    description: Traffic Light on LAN\n",
			"canonicalURL": "/github.com/skhg/traffic-light-controller@a2fea5ddf641bcbe43d29cd3757b51d10b0ccfcd/-/blob/openapi-spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/skhg/traffic-light-controller/blob/a2fea5ddf641bcbe43d29cd3757b51d10b0ccfcd/openapi-spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/\": get: responses: 200: contents: unsupported content types: [text/html]",
	"NotImplemented": [
		"unsupported content types"
	]
}