{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/availablenick/getren"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "docs/swagger.yaml",
			"byteSize": 20973,
			"content": "openapi: 3.0.0\ninfo:\n  title: Getren backend API\n  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.\n  version: 1.0.0\n\nservers:\n  # - url: http://api.example.com/v1\n  #   description: Optional server description, e.g. Main (production) server\n  - url: http://localhost:5000\n    description: Development server\n\ntags:\n  - name: user\n    description: 'User related operations'\n  - name: courses\n    description: 'Courses related operations'\n  - name: videos\n    description: 'Videos related operations'\n  - name: enrolls\n    description: 'Operations related about the subscription of a user in a course'\n  - name: watches\n    description: 'Operations related about a user watching a video'\n\npaths:\n  /register:\n    post:\n      summary: 'Register a user on site'\n      tags: \n        - 'user'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - email\n                - password\n                - password_confirm\n              properties:\n                email:\n                  type: string\n                  example: 'user@example.com'\n                password:\n                  type: string\n                  example: 'asecurepassword1234'\n                password_confirm:\n                  type: string\n                  example: 'asecurepassword1234'\n      responses:\n        200:\n          $ref: '#/components/responses/UserPayload'\n        400:\n          description: 'Errors'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  example: 'Error on password. Too short'\n  \n  /login:\n    post:\n      summary: 'Log-in a registered user on site'\n      tags: \n        - 'user'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - email\n                - password\n              properties:\n                email:\n                  type: string\n                  example: 'user@example.com'\n                password:\n                  type: string\n                  example: 'asecurepassword1234'\n      responses:\n        200:\n          $ref: '#/components/responses/UserPayload'\n        400:\n          description: 'Errors'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  example: 'Error on password. Too short'\n  \n  \n  /logout:\n    get:\n      summary: 'Log-out a registered user on site, destroying the user_token cookie.'\n      tags: \n        - 'user'\n      security: \n        - cookieAuth: []\n      responses:\n        200:\n          description: 'OK'\n          headers:\n            Set-Cookie:\n              schema:\n                type: string\n                example: 'user_token=asdadsdass; HttpOnly, expires_at=01/01/1970'\n                description: 'Destroy the user_token cookie'\n        401:\n          description: 'Not authenticated'\n  \n  /user_by_token:\n    get:\n      summary: 'Retrieve user credentials using user_token cookie'\n      tags: \n        - 'user'\n      security: \n        - cookieAuth: []\n      responses:\n        200:\n          $ref: '#/components/responses/UserPayload'\n        401:\n          description: 'Not authenticated'\n  \n  /user/{id}:\n    get:\n      summary: 'Get user profile information'\n      tags: \n        - 'user'\n      security: \n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the user to get\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/UserProfile'\n        401:\n          description: 'Not authorized'\n        500:\n          description: 'Something went wrong on server'\n\n    put:\n      summary: 'Update user profile information'\n      tags: \n        - 'user'\n      security: \n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the user to update\n      requestBody:\n        content:\n          application/json:\n            schema: \n              $ref: '#/components/schemas/UserProfile'\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/UserProfile'\n        401:\n          description: 'Not authorized'\n        500:\n          description: 'Something went wrong on server'\n\n  /password_forgot:\n    post:\n      summary: 'Send a redefine password link to the specified email'\n      tags: \n        - 'user'\n      requestBody:\n        content:\n          application/json:\n            schema: \n              type: object\n              properties:\n                email:\n                  type: string\n                  example: 'user@example.com'\n      responses:\n        200:\n          description: \"Email sent\"\n        500:\n          description: 'Something went wrong on server'\n\n  /redefine_password:\n    post:\n      summary: 'Redefine the user password using token received in email'\n      tags: \n        - 'user'\n      requestBody:\n        content:\n          application/json:\n            schema: \n              type: object\n              properties:\n                email:\n                  type: string\n                  example: 'user@example.com'\n                password:\n                  type: string\n                  example: 'anewsecurepassword1234'\n                password_confirm:\n                  type: string\n                  example: 'asnewecurepassword1234'  \n                token:\n                  type: string\n                  example: 'token138032189received1923012on1221email'\n      responses:\n        200:\n          description: \"Password updated\"\n        400:\n          description: \"Invalid token\"\n        500:\n          description: 'Something went wrong on server'\n\n  /courses:\n    get:\n      summary: 'Get all courses'\n      tags: \n        - 'courses'\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Course'\n        500:\n          description: 'Something went wrong on server'\n    post:\n      summary: 'Post a new course'\n      description: 'This can only be done by a logged administrator.'\n      tags: \n        - 'courses'\n      security: \n        - cookieAuth: []\n      requestBody:\n        $ref: '#/components/requestBodies/CourseForm'\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Course'\n        401:\n          description: 'Not authorized'\n        500:\n          description: 'Something went wrong on server'\n\n  /course/{id}:\n    get:\n      summary: 'Get specific course data'\n      tags: \n        - 'courses'\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the course to get\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/Course'\n        500:\n          description: 'Something went wrong on server'\n\n    put:\n      summary: 'Update data of a specific course'\n      description: 'This can only be done by a logged administrator.'\n      tags: \n        - 'courses'\n      security: \n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the course to update\n      requestBody:\n        $ref: '#/components/requestBodies/CourseForm'\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Course'\n        401:\n          description: 'Not authorized'\n        500:\n          description: 'Something went wrong on server'\n\n    delete:\n      summary: 'Delete specific course'\n      description: 'This can only be done by a logged administrator.'\n      tags: \n        - 'courses'\n      security: \n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the course to delete\n      responses:\n        200:\n          description: 'OK'\n        401:\n          description: 'Not authorized'\n        500:\n          description: 'Something went wrong on server'\n  \n  /courses/{filter}:\n    get:\n      summary: 'Get courses with a specific filter'\n      tags: \n        - 'courses'\n      parameters:\n        - in: path\n          name: filter\n          schema:\n            type: string\n          required: true\n          description: 'Filter string to specifiy what courses to get. There are some default values\n            like all, active and expired; or if pass another filter it will serve as a search index'\n      responses:\n        200:\n          description: 'OK'\n          content:\n            application/json:\n              schema: \n                type: array\n                items:\n                  $ref: '#/components/schemas/Course'\n        500:\n          description: 'Something went wrong on server'\n\n  /courses/{id}/videos:\n    get:\n      summary: 'Get all videos from a specific course'\n      tags: \n        - 'videos'\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the course\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Video'\n        500:\n          description: 'Something went wrong on server'\n    post:\n      summary: 'Post a new video on a specific course'\n      description: 'This can only be done by a logged administrator.'\n      tags: \n        - 'videos'\n      security: \n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the course\n      requestBody:\n        $ref: '#/components/requestBodies/VideoForm'\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Video'\n        401:\n          description: 'Not authorized'\n        500:\n          description: 'Something went wrong on server'\n\n  /video/{id}:\n    get:\n      summary: 'Get specific video data'\n      tags: \n        - 'videos'\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the video to get\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/Video'\n        500:\n          description: 'Something went wrong on server'\n\n    put:\n      summary: 'Update data of a specific video'\n      description: 'This can only be done by a logged administrator.'\n      tags: \n        - 'videos'\n      security: \n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the video to update\n      requestBody:\n        $ref: '#/components/requestBodies/VideoForm'\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Course'\n        401:\n          description: 'Not authorized'\n        500:\n          description: 'Something went wrong on server'\n\n    delete:\n      summary: 'Delete specific video'\n      description: 'This can only be done by a logged administrator.'\n      tags: \n        - 'videos'\n      security: \n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the video to delete\n      responses:\n        200:\n          description: 'OK'\n        401:\n          description: 'Not authorized'\n        500:\n          description: 'Something went wrong on server'\n\n  /user/{id}/courses:\n    get:\n      summary: 'Get all courses that a specific user is enrolled'\n      tags: \n        - 'enrolls'\n      security: \n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the user to get\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Course'\n        500:\n          description: 'Something went wrong on server'\n    post:\n      summary: 'Enrolls a specific user in a course'\n      tags: \n        - 'enrolls'\n      security: \n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the user to enrolls\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                course_id:\n                  type: integer\n                  format: int32\n                  description: 'The id of the course to be enrolled'\n      responses:\n        200:\n          description: \"OK\"\n        401:\n          description: 'Not authorized'\n        500:\n          description: 'Something went wrong on server'\n\n  /user/{userId}/video/{videoId}:\n    get:\n      summary: 'Get info about an user watching a specific video'\n      tags: \n        - 'watches'\n      security: \n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: userId\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the user\n        - in: path\n          name: videoId\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the video\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Watches'\n        500:\n          description: 'Something went wrong on server'\n    post:\n      summary: 'Post that a specific user will watch a specific video'\n      tags: \n        - 'watches'\n      security: \n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: userId\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the user\n        - in: path\n          name: videoId\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the video\n      responses:\n        200:\n          description: \"OK\"\n        401:\n          description: 'Not authorized'\n        500:\n          description: 'Something went wrong on server'\n    put:\n      summary: 'Update info about an user watching a specific video'\n      tags: \n        - 'watches'\n      security: \n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: userId\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the user\n        - in: path\n          name: videoId\n          schema:\n            type: integer\n          required: true\n          description: Numeric ID of the video\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                watched_time:\n                  type: integer\n                  format: int32\n                  example: 4\n                finished:\n                  type: boolean\n                  example: false\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Watches'\n\ncomponents:\n  schemas:\n    UserProfile:\n      type: object\n      properties:\n        job:\n          type: string\n          example: 'Developer'\n        federal_state:\n          type: string\n          example: 'SP'\n        name:\n          type: string\n          example: 'Alfredo homem de ouro'\n        city:\n          type: string\n          example: 'Carapicuiba'\n        birthdate:\n          type: string\n          format: 'date'\n        is_confirmed:\n          type: boolean\n        email:\n          type: string\n          example: 'example@example.com'\n\n    Course:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n          example: 'Course name'\n        number_of_videos:\n          type: integer\n          format: int32   \n        duration:\n          type: integer\n          format: int32   \n        price:\n          type: number\n          format: float   \n        expires_at:\n          type: string\n          format: date\n        is_watchable:\n          type: boolean\n          description: 'Can the user watch the course videos without payment?'     \n        is_available:\n          type: boolean\n          description: 'Is the course visible to the users?'  \n        thumbnail:\n          type: string\n          format: byte\n          example: 'U3dhZ2dlciByb2Nrcw==' \n   \n    Video:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        youtube_code:\n          type: string\n          example: 'asdt43562je'\n        title:\n          type: string\n          example: 'Video title'\n        description:\n          type: string\n          example: 'This can be a looooooooong... video description'\n        duration:\n          type: integer\n          format: int32   \n        course_order:\n          type: integer\n          format: int32   \n        thumbnail:\n          type: string\n          example: 'http://imgur.com/123df' \n    \n    Watches:\n      type: object\n      properties:\n        user_id:\n          type: integer\n          format: int32\n        video_id:\n          type: integer\n          format: int32\n        watched_time:\n          type: integer\n          format: int32\n        finished:\n          type: boolean\n          example: false\n\n\n  requestBodies:\n    CourseForm:\n      content:\n        multipart/form-data:\n          schema:\n            type: object\n            properties:\n              json_args:\n                description: 'Actually, this field is the whole course \n                object (name, number_of_videos, expires_at...) jsonified in a string.'\n                type: string\n              thumbnail:\n                type: string\n                format: binary\n                description: 'the thumbnail file'  \n    \n    VideoForm:\n      content:\n        multipart/form-data:\n          schema:\n            type: object\n            properties:\n              json_args:\n                description: 'Actually, this field is the whole video \n                object (title, description, thumbnail...) jsonified in a string.'\n                type: string\n              video:\n                type: string\n                format: binary\n                description: 'the video file'  \n\n  responses:\n    UserPayload:\n      description: \"OK\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              id:\n                type: integer\n                format: int32\n              email:\n                type: string\n                example: 'user@example.com' \n      headers:\n        Set-Cookie:\n          schema:\n            type: string\n            example: 'user_token=asdadsdass; HttpOnly'\n            description: 'Set the user_token cookies to user server side authentication'\n \n\n  securitySchemes:\n    cookieAuth:      \n      type: apiKey\n      in: cookie\n      name: 'user_token'  \n",
			"canonicalURL": "/github.com/availablenick/getren@0345c674e681bd344ea7027cb8ec0e15e24dca95/-/blob/docs/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/availablenick/getren/blob/0345c674e681bd344ea7027cb8ec0e15e24dca95/docs/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/course/{id}\": put: security: security \"cookieAuth\" (index 0): cookie security not implemented",
	"NotImplemented": [
		"cookie security"
	]
}