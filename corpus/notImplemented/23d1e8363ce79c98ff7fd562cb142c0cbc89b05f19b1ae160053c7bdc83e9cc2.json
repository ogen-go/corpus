{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Web-Dev-Collaborative/web-dev-history-backup"
		},
		"file": {
			"name": "extensions-api.yaml",
			"size": 0,
			"path": "2-content/Official-Documentation/docs.aws.amazon.com/lambda/latest/dg/samples/extensions-api.yaml",
			"byteSize": 9103,
			"content": "# This document describes the AWS Lambda Runtime Extensions API using the OpenAPI 3.0 specification.\n\nopenapi: 3.0.0\ninfo:\n  title: AWS Lambda Runtime Extensions API\n  description: AWS Lambda Runtime Extensions API is an HTTP API for implementing runtime extensions\n  version: 1.0.1\n\nservers:\n  - url: https://example.com/2020-01-01\n\npaths:\n\n  /extension/register:\n    post:\n      summary: \u003e\n        Register an extension with the given name.\n      parameters:\n        - in: header\n          name: Lambda-Extension-Name\n          required: true\n          description: Public extension name.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/vnd.aws.lambda.extension+json:\n            schema:\n              $ref: '#/components/schemas/RegisterRequest'\n      responses:\n        '200':\n          description: \u003e\n            Response contains generated unique extension identifier that is required for all subsequent requests.\n          headers:\n            Lambda-Extension-Identifier:\n              description: Generated unique identifier for public extension name.\n              schema:\n                type: string\n          content:\n            application/vnd.aws.lambda.extension+json:\n              schema:\n                $ref: '#/components/schemas/RegisterResponse'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: \u003e\n            Container error. Non-recoverable state. Extension should exit promptly.\n\n  /extension/event/next:\n    get:\n      summary: \u003e\n        Extension makes this HTTP request when it is ready to receive and process a new event.\n      parameters:\n        - in: header\n          name: Lambda-Extension-Identifier\n          required: true\n          description: Unique identifier for extension.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: \u003e\n            This is an iterator-style blocking API call. Response contains\n            event JSON document.\n          headers:\n            Lambda-Extension-Event-Identifier:\n              description: Event UUID.\n              schema:\n                type: string\n          content:\n            application/vnd.aws.lambda.extensionevent+json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/EventInvoke'\n                - $ref: '#/components/schemas/EventShutdown'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: \u003e\n            Container error. Non-recoverable state. Extension should exit promptly.\n\n  /extension/init/error:\n    post:\n      summary: \u003e\n        This allows the extension to report an initialization error to the platform.\n        Call it when you registered but failed to initialize. Once error has been\n        accepted by the platform, no further API calls will succeed, extension should\n        exit.\n      parameters:\n        - in: header\n          name: Lambda-Extension-Identifier\n          required: true\n          description: Unique identifier for extension.\n          schema:\n            type: string\n        - in: header\n          name: Lambda-Extension-Function-Error-Type\n          required: true\n          description: Extension.ErrorEnum\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/vnd.aws.lambda.error+json:\n            schema:\n              $ref: '#/components/schemas/ErrorRequest'\n      responses:\n        '202':\n          description: Accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatusResponse'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: \u003e\n            Container error. Non-recoverable state. Extension should exit promptly.\n\n  /extension/exit/error:\n    post:\n      summary: \u003e\n        This allows the extension to report an error to the platform before exiting.\n        Call it when you encounter an unexpected failure. Once error has been\n        accepted by the platform, no further API calls will succeed, extension should\n        exit.\n      parameters:\n        - in: header\n          name: Lambda-Extension-Identifier\n          required: true\n          description: Unique identifier for extension.\n          schema:\n            type: string\n        - in: header\n          name: Lambda-Extension-Function-Error-Type\n          required: true\n          description: Extension.ErrorEnum\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/vnd.aws.lambda.error+json:\n            schema:\n              $ref: '#/components/schemas/ErrorRequest'\n      responses:\n        '202':\n          description: Accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatusResponse'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: \u003e\n            Container error. Non-recoverable state. Extension should exit promptly.\n\ncomponents:\n  schemas:\n    RegisterRequest:\n      type: object\n      properties:\n        events:\n          type: array\n          items:\n            type: string\n      example:\n        {\n          'events': [ 'INVOKE', 'SHUTDOWN']\n        }\n\n    RegisterResponse:\n      type: object\n      properties:\n        functionName:\n          type: string\n        functionVersion:\n          type: string\n        handler:\n          type: string\n      example:\n        {\n          functionName: 'my-function',\n          functionVersion: '$LATEST',\n          handler: 'lambda_handler'\n        }\n\n    ErrorResponse:\n      type: object\n      properties:\n        errorMessage:\n          type: string\n        errorType:\n          type: string\n      example:\n        {\n          errorMessage: 'human readable error message',\n          errorType: 'Platform.ErrorEnum',\n        }\n\n    ErrorRequest:\n      type: object\n      properties:\n        errorMessage:\n          type: string\n        errorType:\n          type: string\n        stackTrace:\n          type: array\n          items:\n            type: string\n      example:\n        {\n          errorType: 'Extension.ErrorEnum',\n          errorMessage: 'human readable error message',\n          stackTrace: []\n        }\n\n    EventInvoke:\n      type: object\n      properties:\n        eventType:\n          type: string\n        deadlineMs:\n          type: integer\n          description: The date that the function times out in Unix time milliseconds.\n        requestId:\n          type: string\n        invokedFunctionArn:\n          type: string\n        tracing:\n          oneOf:\n            - $ref: '#/components/schemas/XRayTracingInfo'\n      example:\n        {\n          eventType: 'INVOKE',\n          deadlineMs: 1581512138111,\n          requestId: 'aws-request-ID',\n          invokedFunctionArn: 'invoked-function-arn',\n          tracing: {\n            type: 'X-Amzn-Trace-Id',\n            value: 'Root=1-5759e988-bd862e3fe1be46a994272793;Parent=53995c3f42cd8ad8;Sampled=1'\n          }\n        }\n\n    EventShutdown:\n      type: object\n      properties:\n        eventType:\n          type: string\n        shutdownReason:\n          type: string\n          enum: [spindown, timeout, failure]\n        deadlineMs:\n          type: integer\n          description: The date that the function times out in Unix time milliseconds.\n      example:\n        {\n          eventType: 'SHUTDOWN',\n          shutdownReason: 'spindown',\n          deadlineMs: 1581512138111\n        }\n\n    StatusResponse:\n      type: object\n      properties:\n        status:\n          type: string\n      example:\n        {\n          status: \"Accepted\"\n        }\n\n    XRayTracingInfo:\n      type: object\n      properties:\n        type:\n          type: string\n          enum: [X-Amzn-Trace-Id]\n        value:\n          type: string\n      example:\n        {\n          type: 'X-Amzn-Trace-Id',\n          value: 'Root=1-5759e988-bd862e3fe1be46a994272793;Parent=53995c3f42cd8ad8;Sampled=1'\n        }\n",
			"canonicalURL": "/github.com/Web-Dev-Collaborative/web-dev-history-backup@a4e5e078332ab242361cb5f098fb4e490a67a488/-/blob/2-content/Official-Documentation/docs.aws.amazon.com/lambda/latest/dg/samples/extensions-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Web-Dev-Collaborative/web-dev-history-backup/blob/a4e5e078332ab242361cb5f098fb4e490a67a488/2-content/Official-Documentation/docs.aws.amazon.com/lambda/latest/dg/samples/extensions-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/extension/event/next\": get: responses: 200: contents: unsupported content types: [application/vnd.aws.lambda.extensionevent+json]",
	"NotImplemented": [
		"unsupported content types"
	]
}