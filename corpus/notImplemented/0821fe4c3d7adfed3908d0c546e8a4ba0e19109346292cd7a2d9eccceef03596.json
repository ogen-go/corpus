{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Sedl/docsis-pnm"
		},
		"file": {
			"name": "apispec.yaml",
			"size": 0,
			"path": "apispec.yaml",
			"byteSize": 24613,
			"content": "openapi: 3.0.0\ninfo:\n  title: docsis-pnm API\n  version: 2.3.0\nservers: \n  - url: /\npaths:\n\n  /upstreams:\n    get:\n      tags:\n        - Upstreams\n      responses:\n        200:\n          description: Return a list of all known upstream channels\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Upstream'\n\n  /upstreams/{upstreamId}:\n    get:\n      tags:\n        - Upstreams\n      parameters: \n        - $ref: '#/components/parameters/upstreamId'\n      responses:\n        200:\n          description: Returns the upstream with the given ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Upstream'\n\n  /stats:\n    get:\n      tags:\n        - stats\n      responses:\n        200:\n          description: Some statistics. Some can be used for performance monitoring\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stats'\n                \n  /health/status:\n    get:\n      tags:\n        - stats\n      responses:\n        200:\n          description: |\n            Returns health status of the application. Use this for your load\n            balancer or monitoring system\n          content:\n            text/plain:\n              schema:\n                type: string\n                title: application status\n                description: Returns 'OK' if the application is up and running\n  /cmts:\n    get:\n      tags:\n        - CMTS\n      responses:\n        200:\n          description: List all CMT systems\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Cmts'\n    post:\n      tags: \n        - CMTS\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Cmts'\n      responses:\n        201:\n          $ref: '#/components/responses/cmtsResponse'\n\n  /cmts/{cmtsId}:\n    get:\n      tags:\n        - CMTS\n      description: Retrieves information about the specified CMTS\n      parameters:\n        - $ref: '#/components/parameters/cmtsId'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                 $ref: '#/components/schemas/Cmts'\n        404:\n          description: CMTS with the given ID does not exist\n    patch:\n      tags:\n        - CMTS\n        - Not implemented yet\n      parameters:\n        - $ref: '#/components/parameters/cmtsId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Cmts'\n      responses:\n        204:\n          description: No content\n        \n  /cmts/{cmtsId}/modems:\n    get:\n      tags:\n        - CMTS\n        - Modem\n      description: Lists all known modems for this CMTS\n      parameters:\n        - $ref: '#/components/parameters/cmtsId'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Modem'\n\n  /cmts/{cmtsId}/stats:\n    get:\n      tags:\n        - CMTS\n        - Not implemented yet\n      description: Current status and some statistics about the CMTS\n      parameters:\n        - $ref: '#/components/parameters/cmtsId'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CmtsStats'\n\n  /modems:\n    get:\n      tags:\n        - Modem\n      description: Lists all known modems\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Modem'\n\n  /modems/{modemId}:\n    get:\n      tags:\n        - Modem\n      parameters:\n        - $ref: '#/components/parameters/modemId'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Modem'\n        404:\n          description: Not found\n    patch:\n      tags:\n        - Modem\n        - Not implemented yet\n      parameters:\n        - $ref: '#/components/parameters/modemId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Modem'\n      responses:\n        200:\n          description: Update successful\n        404:\n          description: Not found\n        409:\n          $ref: '#/components/responses/validationError'\n    delete:\n      tags:\n        - Modem\n        - Not implemented yet\n      parameters:\n        - $ref: '#/components/parameters/modemId'\n      description: Delete the modem from the database. History data\n        IS NOT DELETED because this is a very I/O expensive operation.\n        History data deletion relies on database partitions.\n        If this modem is active on any CMTS it will be automatically created\n        at the next CMTS poll run.\n      responses:\n        200:\n          description: OK\n\n  /modems/{modemId}/livestatus:\n    post:\n      tags:\n        - Modem\n      parameters:\n        - $ref: '#/components/parameters/modemId'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ModemLiveStatus'\n\n  /modems/{modemId}/downstreamHistory/latest:\n    get:\n      tags:\n        - Modem\n      parameters:\n        - $ref: '#/components/parameters/modemId'\n      description: latest downstream performance data as returned from modem\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DownstreamHistory'\n            \n\n  /modems/{modemId}/downstreamHistory/{fromTS}/{toTS}:\n    get:\n      tags:\n        - Modem\n      parameters:\n        - $ref: '#/components/parameters/modemId'\n        - $ref: '#/components/parameters/fromTS'\n        - $ref: '#/components/parameters/toTS'\n      description: downstream performance data history as returned from modem\n      responses:\n        200:\n          headers:\n            X-Count:\n              $ref: '#/components/headers/X-Count'\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DownstreamHistory'\n                  \n  /modems/{modemId}/upstreamHistoryFromCMTS/latest:\n    get:\n      tags:\n        - Modem\n      parameters:\n        - $ref: '#/components/parameters/modemId'\n      description: latest upstream performance data as returned from CMTS\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpstreamHistory'\n\n  /modems/{modemId}/upstreamHistoryFromCMTS/{fromTS}/{toTS}:\n    get:\n      tags:\n        - Modem\n      parameters:\n        - $ref: '#/components/parameters/modemId'\n        - $ref: '#/components/parameters/fromTS'\n        - $ref: '#/components/parameters/toTS'\n      description: upstream performance data as returned from CMTS\n      responses:\n        200:\n          headers:\n            X-Count:\n              $ref: '#/components/headers/X-Count'\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UpstreamHistory'\n\n  /modems/{modemId}/upstreamHistoryFromModem/latest:\n    get:\n      tags: \n        - Modem\n      parameters: \n        - $ref: '#/components/parameters/modemId'\n      description: latest upstream performance data as returned from modem\n      responses:\n        200:\n          headers:\n            X-Count:\n              $ref: '#/components/headers/X-Count'\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpstreamHistoryModem'\n\n  /modems/{modemId}/upstreamHistoryFromModem/{fromTS}/{toTS}:\n    get:\n      tags: \n        - Modem\n      parameters: \n        - $ref: '#/components/parameters/modemId'\n        - $ref: '#/components/parameters/fromTS'\n        - $ref: '#/components/parameters/toTS'\n      description: upstream performance data history as returned from modem\n      responses:\n        200:\n          headers:\n            X-Count:\n              $ref: '#/components/headers/X-Count'\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UpstreamHistoryModem'\n\n  /modems/{modemId}/traffic/{fromTS}/{toTS}:\n    get:\n      tags:\n        - Modem\n      parameters:\n        - $ref: '#/components/parameters/modemId'\n        - $ref: '#/components/parameters/fromTS'\n        - $ref: '#/components/parameters/toTS'\n      description: |\n        Returns the transferred bytes of the modem. The values are\n        read from the modem's MAC interface and include the DOCSIS protocol overhead.\u003cbr\u003e\n        Due to the overhead and the often not very reliable modem implementation, this\n        data is not suitable for billing purposes.\u003cbr\u003e\n        The values represent the increasing byte counters since reset or start of the modem. On older or simpler\n        devices, this byte counter is sometimes a 32 bit unsigned integer and might overflow.\u003cbr\u003e\n        The returned values are in this format:\n        [\u003cunix_timestamp\u003e,\u003cbytes_down\u003e,\u003cbytes_up\u003e]\n      responses:\n        200:\n          headers:\n            X-Count:\n              $ref: '#/components/headers/X-Count'\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TransferHistory'\n                \n  /modems/{modemId}/pnm/OFDMDownstreamMER:\n    post:\n      tags:\n        - Modem\n      parameters: \n        - $ref: '#/components/parameters/modemId'\n      description: |\n        Returns DOCSIS 3.1 OFDM downstream MER values in dB for each OFDM subcarrier. The upload\n        from the modem is done via TFTP and then parsed. For further information\n        how this works you can consult Appendix D in the \n        \u003ca href=\"https://specification-search.cablelabs.com/CM-SP-CM-OSSIv3.1\"\u003e\n        DOCSIS 3.1 specification\n        \u003c/a\u003e\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OFDMDownstreamMERTable'\ncomponents:\n\n  headers:\n  \n    X-Count:\n      description: Number of returned items\n      schema:\n        type: integer\n\n  responses:\n  \n    validationError:\n      description: ValidationError\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    \n    cmtsResponse:\n      description: OK\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Cmts'\n        \n  parameters:\n    upstreamId:\n      name: upstreamId\n      in: path\n      required: true\n      description: Upstream database ID\n      schema:\n        type: integer\n        example: 378\n\n    fromTS:\n      name: fromTS\n      in: path\n      required: true\n      description: Unix timestamp in seconds\n      schema:\n        type: integer\n        example: 1593791558\n        \n  \n    toTS:\n      name: toTS\n      in: path\n      required: true\n      description: Unix timestamp in seconds\n      schema:\n        type: integer\n        example: 1593795158\n\n    date:\n      name: date\n      in: path\n      required: true\n      schema:\n        type: string\n        format: date\n        example: 2020-06-20\n\n    cmtsId:\n      name: cmtsId\n      in: path\n      required: true\n      schema:\n        type: integer\n        format: int32\n    \n    modemId:\n      name: modemId\n      in: path\n      required: true\n      schema:\n        type: string\n      description: Modem identifier. Can be the MAC address, database row ID\n        or IP address of the modem\n    modemMac:\n      name: modemMac\n      in: path\n      required: true\n      schema:\n        type: string\n        format: macaddr\n\n  schemas:\n  \n    OFDMDownstreamMERTable:\n      type: object\n      readOnly: true\n      properties:\n        capture_time:\n          type: integer\n          example: 1598362391\n          description: Unix timestamp\n        channel_id:\n          type: integer\n          example: 33\n          description: OFDM channel ID\n        subcarrier_zero_frequency:\n          type: integer\n          example: 833600000\n        first_active_subcarrier_index:\n          type: integer\n          example: 1422\n        subcarrier_spacing_khz:\n          type: integer\n          example: 25\n        mac:\n          type: string\n          description: MAC address of the modem\n        mer_db:\n          type: array\n          example: [32.75, 33, 31.5]\n          items:\n            type: number\n          \n\n    DocsisVersion:\n      type: string\n      enum:\n        - 'docs_10'\n        - 'docs_11'\n        - 'docs_20'\n        - 'docs_21'\n        - 'docs_31'\n        - 'unknown'\n\n    Error:\n      type: object\n      readOnly: true\n      properties:\n        message:\n          type: string\n        field_errors:\n          type: object\n          description: Fields with error message\n          example: {'hostname': 'invalid hostname'}\n\n          \n    Cmts:\n      type: object\n      required:\n        - hostname\n      properties:\n        cmts_id:\n          type: integer\n          format: uint32\n          example: 1\n          readOnly: true\n        hostname:\n          description: Hostname or IP address\n          type: string\n          example: cmts-rosenheim.example\n        snmp_community:\n          type: string\n          example: public\n          nullable: true\n          description: Override default SNMP community from config file.\n            Returns the overridden community string if set. Set to `null` to\n            use the default community.\n        snmp_community_modem:\n          type: string\n          example: public\n          nullable: true\n          description: Override the default SNMP community for modems.\n            Returns the overridden community string if set. Set to `null` to\n            use the default community.\n        disabled:\n          type: boolean\n          example: false\n          nullable: false\n          description: Set to `true` to disable polling of that CMTS\n        poll_interval:\n          type: integer\n          example: 60\n          nullable: false\n          description: Poll interval of the CMTS. Defaults to 60 if \u003c 60\n          \n    CmtsStats:\n      type: object\n      readOnly: true\n      description: Status information about the CMTS\n      properties:\n        modems_online:\n          type: integer\n          format: int32\n          example: 4228\n          description: Modems the CMTS considers online\n        modems_offline:\n          type: integer\n          format: int32\n          example: 112\n          description: Modems the CMTS considers offline\n        last_seen:\n          type: string\n          format: date-time\n          description: Last successful data polling\n\n    Modem:\n      properties:\n        modem_id:\n          type: integer\n          format: uint64\n          readOnly: true\n          example: 1\n        cmts_id:\n          type: integer\n          format: int32\n          readOnly: true\n          example: 1\n          description: The ID of the CMTS the modem was last seen on\n        mac:\n          type: string\n          format: macaddr\n          readOnly: true\n          description: MAC address in Unix format (00:00:00:00:00:00)\n          example: 00:00:00:00:00:00\n        sysdescr:\n          type: string\n          readOnly: true\n          description: Sysdescr as returned via SNMP\n          example: 'FRITZ!Box Cable \u003c\u003cHW_REV: 233.8; VENDOR: AVM GmbH; BOOTR: 1.3465; SW_REV: 161.07.19-77042; MODEL: 6591\u003e\u003e'\n        ipaddr:\n          type: string\n          readOnly: true\n          description: IP address (IPv4 or IPv6) of the cable modem part of the modem\n        snmp_index:\n          type: integer\n          format: int32\n          description: SNMP index on the CMTS for that modem\n          readOnly: true\n        docsis_version:\n          type: string\n          enum:\n            - 'docs_10'\n            - 'docs_11'\n            - 'docs_20'\n            - 'docs_21'\n            - 'docs_31'\n            - 'unknown'\n          readOnly: true\n          description: DOCSIS version this modem is running on\n        ds_primary_hz:\n          type: integer\n          format: int32\n          description: Frequency of downstream primary channel\n          example: 618000000\n        cmts_ds_idx:\n          type: integer\n          format: int32\n          description: SNMP index of the downstream channel on the CMTS\n          example: 21993\n    \n    ModemLiveStatus:\n      properties:\n        sysdescr:\n          type: string\n          description: system description as returned via SNMP\n          example: 'FRITZ!Box Cable \u003c\u003cHW_REV: 233.8; VENDOR: AVM GmbH; BOOTR: 1.3465; SW_REV: 161.07.19-77042; MODEL: 6591\u003e\u003e'\n        hostname:\n          type: string\n          description: hostname or IP address of the modem\n          example: 10.0.0.5\n        query_time_ns:\n          type: integer\n          description: time in nanoseconds it took to retrieve the data from the modem\n          example: 1000345\n        timestamp:\n          type: integer\n          format: int64\n          description: Unix timestamp in seconds at the time when the modem was polled\n          example: 1597155850\n        ds:\n          type: array\n          items:\n            $ref: '#/components/schemas/DownstreamChannel'\n        us:\n          type: array\n          items:\n            $ref: '#/components/schemas/ModemUpstream'\n        error:\n          type: string\n          description: error message of potential errors that occured while polling\n        docsis_version:\n          type: string\n          items:\n            $ref: '#/components/schemas/DocsisVersion'\n          example: docs_30\n        ds_primary:\n          type: integer\n          description: SNMP index of downstream primary\n        uptime:\n          type: integer\n          format: uint32\n          description: uptime in hundreths of a second (divide this by 100 to get seconds)\n          example: 3601\n      \n        \n    Upstream:\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: Database upstream ID\n        cmts_id:\n          type: integer\n          format: int32\n          description: CMTS database ID\n        snmp_index:\n          type: integer\n          format: int32\n          description: SNMP index on the CMTS\n        description:\n          type: string\n          description: Description as returned by the CMTS\n        alias:\n          type: string\n          description: Alias of the upstream, can be set on the CMTS\n        freq:\n          type: integer\n          format: int32\n          description: Center frequency of the channel\n        admin_status:\n          type: integer\n          format: int32\n          description: admin status returned by SNMP\n\n\n    UpstreamHistoryEntry:\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: Upstream ID\n        pwr:\n          type: integer\n          format: int32\n          description: Power in tenth dBmV\n          example: -10\n        snr:\n          type: integer\n          format: int32\n          description: Signal to noise ratio (SNR) in tenth dB (you have to divide the value by ten)\n          example: 299\n        mrefl:\n          type: integer\n          format: int32\n          example: -30\n          description: Microreflections in -dBc\n        unerr:\n          type: integer\n          format: uint64\n          description: Number of received unerrored codewords\n        corr:\n          type: integer\n          format: uint64\n          description: Number of received corrected codewords\n        err:\n          type: integer\n          format: uint64\n          description: Number of erroneous codewords\n\n    UpstreamHistory:\n      properties:\n        ts:\n          type: integer\n          format: int64\n          description: Unix timestamp in full seconds\n        us:\n          type: array\n          items:\n            $ref: '#/components/schemas/UpstreamHistoryEntry'\n\n    DownstreamChannel:\n      properties:\n        freq:\n          type: integer\n          format: int32\n          description: Downstream channel frequency in Hertz\n          example: 800000000\n        pwr:\n          type: integer\n          format: int32\n          description: Receive power in tenth dbmV (you have to divide the value by ten)\n          example: -12\n        snr:\n          type: integer\n          format: int32\n          description: Signal to noise ratio (SNR) in tenth dB (you have to divide the value by ten)\n          example: 401\n        mrefl:\n          type: integer\n          format: int32\n          example: -30\n          description: Microreflections in -dBc\n        unerr:\n          type: integer\n          format: uint64\n          description: Number of received unerrored codewords\n        corr:\n          type: integer\n          format: uint64\n          description: Number of received corrected codewords\n        err:\n          type: integer\n          format: uint64\n          description: Number of erroneous codewords\n        mod:\n          type: integer\n          format: int32\n          description: Modulation of the channel\n\n    TransferHistory:\n      type: array\n      example: [1597904009,63455680781,7679324455]\n      description: \"[\u003cunix_timestamp\u003e,\u003cbytes_down\u003e,\u003cbytes_up\u003e]\"\n      items:\n        type: integer\n        format: int64\n      \n    DownstreamHistory:\n      properties:\n        ts:\n          type: integer\n          format: int64\n          description: Unix timestamp in full seconds\n        ds:\n          type: array\n          items:\n            $ref: '#/components/schemas/DownstreamChannel'\n    \n    UpstreamHistoryModem:\n      properties:\n        ts:\n          type: integer\n          format: int54\n          description: Unix timestamp in full seconds\n        us:\n          type: array\n          items:\n            $ref: '#/components/schemas/ModemUpstream'\n          \n    ModemUpstream:\n      properties:\n        freq:\n          type: integer\n          format: int32\n          description: Upstream Frequency in Hz\n        timing_offset:\n          type: integer\n          format: int32\n          description: Timing offset\n        tx_power:\n          type: integer\n          format: int32\n          description: Transmit power of the channel in tenth dBmV\n          \n    Stats:\n      properties:\n        queue_length:\n          type: integer\n          description: Number of modems waiting for polling. The queue can get\n            full if the average poll time increases. If there are a lot of\n            modems with timeouts, the queue can get full very fast.\n        db_queue_length:\n          type: integer\n          description: Number of modem datasets waiting for insert. This\n            usually should be zero.\n        polls_successful:\n          type: integer\n          description: Number of successful modem polls since startup\n        polls_errors:\n          type: integer\n          description: Number of failed modem polls since startup\n        modems_online:\n          type: integer\n          description: Number of online modems. This value can be a bit\n            misleading, because all modems for scheduling\n            are retrieved directly from the CMTS and not from the database.\n            In the startup phase this value is lower than the real modem count\n            and this value might not be a good value for monitoring purposes.\n        modems_offline:\n          type: integer\n          description: Number of offline modems. This value can be a bit\n            misleading. See `modems_online` for details.\n        active_cmts_count:\n          type: integer\n          description: Number of CMT systems active for polling.",
			"canonicalURL": "/github.com/Sedl/docsis-pnm@b561bac5083630cdcf9b95bb529c4cba769b7cd1/-/blob/apispec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Sedl/docsis-pnm/blob/b561bac5083630cdcf9b95bb529c4cba769b7cd1/apispec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/health/status\": get: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}