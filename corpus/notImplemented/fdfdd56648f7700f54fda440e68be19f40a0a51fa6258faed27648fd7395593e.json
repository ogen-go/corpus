{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nasa/utm-apis"
		},
		"file": {
			"name": "fims-authz.yaml",
			"size": 0,
			"path": "fimsauthz-api/fims-authz.yaml",
			"byteSize": 22956,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.1.1\n  title: Flight Information Management System (FIMS) Authorization (AZ) Server\n  description: \u003e\n\n    The FIMS AZ service provides authorization services for FIMS stakeholders\n    within UTM.  It is written to the UAS Service Supplier Framework (UFAA)\n    for Authentication and Authorization\" at `https://utm.arc.nasa.gov/docs/2019-UTM_Framework-NASA-TM220364.pdf`.\n\n    The FIMS Authorization Server facilitates the RFC-6749 Client\n    Credentials flow for clients to USS Network resource servers.\n    Typically these resource servers include other USSs and discovery systems.\n\n    # Authentication using Message Signing\n\n    Concepts are detailed in the UFAA.\n    Implementation notes are in the README in this folder at `https://github.com/nasa/utm-apis/blob/master/fimsauthz-api/README.md`.\n\n    This authentication method is designed to provide\n    message integrity, non-repudiation, and message authentication.\n    Clients authenticate by providing a JWS signature of the HTTP request body's\n    `x-www-form-urlencoded` data. The signature is provided in the\n    `x-utm-message-signature` HTTP header of the HTTP Request.\n    As specified in the UFAA, the signature is performed using the private key\n    associated with the certificate specified by `x5u` in the JOSE Header.\n\n    # Roles\n\n    Roles and their scopes are in this folder at `https://github.com/nasa/utm-apis/blob/master/fimsauthz-api/nup-roles.yaml`\n\npaths:\n  /token:\n    post:\n      tags:\n        - Token Endpoint\n      summary: Request an access token.\n      description: |\n        The primary endpoint for this authorization server.  Used to request an access token\n        suitable for authorizing data exchanges within the USS Network.\n\n        Implemented per https://tools.ietf.org/html/rfc6749#section-3.2 .\n\n      security:\n        - fims-jws: []\n\n      parameters:\n        - in: header\n          name: x-utm-message-signature\n          schema:\n            type: string\n          required: true\n          description: \u003e-\n            The `x-utm-message-signature` HTTP header is an encode string representation of the \n            `#/components/schemas/xUtmMessageSignatureJws` with the payload field eliminated. \n\n            Refer to UFAA's section 5.12.5. \n\n      requestBody:\n        description: Data supplied by the client for a token request.\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              required:\n                - grant_type\n                - client_id\n                - scope\n                - current_timestamp\n              additionalProperties: false\n              properties:\n                grant_type:\n                  type: string\n                  description: Type of grant. Must be 'client_credentials'.\n                  enum:\n                    - client_credentials\n                client_id:\n                  description: The client_id (uss_name) of the requesting USS.\n                  type: string\n                  example: \"uss12345.co\"\n                scope:\n                  description: |\n                    The requested scope(s), a list of space-delimited,\n                    case-sensitive names. Same as in RFC 6749.\n                  type: string\n                  example: \"utm.strategic_coordination utm.constraint_processing\"\n                audience:\n                  description: |\n                    The hostname of the server with which the resulting access token \n                    will be used. \n\n                    If valid, this resource value will be included in the access token \n                    as an aud claim.\n\n                    Note the format of this field is a single hostname.  This authorization \n                    server does not produce of multi-audience tokens.\n\n                    See https://tools.ietf.org/html/rfc7519#section-4.1.3 for more info \n                    on how the aud claim is to be used.\n                  type: string\n                  format: hostname\n                  maxLength: 2000\n                  example: \"npsu1.arc.nasa.gov\"\n                current_timestamp:\n                  description: |\n                    A timestamp of the current time generated by the client at request\n                    generation time. UTC only. UTM Commons format with millisecond precision.\n\n                    May be used by the authorization server to validate the request.\n                  type: string\n                  format: date-time\n                  example: \"2020-06-19T13:37:52.562Z\"\n                \n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpTokenResponse\"\n\n        \"400\":\n          description: \u003e-\n            - Request did not conform to the API specification or failed validation.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HttpErrorResponse\"\n\n\n  /.well-known/oauth-authorization-server:\n    get:\n      tags:\n        - /.well-known/\n      summary: Provides metadata related to use of this authorization server\n      description: |\n        Per RFC8414, this endpoint provides metadata related to use of this authorization\n        server. See https://tools.ietf.org/html/rfc8414#section-3 for more details.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Metadata\"\n\n  /.well-known/jwks.json:\n    get:\n      tags:\n        - /.well-known/\n      summary: Serves the public JWKS of the authorization server\n      description: |\n        This endpoint serves the signing key(s) the client uses to validate\n        signatures from the authorization server.\n\n        The JWK Set MAY also contain the server's encryption key or keys,\n        which are used by clients to encrypt requests to the server.\n\n        When both signing and encryption keys are made available, a \"use\"\n        (public key use) parameter value is REQUIRED for all keys in the\n        referenced JWK Set to indicate each key's intended usage.\n\n        Refer to RFC7517 - https://tools.ietf.org/html/rfc7517\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/JsonWebKeySet\"\n\nservers:\n  - url: \"https://ansp-authority-baseurl/oauth/{info.version}\"\n\ncomponents:\n  securitySchemes:\n    fims-jws:\n      description: |\n        FIMS-Authz uses a JWS-based approach to authentication.\n\n        USS clients are vetted/qualified in advance and provide an owned DNS\n        name that serves as their primary identifer.  That DNS name is then\n        included in a certificate (as a subject alternative name) that the\n        client procures from an approved CA.  The private key related to that\n        public certificate is then used to create a JWS by signing the HTTP\n        body of the token request.\n\n        The JWS is provided in a \"Detached Content\" manner, with just\n        the JWS header and JWS signature fields provided in the HTTP\n        header.  The HTTP body can be used to reconstruct a full JWS.\n\n        See RFC7515 for more information on the detached content approach:\n        https://tools.ietf.org/html/rfc7515#appendix-F\n\n        Details are provided in:\n        https://utm.arc.nasa.gov/docs/2019-UTM_Framework-NASA-TM220364.pdf\n\n      type: apiKey\n      in: header\n      name: x-utm-message-signature\n\n  schemas:\n    HttpTokenResponse:\n      type: object\n      additionalProperties: false\n      properties:\n        access_token:\n          type: string\n          format: JwsCompactSerialization\n          description: see definitions/JwsCompactSerialization in this spec\n        scope:\n          type: string\n          description: |\n            The granted scope(s), a list of space-delimited,\n            case-sensitive names. Same as in RFC 6749.\n        token_type:\n          type: string\n          enum:\n            - bearer\n        expires_in:\n          type: number\n          format: integer\n          description: see definitions/JwtClaimsSet.exp property in this spec\n        sub:\n          type: string\n          description: see definitions/JwtClaimsSet in this spec\n        jti:\n          type: string\n          format: uuid\n          description: see definitions/JwtClaimsSet in this spec\n        iss:\n          type: string\n          description: see definitions/JwtClaimsSet in this spec\n        nbf:\n          type: number\n          description: see definitions/JwtClaimsSet in this spec\n        aud:\n          type: string\n          description: see definitions/JwtClaimsSet in this spec\n      example:\n        access_token: tokenstring\n        token_type: bearer\n        expires_in: 3599\n        scope: utm.strategic_coordination\n        sub: nuss1.testing.nasa.gov\n        nbf: 1509470774\n        iss: fims.arc.nasa.gov/fimsAuthServer\n        jti: 4d4c1a63-0959-48cc-885a-3648fd582db7\n        aud: npsu1.arc.nasa.gov\n    xUtmMessageSignatureJws:\n      description: \u003e-\n        A JWS constructed by the client for requesting a token from FIMS-AZ.\n        The client shall construct a JWS object with the header as specified by the \n        `#/components/schemas/xUtmMessageSignatureJoseHeader`, and the payload \n        as a character string of the HTTP body. The client shall sign the JWS \n        with their private key.\n      type: object\n      additionalProperties: false\n      properties:\n        header:\n          $ref: \"#/components/schemas/xUtmMessageSignatureJoseHeader\"\n        payload:\n          type: object\n          description: \u003e-\n            The payload of the JWS will be the same character string as the HTTP body.\n        signature:\n          type: string\n          description: \u003e-\n            The signature is calculated on the payload based on the information in the header.\n    xUtmMessageSignatureJoseHeader:\n      description: \u003e-\n        The JOSE (JSON Object Signing and Encryption) header of the JWS used in Message Signing.\n        Refer to UFAA's section 5.12.1 for additional information.\n      type: object\n      properties:\n        alg:\n          type: string\n          description: \u003e-\n            The algorithm used to sign the JWS, which is required to be a \n            registered JSON Web Algorithm (JWA). See RFC 7518 for details on JWA.\n          enum:\n            - RS256\n        typ:\n          type: string\n          description: \u003e-\n            The type is used by JWS applications to declare the media type of \n            this complete JWS. In this case, it must be “JOSE” per ​RFC 7515​.\n          enum:\n            - JOSE\n        x5u:\n          type: string\n          description: \u003e-\n            The \"x5u\" (X.509 URL) Header Parameter is a URI [​RFC 3986]​ that \n            refers to a resource for the X.509 public key certificate or \n            certificate chain [​RFC 5280​] corresponding to the key used to \n            digitally sign the JWS.\n          example: \"https://example.com/.well-known/uas-traffic-management/public.der\"\n        kid:\n          type: string\n          description: \u003e-\n            The Key ID of the JWK used to sign. Note that the jku reference \n            will provide a set of keys with unique key identifiers. Those \n            identifiers will be searched to match against this kid.\n    JsonWebToken:\n      description: \u003e-\n        The token provided by the FIMS Authorization Server is a JWS\n        representing a JWT.  The token is actually a JWS Compact Serialization\n        string as described in RFC 7515.  For clarity of documentation, we\n        represent the pre-serialized components here as a JSON schema.\n      type: object\n      additionalProperties: false\n      properties:\n        header:\n          $ref: \"#/components/schemas/JwtHeader\"\n        payload:\n          $ref: \"#/components/schemas/JwtClaimsSet\"\n        signature:\n          type: string\n          description: See RFC 7515 for details.\n    JwtHeader:\n      description: \u003e-\n        The header of the JWT Bearer Token returned by FIMS-AZ.\n      type: object\n      properties:\n        alg:\n          type: string\n          enum:\n            - RSA\n        typ:\n          type: string\n          enum:\n            - JWT\n          description: \u003e-\n            The FIMS Authorization Server only support 'JWT' (JSON Web Token) as\n            the algorithm type.\n    JwtClaimsSet:\n      type: object\n      required:\n        - iss\n        - sub\n        - exp\n        - nbf\n        - iat\n        - jti\n        - scope\n        - aud\n      additionalProperties: false\n      description: Claims included within JWT Bearer Token returned by FIMS-AZ.\n      properties:\n        iss:\n          type: string\n          format: URL\n          description: \u003e-\n            The \"iss\" (issuer) claim identifies the principal that issued the\n            JWT. The URL of the FIMS Authorization Server.\n        sub:\n          type: string\n          description: \u003e-\n            The \"sub\" (suv4-draft identifies the principal that is the subject\n            of the JWT.\n        exp:\n          type: integer\n          format: unix-time\n          description: \u003e-\n            The \"exp\" (expiration time) claim identifies the expiration time on\n            or after which the JWT MUST NOT be accepted for processing.  The\n            processing of the \"exp\" claim requires that the current date/time\n            MUST be before the expiration date/time listed in the \"exp\" claim.\n        nbf:\n          type: integer\n          format: unix-time\n          description: \u003e-\n            The \"nbf\" (not before) claim identifies the time before which the\n            JWT MUST NOT be accepted for processing.  The processing of the\n            \"nbf\" claim requires that the current date/time MUST be after or\n            equal to the not-before date/time listed in the \"nbf\" claim.\n        iat:\n          type: integer\n          format: unix-time\n          description: \u003e-\n            The \"iat\" (issued at) claim identifies the time at which the JWT was\n            issued.  This claim can be used to determine the age of the JWT.\n        jti:\n          type: string\n          format: uuid\n          description: \u003e-\n            The \"jti\" (JWT ID) claim provides a unique identifier for the JWT.\n            For this server, this is satisfied by the use of a UUID.\n        scope:\n          description: |\n            The granted scope(s), a list of space-delimited, case-sensitive names. \n          type: string\n          example: \"utm.strategic_coordination utm.constraint_processing\"\n        aud:\n          description: |\n            The \"aud\" (audience) claim identifies the recipients that the JWT is\n            intended for.  Each server intended to process the JWT MUST\n            identify itself with a value in the audience claim.  If the server\n            processing the claim does not identify itself with a value in the\n            \"aud\" claim when this claim is present, then the JWT MUST be\n            rejected.  \"aud\" will contain exactly one identifier of \n            the intended recipient system.\n          type: string\n          format: hostname\n          example: \"npsu1.arc.nasa.gov\"\n        authorities:\n          description: An array of all authorities that the client is associated with.\n          type: array\n          items:\n            type: string\n            example: \"ASTM_USS_BASIC\"\n          minItems: 1\n        client_id:\n          description: The client_id (uss_name) of the requesting USS.\n          type: string\n          example: \"uss.example.xyz\"\n    Metadata:\n      type: object\n      description: Information provided at the `/.well-known/oauth-authorization-server` endpoint.\n      required:\n        - iss\n        - token_endpoint\n        - jwks_uri\n        - scopes_supported\n        - response_types_supported\n        - grant_types_supported\n        - token_endpoint_auth_methods_supported\n        - token_endpoint_auth_signing_alg_values_supported\n        - service_documentation\n        - jwt_claims\n        - signed_metadata\n      additionalProperties: false\n      properties:\n        iss:\n          type: string\n          format: url\n          description: \u003e-\n            The authorization server's issuer identifier, which is a URL that\n            uses the \"https\" scheme and has no query or fragment components.\n            This is the location where \".well-known\" RFC 8615 resources\n            containing information about the authorization server are\n            published.  Using these well-known resources is described in Section\n            3.  The issuer identifier is used to prevent authorization server\n            mix-up attacks, as described in \"OAuth 2.0 Mix-Up Mitigation\".\n        token_endpoint:\n          type: string\n          format: url\n          description: \u003e-\n            URL of the authorization server's token endpoint [RFC6749].  This is\n            REQUIRED unless only the implicit grant type is used.\n        jwks_uri:\n          type: string\n          format: uri\n          description: |\n            URL of the authorization server's JWK Set\n            document.  The referenced document contains the signing key(s) the\n            client uses to validate signatures from the authorization server.\n            This URL MUST use the \"https\" scheme.  The JWK Set MAY also\n            contain the server's encryption key or keys, which are used by\n            clients to encrypt requests to the server.  When both signing and\n            encryption keys are made available, a \"use\" (public key use)\n            parameter value is REQUIRED for all keys in the referenced JWK Set\n            to indicate each key's intended usage.\n        scopes_supported:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            JSON array containing a list of the OAuth 2.0 [RFC6749] \"scope\"\n            values that this authorization server supports. Servers MAY choose\n            not to advertise some supported scope values even when this\n            parameter is used.\n        response_types_supported:\n          type: array\n          items:\n            type: string\n            enum: [none]\n          minItems: 0\n          maxItems: 0\n          description: \u003e-\n            JSON array containing a list of the OAuth 2.0 \"response_type\" values\n            that this authorization server supports. These values are required\n            for responses from calls to the authorization endpoint, thus this\n            array may be empty if no grant flows use the authorization endpoint,\n            thus this server returns an empty array. (definitions in RFC 7591)\n\n            This field is required per RFC 8414, but this auth server does not\n            support the flows that use this field, thus an empty array is returned.\n        grant_types_supported:\n          type: array\n          items:\n            type: string\n            enum: [client_credentials]\n          minItems: 1\n          maxItems: 1\n          description: \u003e-\n            JSON array containing a list of the OAuth 2.0 grant type values that\n            this authorization server supports. (definitions in RFC 7591)\n        token_endpoint_auth_methods_supported:\n          type: array\n          items:\n            type: string\n            enum: [private_key_jwt]\n          minItems: 1\n          maxItems: 1\n          description: \u003e-\n            JSON array containing a list of client authentication methods\n            supported by this token endpoint.  Client authentication method\n            values are used in the \"token_endpoint_auth_method\" parameter\n            defined in Section 2 of [RFC7591].  If omitted, the default is\n            \"client_secret_basic\" -- the HTTP Basic Authentication Scheme\n            specified in Section 2.3.1 of OAuth 2.0 [RFC6749]. FIMS-Authz will\n            only support private_key_jwt.\n        token_endpoint_auth_signing_alg_values_supported:\n          type: array\n          items:\n            type: string\n            enum: [HS256, RS256, ES256]\n          minItems: 3\n          maxItems: 3\n          uniqueItems: true\n          description: |-\n            JSON array containing a list of the JWS signing algorithms (alg\n            values) supported by the token endpoint for the signature on the JWT\n            [JWT] used to authenticate the client at the token endpoint for the\n            `private_key_jwt` and `client_secret_jwt` authentication methods.\n            Servers SHOULD support \"RS256\". The value \"none\" MUST NOT be used.\n\n            See UFAA doc for details.\n        service_documentation:\n          type: string\n          format: url\n          description: \u003e-\n            URL of a page containing human-readable information that developers\n            might want or need to know when using the authorization server.  In\n            particular, if the authorization server does not support Dynamic\n            Client Registration, then information on how to register clients\n            needs to be provided in this documentation.\n        jwt_claims:\n          $ref: \"#/components/schemas/JwtClaimsSet\"\n        signed_metadata:\n          type: string\n          format: JWT\n          description: |\n            A JWT containing metadata values about the authorization server as\n            claims.  This is a string value consisting of the entire signed\n            JWT.  A \"signed_metadata\" metadata value SHOULD NOT appear as a\n            claim in the JWT.\n\n            Refer to RFC8414 - https://tools.ietf.org/html/rfc8414#section-2.1\n    HttpErrorResponse:\n      type: object\n      properties:\n        error:\n          type: string\n          example: \"Error Title\"\n        error_description:\n          type: string\n          example: \"Human readable description of the error.\"\n    JsonWebKeySet:\n      type: \"object\"\n      properties:\n        keys:\n          type: \"array\"\n          items:\n            $ref: \"#/components/schemas/JsonWebKey\"\n    JsonWebKey:\n      type: \"object\"\n      description: \u003e-\n        This schema defines what a client may expect to receive when requesting  a JWK/JWKS.\n\n        NOTE: Not all fields defined in this schema may be returned when in operational use.\n      required:\n        - kty\n      properties:\n        kty:\n          type: \"string\"\n        use:\n          type: \"string\"\n          enum:\n            - sig\n            - enc\n        kid:\n          type: \"string\"\n        alg:\n          type: \"string\"\n        crv:\n          type: \"string\"\n        x:\n          type: \"string\"\n        \"y\":\n          type: \"string\"\n        d:\n          type: \"string\"\n        \"n\":\n          type: \"string\"\n        e:\n          type: \"string\"\n        k:\n          type: \"string\"\n",
			"canonicalURL": "/github.com/nasa/utm-apis@3e959c2302c5b756e87ea5397d613b3e32247584/-/blob/fimsauthz-api/fims-authz.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nasa/utm-apis/blob/3e959c2302c5b756e87ea5397d613b3e32247584/fimsauthz-api/fims-authz.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/token\": post: requestBody: contents: application/x-www-form-urlencoded: complex form schema not implemented",
	"NotImplemented": [
		"complex form schema"
	]
}