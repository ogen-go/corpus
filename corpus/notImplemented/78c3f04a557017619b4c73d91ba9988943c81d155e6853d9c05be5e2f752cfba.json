{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/RTXteam/RTX"
		},
		"file": {
			"name": "RTX_OA3_TRAPI1.2_ARAX.yaml",
			"size": 0,
			"path": "code/UI/OpenAPI/python-flask-server/RTX_OA3_TRAPI1.2_ARAX.yaml",
			"byteSize": 91378,
			"content": "openapi: 3.0.1\ninfo:\n  description: TRAPI 1.2 endpoint for the NCATS Biomedical Translator Reasoner called ARAX\n  version: 1.2.8\n  title: ARAX Translator Reasoner\n  contact:\n    email: edeutsch@systemsbiology.org\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  termsOfService: https://github.com/RTXteam/RTX/blob/master/LICENSE\n  x-translator:\n    component: ARA\n    team:\n      - Expander Agent\n    infores: infores:arax\n    biolink-version: 2.2.11\n    externalDocs:\n      description: \u003e-\n        The values for component and team are restricted according to this\n        external JSON schema. See schema and examples at url\n      url: https://github.com/NCATSTranslator/translator_extensions/blob/production/x-translator/\n  x-trapi:\n    version: 1.2.1\n    asyncquery: true\n    operations:\n      - lookup\n      - lookup_and_score\n      - overlay_compute_ngd\n      - overlay_compute_jaccard\n      - overlay_fisher_exact_test\n      - overlay_connect_knodes\n      - filter_results_top_n\n      - bind\n      - fill\n      - filter_kgraph_orphans\n      - filter_kgraph_top_n\n      - filter_kgraph_std_dev\n      - filter_kgraph_percentile\n      - filter_kgraph_discrete_kedge_attribute\n      - filter_kgraph_continuous_kedge_attribute\n      - sort_results_score\n      - sort_results_edge_attribute\n      - sort_results_node_attribute\n      - annotate_nodes\n      - score\n      - complete_results\n    externalDocs:\n      description: \u003e-\n        The values for version are restricted according to the regex in\n        this external JSON schema. See schema and examples at url\n      url: https://github.com/NCATSTranslator/translator_extensions/blob/production/x-trapi/\nexternalDocs:\n  description: \u003e-\n    Documentation for the NCATS Biomedical Translator Reasoners web services\n  url: https://github.com/NCATSTranslator/ReasonerAPI\nservers:\n  - url: https://arax.ncats.io/api/arax/v1.2\n    description: ARAX Translator Reasoner API\n    x-maturity: production\ntags:\n  - name: meta_knowledge_graph\n    description: Get supported relationships\n    externalDocs:\n      description: Documentation for the reasoner predicates function\n      url: https://arax.ncats.io/overview.html#predicates\n  - name: query\n    description: Initiate a query and wait to receive the response\n    externalDocs:\n      description: Documentation for the reasoner query function\n      url: https://arax.ncats.io/overview.html#query\n  - name: asyncquery\n    description: Initiate a query with a callback to receive the response\n    externalDocs:\n      description: Documentation for the reasoner asynchquery function\n      url: https://arax.ncats.io/overview.html#asyncquery\n  - name: translator\n    description: Required for SmartAPI validation of x-translator\n  - name: trapi\n    description: Required for SmartAPI validation of x-trapi\n  - name: response\n    description: Request a previously stored response from the server\n    externalDocs:\n      description: Documentation for the reasoner response function\n      url: https://arax.ncats.io/overview.html#response\n  - name: translate\n    description: Translate natural language question into a standardized query\n    externalDocs:\n      description: Documentation for the reasoner translate function\n      url: 'https://arax.ncats.io/overview.html#translate'\n  - name: entity\n    description: Return identifier and type of some entity in the knowledge graph\n    externalDocs:\n      description: Documentation for the reasoner entity function\n      url: 'https://arax.ncats.io/overview.html#entity'\n  - name: exampleQuestions\n    description: Return a list of example questions that the reasoner can answer\n    externalDocs:\n      description: Documentation for the reasoner exampleQuestions function\n      url: 'https://arax.ncats.io/overview.html#exampleQuestions'\n  - name: PubmedMeshNgd\n    description: Query to get the Normalized Google Distance between two MeSH terms based on co-occurance in all PubMed article annotations\n    externalDocs:\n      description: Documentation for the reasoner PubmedMeshNgd function\n      url: 'https://arax.ncats.io/overview.html#PubmedMeshNgd'\n  - name: status\n    description: Return status information about the endpoint\npaths:\n  /meta_knowledge_graph:\n    get:\n      tags:\n        - meta_knowledge_graph\n      summary: Meta knowledge graph representation of this TRAPI web service.\n      operationId: meta_knowledge_graph\n      parameters:\n      - in: query\n        name: format\n        description: \u003e-\n          Provide meta_knowledge_graph information in a format other than the default.\n          Default value is 'full'. Also permitted is 'simple'\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: \u003e-\n            Returns meta knowledge graph representation of this TRAPI web\n            service.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetaKnowledgeGraph'\n  /query:\n    post:\n      tags:\n        - query\n      summary: Initiate a query and wait to receive a Response\n      description: ''\n      operationId: query\n      requestBody:\n        description: Query information to be submitted\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Query'\n      responses:\n        '200':\n          description: \u003e-\n            OK. There may or may not be results. Note that some of the provided\n            identifiers may not have been recognized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Response'\n        '400':\n          description: \u003e-\n            Bad request. The request is invalid according to this OpenAPI\n            schema OR a specific identifier is believed to be invalid somehow\n            (not just unrecognized).\n          content:\n            application/json:\n              schema:\n                type: string\n        '500':\n          description: \u003e-\n            Internal server error.\n          content:\n            application/json:\n              schema:\n                type: string\n        '501':\n          description: \u003e-\n            Not implemented.\n          content:\n            application/json:\n              schema:\n                type: string\n  /asyncquery:\n    post:\n      tags:\n        - asyncquery\n      summary: Initiate a query with a callback to receive the response\n      description: ''\n      operationId: asyncquery\n      requestBody:\n        description: Query information to be submitted\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AsyncQuery'\n      responses:\n        '200':\n          description: \u003e-\n            The query is accepted for processing and the Response will be\n            sent to the callback url when complete.\n          content:\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: \u003e-\n            Bad request. The request is invalid according to this OpenAPI\n            schema OR a specific identifier is believed to be invalid somehow\n            (not just unrecognized).\n          content:\n            application/json:\n              schema:\n                type: string\n        '500':\n          description: \u003e-\n            Internal server error.\n          content:\n            application/json:\n              schema:\n                type: string\n        '501':\n          description: \u003e-\n            Not implemented.\n          content:\n            application/json:\n              schema:\n                type: string\n  /response/{response_id}:\n    get:\n      tags:\n        - response\n      summary: Request a previously stored response from the server\n      description: ''\n      operationId: get_response\n      parameters:\n        - in: path\n          name: response_id\n          description: Identifier of the response to return\n          example: 41651\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Response'\n        '404':\n          description: response_id not found\n  /response:\n    post:\n      tags:\n      - response\n      summary: Annotate a response\n      description: ''\n      operationId: post_response\n      requestBody:\n        description: Object that provides annotation information\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          description: Invalid request\n  /translate:\n    post:\n      tags:\n      - translate\n      summary: Translate natural language question into a standardized query\n      description: ''\n      operationId: translate\n      requestBody:\n        description: Question information to be translated\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Question'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Query'\n        '400':\n          description: Invalid status value\n  /entity:\n    get:\n      tags:\n      - entity\n      summary: Obtain CURIE and synonym information about a search term\n      description: ''\n      operationId: get_entity\n      parameters:\n      - in: query\n        name: q\n        description: \u003e-\n          A string to search by (name, abbreviation, CURIE, etc.).\n          The parameter may be repeated for multiple search strings.\n        required: true\n        schema:\n          type: array\n          example:\n          - MESH:D014867\n          - NCIT:C34373\n          items:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: \"Entity not found\"\n    post:\n      tags:\n      - entity\n      summary: Obtain CURIE and synonym information about search terms\n      description: ''\n      operationId: post_entity\n      requestBody:\n        description: List of terms to get information about\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntityQuery'\n        '404':\n          description: \"Entity not found\"\n  /exampleQuestions:\n    get:\n      tags:\n      - exampleQuestions\n      summary: Request a list of example questions that ARAX can answer\n      description: ''\n      operationId: example_questions\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n  '/PubmedMeshNgd/{term1}/{term2}':\n    get:\n      tags:\n      - PubmedMeshNgd\n      summary: Query to get the Normalized Google Distance between two MeSH terms based on co-occurrence in all PubMed article annotations\n      description: ''\n      operationId: PubmedMeshNgd\n      parameters:\n        - in: path\n          name: term1\n          description: First of two terms. Order not important.\n          required: true\n          schema:\n            type: string\n          example: PTGS2\n        - in: path\n          name: term2\n          description: Second of two terms. Order not important.\n          required: true\n          schema:\n            type: string\n          example: acetaminophen\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MeshNgdResponse'\n        '400':\n          description: \"Invalid terms\"\n  /status:\n    get:\n      tags:\n      - status\n      summary: Obtain status information about the endpoint\n      description: ''\n      operationId: get_status\n      parameters:\n      - in: query\n        name: last_n_hours\n        description: \u003e-\n          Limit results to the past N hours\n        required: false\n        schema:\n          type: integer\n          example: 6\n      - in: query\n        name: id\n        description: \u003e-\n          Identifier of the log entry\n        required: false\n        schema:\n          type: integer\n          example: 10\n      - in: query\n        name: terminate_pid\n        description: \u003e-\n          PID of an ongoing query to terminate\n        required: false\n        schema:\n          type: integer\n      - in: query\n        name: authorization\n        description: \u003e-\n          Authorization string required for certain calls to status\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: \"Entity not found\"\n  /status/logs:\n    get:\n      operationId: get_logs\n      parameters:\n      - description: Specify the log sending mode\n        explode: true\n        in: query\n        name: mode\n        required: false\n        schema:\n          example: tail\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              schema:\n                type: string\n          description: successful operation\n        \"404\":\n          description: Logs not found\n      summary: Get log information from the server\n      tags:\n      - status\n      x-openapi-router-controller: openapi_server.controllers.status_controller\ncomponents:\n  schemas:\n    Query:\n      description: \u003e-\n        The Query class is used to package a user request for information. A\n        Query object consists of a required Message object with optional\n        additional properties. Additional properties are intended to convey\n        implementation-specific or query-independent parameters. For example,\n        an additional property specifying a log level could allow a user to\n        override the default log level in order to receive more fine-grained\n        log information when debugging an issue.\n      x-body-name: request_body\n      type: object\n      properties:\n        message:\n          $ref: '#/components/schemas/Message'\n          description: \u003e-\n            The query Message is a serialization of the user request. Content\n            of the Message object depends on the intended TRAPI operation. For\n            example, the fill operation requires a non-empty query_graph field\n            as part of the Message, whereas other operations, e.g. overlay,\n            require non-empty results and knowledge_graph fields.\n        log_level:\n          description: The least critical level of logs to return\n          allOf:\n            - $ref: '#/components/schemas/LogLevel'\n          nullable: true\n        workflow:\n          description: List of workflow steps to be executed.\n          type: array\n          example: null\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/OperationAnnotate'\n              - $ref: '#/components/schemas/OperationAnnotateEdges'\n              - $ref: '#/components/schemas/OperationAnnotateNodes'\n              - $ref: '#/components/schemas/OperationBind'\n              - $ref: '#/components/schemas/OperationCompleteResults'\n              - $ref: '#/components/schemas/OperationEnrichResults'\n              - $ref: '#/components/schemas/OperationFill'\n              - $ref: '#/components/schemas/OperationFilterKgraph'\n              - $ref: '#/components/schemas/OperationFilterKgraphContinuousKedgeAttribute'\n              - $ref: '#/components/schemas/OperationFilterKgraphDiscreteKedgeAttribute'\n              - $ref: '#/components/schemas/OperationFilterKgraphDiscreteKnodeAttribute'\n              - $ref: '#/components/schemas/OperationFilterKgraphOrphans'\n              - $ref: '#/components/schemas/OperationFilterKgraphPercentile'\n              - $ref: '#/components/schemas/OperationFilterKgraphStdDev'\n              - $ref: '#/components/schemas/OperationFilterKgraphTopN'\n              - $ref: '#/components/schemas/OperationFilterResults'\n              - $ref: '#/components/schemas/OperationFilterResultsTopN'\n              - $ref: '#/components/schemas/OperationLookup'\n              - $ref: '#/components/schemas/OperationOverlay'\n              - $ref: '#/components/schemas/OperationOverlayComputeJaccard'\n              - $ref: '#/components/schemas/OperationOverlayComputeNgd'\n              - $ref: '#/components/schemas/OperationOverlayConnectKnodes'\n              - $ref: '#/components/schemas/OperationOverlayFisherExactTest'\n              - $ref: '#/components/schemas/OperationRestate'\n              - $ref: '#/components/schemas/OperationScore'\n              - $ref: '#/components/schemas/OperationSortResults'\n              - $ref: '#/components/schemas/OperationSortResultsEdgeAttribute'\n              - $ref: '#/components/schemas/OperationSortResultsNodeAttribute'\n              - $ref: '#/components/schemas/OperationSortResultsScore'\n          nullable: true\n        submitter:\n          type: string\n          description: \u003e-\n            Any string for self-identifying the submitter of a query. The\n            purpose of this optional field is to aid in the tracking of\n            the source of queries for development and issue resolution.\n          nullable: true\n        bypass_cache:\n          type: boolean\n          default: false\n          description: \u003e-\n            Set to true in order to bypass any possible cached\n            response and try to answer the query from scratch\n        stream_progress:\n          type: boolean\n          default: false\n          description: \u003e-\n            Set to true in order to receive a stream of LogEntry objects\n            as the query is progressing\n        enforce_edge_directionality:\n          type: boolean\n          default: false\n          description: \u003e-\n            Set to true in order to enforce edge directionality during queries.\n            By default, edge directionality can be reversed without penalty.\n        return_minimal_metadata:\n          type: boolean\n          default: false\n          description: \u003e-\n            Set to true in order to return only the most minimal metadata.\n            By default, rich metadata for nodes and edges are supplied, which\n            may cause a very large and slower Response.\n        max_results:\n          type: integer\n          example: 100\n          default: 100\n          description: Maximum number of individual results to return\n        page_size:\n          type: integer\n          example: 100\n          default: 100\n          description: Split the results into pages with this number of results each\n        page_number:\n          type: integer\n          example: 1\n          default: 1\n          description: \u003e-\n            Page number of results when the number of results exceeds the\n            page_size, with page 1 as the first page\n        operations:\n          description: \u003e-\n            Container for one or more Message objects or identifiers for one or\n            more Messages along with a processing plan and options for how those\n            messages should be processed and returned\n          example: null\n          allOf:\n            - $ref: '#/components/schemas/Operations'\n          nullable: true\n      additionalProperties: true\n      required:\n        - message\n    AsyncQuery:\n      description: \u003e-\n        The AsyncQuery class is effectively the same as the Query class but\n        it requires a callback property.\n      x-body-name: request_body\n      type: object\n      properties:\n        callback:\n          type: string\n          format: uri\n          pattern: ^https?://\n          description: \u003e-\n            Upon completion, this server will send a POST request to the\n            callback URL with `Content-Type: application/json` header and\n            request body containing a JSON-encoded `Response` object.\n            The server MAY POST `Response` objects before work is fully\n            complete to provide interim results with a Response.status\n            value of 'Running'. If a POST operation to the callback URL\n            does not succeed, the server SHOULD retry the POST at least\n            once.\n        message:\n          $ref: '#/components/schemas/Message'\n          description: \u003e-\n            The query Message is a serialization of the user request. Content\n            of the Message object depends on the intended TRAPI operation. For\n            example, the fill operation requires a non-empty query_graph field\n            as part of the Message, whereas other operations, e.g. overlay,\n            require non-empty results and knowledge_graph fields.\n        log_level:\n          description: The least critical level of logs to return\n          allOf:\n            - $ref: '#/components/schemas/LogLevel'\n          nullable: true\n        workflow:\n          description: List of workflow steps to be executed.\n          type: array\n          example: null\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/OperationAnnotate'\n              - $ref: '#/components/schemas/OperationAnnotateEdges'\n              - $ref: '#/components/schemas/OperationAnnotateNodes'\n              - $ref: '#/components/schemas/OperationBind'\n              - $ref: '#/components/schemas/OperationCompleteResults'\n              - $ref: '#/components/schemas/OperationEnrichResults'\n              - $ref: '#/components/schemas/OperationFill'\n              - $ref: '#/components/schemas/OperationFilterKgraph'\n              - $ref: '#/components/schemas/OperationFilterKgraphContinuousKedgeAttribute'\n              - $ref: '#/components/schemas/OperationFilterKgraphDiscreteKedgeAttribute'\n              - $ref: '#/components/schemas/OperationFilterKgraphDiscreteKnodeAttribute'\n              - $ref: '#/components/schemas/OperationFilterKgraphOrphans'\n              - $ref: '#/components/schemas/OperationFilterKgraphPercentile'\n              - $ref: '#/components/schemas/OperationFilterKgraphStdDev'\n              - $ref: '#/components/schemas/OperationFilterKgraphTopN'\n              - $ref: '#/components/schemas/OperationFilterResults'\n              - $ref: '#/components/schemas/OperationFilterResultsTopN'\n              - $ref: '#/components/schemas/OperationLookup'\n              - $ref: '#/components/schemas/OperationOverlay'\n              - $ref: '#/components/schemas/OperationOverlayComputeJaccard'\n              - $ref: '#/components/schemas/OperationOverlayComputeNgd'\n              - $ref: '#/components/schemas/OperationOverlayConnectKnodes'\n              - $ref: '#/components/schemas/OperationOverlayFisherExactTest'\n              - $ref: '#/components/schemas/OperationRestate'\n              - $ref: '#/components/schemas/OperationScore'\n              - $ref: '#/components/schemas/OperationSortResults'\n              - $ref: '#/components/schemas/OperationSortResultsEdgeAttribute'\n              - $ref: '#/components/schemas/OperationSortResultsNodeAttribute'\n              - $ref: '#/components/schemas/OperationSortResultsScore'\n          nullable: true\n        submitter:\n          type: string\n          description: \u003e-\n            Any string for self-identifying the submitter of a query. The\n            purpose of this optional field is to aid in the tracking of\n            the source of queries for development and issue resolution.\n          nullable: true\n      additionalProperties: true\n      required:\n        - callback\n        - message\n    Response:\n      type: object\n      description: \u003e-\n        The Response object contains the main payload when a TRAPI query\n        endpoint interprets and responds to the submitted query successfully\n        (i.e., HTTP Status Code 200). The message property contains the\n        knowledge of the response (query graph, knowledge graph, and results).\n        The status, description, and logs properties provide additional details\n        about the response.\n      properties:\n        message:\n          description: \u003e-\n            Contains the knowledge of the response (query graph, knowledge\n            graph, and results).\n          $ref: '#/components/schemas/Message'\n        status:\n          description: \u003e-\n            One of a standardized set of short codes,\n            e.g. Success, QueryNotTraversable, KPsNotAvailable\n          type: string\n          example: Success\n          nullable: true\n        description:\n          description: A brief human-readable description of the outcome\n          type: string\n          example: Success. 42 results found.\n          nullable: true\n        logs:\n          description: \u003e-\n            Log entries containing errors, warnings, debugging information, etc\n          type: array\n          items:\n            $ref: '#/components/schemas/LogEntry'\n          nullable: true\n        workflow:\n          description: A list of operations that were executed.\n          type: array\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/OperationAnnotate'\n              - $ref: '#/components/schemas/OperationAnnotateEdges'\n              - $ref: '#/components/schemas/OperationAnnotateNodes'\n              - $ref: '#/components/schemas/OperationBind'\n              - $ref: '#/components/schemas/OperationCompleteResults'\n              - $ref: '#/components/schemas/OperationEnrichResults'\n              - $ref: '#/components/schemas/OperationFill'\n              - $ref: '#/components/schemas/OperationFilterKgraph'\n              - $ref: '#/components/schemas/OperationFilterKgraphContinuousKedgeAttribute'\n              - $ref: '#/components/schemas/OperationFilterKgraphDiscreteKedgeAttribute'\n              - $ref: '#/components/schemas/OperationFilterKgraphDiscreteKnodeAttribute'\n              - $ref: '#/components/schemas/OperationFilterKgraphOrphans'\n              - $ref: '#/components/schemas/OperationFilterKgraphPercentile'\n              - $ref: '#/components/schemas/OperationFilterKgraphStdDev'\n              - $ref: '#/components/schemas/OperationFilterKgraphTopN'\n              - $ref: '#/components/schemas/OperationFilterResults'\n              - $ref: '#/components/schemas/OperationFilterResultsTopN'\n              - $ref: '#/components/schemas/OperationLookup'\n              - $ref: '#/components/schemas/OperationOverlay'\n              - $ref: '#/components/schemas/OperationOverlayComputeJaccard'\n              - $ref: '#/components/schemas/OperationOverlayComputeNgd'\n              - $ref: '#/components/schemas/OperationOverlayConnectKnodes'\n              - $ref: '#/components/schemas/OperationOverlayFisherExactTest'\n              - $ref: '#/components/schemas/OperationRestate'\n              - $ref: '#/components/schemas/OperationScore'\n              - $ref: '#/components/schemas/OperationSortResults'\n              - $ref: '#/components/schemas/OperationSortResultsEdgeAttribute'\n              - $ref: '#/components/schemas/OperationSortResultsNodeAttribute'\n              - $ref: '#/components/schemas/OperationSortResultsScore'\n        submitter:\n          type: string\n          description: \u003e-\n            Any string for self-identifying the submitter of a query. The\n            purpose of this optional field is to aid in the tracking of\n            the source of queries for development and issue resolution.\n          nullable: true\n        operations:\n          description: \u003e-\n            Container for one or more Message objects or identifiers for one or\n            more Messages along with the processing plan and options for how those\n            messages were processed and returned\n          allOf:\n            - $ref: '#/components/schemas/Operations'\n        reasoner_id:\n          type: string\n          example: ARAX\n          description: \u003e-\n            Identifier string of the reasoner that provided this response\n            (one of ARAX, Robokop, etc.)\n        tool_version:\n          type: string\n          example: ARAX 0.8.0\n          description: Version label of the tool that generated this response\n        schema_version:\n          type: string\n          example: 1.2.0\n          description: Version label of this TRAPI schema\n        datetime:\n          type: string\n          example: '2021-01-09 12:34:45'\n          description: \u003e-\n            Datetime string for the time that this response was generated\n        table_column_names:\n          type: array\n          example:\n            - chemical_substance.name\n            - chemical_substance.id\n          description: \u003e-\n            List of column names that corresponds to the row_data for\n            each result\n          items:\n            type: string\n        original_question:\n          type: string\n          example: what proteins are affected by sickle cell anemia\n          description: The original question text typed in by the user\n        restated_question:\n          type: string\n          example: Which proteins are affected by sickle cell anemia?\n          description: \u003e-\n            A precise restatement of the question, as understood by the\n            Translator, for which the answer applies. The user should verify\n            that the restated question matches the intent of their original\n            question (it might not).\n        query_options:\n          type: object\n          example:\n            coalesce: true\n            threshold: 0.9\n          description: \u003e-\n            Dict of options that can be sent with the query. Options are tool\n            specific and not stipulated here\n        context:\n          type: string\n          example: 'https://rtx.ncats.io/ns/translator.jsonld'\n          description: JSON-LD context URI\n        type:\n          type: string\n          example: TranslatorAPIResponse\n          description: Entity type of this response\n        id:\n          type: string\n          example: 'https://arax.ncats.io/api/rtx/v1.2/response/123'\n          description: URI for this response\n        validation_result:\n          type: object\n          description: \u003e-\n            Validation results and other summary stats computed\n            for this Response.\n        total_results_count:\n          type: integer\n          nullable: true\n          description: \u003e-\n            The total number of results that were generated prior\n            to any filtering.\n        info:\n          type: string\n          nullable: true\n          description: \u003e-\n            A placholder for including some additional information\n      additionalProperties: true\n      required:\n        - message\n    Message:\n      description: \u003e-\n        The message object holds the main content of a Query or a Response in\n        three properties: query_graph, results, and knowledge_graph.\n        The query_graph property contains the query configuration, the results\n        property contains any answers that are returned by the service,\n        and knowledge_graph property contains lists of edges and nodes in the\n        thought graph corresponding to this message. The content of these\n        properties is context-dependent to the encompassing object and\n        the TRAPI operation requested.\n      type: object\n      properties:\n        results:\n          description: \u003e-\n            List of all returned Result objects for the query posed\n          type: array\n          items:\n            $ref: '#/components/schemas/Result'\n          nullable: true\n        query_graph:\n          description: \u003e-\n            QueryGraph object that contains a serialization of a query in the\n            form of a graph\n          allOf:\n            - $ref: '#/components/schemas/QueryGraph'\n          nullable: true\n        knowledge_graph:\n          description: \u003e-\n            KnowledgeGraph object that contains lists of nodes and edges\n            in the thought graph corresponding to the message\n          allOf:\n            - $ref: '#/components/schemas/KnowledgeGraph'\n          nullable: true\n      additionalProperties: false\n      example:\n        query_graph:\n          edges:\n            e00:\n              subject: n00\n              object: n01\n              predicates: [ biolink:physically_interacts_with ]\n          nodes:\n            n00:\n              ids: [ CHEMBL.COMPOUND:CHEMBL112 ]\n            n01:\n              categories: [ biolink:Protein ]\n    LogEntry:\n      description: \u003e-\n        The LogEntry object contains information useful for tracing\n        and debugging across Translator components.  Although an\n        individual component (for example, an ARA or KP) may have its\n        own logging and debugging infrastructure, this internal\n        information is not, in general, available to other components.\n        In addition to a timestamp and logging level, LogEntry\n        includes a string intended to be read by a human, along with\n        one of a standardized set of codes describing the condition of\n        the component sending the message.\n      type: object\n      properties:\n        timestamp:\n          type: string\n          format: date-time\n          description: Timestamp in ISO 8601 format\n          example: '2020-09-03T18:13:49+00:00'\n          nullable: true\n        level:\n          allOf:\n            - $ref: '#/components/schemas/LogLevel'\n          nullable: true\n        code:\n          type: string\n          description: \u003e-\n            One of a standardized set of short codes\n            e.g. QueryNotTraversable, KPNotAvailable, KPResponseMalformed\n          nullable: true\n        message:\n          type: string\n          description: A human-readable log message\n          nullable: true\n      additionalProperties: true\n    LogLevel:\n      type: string\n      description: Logging level\n      enum:\n        - ERROR\n        - WARNING\n        - INFO\n        - DEBUG\n      example: DEBUG\n      x-nullable: true\n    Result:\n      type: object\n      description: \u003e-\n        A Result object specifies the nodes and edges in the knowledge graph\n        that satisfy the structure or conditions of a user-submitted query\n        graph. It must contain a NodeBindings object (list of query graph node\n        to knowledge graph node mappings) and an EdgeBindings object (list of\n        query graph edge to knowledge graph edge mappings).\n      properties:\n        node_bindings:\n          type: object\n          description: \u003e-\n            The dictionary of Input Query Graph to Result Knowledge Graph node\n            bindings where the dictionary keys are the key identifiers of the\n            Query Graph nodes and the associated values of those keys are\n            instances of NodeBinding schema type (see below). This value is an\n            array of NodeBindings since a given query node may have multiple\n            knowledge graph Node bindings in the result.\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/NodeBinding'\n        edge_bindings:\n          type: object\n          description: \u003e-\n            The dictionary of Input Query Graph to Result Knowledge Graph edge\n            bindings where the dictionary keys are the key identifiers of the\n            Query Graph edges and the associated values of those keys are\n            instances of EdgeBinding schema type (see below). This value is an\n            array of EdgeBindings since a given query edge may resolve to\n            multiple knowledge graph edges in the result.\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/EdgeBinding'\n        id:\n          type: string\n          example: result:234\n          description: URI for this result\n          nullable: true\n        description:\n          type: string\n          example: \u003e-\n            The genetic condition sickle cell anemia may provide protection\n            from cerebral malaria via genetic alterations of proteins HBB\n            (P68871) and HMOX1 (P09601).\n          description: \u003e-\n            A free text description of this result answer from the reasoner\n          nullable: true\n        essence:\n          type: string\n          example: ibuprofen\n          description: \u003e-\n            A single string that is the terse essence of the result (useful for\n            simple answers)\n          nullable: true\n        essence_category:\n          type: string\n          example: biolink:ChemicalEntity\n          description: A Translator BioLink bioentity category of the essence\n          nullable: true\n        row_data:\n          type: array\n          example:\n            - ibuprofen\n            - CHEMBL:CHEMBL521\n          description: \u003e-\n            An arbitrary list of values that captures the essence of the result\n            that can be turned into a tabular result across all answers (each\n            result is a row) for a user that wants simplified tabular output\n          items:\n            oneOf:\n              - type: string\n              - type: number\n          nullable: true\n        score:\n          type: number\n          format: float\n          example: 163.233\n          description: Any type of score associated with this result\n          nullable: true\n        score_name:\n          type: string\n          example: Jaccard distance\n          description: Name for the score\n          nullable: true\n        score_direction:\n          type: string\n          example: lower_is_better\n          description: \u003e-\n            Sorting indicator for the score: one of higher_is_better or\n            lower_is_better\n          nullable: true\n        confidence:\n          type: number\n          format: float\n          example: 0.9234\n          description: \u003e-\n            Confidence metric for this result, a value between (inclusive)\n             0.0 (no confidence) and 1.0 (highest confidence)\n          nullable: true\n        result_group:\n          type: integer\n          example: 1\n          description: \u003e-\n            An integer group number for results for use in cases where several\n            results should be grouped together. Also useful to control sorting\n            ascending.\n          nullable: true\n        result_group_similarity_score:\n          type: number\n          format: float\n          example: 0.95\n          description: \u003e-\n            A score that denotes the similarity of this result to other members\n            of the result_group\n          nullable: true\n        reasoner_id:\n          type: string\n          example: ARAX\n          description: \u003e-\n            Identifier string of the reasoner that provided this result (e.g.,\n            ARAX, Robokop, etc.)\n          nullable: true\n      additionalProperties: true\n      required:\n        - node_bindings\n        - edge_bindings\n    NodeBinding:\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/CURIE'\n          description: \u003e-\n            An instance of NodeBinding is a single KnowledgeGraph Node mapping,\n            identified by the corresponding 'id' object key identifier of the\n            Node within the Knowledge Graph. Instances of NodeBinding may\n            include extra annotation (such annotation is not yet fully\n            standardized).\n      additionalProperties: true\n      required:\n        - id\n    EdgeBinding:\n      type: object\n      description: \u003e-\n        A instance of EdgeBinding is a single KnowledgeGraph Edge mapping,\n        identified by the corresponding 'id' object key identifier of the\n        Edge within the Knowledge Graph. Instances of EdgeBinding may include\n        extra annotation (such annotation is not yet fully standardized).\n      properties:\n        id:\n          type: string\n          description: The key identifier of a specific KnowledgeGraph Edge.\n        attributes:\n          type: array\n          description: \u003e-\n            A list of attributes providing further information about the\n            edge binding. This is not intended for capturing edge attributes\n            and should only be used for properties that vary from result to\n            result.\n          items:\n            $ref: '#/components/schemas/Attribute'\n          nullable: true\n      additionalProperties: true\n      required:\n        - id\n    KnowledgeGraph:\n      type: object\n      description: \u003e-\n        The knowledge graph associated with a set of results. The instances\n        of Node and Edge defining this graph represent instances of\n        biolink:NamedThing (concept nodes) and biolink:Association\n        (relationship edges) representing (Attribute) annotated knowledge\n        returned from the knowledge sources and inference agents wrapped by\n        the given TRAPI implementation.\n      properties:\n        nodes:\n          type: object\n          description: \u003e-\n            Dictionary of Node instances used in the KnowledgeGraph,\n            referenced elsewhere in the TRAPI output by the dictionary key.\n          additionalProperties:\n            $ref: '#/components/schemas/Node'\n        edges:\n          type: object\n          description: \u003e-\n            Dictionary of Edge instances used in the KnowledgeGraph,\n            referenced elsewhere in the TRAPI output by the dictionary key.\n          additionalProperties:\n            $ref: '#/components/schemas/Edge'\n      additionalProperties: true\n      required:\n        - nodes\n        - edges\n      x-nullable: true\n    QueryGraph:\n      type: object\n      description: \u003e-\n        A graph representing a biomedical question. It serves as a template for\n        each result (answer), where each bound knowledge graph node/edge is\n        expected to obey the constraints of the associated query graph element.\n      properties:\n        nodes:\n          type: object\n          description: \u003e-\n            The node specifications. The keys of this map are unique node\n            identifiers and the corresponding values include the constraints\n            on bound nodes.\n          additionalProperties:\n            $ref: '#/components/schemas/QNode'\n        edges:\n          type: object\n          description: \u003e-\n            The edge specifications. The keys of this map are unique edge\n            identifiers and the corresponding values include the constraints\n            on bound edges, in addition to specifying the subject and object\n            QNodes.\n          additionalProperties:\n            $ref: '#/components/schemas/QEdge'\n      additionalProperties: true\n      required:\n        - nodes\n        - edges\n    QNode:\n      type: object\n      description: A node in the QueryGraph used to represent an entity in a\n        query. If a CURIE is not specified, any nodes matching the category\n        of the QNode will be returned in the Results.\n      properties:\n        ids:\n          type: array\n          items:\n            $ref: '#/components/schemas/CURIE'\n          minItems: 1\n          example: [OMIM:603903]\n          description: CURIE identifier for this node\n          nullable: true\n        categories:\n          type: array\n          items:\n            $ref: '#/components/schemas/BiolinkEntity'\n          minItems: 1\n          nullable: true\n        is_set:\n          type: boolean\n          description: \u003e-\n            Boolean that if set to true, indicates that this QNode MAY have\n            multiple KnowledgeGraph Nodes bound to it within each Result.\n            The nodes in a set should be considered as a set of independent\n            nodes, rather than a set of dependent nodes, i.e., the answer\n            would still be valid if the nodes in the set were instead returned\n            individually. Multiple QNodes may have is_set=True. If a QNode\n            (n1) with is_set=True is connected to a QNode (n2) with\n            is_set=False, each n1 must be connected to n2. If a QNode (n1)\n            with is_set=True is connected to a QNode (n2) with is_set=True,\n            each n1 must be connected to at least one n2.\n          default: false\n        constraints:\n          type: array\n          description: \u003e-\n            A list of contraints applied to a query node.\n            If there are multiple items, they must all be true (equivalent\n            to AND)\n          items:\n            $ref: '#/components/schemas/QueryConstraint'\n          default: []\n        option_group_id:\n          type: string\n          nullable: true\n          description: \u003e-\n            Optional string acting as a label on a set of nodes and/or edges\n            indicating that they belong to a group that are to be\n            evaluated as a group. \n      additionalProperties: true\n    QEdge:\n      type: object\n      description: \u003e-\n        An edge in the QueryGraph used as an filter pattern specification in a\n        query. If the optional predicate property is not specified,\n        it is assumed to be a wildcard match to the target knowledge space.\n        If specified, the ontological inheritance hierarchy associated with\n        the term provided is assumed, such that edge bindings returned may be\n        an exact match to the given QEdge predicate term,\n        or to a term that is a descendant of the QEdge predicate term.\n      properties:\n        predicates:\n          type: array\n          items:\n            $ref: '#/components/schemas/BiolinkPredicate'\n          minItems: 1\n          nullable: true\n        subject:\n          type: string\n          example: https://omim.org/entry/603903\n          description: \u003e-\n            Corresponds to the map key identifier of the\n            subject concept node anchoring the query filter\n            pattern for the query relationship edge.\n        object:\n          type: string\n          example: https://www.uniprot.org/uniprot/P00738\n          description: \u003e-\n            Corresponds to the map key identifier of the\n            object concept node anchoring the query filter\n            pattern for the query relationship edge.\n        constraints:\n          type: array\n          description: \u003e-\n            A list of contraints applied to a query edge.\n            If there are multiple items, they must all be true (equivalent\n            to AND)\n          items:\n            $ref: '#/components/schemas/QueryConstraint'\n          default: []\n        exclude:\n          type: boolean\n          description: \u003e-\n            If set to true, then all subgraphs containing this edge\n            are excluded from the final results. (optional)\n        option_group_id:\n          type: string\n          nullable: true\n          description: \u003e-\n            Optional string acting as a label on a set of nodes and/or edges\n            indicating that they belong to a group that are to be\n            evaluated as a group. \n      additionalProperties: true\n      required:\n        - subject\n        - object\n    Node:\n      type: object\n      description: \u003e-\n        A node in the KnowledgeGraph which represents some biomedical\n        concept. Nodes are identified by the keys in the KnowledgeGraph\n        Node mapping.\n      properties:\n        name:\n          type: string\n          example: Haptoglobin\n          description: Formal name of the entity\n          nullable: true\n        categories:\n          type: array\n          items:\n            $ref: '#/components/schemas/BiolinkEntity'\n          nullable: true\n        attributes:\n          type: array\n          description: A list of attributes describing the node\n          items:\n            $ref: '#/components/schemas/Attribute'\n          nullable: true\n      additionalProperties: false\n    Attribute:\n      type: object\n      description: \u003e-\n        Generic attribute for a node or an edge that expands the key-value\n        pair concept by including fields for additional metadata. These fields\n        can be used to describe the source of the statement made in a key-value\n        pair of the attribute object, or describe the attribute's value itself\n        including its semantic type, or a url providing additional information\n        about it. An attribute may be further qualified with a SubAttribute\n        (for example to provide confidence intervals on a value).\n      properties:\n        attribute_type_id:\n          $ref: '#/components/schemas/CURIE'\n          description: \u003e-\n            The 'key' of the attribute object, holding a CURIE of an ontology\n            property defining the attribute (preferably the CURIE of a\n            Biolink association slot). This property captures the relationship\n            asserted to hold between the value of the attribute, and the node\n            or edge from  which it hangs. For example, that a value of\n            '0.000153' represents a p-value supporting an edge, or that\n            a value of 'ChEMBL' represents the original source of the knowledge\n            expressed in the edge.\n          example: Biolink:has_p-value_evidence, Biolink:has_original_source\n        original_attribute_name:\n          type: string\n          description: \u003e-\n            The term used by the original source of an attribute to describe\n            the meaning or significance of the value it captures. This may be\n            a column name in a source tsv file, or a key in a source json\n            document for the field in the data that held the attribute's\n            value. Capturing this information  where possible lets us preserve\n            what the original source said. Note that the data type is string'\n            but the contents of the field could also be a CURIE of a third\n            party ontology term.\n          example: p-value\n          nullable: true\n        value:\n          description: \u003e-\n            Value of the attribute. May be any data type, including a list.\n          example: 0.000153\n        value_type_id:\n          $ref: '#/components/schemas/CURIE'\n          description: \u003e-\n            CURIE describing the semantic type of an  attribute's value. Use\n            a Biolink class if possible, otherwise a term from an external\n            ontology. If a suitable CURIE/identifier does not exist, enter a\n            descriptive phrase here and submit the new type for consideration\n            by the appropriate authority.\n          example: EDAM:data_1187\n          nullable: true\n        attribute_source:\n          type: string\n          description: \u003e-\n            The source of the core assertion made by the key-value pair of an\n            attribute object. Use a CURIE or namespace designator for this\n            resource where possible.\n          example: UniProtKB\n          nullable: true\n        value_url:\n          type: string\n          description: \u003e-\n            Human-consumable URL linking to a web document that provides\n            additional information about an  attribute's value (not the node\n            or the edge fom which it hangs).\n          example: https://pubmed.ncbi.nlm.nih.gov/32529952\n          nullable: true\n        description:\n          type: string\n          description: \u003e-\n            Human-readable description for the attribute and its value.\n          example: Assertion Authored By Dr. Trans L. Ator\n          nullable: true\n        attributes:\n          type: array\n          description: \u003e-\n            Node attributes provided by this TRAPI web service.\n          items:\n            $ref: '#/components/schemas/SubAttribute'\n          nullable: true\n      required:\n        - attribute_type_id\n        - value\n      additionalProperties: false\n    SubAttribute:\n      type: object\n      description: \u003e-\n        Second-level attribute that can be used to qualify information\n        contained in a primary Attribute attached to a Node or Edge.\n      properties:\n        attribute_type_id:\n          $ref: '#/components/schemas/CURIE'\n          description: \u003e-\n            The 'key' of the attribute object, holding a CURIE of an ontology\n            property defining the attribute (preferably the CURIE of a\n            Biolink association slot). This property captures the relationship\n            asserted to hold between the value of the attribute, and the node\n            or edge from  which it hangs. For example, that a value of\n            '0.000153' represents a p-value supporting an edge, or that\n            a value of 'ChEMBL' represents the original source of the knowledge\n            expressed in the edge.\n          example: Biolink:has_p-value_evidence, Biolink:has_original_source\n        original_attribute_name:\n          type: string\n          description: \u003e-\n            The term used by the original source of an attribute to describe\n            the meaning or significance of the value it captures. This may be\n            a column name in a source tsv file, or a key in a source json\n            document for the field in the data that held the attribute's\n            value. Capturing this information  where possible lets us preserve\n            what the original source said. Note that the data type is string'\n            but the contents of the field could also be a CURIE of a third\n            party ontology term.\n          example: p-value\n          nullable: true\n        value:\n          description: \u003e-\n            Value of the attribute. May be any data type, including a list.\n          example: 0.000153\n        value_type_id:\n          allOf:\n            - $ref: '#/components/schemas/CURIE'\n          description: \u003e-\n            CURIE describing the semantic type of an  attribute's value. Use\n            a Biolink class if possible, otherwise a term from an external\n            ontology. If a suitable CURIE/identifier does not exist, enter a\n            descriptive phrase here and submit the new type for consideration\n            by the appropriate authority.\n          example: EDAM:data_1187\n          nullable: true\n        attribute_source:\n          type: string\n          description: \u003e-\n            The source of the core assertion made by the key-value pair of an\n            attribute object. Use a CURIE or namespace designator for this\n            resource where possible.\n          example: UniProtKB\n          nullable: true\n        value_url:\n          type: string\n          description: \u003e-\n            Human-consumable URL linking to a web document that provides\n            additional information about an  attribute's value (not the node\n            or the edge fom which it hangs).\n          example: https://pubmed.ncbi.nlm.nih.gov/32529952\n          nullable: true\n        description:\n          type: string\n          description: \u003e-\n            Human-readable description for the attribute and its value.\n          example: Assertion Authored By Dr. Trans L. Ator\n          nullable: true\n      required:\n        - attribute_type_id\n        - value\n      additionalProperties: false\n    Edge:\n      type: object\n      description: \u003e-\n        A specification of the semantic relationship linking two concepts\n        that are expressed as nodes in the knowledge \"thought\" graph\n        resulting from a query upon the underlying knowledge source.\n      properties:\n        predicate:\n          allOf:\n            - $ref: '#/components/schemas/BiolinkPredicate'\n          nullable: true\n        subject:\n          $ref: '#/components/schemas/CURIE'\n          example: OMIM:603903\n          description: \u003e-\n            Corresponds to the map key CURIE of the\n            subject concept node of this relationship edge.\n        object:\n          $ref: '#/components/schemas/CURIE'\n          example: UniProtKB:P00738\n          description: \u003e-\n            Corresponds to the map key CURIE of the\n            object concept node of this relationship edge.\n        attributes:\n          type: array\n          description: A list of additional attributes for this edge\n          items:\n            $ref: '#/components/schemas/Attribute'\n          nullable: true\n      additionalProperties: false\n      required:\n        - subject\n        - object\n    BiolinkEntity:\n      description: \u003e-\n        Compact URI (CURIE) for a Biolink class, biolink:NamedThing\n        or a child thereof. The CURIE must use the prefix 'biolink:'\n        followed by the PascalCase class name.\n      type: string\n      pattern: ^biolink:[A-Z][a-zA-Z]*$\n      externalDocs:\n        description: Biolink model entities\n        url: https://biolink.github.io/biolink-model/docs/NamedThing.html\n      example: biolink:PhenotypicFeature\n    BiolinkPredicate:\n      description: \u003e-\n        CURIE for a Biolink 'predicate' slot, taken from the Biolink slot\n        ('is_a') hierarchy rooted in biolink:related_to (snake_case). This\n        predicate defines the Biolink relationship between the subject and\n        object nodes of a biolink:Association defining a knowledge graph edge.\n      type: string\n      pattern: ^biolink:[a-z][a-z_]*$\n      externalDocs:\n        description: Biolink model predicates\n        url: https://biolink.github.io/biolink-model/docs/related_to.html\n      example: biolink:interacts_with\n    CURIE:\n      type: string\n      description: \u003e-\n        A Compact URI, consisting of a prefix and a reference separated\n        by a colon, such as UniProtKB:P00738. Via an external context\n        definition, the CURIE prefix and colon may be replaced by a URI\n        prefix, such as http://identifiers.org/uniprot/, to form a full\n        URI.\n      externalDocs:\n        url: https://www.w3.org/TR/2010/NOTE-curie-20101216/\n    MetaKnowledgeGraph:\n      type: object\n      description: \u003e-\n        Knowledge-map representation of this TRAPI web service. The meta\n        knowledge graph is composed of the union of most specific categories\n        and predicates for each node and edge.\n      properties:\n        nodes:\n          type: object\n          description: \u003e-\n            Collection of the most specific node categories provided by\n            this TRAPI web service, indexed by Biolink class CURIEs.\n            A node category is only exposed here if there is\n            node for which that is the most specific category available.\n          additionalProperties:\n            $ref: '#/components/schemas/MetaNode'\n        edges:\n          type: array\n          description: \u003e-\n            List of the most specific edges/predicates provided by this TRAPI\n            web service. A predicate is only exposed here if there is an edge\n            for which the predicate is the most specific available.\n          items:\n            $ref: '#/components/schemas/MetaEdge'\n          minItems: 1\n      required:\n        - nodes\n        - edges\n    MetaNode:\n      type: object\n      description: \u003e-\n        Description of a node category provided by this TRAPI web service.\n      properties:\n        id_prefixes:\n          type: array\n          description: \u003e-\n            List of CURIE prefixes for the node category that this TRAPI web\n            service understands and accepts on the input.\n          items:\n            type: string\n          minItems: 1\n          example: [CHEMBL.COMPOUND, INCHIKEY]\n        attributes:\n          type: array\n          description: \u003e-\n            Node attributes provided by this TRAPI web service.\n          items:\n            $ref: '#/components/schemas/MetaAttribute'\n      required:\n        - id_prefixes\n      additionalProperties: false\n    MetaEdge:\n      type: object\n      description: \u003e-\n        Edge in a meta knowledge map describing relationship between a subject\n        Biolink class and an object Biolink class.\n      properties:\n        subject:\n          $ref: '#/components/schemas/BiolinkEntity'\n          description: \u003e-\n            Subject node category of this relationship edge.\n          example: biolink:ChemicalEntity\n        predicate:\n          $ref: '#/components/schemas/BiolinkPredicate'\n          description: \u003e-\n            Biolink relationship between the subject and object categories.\n          example: biolink:affects\n        object:\n          $ref: '#/components/schemas/BiolinkEntity'\n          description: \u003e-\n            Object node category of this relationship edge.\n          example: biolink:Protein\n        attributes:\n          type: array\n          description: \u003e-\n            Edge attributes provided by this TRAPI web service.\n          items:\n            $ref: '#/components/schemas/MetaAttribute'\n          nullable: true\n      required:\n        - subject\n        - predicate\n        - object\n      additionalProperties: false\n    MetaAttribute:\n      type: object\n      properties:\n        attribute_type_id:\n          $ref: '#/components/schemas/CURIE'\n          description: \u003e-\n            Type of an attribute provided by this TRAPI web service\n            (preferably the CURIE of a Biolink association slot)\n          example: biolink:p_value\n        attribute_source:\n          type: string\n          description: \u003e-\n            Source of an attribute provided by this TRAPI web service.\n          example: infores:chembl\n          nullable: true\n        original_attribute_names:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            Names of an the attribute as provided by the source.\n          nullable: true\n          minItems: 1\n        constraint_use:\n          type: boolean\n          description: \u003e-\n            Indicates whether this attribute can be used as a query\n            constraint.\n          default: false\n        constraint_name:\n          type: string\n          description: \u003e-\n            Human-readable name or label for the constraint concept.\n            Required whenever constraint_use is true.\n          example: p-value\n          nullable: true\n      required:\n        - attribute_type_id\n    QueryConstraint:\n      type: object\n      description: \u003e-\n        Generic query constraint for a query node or query edge\n      properties:\n        id:\n          allOf:\n            - $ref: '#/components/schemas/CURIE'\n          description: \u003e-\n            CURIE of the concept being constrained. For properties\n            defined by the Biolink model this SHOULD be a biolink CURIE.\n            otherwise, if possible, from the EDAM ontology. If a suitable\n            CURIE does not exist, enter a descriptive phrase here and\n            submit the new type for consideration by the appropriate\n            authority.\n          example: EDAM:data_0844\n        name:\n          type: string\n          description: \u003e-\n            Human-readable name or label for the constraint concept.\n            If appropriate, it SHOULD be the term name of the CURIE used\n            as the 'id'. This is redundant but required for human\n            readability.\n          example: molecular mass\n        not:\n          type: boolean\n          default: false\n        operator:\n          type: string\n          description: \u003e-\n            Relationship between the database value and the constraint value\n            for the specified id. The operators ==, \u003e, and \u003c mean\n            is exactly equal to, is greater than, and is less than,\n            respectively. The 'matches' operator indicates that the value\n            is a regular expression to be evaluated. If value is a list type,\n            then at least one evaluation must be true (equivalent to OR).\n            This means that the == operator with a list acts like a SQL 'IN'\n            clause. The 'not' property negates the operator such that not\n            and == means 'not equal to' (or 'not in' for a list), and not \u003e\n            means \u003c=, and not \u003c means \u003e=, and not matches means does not\n            match. The '==' operator SHOULD NOT be used in a manner that\n            describes an \"is a\" subclass relationship for the parent QNode.\n          enum:\n            - ==\n            - '\u003e'\n            - \u003c\n            - matches\n        value:\n          example: 57.0\n          description: \u003e-\n            Value of the attribute. May be any data type, including a list.\n            If the value is a list and there are multiple items, at least one\n            comparison must be true (equivalent to OR). If 'value' is of data\n            type 'object', the keys of the object MAY be treated as a list.\n            A 'list' data type paired with the '\u003e' or '\u003c' operators will\n            encode extraneous comparisons, but this is permitted as it is in\n            SQL and other languages.\n        unit_id:\n          example: UO:0000222\n          description: \u003e-\n            CURIE of the units of the value or list of values in the 'value'\n            property. The Units of Measurement Ontology (UO) should be used\n            if possible. The unit_id MUST be provided for (lists of)\n            numerical values that correspond to a quantity that has units.\n          nullable: true\n        unit_name:\n          example: kilodalton\n          description: \u003e-\n            Term name that is associated with the CURIE of the units\n            of the value or list of values in the 'value'\n            property. The Units of Measurement Ontology (UO) SHOULD be used\n            if possible. This property SHOULD be provided if a unit_id is\n            provided. This is redundant but recommended for human readability.\n          nullable: true\n      required:\n        - name\n        - id\n        - operator\n        - value\n      additionalProperties: false\n    Operations:\n      type: object\n      description: \u003e-\n        Container for one or more Message objects or identifiers for one or\n        more Messages along with a processing plan and options for how those\n        messages should be processed and returned\n      properties:\n        message_uris:\n          type: array\n          example:\n            - 'https://arax.ncats.io/api/arax/v1.2/response/38'\n          description: \u003e-\n            List of URIs for Message or Response objects to fetch and process\n          items:\n            type: string\n        messages:\n          type: array\n          description: List of Message objects to process\n          items:\n            $ref: '#/components/schemas/Message'\n        actions:\n          type: array\n          example:\n            - add_qnode(name=acetaminophen, key=n00)\n            - add_qnode(category=biolink:Protein, key=n01)\n            - add_qedge(subject=n01, object=n00, key=e00)\n            - expand(edge_key=e00)\n            - resultify()\n            - filter_results(action=limit_number_of_results, max_results=10)\n          description: \u003e-\n            List of order-dependent operations to execute\n          items:\n            type: string\n        options:\n          type: object\n          example:\n            halt_on_warning: False\n          description: \u003e-\n            Map of order independent options that apply during processing\n          additionalProperties: true\n      additionalProperties: true\n      nullable: true\n    Question:\n      type: object\n      properties:\n        text:\n          type: string\n          example: what genetic conditions offer protection against malaria\n          description: Free text question\n        language:\n          type: string\n          example: English\n          description: Human language in which the question is posed\n          enum:\n          - English\n      additionalProperties: true\n    MeshNgdResponse:\n      type: object\n      properties:\n        result_code:\n          type: string\n          example: TermNotFound\n          description: Set to OK for success, or some other short string to indicate and error (e.g., TermNotFound, etc.)\n        message:\n          type: string\n          example: Term 1 'malria' not found in MeSH\n          description: Extended message denoting the success or mode of failure for request\n        value:\n          type: number\n          format: float\n          description: Calculated Normalized Google Distance for the two supplied terms\n          example: 0.714\n    EntityQuery:\n      type: object\n      properties:\n        terms:\n          type: array\n          description: List of term strings to search for\n          items:\n            type: string\n        format:\n          type: string\n          description: Format of the response (full or compact)\n    OperationAnnotate:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - annotate\n          type: string\n        parameters: {}\n      required:\n      - id\n      type: object\n    OperationAnnotateEdges:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - annotate_edges\n          type: string\n        parameters:\n          properties:\n            attributes:\n              description: A list of attributes to annotate the edges with. If not\n                included then all available data will be annotated.\n              example:\n              - pmids\n              items:\n                type: string\n              type: array\n          type: object\n      required:\n      - id\n      type: object\n    OperationAnnotateNodes:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - annotate_nodes\n          type: string\n        parameters:\n          properties:\n            attributes:\n              description: A list of attributes to annotate the nodes with. If not\n                included then all available data will be annotated.\n              example:\n              - pmids\n              items:\n                type: string\n              type: array\n          type: object\n      required:\n      - id\n      type: object\n    OperationBind:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - bind\n          type: string\n        parameters: {}\n      required:\n      - id\n      type: object\n    OperationCompleteResults:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - complete_results\n          type: string\n        parameters: {}\n      required:\n      - id\n      type: object\n    OperationEnrichResults:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - enrich_results\n          type: string\n        parameters:\n          properties:\n            pvalue_threshold:\n              default: 1e-6\n              description: The cutoff p-value for enrichment.\n              example: 1e-7\n              maximum: 1\n              minimum: 0\n              type: number\n            qnode_keys:\n              description: If specified, then only knodes bound to these qnodes will\n                be examined for enrichment and combination.\n              example:\n              - n01\n              items:\n                type: string\n              type: array\n          type: object\n      required:\n      - id\n      type: object\n    OperationFill:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - fill\n          type: string\n        parameters:\n          oneOf:\n          - additionalProperties: false\n            properties:\n              allowlist:\n                description: List of knowledge providers/sources that may be used\n                  to provide knowledge.\n                example:\n                - icees\n                items:\n                  type: string\n                minLength: 1\n                type: array\n          - additionalProperties: false\n            properties:\n              denylist:\n                description: List of knowledge providers/sources that may NOT be used\n                  to provide knowledge.\n                example:\n                - ctd\n                items:\n                  type: string\n                minLength: 1\n                type: array\n          type: object\n      required:\n      - id\n      type: object\n    OperationFilterKgraph:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - filter_kgraph\n          type: string\n        parameters: {}\n      required:\n      - id\n      type: object\n    OperationFilterKgraphContinuousKedgeAttribute:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - filter_kgraph_continuous_kedge_attribute\n          type: string\n        parameters:\n          properties:\n            edge_attribute:\n              description: The name of the edge attribute to filter on.\n              example: normalized_google_distance\n              type: string\n            qedge_keys:\n              description: This indicates if you only want to remove edges with specific\n                edge_keys. If not provided or empty, all edges will be filtered on.\n              example:\n              - e01\n              items:\n                type: string\n              type: array\n            qnode_keys:\n              default: []\n              description: This indicates if you only want nodes corresponding to\n                a specific list of qnode_keys to be removed. If not provided or empty,\n                no nodes will be removed when filtering. Allows us to know what to\n                do with the nodes connected to edges that are removed.\n              example:\n              - n01\n              items:\n                type: string\n              type: array\n            remove_above_or_below:\n              description: Indicates whether to remove above or below the given threshold.\n              enum:\n              - above\n              - below\n              type: string\n            threshold:\n              description: The value to compare attribute values to.\n              example: 1.2\n              type: number\n          required:\n          - edge_attribute\n          - threshold\n          - remove_above_or_below\n          type: object\n      required:\n      - id\n      - parameters\n      type: object\n    OperationFilterKgraphDiscreteKedgeAttribute:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - filter_kgraph_discrete_kedge_attribute\n          type: string\n        parameters:\n          properties:\n            edge_attribute:\n              description: The name of the edge attribute to filter on.\n              example: provided_by\n              type: string\n            qedge_keys:\n              description: This indicates if you only want to remove edges with specific\n                edge_keys. If not provided or empty, all edges will be filtered on.\n              example:\n              - e01\n              items:\n                type: string\n              type: array\n            qnode_keys:\n              default: []\n              description: This indicates if you only want nodes corresponding to\n                a specific list of qnode_keys to be removed. If not provided or empty,\n                no nodes will be removed when filtering. Allows us to know what to\n                do with the nodes connected to edges that are removed\n              example:\n              - n01\n              items:\n                type: string\n              type: array\n            remove_value:\n              description: The value for which all edges containing this value in\n                the specified edge_attribute should be removed.\n              example: infores:semmeddb\n          required:\n          - edge_attribute\n          - remove_value\n          type: object\n      required:\n      - id\n      - parameters\n      type: object\n    OperationFilterKgraphDiscreteKnodeAttribute:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - filter_kgraph_discrete_knode_attribute\n          type: string\n        parameters:\n          properties:\n            node_attribute:\n              description: The name of the node attribute to filter on.\n              example: molecule_type\n              type: string\n            qnode_keys:\n              description: This indicates if you only want to remove nodes corresponding\n                to a specific list of qnode_keys to be removed. If not provided or\n                empty, all nodes will be considered when filtering.\n              example:\n              - n01\n              items:\n                type: string\n              type: array\n            remove_value:\n              description: The value for which all edges containing this value in\n                the specified edge_attribute should be removed.\n              example: small_molecule\n          required:\n          - node_attribute\n          - remove_value\n          type: object\n      required:\n      - id\n      - parameters\n      type: object\n    OperationFilterKgraphOrphans:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - filter_kgraph_orphans\n          type: string\n        parameters: {}\n      required:\n      - id\n      type: object\n    OperationFilterKgraphPercentile:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - filter_kgraph_percentile\n          type: string\n        parameters:\n          properties:\n            edge_attribute:\n              description: The name of the edge attribute to filter on.\n              example: normalized_google_distance\n              type: string\n            qedge_keys:\n              description: This indicates if you only want to filter on specific edge_keys.\n                If not provided or empty, all edges will be filtered on.\n              example:\n              - e01\n              items:\n                type: string\n              type: array\n            qnode_keys:\n              default: []\n              description: This indicates if you only want nodes corresponding to\n                a specific list of qnode_keys to be removed. If not provided or empty,\n                no nodes will be removed when filtering. Allows us to know what to\n                do with the nodes connected to edges that are removed.\n              example:\n              - n01\n              items:\n                type: string\n              type: array\n            remove_above_or_below:\n              default: below\n              description: Indicates whether to remove above or below the given threshold.\n              enum:\n              - above\n              - below\n              type: string\n            threshold:\n              default: 95\n              description: The percentile to threshold on.\n              example: 96.8\n              maximum: 100\n              minimum: 0\n              type: number\n          required:\n          - edge_attribute\n          type: object\n      required:\n      - id\n      - parameters\n      type: object\n    OperationFilterKgraphStdDev:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - filter_kgraph_std_dev\n          type: string\n        parameters:\n          properties:\n            edge_attribute:\n              description: The name of the edge attribute to filter on.\n              example: normalized_google_distance\n              type: string\n            num_sigma:\n              default: 1\n              description: The number of standard deviations to threshold on.\n              example: 1.2\n              minimum: 0\n              type: number\n            plus_or_minus_std_dev:\n              default: plus\n              description: Indicate whether or not the threshold should be found using\n                plus or minus the standard deviation. E.g. when plus_or_minus_std_dev\n                is set to plus will set the cutoff for filtering as the mean + num_sigma\n                * std_dev while setting plus_or_minus_std_dev to minus will set the\n                cutoff as the mean - num_sigma * std_dev.\n              enum:\n              - plus\n              - minus\n              type: string\n            qedge_keys:\n              description: This indicates if you only want to filter on specific edge_keys.\n                If not provided or empty, all edges will be filtered on.\n              example:\n              - e01\n              items:\n                type: string\n              type: array\n            qnode_keys:\n              default: []\n              description: This indicates if you only want nodes corresponding to\n                a specific list of qnode_keys to be removed. If not provided or empty,\n                no nodes will be removed when filtering.\n              example:\n              - n01\n              items:\n                type: string\n              type: array\n            remove_above_or_below:\n              default: below\n              description: Indictes whether to remove above or below the given threshold.\n              enum:\n              - above\n              - below\n              type: string\n          required:\n          - edge_attribute\n          type: object\n      required:\n      - id\n      - parameters\n      type: object\n    OperationFilterKgraphTopN:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - filter_kgraph_top_n\n          type: string\n        parameters:\n          properties:\n            edge_attribute:\n              description: The name of the edge attribute to filter on.\n              example: normalized_google_distance\n              type: string\n            keep_top_or_bottom:\n              default: top\n              description: Indicate whether or not the the top or bottom n values\n                should be kept.\n              enum:\n              - top\n              - bottom\n              type: string\n            max_edges:\n              default: 50\n              description: The number of edges to keep.\n              example: 10\n              minimum: 0\n              type: integer\n            qedge_keys:\n              description: This indicates if you only want to filter on specific edge_keys.\n                If not provided or empty, all edges will be filtered on.\n              example:\n              - e01\n              items:\n                type: string\n              type: array\n            qnode_keys:\n              default: []\n              description: This indicates if you only want nodes corresponding to\n                a specific list of qnode_keys to be removed. If not provided or empty,\n                no nodes will be removed when filtering. Allows us to know what to\n                do with the nodes connected to edges that are removed.\n              example:\n              - n01\n              items:\n                type: string\n              type: array\n          required:\n          - edge_attribute\n          type: object\n      required:\n      - id\n      - parameters\n      type: object\n    OperationFilterResults:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - filter_results\n          type: string\n        parameters: {}\n      required:\n      - id\n      type: object\n    OperationFilterResultsTopN:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - filter_results_top_n\n          type: string\n        parameters:\n          properties:\n            max_results:\n              description: The maximum number of results to return.\n              example: 50\n              minimum: 0\n              type: integer\n          required:\n          - max_results\n          type: object\n      required:\n      - id\n      - parameters\n      type: object\n    OperationLookup:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - lookup\n          type: string\n        parameters: {}\n      required:\n      - id\n      type: object\n    OperationOverlay:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - overlay\n          type: string\n        parameters: {}\n      required:\n      - id\n      type: object\n    OperationOverlayComputeJaccard:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - overlay_compute_jaccard\n          type: string\n        parameters:\n          properties:\n            end_node_keys:\n              description: A list of qnode keys specifying the ending nodes.\n              example:\n              - n0\n              - n2\n              items:\n                type: string\n              type: array\n            intermediate_node_key:\n              description: A qnode key specifying the intermediate node.\n              example: n1\n              type: string\n            virtual_relation_label:\n              description: The key of the query graph edge that corresponds to the\n                knowledge graph edges that were added by this operation.\n              example: J1\n              type: string\n          required:\n          - intermediate_node_key\n          - end_node_keys\n          - virtual_relation_label\n          type: object\n      required:\n      - id\n      - parameters\n      type: object\n    OperationOverlayComputeNgd:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - overlay_compute_ngd\n          type: string\n        parameters:\n          properties:\n            qnode_keys:\n              description: A list of qnode keys to overlay pairwise edges onto. Must\n                be be a list of at least 2 valid qnodes.\n              example:\n              - n00\n              - n01\n              items:\n                type: string\n              type: array\n            virtual_relation_label:\n              description: An label to help identify the virtual edge in the relation\n                field\n              example: NGD1\n              type: string\n          required:\n          - virtual_relation_label\n          - qnode_keys\n          type: object\n      required:\n      - id\n      - parameters\n      type: object\n    OperationOverlayConnectKnodes:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - overlay_connect_knodes\n          type: string\n        parameters: {}\n      required:\n      - id\n      type: object\n    OperationOverlayFisherExactTest:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - overlay_fisher_exact_test\n          type: string\n        parameters:\n          properties:\n            object_qnode_key:\n              description: A specific object query node id.\n              example: n2\n              type: string\n            rel_edge_key:\n              description: A specific Qedge id connected to both subject nodes and\n                object nodes in message KG (optional, otherwise all edges connected\n                to both subject nodes and object nodes in message KG are considered).\n              example: e01\n              type: string\n            subject_qnode_key:\n              description: A specific subject query node id.\n              example: n1\n              type: string\n            virtual_relation_label:\n              description: An label to help identify the virtual edge.\n              example: f1\n              type: string\n          required:\n          - subject_qnode_key\n          - object_qnode_key\n          - virtual_relation_label\n          type: object\n      required:\n      - id\n      - parameters\n      type: object\n    OperationRestate:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - restate\n          type: string\n        parameters: {}\n      required:\n      - id\n      type: object\n    OperationScore:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - score\n          type: string\n        parameters: {}\n      required:\n      - id\n      type: object\n    OperationSortResults:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - sort_results\n          type: string\n        parameters: {}\n      required:\n      - id\n      type: object\n    OperationSortResultsEdgeAttribute:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - sort_results_edge_attribute\n          type: string\n        parameters:\n          properties:\n            ascending_or_descending:\n              description: Indicates whether results should be sorted in ascending\n                or descending order.\n              enum:\n              - ascending\n              - descending\n              type: string\n            edge_attribute:\n              description: The name of the edge attribute to order by.\n              example: normalized_google_distance\n              type: string\n            qedge_keys:\n              description: This indicates if you only want to consider edges with\n                specific edge_keys. If not provided or empty, all edges will be looked\n                at.\n              example:\n              - e01\n              items:\n                type: string\n              type: array\n          required:\n          - edge_attribute\n          - ascending_or_descending\n          type: object\n      required:\n      - id\n      - parameters\n      type: object\n    OperationSortResultsNodeAttribute:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - sort_results_node_attribute\n          type: string\n        parameters:\n          properties:\n            ascending_or_descending:\n              description: Indicates whether results should be sorted in ascending\n                or descending order.\n              enum:\n              - ascending\n              - descending\n              type: string\n            node_attribute:\n              description: The name of the node attribute to order by.\n              example: normalized_google_distance\n              type: string\n            qnode_keys:\n              description: This indicates if you only want to consider nodes with\n                specific node_keys. If not provided or empty, all nodes will be looked\n                at.\n              example:\n              - e01\n              items:\n                type: string\n              type: array\n          required:\n          - node_attribute\n          - ascending_or_descending\n          type: object\n      required:\n      - id\n      - parameters\n      type: object\n    OperationSortResultsScore:\n      additionalProperties: false\n      properties:\n        id:\n          enum:\n          - sort_results_score\n          type: string\n        parameters:\n          properties:\n            ascending_or_descending:\n              description: Indicates whether results should be sorted in ascending\n                or descending order.\n              enum:\n              - ascending\n              - descending\n              type: string\n          required:\n          - ascending_or_descending\n          type: object\n      required:\n      - id\n      - parameters\n      type: object\n",
			"canonicalURL": "/github.com/RTXteam/RTX@9cf40f7aeab1b4674556d18c29fa3003926a87d1/-/blob/code/UI/OpenAPI/python-flask-server/RTX_OA3_TRAPI1.2_ARAX.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/RTXteam/RTX/blob/9cf40f7aeab1b4674556d18c29fa3003926a87d1/code/UI/OpenAPI/python-flask-server/RTX_OA3_TRAPI1.2_ARAX.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/asyncquery\": post: requestBody: contents: application/json: generate schema: field workflow: item: oneOf: oneOf AsyncQueryWorkflowItem: variant OperationAnnotateEdges: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"discriminator inference",
		"unsupported content types"
	]
}