{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Cosmo-Tech/cosmotech-api"
		},
		"file": {
			"name": "user.yaml",
			"size": 0,
			"path": "user/src/main/openapi/user.yaml",
			"byteSize": 12322,
			"content": "openapi: 3.0.3\n\ninfo:\n  title: Cosmo Tech User Manager API\n  description: Cosmo Tech User Manager API\n  version: 0.0.8-SNAPSHOT\n\nservers:\n- url: 'https://api.azure.cosmo-platform.com'\n- url: 'http://localhost:4010'\n\nsecurity:\n- oAuth2AuthCode: [ ]\n\ntags:\n- name: user\n  description: User Management\n\npaths:\n  /users:\n    post:\n      operationId: registerUser\n      tags:\n        - user\n      summary: Register a new user\n      requestBody:\n        description: the User to register\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n            examples:\n              BobCreateIn:\n                $ref: '#/components/examples/BobCreateIn'\n          application/yaml:\n            schema:\n              type: string\n              format: binary\n            examples:\n              BobCreateIn:\n                $ref: '#/components/examples/BobCreateIn'\n      responses:\n        \"201\":\n          description: the user details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              examples:\n                Bob:\n                  $ref: '#/components/examples/Bob'\n        \"400\":\n          description: Bad request\n    get:\n      operationId: findAllUsers\n      tags:\n        - user\n      summary: List all Users\n      responses:\n        \"200\":\n          description: the user details\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n              examples:\n                Two:\n                  $ref: '#/components/examples/TwoUsers'\n\n  /users/{user_id}:\n    parameters:\n      - name: user_id\n        in: path\n        description: the User identifier\n        required: true\n        schema:\n          type: string\n    get:\n      operationId: findUserById\n      tags:\n        - user\n      summary: Get the details of an user\n      responses:\n        \"200\":\n          description: the User details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              examples:\n                Bob:\n                  $ref: '#/components/examples/Bob'\n        \"404\":\n          description: the User specified is unknown or you don't have access to it\n    patch:\n      operationId: updateUser\n      tags:\n        - user\n      summary: Update a User\n      requestBody:\n        description: the new User details. Organization membership is handled via the /organizations endpoint.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n            examples:\n              BobyUpdateIn:\n                $ref: '#/components/examples/BobyUpdateIn'\n          application/yaml:\n            schema:\n              type: string\n              format: binary\n            examples:\n              BobyUpdateIn:\n                $ref: '#/components/examples/BobyUpdateIn'\n      responses:\n        \"200\":\n          description: the user details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              examples:\n                BobyUpdated:\n                  $ref: '#/components/examples/BobyUpdated'\n        \"400\":\n          description: Bad request\n        \"404\":\n          description: the User specified is unknown or you don't have access to it\n    delete:\n      operationId: unregisterUser\n      tags:\n        - user\n      summary: Unregister an user\n      responses:\n        \"204\":\n          description: Request succeeded\n        \"404\":\n          description: the User specified is unknown or you don't have access to it\n  /users/me:\n    get:\n      operationId: getCurrentUser\n      tags:\n        - user\n      summary: Get the details of the logged-in User\n      responses:\n        \"200\":\n          description: the User details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              examples:\n                Bob:\n                  $ref: '#/components/examples/Bob'\n  /organizations/{organization_id}/me:\n    parameters:\n      - name: organization_id\n        in: path\n        description: the Organization identifier\n        required: true\n        schema:\n          type: string\n    get:\n      operationId: getOrganizationCurrentUser\n      tags:\n        - user\n      summary: Get the details of a logged-in User with roles for an Organization\n      responses:\n        \"200\":\n          description: the User details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              examples:\n                Bob:\n                  $ref: '#/components/examples/BobOrganization'\n  /organizations/{organization_id}/workspaces/{workspace_id}/me:\n    parameters:\n      - name: organization_id\n        in: path\n        description: the Organization identifier\n        required: true\n        schema:\n          type: string\n      - name: workspace_id\n        in: path\n        description: the Workspace identifier\n        required: true\n        schema:\n          type: string\n    get:\n      operationId: getWorkspaceCurrentUser\n      tags:\n        - user\n      summary: Get the details of the logged-in user with roles for a Workspace\n      responses:\n        \"200\":\n          description: the User details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              examples:\n                Bob:\n                  $ref: '#/components/examples/BobWorkspace'\n  /test:\n    get:\n      operationId: testPlatform\n      tags:\n        - user\n      summary: test platform API call\n      responses:\n        \"200\":\n          description: test string\n          content:\n            text/plain:\n              schema:\n                type: string\n  /oauth2/authorize:\n    get:\n      operationId: authorizeUser\n      tags:\n        - user\n      summary: Authorize an User with OAuth2. Delegated to configured OAuth2 service\n      responses:\n        \"302\":\n          description: Redirection response\n          headers:\n            Location:\n              schema:\n                type: \"string\"\n              examples:\n                AzureAD:\n                  $ref: '#/components/examples/AzureADRedirect'\ncomponents:\n  securitySchemes:\n    oAuth2AuthCode:\n      type: oauth2\n      description: OAuth2 authentication\n      flows:\n        implicit:\n          authorizationUrl: https://login.microsoftonline.com/common/oauth2/v2.0/authorize\n          scopes:\n            http://dev.api.cosmotech.com/platform: Platform scope\n  schemas:\n    User:\n      type: object\n      description: a User\n      properties:\n        id:\n          type: string\n          readOnly: true\n          description: the User unique identifier\n        name:\n          type: string\n          description: the User name\n        platformRoles:\n          type: array\n          description: the list of Platform roles\n          items:\n            type: string\n            enum: [\"Admin\",\"User\",\"ConnectorDeveloper\"]\n        organizations:\n          type: array\n          readOnly: true\n          items:\n            $ref: '#/components/schemas/UserOrganization'\n#      required:\n#        - name\n#        - platformRoles\n    UserOrganization:\n      type: object\n      description: The organization of the user\n      properties:\n        id:\n          type: string\n          description: the Organization id\n        name:\n          type: string\n          description: the Organization name\n        roles:\n          type: array\n          description: the roles of the User in the Organization\n          items:\n            type: string\n        workspaces:\n          type: array\n          readOnly: true\n          description: the list of Workspaces roles\n          items:\n            $ref: '#/components/schemas/UserWorkspace'\n    UserWorkspace:\n      type: object\n      readOnly: true\n      description: the list of User roles for a Workspace\n      properties:\n        id:\n          type: string\n          readOnly: true\n          description: the Workspace Id\n        name:\n          type: string\n          readOnly: true\n          description: the Workspace name\n        roles:\n          type: array\n          description: the roles of the User in the Workspace\n          items:\n            type: string\n  examples:\n    BobCreateIn:\n      summary: Bob User Create input example\n      description: Bob User Create input example\n      value:\n        name: Bob\n        platformRoles:\n          - Admin\n    Bob:\n      summary: Bob User\n      description: Bob User example\n      value:\n        id: \"1\"\n        name: Bob\n        platformRoles:\n          - Admin\n        organizations:\n          - id: \"1\"\n            name: Cosmo Tech\n            roles:\n              - Admin\n            workspaces:\n              - id: \"1\"\n                name: Brewery Analysis \n                roles:\n                  - Admin\n          - id: \"2\"\n            name: Phoenix\n            roles:\n              - Admin\n    BobyUpdateIn:\n      summary: Boby update User input example\n      description: Bob User renamed to Boby input example\n      value:\n        name: Boby\n    BobyUpdated:\n      summary: Boby updated User\n      description: Bob User renamed to Boby example\n      value:\n        id: \"1\"\n        name: Boby\n        platformRoles:\n          - Admin\n        organizations:\n          - id: \"1\"\n            name: Cosmo Tech\n            roles:\n              - Admin\n            workspaces:\n              - id: \"1\"\n                name: Brewery Analysis \n                roles:\n                  - Admin\n          - id: \"2\"\n            name: Phoenix\n            roles:\n              - Admin\n    TwoUsers:\n      summary: Two Users example\n      description: Two Users example\n      value:\n        - id: \"1\"\n          name: Bob\n          platformRoles:\n            - Admin\n          organizations:\n            - id: \"1\"\n              name: Cosmo Tech\n              roles:\n                - Admin\n              workspaces:\n                - id: \"1\"\n                  name: Brewery Analysis \n                  roles:\n                    - Admin\n            - id: \"2\"\n              name: Phoenix\n              roles:\n                - Admin\n        - id: \"2\"\n          name: Alice\n          platformRoles:\n            - User\n          organizations:\n            - id: \"1\"\n              name: Cosmo Tech\n              roles:\n                - Admin\n              workspaces:\n                - id: \"1\"\n                  name: Brewery Analysis \n                  roles:\n                    - Admin\n            - id: \"2\"\n              name: Phoenix\n              roles:\n                - Admin\n    BobOrganization:\n      summary: Bob User for an Organization example\n      description: Bob User for Organization 1 example\n      value:\n        id: \"1\"\n        name: Bob\n        platformRoles:\n          - Admin\n        organizations:\n          - id: \"1\"\n            name: Cosmo Tech\n            roles:\n              - Admin\n            workspaces:\n              - id: \"1\"\n                name: Brewery Analysis \n                roles:\n                  - Admin\n    BobWorkspace:\n      summary: Bob User for a Workspace example\n      description: Bob User for Organization 1 and Workspace 1 example\n      value:\n        id: \"1\"\n        name: Bob\n        platformRoles:\n          - Admin\n        organizations:\n          - id: \"1\"\n            name: Cosmo Tech\n            roles:\n              - Admin\n            workspaces:\n              - id: \"1\"\n                name: Brewery Analysis \n                roles:\n                  - Admin\n    AzureADRedirect:\n      summary: Azure AD redirect example\n      description: authorize redirection to Azure Active Directory example\n      value:\n        Location: https://login.microsoftonline.com/e9641c78-d0d6-4d09-af63-168922724e7f/oauth2/v2.0/authorize?client_id=6731de76-14a6-49ae-97bc-6eba6914391e\u0026response_type=code\u0026redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F\u0026response_mode=query\u0026scope=https%3A%2F%2Fgraph.microsoft.com%2Fmail.read\n",
			"canonicalURL": "/github.com/Cosmo-Tech/cosmotech-api@56c19a68914e91e0ac5ec3e3ec50952c8464a03b/-/blob/user/src/main/openapi/user.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Cosmo-Tech/cosmotech-api/blob/56c19a68914e91e0ac5ec3e3ec50952c8464a03b/user/src/main/openapi/user.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/users/{user_id}\": get: security: security \"oAuth2AuthCode\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security",
		"unsupported content types"
	]
}