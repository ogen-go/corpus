{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Hyperfoil/Hyperfoil"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "controller-api/src/main/resources/openapi.yaml",
			"byteSize": 21458,
			"content": "openapi: 3.0.0\ninfo:\n  description: Hyperfoil Controller API\n  version: \"0.5\"\n  title: Hyperfoil Controller API\n  contact:\n    email: rvansa@redhat.com\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\npaths:\n  /openapi:\n    get:\n      summary: Serve this OpenAPI 3 definition.\n      operationId: openApi\n      responses:\n        '200':\n          description: This OpenAPI 3 definition\n          content:\n            text/vnd.yaml:\n              schema:\n                type: string\n                format: binary\n  /benchmark:\n    get:\n      summary: List defined benchmark names.\n      operationId: listBenchmarks\n      responses:\n        '200':\n          description: Benchmark names.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n    post:\n      summary: Add new benchmark definition.\n      operationId: addBenchmark\n      responses:\n        '204':\n          description: Benchmark accepted.\n        '400':\n          description: Benchmark is invalid.\n        '406':\n          description: Unsupported content-type.\n        '409':\n          description: Version of benchmark stored on server does not match to the updated version.\n      parameters:\n      - in: header\n        name: if-match\n        description: If we are updating an existing benchmark, expected previous version.\n        schema:\n          type: string\n      - in: query\n        name: storedFilesBenchmark\n        description: Name of previously uploaded benchmark where extra files should be loaded from during multi-part upload. Usually this is the same benchmark unless it is being renamed.\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n              format: binary\n          text/uri-list:\n            schema:\n              type: string\n              format: binary\n          text/vnd.yaml:\n            schema:\n              type: string\n              format: binary\n          application/java-serialized-object:\n            schema:\n              type: string\n              format: binary\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                benchmark:\n                  type: object\n                file:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n        description: Benchmark definition.\n  /benchmark/{name}:\n    get:\n      summary: Retrieve existing benchmark.\n      operationId: getBenchmark\n      parameters:\n      - in: path\n        name: name\n        required: true\n        allowEmptyValue: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Existing benchmark definition.\n          content:\n            text/vnd.yaml:\n              schema:\n                type: object\n            application/java-serialized-object:\n              schema:\n                type: string\n                format: binary\n        '404':\n          description: Benchmark is not defined.\n        '406':\n          description: Benchmark does not preserve the original source.\n  /benchmark/{name}/start:\n    get:\n      summary: Start a new run of this benchmark.\n      operationId: startBenchmark\n      parameters:\n      - in: path\n        name: name\n        required: true\n        allowEmptyValue: false\n        schema:\n          type: string\n      - in: query\n        name: desc\n        description: Run description\n        schema:\n          type: string\n      - in: header\n        name: x-trigger-job\n        description: URL of CI job that triggers the run.\n        schema:\n          type: string\n      - in: query\n        name: runId\n        description: Run ID of run that was already requested but not started.\n        schema:\n          type: string\n      - in: query\n        name: templateParam\n        description: Template parameter in format KEY=VALUE\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        '202':\n          description: Run was successfully started.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n        '301':\n          description: Run is requested but it must be started from CI.\n          headers:\n            Location:\n              schema:\n                type: string\n              description: URL that should be hit to start the CI job.\n            x-run-id:\n              schema:\n                type: string\n              description: Generated run ID.\n        '403':\n          description: There is an ongoing run. Try later.\n        '404':\n          description: Requested benchmark is not defined.\n  /benchmark/{name}/files:\n    get:\n      summary: Get data files for the benchmark\n      operationId: getBenchmarkFiles\n      parameters:\n      - in: path\n        name: name\n        required: true\n        allowEmptyValue: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: List of files\n          content:\n            multipart/form-data:\n              schema:\n                type: object\n        '404':\n          description: Benchmark is not defined.\n        '406':\n          description: Benchmark does not preserve the original source.\n  /benchmark/{name}/structure:\n    get:\n      summary: Inspect the rendered structure of the benchmark.\n      operationId: getBenchmarkStructure\n      parameters:\n      - in: path\n        name: name\n        required: true\n        allowEmptyValue: false\n        schema:\n          type: string\n      - in: query\n        name: maxCollectionSize\n        schema:\n          type: integer\n          default: 20\n      - in: query\n        name: templateParam\n        description: Template parameters in format KEY=VALUE for resolving benchmark without running that.\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        '200':\n          description: Benchmark structure.\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Benchmark is not defined.\n        '406':\n          description: Benchmark does not preserve the original source.\n  /run:\n    get:\n      summary: List known runs.\n      operationId: listRuns\n      parameters:\n      - in: query\n        name: details\n        schema:\n          type: boolean\n          default: false\n      responses:\n        '200':\n          description: Here are the runs.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n  /run/{runId}:\n    get:\n      summary: Get info about run.\n      operationId: getRun\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Run information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Run'\n\n  /run/{runId}/agentCpu:\n    get:\n      summary: Get agent CPU data\n      operationId: agentCpu\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Run was killed.\n          content:\n            application/json:\n              schema:\n                type: object\n\n  /run/{runId}/kill:\n    get:\n      summary: Kill this run\n      operationId: killRun\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Run was killed.\n  /run/{runId}/report:\n    get:\n      summary: Generate HTML report for this run\n      operationId: createReport\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: source\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Generated report\n          content:\n            text/html:\n              schema:\n                type: string\n  /run/{runId}/sessions:\n    get:\n      summary: List sessions in plaintext (for debugging)\n      operationId: listSessions\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: inactive\n        schema:\n          type: boolean\n          default: false\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            text/plain:\n              schema:\n                type: string\n  /run/{runId}/sessions/recent:\n    get:\n      summary: Actual numbers of active sessions in each phase\n      operationId: getRecentSessions\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            application/json:\n              schema:\n                type: object\n  /run/{runId}/sessions/total:\n    get:\n      summary: Min/max of active sessions in each phase\n      operationId: getTotalSessions\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            application/json:\n              schema:\n                type: object\n  /run/{runId}/connections:\n    get:\n      summary: List connections in plaintext (for debugging)\n      operationId: listConnections\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            text/plain:\n              schema:\n                type: string\n  /run/{runId}/connections/recent:\n    get:\n      summary: Actual numbers of connections for each host:port\n      operationId: getRecentConnections\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            application/json:\n              schema:\n                type: object\n  /run/{runId}/connections/total:\n    get:\n      summary: Total number of connections for each host:port\n      operationId: getTotalConnections\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            application/json:\n              schema:\n                type: object\n  /run/{runId}/stats/all:\n    get:\n      summary: Get complete statistics from the run.\n      description: \u003e\n        This can be invoked only after the run completes.\n        Provides exported statistics either as ZIP file with CSV files\n        or as JSON object.\n      operationId: getAllStats\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n            application/json:\n              schema:\n                type: object\n  /run/{runId}/stats/all/json:\n    get:\n      summary: Get complete statistics from the run.\n      description: \u003e\n        This can be invoked only after the run completes.\n        Provides exported statistics as JSON object.\n      operationId: getAllStatsJson\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            application/json:\n              schema:\n                type: object\n  /run/{runId}/stats/all/csv:\n    get:\n      summary: Get complete statistics from the run.\n      description: \u003e\n        This can be invoked only after the run completes.\n        Provides exported statistics as ZIP file with CSV files\n      operationId: getAllStatsCsv\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            application/zip:\n              schema:\n                type: object\n  /run/{runId}/stats/recent:\n    get:\n      summary: Actual statistics from last 5 seconds of run.\n      operationId: getRecentStats\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestStatisticsResponse\"\n  /run/{runId}/stats/total:\n    get:\n      summary: Statistics over the whole duration of phases.\n      operationId: getTotalStats\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestStatisticsResponse\"\n  /run/{runId}/stats/histogram:\n    get:\n      summary: Retrieve histogram for given metric.\n      operationId: getHistogramStats\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: phase\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: stepId\n        required: true\n        schema:\n          type: integer\n      - in: query\n        name: metric\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Histogram\"\n  /run/{runId}/file: # actual file is a query parameter as it may contain slashes\n    get:\n      summary: Retrieve a custom file in the run directory (generated by hooks)\n      operationId: getRunFile\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: file\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        '403':\n          description: File is not within the run directory\n        '404':\n          description: File not found\n  /run/{runId}/benchmark:\n    get:\n      summary: Benchmark used for given run.\n      operationId: getBenchmarkForRun\n      parameters:\n      - in: path\n        name: runId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            text/vnd.yaml:\n              schema:\n                type: object\n            application/java-serialized-object:\n              schema:\n                type: string\n                format: binary\n  /agents:\n    get:\n      summary: All agents used (in all runs)\n      operationId: listAgents\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /log:\n    get:\n      summary: Get controller log.\n      operationId: getControllerLog\n      parameters:\n      - in: query\n        name: offset\n        schema:\n          type: integer\n          format: long\n          default: 0\n      - in: header\n        name: if-match\n        description: Identifier of the previously downloaded log chunk.\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            text/plain:\n              schema:\n                type: string\n  /log/{agent}:\n    get:\n      summary: Get controller log.\n      operationId: getAgentLog\n      parameters:\n      - in: path\n        name: agent\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: offset\n        schema:\n          type: integer\n          format: long\n          default: 0\n      - in: header\n        name: if-match\n        description: Identifier of the previously downloaded log chunk.\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Retrieved successfully.\n          content:\n            text/plain:\n              schema:\n                type: string\n  /shutdown:\n    get:\n      summary: Shutdown controller\n      operationId: shutdown\n      parameters:\n      - in: query\n        name: force\n        schema:\n          type: boolean\n          default: false\n      responses:\n        '200':\n          description: Shutting down\n        '403':\n          description: Some runs are in progress and force=false\n  /template:\n    get:\n      summary: List defined template names.\n      operationId: listTemplates\n      responses:\n        '200':\n          description: Benchmark template names.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /token:\n    get:\n      summary: Get authorization token\n      description: Returns authorization token that can be used instead of credentials with Basic Auth.\n      operationId: getToken\n      responses:\n        '200':\n          description: Serving token\n  /version:\n    get:\n      summary: Fetch controller version\n      operationId: getVersion\n      responses:\n        '200':\n          description: Retrieved successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\ncomponents:\n  schemas:\n    Run:\n      type: object\n      required:\n      - id\n      - benchmark\n      - started\n      - terminated\n      properties:\n        id:\n          type: string\n          example: 1234\n          x-json-include: NON_EMPTY\n        benchmark:\n          type: string\n          example: my-benchmark\n        started:\n          type: string\n          format: date-time\n          example: '2016/08/29 09:12:33.001'\n        terminated:\n          type: string\n          format: date-time\n        cancelled:\n          type: boolean\n        completed:\n          type: boolean\n        description:\n          type: string\n        phases:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Phase\"\n        agents:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Agent\"\n        errors:\n          type: array\n          items:\n            type: string\n    Phase:\n      type: object\n      required:\n      - name\n      properties:\n        name:\n          type: string\n        status:\n          type: string\n        type:\n          type: string\n        started:\n          type: string\n          format: date-time\n        remaining:\n          type: string\n        completed:\n          type: string\n          format: date-time\n        failed:\n          type: boolean\n        totalDuration:\n          type: string\n        description:\n          type: string\n    Agent:\n      type: object\n      properties:\n        name:\n          type: string\n        address:\n          type: string\n        status:\n          type: string\n    RequestStatisticsResponse:\n      type: object\n      properties:\n        status:\n          type: string\n        statistics:\n          type: array\n          items:\n            $ref: \"#/components/schemas/RequestStats\"\n    RequestStats:\n      type: object\n      properties:\n        phase:\n          type: string\n        stepId:\n          type: integer\n          default: 0\n        metric:\n          type: string\n        summary:\n          type: object\n          x-type: io.hyperfoil.api.statistics.StatisticsSummary\n        failedSLAs:\n          type: array\n          items:\n            type: string\n        isWarmup:\n          type: boolean\n    Histogram:\n      type: object\n      properties:\n        phase:\n          type: string\n        metric:\n          type: string\n        startTime:\n          type: integer\n          format: long\n        endTime:\n          type: integer\n          format: long\n        data:\n          type: string\n    Version:\n      type: object\n      properties:\n        version:\n          type: string\n        commitId:\n          type: string\n        deploymentId:\n          type: string\n        serverTime:\n          type: string\n          format: date-time\n",
			"canonicalURL": "/github.com/Hyperfoil/Hyperfoil@b2994167e6cbb631795f7c4d2b9d8c9a61ac1f5c/-/blob/controller-api/src/main/resources/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Hyperfoil/Hyperfoil/blob/b2994167e6cbb631795f7c4d2b9d8c9a61ac1f5c/controller-api/src/main/resources/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/run/{runId}/stats/all/csv\": get: responses: 200: contents: unsupported content types: [application/zip]",
	"NotImplemented": [
		"unsupported content types"
	]
}