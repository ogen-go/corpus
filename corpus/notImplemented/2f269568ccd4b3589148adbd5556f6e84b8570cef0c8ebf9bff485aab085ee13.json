{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/6RiverSystems/mmmbbb"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "oas/openapi.yaml",
			"byteSize": 7080,
			"content": "# Copyright (c) 2021 6 River Systems\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy of\n# this software and associated documentation files (the \"Software\"), to deal in\n# the Software without restriction, including without limitation the rights to\n# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n# the Software, and to permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nopenapi: 3.0.1\n\ninfo:\n  title: 6 River Systems pub-sub-ish message bus API\n  description: |\n    This API describes interactions with the 6RS message bus\n  version: 1.x.x\n  contact:\n    name: 6 River Systems\n    url: https://6river.com\n\ntags:\n  - name: Internal\n    description: |\n      This is an internal API used between 6RS components.\n\npaths:\n  # TODO: can we reference common endpoints in a shared OAS subset with $ref?\n\n  /metrics:\n    get:\n      tags:\n        - Prometheus\n        - Metrics\n        - Status\n      summary: Prometheus metrics export\n      description: Retrive current exported Prometheus metrics\n      responses:\n        200:\n          description: Metrics returned in Prometheus text format\n          content:\n            text/plain:\n              schema:\n                type: string\n\n  /debug/vars:\n    get:\n      tags:\n        - Debug\n        - Status\n      summary: Retrieve debug expvars\n      description: Retrieve debug expvars in JSON format\n      responses:\n        200:\n          description: Current expvar values\n          content:\n            application/json:\n              schema:\n                type: object\n                description: \u003e\n                  This is a free-form JSON object. The specific keys present\n                  will depend on internal application details.\n\n  /:\n    get:\n      tags:\n        - Status\n      summary: Application uptime\n      description: \u003e\n        Retrieve application uptime and possibly additional application-specific\n        metadata\n      responses:\n        200:\n          description: Application is up\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UptimeResponse\"\n\n  /server/shutdown:\n    post:\n      tags:\n        - Control\n      summary: Shutdown the app, gracefully\n      description: \u003e\n        Request a clean app shutdown, with a reasonable amount of time allowed\n        for active requests and background tasks to complete.\n      responses:\n        200:\n          description: Application shutdown has been initiated\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: A witty message\n  /server/kill:\n    post:\n      tags:\n        - Control\n      summary: Shutdown the app, forcefully\n      description: \u003e\n        Request an app shutdown, with a minimal amount of time allowed for\n        active requests and background tasks to complete before forcibly killing\n        the app.\n      responses:\n        200:\n          description: Application kill has been initiated\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: A sad message\n\n  /faults:\n    get:\n      tags:\n        - FaultInjection\n      summary: Get currently enabled fault injections\n      responses:\n        200:\n          description: List of configured fault injections\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ConfiguredFault\"\n  /faults/inject:\n    post:\n      tags:\n        - FaultInjection\n      summary: Inject a new diagnostic fault\n      requestBody:\n        required: true\n        description: Description of the fault to inject\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FaultDescription\"\n      responses:\n        201:\n          description: Fault has been injected\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConfiguredFault\"\n\ncomponents:\n  schemas:\n    UptimeResponse:\n      type: object\n      description: Response object for a successful uptime request\n      additionalProperties: true\n      required:\n        - startTime\n      properties:\n        startTime:\n          type: string\n          format: date-time\n          description: Timestamp of when the application instance started\n\n    ErrorMessage:\n      type: object\n      description: A generic error message object\n      required:\n        - message\n      additionalProperties: true\n      properties:\n        message:\n          type: string\n          description: A human readable error message\n        name:\n          type: string\n          description: \u003e\n            The name of some object or entity which triggered the error\n\n    FaultDescription:\n      type: object\n      additionalProperties: false\n      required:\n        - operation\n        - error\n      properties:\n        operation:\n          type: string\n          minLength: 1\n        parameters:\n          type: object\n          additionalProperties:\n            type: string\n        count:\n          type: integer\n          format: int64\n          minimum: 1\n        error:\n          # this has to be a stand-alone schema for oapi-codgen to make\n          # constants for it\n          $ref: \"#/components/schemas/ErrorType\"\n    ErrorType:\n      type: string\n      enum:\n        - context.Canceled\n        - context.DeadlineExceeded\n        - ent.NotFound\n        - grpc.Canceled\n        - grpc.Unknown\n        - grpc.InvalidArgument\n        - grpc.DeadlineExceeded\n        - grpc.NotFound\n        - grpc.AlreadyExists\n        - grpc.PermissionDenied\n        - grpc.ResourceExhausted\n        - grpc.FailedPrecondition\n        - grpc.Aborted\n        - grpc.OutOfRange\n        - grpc.Unimplemented\n        - grpc.Internal\n        - grpc.Unavailable\n        - grpc.DataLoss\n        - grpc.Unauthenticated\n\n    ConfiguredFault:\n      type: object\n      additionalProperties: false\n      required:\n        - operation\n        - count\n      properties:\n        operation:\n          type: string\n          minLength: 1\n        parameters:\n          type: object\n          additionalProperties:\n            type: string\n        count:\n          type: integer\n          format: int64\n        faultDescription:\n          type: string\n",
			"canonicalURL": "/github.com/6RiverSystems/mmmbbb@a69fab833f6c6eb49f58119715108a63d610477e/-/blob/oas/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/6RiverSystems/mmmbbb/blob/a69fab833f6c6eb49f58119715108a63d610477e/oas/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/server/kill\": post: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}