{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "wealthport.com-1.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/wealthport.com-1.0-swagger.yaml",
			"byteSize": 28972,
			"content": "openapi: 3.0.0\ninfo:\n  description: Onedot provides a simple, lightweight and open Web API based on the Open API\n    2.0 standard (\u003ca href=\"https://www.openapis.org\"\n    target=\"_blank\"\u003ehttps://www.openapis.org\u003c/a\u003e). Our APIs offer a variety of\n    operations related to managing Sources, Folders, Orders and Recipes. There\n    are operations to submit and track Jobs, upload and download data files and\n    many more.\n  termsOfService: https://www.onedot.com/terms-of-service\n  title: Wealthport API\n  version: \"1.0\"\n  x-apisguru-categories:\n    - analytics\n    - machine_learning\n  x-logo:\n    backgroundColor: \"#FFFFFF\"\n    url: https://pbs.twimg.com/profile_images/912326535566196737/gQPnTTPZ_400x400.jpg\n  x-origin:\n    - format: swagger\n      url: https://wealthport.github.io/wealthport-api-docs/swagger.json\n      version: \"2.0\"\n  x-providerName: wealthport.com\ntags:\n  - name: Folders\n  - name: Orders\n  - name: Recipes\n  - name: Sources\npaths:\n  /folders:\n    get:\n      description: Retrieves all Folders in the Data Inventory.\n      operationId: retrieveFolders\n      responses:\n        \"200\":\n          description: Folders successfully retrieved\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Existing_Folder\"\n                type: array\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Retrieve Folders\n      tags:\n        - Folders\n    post:\n      description: Creates the specified Folder in the Data Inventory.\n      operationId: createFolder\n      requestBody:\n        $ref: \"#/components/requestBodies/Folder_Request\"\n      responses:\n        \"201\":\n          description: Folder successfully created and available at the returned location\n            with the returned ID\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"409\":\n          description: Folder with same name already exists\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Create Folder\n      tags:\n        - Folders\n  \"/folders/{id}\":\n    delete:\n      description: Deletes the specified Folder and all contained Sources from the Data\n        Inventory.\n      operationId: deleteFolder\n      parameters:\n        - description: Folder ID of the Folder to delete, including any Sources contained\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Folder successfully deleted\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Folder cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Delete Folder\n      tags:\n        - Folders\n    get:\n      description: Retrieves the specified Folder.\n      operationId: retrieveFolder\n      parameters:\n        - description: Folder ID of the Folder to retrieve\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Folder successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Existing_Folder\"\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Folder cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Retrieve Folder\n      tags:\n        - Folders\n    put:\n      description: Updates the specified Folder.\n      operationId: updateFolder\n      parameters:\n        - description: Folder ID of the Folder to update\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/Folder_Request\"\n      responses:\n        \"200\":\n          description: Folder successfully updated\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Folder cannot be found\n        \"409\":\n          description: Folder with same name already exists\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Update Folder\n      tags:\n        - Folders\n  \"/folders/{id}/sources\":\n    delete:\n      description: Deletes all Sources in the specified Folder.\n      operationId: deleteFolderSources\n      parameters:\n        - description: Folder ID of the Folder to delete all Sources from\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Sources successfully deleted\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Folder cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Delete Sources\n      tags:\n        - Folders\n    get:\n      description: Retrieves all Sources of the specified Folder.\n      operationId: retrieveFolderSources\n      parameters:\n        - description: Folder ID of the Folder to retrieve its Sources from\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Sources successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Existing_Source\"\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Folder cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Retrieve Sources\n      tags:\n        - Folders\n  \"/jobs/{id}/result\":\n    get:\n      description: Returns the result of a finished Job.\n      operationId: getResult\n      parameters:\n        - description: Job ID of the job to retrieve its result\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Job has finished, potentially with errors, result is returned as\n            JSON in the response\n          content:\n            text/plain:\n              schema:\n                type: string\n        \"201\":\n          description: Job has finished successfully, resulting source is available at the\n            returned URL\n          content:\n            text/plain:\n              schema:\n                format: url\n                type: string\n        \"400\":\n          description: Wrong or missing mandatory arguments, job has not yet finished or is\n            not in a valid state\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Job cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Get Result\n      tags:\n        - Orders\n  \"/jobs/{id}/status\":\n    get:\n      description: Retrieves the status of a Job.\n      operationId: getStatus\n      parameters:\n        - description: Job ID of the job to retrieve its status\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Job has finished, potentially with errors, result is available and\n            Job ID is returned in the response\n          headers:\n            Location:\n              description: URL to the Get Result operation to retrieve the result\n              schema:\n                type: string\n                format: url\n          content:\n            text/plain:\n              schema:\n                type: string\n        \"202\":\n          description: Job is running, no result available yet and Job ID is returned\n          headers:\n            Location:\n              description: URL to the Get Status operation to retrieve the result\n              schema:\n                type: string\n                format: url\n          content:\n            text/plain:\n              schema:\n                type: string\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Job cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Get Status\n      tags:\n        - Orders\n  /orders:\n    get:\n      description: Retrieves all previously submitted Orders.\n      operationId: retrieveOrders\n      responses:\n        \"200\":\n          description: Orders successfully retrieved\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Existing_Order\"\n                type: array\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Retrieve Orders\n      tags:\n        - Orders\n    post:\n      description: Creates a new Order to be submitted.\u003cp\u003eOrders reference one or more\n        Sources, e.g. uploaded files, as well as one or more Folders (which\n        again can contain Sources).The Recipe describes what to do with the\n        referenced sources and where to publish the processing result to.\u003c/p\u003e\n      operationId: createOrder\n      requestBody:\n        $ref: \"#/components/requestBodies/Order_Request\"\n      responses:\n        \"201\":\n          description: Order successfully created and available at the returned location\n            with the returned ID\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Create Order\n      tags:\n        - Orders\n  \"/orders/{id}\":\n    delete:\n      description: Deletes the specified Order.\n      operationId: deleteOrder\n      parameters:\n        - description: Order ID of the order to delete\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Order has been deleted\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Order cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Delete Order\n      tags:\n        - Orders\n    get:\n      description: Retrieves the specified Order.\n      operationId: retrieveOrder\n      parameters:\n        - description: Order ID of the order to retrieve\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Order successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Existing_Order\"\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Order cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Retrieve Order\n      tags:\n        - Orders\n    put:\n      description: Updates the specified Order.\n      operationId: updateOrder\n      parameters:\n        - description: Order ID of the order to update\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/Order_Request\"\n      responses:\n        \"200\":\n          description: Order successfully updated\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Order cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Update Order\n      tags:\n        - Orders\n  \"/orders/{id}/submit\":\n    post:\n      description: Submits the specified Order for processing and launches a corresponding\n        job.\n      operationId: submitOrder\n      parameters:\n        - description: Order ID of the order to submit for processing\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"202\":\n          description: Order has been submitted, Job is running and Job ID is returned in\n            the response\n          headers:\n            Location:\n              description: URL to the Get Status operation to poll for processing status\n                updates\n              schema:\n                type: string\n                format: url\n          content:\n            text/plain:\n              schema:\n                type: string\n        \"400\":\n          description: Wrong or missing mandatory arguments, order has no recipe or is not\n            valid otherwise\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Order cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Submit Order\n      tags:\n        - Orders\n  /recipes:\n    get:\n      description: Retrieves all available Recipes.\n      operationId: retrieveRecipes\n      responses:\n        \"200\":\n          description: Recipes successfully retrieved\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Existing_Recipe\"\n                type: array\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Retrieve Recipes\n      tags:\n        - Recipes\n  \"/recipes/{id}\":\n    get:\n      description: Retrieves the specified Recipe.\n      operationId: retrieveRecipe\n      parameters:\n        - description: Recipe ID of the recipe to retrieve\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Recipe successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Existing_Recipe\"\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Recipe cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Retrieve Recipe\n      tags:\n        - Recipes\n  \"/recipes/{id}/instructions\":\n    get:\n      description: Retrieves the instructions of the specified Recipe.\n      operationId: retrieveInstructions\n      parameters:\n        - description: Recipe ID of the recipe whose instructions to retrieve\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Instructions successfully retrieved\n          content:\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Recipe cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Retrieve Instructions\n      tags:\n        - Recipes\n    put:\n      description: Updates the instructions of the specified Recipe.\n      operationId: updateInstructions\n      parameters:\n        - description: Recipe ID of the recipe whose instructions to update\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n        description: JSON instructions to update the Recipe\n      responses:\n        \"200\":\n          description: Instructions successfully updated\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Recipe cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Update Instructions\n      tags:\n        - Recipes\n  /sources:\n    get:\n      description: Retrieves all Sources stored in the Data Inventory.\n      operationId: retrieveSources\n      responses:\n        \"200\":\n          description: Sources successfully retrieved\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Existing_Source\"\n                type: array\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Retrieve Sources\n      tags:\n        - Sources\n    post:\n      description: Creates the specified Source.\u003cp\u003eSources are either uploaded files or a\n        reference to a database. They are referenced in orders to specify which\n        data needs processing.\u003c/p\u003e\u003cp\u003eMost clients should probably use the Upload\n        File API which implicitly creates a new source on successful file\n        upload.\u003c/p\u003e\n      operationId: createSource\n      requestBody:\n        $ref: \"#/components/requestBodies/Source_Request\"\n      responses:\n        \"201\":\n          description: Source successfully created and available at the returned location\n            with the returned ID\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Create Source\n      tags:\n        - Sources\n  /sources/upload:\n    put:\n      description: Initiates a file upload and returns the URL where to upload the file\n        to.\u003cp\u003eCalling this API generates a secure, unique and time-restricted\n        URL where the file can be uploaded to. The URL is available in the\n        \u003cpre\u003eLocation\u003c/pre\u003e HTTP header of the response. The temporal validity\n        of the URL is available in the \u003cpre\u003eCache-Control\u003c/pre\u003e HTTP header of\n        the response.Clients may perform a \u003cpre\u003eHTTP PUT\u003c/pre\u003e request on the\n        URL to upload the file using a form where a file \u003cpre\u003esample.csv\u003c/pre\u003e\n        is passed as property \u003cpre\u003efile=sample.csv\u003c/pre\u003e. For security reasons,\n        clients must pass all HTTP headers as returned by the\n        \u003cpre\u003eX-WP-Upload-Headers\u003c/pre\u003e in the response, together with their\n        values. This procedure ensures a secure, encrypted file\n        upload.\u003c/p\u003e\u003cp\u003eNote that calling this API automatically generates a\n        Source, there is no need to call the Create Source API.\u003c/p\u003e\n      operationId: getUploadUrl\n      parameters:\n        - description: Name of the source to create. The name must correspond to the exact\n            file name of the file being uploaded.\n          in: query\n          name: name\n          required: true\n          schema:\n            type: string\n        - description: Existing source ID to create a new version from\n          in: query\n          name: source\n          required: false\n          schema:\n            type: string\n        - description: Folder ID where to upload source to\n          in: query\n          name: folder\n          required: false\n          schema:\n            type: string\n        - description: MIME type of the source file\n          in: query\n          name: contentType\n          required: false\n          schema:\n            type: string\n        - description: Encoding of the source file\n          in: query\n          name: encoding\n          required: false\n          schema:\n            type: string\n      responses:\n        \"202\":\n          description: Source file upload initiated\n          headers:\n            Location:\n              description: URL where to upload the source file to\n              schema:\n                type: string\n                format: url\n            X-WP-Upload-Headers:\n              description: Comma-separated list of HTTP headers from the response whose\n                values need to be passed again as HTTP headers to the \u003cpre\u003eHTTP\n                PUT\u003c/pre\u003e request when uploading the source file\n              schema:\n                type: string\n          content:\n            text/plain:\n              schema:\n                type: string\n        \"400\":\n          description: Wrong or missing mandatory argument\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Upload File\n      tags:\n        - Sources\n  \"/sources/{id}\":\n    delete:\n      description: Deletes the specified Source.\n      operationId: deleteSource\n      parameters:\n        - description: Source ID of the Source to delete\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Source successfully deleted\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Source cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Delete Source\n      tags:\n        - Sources\n    get:\n      description: Retrieves the specified Source.\n      operationId: retrieveSource\n      parameters:\n        - description: Source ID of the source to retrieve\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Source successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Existing_Source\"\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Source cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Retrieve Source\n      tags:\n        - Sources\n    put:\n      description: Updates the specified Source.\n      operationId: updateSource\n      parameters:\n        - description: Source ID of Source to update\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/Source_Request\"\n      responses:\n        \"200\":\n          description: Source successfully updated\n        \"400\":\n          description: Wrong or missing mandatory arguments\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Source cannot be found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Update Source\n      tags:\n        - Sources\n  \"/sources/{id}/download\":\n    get:\n      description: Initiates a file download and returns the URL where to download the file\n        from.\u003cp\u003eCalling this API generates a secure, unique and time-restricted\n        URL where the file can be downloaded from. The URL is available in the\n        \u003cpre\u003eLocation\u003c/pre\u003e HTTP header of the response. The time restriction of\n        the URL is availablein the \u003cpre\u003eCache-Control\u003c/pre\u003e HTTP header of the\n        response.Clients may perform a \u003cpre\u003eHTTP GET\u003c/pre\u003e request on the URL to\n        download the file.\u003c/p\u003e\n      operationId: getDownloadUrl\n      parameters:\n        - description: Source ID of file to download\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Source file download initiated\n          headers:\n            Location:\n              description: URL where to download the file from\n              schema:\n                type: string\n                format: url\n          content:\n            text/plain:\n              schema:\n                type: string\n        \"400\":\n          description: Wrong or missing mandatory argument\n        \"401\":\n          description: Invalid or unauthorised API key\n        \"403\":\n          description: No permission to perform operation\n        \"404\":\n          description: Source not found\n      security:\n        - Using_HTTP_Header: []\n        - Using_URL_Query_Parameter: []\n      summary: Download File\n      tags:\n        - Sources\nservers:\n  - url: https://api.wealthport.com/gateway/public/endpoints/1.0\ncomponents:\n  requestBodies:\n    Order_Request:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Order_Request\"\n      description: JSON\n    Source_Request:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Source_Request\"\n      description: JSON\n    Folder_Request:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Folder_Request\"\n      description: JSON\n  securitySchemes:\n    Using_HTTP_Header:\n      in: header\n      name: X-API-Key\n      type: apiKey\n    Using_URL_Query_Parameter:\n      in: query\n      name: apikey\n      type: apiKey\n  schemas:\n    Archivable_Object:\n      properties:\n        archived:\n          default: false\n          type: boolean\n        id:\n          maxLength: 36\n          minLength: 36\n          type: string\n      required:\n        - id\n      type: object\n    Existing_Folder: {}\n    Existing_Order: {}\n    Existing_Recipe: {}\n    Existing_Source: {}\n    Folder_Request: {}\n    Order_Request: {}\n    Source_Request: {}\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/wealthport.com-1.0-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/wealthport.com-1.0-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/jobs/{id}/status\": get: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}