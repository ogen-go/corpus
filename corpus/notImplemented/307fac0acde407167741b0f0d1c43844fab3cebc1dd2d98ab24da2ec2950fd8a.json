{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/factset/enterprise-sdk"
		},
		"file": {
			"name": "DocumentsDistributorDocuments.v1.yaml",
			"size": 0,
			"path": "specs/DocumentsDistributorDocuments.v1.yaml",
			"byteSize": 15167,
			"content": "openapi: 3.0.0\ninfo:\n  title: Documents Distributor - Documents API\n  version: 1.0.0\n  description: \u003e-\n    Documents APIs that provide filings such as Global Filings and XML files\n    such as StreetAccount\n\n      Global Filings API provides the capability to search and download filings documents from various exchanges around the world. This API will provide access to the full history and the ability to search by date and dataset(source). It does not provide real-time updates to the filings documents. Filings providers currently include EDGAR \n      \n      Note: The real-time updates to the filing documents will be available within week to ten days and per request able to query up to 8 days of data\n            \n      \n      StreetAccount XML API provides access to historical StreetAccount (SA) news. SA provides a summary for various corporate and market news written by journalist with background in financial markets.\n\n      The API delivers SA stories in XML format based on user-specified date input parameters. When the API request is completed, output files will be made available back to the users through a secure URL. This API has three endpoints (1) Request Files (2) Check Status (3) Get Files.\n      \n      This API only supports adhoc requests to retrieve historical files and does not support real-time files and if require real-time push should consider the other three methods (pushed via SFTP, to QNT account, or users Azure Storage)\n\n     Both historical and real-time Street Account news is also delivered via SFTP, to users QNT account, or users Azure Storage.\n\n    Files delivered contain both metadata and content body in each file. This\n    eliminates the need to make multiple requests through multiple services to\n    get all the information.\n     \nservers:\n  - url: https://api.factset.com/bulk-documents\nsecurity:\n  - FactSetApiKey: []\n  - FactSetOAuth2: []\npaths:\n  /global-filings/v1/list-files:\n    get:\n      tags:\n        - Global Filings API\n      summary: Retrieve filings within FactSet coverage\n      description: Parameters can be used to get the filings\n      parameters:\n        - name: dataset\n          in: query\n          description: \u003e-\n            This parameter filters the results based on the dataset of the\n            filings documents.\n          required: true\n          schema:\n            type: string\n            enum:\n              - edgar\n        - name: startDate\n          in: query\n          description: \u003e-\n            The earliest date the API should fetch for. Dates can be YYYY-MM-DD\n            format\n          required: true\n          schema:\n            type: string\n            format: date\n        - name: endDate\n          in: query\n          description: \u003e-\n            The date after upto eight days of the earliest date given the API\n            should fetch for. Dates can be YYYY-MM-DD format\n          required: true\n          schema:\n            type: string\n            format: date\n      responses:\n        '200':\n          description: Global Filings data items\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/filingsResponse'\n              examples:\n                default200ResponseExample:\n                  $ref: '#/components/examples/200lfdefaultExample'\n        '400':\n          description: Bad request- invalid or missing parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/status'\n              examples:\n                400defaultExample:\n                  $ref: '#/components/examples/400lfdefaultExample'\n  /asynch/streetaccount/v1/request-files:\n    get:\n      tags:\n        - StreetAccount XML API\n      summary: Returns the jobID\n      description: \u003e-\n        Give the startDate and endDate parameters as request parameters in the\n        /request-files endpoint, it returns the jobID. startDate and endDate\n        should be in YYYY-MM-DDTHH:MM:SSZ format\n\n\n        This API only supports adhoc requests to retrieve historical files and\n        does not support real-time       files and if you interested in require\n        real-time push should consider the other three methods         (pushed\n        via SFTP, to QNT account, or your Azure Storage). Per API request able\n        to query till 2 years of data\n      parameters:\n        - name: startDate\n          in: query\n          description: \u003e-\n            Date from which data is required. Should be YYYY-MM-DDTHH:MM:SSZ\n            format\n          required: true\n          schema:\n            type: string\n            format: date\n        - name: endDate\n          in: query\n          description: \u003e-\n            The date until which the data is to be fetched. Should be\n            YYYY-MM-DDTHH:MM:SSZ format\n          required: true\n          schema:\n            type: string\n            format: date\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/requestfilesResponse'\n              examples:\n                default200ResponseExample:\n                  $ref: '#/components/examples/200RequestFilesExample'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreetAccountStatus'\n              examples:\n                default400ResponseExample:\n                  $ref: '#/components/examples/StreetAccountExample'\n  /asynch/streetaccount/v1/check-status:\n    get:\n      tags:\n        - StreetAccount XML API\n      summary: Returns the status and percentDone of the requested jobID\n      description: \u003e-\n        Need to plug-in the jobID got from /request-files into /check-status\n        endpoint\n      parameters:\n        - name: jobID\n          in: query\n          description: \u003e-\n            jobID returned by the request-files endpoint to know the status and\n            percentDone\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/checkstatusResponse'\n              examples:\n                default200ResponseExample:\n                  $ref: '#/components/examples/200CheckStatusExample'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreetAccountStatus'\n              examples:\n                default400ResponseExample:\n                  $ref: '#/components/examples/StreetAccountExample'\n  /asynch/streetaccount/v1/get-files:\n    get:\n      tags:\n        - StreetAccount XML API\n      summary: Returns the SA XML files for the specified daterange\n      description: \u003e-\n        Need to plug-in the jobID got from /request-files into /check-status\n        endpoint\n      parameters:\n        - name: jobID\n          in: query\n          description: \u003e-\n            jobID returned by the request-files endpoint to collect the results\n            of the query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/getfilesResponse'\n              examples:\n                default200ResponseExample:\n                  $ref: '#/components/examples/200GetFilesExample'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreetAccountStatus'\n              examples:\n                default400ResponseExample:\n                  $ref: '#/components/examples/StreetAccountExample'\ncomponents:\n  securitySchemes:\n    FactSetOAuth2:\n      type: oauth2\n      flows:\n        clientCredentials:\n          tokenUrl: https://auth.factset.com/as/token.oauth2\n          scopes: {}\n    FactSetApiKey:\n      type: http\n      scheme: basic\n  schemas:\n    filingsResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/filingsFiles'\n    filingsFiles:\n      type: object\n      properties:\n        filePath:\n          description: path of the filings document.\n          type: string\n        fileUrl:\n          description: Download link for the filings document.\n          type: string\n    requestfilesResponse:\n      type: object\n      properties:\n        jobID:\n          description: Unique id to get the xml files for the requested date\n          type: string\n        status:\n          description: Returns the value as submitted. Tells the request has been submitted\n          type: string\n    checkstatusResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/checkstatus'\n    checkstatus:\n      type: object\n      properties:\n        jobID:\n          description: Unique id to get the xml files for the requested date\n          type: string\n        status:\n          description: \u003e-\n            Returns any of the 2 results Submitted -\u003eRunning-\u003eCompleted and\n            Failed\n          type: string\n        percentDone:\n          description: \u003e-\n            Returns how much percentage of  task is completed for the requested\n            jobID\n          type: integer\n        startDate:\n          description: \u003e-\n            The date from which the data is required in YYYY-MM-DDTHH:MM:SSZ\n            format\n          type: string\n          format: date\n        endDate:\n          description: \u003e-\n            The date until which the data is fetched in YYYY-MM-DDTHH:MM:SSZ\n            format\n          type: string\n          format: date\n        part:\n          description: Returns the part number of the jobID\n          type: integer\n    getfilesResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/getfiles'\n    getfiles:\n      type: object\n      properties:\n        product:\n          description: Defines the name of the product\n          type: string\n        startDate:\n          description: \u003e-\n            The startDate from which the data is required in\n            YYYY-MM-DDTHH:MM:SSZ format\n          type: string\n          format: date\n        endDate:\n          description: \u003e-\n            The endDate until which the data is fetched in YYYY-MM-DDTHH:MM:SSZ\n            format\n          type: string\n          format: date\n        jobID:\n          description: Unique id to get the xml files for the requested date\n          type: string\n        status:\n          description: Defines the status of the request\n          type: string\n        url:\n          description: Link to download the zip file which contains xml files\n          type: string\n        part:\n          description: Returns the part number of the jobID\n          type: integer\n    status:\n      title: Response Status\n      type: object\n      properties:\n        id:\n          type: string\n        error_message:\n          description: Textual error message\n          type: string\n    StreetAccountStatus:\n      title: Response Status\n      type: object\n      properties:\n        id:\n          type: string\n        error_message:\n          description: Textual error message\n          type: string\n  examples:\n    200lfdefaultExample:\n      summary: Sample Response\n      value:\n        - filePath: edgar/2020/20200715.zip\n          fileUrl: \u003e-\n            https://fdss3-news-content-archive-prod-a.s3.amazonaws.com/edgar/2020/20200715.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIA6B6XG7VE24JNFFXZ%2F20220216%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20220216T111407Z\u0026X-Amz-Expires=86400\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLWVhc3QtMSJHMEUCIQDDY%2BKy5yyr6zBc%2FwxQYOIUr%2BNicMgpE2gKoBXk3hc9SgIgFRx7ey2FN9BgEEvfwl%2FGVpPpVvrTyNv0H0sIaC7ckXcqqQIIvP%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARABGgw5NjYyODIxMTY0MjUiDMdI11x8Guqcy7rKtCr9ASKyQmvqLEQyZyTMPH6i1ZsMzUbqCDh2QMlAUz4bhspkuZyB7fMa0D0xqnzMgjYC3A2oN4o0O%2FkklhL6S3A13GC5lUu68leh5ul3150a5A8NwN1YJA0xE2AxCNP1AsU7SgxEPjkKz7%2FvmGMHqWYH0tcx7r%2FNAd3lQFoj6WgjhkL1VJmWWnu2bxmfpAxNnUB5pTgfnw3wS9T47CQNGQJ1hO38kFWcnse82biFm%2Br1FGmDHAJj1eTYqLWjQmCi1U3XnbnTkCTEsOyIGcx9uHAxVRSiDqwkmiFXzRy9Zy%2F240OFyfmP%2BSOgjEqoz6Q%2BtnCyedeJO6ogrKuGt2IxX50w%2FbizkAY6mgGj7tordZZ0GmDYyNicHOKR%2Fll66YgZWl0cW1HXHoduCy21Nv7RsgQTQllK%2BnTeP3tw64enwZzxfzLKE01DV73v5DqXMjSLTiRMZh9AD8CtOpHbW08Hxe2hb8%2Fn3ppU8%2FsWt3u6YiCdKk5dzDPztObwxE7gVLZfoRcMJ7QX2hBE5bVkqIR5HX3a5OwmvCrrEazjwtOeaS%2FngoPq\u0026X-Amz-Signature=ad377632936524e5de4c02066d4412b8fe2f2b8f956f30a1dc164ce9598a05f3\n    400lfdefaultExample:\n      summary: Sample error Response\n      value:\n        id: 06d89fce-b6fa-43b4-a1a7-4f5e8ceeae44\n        error_message: parameterError:endDate must be an int or a date\n    200RequestFilesExample:\n      summary: Sample Response\n      value:\n        jobID: 9ffa3ffb-0ed3-40a0-a98f-8ed7da0a8ad5\n        status: submitted\n    200CheckStatusExample:\n      summary: Sample Response\n      value:\n        jobID: 9ffa3ffb-0ed3-40a0-a98f-8ed7da0a8ad5\n        status: completed\n        percentDone: '100'\n        startDate: '2021-11-21T00:00:00Z'\n        endDate: '2021-11-28T00:00:00Z'\n        part: '1'\n    200GetFilesExample:\n      summary: Sample Response\n      value:\n        data:\n          - product: SA\n            startDate: '2021-11-21T00:00:00Z'\n            endDate: '2021-11-28T00:00:00Z'\n            jobID: 9ffa3ffb-0ed3-40a0-a98f-8ed7da0a8ad5\n            status: completed\n            part: '1'\n            url: \u003e-\n              https://fdss3-unstructured-data-delivery-async-prod.s3.amazonaws.com/content_engineering_user/sa_mustang_history/9ffa3ffb-0ed3-40a0-a98f-8ed7da0a8ad5_1.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIA6B6XG7VEUZD7SMXD%2F20220408%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20220408T133348Z\u0026X-Amz-Expires=86400\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjED4aCXVzLWVhc3QtMSJHMEUCIBzma%2Bsah7KyvIQvfx9lU8Mt1sy5biZKGRhNSZx3ASQKAiEAhRs4TWZzxtvBHPQsBaZdoqdN6kih2BCD4rHwAkRUY0kqqQII1%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARABGgw5NjYyODIxMTY0MjUiDLWCnDoKAGnEkMMEUyr9AXDOWoW6CQeGJE6VyNrHwf1uIP5Ut78v2CG5LottatIyDne6UKaNSs%2F1d9s5k9PCXsu1aMFIGcaePX9U3nmaFxXbsLYlrfejcc5%2FDIywMFWGuXj7T023sjqEb4gE9d%2FVG2bx%2FgMs%2Bdj2ZNU4W3OARWFhAMxy3ZGn8DiPdUwytItzxwIi2UTUZhXlyuGr5sfpEX%2Fu8V3ZQRJN44QEMDZg4tsfshu%2F%2BSC8HmisC22Nb9gOjCj6LarLUYZrAfd8Lbfskm1Z4WDm9oKX4zR3NFrMu3VETleuyU%2FDTx66rae%2FZvELaz3%2FBnYcajNniB2iYJK6pu3NOqeoUP%2FdiHqAa1cwt%2FPAkgY6mgEZosJatTVk8gVBZDmWeT9xVxbE6jEVB49S5ujzbk9WG0pCishiaheTZmiKZJ%2FWAxJCq%2BzqrvelVL2QSAreaeKDw4qclCqXd5Fq5Fkt3CKNr%2FqfGUsf7mk7y%2FsK0V532dew%2FM3rsx32TC%2FyPq6n1jLS8Vshn4NbcKeYKI22iI14F36XlfDFZQiP5iTbCzh%2BfbJLLCmeuClsJznx\u0026X-Amz-Signature=e9e0f814b339f6fb40266f5f30c18face40ec648b1e650e810c16973c01ce832\n    StreetAccountExample:\n      summary: Sample error Response\n      value:\n        id: 0ad3e09c-d8a2-4223-a1a3-0244d1247351\n        error_message: parameterError:Missing required parameter jobID\n",
			"canonicalURL": "/github.com/factset/enterprise-sdk@dcf75a02daedc726c313912a349d2863114bc92c/-/blob/specs/DocumentsDistributorDocuments.v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/factset/enterprise-sdk/blob/dcf75a02daedc726c313912a349d2863114bc92c/specs/DocumentsDistributorDocuments.v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/asynch/streetaccount/v1/check-status\": get: security: security \"FactSetOAuth2\" (index 1): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}