{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SecureIdentityAlliance/osia"
		},
		"file": {
			"name": "enrollment.yaml",
			"size": 0,
			"path": "src/doc/yaml/enrollment.yaml",
			"byteSize": 27237,
			"content": "\r\n# (c) Secure Identity Alliance\r\n\r\nopenapi: 3.0.0\r\ninfo:\r\n  description: |\r\n    The OSIA Enrollment Interface\r\n\r\n    Change log:\r\n    \r\n    - 1.2.1:\r\n      - Add missing values in BiometricSubType\r\n    - 1.2.0:\r\n      - Remove array for enrollmentFlags and requestData\r\n      - Change date to date-time\r\n      - change mimetype to mimeType (upper case)\r\n      - Add template, templateRef, templateFormat to biometricData\r\n      - Add quality, qualityFormat, algorithm, vendor fields to biometricData\r\n      - Mark some fields (ID, etc.) as readOnly\r\n      - Add FORM in possible document type\r\n    - 1.1.0:\r\n      - Add error structure on 400 errors\r\n      - Add additional documentType and open it for extension\r\n      - Force additionalProperties to false when extension is not allowed\r\n      - Rename operationId for create/read buffer\r\n      - Add 404 error when missing\r\n      - Add Digest header in create/read buffer\r\n      - Support multiple content types for create/read buffer\r\n      - Remove enrollmentId from the response of createEnrollment\r\n      - Make the enrollment status optional in create \u0026 update operations\r\n      - Add a contextualData entity to match what exists in population registry\r\n      - Add pagination for findEnrollments\r\n      - Add fields on BiometricData: instance, metadata, comment, missing\r\n    - 1.0.0: Initial version\r\n\r\n  version: 1.2.1\r\n  title: OSIA Enrollment Interface\r\n  license:\r\n    name: SIA\r\n    url: \"https://raw.githubusercontent.com/SecureIdentityAlliance/osia/master/LICENSE\"\r\ntags:\r\n  - name: Enrollment\r\n  - name: Buffer\r\nservers:\r\n  - url: https://enrollment.com/\r\npaths:\r\n\r\n  /v1/enrollments/{enrollmentId}:\r\n    post:\r\n      tags:\r\n        - Enrollment\r\n      summary: Create one enrollment\r\n      operationId: createEnrollment\r\n      security:\r\n        - BearerAuth: [enroll.write]\r\n      parameters:\r\n        - name: enrollmentId\r\n          in: path\r\n          description: the id of the enrollment\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: finalize\r\n          in: query\r\n          description: Flag to indicate that data was collected (default is false).\r\n          required: false\r\n          schema:\r\n            type: boolean\r\n        - name: transactionId\r\n          in: query\r\n          description: The id of the transaction\r\n          required: true\r\n          schema:\r\n            type: string\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Enrollment'\r\n      responses:\r\n        '204':\r\n          description: Operation successful\r\n        '400':\r\n          description: Bad request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '403':\r\n          description: Operation not allowed\r\n        '404':\r\n          description: Unknown record\r\n        '500':\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    get:\r\n      tags:\r\n        - Enrollment\r\n      summary: Read one enrollment\r\n      operationId: readEnrollment\r\n      security:\r\n        - BearerAuth: [enroll.read]\r\n      parameters:\r\n        - name: enrollmentId\r\n          in: path\r\n          description: the id of the enrollment\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: transactionId\r\n          in: query\r\n          description: The id of the transaction\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: attributes\r\n          in: query\r\n          description: The (optional) set of required attributes to retrieve. If not present all attributes will be returned.\r\n          required: false\r\n          schema:\r\n            type: array\r\n            items:\r\n              type: string\r\n            example:\r\n              - surname\r\n              - familyname\r\n      responses:\r\n        '200':\r\n          description: Read successful\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Enrollment'\r\n\r\n        '400':\r\n          description: Bad request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '403':\r\n          description: Read not allowed\r\n        '404':\r\n          description: Unknown record\r\n        '500':\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    put:\r\n      tags:\r\n        - Enrollment\r\n      summary: Update one enrollment\r\n      operationId: updateEnrollment\r\n      security:\r\n        - BearerAuth: [enroll.write]\r\n      parameters:\r\n        - name: enrollmentId\r\n          in: path\r\n          description: the id of the enrollment\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: finalize\r\n          in: query\r\n          description: Flag to indicate that data was collected (default is false).\r\n          required: false\r\n          schema:\r\n            type: boolean\r\n        - name: transactionId\r\n          in: query\r\n          description: The id of the transaction\r\n          required: true\r\n          schema:\r\n            type: string\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Enrollment'\r\n      responses:\r\n        '204':\r\n          description: Update successful\r\n        '400':\r\n          description: Bad request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '403':\r\n          description: Update not allowed\r\n        '404':\r\n          description: Unknown record\r\n        '500':\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n    patch:\r\n      tags:\r\n        - Enrollment\r\n      summary: Update partially one enrollment\r\n      description: Update partially an enrollment. Payload content is a partial enrollment object compliant with RFC7396.\r\n      operationId: partialUpdateEnrollment\r\n      security:\r\n        - BearerAuth: [enroll.write]\r\n      parameters:\r\n        - name: enrollmentId\r\n          in: path\r\n          description: the id of the enrollment\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: finalize\r\n          in: query\r\n          description: Flag to indicate that data was collected (default is false).\r\n          required: false\r\n          schema:\r\n            type: boolean\r\n        - name: transactionId\r\n          in: query\r\n          description: The id of the transaction\r\n          required: true\r\n          schema:\r\n            type: string\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Enrollment'\r\n      responses:\r\n        '204':\r\n          description: Update successful\r\n        '400':\r\n          description: Bad request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '403':\r\n          description: Update not allowed\r\n        '404':\r\n          description: Unknown record\r\n        '500':\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\n    delete:\r\n      tags:\r\n        - Enrollment\r\n      summary: Delete one enrollment\r\n      operationId: deleteEnrollment\r\n      security:\r\n        - BearerAuth: [enroll.write]\r\n      parameters:\r\n        - name: enrollmentId\r\n          in: path\r\n          description: the id of the enrollment\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: transactionId\r\n          in: query\r\n          description: The id of the transaction\r\n          required: true\r\n          schema:\r\n            type: string\r\n      responses:\r\n        '204':\r\n          description: Delete successful\r\n        '400':\r\n          description: Bad request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '403':\r\n          description: Operation not allowed\r\n        '404':\r\n          description: Unknown record\r\n        '500':\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n                \r\n\r\n  /v1/enrollments/{enrollmentId}/finalize:\r\n    put:\r\n      tags:\r\n        - Enrollment\r\n      summary: Finalize one enrollment\r\n      operationId: finalizeEnrollment\r\n      security:\r\n        - BearerAuth: [enroll.write]\r\n      parameters:\r\n        - name: enrollmentId\r\n          in: path\r\n          description: the id of the enrollment\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: transactionId\r\n          in: query\r\n          description: The id of the transaction\r\n          required: true\r\n          schema:\r\n            type: string\r\n      responses:\r\n        '204':\r\n          description: Update successful\r\n        '400':\r\n          description: Bad request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '403':\r\n          description: Update not allowed\r\n        '404':\r\n          description: Unknown record\r\n        '500':\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n                \r\n  /v1/enrollments:\r\n    post:\r\n      tags:\r\n        - Enrollment\r\n      summary: Retrieve a list of enrollments which match passed in search criteria\r\n      operationId: findEnrollments\r\n      security:\r\n        - BearerAuth: [enroll.read]\r\n      parameters:\r\n        - name: transactionId\r\n          in: query\r\n          description: The id of the transaction\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: offset\r\n          in: query\r\n          description: The offset of the query (first item of the response)\r\n          required: false\r\n          schema:\r\n            type: integer\r\n            default: 0\r\n        - name: limit\r\n          in: query\r\n          description: The maximum number of items to return\r\n          required: false\r\n          schema:\r\n            type: integer\r\n            default: 100\r\n      requestBody:\r\n        description: A set of expressions on attributes of the person\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Expressions'\r\n            example:\r\n              - attributeName: firstName\r\n                operator: \"=\"\r\n                value: John\r\n              - attributeName: dateOfBirth\r\n                operator: \"\u003c\"\r\n                value: \"1990-12-31\"\r\n      responses:\r\n        '200':\r\n          description: Query successful\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Enrollment'\r\n\r\n        '400':\r\n          description: Bad request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '403':\r\n          description: Query not allowed\r\n        '500':\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n                \r\n  /v1/enrollments/{enrollmentId}/buffer:\r\n    post:\r\n      tags:\r\n        - Buffer\r\n      summary: Create a buffer\r\n      description: This service is used to send separately the buffers of the images\r\n      operationId: createBuffer\r\n      security:\r\n        - BearerAuth: [enroll.buf.write]\r\n      parameters:\r\n        - name: enrollmentId\r\n          in: path\r\n          description: the id of the enrollment\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: transactionId\r\n          in: query\r\n          description: The id of the transaction\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: Digest\r\n          in: header\r\n          description: the buffer digest, as defined per RFC 3230.\r\n          schema:\r\n            type: string\r\n          example: \"SHA=thvDyvhfIqlvFe+A9MYgxAfm1q5=\"\r\n          required: false\r\n      requestBody:\r\n        description: The image of the request\r\n        required: true\r\n        content:\r\n          application/*:\r\n            schema:\r\n              type: string\r\n              format: binary\r\n              example: ABCDEFG...\r\n          image/*:\r\n            schema:\r\n              type: string\r\n              format: binary\r\n              example: ABCDEFG...\r\n      responses:\r\n        '201':\r\n          description: Operation successful\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                required:\r\n                  - bufferId\r\n                properties:\r\n                  bufferId:\r\n                    type: string\r\n                additionalProperties: false\r\n        '400':\r\n          description: Bad request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '403':\r\n          description: Operation not allowed\r\n        '404':\r\n          description: Unknown record\r\n        '500':\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n            \r\n  /v1/enrollments/{enrollmentId}/buffer/{bufferId}:\r\n    get:\r\n      tags:\r\n        - Buffer\r\n      summary: Read a buffer\r\n      description: |\r\n        This service is used to get the buffer of the images.\r\n        The content type of the response is the content type used when the buffer was created.\r\n      operationId: readBuffer\r\n      security:\r\n        - BearerAuth: [enroll.buf.read]\r\n      parameters:\r\n        - name: enrollmentId\r\n          in: path\r\n          description: the id of the enrollment\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: bufferId\r\n          in: path\r\n          description: the id of the buffer\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: transactionId\r\n          in: query\r\n          description: The id of the transaction\r\n          required: true\r\n          schema:\r\n            type: string\r\n      responses:\r\n        '200':\r\n          description: Read successful\r\n          headers:\r\n            Digest:\r\n              description: the buffer digest, as defined per RFC 3230.\r\n              schema:\r\n                type: string\r\n              example: \"SHA=thvDyvhfIqlvFe+A9MYgxAfm1q5=\"\r\n              required: false\r\n          content:\r\n            application/*:\r\n              schema:\r\n                description: The image\r\n                type: string\r\n                format: binary\r\n                example: ABCDEFG...\r\n            image/*:\r\n              schema:\r\n                description: The image\r\n                type: string\r\n                format: binary\r\n                example: ABCDEFG...\r\n        '400':\r\n          description: Bad request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '403':\r\n          description: Update not allowed\r\n        '404':\r\n          description: Unknown record\r\n        '500':\r\n          description: Unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n\r\ncomponents:\r\n  securitySchemes:\r\n    BearerAuth:\r\n      type: http\r\n      scheme: bearer\r\n      bearerFormat: JWT\r\n  schemas:\r\n    Error:\r\n      type: object\r\n      required:\r\n        - code\r\n        - message\r\n      properties:\r\n        code:\r\n          description: Error code\r\n          type: integer\r\n          format: int32\r\n        message:\r\n          description: Error message\r\n          type: string\r\n      additionalProperties: false\r\n    Enrollment:\r\n      type: object\r\n      required:\r\n        - enrollmentId\r\n        - status\r\n      properties:\r\n        enrollmentId:\r\n          type: string\r\n          readOnly: true\r\n        status:\r\n          type: string\r\n          enum: [FINALIZED, IN_PROGRESS]\r\n          readOnly: true\r\n        enrollmentType:\r\n          type: string\r\n          description: \"Type of the enrollment (example: citizen, resident, etc.)\"\r\n        enrollmentFlags:\r\n          $ref: '#/components/schemas/EnrollmentFlags'\r\n        requestData:\r\n          $ref: '#/components/schemas/RequestData'\r\n        contextualData:\r\n          $ref: '#/components/schemas/ContextualData'\r\n        biographicData:\r\n          $ref: '#/components/schemas/BiographicData'\r\n        biometricData:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/BiometricData'\r\n        documentData:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/DocumentData'\r\n      additionalProperties: false\r\n    RequestData:\r\n      type: object\r\n      additionalProperties: true\r\n      description: The data describing the request associated to the enrollment (i.e. why the enrollment is done). Can be extended.\r\n      example:\r\n        priority: 1\r\n        requestType: \"FIRST_ISSUANCE\"\r\n        deliveryAddress:\r\n          address1: 11 Rue des Rosiers\r\n          city: Libourne\r\n          postalCode: \"33500\"\r\n          country: France\r\n    EnrollmentFlags:\r\n      type: object\r\n      additionalProperties: true\r\n      description: The enrollment custom flags (i.e. the properties of the enrollment process). Can be extended.\r\n      example:\r\n        timeout: 3600\r\n        other: \"other\"\r\n    ContextualData:\r\n      type: object\r\n      additionalProperties: true\r\n      example:\r\n        enrollmentDate: \"2019-01-11\"\r\n    BiographicData:\r\n      type: object\r\n      description: The set of biographic data.\r\n      additionalProperties: true\r\n      example:\r\n        firstName: John\r\n        lastName: Doo\r\n        dateOfBirth: \"1985-11-30\"\r\n        gender: M\r\n        nationality: FRA\r\n    BiometricData:\r\n      type: object\r\n      required:\r\n        - biometricType\r\n      properties:\r\n        biometricType:\r\n          $ref: '#/components/schemas/BiometricType'\r\n        biometricSubType:\r\n          $ref: '#/components/schemas/BiometricSubType'\r\n        instance:\r\n          type: string\r\n          description: Used to separate two distincts biometric items of the same type and subtype\r\n        image:\r\n          type: string\r\n          format: byte\r\n          description: Base64-encoded image\r\n        imageRef:\r\n          type: string\r\n          format: uri\r\n          description: URI to an image\r\n          example: \"http://imageserver.com/image?id=00003\"\r\n        captureDate:\r\n          type: string\r\n          format: date-time\r\n          example: \"2019-05-21T12:00:00Z\"\r\n        captureDevice:\r\n          type: string\r\n          description: A string identifying the device used to capture the biometric\r\n        impressionType:\r\n          $ref: '#/components/schemas/ImpressionType'\r\n        width:\r\n          type: integer\r\n          description: the width of the image\r\n        height:\r\n          type: integer\r\n          description: the height of the image\r\n        bitdepth:\r\n          type: integer\r\n        mimeType:\r\n          type: string\r\n          description: the nature and format of the image. The mime type definitions should be in compliance with RFC 6838.\r\n        resolution:\r\n          type: integer\r\n          description: the image resolution (in DPI)\r\n        compression:\r\n          $ref: '#/components/schemas/CompressionType'\r\n        missing:\r\n          description: Optional properties indicating if a part of the biometric data is missing\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/MissingType'\r\n        metadata:\r\n          type: string\r\n          description: An optional string used to convey information vendor-specific\r\n        comment:\r\n          type: string\r\n          description: A comment about the biometric data\r\n        template:\r\n          type: string\r\n          format: byte\r\n          description: Base64-encoded template\r\n        templateRef:\r\n          type: string\r\n          format: uri\r\n          description: URI to the template when it is managed in a dedicated data server\r\n          example: \"http://dataserver.com/template?id=00014\"\r\n        templateFormat:\r\n          $ref: '#/components/schemas/TemplateFormat'\r\n        quality:\r\n          type: integer\r\n          format: int64\r\n          description: Quality, as a number, of the biometric\r\n        qualityFormat:\r\n          $ref: '#/components/schemas/QualityFormat'\r\n        algorithm:\r\n          type: string\r\n        vendor:\r\n          type: string\r\n      additionalProperties: false\r\n    TemplateFormat:\r\n      type: string\r\n      description: |\r\n        Format of the template.\r\n        One of ISO_19794_2, ISO_19794_2_NS, ISO_19794_2_CS, ISO_19794_2_2011, ANSI_378_2009 or ANSI_378.\r\n        Can be extended to include additional proprietary template format\r\n    QualityFormat:\r\n      type: string\r\n      description: |\r\n        Format of the quality.\r\n        One of ISO_19794, NFIQ, or NFIQ2.\r\n        Can be extended to include additional proprietary quality format\r\n    MissingType:\r\n      type: object\r\n      properties:\r\n        biometricSubType:\r\n          $ref: '#/components/schemas/BiometricSubType'\r\n        presence:\r\n          type: string\r\n          enum: [BANDAGED, AMPUTATED, DAMAGED]\r\n      additionalProperties: false\r\n    DocumentPart:\r\n      type: object\r\n      properties:\r\n        pages:\r\n          type: array\r\n          description: The pages included in this part. Can be a single page number, or a list.\r\n          minItems: 1\r\n          items:\r\n            type: integer\r\n        data:\r\n          type: string\r\n          format: byte\r\n          description: Base64-encoded data of the document\r\n        dataRef:\r\n          type: string\r\n          format: uri\r\n          description: URI to the data\r\n          example: \"http://server.com/buffer?id=00003\"\r\n        width:\r\n          type: integer\r\n          description: the width of the image in pixels\r\n        height:\r\n          type: integer\r\n          description: the height of the image in pixels\r\n        mimeType:\r\n          type: string\r\n          description: the nature and format of the document. The mime type definitions should be in compliance with RFC 6838.\r\n        captureDate:\r\n          type: string\r\n          format: date-time\r\n          example: \"2019-05-21T12:00:00Z\"\r\n        captureDevice:\r\n          type: string\r\n          description: A string identifying the device used to capture the document part\r\n      additionalProperties: false\r\n    DocumentData:\r\n      type: object\r\n      required:\r\n        - documentType\r\n        - parts\r\n      properties:\r\n        documentType:\r\n          $ref: '#/components/schemas/DocumentType'\r\n        documentTypeOther:\r\n          type: string\r\n          description: Details about the type of document when OTHER is used.\r\n        instance:\r\n          type: string\r\n          description: \"Used to separate two distincts documents of the same type (ex: two passports)\"\r\n        parts:\r\n          type: array\r\n          minItems: 1\r\n          items:\r\n            $ref: '#/components/schemas/DocumentPart'\r\n      additionalProperties: false\r\n    DocumentType:\r\n      type: string\r\n      description: Type of document.\r\n      enum: [ID_CARD, PASSPORT, INVOICE, BIRTH_CERTIFICATE, FORM, OTHER]\r\n      example: FORM\r\n    Expression:\r\n      type: object\r\n      required:\r\n        - attributeName\r\n        - operator\r\n        - value\r\n      properties:\r\n        attributeName:\r\n          type: string\r\n        operator:\r\n          type: string\r\n          enum: ['\u003c', '\u003e', '=', '\u003e=', '\u003c=', '!=']\r\n        value:\r\n          oneOf:\r\n          - type: string\r\n          - type: integer\r\n          - type: number\r\n          - type: boolean\r\n      additionalProperties: false\r\n    Expressions:\r\n      type: array\r\n      items:\r\n        $ref: '#/components/schemas/Expression'\r\n    CompressionType:\r\n      type: string\r\n      enum: [NONE, WSQ, JPEG, JPEG2000, PNG]\r\n      example: WSQ\r\n    ImpressionType:\r\n      type: string\r\n      enum:\r\n        - LIVE_SCAN_PLAIN\r\n        - LIVE_SCAN_ROLLED\r\n        - NONLIVE_SCAN_PLAIN\r\n        - NONLIVE_SCAN_ROLLED\r\n        - LATENT_IMPRESSION\r\n        - LATENT_TRACING\r\n        - LATENT_PHOTO\r\n        - LATENT_LIFT\r\n        - LIVE_SCAN_SWIPE\r\n        - LIVE_SCAN_VERTICAL_ROLL\r\n        - LIVE_SCAN_PALM\r\n        - NONLIVE_SCAN_PALM\r\n        - LATENT_PALM_IMPRESSION\r\n        - LATENT_PALM_TRACING\r\n        - LATENT_PALM_PHOTO\r\n        - LATENT_PALM_LIFT\r\n        - LIVE_SCAN_OPTICAL_CONTACTLESS_PLAIN\r\n        - OTHER\r\n        - UNKNOWN\r\n    BiometricType:\r\n      type: string\r\n      enum:\r\n        - FACE\r\n        - FINGER\r\n        - IRIS\r\n        - SIGNATURE\r\n        - UNKNOWN\r\n      example: FINGER\r\n    BiometricSubType:\r\n      type: string\r\n      enum:\r\n        - UNKNOWN\r\n        - RIGHT_THUMB\r\n        - RIGHT_INDEX\r\n        - RIGHT_MIDDLE\r\n        - RIGHT_RING\r\n        - RIGHT_LITTLE\r\n        - LEFT_THUMB\r\n        - LEFT_INDEX\r\n        - LEFT_MIDDLE\r\n        - LEFT_RING\r\n        - LEFT_LITTLE\r\n        - PLAIN_RIGHT_FOUR_FINGERS\r\n        - PLAIN_LEFT_FOUR_FINGERS\r\n        - PLAIN_THUMBS\r\n        \r\n        - UNKNOWN_PALM\r\n        - RIGHT_FULL_PALM\r\n        - RIGHT_WRITERS_PALM\r\n        - LEFT_FULL_PALM\r\n        - LEFT_WRITERS_PALM\r\n        - RIGHT_LOWER_PALM\r\n        - RIGHT_UPPER_PALM\r\n        - LEFT_LOWER_PALM\r\n        - LEFT_UPPER_PALM\r\n        - RIGHT_OTHER\r\n        - LEFT_OTHER\r\n        - RIGHT_INTERDIGITAL\r\n        - RIGHT_THENAR\r\n        - RIGHT_HYPOTHENAR\r\n        - LEFT_INTERDIGITAL\r\n        - LEFT_THENAR\r\n        - LEFT_HYPOTHENAR\r\n        \r\n        - RIGHT_INDEX_AND_MIDDLE\r\n        - RIGHT_MIDDLE_AND_RING\r\n        - RIGHT_RING_AND_LITTLE\r\n        - LEFT_INDEX_AND_MIDDLE\r\n        - LEFT_MIDDLE_AND_RING\r\n        - LEFT_RING_AND_LITTLE\r\n        - RIGHT_INDEX_AND_LEFT_INDEX\r\n        - RIGHT_INDEX_AND_MIDDLE_AND_RING\r\n        - RIGHT_MIDDLE_AND_RING_AND_LITTLE\r\n        - LEFT_INDEX_AND_MIDDLE_AND_RING\r\n        - LEFT_MIDDLE_AND_RING_AND_LITTLE\r\n        \r\n        - EYE_UNDEF\r\n        - EYE_RIGHT\r\n        - EYE_LEFT\r\n        - EYE_BOTH\r\n        \r\n        - PORTRAIT\r\n        - LEFT_PROFILE\r\n        - RIGHT_PROFILE\r\n      example: RIGHT_INDEX\r\n\r\n",
			"canonicalURL": "/github.com/SecureIdentityAlliance/osia@3985bcb9999ca644b07865dd7e1424cd0e47946e/-/blob/src/doc/yaml/enrollment.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/SecureIdentityAlliance/osia/blob/3985bcb9999ca644b07865dd7e1424cd0e47946e/src/doc/yaml/enrollment.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1/enrollments\": post: requestBody: contents: application/json: generate schema: item: field value: oneOf: oneOf ExpressionValue: variant String: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"discriminator inference",
		"masked request content type"
	]
}