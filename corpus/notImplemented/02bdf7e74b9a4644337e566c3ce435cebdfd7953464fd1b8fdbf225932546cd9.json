{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/zowe/api-layer"
		},
		"file": {
			"name": "api-doc.json",
			"size": 0,
			"path": "gateway-service/src/test/resources/api-doc.json",
			"byteSize": 11999,
			"content": "{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n        \"description\": \"Service description\",\n        \"version\": \"1.0.0\",\n        \"title\": \"Service title\"\n    },\n    \"tags\": [\n        {\n            \"name\": \"Security\",\n            \"description\": \"Mainframe authentication and authorization operations\"\n        }\n    ],\n    \"paths\": {\n        \"/login\": {\n            \"post\": {\n                \"tags\": [\n                    \"Security\"\n                ],\n                \"summary\": \"Authenticate mainframe user credentials and return authentication token.\",\n                \"description\": \"Use the `/login` API to authenticate mainframe user credentials and return authentication token. It is also possible to authenticate using the x509 client certificate authentication, if enabled.\\n\\n**Request:**\\n\\nThe login request requires the user credentials in one of the following formats:\\n  * Basic access authentication\\n  * JSON body, which provides an object with the user credentials\\n  * HTTP header containing the client certificate\\n\\n**Response:**\\n\\nThe response is an empty body and a token in a secure HttpOnly cookie named `apimlAuthenticationToken`.\\n\",\n                \"operationId\": \"loginUsingPOST\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/LoginRequest\"\n                            }\n                        }\n                    },\n                    \"description\": \"Specifies the user credentials to be authenticated.\"\n                },\n                \"security\": [\n                    {\n                        \"LoginBasicAuth\": []\n                    }\n                ],\n                \"responses\": {\n                    \"204\": {\n                        \"description\": \"Authenticated\",\n                        \"headers\": {\n                            \"Set-Cookie\": {\n                                \"description\": \"Cookie named apimlAuthenticationToken contains authentication\\ntoken.\",\n                                \"schema\": {\n                                    \"type\": \"string\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request\"\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"404\": {\n                        \"description\": \"Not Found\"\n                    },\n                    \"405\": {\n                        \"description\": \"Method Not Allowed\"\n                    },\n                    \"500\": {\n                        \"description\": \"Internal error\"\n                    }\n                }\n            }\n        },\n        \"/query\": {\n            \"get\": {\n                \"tags\": [\n                    \"Security\"\n                ],\n                \"summary\": \"Validate the authentication token.\",\n                \"description\": \"Use the `/query` API to validate the token and retrieve the information associated with the token.\\n\\n **HTTP Headers:**\\n\\nThe query request requires the token in one of the following formats:\\n  * Cookie named `apimlAuthenticationToken`.\\n  * Bearer authenticatio\\n  \\n*Header example:* Authorization: Bearer *token*\\n\\n**Request payload:**\\n\\nThe request body is empty.\\n\\n**Response Payload:**\\n\\nThe response is a JSON object, which contains information associated with the token.\\n\",\n                \"operationId\": \"validateUsingGET\",\n                \"security\": [\n                    {\n                        \"CookieAuth\": []\n                    },\n                    {\n                        \"Bearer\": []\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Authentication\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\"\n                    },\n                    \"404\": {\n                        \"description\": \"Not Found\"\n                    },\n                    \"405\": {\n                        \"description\": \"Method Not Allowed\"\n                    },\n                    \"500\": {\n                        \"description\": \"Internal error\"\n                    }\n                }\n            }\n        },\n        \"/ticket\": {\n            \"post\": {\n                \"tags\": [\n                    \"Security\"\n                ],\n                \"summary\": \"Generate a passticket for the user associated with a token.\",\n                \"description\": \"Use the `/ticket` API to request a passticket for the user associated with a token.\\n\\nThis endpoint is protect by a client certificate.\\n\\n**HTTP Headers:**\\n\\nThe ticket request requires the token in one of the following formats:  \\n  * Cookie named `apimlAuthenticationToken`.\\n  * Bearer authentication\\n  \\n*Header example:* Authorization: Bearer *token*\\n\\n**Request payload:**\\n\\nThe request takes one parameter, the name of the application for which the passticket should be generated. This parameter must be supplied.\\n\\n**Response Payload:**\\n\\nThe response is a JSON object, which contains information associated with the ticket.\\n\",\n                \"operationId\": \"GenerateTicketUsingPOST\",\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/TicketRequest\"\n                            }\n                        }\n                    },\n                    \"description\": \"Specifies the name of the application for which the passticket should be generated.\"\n                },\n                \"security\": [\n                    {\n                        \"CookieAuth\": []\n                    },\n                    {\n                        \"Bearer\": []\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/TicketResponse\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Incorrect applicationName parameter. The parameter is not provided, is invalid or not defined to security.\"\n                    },\n                    \"401\": {\n                        \"description\": \"Zowe token is not provided, is invalid or is expired.\"\n                    },\n                    \"403\": {\n                        \"description\": \"A client certificate is not provided or is expired.\"\n                    },\n                    \"404\": {\n                        \"description\": \"Not Found\"\n                    },\n                    \"405\": {\n                        \"description\": \"Method Not Allowed\"\n                    },\n                    \"500\": {\n                        \"description\": \"The external security manager failed to generate a PassTicket for the user and application specified.\"\n                    }\n                }\n            }\n        }\n    },\n    \"servers\": [\n        {\n            \"url\": \"/gateway/api/v1/auth\"\n        }\n    ],\n    \"components\": {\n        \"securitySchemes\": {\n            \"LoginBasicAuth\": {\n                \"type\": \"http\",\n                \"scheme\": \"basic\"\n            },\n            \"Bearer\": {\n                \"type\": \"apiKey\",\n                \"name\": \"Authorization\",\n                \"in\": \"header\"\n            },\n            \"CookieAuth\": {\n                \"type\": \"apiKey\",\n                \"name\": \"apimlAuthenticationToken\",\n                \"in\": \"cookie\"\n            }\n        },\n        \"schemas\": {\n            \"LoginRequest\": {\n                \"type\": \"object\",\n                \"title\": \"Credentials\",\n                \"properties\": {\n                    \"username\": {\n                        \"type\": \"string\"\n                    },\n                    \"password\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"required\": [\n                    \"username\",\n                    \"password\"\n                ],\n                \"example\": {\n                    \"username\": \"John\",\n                    \"password\": \"qwerty\"\n                }\n            },\n            \"Authentication\": {\n                \"type\": \"object\",\n                \"title\": \"Authentication\",\n                \"properties\": {\n                    \"userId\": {\n                        \"type\": \"string\",\n                        \"description\": \"Specifies the identity of the logged-in user.\"\n                    },\n                    \"domain\": {\n                        \"type\": \"string\",\n                        \"description\": \"Specifies the name of the security domain where the user has been\\nlogged-in.\"\n                    },\n                    \"creation\": {\n                        \"type\": \"string\",\n                        \"format\": \"date-time\",\n                        \"description\": \"Specifies the UNIX timestamp of the login time, in UTC.\"\n                    },\n                    \"expiration\": {\n                        \"type\": \"string\",\n                        \"format\": \"date-time\",\n                        \"description\": \"Specifies the UNIX timestamp of the token expiration time, in UTC.\"\n                    }\n                },\n                \"example\": {\n                    \"userId\": \"John\",\n                    \"domain\": \"SAFRealm\",\n                    \"creation\": \"2019-05-13T12:47:04.000+0000\",\n                    \"expiration\": \"2019-05-14T12:47:04.000+0000\"\n                }\n            },\n            \"TicketRequest\": {\n                \"type\": \"object\",\n                \"title\": \"Application name\",\n                \"properties\": {\n                    \"applicationName\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"required\": [\n                    \"applicationName\"\n                ],\n                \"example\": {\n                    \"applicationName\": \"ZOWEAPPL\"\n                }\n            },\n            \"TicketResponse\": {\n                \"type\": \"object\",\n                \"title\": \"PassTicket\",\n                \"properties\": {\n                    \"token\": {\n                        \"type\": \"string\",\n                        \"description\": \"Specifies the token that was supplied in the header.\"\n                    },\n                    \"userId\": {\n                        \"type\": \"string\",\n                        \"description\": \"Specifies the user associated with the token.\"\n                    },\n                    \"applicationName\": {\n                        \"type\": \"string\",\n                        \"description\": \"Specifies the application name associated with the passticket. Note that the Gateway user must be authorized to generate passtickets for this application name.\"\n                    },\n                    \"ticket\": {\n                        \"type\": \"string\",\n                        \"description\": \"Specifies a passticket for the pair, userId and applicationName.\"\n                    }\n                },\n                \"example\": {\n                    \"token\": \"eyJhbGciOiJSUzI1N\",\n                    \"userId\": \"John\",\n                    \"applicationName\": \"ZOWEAPPL\",\n                    \"ticket\": \"LZTKEEDQ\"\n                }\n            }\n        }\n    }\n}\n",
			"canonicalURL": "/github.com/zowe/api-layer@e52efa3ab9a2baa70d2977f5ddbecfd753532b2c/-/blob/gateway-service/src/test/resources/api-doc.json",
			"externalURLs": [
				{
					"url": "https://github.com/zowe/api-layer/blob/e52efa3ab9a2baa70d2977f5ddbecfd753532b2c/gateway-service/src/test/resources/api-doc.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/query\": get: security: security \"CookieAuth\" (index 0): cookie security not implemented",
	"NotImplemented": [
		"cookie security"
	]
}