{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/linksmart/thing-directory"
		},
		"file": {
			"name": "openapi-spec.yml",
			"size": 0,
			"path": "apidoc/openapi-spec.yml",
			"byteSize": 27743,
			"content": "openapi: 3.0.0\n\n#servers:\n#  - url: http://localhost:8081\n\ninfo:\n  version: \"1.0.0-beta.22\"\n  title: LinkSmart Thing Directory\n  description: API documetnation of the [LinkSmart Thing Directory](https://github.com/linksmart/thing-directory)\n  license:\n    name: Apache 2.0\n    url: https://github.com/linksmart/thing-directory/blob/master/LICENSE\n\ntags:\n  - name: things\n    description: Registration API\n  - name: search\n    description: Search API\n  - name: events\n    description: Notification API\n  - name: validation\n    description: Validation API\n  - name: td\n    description: Registration API (deprecated)\n\npaths:\n  /td:\n    get:\n      deprecated: true\n      tags:\n        - td\n      summary: Retrieves paginated list of Thing Descriptions\n      description: The query languages, described [here](https://github.com/linksmart/thing-directory/wiki/Query-Language), can be used to filter results and fetch parts of Thing Descriptions.\n      parameters:\n        - $ref: '#/components/parameters/ParamPage'\n        - $ref: '#/components/parameters/ParamPerPage'\n        - name: jsonpath\n          in: query\n          description: JSONPath expression for fetching specific items. E.g. `$[?(@.title=='Kitchen Lamp')].properties`\n          required: false\n          deprecated: true\n          schema:\n            type: string\n          # example: $[?(@.title=='Kitchen Lamp')].properties\n        - name: xpath\n          in: query\n          description: xPath 3.0 expression for fetching specific items. E.g. `//*[title='Kitchen Lamp']/properties`\n          required: false\n          deprecated: true\n          schema:\n            type: string\n          # example: //*[title='Kitchen Lamp']/properties\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/ThingDescriptionPage'\n              examples:\n                ThingDescriptionList:\n                  $ref: '#/components/examples/ThingDescriptionList'\n        '400':\n          $ref: '#/components/responses/RespBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n    post:\n      deprecated: true\n      tags:\n        - td\n      summary: Creates new Thing Description with system-generated ID\n      description: |\n        This is to create a TD and receive a unique system-generated `id` in response.\u003cbr\u003e\n        The server rejects the request if there is an `id` in the body.\u003cbr\u003e\n        For creating a TD with user-defined `id`, use the `PUT` method.\n      responses:\n        '201':\n          description: Created successfully\n          headers:\n            Location:\n              description: Path to the newly created Thing Description\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/RespValidationBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n      requestBody:\n        content:\n          application/ld+json:\n            schema:\n              type: object\n            examples:\n              ThingDescription:\n                $ref: '#/components/examples/ThingDescriptionWithoutID'\n\n        description: Thing Description to be created\n        required: true\n  /td/{id}:\n    put:\n      deprecated: true\n      tags:\n        - td\n      summary: Creates a new Thing Description with the provided ID, or updates an existing one\n      description: |\n        The `id` in the path is the resource id and must match the one in Thing Description.\u003cbr\u003e\n        For creating a TD without user-defined `id`, use the `POST` method.\n      parameters:\n        - name: id\n          in: path\n          description: ID of the Thing Description\n          example: \"urn:example:1234\"\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: A new Thing Description is created\n        '204':\n          description: Thing Description updated successfully\n        '400':\n          $ref: '#/components/responses/RespValidationBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '409':\n          $ref: '#/components/responses/RespConflict'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n      requestBody:\n        content:\n          application/ld+json:\n            schema:\n              type: object\n            examples:\n              ThingDescription:\n                $ref: '#/components/examples/ThingDescriptionWithID'\n        description: The Thing Description object\n        required: true\n    patch:\n      deprecated: true\n      tags:\n        - td\n      summary: Patch a Thing Description\n      description: The patch document must be based on RFC7396 JSON Merge Patch\n      parameters:\n        - name: id\n          in: path\n          description: ID of the Thing Description\n          example: \"urn:example:1234\"\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Thing Description patched successfully\n        '400':\n          $ref: '#/components/responses/RespValidationBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '409':\n          $ref: '#/components/responses/RespConflict'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n      requestBody:\n        content:\n          application/merge-patch+json:\n            schema:\n              type: object\n            examples:\n              ThingDescription:\n                $ref: '#/components/examples/ThingDescriptionWithID'\n        description: The Thing Description object\n        required: true\n    get:\n      deprecated: true\n      tags:\n        - td\n      summary: Retrieves a Thing Description\n      parameters:\n        - name: id\n          in: path\n          description: ID of the Thing Description\n          example: \"urn:example:1234\"\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/ld+json:\n              schema:\n                type: object\n              examples:\n                response:\n                  $ref: '#/components/examples/ThingDescriptionWithID'\n        '400':\n          $ref: '#/components/responses/RespBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '404':\n          $ref: '#/components/responses/RespNotfound'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n    delete:\n      deprecated: true\n      tags:\n        - td\n      summary: Deletes the Thing Description\n      parameters:\n        - name: id\n          in: path\n          description: ID of the Thing Description\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful response\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '404':\n          $ref: '#/components/responses/RespNotfound'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n\n  /things:\n    get:\n      tags:\n        - things\n      summary: Retrieves paginated list of Thing Descriptions\n      description: The query languages, described [here](https://github.com/linksmart/thing-directory/wiki/Query-Language), can be used to filter results and fetch parts of Thing Descriptions.\n      parameters:\n        - $ref: '#/components/parameters/ParamPage'\n        - $ref: '#/components/parameters/ParamPerPage'\n        - name: jsonpath\n          in: query\n          description: JSONPath expression for fetching specific items. E.g. `$[?(@.title=='Kitchen Lamp')].properties`\n          required: false\n          deprecated: true\n          schema:\n            type: string\n          # example: $[?(@.title=='Kitchen Lamp')].properties\n        - name: xpath\n          in: query\n          description: xPath 3.0 expression for fetching specific items. E.g. `//*[title='Kitchen Lamp']/properties`\n          required: false\n          deprecated: true\n          schema:\n            type: string\n          # example: //*[title='Kitchen Lamp']/properties\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/ld+json:\n              schema:\n                $ref: '#/components/schemas/ThingDescriptionPage'\n              examples:\n                ThingDescriptionList:\n                  $ref: '#/components/examples/ThingDescriptionList'\n        '400':\n          $ref: '#/components/responses/RespBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n    post:\n      tags:\n        - things\n      summary: Creates new Thing Description with system-generated ID\n      description: |\n        This is to create a TD and receive a unique system-generated `id` in response.\u003cbr\u003e\n        The server rejects the request if there is an `id` in the body.\u003cbr\u003e\n        For creating a TD with user-defined `id`, use the `PUT` method.\n      responses:\n        '201':\n          description: Created successfully\n          headers:\n            Location:\n              description: Path to the newly created Thing Description\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/RespValidationBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n      requestBody:\n        content:\n          application/ld+json:\n            schema:\n              type: object\n            examples:\n              ThingDescription:\n                $ref: '#/components/examples/ThingDescriptionWithoutID'\n\n        description: Thing Description to be created\n        required: true\n  /things/{id}:\n    put:\n      tags:\n        - things\n      summary: Creates a new Thing Description with the provided ID, or updates an existing one\n      description: |\n        The `id` in the path is the resource id and must match the one in Thing Description.\u003cbr\u003e\n        For creating a TD without user-defined `id`, use the `POST` method.\n      parameters:\n        - name: id\n          in: path\n          description: ID of the Thing Description\n          example: \"urn:example:1234\"\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: A new Thing Description is created\n        '204':\n          description: Thing Description updated successfully\n        '400':\n          $ref: '#/components/responses/RespValidationBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '409':\n          $ref: '#/components/responses/RespConflict'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n      requestBody:\n        content:\n          application/ld+json:\n            schema:\n              type: object\n            examples:\n              ThingDescription:\n                $ref: '#/components/examples/ThingDescriptionWithID'\n        description: The Thing Description object\n        required: true\n    patch:\n      tags:\n        - things\n      summary: Patch a Thing Description\n      description: The patch document must be based on RFC7396 JSON Merge Patch\n      parameters:\n        - name: id\n          in: path\n          description: ID of the Thing Description\n          example: \"urn:example:1234\"\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Thing Description patched successfully\n        '400':\n          $ref: '#/components/responses/RespValidationBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '409':\n          $ref: '#/components/responses/RespConflict'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n      requestBody:\n        content:\n          application/merge-patch+json:\n            schema:\n              type: object\n            examples:\n              ThingDescription:\n                $ref: '#/components/examples/ThingDescriptionWithID'\n        description: The Thing Description object\n        required: true\n    get:\n      tags:\n        - things\n      summary: Retrieves a Thing Description\n      parameters:\n        - name: id\n          in: path\n          description: ID of the Thing Description\n          example: \"urn:example:1234\"\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/ld+json:\n              schema:\n                type: object\n              examples:\n                response:\n                  $ref: '#/components/examples/ThingDescriptionWithID'\n        '400':\n          $ref: '#/components/responses/RespBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '404':\n          $ref: '#/components/responses/RespNotfound'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n    delete:\n      tags:\n        - things\n      summary: Deletes the Thing Description\n      parameters:\n        - name: id\n          in: path\n          description: ID of the Thing Description\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successful response\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '404':\n          $ref: '#/components/responses/RespNotfound'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n\n  /search/jsonpath:\n    get:\n      tags:\n        - search\n      summary: Query TDs with JSONPath expression\n      description: The query languages, described [here](https://github.com/linksmart/thing-directory/wiki/Query-Language), can be used to filter results and select parts of Thing Descriptions.\n      parameters:\n        - name: query\n          in: query\n          description: JSONPath expression for fetching specific items. E.g. `$[?(@.title=='Kitchen Lamp')].properties`\n          required: true\n          schema:\n            type: string\n          # example: $[?(@.title=='Kitchen Lamp')].properties\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - type: string\n                    - type: number\n                    - type: integer\n                    - type: boolean\n                    - type: array\n                    - type: object\n              # examples:\n              #   ThingDescriptionList:\n              #     $ref: '#/components/examples/ThingDescriptionList'\n        '400':\n          $ref: '#/components/responses/RespBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n  /search/xpath:\n    get:\n      tags:\n        - search\n      summary: Query TDs with XPath expression\n      description: The query languages, described [here](https://github.com/linksmart/thing-directory/wiki/Query-Language), can be used to filter results and select parts of Thing Descriptions.\n      parameters:\n        - name: query\n          in: query\n          description: xPath 3.0 expression for fetching specific items. E.g. `//*[title='Kitchen Lamp']/properties`\n          required: true\n          schema:\n            type: string\n          # example: //*[title='Kitchen Lamp']/properties\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - type: string\n                    - type: number\n                    - type: integer\n                    - type: boolean\n                    - type: array\n                    - type: object\n              # examples:\n              #   ThingDescriptionList:\n              #     $ref: '#/components/examples/ThingDescriptionList'\n        '400':\n          $ref: '#/components/responses/RespBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n\n\n  /events:\n    get:\n      tags:\n        - events\n      summary: Subscribe to all events\n      description: This API uses the [Server-Sent Events (SSE)](https://www.w3.org/TR/eventsource/) protocol.\n      parameters:\n        - name: diff\n          in: query\n          description: Include changed TD attributes inside events payload\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          $ref: '#/components/responses/RespEventStream'\n        '400':\n          $ref: '#/components/responses/RespBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n  /events/{type}:\n    get:\n      tags:\n        - events\n      summary: Subscribe to specific events\n      description: This API uses the [Server-Sent Events (SSE)](https://www.w3.org/TR/eventsource/) protocol.\n      parameters:\n        - name: type\n          in: path\n          description: Event type\n          required: true\n          schema:\n            type: string\n            enum:\n              - create\n              - update\n              - delete\n        - name: diff\n          in: query\n          description: Include changed TD attributes inside events payload\n          required: false\n          schema:\n            type: boolean\n      responses:\n        '200':\n          $ref: '#/components/responses/RespEventStream'\n        '400':\n          $ref: '#/components/responses/RespBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n\n\n  /validation:\n    get:\n      tags:\n        - validation\n      summary: Retrieves the validation result for a given Thing Description\n      description: |\n        The Thing Description should be provided as JSON in the request body.\u003cbr\u003e\n        Note: This is currently not supported using Swagger UI.\n      responses:\n        '200':\n          description: Validation Result\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationResult'\n        '400':\n          $ref: '#/components/responses/RespBadRequest'\n        '401':\n          $ref: '#/components/responses/RespUnauthorized'\n        '403':\n          $ref: '#/components/responses/RespForbidden'\n        '500':\n          $ref: '#/components/responses/RespInternalServerError'\n      # wait for openapi 3.1.0 which brings back support for requetsBody in GET\n      # requestBody:\n      #   content:\n      #     application/ld+json:\n      #       schema:\n      #         type: object\n      #       examples:\n      #         ThingDescription:\n      #           $ref: '#/components/examples/ThingDescription'\nsecurity:\n  - BasicAuth: []\n  - BearerAuth: []\n\ncomponents:\n  parameters:\n    ParamPage:\n      name: page\n      in: query\n      description: Page number in the pagination\n      required: false\n      schema:\n        type: number\n        format: integer\n    ParamPerPage:\n      name: per_page\n      in: query\n      description: Number of entries per page\n      required: false\n      schema:\n        type: number\n        format: integer\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\n  responses:\n    RespBadRequest:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ProblemDetails'\n    RespValidationBadRequest:\n      description: Bad Request (e.g. validation error)\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: '#/components/schemas/ProblemDetails'\n              - $ref: '#/components/schemas/ValidationError'\n    ValidationErrorResponse:\n      description: Invalid Thing Description\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ValidationError'\n    RespUnauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ProblemDetails'\n    RespForbidden:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ProblemDetails'\n    RespNotfound:\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ProblemDetails'\n    RespConflict:\n      description: Conflict\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ProblemDetails'\n    RespInternalServerError:\n      description: Internal Server Error\n      content:\n        application/ld+json:\n          schema:\n            $ref: '#/components/schemas/ProblemDetails'\n    RespEventStream:\n      description: Events stream\n      content:\n        text/event-stream:\n          schema:\n            type: array\n            format: chunked\n            items:\n              type: object\n              format: text\n              required:\n                - id\n                - event\n                - data\n              properties:\n                id:\n                  type: integer\n                  description: event id\n                event:\n                  type: string\n                  description: event type\n                data:\n                  type: object\n                  format: json\n                  required:\n                    - id\n  schemas:\n    ErrorResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n    ProblemDetails:\n      description: RFC7807 Problem Details (https://tools.ietf.org/html/rfc7807)\n      properties:\n        #        type:\n        #          type: string\n        #          description: A URI reference that identifies the problem type.\n        status:\n          type: integer\n          format: int32\n          description: The HTTP status code.\n        title:\n          type: string\n          description: A short, human-readable summary of the problem type.\n        detail:\n          type: string\n          description: A human-readable explanation specific to this occurrence of the problem\n        instance:\n          type: string\n          description: A URI reference that identifies the specific occurrence of the problem.\\\n    ValidationError:\n      description: Thing Description validation error\n      allOf:\n        - $ref: '#/components/schemas/ProblemDetails'\n        - type: object\n          properties:\n            validationErrors:\n              type: array\n              items:\n                type: object\n                properties:\n                  field:\n                    type: string\n                  description:\n                    type: string\n\n    ThingDescription:\n      description: WoT Thing Description\n      type: object\n    ThingDescriptionPage:\n      type: object\n      properties:\n        '@context':\n          format: url\n        '@type':\n          format: string\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ThingDescription'\n        page:\n          type: integer\n        perPage:\n          type: integer\n        total:\n          type: integer\n    ValidationResult:\n      type: object\n      properties:\n        valid:\n          type: boolean\n        errors:\n          type: array\n          items:\n            type: string\n\n  examples:\n    ThingDescriptionWithoutID:\n      summary: Example Thing Description\n      value:\n        {\n          \"@context\": \"https://www.w3.org/2019/wot/td/v1\",\n          \"title\": \"ExampleSensor\",\n          \"properties\": {\n            \"status\": {\n              \"forms\": [\n                {\n                  \"op\": [\"readproperty\"],\n                  \"href\": \"https://example.com/status\",\n                  \"contentType\": \"text/html\"\n                }\n              ]\n            }\n          },\n          \"security\": [\"nosec_sc\"],\n          \"securityDefinitions\": {\"nosec_sc\":{\"scheme\":\"nosec\"}\n          }\n        }\n    ThingDescriptionWithID:\n      summary: Example Thing Description\n      value:\n        {\n          \"@context\": \"https://www.w3.org/2019/wot/td/v1\",\n          \"id\": \"urn:example:1234\",\n          \"title\": \"ExampleSensor\",\n          \"properties\": {\n            \"status\": {\n              \"forms\": [\n                {\n                  \"op\": [\"readproperty\"],\n                  \"href\": \"https://example.com/status\",\n                  \"contentType\": \"text/html\"\n                }\n              ]\n            }\n          },\n          \"security\": [\"nosec_sc\"],\n          \"securityDefinitions\": {\"nosec_sc\":{\"scheme\":\"nosec\"}\n          }\n        }\n    ThingDescriptionList:\n      summary: Example Paginated Thing Descriptions\n      value:\n        {\n          \"@context\": \"https://linksmart.eu/thing-directory/context.jsonld\",\n          \"@type\": \"Catalog\",\n          \"items\":[\n            {\n              \"@context\": \"https://www.w3.org/2019/wot/td/v1\",\n              \"id\": \"urn:example:1234\",\n              \"title\": \"ExampleSensor\",\n              \"properties\": {\n                \"status\": {\n                  \"forms\": [\n                    {\n                      \"op\": [\"readproperty\"],\n                      \"href\": \"https://example.com/status\",\n                      \"contentType\": \"text/html\"\n                    }\n                  ]\n                }\n              },\n              \"security\": [\"nosec_sc\"],\n              \"securityDefinitions\": {\"nosec_sc\":{\"scheme\":\"nosec\"}\n              }\n            }\n          ],\n          \"page\": 1,\n          \"perPage\": 100,\n          \"total\": 1\n        }\n",
			"canonicalURL": "/github.com/linksmart/thing-directory@dfc6bbf6de4857a4dfdc15d279deb84ab9472144/-/blob/apidoc/openapi-spec.yml",
			"externalURLs": [
				{
					"url": "https://github.com/linksmart/thing-directory/blob/dfc6bbf6de4857a4dfdc15d279deb84ab9472144/apidoc/openapi-spec.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/events\": get: responses: 200: contents: unsupported content types: [text/event-stream]",
	"NotImplemented": [
		"discriminator inference",
		"unsupported content types"
	]
}