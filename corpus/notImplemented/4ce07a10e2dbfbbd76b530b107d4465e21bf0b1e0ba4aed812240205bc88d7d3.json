{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nginxinc/mra-content-service"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "app/swagger.yaml",
			"byteSize": 5363,
			"content": "openapi: 3.0.0\nservers:\n  - url: /v1\ninfo:\n  description: MRA Content Service API\n  version: \"1.0.0-oas3\"\n  title: MRA Content Service API\n  contact:\n    name: Aidan Carson\n    email: aidan.carson@nginx.com\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\npaths:\n  /:\n    get:\n      responses:\n        '200':\n          description: A simple string response\n          content:\n            '*/*':\n              schema:\n                type: string\n  /v1/content:\n    get:\n      tags:\n        - article\n      summary: Fetch all articles\n      responses:\n        '200':\n          description: Return all articles\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Article'\n      x-tags:\n        - tag: article\n      x-operationId: Articles\n    post:\n      tags:\n        - article\n      summary: Create new article\n      responses:\n        '200':\n          description: return article id\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  type: string\n                  example: '[58bb0c8e-daa6-48ee-b7a3-2ada5c133fc8]'\n      x-tags:\n        - tag: article\n      x-operationId: NewArticle\n      requestBody:\n        $ref: '#/components/requestBodies/Article'\n  '/v1/content/{articleId}':\n    get:\n      tags:\n        - article\n      summary: Fetch single article based on id\n      parameters:\n        - name: articleId\n          in: path\n          description: The id of article to be fetched\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Return single article\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Article'\n    put:\n      tags:\n        - article\n      summary: Update existing article\n      parameters:\n        - name: articleId\n          in: path\n          description: The id of article to be fetched\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Update'\n      x-tags:\n        - tag: article\n      x-operationId: ReplaceArticle\n      requestBody:\n        $ref: '#/components/requestBodies/Article'\n    delete:\n      tags:\n        - article\n      summary: Delete single article\n      parameters:\n        - name: articleId\n          in: path\n          description: The id of article to be fetched\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                type: object\n      x-tags:\n        - tag: article\n      x-operationId: DeleteArticle\n  '/v1/content/{articleId}/{element}/{newValue}':\n    patch:\n      tags:\n        - article\n      summary: Update element of article\n      parameters:\n        - name: articleId\n          in: path\n          description: The id of article that needs to be fetched.\n          required: true\n          schema:\n            type: string\n        - name: element\n          in: path\n          description: The element of the article that needs to be updated.\n          required: true\n          schema:\n            type: string\n        - name: newValue\n          in: path\n          description: The updated value of the element.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Update'\n      x-tags:\n        - tag: article\n      x-operationId: UpdateArticle\ncomponents:\n  schemas:\n    Article:\n      type: object\n      properties:\n        Id:\n          type: string\n        Date:\n          type: string\n        Location:\n          type: string\n        Author:\n          type: string\n        Photo:\n          type: string\n        Title:\n          type: string\n        Extract:\n          type: string\n        Body:\n          type: string\n    Update:\n      type: object\n      properties:\n        Inserted:\n          type: integer\n        Updated:\n          type: integer\n        Unchanged:\n          type: integer\n        Replaced:\n          type: integer\n        Renamed:\n          type: integer\n        Skipped:\n          type: integer\n        Deleted:\n          type: integer\n        Created:\n          type: integer\n        DBsCreated:\n          type: integer\n        TablesCreated:\n          type: integer\n        Dropped:\n          type: integer\n        DBsDropped:\n          type: integer\n        TablesDropped:\n          type: integer\n        GeneratedKeys:\n          type: array\n          items:\n            type: string\n        FirstError:\n          type: string\n        ConfigChanges:\n          type: string\n        Changes:\n          type: string\n  requestBodies:\n    Article:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Article'\n      description: New article object\n      required: true\n",
			"canonicalURL": "/github.com/nginxinc/mra-content-service@cd78c07fbdcb9bcfdc8c5db6af83db2967453b13/-/blob/app/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nginxinc/mra-content-service/blob/cd78c07fbdcb9bcfdc8c5db6af83db2967453b13/app/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1/content\": get: responses: 200: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}