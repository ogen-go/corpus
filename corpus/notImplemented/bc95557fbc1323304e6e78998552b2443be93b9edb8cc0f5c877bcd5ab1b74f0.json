{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/networknt/model-config"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "rest/oauth2_service/1.0.0/openapi.yaml",
			"byteSize": 6975,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: OAuth2 Service Registration\n  description: OAuth2 Service Registration microservices endpoints.\n  contact:\n    email: stevehu@gmail.com\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\nservers:\n  - url: 'https://oauth2.networknt.com'    \npaths:\n  /oauth2/service:\n    post:\n      description: Return a service object\n      operationId: createService\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n      security:\n        - service_auth:\n            - portal.w\n      requestBody:\n        $ref: '#/components/requestBodies/Service'\n    put:\n      description: Return the updated service\n      operationId: updateService\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n      security:\n        - service_auth:\n            - portal.w\n      requestBody:\n        $ref: '#/components/requestBodies/Service'\n    get:\n      description: Return all services\n      operationId: getAllService\n      parameters:\n        - name: page\n          in: query\n          description: Page number\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: pageSize\n          in: query\n          description: Pag size\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: host\n          in: query\n          description: Partial host name for filter\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Service'\n      security:\n        - service_auth:\n            - portal.r\n  '/oauth2/service/{serviceId}':\n    delete:\n      description: Delete a service by Id\n      operationId: deleteService\n      parameters:\n        - name: serviceId\n          in: path\n          description: Service Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid serviceId supplied\n        '404':\n          description: Service not found\n      security:\n        - service_auth:\n            - portal.w\n    get:\n      description: Get a service by Id\n      operationId: getService\n      parameters:\n        - name: serviceId\n          in: path\n          description: Service Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n        '400':\n          description: Invalid serviceId supplied\n        '404':\n          description: Service not found\n      security:\n        - service_auth:\n            - portal.r\n            - portal.w\n  '/oauth2/service/{serviceId}/endpoint':\n    post:\n      description: create endpoints for service\n      operationId: createServiceEndpoint\n      parameters:\n        - name: serviceId\n          in: path\n          description: Service Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: Successful response\n      security:\n        - service_auth:\n            - portal.w\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ServiceEndpoint'\n        description: A list of endpoint object\n        required: true\n    delete:\n      description: Delete all endpoints for a service\n      operationId: deleteServiceEndpoint\n      parameters:\n        - name: serviceId\n          in: path\n          description: Service Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid serviceId supplied\n        '404':\n          description: Service not found\n      security:\n        - service_auth:\n            - portal.w\n    get:\n      description: Get all endpoints for a service\n      operationId: getServiceEndpoint\n      parameters:\n        - name: serviceId\n          in: path\n          description: Service Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServiceEndpoint'\n        '400':\n          description: Invalid serviceId supplied\n        '404':\n          description: ServiceEndpoint not found\n      security:\n        - service_auth:\n            - portal.r\n            - portal.w\ncomponents:\n  requestBodies:\n    Service:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Service'\n      description: Service object that needs to be added\n      required: true\n  securitySchemes:\n    service_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: 'http://localhost:8888/oauth2/code'\n          scopes:\n            portal.w: write from light-portal\n            portal.r: read from light-portal\n  schemas:\n    Service:\n      type: object\n      required:\n        - serviceId\n        - serviceName\n        - serviceType\n        - host\n      properties:\n        serviceId:\n          type: string\n          description: a unique service id\n        serviceType:\n          type: string\n          description: service type\n          enum:\n            - openapi\n            - graphql\n            - hybrid\n        serviceName:\n          type: string\n          description: service name\n        serviceDesc:\n          type: string\n          description: service description\n        ownerId:\n          type: string\n          description: service owner userId\n        host:\n          type: string\n          description: service host\n        scope:\n          type: string\n          description: service scopes separated by space, only use it if all endpoints share the same scopes.\n    ServiceEndpoint:\n      type: object\n      required:\n        - endpoint\n        - operation\n        - scope\n      properties:\n        endpoint:\n          type: string\n          description: a combination of path and method to uniquely identify an operation\n        operation:\n          type: string\n          description: operationId of the endpoint\n        scope:\n          type: string\n          description: scope associated with the endpoint\n",
			"canonicalURL": "/github.com/networknt/model-config@3fea561d7982c217c1d5d35c1193eac78a7fdcef/-/blob/rest/oauth2_service/1.0.0/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/networknt/model-config/blob/3fea561d7982c217c1d5d35c1193eac78a7fdcef/rest/oauth2_service/1.0.0/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/oauth2/service\": get: security: security \"service_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}