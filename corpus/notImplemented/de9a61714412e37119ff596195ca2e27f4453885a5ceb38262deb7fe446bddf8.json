{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/RWTH-ACS/clonemap"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/agency/openapi.yaml",
			"byteSize": 10570,
			"content": "# Copyright 2020 Institute for Automation of Complex Power Systems,\n# E.ON Energy Research Center, RWTH Aachen University\n#\n# This project is licensed under either of\n# - Apache License, Version 2.0\n# - MIT License\n# at your option.\n#\n# Apache License, Version 2.0:\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# MIT License:\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\nopenapi: \"3.0.0\"\ninfo:\n  version: \"1.0\"\n  title: Agency\n  description: API of the Agency\npaths:\n  /api/agency:\n    get:\n      description: returns basic information about agency and agents\n      responses:\n        '200':\n          description: OK - agency information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AgencyInfo'\n  /api/agency/agents:\n    post:\n      description: create and execute new agent\n      requestBody:\n        description: configuration of new agent\n        content:\n          applications/json:\n            schema:\n              $ref: '#/components/schemas/AgentInfo'\n        required: true\n      responses:\n        '201':\n          description: Created\n  /api/agency/msgs:\n    post:\n      description: post agent messages to agents that run in this agency\n      requestBody:\n        description: array of messages\n        content:\n          applications/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ACLMessage'\n        required: true\n      responses:\n        '201':\n          description: Created\n  /api/agency/msgundeliv:\n    post:\n      description: post message that could not be delivered\n      requestBody:\n        description: message\n        content:\n          applications/json:\n            schema:\n              $ref: '#/components/schemas/ACLMessage'\n        required: true\n      responses:\n        '201':\n          description: Created\n  /api/agency/agents/{agentid}:\n    parameters:\n    - in: path\n      name: agentid\n      description: ID of agent\n      required: true\n      schema:\n        type: integer\n    delete:\n      description: delete agent\n      responses:\n        '200':\n          description: succesful deletion\n  /api/agency/agents/{agentid}/status:\n    parameters:\n    - in: path\n      name: agentid\n      description: ID of agent\n      required: true\n      schema:\n        type: integer\n    get:\n      description: agent status\n      responses:\n        '200':\n          description: OK \n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Status'\n  /api/agency/agents/{agentid}/custom:\n    parameters:\n    - in: path\n      name: agentid\n      description: ID of agent\n      required: true\n      schema:\n        type: integer\n    put:\n      description: agent status\n      responses:\n        '200':\n          description: OK \n          content:\n            text/plain:\n              schema:\n                type: string\ncomponents:\n  schemas:\n    AgencyInfo:\n      description: information about agency\n      properties:\n        masid:\n          description: ID of MAS\n          type: integer\n        name:\n          description: name of agency (hostname of pod given by Kubernetes)\n          type: string\n        id:\n          description: unique ID of agency\n          type: integer\n        imid:\n          description: unique ID of image group\n          type: integer\n        logger:\n          description: configuration of logging\n          $ref: '#/components/schemas/LoggerConfig'\n        agents:\n          description: list of all agents in agency\n          type: array\n          items:\n            type: integer\n        status:\n          description: status of agency\n          $ref: '#/components/schemas/Status'\n      required:\n      - masid\n      - name\n      - id\n      - imid\n      - logger\n      - agents\n      - status\n    AgentInfo:\n      description: detailed information about agent\n      properties:\n        spec:\n          description: spec of Agent\n          $ref: '#/components/schemas/AgentSpec'\n        masid:\n          description: ID of MAS\n          type: integer\n        agencyid:\n          description: ID of agency\n          type: integer\n        imid:\n          description: unique ID of image group\n          type: integer\n        id:\n          description: unique ID of agent\n          type: integer\n        address:\n          description: address of agent\n          $ref: '#/components/schemas/Address'\n        status:\n          description: status of agent\n          $ref: '#/components/schemas/Status'\n      required:\n      - spec\n      - masid\n      - agencyid\n      - imid\n      - id\n      - address\n      - status\n    ACLMessage:\n      description: message for agent communication\n      properties:\n        ts:\n          description: sending time\n          type: string\n        perf:\n          description: Denotes the type of the communicative act of the ACL message\n          type: integer\n        sender:\n          description: Denotes the identity of the sender of the message\n          type: integer\n        agencys:\n          description: Denotes the name of the sender agency\n          type: string\n        receiver:\n          description: Denotes the identity of the intended recipients of the message\n          type: integer\n        agencyr:\n          description: Denotes the name of the receiver agency\n          type: string\n        repto:\n          description: This parameter indicates that subsequent messages in this \n                        conversation thread are to be directed to the agent named in the \n                        reply-to parameter, instead of to the agent named in the sender \n                        parameter\n          type: integer\n        content:\n          description: Denotes the content of the message\n          type: string\n        lang:\n          description: Denotes the language in which the content parameter is expressed\n          type: string\n        enc:\n          description: Denotes the specific encoding of the content language expression\n          type: string\n        ont:\n          description: Denotes the ontology(s) used to give a meaning to the symbols in \n                        the content expression\n          type: string\n        prot:\n          description: Denotes the interaction protocol that the sending agent is \n                        employing with this ACL message\n          type: integer\n        convid:\n          description: Introduces an expression which is used to identify the ongoing \n                        sequence of communicative acts that together form a conversation\n          type: integer\n        repwith:\n          description: Introduces an expression that will be used by the responding agent \n                        to identify this message\n          type: string\n        inrepto:\n          description: Denotes an expression that references an earlier action to which \n                        this message is a reply\n          type: string\n        repby:\n          description: Denotes a time and/or date expression which indicates the latest \n                        time by which the sending agent would like to receive a reply\n          type: string\n      required:\n      - ts\n      - perf\n      - sender\n      - agencys\n      - receiver\n      - agencyr\n      - content\n      - prot\n    Status:\n      description: information about an agent's or agency's status\n      properties:\n        code:\n          description: status code\n          type: integer\n        lastupdate:\n          description: time of last update\n          type: string\n      required:\n      - code\n      - lastupdate\n    LoggerConfig:\n      description: contains information about agency\n      properties:\n        active:\n          description: indicates if logger module is active and/or usable\n          type: boolean\n        msg:\n          description: activation of msg log topic\n          type: boolean\n        app:\n          description: activation of app log topic\n          type: boolean\n        status:\n          description: activation of status log topic\n          type: boolean\n        debug:\n          description: activation of debug log topic\n          type: boolean\n      required:\n      - active\n    Address:\n      description: holds the address information of an agent\n      properties:\n        agency:\n          description: name of the agency\n          type: string\n      required:\n      - agency\n    AgentSpec:\n      description: contains information about a agent running in a MAS\n      properties:\n        nodeid:\n          description: ID of node\n          type: integer\n        name: \n          description: name/description of agent\n          type: string\n        type:\n          description: type of agent (application dependent)\n          type: string\n        subtype:\n          description: subtype of agent (application dependent)\n          type: string\n        custom:\n          description: custom agent specification\n          type: string\n      required:\n      - nodeid\n      - name",
			"canonicalURL": "/github.com/RWTH-ACS/clonemap@baee2c72b39adc0c2d086e61c49912130d2ddb66/-/blob/api/agency/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/RWTH-ACS/clonemap/blob/baee2c72b39adc0c2d086e61c49912130d2ddb66/api/agency/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/agency/agents\": post: requestBody: contents: unsupported content types: [applications/json]",
	"NotImplemented": [
		"unsupported content types"
	]
}