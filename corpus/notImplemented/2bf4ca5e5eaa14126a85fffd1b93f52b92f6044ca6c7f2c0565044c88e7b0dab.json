{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mu-box/core"
		},
		"file": {
			"name": "microagent-api.yaml",
			"size": 0,
			"path": "docs/servers/microagent-api.yaml",
			"byteSize": 15840,
			"content": "openapi: 3.0.0\n# Added by API Auto Mocking Plugin\nservers:\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/danhunsaker/microagent/1.0.0\n  - description: Individual application server\n    url: https://{host}:8570\n    variables:\n      host:\n        default: ''\n        description: The host IP of the server\ninfo:\n  version: \"1.0.0\"\n  title: microagent API\n  license:\n    name: MIT License\n    url: https://choosealicense.com/licenses/mit/\n  contact:\n    email: danhunsaker@gmail.com\n    name: Dan Hunsaker\n  description: The API spec for microagent, and other Nanobox-v1-compatible application server agents.\ntags:\n  - name: members\n    description: Endpoints interacting with member servers of the current cluster.\n  - name: images\n    description: Endpoints interacting with Docker images on the current server.\n  - name: containers\n    description: Endpoints interacting with containers on the current server.\n  - name: jobs\n    description: Endpoints interacting with the current server's assigned jobs.\n  - name: remote\n    description: Endpoints involved in remote access to the current server or its containers.\npaths:\n  /ping:\n    get:\n      summary: Ping the agent to verify it is operational\n      responses:\n        '200':\n          description: '\"pong\" for nanoagent; \"micro\" for microagent'\n          content:\n            text/plain:\n              schema:\n                type: string\n              examples:\n                microagent:\n                  value: micro\n                nanoagent:\n                  value: pong\n      security: []\n  /members:\n    get:\n      summary: List members of the cluster\n      tags: [members]\n      responses:\n        '200':\n          description: list of servers in the cluster\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    ip:\n                      type: string\n                example:\n                  - ip: 127.0.0.1\n                  - ip: 127.0.0.2\n    post:\n      summary: Add a new member to the cluster\n      tags: [members]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ip:\n                  type: string\n      responses:\n        '200':\n          description: _\n    put:\n      summary: Reset the cluster members list\n      tags: [members]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: object\n                properties:\n                  ip:\n                    type: string\n      responses:\n        '200':\n          description: _\n  /members/{member}:\n    parameters:\n      - name: member\n        in: path\n        required: true\n        description: the IP address of the member server\n        schema:\n          type: string\n    delete:\n      summary: Remove a member from the cluster\n      tags: [members]\n      responses:\n        '200':\n          description: _\n  /pulse:\n    get:\n      summary: Get current Pulse stats\n      responses:\n        '200':\n          description: _\n          content:\n            application/json:\n              schema:\n                type: object\n              example:\n                _connected:                                      1\n                containerlogger.data.logvac.2.1-cpu_percent:     0.0077541711229946525\n                containerlogger.data.logvac.2.1-ram_percent:     16.0021484375\n                containerlogger.data.logvac.2.1-ram_used:        3.35589376e+08\n                containermesh.data.portal.2.1-cpu_percent:       1.1787363636363635\n                containermesh.data.portal.2.1-ram_percent:       4.6041015625\n                containermesh.data.portal.2.1-ram_used:          9.6555008e+07\n                containermonitor.data.pulse.2.1-cpu_percent:     0.35860294117647057\n                containermonitor.data.pulse.2.1-ram_percent:     3.5439453125\n                containermonitor.data.pulse.2.1-ram_used:        7.432192e+07\n                containerpusher.data.mist.2.1-cpu_percent:       0.010028944444444444\n                containerpusher.data.mist.2.1-ram_percent:       0.26679687500000004\n                containerpusher.data.mist.2.1-ram_used:          5.595136e+06\n                containerwarehouse.data.hoarder.2.1-cpu_percent: 0.013430652173913043\n                containerwarehouse.data.hoarder.2.1-ram_percent: 3.0568359375\n                containerwarehouse.data.hoarder.2.1-ram_used:    6.4106496e+07\n                cpu-cpu_percent:                                 8.108836206669642\n                diskdevvda1-disk_percent:                        39.4254610674276\n                diskdevvda15-disk_percent:                       3.449437571356379\n                ram-ram_percent:                                 29.7111328125\n                swap-swap_percent:                               0\n    post:\n      summary: Register a Pulse stats reporting endpoint\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                host:\n                  type: string\n                  example: 127.0.0.4\n                port:\n                  type: integer\n                  example: 8080\n      responses:\n        '200':\n          description: _\n  /images:\n    get:\n      summary: List the Docker images installed on the server\n      tags: [images]\n      responses:\n        '200':\n          description: _\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Image'\n    post:\n      summary: Install a Docker image on the server\n      tags: [images]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                slug:\n                  type: string\n                  description: the name:tag of the image to install\n      responses:\n        '200':\n          description: _\n  /images/{slug}:\n    parameters:\n      - name: slug\n        in: path\n        required: true\n        description: The name:tag of the Docker image to operate on\n        schema:\n          type: string\n          example: nanobox/logvac:latest\n    get:\n      summary: Fetch info about a specific image on the server, by ID\n      tags: [images]\n      responses:\n        '200':\n          description: _\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Image'\n    delete:\n      summary: Remove an image from the server\n      tags: [images]\n      responses:\n        '200':\n          description: _\n  /containers:\n    get:\n      summary: List the containers on this server\n      tags: [containers]\n      responses:\n        '200':\n          description: _\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Container\"\n    post:\n      summary: Launch a container on this server\n      tags: [containers]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                image_slug:\n                  type: string\n                hostname:\n                  type: string\n                domainname:\n                  type: string\n                labels:\n                  type: object\n                  properties:\n                    component:\n                      type: string\n                    generation:\n                      type: string\n                    member:\n                      type: string\n                cmd:\n                  type: string\n                network:\n                  type: string\n                ip:\n                  type: string\n                memory:\n                  type: integer\n                memory_swap:\n                  type: integer\n                cpu_shares:\n                  type: integer\n              example:\n                name: data.storage.1.1\n                image_slug: nanobox/unfs:0.9\n                hostname: data.storage.1.1\n                domainname: \"\"\n                labels:\n                  component: 00000000-0000-0000-0000-000000000000\n                  generation: 00000000-0000-0000-0000-000000000000\n                  member: 00000000-0000-0000-0000-000000000000\n                cmd: null\n                network: virt\n                ip: 127.0.0.5\n                memory: 0\n                memory_swap: 0\n                cpu_shares: 0\n      responses:\n        '200':\n          description: _\n  /containers/{name}:\n    parameters:\n      - name: name\n        in: path\n        required: true\n        schema:\n          type: string\n          example: data.storage.1.1\n    get:\n      summary: Get information about a specific container, by name\n      tags: [containers]\n      responses:\n        '200':\n          description: _\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Container\"\n    delete:\n      summary: Remove a container from this server\n      tags: [containers]\n      responses:\n        '200':\n          description: _\n  /containers/{name}/start:\n    parameters:\n      - name: name\n        in: path\n        required: true\n        schema:\n          type: string\n          example: data.storage.1.1\n    put:\n      summary: Start a container, by name\n      tags: [containers]\n      responses:\n        '200':\n          description: _\n  /containers/{name}/stop:\n    parameters:\n      - name: name\n        in: path\n        required: true\n        schema:\n          type: string\n          example: data.storage.1.1\n    put:\n      summary: Stop a container, by name\n      tags: [containers]\n      responses:\n        '200':\n          description: _\n  /containers/{name}/restart:\n    parameters:\n      - name: name\n        in: path\n        required: true\n        schema:\n          type: string\n          example: data.storage.1.1\n    put:\n      summary: Restart a container, by name\n      tags: [containers]\n      responses:\n        '200':\n          description: _\n  /jobs:\n    get:\n      summary: List the currently registered jobs\n      tags: [jobs]\n      responses:\n        '200':\n          description: _\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Job\"\n    post:\n      summary: Register a job to run a script\n      tags: [jobs]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                container:\n                  type: string\n                script:\n                  type: string\n                payload:\n                  type: string\n      responses:\n        '200':\n          description: _\n  /jobs/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get information about a specific job, by ID\n      tags: [jobs]\n      responses:\n        '200':\n          description: _\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Job\"\n    delete:\n      summary: Remove a job, by ID\n      tags: [jobs]\n      responses:\n        '200':\n          description: _\n  /setup-tunnel:\n    post:\n      summary: Open a tunnel session which has to be claimed in the next 15 seconds\n      tags: [remote]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  description: secret token needed to establish the tunnel\n                container:\n                  description: docker container to establish a tunnel into\n                forward_port:\n                  description: the port to establish a tunnel to inside the container\n      responses:\n        '200':\n          description: _\n  /setup-exec:\n    post:\n      summary: Open an exec session which has to be claimed in the next 15 seconds\n      tags: [remote]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  description: secret token needed to establish a secure console\n                container:\n                  description: docker container to establish the console into\n      responses:\n        '200':\n          description: _\n  /setup-ssh:\n    post:\n      summary: Open an ssh session which has to be claimed in the next 15 seconds\n      tags: [remote]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  description: secret token needed to establish an ssh session\n      responses:\n        '200':\n          description: _\ncomponents:\n  securitySchemes:\n    Token:\n      type: apiKey\n      in: header\n      name: X-Token\n  schemas:\n    Container:\n      type: object\n      properties:\n        id:\n          type: string\n        network:\n          type: string\n        networkname:\n          type: string\n        name:\n          type: string\n        labels:\n          type: object\n          properties:\n            component:\n              type: string\n            generation:\n              type: string\n            member:\n              type: string\n        hostname:\n          type: string\n        domainname:\n          type: string\n        cmd:\n          type: string\n        image_slug:\n          type: string\n        ip:\n          type: string\n        binds:\n          type: object\n        memory:\n          type: integer\n        memory_swap:\n          type: integer\n        status:\n          type: string\n        cpu_shares:\n          type: integer\n      example:\n        id: data.storage.1.1\n        network: virt\n        networkname: \"\"\n        name: data.storage.1.1\n        labels:\n          component: 00000000-0000-0000-0000-000000000000\n          generation: 00000000-0000-0000-0000-000000000000\n          member: 00000000-0000-0000-0000-000000000000\n        hostname: data.storage.1.1\n        domainname: \"\"\n        cmd: null\n        image_slug: nanobox/unfs:0.9\n        ip: 127.0.0.5\n        binds: null\n        memory: 0\n        memory_swap: 0\n        status: running\n        cpu_shares: 0\n    Image:\n      type: object\n      properties:\n        id:\n          type: string\n        slug:\n          type: string\n        repo_tags:\n          type: array\n          items:\n            type: string\n        size:\n          type: integer\n        virtual_size:\n          type: integer\n        status:\n          type: string\n      example:\n        id: sha256:76e2e00e3b633ef8de439d9eccf63e8cc514d583e1847dd2db009c0861d35249\n        slug: nanobox/logvac:latest\n        repo_tags:\n          - nanobox/logvac:latest\n        size: 346998892\n        virtual_size: 346998892\n        status: complete\n    Job:\n      type: object\n      properties:\n        id:\n          type: string\n        container:\n          type: string\n        script:\n          type: string\n        payload:\n          type: object\n      example:\n        id: 00000000-0000-0000-0000-000000000000\n        container: data.storage.1.1\n        script: update\n        payload:\n          hook_ref: stable\n          before_deploy: []\n          after_deploy: []\nsecurity:\n  - Token: []\n",
			"canonicalURL": "/github.com/mu-box/core@a66c79bb43fe850bcd6c1ede58051555e1736204/-/blob/docs/servers/microagent-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mu-box/core/blob/a66c79bb43fe850bcd6c1ede58051555e1736204/docs/servers/microagent-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/ping\": get: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}