{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vircadia/project-apollo"
		},
		"file": {
			"name": "API-Tokens.yaml",
			"size": 0,
			"path": "api/API-Tokens.yaml",
			"byteSize": 6533,
			"content": "openapi: \"3.0.1\"\ninfo:\n  version: 1.0.1\n  title: Vircadia MetaverseAPI - Tokens\n  description: Vircadia metaverse-server API for Token fetch and management.\n  contact:\n    name: Vircadia project\n    url: https://vircadia.com/\n    email: vircadia@vircadia.com\n  license:\n    name: Apache 2.0\n    url: \"https://www.apache.org/licenses/LICENSE-2.0.html\"\ncomponents:\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\npaths:\n  /oauth/token:\n    post:\n      description: |\n        API which mimics the oauth token fetch interface.\n        Used to get initial access token for user access -- that is, user \"log in\".\n      tags:\n        - tokens\n      requestBody:\n        required: true\n        content:\n          \"application/json\":\n            schema:\n              type: object\n              required:\n                - grant_type\n              properties:\n                grant_type:\n                  description: specifies the type of token request\n                  type: string\n                  enum:\n                    - password\n                    - authorization-code\n                    - refresh-token\n                username:\n                  type: string\n                password:\n                  type: string\n                scope:\n                  type: string\n                  enum:\n                    - owner\n                    - domain\n                refresh_token:\n                    description: if grant_type is \"refresh-token\" this is the refresh token to use\n                    type: string\n      responses:\n        200:\n          description: Token successfully allocate\n          content:\n            \"application/json\":\n              schema:\n                type: object\n                required:\n                  - access_token\n                  - refresh_token\n                  - token_type\n                  - scope\n                properties:\n                  access_token:\n                    type: string\n                  token_type:\n                    type: string\n                    description: type of token. Usually \"Bearer\".\n                  expires_in:\n                    type: integer\n                    description: seconds until expiration time\n                  refresh_token:\n                    type: string\n                    description: token to use to extend the main token's expiration time\n                  scope:\n                    type: string\n                    description: token scope. Either \"owner\" for account access, or \"domain\" for domain access.\n                  created_at:\n                    type: integer\n                    description: seconds since 1970-01-01\n        401:\n          description: The domainID is not known and the DomainServer should get temp name\n          content:\n            \"application/json\":\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: reason for unauthorized failure\n\n  /api/v1/token/new:\n    parameters:\n      - name: scope\n        in: query\n        description: Type of token being created. Either \"owner\" or \"domain\"\n        schema:\n          type: string\n          enum:\n            - owner\n            - domain\n    post:\n      description: |\n        Get a new authorization toekn associated with a logged in account.\n        The account identified in the \"Authorization:\" field is the keeper of the  token.\n        A \"scope\" is specified in the query. Most often  that will be \"domain\" as this\n        request is most often used to get a new domain-server's access token.\n      tags:\n        - tokens\n      security:\n        - BearerAuth: []\n      responses:\n        200:\n          description: token successfully created\n          content:\n            \"application/json\":\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum:\n                      - success\n                      - fail\n                  data:\n                    type: object\n                    properties:\n                      token:\n                        type: string\n                        description: the allocted token\n                      token_id:\n                        type: string\n                        description: an ID that identifies the token\n                      refresh_token:\n                        type: string\n                        description: a token to use to extend the expiration period of the main token\n                      token_expiration_seconds:\n                        type: integer\n                        description: number of seconds this token is good for\n                      account_name:\n                        type: string\n                        description: the username of the account the token was created under\n                      account_id:\n                        type: string\n                        description: the account id of the account the token was created under\n\n  /user/tokens/new:\n    parameters:\n      - name: for_domain_server\n        in: query\n        description: parameter signifying token is for a domain server.\n        schema:\n          type: boolean\n    get:\n      description: |\n        Request used by the domain-server to get domain tokens as part of\n        the \"associate domain with account\" logic.\n        This returns a human readable HTML response.\n\n        This request exists for backwards compatability and will probably be\n        deprecated when someone re-works the domain-server administration pages.\n      tags:\n        - tokens\n      security:\n        - BearerAuth: []\n      responses:\n        200:\n          description: Token was allocated\n          content:\n            \"text/html\":\n              schema:\n                type: string\n                description: |\n                  Human readable HTML displaying the generated domain token.\n\n                  \u003ccenter\u003e\u003ch2\u003eYour domain's access token is: TOKEN\u003c/h2\u003e\u003c/center\u003e\n        302:\n          description: |\n            The account authorization is not present or is not valid. Redirect to login sight.\n            The \"Location:\" header is returned as \"/static/DomainTokenLogin.html\" which redirects\n            to a page to login and get the domain token. This returned URL can be changed\n            with the \"Domain.TokenGenURL\" parameter in the metaverse-server.\n\n# vim: tabstop=2 shiftwidth=2 autoindent expandtab\n",
			"canonicalURL": "/github.com/vircadia/project-apollo@c6b8bcac27a54cde2444d214d6081c558a26f23c/-/blob/api/API-Tokens.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/vircadia/project-apollo/blob/c6b8bcac27a54cde2444d214d6081c558a26f23c/api/API-Tokens.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/user/tokens/new\": get: responses: 200: contents: unsupported content types: [text/html]",
	"NotImplemented": [
		"unsupported content types"
	]
}