{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/levigo/neverpile-eureka"
		},
		"file": {
			"name": "eureka-core.yaml",
			"size": 0,
			"path": "neverpile-eureka-core/src/main/resources/com/neverpile/eureka/eureka-core.yaml",
			"byteSize": 29729,
			"content": "openapi: 3.0.1\n\ninfo:\n  title: Neverpile eureka API\n  contact:\n    name: levigo solutions gmbh\n    url: https://levigo.de\n    email: solutions@levigo.de\n  version: 1.0.0\n  \ntags:\n- name: Document\n  description: Document related APIs\n- name: Content\n  description: Document content element related APIs\n- name: Audit\n  description: Audit-log related APIs\n- name: Authorization\n  description: Policy Repository Resource\n- name: Index\n  description: Index Resource\n\npaths:\n  /api/v1/authorization/policy:\n    get:\n      tags:\n      - Authorization\n      summary: Query access policies by start-of-validity date range\n      \n      parameters:\n      - name: from\n        in: query\n        description: The start of the date range to query for\n        allowEmptyValue: false\n        schema:\n          type: string\n          default: any start date\n          format: date-time\n          \n      - name: to\n        in: query\n        description: The end of the date range to query for\n        allowEmptyValue: false\n        schema:\n          type: string\n          default: any end date\n          format: date-time\n          \n      - name: limit\n        in: query\n        description: The maximum number if policies to return\n        allowEmptyValue: false\n        schema:\n          type: string\n          default: no limit\n      \n      responses:\n        200:\n          description: Policy found\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessPolicy'\n    post:\n      tags:\n      - Authorization\n      summary: Create or update an authorization policy with the start-of-validity\n        date taken from the supplied policy. The start-of-validity date must lie in the future.\n        \n      requestBody:\n        description: The access policy to create or update\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AccessPolicy'\n        required: false\n      \n      responses:\n        200:\n          description: Policy created/updated\n      \n  /api/v1/authorization/policy/current:\n    get:\n      tags:\n      - Authorization\n      summary: Fetch the currently valid authorization policy.\n      \n      responses:\n        200:\n          description: Policy found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessPolicy'\n                \n  /api/v1/authorization/policy/hints:\n    get:\n      tags:\n      - Authorization\n      summary: Fetch the authorization policy hints\n      \n      responses:\n        200:\n          description: Hints found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HintResult'\n                \n  /api/v1/authorization/policy/validate:\n    post:\n      tags:\n      - Authorization\n      summary: Validate an authorization policy. Report problems as a list of errors\n        and/or warnings.\n        \n      requestBody:\n        description: policyJson\n        content:\n          application/json:\n            schema:\n              type: string\n        required: false\n        \n      responses:\n        200:\n          description: Policy validated\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ValidationResult'\n                  \n  /api/v1/authorization/policy/{startOfValidity}:\n    get:\n      tags:\n      - Authorization\n      summary: Fetch the authorization policy with the given start-of-validity date\n      \n      parameters:\n      - name: startOfValidity\n        in: path\n        description: The start-of-validity date of the policy to be fetched\n        required: true\n        schema:\n          type: string\n          format: date-time\n          \n      responses:\n        200:\n          description: Policy found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessPolicy'\n                \n    put:\n      tags:\n      - Authorization\n      summary: Create or update the authorization policy with the given start-of-validity\n        date. The start-of-validity date must lie in the future.\n        \n      parameters:\n      - name: startOfValidity\n        in: path\n        description: The start-of-validity date of the policy to be fetched\n        required: true\n        schema:\n          type: string\n          format: date-time\n          \n      requestBody:\n        description: The policy to be created or updated\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AccessPolicy'\n        required: true\n        \n      responses:\n        200:\n          description: Policy updated\n        400:\n          description: Creating or updating a policy in the past is not permitted\n\n    delete:\n      tags:\n      - Authorization\n      summary: Delete the authorization policy with the given start-of-validity date\n      \n      parameters:\n      - name: startOfValidity\n        in: path\n        description: The start-of-validity date of the policy to be fetched\n        required: true\n        schema:\n          type: string\n          format: date-time\n          \n      responses:\n        200:\n          description: Policy deleted\n          \n  /api/v1/documents:\n    post:\n      tags:\n      - Content\n      summary: Create a document along with content elements in a single multipart\n        upload\n      parameters:\n      - name: facets\n        in: query\n        description: The list of facets to be included in the response; return all\n          facets if empty\n        allowEmptyValue: false\n        style: form\n        explode: true\n        schema:\n          type: array\n          items:\n            type: string\n            \n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Document'\n              \n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                __DOC:\n                  type: object\n                  description: The non-content document information (metadata and other facets).\n                    Media type should be `application/json`.\n                  \n                contentElement:\n                  description: Other content elements (can have any name)\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n                  \n      responses:\n        200:\n          description: Document found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Document'\n        400:\n          description: Invalid documentID supplied\n        404:\n          description: Document not found\n\n  /api/v1/documents/{documentID}:\n    get:\n      tags:\n      - Document\n      summary: Fetches a document by ID\n      \n      parameters:\n      - name: documentID\n        in: path\n        description: The ID of the document to be fetched\n        required: true\n        schema:\n          type: string\n      - name: facets\n        in: query\n        description: The list of facets to be included in the response; return all\n          facets if empty\n        allowEmptyValue: false\n        style: form\n        explode: true\n        schema:\n          type: array\n          items:\n            type: string\n            \n      responses:\n        200:\n          description: Document found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Document'\n        400:\n          description: Invalid documentID supplied\n        404:\n          description: Document not found\n\n    put:\n      tags:\n      - Document\n      summary: Update a document\n      description: The document must already exist. It is not possible to create\n        a new document with this method.\n        \n      parameters:\n      - name: documentID\n        in: path\n        description: The ID of the document to be fetched\n        required: true\n        schema:\n          type: string\n      - name: facets\n        in: query\n        description: The list of facets to be included in the response; return all\n          facets if empty\n        allowEmptyValue: false\n        style: form\n        explode: true\n        schema:\n          type: array\n          items:\n            type: string\n            \n      requestBody:\n        description: requestDto\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Document'\n        required: false\n        \n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Document'\n        202:\n          description: Document updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Document'\n        400:\n          description: Invalid documentID supplied\n        404:\n          description: Document not found\n\n    delete:\n      tags:\n      - Document\n      summary: Delete a document identified by its ID\n      \n      parameters:\n      - name: documentID\n        in: path\n        description: The ID of the document to be fetched\n        required: true\n        schema:\n          type: string\n          \n      responses:\n        204:\n          description: Document successfully deleted\n        400:\n          description: Invalid documentID supplied\n        404:\n          description: Document not found\n        409:\n          description: The request could not be completed due to a conflict with the\n            current state of the target resource.\n\n  /api/v1/documents/{documentID}/content:\n    get:\n      tags:\n      - Content\n      summary: Queries content elements\n\n      parameters:\n      - name: documentID\n        in: path\n        description: ID of the document\n        required: true\n        schema:\n          type: string\n      - name: return\n        in: query\n        description: Specify what and how to return\n        allowEmptyValue: false\n        schema:\n          type: string\n          default: first\n          description: Enum values are\n            * `only` - return the only matching element, assuming there is exactly one match. Return an error `406` otherwise.\n            * `first`- return just the first matching element, assuming there is at least one match. Return `404` otherwise.\n            * `all`- all matching elements as a stream of type `multipart/mixed`.\n          enum:\n          - only\n          - first\n          - all\n      - name: role\n        in: query\n        description: Role(s) of the content elements to be fetched. Multiple roles\n          can be specified separated by comma\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        200:\n          description: Content element found\n          content:\n            multipart/mixed:\n              schema:\n                description: \"Multiple content elements as a RFC 2046 multipart stream. Each part has the following headers\n                  (see headers section for details):\n                  * `Content-Disposition`\n                  * `Last-Modified`\n                  * `Content-Type`\n                  * `Content-Length`\n                  * `ETag`\n                  * `Digest`\n                  * `X-NPE-Document-Version-Timestamp`\"\n                type: string\n                format: byte\n            '*/*':\n              schema:\n                type: string\n                format: byte\n          headers: \n            X-NPE-Document-Version-Timestamp:\n              $ref: '#/components/headers/X-NPE-Document-Version-Timestamp'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n            Content-Length:\n              $ref: '#/components/headers/Content-Length'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Digest:\n              $ref: '#/components/headers/Digest'\n        404:\n          description: Document or content element not found\n        406:\n          description: The query could not be satisfied, e.g. there was more than one match\n            with return mode `only`.\n    post:\n      tags:\n      - Content\n      summary: Add content elements to a document\n\n      parameters:\n      - name: documentID\n        in: path\n        description: ID of the document\n        required: true\n        schema:\n          type: string\n      - name: facets\n        in: query\n        description: The list of facets to be included in the response; return all\n          facets if empty\n        allowEmptyValue: false\n        style: form\n        explode: true\n        schema:\n          type: array\n          items:\n            type: string\n\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                __DOC:\n                  type: string\n                  description: The document description and facets in the form '#/definitions/Document'\n                  format: binary\n                any name:\n                  type: string\n                  description: Other content elements\n                  format: binary\n\n      responses:\n        200:\n          description: Content element(s) added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Document'\n          headers: \n            X-NPE-Document-Version-Timestamp:\n              $ref: '#/components/headers/X-NPE-Document-Version-Timestamp'\n        400:\n          description: Invalid documentID supplied\n        404:\n          description: Document not found\n  /api/v1/documents/{documentID}/content/{contentElementId}:\n    get:\n      tags:\n      - Content\n      summary: Retrieve a single content element\n\n      parameters:\n      - name: documentID\n        in: path\n        description: ID of the document\n        required: true\n        schema:\n          type: string\n      - name: contentElementId\n        in: path\n        description: ID of the content element to be updated\n        required: true\n        schema:\n          type: string\n        \n      responses:\n        200:\n          description: Content element found\n          content:\n            application/json:\n              schema:\n                type: string\n                format: byte\n            '*/*':\n              schema:\n                type: string\n                format: byte\n          headers: \n            X-NPE-Document-Version-Timestamp:\n              $ref: '#/components/headers/X-NPE-Document-Version-Timestamp'\n            Last-Modified:\n              $ref: '#/components/headers/Last-Modified'\n            Content-Length:\n              $ref: '#/components/headers/Content-Length'\n            ETag:\n              $ref: '#/components/headers/ETag'\n            Digest:\n              $ref: '#/components/headers/Digest'        \n        404:\n          description: Document or content element not found\n          \n    put:\n      tags:\n      - Content\n      summary: Update the content data of a specific content element. The new content data must be sent\n        in the body of the request. The referenced document and content element must exist. Updating the\n        content data will preserve some aspects of the content element like `role`, `metadata` and `fileName`.\n        The `mediaType` will be updated from the request body's `Content-Type` header (if present).\n        \n        Updating content data will change its `digest` (unless the content data is the same as before) \n        and may change the content element's `id`, depending on whether the installation uses multi-versioning and\n        other factors. Therefor users of this API mus be prepared to handle an updated id, which will be\n        communicated in the returned `ContentElement` descriptor.\n      parameters:\n      - name: documentID\n        in: path\n        description: ID of the document\n        required: true\n        schema:\n          type: string\n      - name: contentElementId\n        in: path\n        description: ID of the content element to be updated\n        required: true\n        schema:\n          type: string\n\n      requestBody:\n        description: The new content data\n        content:\n          '*/*':\n            schema:\n              type: string\n              format: byte\n        required: true\n        \n      responses:\n        200:\n          description: Content data successfully updated. \n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentElement'\n          headers: \n            X-NPE-Document-Version-Timestamp:\n              $ref: '#/components/headers/X-NPE-Document-Version-Timestamp'\n        404:\n          description: Document or content element not found\n          \n    delete:\n      tags:\n      - Content\n      summary: Deletes a content element by ID\n\n      parameters:\n      - name: documentID\n        in: path\n        description: ID of the document\n        required: true\n        schema:\n          type: string\n      - name: contentElementId\n        in: path\n        description: ID of the content element to be updated\n        required: true\n        schema:\n          type: string\n      - name: facets\n        in: query\n        description: The list of facets to be included in the response; return all\n          facets if empty\n        allowEmptyValue: false\n        style: form\n        explode: true\n        schema:\n          type: array\n          items:\n            type: string\n\n      responses:\n        204:\n          description: Content element deleted\n        400:\n          description: Invalid documentID supplied\n        404:\n          description: Document/Content not found\n          \n  /api/v1/documents/{documentId}/audit:\n    get:\n      tags:\n      - Audit\n      summary: Fetches a document's audit log\n\n      parameters:\n      - name: documentId\n        in: path\n        description: The ID of the document\n        required: true\n        schema:\n          type: string\n\n      responses:\n        200:\n          description: Audit log found\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AuditEvent'\n        404:\n          description: Document not found\n          \n    post:\n      tags:\n      - Audit\n      summary: Appends an event to a document's audit log\n\n      parameters:\n      - name: documentId\n        in: path\n        description: The ID of the document\n        required: true\n        schema:\n          type: string\n\n      requestBody:\n        description: the audit event to append\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuditEvent'\n        required: true\n\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuditEvent'\n        201:\n          description: Event logged\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuditEvent'\n        400:\n          description: Invalid input, object invalid\n        404:\n          description: Document not found\n          \n  /api/v1/documents/{documentId}/audit/{auditId}:\n    get:\n      tags:\n      - Audit\n      summary: Fetches a single audit event\n\n      parameters:\n      - name: documentId\n        in: path\n        description: The ID of the document\n        required: true\n        schema:\n          type: string\n      - name: auditId\n        in: path\n        description: The ID of the audit event to be fetched\n        required: true\n        schema:\n          type: string\n\n      responses:\n        200:\n          description: Audit event found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuditEvent'\n        404:\n          description: AuditEvent not found\n          \n  /api/v1/index/hard-reset:\n    post:\n      tags:\n      - Index\n      summary: Hard resets index\n      description: All index data will be lost and index gets reinitialized.\n\n      responses:\n        200:\n          description: Index successfully resetted\n      \n  /api/v1/index/query/{query}:\n    get:\n      tags:\n      - Index\n      summary: Fetches documents by query\n\n      parameters:\n      - name: query\n        in: path\n        description: The query of the documents to be fetched\n        required: true\n        schema:\n          type: string\n      - name: facets\n        in: query\n        description: The list of facets to be included in the response; return all\n          facets if empty\n        allowEmptyValue: false\n        style: form\n        explode: true\n        schema:\n          type: array\n          items:\n            type: string\n\n      responses:\n        200:\n          description: Query successful\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Document'\n        400:\n          description: Invalid query supplied\n  /api/v1/index/rebuild:\n    post:\n      tags:\n      - Index\n      summary: Rebuilds the index with current store information\n      description: Current index will remain unchanged for all incoming requests until\n        process is complete.Incoming updates to the index will be included in the\n        new index but wont be accessible until rebuild is complete.\n\n      responses:\n        200:\n          description: Index rebuild successfully started.\n          \ncomponents:\n  headers:\n    X-NPE-Document-Version-Timestamp:\n      description: The version timestamp of the document associated with a returned\n        resource.\n      schema:\n        type: string\n        format: date-time\n    Last-Modified:\n      description: The modification date\n      schema:\n        type: string\n        format: RFC 2616 format\n    Content-Length:\n      description: the lenght in bytes\n      schema:\n        type: integer\n    ETag:\n      description: The ETag. No assumption should be made about the ETag's format.\n      schema: \n        type: string\n    Digest:\n      description: The content digest\n      schema:\n        type: string\n        format: \u003calgorighm name\u003e=\u003cdigest value\u003e        \n  schemas:\n    AccessPolicy:\n      title: AccessPolicy\n      type: object\n      properties:\n        _version:\n          type: string\n          description: 'The version of this policy''s schema. There is currently only\n            one valid version: ''2018-09-26''. Policies using other versions may not\n            be compatible.'\n        default_effect:\n          type: string\n          description: The default effect of this policy when no access rule matched\n          enum:\n          - ALLOW\n          - DENY\n        description:\n          type: string\n          description: A description of this access policy\n        rules:\n          type: array\n          description: 'The list of access rules '\n          items:\n            title: AccessRule\n            type: object\n            properties:\n              actions:\n                type: array\n                description: 'The actions matched by this rule. (TBD: pointer to possible\n                  actions)'\n                items:\n                  type: string\n              conditions:\n                $ref: '#/components/schemas/AndCondition'\n              effect:\n                type: string\n                description: The effect to be caused if this rule matches\n                enum:\n                - ALLOW\n                - DENY\n              name:\n                type: string\n                description: A name/description of a rule\n              resources:\n                type: array\n                description: 'The resources matched by this rule. (TBD: pointer to\n                  possible resources)'\n                items:\n                  type: string\n              subjects:\n                type: array\n                description: The subjects matched by this rule. Either 'principal:'s\n                  or 'role:'s or 'anonymous'\n                items:\n                  type: string\n        valid_from:\n          type: string\n          description: The timestamp specifying the date and time at which this policy\n            becomes valid (unless replaced by a policy with a later timestamp)\n          format: date-time\n      description: An access policy descibes access rights users can exercise within\n        the system\n    AndCondition:\n      title: AndCondition\n      type: object\n      properties:\n        name:\n          type: string\n          description: A name/description of a condition\n    AuditEvent:\n      title: AuditEvent\n      type: object\n      properties:\n        auditId:\n          type: string\n          description: The ID of this event\n        description:\n          type: string\n          description: A textual desription of the event\n        timestamp:\n          type: string\n          description: The time at which the event occurred\n          format: date-time\n        type:\n          type: string\n          description: The type of event\n          enum:\n          - CREATE\n          - UPDATE\n          - DELETE\n          - CUSTOM\n        userID:\n          type: string\n          description: The ID of the used which triggered the event; may be null if\n            the event wasn't triggered by a user\n      description: An audit event associated with a document\n    EncryptableElement:\n      description: An abstract schema class extended by types that support encryption.\n      type: object\n      properties:\n        encryption:\n          type: string\n          description: \"Whether the element is encrypted. Possible values are:\n            * `shared` - The element's contents are shared with (visible to) the server.\n            * `private` - The element's contents are encrypted and therefor opaque to the server.\"\n          enum:\n          - shared\n          - private\n        keyHint:\n          type: string\n          description: A key hint that can be used for client-side key management. The content\n            is dependent on the key management scheme used.\n    ContentElement:\n      title: ContentElement\n      allOf:\n      - $ref: \"#/components/schemas/EncryptableElement\"\n      - type: object\n        properties:\n          digest:\n            $ref: '#/components/schemas/Digest'\n          encryption:\n            type: string\n            description: The type of encryption the content element is subject to\n            enum:\n            - shared\n            - private\n          fileName:\n            type: string\n          id:\n            type: string\n            description: The id of the content element - uniqueness is guaranteed only\n              within the document\n          length:\n            type: integer\n            description: The length of the element in bytes\n            format: int64\n          role:\n            type: string\n            description: The role of the content element\n          type:\n            type: string\n            description: The MIME-Type of the content element as specified in RFC 2045\n              without parameters\n        description: A content element associated with a document\n    Digest:\n      title: Digest\n      type: object\n      properties:\n        algorithm:\n          type: string\n          description: The algorithm used to compute the digest\n          enum:\n          - SHA-1\n          - SHA-256\n          - SHA-384\n          - SHA-512\n          - MD5\n        bytes:\n          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\n          type: string\n          description: The hash value as a byte string\n          format: byte\n      description: A cryptographic digest used to verify the integrity of an object\n    Document:\n      title: Document\n      type: object\n      properties:\n        audit:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuditEvent'\n        contentElements:\n          type: array\n          items:\n            $ref: '#/components/schemas/ContentElement'\n        dateCreated:\n          type: string\n          format: date-time\n        dateModified:\n          type: string\n          format: date-time\n        documentId:\n          type: string\n          description: The document's unique ID\n        versionTimestamp:\n          type: string\n          format: date-time\n      description: A neverpile document\n    Hint:\n      title: Hint\n      type: object\n      properties:\n        documentationKey:\n          type: string\n        prefix:\n          type: string\n    HintResult:\n      title: HintResult\n      type: object\n      properties:\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Hint'\n        resources:\n          type: array\n          items:\n            $ref: '#/components/schemas/Hint'\n        subjects:\n          type: array\n          items:\n            $ref: '#/components/schemas/Hint'\n    ValidationResult:\n      title: ValidationResult\n      type: object\n      properties:\n        message:\n          type: string\n        type:\n          type: string\n          enum:\n          - INFO\n          - WARNING\n          - ERROR\n",
			"canonicalURL": "/github.com/levigo/neverpile-eureka@72e9e3e3f7ec10995802a3269d74345568569ed4/-/blob/neverpile-eureka-core/src/main/resources/com/neverpile/eureka/eureka-core.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/levigo/neverpile-eureka/blob/72e9e3e3f7ec10995802a3269d74345568569ed4/neverpile-eureka-core/src/main/resources/com/neverpile/eureka/eureka-core.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/v1/index/query/{query}\": get: responses: 200: contents: application/json: generate schema: item: field contentElements: item: allOf: merge properties: try to merge conflicting property schemas: enum: allOf enum merging not implemented",
	"NotImplemented": [
		"allOf enum merging",
		"unsupported content types"
	]
}