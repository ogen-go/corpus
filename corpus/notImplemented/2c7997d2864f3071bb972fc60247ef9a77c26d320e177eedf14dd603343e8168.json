{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/networknt/light-example-4j"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "kafka/backend-binary/src/main/resources/config/openapi.yaml",
			"byteSize": 2989,
			"content": "---\nopenapi: \"3.0.0\"\ninfo:\n  title: \"Binary backend producer and consumer microservice\"\n  version: \"1.0.0\"\n  description: \"# Kafka producer and consumer service\"\nservers:\n- url: \"https://kafka.networknt.com\"\npaths:\n  /producer/{topic}:\n    post:\n      operationId: \"postBinaryData\"\n      summary: \"Post binary key value pairs encoded with base64 to a Kafka topic\"\n      parameters:\n      - name: \"topic\"\n        in: \"path\"\n        required: true\n        description: \"The kafka topic name\"\n        schema:\n          type: \"string\"\n      requestBody:\n        description: \"message key value pair array in data\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: \"array\"\n              items:\n                $ref: \"#/components/schemas/KeyValue\"\n      responses:\n        \"200\":\n          description: \"Data successfully produced.\"\n        \"400\":\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - kafka_auth:\n        - \"kafka:w\"\n  /consumer/{topic}:\n    get:\n      operationId: \"getBinaryData\"\n      summary: \"Get a list of key value pairs with binary value from Kafka\"\n      parameters:\n      - name: \"topic\"\n        in: \"path\"\n        required: true\n        description: \"The kafka topic name\"\n        schema:\n          type: \"string\"\n      responses:\n        \"200\":\n          description: \"Successful response\"\n          content:\n            application/json:\n              schema:\n                type: \"array\"\n                items:\n                  $ref: \"#/components/schemas/KeyValue\"\n        \"400\":\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - kafka_auth:\n        - \"kafka:r\"\ncomponents:\n  securitySchemes:\n    kafka_auth:\n      type: \"oauth2\"\n      description: \"This API uses OAuth 2.0 with the client credential grant flow.\"\n      flows:\n        clientCredentials:\n          tokenUrl: \"https://localhost:6882/token\"\n          scopes:\n            kafka:w: \"Kafka producer\"\n            kafka:r: \"Kafka consumer\"\n  schemas:\n    Status:\n      type: \"object\"\n      properties:\n        statusCode:\n          description: \"HTTP response code\"\n          type: \"integer\"\n        code:\n          description: \"Code is the machine-readable error code\"\n          type: \"string\"\n        message:\n          description: \"Error messsage\"\n          type: \"string\"\n        description:\n          description: \"The detailed description of the error status\"\n          type: \"string\"\n      required:\n      - \"statusCode\"\n      - \"code\"\n    KeyValue:\n      type: \"object\"\n      properties:\n        key:\n          description: \"key\"\n          type: \"string\"\n        value:\n          description: \"value\"\n          type: \"string\"\n      required:\n      - \"value\"\n",
			"canonicalURL": "/github.com/networknt/light-example-4j@74513c019570e65623b80c1cadc1423e7a18807a/-/blob/kafka/backend-binary/src/main/resources/config/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/networknt/light-example-4j/blob/74513c019570e65623b80c1cadc1423e7a18807a/kafka/backend-binary/src/main/resources/config/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/consumer/{topic}\": get: security: security \"kafka_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}