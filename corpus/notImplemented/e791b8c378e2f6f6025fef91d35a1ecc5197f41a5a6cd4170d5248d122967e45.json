{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/openchannel.io/market/2.0.24/openapi.yaml",
			"byteSize": 134856,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://market.openchannel.io/v2\ninfo:\n  title: OpenChannel Market API\n  version: 2.0.24\n  x-origin:\n    - format: swagger\n      url: https://api.swaggerhub.com/apis/OpenChannel/Market-API/2.0.24\n      version: \"2.0\"\n  x-providerName: openchannel.io\n  x-serviceName: market\nsecurity:\n  - basicAuth: []\npaths:\n  /apps:\n    get:\n      description: |\n        - Results are paginated and the default is value is 1000 if no limit is provided\n        - If no query is specified, returns all APPROVED or SUSPENDED apps within the marketplace\n      parameters:\n        - description: \"A query document. Example: {'name':'MyApp'} matches all the apps that have the name 'MyApp'\"\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n        - description: \"A sort document. Example: {'name':1} sorts the results by name in ascending order\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n        - description: The result set page number to be returned\n          in: query\n          name: pageNumber\n          required: false\n          schema:\n            type: integer\n        - description: The maximum number of results to return per page\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n        - description: The unique id of the user requesting this resource\n          in: query\n          name: userId\n          required: false\n          schema:\n            type: string\n        - description: Whether this result should only contain apps that are owned by this user\n          in: query\n          name: isOwner\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/AppPages\"\n          description: OK\n      summary: Returns a paginated list of APPROVED or SUSPENDED apps\n      tags:\n        - \"apps : Find and modify apps\"\n    post:\n      description: |\n        - This method is called on behalf of a developer.\n        - Price is required if the model is 'single' or 'recurring'\n        - Returns the newly created app\n      parameters:\n        - description: The unique id of the developer that is adding this app\n          in: query\n          name: developerId\n          required: true\n          schema:\n            type: string\n        - description: The name of the app\n          in: query\n          name: name\n          required: true\n          schema:\n            type: string\n        - description: The type for this app\n          in: query\n          name: type\n          required: false\n          schema:\n            type: string\n        - description: A JSON object representing the pricing model type for this app\n          in: query\n          name: model\n          required: false\n          schema:\n            type: string\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n        - description: A custom set of app attributes defined by the administrator and attached to this app\n          in: query\n          name: attributes\n          required: false\n          schema:\n            type: string\n        - description: \"JSON object to restrict users from owning or viewing this app. Example: {'view':{'country':['Canada','Mexico']},'own':{'country':['Canada','Mexico']}} restricts users from canada and mexico from viewing or owning this app\"\n          in: query\n          name: restrict\n          required: false\n          schema:\n            type: string\n        - description: \"JSON object to restrict users from owning or viewing this app. Example: {'view':{'country':['Canada','Mexico']},'own':{'country':['Canada','Mexico']}} restricts users from canada and mexico from viewing or owning this app\"\n          in: query\n          name: allow\n          required: false\n          schema:\n            type: string\n        - description: JSON array of data access requirements\n          in: query\n          name: access\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"409\":\n          description: Already Exists - An app with this name already exists\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/AppVersion\"\n          description: OK\n      summary: Adds a new app for this developer\n      tags:\n        - \"apps : Find and modify apps\"\n  \"/apps/bySafeName/{safeName}\":\n    get:\n      description: |\n        - A 'view' event is recorded when trackViews is set to true\n      parameters:\n        - description: The safeName of the App to be located\n          in: path\n          name: safeName\n          required: true\n          schema:\n            type: string\n        - description: The unique id of the user that is requesting this resource\n          in: query\n          name: userId\n          required: false\n          schema:\n            type: string\n        - description: Whether this call should be tracked as a 'view' for this app. Default is false.\n          in: query\n          name: trackViews\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - The App is either restricted or was not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/App\"\n          description: OK\n      summary: Returns a single APPROVED or SUSPENDED app\n      tags:\n        - \"apps : Find and modify apps\"\n  /apps/textSearch:\n    get:\n      description: |\n        - Results are returned for the market provided within the basic authentication credentials\n      parameters:\n        - description: \"A query document. Example: {'name':'MyApp'} matches all the documents that have the name 'MyApp'\"\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n        - description: The text to search for.\n          in: query\n          name: text\n          required: true\n          schema:\n            type: string\n        - description: \"A JSON array containing all the fields to be searched through. Example: ['name', 'customData.description']\"\n          in: query\n          name: fields\n          required: true\n          schema:\n            type: string\n        - description: The result set page number to be returned\n          in: query\n          name: pageNumber\n          required: false\n          schema:\n            type: integer\n        - description: The maximum number of results to return per page\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n        - description: The unique id of the user requesting this resource\n          in: query\n          name: userId\n          required: false\n          schema:\n            type: string\n        - description: Whether this result should only contain apps that are owned by this user\n          in: query\n          name: isOwned\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/SearchPages\"\n          description: OK\n      summary: Searches through the text of fields to find APPROVED or SUSPENDED apps\n      tags:\n        - \"apps : Find and modify apps\"\n  /apps/versions:\n    get:\n      description: |\n        - Results are paginated when limit is set, otherwise all results are returned\n        - If no query is specified, returns all AppVersions within the marketplace\n        - Only returns AppVersions owned by this developer\n      parameters:\n        - description: \"A query document. Example: {'name':'MyApp'} matches all the apps that have the name 'MyApp'\"\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n        - description: \"A sort document. Example: {'name':1} sorts the results by name in ascending order\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n        - description: The result set page number to be returned\n          in: query\n          name: pageNumber\n          required: false\n          schema:\n            type: integer\n        - description: The maximum number of results to return per page\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n        - description: The unique id of the developer requesting this resource\n          in: query\n          name: developerId\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/VersionPages\"\n          description: OK\n      summary: Returns a paginated list of AppVersions\n      tags:\n        - \"apps : Find and modify apps\"\n  \"/apps/{appId}\":\n    delete:\n      description: |\n        - This method is called on behalf of a developer.\n      parameters:\n        - description: The id of the App to be removed\n          in: path\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The unique id of the developer that is removing this app\n          in: query\n          name: developerId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"404\":\n          description: Not Found - App is not found\n      summary: Removes app and all versions\n      tags:\n        - \"apps : Find and modify apps\"\n    get:\n      description: |\n        - A 'view' event is recorded when trackViews is set to true\n      parameters:\n        - description: The id of the App to be located\n          in: path\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The unique id of the user that is requesting this resource\n          in: query\n          name: userId\n          required: false\n          schema:\n            type: string\n        - description: Whether this call should be tracked as a 'view' for this app. Default is false.\n          in: query\n          name: trackViews\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - The App is either restricted or was not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/App\"\n          description: OK\n      summary: Returns a single APPROVED or SUSPENDED app\n      tags:\n        - \"apps : Find and modify apps\"\n  \"/apps/{appId}/live\":\n    post:\n      description: |\n        - This method is called on behalf of a developer.\n      parameters:\n        - description: The id of the App to be changed\n          in: path\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The unique id of the developer that is changing this AppVersion\n          in: query\n          name: developerId\n          required: true\n          schema:\n            type: string\n        - description: The new version of the live App\n          in: query\n          name: version\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - App is not found\n      summary: Change the live app to another, previously approved version\n      tags:\n        - \"apps : Find and modify apps\"\n  \"/apps/{appId}/publish\":\n    post:\n      description: |\n        - This method is called on behalf of a developer. \n        - Only effects the current working version of the app.\n      parameters:\n        - description: The id of the app to be published\n          in: path\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The unique id of the developer that is modifying this app\n          in: query\n          name: developerId\n          required: true\n          schema:\n            type: string\n        - description: The version of the app to be published\n          in: query\n          name: version\n          required: true\n          schema:\n            type: integer\n        - description: If true, this AppVersion is automatically approved and becomes immediately available to end users\n          in: query\n          name: autoApprove\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"202\":\n          description: Accepted - Publishing succeeded but there are restrictions\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - App was not found\n        \"409\":\n          description: Conflict - An app with that name already exists\n      summary: Publishes the current working version of the app to the marketplace\n      tags:\n        - \"apps : Find and modify apps\"\n  \"/apps/{appId}/versions/{version}\":\n    delete:\n      description: |\n        - This method is called on behalf of a developer.\n      parameters:\n        - description: The id of the App to be removed\n          in: path\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The version of the App to be removed\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n        - description: The unique id of the developer that is removing this app\n          in: query\n          name: developerId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"404\":\n          description: Not Found - App is not found\n      summary: Removes AppVersion\n      tags:\n        - \"apps : Find and modify apps\"\n    get:\n      description: |\n        - Only returns AppVersions owned by this developer\n      parameters:\n        - description: The id of the App to be located\n          in: path\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The version number of the app\n          in: path\n          name: version\n          required: true\n          schema:\n            type: integer\n        - description: The unique id of the developer that is requesting this resource\n          in: query\n          name: developerId\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - The App or version number was not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/AppVersion\"\n          description: OK\n      summary: Returns a single AppVersion\n      tags:\n        - \"apps : Find and modify apps\"\n    patch:\n      description: |\n        - This method is called on behalf of a developer.\n        - Price and is required if the model is 'single' or 'recurring'\n        - Returns the newly updated app\n        - This endpoint updates only the fields provided in the request (relative update). In contrast, the POST version of this method replaces the entire object to match the request (absolute update). \n      parameters:\n        - description: The id of the App to be updated\n          in: path\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The version of the App to be updated\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n        - description: The unique id of the developer that is updating this app\n          in: query\n          name: developerId\n          required: true\n          schema:\n            type: string\n        - description: The name of the app\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n        - description: The type for this app\n          in: query\n          name: type\n          required: false\n          schema:\n            type: string\n        - description: A JSON object representing the pricing model type for this app\n          in: query\n          name: model\n          required: false\n          schema:\n            type: string\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n        - description: A custom set of app attributes defined by the administrator and attached to this app\n          in: query\n          name: attributes\n          required: false\n          schema:\n            type: string\n        - description: \"JSON object to restrict users from purchasing or viewing this app. Example: {'view':{'country':['Canada','Mexico']},'purchase':{'country':['Canada','Mexico']}} restricts users from canada and mexico from viewing or purchasing this app\"\n          in: query\n          name: restrict\n          required: false\n          schema:\n            type: string\n        - description: \"JSON object to allow users to purchase or view this app. Example: {'purchase':{'country':['Canada','Mexico']}} allows only users from canada and mexico to purchase this app\"\n          in: query\n          name: allow\n          required: false\n          schema:\n            type: string\n        - description: JSON array of data access requirements\n          in: query\n          name: access\n          required: false\n          schema:\n            type: string\n        - description: False if updates should skip the approval process and be available immediately. Default is True\n          in: query\n          name: approvalRequired\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - App is not found\n        \"409\":\n          description: Already Exists - An app with this name already exists\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/AppVersion\"\n          description: OK\n      summary: Updates the app fields or creates a new version\n      tags:\n        - \"apps : Find and modify apps\"\n    post:\n      description: |\n        - This method is called on behalf of a developer.\n        - Price and is required if the model is 'single' or 'recurring'\n        - Returns the newly updated app\n        - This endpoint replaces the entire object to match the request (absolute update). In contrast, the PATCH version of this endpoint updates only the fields provided in the request (relative update).\n      parameters:\n        - description: The id of the App to be updated\n          in: path\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The version of the App to be updated\n          in: path\n          name: version\n          required: true\n          schema:\n            type: string\n        - description: The unique id of the developer that is updating this app\n          in: query\n          name: developerId\n          required: true\n          schema:\n            type: string\n        - description: The name of the app\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n        - description: The type for this app\n          in: query\n          name: type\n          required: false\n          schema:\n            type: string\n        - description: A JSON object representing the pricing model type for this app\n          in: query\n          name: model\n          required: false\n          schema:\n            type: string\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n        - description: A custom set of app attributes defined by the administrator and attached to this app\n          in: query\n          name: attributes\n          required: false\n          schema:\n            type: string\n        - description: \"JSON object to restrict users from purchasing or viewing this app. Example: {'view':{'country':['Canada','Mexico']},'purchase':{'country':['Canada','Mexico']}} restricts users from canada and mexico from viewing or purchasing this app\"\n          in: query\n          name: restrict\n          required: false\n          schema:\n            type: string\n        - description: \"JSON object to allow users to purchase or view this app. Example: {'purchase':{'country':['Canada','Mexico']}} allows only users from canada and mexico to purchase this app\"\n          in: query\n          name: allow\n          required: false\n          schema:\n            type: string\n        - description: JSON array of data access requirements\n          in: query\n          name: access\n          required: false\n          schema:\n            type: string\n        - description: False if updates should skip the approval process and be available immediately. Default is True\n          in: query\n          name: approvalRequired\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - App is not found\n        \"409\":\n          description: Already Exists - An app with this name already exists\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/AppVersion\"\n          description: OK\n      summary: Updates the app or creates a new version\n      tags:\n        - \"apps : Find and modify apps\"\n  \"/apps/{appId}/versions/{version}/status\":\n    post:\n      description: |\n        Only certain status changes are allowed. For instance, a developer is only able to suspend and unsuspend their app (which must already be approved). See here for a state change diagram of allowed status changes for administrators: https://support.openchannel.io/documentation/api/#415-apps-status-change\n      parameters:\n        - description: The id of the App to be updated\n          in: path\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The version of the App to be updated\n          in: path\n          name: version\n          required: true\n          schema:\n            type: integer\n        - description: The unique id of the developer that is modifying this app\n          in: query\n          name: developerId\n          required: false\n          schema:\n            type: string\n        - description: The new status for this app. Can be either 'inReview', 'approved', 'suspended' or 'rejected'\n          in: query\n          name: status\n          required: false\n          schema:\n            enum:\n              - inReview\n              - approved\n              - suspended\n              - rejected\n            type: string\n        - description: The role initiating this status change. Can be either 'developer' or 'administrator' (default)\n          in: query\n          name: modifiedBy\n          required: false\n          schema:\n            default: administrator\n            enum:\n              - developer\n              - administrator\n            type: string\n        - description: The reason for this status change\n          in: query\n          name: reason\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - App is not found\n        \"412\":\n          description: Precondition Failed - The app's new status is not valid because of the app's current status\n      summary: Allows a developer or administrator to change the status of apps\n      tags:\n        - \"apps : Find and modify apps\"\n  \"/custom-gateway/payment/{ownershipId}\":\n    post:\n      description: |\n        - Results are returned for the market provided within the basic authentication credentials \n        - Payments must be enabled and 'Custom' must be selected as the gateway in order to use this API endpoint\n      parameters:\n        - description: The id of the ownership record involved in this transaction\n          in: path\n          name: ownershipId\n          required: true\n          schema:\n            type: string\n        - description: The total amount paid in cents\n          in: query\n          name: amount\n          required: true\n          schema:\n            type: integer\n        - description: The date (in milliseconds) of when this payment was made\n          in: query\n          name: date\n          required: false\n          schema:\n            format: int64\n            type: integer\n        - description: The fee (in cents) paid to a payment processors or third parties to process this payment. Default is 0.\n          in: query\n          name: feeAmount\n          required: false\n          schema:\n            type: integer\n        - description: The amount (in cents) paid to the marketplace owner as a commission for the purchase of this app. Defaults based on the commission amount configured for this marketplace.\n          in: query\n          name: marketplaceAmount\n          required: false\n          schema:\n            type: integer\n        - description: The amount (in cents) paid to the owner of the app. Defaults based on the commission amount configured for this marketplace.\n          in: query\n          name: developerAmount\n          required: false\n          schema:\n            type: integer\n        - description: A custom JSON object to attach to this transaction\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"412\":\n          description: Precondition Failed - Payments must be enabled and 'Custom' must be selected as the gateway in order to use this API endpoint\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Transaction\"\n          description: OK\n      summary: Adds a payment for an app on behalf of a user\n      tags:\n        - \"custom-gateway : Process payments and refunds\"\n  \"/custom-gateway/refund/{ownershipId}\":\n    post:\n      description: |\n        - Results are returned for the market provided within the basic authentication credentials\n        - Payments must be enabled and 'Custom' must be selected as the gateway in order to use this API endpoint\n      parameters:\n        - description: The id of the ownership record involved in this transaction\n          in: path\n          name: ownershipId\n          required: true\n          schema:\n            type: string\n        - description: The total amount refunded in cents\n          in: query\n          name: amount\n          required: true\n          schema:\n            type: integer\n        - description: The date (in milliseconds) of when this refund was made\n          in: query\n          name: date\n          required: false\n          schema:\n            format: int64\n            type: integer\n        - description: The fee (in cents) recovered from a payment processor or third party to process this payment. The default value is 0\n          in: query\n          name: feeAmount\n          required: false\n          schema:\n            type: integer\n        - description: The amount (in cents) recovered from the marketplace owner as a commission refund for the purchase of this app\n          in: query\n          name: marketplaceAmount\n          required: false\n          schema:\n            type: integer\n        - description: The amount (in cents) recovered from the owner of the app\n          in: query\n          name: developerAmount\n          required: false\n          schema:\n            type: integer\n        - description: A custom JSON object to attach to this transaction\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"412\":\n          description: Precondition Failed - Payments must be enabled and 'Custom' must be selected as the gateway in order to use this API endpoint\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Transaction\"\n          description: OK\n      summary: Fully or partially refund payment for an app on behalf of a user\n      tags:\n        - \"custom-gateway : Process payments and refunds\"\n  /developerAccounts:\n    get:\n      description: |\n        - Results are paginated and the default is value is 1000 if no limit is provided\n      parameters:\n        - description: \"A query document. Example: {'name':'NASA'} matches all the developerAccounts that have the name 'NASA'\"\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n        - description: \"A sort document. Example: {'name':1} sorts the results by name in ascending order\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n        - description: The result set page number to be returned\n          in: query\n          name: pageNumber\n          required: false\n          schema:\n            type: integer\n        - description: The maximum number of results to return per page\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/DeveloperAccountPages\"\n          description: OK\n      summary: Returns a paginated list of developerAccounts\n      tags:\n        - \"developerAccounts : Find and modify developer accounts\"\n  \"/developerAccounts/{developerAccountId}\":\n    delete:\n      parameters:\n        - description: The id of the developer account to be updated\n          in: path\n          name: developerAccountId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          description: OK\n      summary: Removes the developer account\n      tags:\n        - \"developerAccounts : Find and modify developer accounts\"\n    get:\n      parameters:\n        - description: The id of the developer account to be located\n          in: path\n          name: developerAccountId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - Developer account is not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/DeveloperAccount\"\n          description: OK\n      summary: Returns a single developer account\n      tags:\n        - \"developerAccounts : Find and modify developer accounts\"\n    patch:\n      parameters:\n        - description: The id of the developer account to be updated\n          in: path\n          name: developerAccountId\n          required: true\n          schema:\n            type: string\n        - description: The id of the developer that this account belongs to\n          in: query\n          name: developerId\n          required: true\n          schema:\n            type: string\n        - description: The contact email address\n          in: query\n          name: email\n          required: false\n          schema:\n            type: string\n        - description: The name for the account\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - The developer is not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/DeveloperAccount\"\n          description: OK\n      summary: Updates the developer account fields\n      tags:\n        - \"developerAccounts : Find and modify developer accounts\"\n    post:\n      parameters:\n        - description: The id of the developer account to be updated\n          in: path\n          name: developerAccountId\n          required: true\n          schema:\n            type: string\n        - description: The id of the developer that this account belongs to\n          in: query\n          name: developerId\n          required: true\n          schema:\n            type: string\n        - description: The contact email address\n          in: query\n          name: email\n          required: false\n          schema:\n            type: string\n        - description: The name for the account\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/DeveloperAccount\"\n          description: OK\n      summary: Updates the developer account or adds the developer account if it doesn't exist\n      tags:\n        - \"developerAccounts : Find and modify developer accounts\"\n  /developers:\n    get:\n      description: |\n        - Results are paginated and the default is value is 100 if no limit is provided\n      parameters:\n        - description: \"A query document. Example: {'name':'John'} matches all the developers that have the name 'John'\"\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n        - description: \"A sort document. Example: {'name':1} sorts the results by name in ascending order\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n        - description: The result set page number to be returned\n          in: query\n          name: pageNumber\n          required: false\n          schema:\n            type: integer\n        - description: The maximum number of results to return per page\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/DeveloperPages\"\n          description: OK\n      summary: Returns a paginated list of developers\n      tags:\n        - \"developers : Find and modify developers\"\n  \"/developers/{developerId}\":\n    delete:\n      parameters:\n        - description: The id of the developer to be removed\n          in: path\n          name: developerId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - Developer is not found\n        default:\n          description: OK\n      summary: Removes a single developer\n      tags:\n        - \"developers : Find and modify developers\"\n    get:\n      parameters:\n        - description: The id of the developer to be located\n          in: path\n          name: developerId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - Developer is not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Developer\"\n          description: OK\n      summary: Returns a single developer\n      tags:\n        - \"developers : Find and modify developers\"\n    patch:\n      parameters:\n        - description: The id of the developer to be located\n          in: path\n          name: developerId\n          required: true\n          schema:\n            type: string\n        - description: The type for this developer\n          in: query\n          name: type\n          required: false\n          schema:\n            type: string\n        - description: The developer's email\n          in: query\n          name: email\n          required: false\n          schema:\n            type: string\n        - description: The developer's username\n          in: query\n          name: username\n          required: false\n          schema:\n            type: string\n        - description: The developer's name\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - The developer is not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Developer\"\n          description: OK\n      summary: Updates the developer fields\n      tags:\n        - \"developers : Find and modify developers\"\n    post:\n      parameters:\n        - description: The id of the developer to be located\n          in: path\n          name: developerId\n          required: true\n          schema:\n            type: string\n        - description: The type for this developer\n          in: query\n          name: type\n          required: false\n          schema:\n            type: string\n        - description: The developer's email\n          in: query\n          name: email\n          required: false\n          schema:\n            type: string\n        - description: The developer's username\n          in: query\n          name: username\n          required: false\n          schema:\n            type: string\n        - description: The developer's name\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Developer\"\n          description: OK\n      summary: Updates the developer record or adds the developer if it doesn't exist\n      tags:\n        - \"developers : Find and modify developers\"\n  \"/events/{eventId}\":\n    get:\n      description: |\n        - Results are returned for the market provided within the basic authentication credentials\n      parameters:\n        - description: The id of the event\n          in: path\n          name: eventId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - The event was not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Event\"\n          description: OK\n      summary: Returns an event\n      tags:\n        - \"events : Find events\"\n  /files:\n    get:\n      parameters:\n        - description: \"A query document. Example: {'name':'file.txt'} matches all the files that have the name 'file.txt'\"\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n        - description: \"A sort document. Example: {'name':1} sorts the results by name in ascending order\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n        - description: The result set page number to be returned\n          in: query\n          name: pageNumber\n          required: false\n          schema:\n            type: integer\n        - description: The maximum number of results to return per page\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/File\"\n          description: OK\n      summary: Returns a paginated list of files\n      tags:\n        - \"files : Upload files \"\n    post:\n      description: |\n        - WARNING: File URLs or fileIds must be stored somewhere within the customData field for an app, review, developer or user. Unused files will be removed after a few days. \n        - This method is called on behalf of a developer.\n      parameters:\n        - description: If true, this file will be protected as a private file and require the generation of a signed URL in order to download using the Download File API. The default is false.\n          in: query\n          name: isPrivate\n          required: false\n          schema:\n            type: boolean\n        - description: A comma separated list of hashes to return in order to verify file integrity.\n          in: query\n          name: hash\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                file:\n                  description: The file to be uploaded\n                  format: binary\n                  type: string\n              required:\n                - file\n              type: object\n        required: true\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/File\"\n          description: OK\n      summary: Uploads a file.\n      tags:\n        - \"files : Upload files \"\n  /files/byIdOrUrl:\n    get:\n      parameters:\n        - description: The fileId or fileUrl of the file to be returned\n          in: query\n          name: fileIdOrUrl\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/File\"\n          description: OK\n      summary: Get the details for a file.\n      tags:\n        - \"files : Upload files \"\n  /files/download:\n    get:\n      parameters:\n        - description: The URL of the file to be uploaded\n          in: query\n          name: fileId\n          required: true\n          schema:\n            type: string\n        - description: The number of seconds that this signed URL should be valid for. The default is 60.\n          in: query\n          name: validSeconds\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - The file was not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/FileDownload\"\n          description: OK\n      summary: A signed URL for downloading a private file can be returned by providing the fileId.\n      tags:\n        - \"files : Upload files \"\n  /files/url:\n    post:\n      description: |\n        - WARNING: File URLs or fileIds must be stored somewhere within the customData field for an app, review, developer or user. Unused files will be removed after a few days.\n        - This method is called on behalf of a developer.\n      parameters:\n        - description: The URL of the file to be uploaded\n          in: query\n          name: url\n          required: true\n          schema:\n            type: string\n        - description: If true, this file will be protected as a private file and require the generation of a signed URL in order to download using the Download File API. The default is false.\n          in: query\n          name: isPrivate\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/File\"\n          description: OK\n      summary: Uploads a file from a URL\n      tags:\n        - \"files : Upload files \"\n  /markets/this:\n    get:\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Market\"\n          description: OK\n      summary: Returns the current marketplace\n      tags:\n        - \"markets : This marketplace\"\n  /ownership:\n    get:\n      description: \" - Results are returned for the market provided within the basic authentication credentials \"\n      parameters:\n        - description: \"A query document. Example: {'userId':'12'} matches all the ownership records that have the userId '12'.\"\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n        - description: \"A sort document. Example: {'date':1} sorts the results by date in ascending order\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n        - description: The result set page number to be returned\n          in: query\n          name: pageNumber\n          required: false\n          schema:\n            type: integer\n        - description: The maximum number of results to return per page\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/OwnershipPages\"\n          description: OK\n      summary: Returns a paginated list of app licenses\n      tags:\n        - \"ownership : Find ownership\"\n  /ownership/install:\n    post:\n      description: \" - This method is called on behalf of a user - This method requires either a modelId from the app or a custom model - User data and statistics are recorded when this method is called \"\n      parameters:\n        - description: The id of the App being owned\n          in: query\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The id of the User requesting to own the App\n          in: query\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: The id of the model associated with this ownership request\n          in: query\n          name: modelId\n          required: false\n          schema:\n            type: string\n        - description: A custom model that will override the app's default model for this install\n          in: query\n          name: model\n          required: false\n          schema:\n            type: string\n        - description: A custom JSON object to attach to this ownership record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"402\":\n          description: Payment Required - The App requires a user with pre-set payment details\n        \"404\":\n          description: Not Found - The App is either restricted or was not found\n        \"409\":\n          description: Already Exists - The User already owns this app (or is already participating in a trial)\n        \"412\":\n          description: Payment Failed - The User's payment details are invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Ownership\"\n          description: OK\n      summary: Aquires an app license for a user (installs app)\n      tags:\n        - \"ownership : Find ownership\"\n  \"/ownership/uninstall/{ownershipId}\":\n    post:\n      description: \" - This method is called on behalf of a user - User data and statistics are recorded when this method is called \"\n      parameters:\n        - description: The id of the ownership to be unintalled\n          in: path\n          name: ownershipId\n          required: true\n          schema:\n            type: string\n        - description: The id of the User requesting to uninstall the App\n          in: query\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: True if this app will require payment to be re-installed. Default is false\n          in: query\n          name: cancelOwnership\n          required: false\n          schema:\n            type: boolean\n        - description: A custom JSON object to attach to this ownership record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - App is not found\n        \"409\":\n          description: App is not owned by this user\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Ownership\"\n          description: OK\n      summary: Uninstalls a license for a particular user and app (uninstalls app)\n      tags:\n        - \"ownership : Find ownership\"\n  \"/ownership/{ownershipId}\":\n    get:\n      description: \" - Results are returned for the market provided within the basic authentication credentials \"\n      parameters:\n        - description: The id belonging to the ownership record\n          in: path\n          name: ownershipId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Ownership\"\n          description: OK\n      summary: Returns an ownership record\n      tags:\n        - \"ownership : Find ownership\"\n    patch:\n      description: \" - Results are returned for the market provided within the basic authentication credentials \"\n      parameters:\n        - description: The id of the ownership to be updated\n          in: path\n          name: ownershipId\n          required: true\n          schema:\n            type: string\n        - description: Custom JSON object that will be attached to this ownership record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n        - description: The date (in millis) of when this app ownership expires\n          in: query\n          name: expires\n          required: false\n          schema:\n            format: int64\n            type: integer\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - The ownership was not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Ownership\"\n          description: OK\n      summary: Updates ownership fields\n      tags:\n        - \"ownership : Find ownership\"\n    post:\n      description: \" - Results are returned for the market provided within the basic authentication credentials \"\n      parameters:\n        - description: The id of the ownership to be updated\n          in: path\n          name: ownershipId\n          required: true\n          schema:\n            type: string\n        - description: Custom JSON object that will be attached to this ownership record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n        - description: The date (in millis) of when this app ownership expires\n          in: query\n          name: expires\n          required: false\n          schema:\n            format: int64\n            type: integer\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Ownership\"\n          description: OK\n      summary: Updates an ownership record\n      tags:\n        - \"ownership : Find ownership\"\n  \"/permission/apps/{appId}\":\n    delete:\n      parameters:\n        - description: The id of the app\n          in: path\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The id of the user\n          in: query\n          name: userId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - The access is not found\n      summary: Removes permission that allows the app to access this user's data\n      tags:\n        - \"permission : Add and remove permissions \"\n    get:\n      parameters:\n        - description: The id of the app\n          in: path\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The id of the user\n          in: query\n          name: userId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - The access is not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Access\"\n          description: OK\n      summary: Returns permission that allows the app to access this user's data\n      tags:\n        - \"permission : Add and remove permissions \"\n    post:\n      parameters:\n        - description: The id of the app\n          in: path\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The id of the user\n          in: query\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: The time (in milliseconds) of when the user agreed to the access request\n          in: query\n          name: date\n          required: false\n          schema:\n            format: int64\n            type: integer\n        - description: The ip address of the user agreeing to the access request\n          in: query\n          name: ip\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - App not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Access\"\n          description: OK\n      summary: Adds permission to allow the app to access this user's data\n      tags:\n        - \"permission : Add and remove permissions \"\n  /reviews:\n    get:\n      description: |\n        - Results are paginated and the default is value is 100 if no limit is provided\n      parameters:\n        - description: \"A query document. Example: {'rating': 500} matches all the reviews that have a rating of 500. \"\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n        - description: \"A sort document. Example: {'rating':1} sorts the results by rating in ascending order\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n        - description: The result set page number to be returned\n          in: query\n          name: pageNumber\n          required: false\n          schema:\n            type: integer\n        - description: The maximum number of results to return per page\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/ReviewPages\"\n          description: OK\n      summary: Find reviews for a particular App and marketplace. Results are automatically paginated when limit is set\n      tags:\n        - \"reviews : Find and modify reviews \"\n    post:\n      description: |\n        - Only authenticated users are able to post reviews\n        - Returns the newly created review\n      parameters:\n        - description: The id of the App that will own this review\n          in: query\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The id of the User that is posting this review\n          in: query\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: The id of the User account that is posting this review\n          in: query\n          name: userAccountId\n          required: false\n          schema:\n            type: string\n        - description: The review's headline. Limited to 50 characters.\n          in: query\n          name: headline\n          required: true\n          schema:\n            type: string\n        - description: The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars)\n          in: query\n          name: rating\n          required: true\n          schema:\n            maximum: 500\n            minimum: 0\n            type: integer\n        - description: The review's description. Limited to 2000 characters.\n          in: query\n          name: description\n          required: true\n          schema:\n            type: string\n        - description: The type for this review\n          in: query\n          name: type\n          required: false\n          schema:\n            type: string\n        - description: True if a review can be created only by a user that has owned the app. The default is True.\n          in: query\n          name: mustOwnApp\n          required: false\n          schema:\n            type: boolean\n        - description: True if the review should be automatically approved. The default is False.\n          in: query\n          name: autoApprove\n          required: false\n          schema:\n            type: boolean\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"403\":\n          description: Forbidden - Users must have owned the app before they can post a review; Anonymous users cannot post reviews\n        \"409\":\n          description: Already Exists - The User has already reviewed this app\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Review\"\n          description: OK\n      summary: Post a review from a User and returns the new post\n      tags:\n        - \"reviews : Find and modify reviews \"\n  \"/reviews/{reviewId}\":\n    delete:\n      description: |\n        - Only the review author is able to remove their review\n      parameters:\n        - description: The id of the Review to be updated\n          in: path\n          name: reviewId\n          required: true\n          schema:\n            type: string\n        - description: The id of the User that is removing this review\n          in: query\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: The id of the User account that is emoving this review\n          in: query\n          name: userAccountId\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n      summary: Remove a review\n      tags:\n        - \"reviews : Find and modify reviews \"\n    get:\n      parameters:\n        - description: The id of the review to be located\n          in: path\n          name: reviewId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - Review is not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Review\"\n          description: OK\n      summary: Find a Review within a particular App and marketplace\n      tags:\n        - \"reviews : Find and modify reviews \"\n    patch:\n      description: |\n        - Only the review author is able to update their review\n        - Returns the newly updated review\n      parameters:\n        - description: The id of the Review to be updated\n          in: path\n          name: reviewId\n          required: true\n          schema:\n            type: string\n        - description: The id of the User that is updating this review\n          in: query\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: The id of the User account that is posting this review\n          in: query\n          name: userAccountId\n          required: false\n          schema:\n            type: string\n        - description: The review's headline. Limited to 50 characters.\n          in: query\n          name: headline\n          required: false\n          schema:\n            type: string\n        - description: The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars)\n          in: query\n          name: rating\n          required: false\n          schema:\n            maximum: 500\n            minimum: 0\n            type: integer\n        - description: The review's description. Limited to 2000 characters.\n          in: query\n          name: description\n          required: false\n          schema:\n            type: string\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"403\":\n          description: Forbidden - Anonymous users cannot update reviews\n        \"404\":\n          description: Not Found - This review was not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Review\"\n          description: OK\n      summary: Update a review fields\n      tags:\n        - \"reviews : Find and modify reviews \"\n    post:\n      description: |\n        - Only the review author is able to update their review\n        - Returns the newly updated review\n      parameters:\n        - description: The id of the Review to be updated\n          in: path\n          name: reviewId\n          required: true\n          schema:\n            type: string\n        - description: The id of the User that is updating this review\n          in: query\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: The id of the User account that is posting this review\n          in: query\n          name: userAccountId\n          required: true\n          schema:\n            type: string\n        - description: The review's headline. Limited to 50 characters.\n          in: query\n          name: headline\n          required: true\n          schema:\n            type: string\n        - description: The rating given within this review. The rating is represented as an integer between 0 and 500 (0 - 5 stars)\n          in: query\n          name: rating\n          required: true\n          schema:\n            maximum: 500\n            minimum: 0\n            type: integer\n        - description: The review's description. Limited to 2000 characters.\n          in: query\n          name: description\n          required: true\n          schema:\n            type: string\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"403\":\n          description: Forbidden - Anonymous users cannot update reviews\n        \"404\":\n          description: Not Found - This review was not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Review\"\n          description: OK\n      summary: Update a review from a User and returns the new post\n      tags:\n        - \"reviews : Find and modify reviews \"\n  \"/stats/increment/{field}\":\n    post:\n      description: increment a statistics field\n      parameters:\n        - description: The field to be incremented\n          in: path\n          name: field\n          required: true\n          schema:\n            type: string\n        - description: The id of the app associated with this statistic value\n          in: query\n          name: appId\n          required: true\n          schema:\n            type: string\n        - description: The id of the user that is performing the action\n          in: query\n          name: userId\n          required: false\n          schema:\n            type: string\n        - description: The increment amount. Default is 1 if no value is provided.\n          in: query\n          name: value\n          required: false\n          schema:\n            type: integer\n        - description: The date (in millis) for when this increment occurred. The default is the current date if no value is provided.\n          in: query\n          name: date\n          required: false\n          schema:\n            format: int64\n            type: integer\n      responses:\n        default:\n          description: OK\n      summary: Increments a statistics field\n      tags:\n        - \"stats: Find marketplace statistics\"\n  \"/stats/series/{period}/{fields}\":\n    get:\n      description: \"Return a timeseries nested array containing date and value. Example: [[1406520000000,2],[1406606400000,34],[1406692800000,245],...]\"\n      parameters:\n        - description: The period for the series (day or month)\n          in: path\n          name: period\n          required: true\n          schema:\n            enum:\n              - day\n              - month\n            type: string\n        - description: The field to be graphed. This also be a comma separated list of fields and the result will be a single timeseries containing the sum of all fields.\n          in: path\n          name: fields\n          required: true\n          schema:\n            type: string\n        - description: The start date for this series (in millis)\n          in: query\n          name: start\n          required: false\n          schema:\n            format: int64\n            type: integer\n        - description: The end date for this series (in millis)\n          in: query\n          name: end\n          required: false\n          schema:\n            format: int64\n            type: integer\n        - description: \"A query document. Example: {'developerId': '112'} matches all the apps that have the developer with id 112\"\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          content:\n            \"*/*\":\n              schema:\n                items:\n                  items:\n                    type: object\n                  type: array\n                type: array\n          description: OK\n      summary: Return a timeseries for a particular field\n      tags:\n        - \"stats: Find marketplace statistics\"\n  /stats/total:\n    get:\n      parameters:\n        - description: \"A comma seperated list of all the fields to be returned in the total (available by default: dislikes, likes, reviews, totalSales, developerSales, marketplaceSales, downloads, ownerships, views)\"\n          in: query\n          name: fields\n          required: true\n          schema:\n            type: string\n        - description: \"A query document. Example: {'developerId': '112'} matches all the apps that have the developer with id 112\"\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n        - description: The start date for this total (in millis)\n          in: query\n          name: start\n          required: false\n          schema:\n            format: int64\n            type: integer\n        - description: The end date for this total (in millis)\n          in: query\n          name: end\n          required: false\n          schema:\n            format: int64\n            type: integer\n      responses:\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Total\"\n          description: OK\n      summary: Returns the total number of events for a particular field.\n      tags:\n        - \"stats: Find marketplace statistics\"\n  \"/stripe-gateway/developer/{developerId}/accounts\":\n    get:\n      description: |\n        - Results are returned for the market provided within the basic authentication credentials\n      parameters:\n        - description: The id of the developer connecting their Stripe account\n          in: path\n          name: developerId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"412\":\n          description: Precondition Failed - Payments must be enabled and 'Stripe' must be selected as the gateway in order to use this API endpoint\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Accounts\"\n          description: OK\n      summary: Returns a developers connected Stripe accounts\n      tags:\n        - \"stripe-gateway : Process payments and refunds \"\n    post:\n      description: |\n        - Results are returned for the market provided within the basic authentication credentials \n        - The URL generated by this method is only valid for 48 hours.\n      parameters:\n        - description: The id of the developer connecting their Stripe account\n          in: path\n          name: developerId\n          required: true\n          schema:\n            type: string\n        - description: The URL to redirect this developer after they have connected their Stripe account\n          in: query\n          name: redirectUrl\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"412\":\n          description: Precondition Failed - Payments must be enabled and 'Stripe' must be selected as the gateway in order to use this API endpoint\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/DeveloperToken\"\n          description: OK\n      summary: Generate a temporary URL to allow a developer to connect their Stripe account\n      tags:\n        - \"stripe-gateway : Process payments and refunds \"\n  \"/stripe-gateway/developer/{developerId}/accounts/{stripeId}\":\n    delete:\n      description: |\n        \n        - Results are returned for the market provided within the basic authentication credentials\n      parameters:\n        - description: The id of the developer disconnecting their Stripe account\n          in: path\n          name: developerId\n          required: true\n          schema:\n            type: string\n        - description: The id of the stripe account to disconnect\n          in: path\n          name: stripeId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"412\":\n          description: Precondition Failed - Payments must be enabled and 'Stripe' must be selected as the gateway in order to use this API endpoint\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Accounts\"\n          description: OK\n      summary: Disconnects a developer's Stripe account\n      tags:\n        - \"stripe-gateway : Process payments and refunds \"\n  \"/stripe-gateway/user/{userId}/cards\":\n    get:\n      description: |\n        - Results are returned for the market provided within the basic authentication credentials\n      parameters:\n        - description: The id of the user requesting their credit cards\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"412\":\n          description: Precondition Failed - Payments must be enabled and 'Stripe' must be selected as the gateway in order to use this API endpoint\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Cards\"\n          description: OK\n      summary: Returns credit cards for this user\n      tags:\n        - \"stripe-gateway : Process payments and refunds \"\n    post:\n      description: |\n        - Results are returned for the market provided within the basic authentication credentials\n      parameters:\n        - description: The id of the user adding their credit card\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: The Stripe token returned by the Stripe.js Stripe.card.createToken call\n          in: query\n          name: token\n          required: true\n          schema:\n            type: string\n        - description: Set to true if this should be set to be the default credit card\n          in: query\n          name: isDefault\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"412\":\n          description: Precondition Failed - Payments must be enabled and 'Stripe' must be selected as the gateway in order to use this API endpoint\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Cards\"\n          description: OK\n      summary: Adds credit card for this user\n      tags:\n        - \"stripe-gateway : Process payments and refunds \"\n  \"/stripe-gateway/user/{userId}/cards/{cardId}\":\n    delete:\n      parameters:\n        - description: The id of the user removing their credit card\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: The id of the credit card to remove\n          in: path\n          name: cardId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"412\":\n          description: Precondition Failed - Payments must be enabled and 'Stripe' must be selected as the gateway in order to use this API endpoint\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Cards\"\n          description: OK\n      summary: Removes a credit card for a user\n      tags:\n        - \"stripe-gateway : Process payments and refunds \"\n    post:\n      description: |\n        \n        - Results are returned for the market provided within the basic authentication credentials\n      parameters:\n        - description: The id of the user adding their credit card\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: The id of the card to be updated\n          in: path\n          name: cardId\n          required: true\n          schema:\n            type: string\n        - description: Set to true if this should be set to be the default credit card\n          in: query\n          name: isDefault\n          required: false\n          schema:\n            type: boolean\n        - description: The card holder's city\n          in: query\n          name: address_city\n          required: false\n          schema:\n            type: string\n        - description: The card holder's country\n          in: query\n          name: address_country\n          required: false\n          schema:\n            type: string\n        - description: The card holder's street address\n          in: query\n          name: address_line1\n          required: false\n          schema:\n            type: string\n        - description: The card holder's street address\n          in: query\n          name: address_line2\n          required: false\n          schema:\n            type: string\n        - description: The card holder's city state/province\n          in: query\n          name: address_state\n          required: false\n          schema:\n            type: string\n        - description: The card holder's zip/postal code\n          in: query\n          name: address_zip\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"412\":\n          description: Precondition Failed - Payments must be enabled and 'Stripe' must be selected as the gateway in order to use this API endpoint\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Cards\"\n          description: OK\n      summary: Updates a credit card for this user\n      tags:\n        - \"stripe-gateway : Process payments and refunds \"\n  /transactions:\n    get:\n      description: |\n        - Results are paginated and the default is value is 100 if no limit is provided\n      parameters:\n        - description: \"A query document. Example: {'userId':'1'} matches all the transactions that have the userId '1'.\"\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n        - description: \"A sort document. Example: {'date':1} sorts the results by total in ascending order\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n        - description: The result set page number to be returned\n          in: query\n          name: pageNumber\n          required: false\n          schema:\n            type: integer\n        - description: The maximum number of results to return per page\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/TransactionPages\"\n          description: OK\n      summary: Returns a paginated list of transactions\n      tags:\n        - \"transactions : Find payments and refunds \"\n  \"/transactions/{transactionId}\":\n    delete:\n      description: |\n        - Results are returned for the market provided within the basic authentication credentials\n      parameters:\n        - description: The id of the transaction to be deleted\n          in: path\n          name: transactionId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n      summary: Deleted a transaction\n      tags:\n        - \"transactions : Find payments and refunds \"\n    get:\n      description: |\n        - Results are returned for the market provided within the basic authentication credentials\n      parameters:\n        - description: The id of the transaction to return\n          in: path\n          name: transactionId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n      summary: Returns a transaction\n      tags:\n        - \"transactions : Find payments and refunds \"\n    post:\n      description: |\n        - Results are returned for the market provided within the basic authentication credentials\n      parameters:\n        - description: The id of the transaction to be updated\n          in: path\n          name: transactionId\n          required: true\n          schema:\n            type: string\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Transaction\"\n          description: OK\n      summary: Updates a transaction\n      tags:\n        - \"transactions : Find payments and refunds \"\n  /userAccounts:\n    get:\n      description: |\n        - Results are paginated and the default is value is 1000 if no limit is provided\n      parameters:\n        - description: \"A query document. Example: {'name':'NASA'} matches all the userAccounts that have the name 'NASA'\"\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n        - description: \"A sort document. Example: {'name':1} sorts the results by name in ascending order\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n        - description: The result set page number to be returned\n          in: query\n          name: pageNumber\n          required: false\n          schema:\n            type: integer\n        - description: The maximum number of results to return per page\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/UserAccountPages\"\n          description: OK\n      summary: Returns a paginated list of userAccounts\n      tags:\n        - \"userAccounts : Find and modify user accounts \"\n  \"/userAccounts/{userAccountId}\":\n    delete:\n      parameters:\n        - description: The id of the user account to be removed\n          in: path\n          name: userAccountId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          description: OK\n      summary: Removes the user account\n      tags:\n        - \"userAccounts : Find and modify user accounts \"\n    get:\n      parameters:\n        - description: The id of the user account to be located\n          in: path\n          name: userAccountId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - Developer account is not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/UserAccount\"\n          description: OK\n      summary: Returns a single user account\n      tags:\n        - \"userAccounts : Find and modify user accounts \"\n    patch:\n      parameters:\n        - description: The id of the user account to be updated\n          in: path\n          name: userAccountId\n          required: true\n          schema:\n            type: string\n        - description: The Id of the user that this account belongs to\n          in: query\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: The contact email address\n          in: query\n          name: email\n          required: false\n          schema:\n            type: string\n        - description: The user account name\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - User account is not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/UserAccount\"\n          description: OK\n      summary: Updates the user account fields\n      tags:\n        - \"userAccounts : Find and modify user accounts \"\n    post:\n      parameters:\n        - description: The id of the user account to be updated\n          in: path\n          name: userAccountId\n          required: true\n          schema:\n            type: string\n        - description: The Id of the user that this account belongs to\n          in: query\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: The contact email address\n          in: query\n          name: email\n          required: false\n          schema:\n            type: string\n        - description: The user account name\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/UserAccount\"\n          description: OK\n      summary: Updates the user account or adds the user account if it doesn't exist\n      tags:\n        - \"userAccounts : Find and modify user accounts \"\n  /users:\n    get:\n      description: |\n        - Results are paginated and the default is value is 100 if no limit is provided\n      parameters:\n        - description: \"A query document. Example: {'name':'John'} matches all the users that have the name 'John'\"\n          in: query\n          name: query\n          required: false\n          schema:\n            type: string\n        - description: \"A sort document. Example: {'name':1} sorts the results by name in ascending order\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            type: string\n        - description: The result set page number to be returned\n          in: query\n          name: pageNumber\n          required: false\n          schema:\n            type: integer\n        - description: The maximum number of results to return per page\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/UserPages\"\n          description: OK\n      summary: Returns a paginated list of users\n      tags:\n        - \"users : Find and modify users \"\n  \"/users/{userId}\":\n    delete:\n      description: |\n        - Results are returned for the market provided within the basic authentication credentials\n      parameters:\n        - description: The id of the user to be removed\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - User is not found\n        default:\n          description: OK\n      summary: Removes a single user\n      tags:\n        - \"users : Find and modify users \"\n    get:\n      description: |\n        - Results are returned for the market provided within the basic authentication credentials\n      parameters:\n        - description: The id of the user to be located\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - User is not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: OK\n      summary: Return a single user\n      tags:\n        - \"users : Find and modify users \"\n    patch:\n      parameters:\n        - description: The id of the user to be updated\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: The type for this user\n          in: query\n          name: type\n          required: false\n          schema:\n            type: string\n        - description: The user's email\n          in: query\n          name: email\n          required: false\n          schema:\n            type: string\n        - description: The user's username\n          in: query\n          name: username\n          required: false\n          schema:\n            type: string\n        - description: The user's name\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        \"404\":\n          description: Not Found - User is not found\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: OK\n      summary: Updates user fields\n      tags:\n        - \"users : Find and modify users \"\n    post:\n      parameters:\n        - description: The id of the user to be updated\n          in: path\n          name: userId\n          required: true\n          schema:\n            type: string\n        - description: The type for this user\n          in: query\n          name: type\n          required: false\n          schema:\n            type: string\n        - description: The user's email\n          in: query\n          name: email\n          required: false\n          schema:\n            type: string\n        - description: The user's username\n          in: query\n          name: username\n          required: false\n          schema:\n            type: string\n        - description: The user's name\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n        - description: A custom JSON object that you can create and attach to this record\n          in: query\n          name: customData\n          required: false\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Bad Request - Required parameters are missing, malformed or invalid\n        default:\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: OK\n      summary: Updates a single user or adds the user if they don't exist\n      tags:\n        - \"users : Find and modify users \"\ncomponents:\n  schemas:\n    Access:\n      description: \"\"\n      properties:\n        access:\n          description: The approved access restrictions for this app\n          items:\n            type: string\n          type: array\n        appId:\n          description: The id of the app that owns this access key\n          type: string\n        date:\n          description: The time (in milliseconds) of when the user agreed to the access request\n          format: int64\n          type: integer\n        ip:\n          description: The ip address of the user agreeing to the access request\n          type: string\n        isValid:\n          description: True if this access is up to date with the current version of the app\n          type: boolean\n        userId:\n          description: The id for this user\n          type: string\n      required:\n        - appId\n        - userId\n        - access\n        - date\n        - ip\n        - isValid\n    Account:\n      description: The connected Stripe account for a developer\n      properties:\n        accountName:\n          description: The name of the Stripe account\n          type: string\n        country:\n          description: The country for this Stripe account\n          type: string\n        defaultCurrency:\n          description: The default currency for this Stripe account\n          type: string\n        stripeId:\n          description: The id of the Stripe account\n          type: string\n      required:\n        - stripeId\n        - accountName\n        - country\n        - defaultCurrency\n    Accounts:\n      description: A developer's connected Stripe accounts\n      properties:\n        accounts:\n          description: An array of connected Stripe accounts\n          items:\n            $ref: \"#/components/schemas/Account\"\n          type: array\n        developerId:\n          description: The id of the developer\n          type: string\n      required:\n        - developerId\n        - accounts\n    App:\n      description: An app\n      properties:\n        access:\n          description: A custom defined list of access requirements\n          items:\n            type: string\n          type: array\n        allow:\n          $ref: \"#/components/schemas/Restrictions\"\n        appId:\n          description: The id of this app\n          type: string\n        attributes:\n          description: A custom defined list of app attributes\n          type: object\n        created:\n          description: The date (in millis) that this app was created\n          format: int64\n          type: integer\n        customData:\n          description: A custom JSON object that you can create and attach to this record\n          type: object\n        developerId:\n          description: The id of the developer that owns this app\n          type: string\n        isLive:\n          description: True if this is the live version of the app\n          type: boolean\n        lastUpdated:\n          description: The date (in millis) that this app was last modified\n          format: int64\n          type: integer\n        model:\n          description: The models that describes the cost and pricing for this app\n          items:\n            $ref: \"#/components/schemas/Model\"\n          type: array\n        name:\n          description: The name of this app\n          type: string\n        ownership:\n          $ref: \"#/components/schemas/Ownership\"\n        randomize:\n          description: A random number that changes hourly and is used for achieving a random sort order when displaying apps\n          type: integer\n        rating:\n          description: The average review rating for this app. Reviews are rated from 100 (one star) to 500 (five star)\n          maximum: 500\n          minimum: 0\n          type: integer\n        restrict:\n          $ref: \"#/components/schemas/Restrictions\"\n        reviewCount:\n          description: The number of approved reviews for this app.\n          type: integer\n        safeName:\n          description: URL safe aliases that can be used to identify this app even after name changes. The current alias is always at position 0.\n          items:\n            type: string\n          type: array\n        statistics:\n          description: A field containing summary stats about the app and is specially designed to allow apps to be sorted by popularity\n          type: object\n        status:\n          $ref: \"#/components/schemas/Status\"\n        submittedDate:\n          description: The date (in millis) that this app was submitted for approval\n          format: int64\n          type: integer\n        type:\n          description: The type for this app\n          type: string\n        version:\n          description: The version number for this app\n          type: integer\n      required:\n        - appId\n        - name\n        - safeName\n        - developerId\n        - model\n        - status\n        - lastUpdated\n        - created\n        - rating\n        - randomize\n        - allow\n        - customData\n        - restrict\n        - version\n        - isLive\n        - attributes\n    AppPages:\n      description: Pages of app results\n      properties:\n        count:\n          description: The total number of results\n          type: integer\n        list:\n          description: An array of apps for the current page\n          items:\n            $ref: \"#/components/schemas/App\"\n          type: array\n        pageNumber:\n          description: The current page number for this result set\n          type: integer\n        pages:\n          description: The total number of pages available for this result set\n          type: integer\n      required:\n        - count\n        - list\n    AppTotal:\n      description: The totals for the app\n      properties:\n        $appId:\n          $ref: \"#/components/schemas/DataTotal\"\n      required:\n        - $appId\n    AppVersion:\n      description: An AppVersion\n      properties:\n        access:\n          description: A custom defined list of access requirements\n          items:\n            type: string\n          type: array\n        allow:\n          $ref: \"#/components/schemas/Restrictions\"\n        appId:\n          description: The id of this app\n          type: string\n        attributes:\n          description: A custom defined list of app attributes\n          type: object\n        created:\n          description: The date (in millis) that this app was created\n          format: int64\n          type: integer\n        customData:\n          description: A custom JSON object that you can create and attach to this record\n          type: object\n        developerId:\n          description: The id of the developer that owns this app\n          type: string\n        isLatestVersion:\n          description: True if this is the latest version of this app\n          type: boolean\n        isLive:\n          description: True if this is the live version of the app\n          type: boolean\n        lastUpdated:\n          description: The date (in millis) that this app was last modified\n          format: int64\n          type: integer\n        model:\n          description: The models that describes the cost and pricing for this app\n          items:\n            $ref: \"#/components/schemas/Model\"\n          type: array\n        name:\n          description: The name of this app\n          type: string\n        parent:\n          $ref: \"#/components/schemas/Parent\"\n        rating:\n          description: The average review rating for this app. Reviews are rated from 100 (one star) to 500 (five star)\n          maximum: 500\n          minimum: 0\n          type: integer\n        restrict:\n          $ref: \"#/components/schemas/Restrictions\"\n        reviewCount:\n          description: The number of approved reviews for this app.\n          type: integer\n        safeName:\n          description: URL safe aliases that can be used to identify this app even after name changes. The current alias is always at position 0.\n          items:\n            type: string\n          type: array\n        status:\n          $ref: \"#/components/schemas/Status\"\n        type:\n          description: The type for this app\n          type: string\n        version:\n          description: The version number for this app\n          type: integer\n      required:\n        - appId\n        - name\n        - safeName\n        - developerId\n        - model\n        - status\n        - lastUpdated\n        - created\n        - allow\n        - parent\n        - customData\n        - restrict\n        - version\n        - isLive\n        - isLatestVersion\n    App_Entry:\n      description: \"\"\n      properties:\n        appId:\n          description: The id of the app involved in this action\n          type: string\n        date:\n          description: The date (in millis) of when this action was performed\n          format: int64\n          type: integer\n      required:\n        - date\n        - appId\n    Attributes:\n      description: An app attribute\n      properties:\n        name:\n          description: The name of this attribute\n          type: string\n        type:\n          description: The type of this attribute\n          enum:\n            - text\n            - select\n            - multi\n          type: string\n        values:\n          description: A comma seperated list of values allowed for this attribute\n          type: string\n      required:\n        - name\n        - type\n    Card:\n      description: \"\"\n      properties:\n        address_city:\n          description: The card holder's city\n          type: string\n        address_country:\n          description: The card holder's country\n          type: string\n        address_line1:\n          description: The card holder's street address\n          type: string\n        address_line2:\n          description: The card holder's street address\n          type: string\n        address_state:\n          description: The card holder's city state/province\n          type: string\n        address_zip:\n          description: The card holder's zip/postal code\n          type: string\n        brand:\n          description: \"The brand of the credit card. Example: Visa\"\n          type: string\n        cardId:\n          description: The id for this credit card\n          type: string\n        exp_month:\n          description: The two digit expiration month\n          type: integer\n        exp_year:\n          description: The four digit expiration year\n          type: integer\n        isDefault:\n          description: True if this is the default credit card\n          type: boolean\n        last4:\n          description: The last 4 digits of the credit card number\n          type: string\n        name:\n          description: The card holder's full name\n          type: string\n      required:\n        - cardId\n        - last4\n        - exp_year\n        - exp_month\n        - brand\n        - name\n        - isDefault\n    Cards:\n      description: A User's credit card details\n      properties:\n        cards:\n          description: An array of credit cards added by this user\n          items:\n            $ref: \"#/components/schemas/Card\"\n          type: array\n        userId:\n          description: The id of this user\n          type: string\n      required:\n        - userId\n        - cards\n    Category:\n      description: The category supported by this category group\n      properties:\n        description:\n          description: The description of this category\n          type: string\n        name:\n          description: The name of this category\n          type: string\n      required:\n        - name\n        - description\n    CategoryGroups:\n      description: The category groups supported by this marketplace\n      properties:\n        categories:\n          description: The categories supported by this category group\n          items:\n            $ref: \"#/components/schemas/Category\"\n          type: array\n        name:\n          description: The name of this category group\n          type: string\n      required:\n        - name\n        - categories\n    DataTotal:\n      description: The totals for the field\n      properties:\n        $field:\n          description: The totals for the field\n          type: integer\n      required:\n        - $appId\n    Developer:\n      description: A Developer\n      properties:\n        created:\n          description: The time (in millis) of when this developer was created\n          type: integer\n        customData:\n          description: A custom JSON object that you can create and attach to this record\n          type: object\n        developerId:\n          description: The id of this developer\n          type: string\n        email:\n          description: The developer's email\n          type: string\n        name:\n          description: The developer's name\n          type: string\n        type:\n          description: The type for this developer\n          type: string\n      required:\n        - developerId\n        - created\n    DeveloperAccount:\n      description: A Developer Account\n      properties:\n        customData:\n          description: A custom JSON object that you can create and attach to this record\n          type: object\n        developerAccountId:\n          description: The id of this developer account\n          type: string\n        developerId:\n          description: The id of the developer that this account belongs to\n          type: string\n        email:\n          description: The contact email address\n          type: string\n        name:\n          description: The name for the account\n          type: string\n      required:\n        - developerAccountId\n        - developerId\n    DeveloperAccountPages:\n      description: Pages of developerAccount results\n      properties:\n        count:\n          description: The total number of results\n          type: integer\n        list:\n          description: An array of developerAccounts for the current page\n          items:\n            $ref: \"#/components/schemas/DeveloperAccount\"\n          type: array\n        pageNumber:\n          description: The current page number for this result set\n          type: integer\n        pages:\n          description: The total number of pages available for this result set\n          type: integer\n      required:\n        - pages\n        - list\n        - pageNumber\n        - count\n    DeveloperPages:\n      description: Pages of developer results\n      properties:\n        count:\n          description: The total number of results\n          type: integer\n        list:\n          description: An array of developers for the current page\n          items:\n            $ref: \"#/components/schemas/Developer\"\n          type: array\n        pageNumber:\n          description: The current page number for this result set\n          type: integer\n        pages:\n          description: The total number of pages available for this result set\n          type: integer\n      required:\n        - pages\n        - list\n        - pageNumber\n        - count\n    DeveloperToken:\n      description: \"\"\n      properties:\n        developerId:\n          description: The id of the developer connecting their Stripe account\n          type: string\n        expires:\n          description: The time (in milliseconds) when this URL expires\n          format: int64\n          type: integer\n        targetUrl:\n          description: The URL that this developer can use to connect their Stripe account\n          type: string\n      required:\n        - developerId\n        - expires\n        - targetUrl\n    Event:\n      description: \"\"\n      properties:\n        app:\n          $ref: \"#/components/schemas/App\"\n        createdDate:\n          description: The date (in millis) of when this event occurred\n          format: int64\n          type: integer\n        description:\n          description: A description of the event\n          type: string\n        developer:\n          $ref: \"#/components/schemas/Developer\"\n        eventId:\n          description: The id of the event\n          type: string\n        eventType:\n          description: The current event type\n          enum:\n            - app.submitted\n            - app.approved\n            - app.suspended\n            - app.unsuspended\n            - app.rejected\n            - app.inReview\n            - app.installed\n            - app.uninstalled\n            - review.created\n            - review.updated\n            - review.approved\n            - review.spam\n            - review.removed\n            - user.created\n            - user.updated\n            - user.removed\n            - user.invalidPaymentDetails\n            - user.paymentDetailsRequired\n            - developer.created\n            - developer.updated\n            - developer.removed\n            - developer.paymentDetailsRequired\n            - permission.added\n            - permission.removed\n            - payment.complete\n            - payment.refunded\n            - payment.required\n            - ownership.expired\n          type: string\n        marketplaceId:\n          description: The id of the marketplace that owns this event\n          type: string\n        ownership:\n          $ref: \"#/components/schemas/Ownership\"\n        review:\n          $ref: \"#/components/schemas/Review\"\n        transaction:\n          $ref: \"#/components/schemas/Transaction\"\n        user:\n          $ref: \"#/components/schemas/User\"\n      required:\n        - eventId\n        - eventType\n        - createdDate\n        - marketplaceId\n        - message\n    File:\n      description: The file ids of the uploaded file\n      properties:\n        contentType:\n          description: The internet media type of the file\n          type: string\n        fileId:\n          description: The id of the uploaded file\n          type: string\n        fileUrl:\n          description: The path where the file can be located.\n          type: string\n        hash:\n          $ref: \"#/components/schemas/Hash\"\n        mimeCheck:\n          description: The mime type validation check to see if the extension of this file matches it's content. Can be PASSED or FAILED\n          enum:\n            - PASSED\n            - FAILED\n          type: string\n        name:\n          description: The name of the uploaded file\n          type: string\n        size:\n          description: The number of bytes in the uploaded file\n          type: integer\n        uploadDate:\n          description: The time in milliseconds when the file was uploaded\n          format: int64\n          type: integer\n        virusScan:\n          $ref: \"#/components/schemas/VirusScan\"\n      required:\n        - fileId\n        - name\n        - size\n        - uploadDate\n    FileDownload:\n      description: The signed URL for downloading a private file\n      properties:\n        url:\n          description: The signed URL for downloading a private file\n          type: string\n      required:\n        - url\n    File_Pages:\n      description: Pages of file results\n      properties:\n        count:\n          description: The total number of results\n          type: integer\n        list:\n          description: An array of users for the current page\n          items:\n            $ref: \"#/components/schemas/File\"\n          type: array\n        pageNumber:\n          description: The current page number for this result set\n          type: integer\n        pages:\n          description: The total number of pages available for this result set\n          type: integer\n      required:\n        - count\n        - list\n    FoundVirus:\n      description: The virus found within this file\n      properties:\n        fileName:\n          description: The name of the file\n          type: string\n        virusName:\n          description: The name of the virus\n          type: string\n      required:\n        - url\n    Hash:\n      description: The hashes requested for the file.\n      properties:\n        MD5:\n          description: The MD5 hash for this uploaded file.\n          type: string\n        SHA-1:\n          description: The SHA-1 hash for this uploaded file.\n          type: string\n        SHA-256:\n          description: The SHA-256 hash for this uploaded file.\n          type: string\n    Market:\n      description: A marketplace\n      properties:\n        attributes:\n          description: The different app attributes supported by this marketplace\n          items:\n            $ref: \"#/components/schemas/Attributes\"\n          type: array\n        categoryGroups:\n          description: The category groups supported by this marketplace\n          items:\n            $ref: \"#/components/schemas/CategoryGroups\"\n          type: array\n        marketplaceId:\n          description: The id of this marketplace\n          type: string\n        previewAppUrl:\n          description: The URL template for previewing apps on this marketplace\n          type: string\n        viewAppUrl:\n          description: The URL template for viewing apps on this marketplace\n          type: string\n      required:\n        - marketplaceId\n        - attributes\n        - viewAppUrl\n        - previewAppUrl\n    Market_Pages:\n      description: Pages of marketplace results\n      properties:\n        count:\n          description: The total number of results\n          type: integer\n        list:\n          description: An array of markets for the current page\n          items:\n            $ref: \"#/components/schemas/Market\"\n          type: array\n        pageNumber:\n          description: The current page number for this result set\n          type: integer\n        pages:\n          description: The total number of pages available for this result set\n          type: integer\n      required:\n        - count\n        - list\n    Model:\n      description: The model that describes the cost and pricing for apps\n      properties:\n        billingPeriod:\n          description: The billingPeriod along with the billingPeriodUnit make up the time between billing cycles\n          enum:\n            - daily\n            - weekly\n            - monthly\n            - annually\n          type: string\n        billingPeriodUnit:\n          description: The billingPeriod along with the billingPeriodUnit make up the time between billing cycles\n          type: integer\n        commission:\n          description: The marketplace commission applied to this app's model multiplied by 100 to include two digits for fractions of a percent\n          type: integer\n        currency:\n          description: The ISO 4217 currency code for this price\n          type: string\n        customData:\n          description: A custom JSON object that you can create and attach to this record\n          type: object\n        feePayer:\n          description: The payee that will be paying for any payment processing fees\n          enum:\n            - developer\n            - marketplace\n          type: string\n        license:\n          description: The license model type. Single allows a purchase to a single user or organization\n          enum:\n            - single\n          type: string\n        modelId:\n          description: The id that uniquely identifies this model\n          type: string\n        price:\n          description: The price of this app in cents\n          type: integer\n        subtype:\n          description: The pricing model subtype\n          enum:\n            - usage\n            - seat\n          type: string\n        trial:\n          description: The maximum number of free trial days available\n          type: integer\n        type:\n          description: The pricing model type. Free has no cost, single has a one time purchase cost and recurring requires a monthly subscription\n          enum:\n            - free\n            - single\n            - recurring\n          type: string\n      required:\n        - type\n        - price\n        - trial\n        - license\n        - currency\n        - commission\n        - feePayer\n    Ownership:\n      description: \"\"\n      properties:\n        appId:\n          description: The id of the app that is owned\n          type: string\n        customData:\n          description: A custom JSON object that you can create and attach to this record\n          type: object\n        date:\n          description: The date (in millis) of when this app was owned\n          format: int64\n          type: integer\n        developerId:\n          description: The id of the developer for this app\n          type: string\n        expires:\n          description: The date (in millis) of when this app ownership expires\n          format: int64\n          type: integer\n        model:\n          $ref: \"#/components/schemas/Model\"\n        ownershipId:\n          description: The id of this ownership\n          type: string\n        ownershipStatus:\n          description: The current ownership status for this app\n          enum:\n            - pending\n            - active\n            - uninstalled\n            - cancelled\n          type: string\n        ownershipType:\n          description: The current ownership type for this app\n          enum:\n            - full\n            - subscription\n            - trial\n          type: string\n        uninstallDate:\n          description: The date (in millis) of when this app was uninstalled\n          format: int64\n          type: integer\n        userId:\n          description: The id of the user that owns this app\n          type: string\n      required:\n        - ownershipId\n        - date\n        - ownershipType\n        - ownershipStatus\n        - appId\n        - userId\n        - developerId\n        - model\n    OwnershipPages:\n      description: Pages of ownership results\n      properties:\n        count:\n          description: The total number of results\n          type: integer\n        list:\n          description: An array of ownership records for the current page\n          items:\n            $ref: \"#/components/schemas/Ownership\"\n          type: array\n        pageNumber:\n          description: The current page number for this result set\n          type: integer\n        pages:\n          description: The total number of pages available for this result set\n          type: integer\n      required:\n        - count\n        - list\n    Parent:\n      description: Details of the live version of this app\n      properties:\n        status:\n          $ref: \"#/components/schemas/Status\"\n    Profanity:\n      description: Profanity found in this review\n      properties:\n        end:\n          description: The ending location of the profanity\n          type: integer\n        start:\n          description: The starting location of the profanity\n          type: integer\n        word:\n          description: The profane word\n          type: string\n      required:\n        - start\n        - end\n        - word\n    Restrictions:\n      description: Resticts users from accessing this app\n      properties:\n        own:\n          description: \"A custom object containing fields paired with an array value of restrictions. Restricts the users that may own this app. Example: {'country':['Canada','Mexico']}\"\n          type: object\n        view:\n          description: \"A custom object containing fields paired with an array value of restrictions. Restricts the users that may view this app. Example: {'country':['Canada','Mexico']}\"\n          type: object\n    Revenue:\n      description: The revenue generated by this app\n      properties:\n        developer:\n          description: The total revenue generated for the developer by this app in cents\n          type: integer\n        total:\n          description: The total revenue generated by this app in cents\n          type: integer\n      required:\n        - total\n        - developer\n    Review:\n      description: A Review\n      properties:\n        appId:\n          description: The Id of the App that owns this review\n          type: string\n        customData:\n          description: A custom JSON object that you can create and attach to this record\n          type: string\n        description:\n          description: The review's description. Limited to 2000 characters.\n          type: string\n        headline:\n          description: The review's headline. Limited to 50 characters.\n          type: string\n        rating:\n          description: The rating given within this review. The rating is represented as an integer between 100 and 500 (1 - 5 stars)\n          type: integer\n        reportDate:\n          description: The date (in millis) this Review was posted\n          format: int64\n          type: integer\n        reviewId:\n          description: The id for this review.\n          type: string\n        status:\n          $ref: \"#/components/schemas/Status\"\n        type:\n          description: The type for this review\n          type: string\n        user:\n          $ref: \"#/components/schemas/User\"\n        userAccount:\n          $ref: \"#/components/schemas/UserAccount\"\n        userAccountId:\n          description: The id of the user account that posted this review\n          type: string\n        userId:\n          description: The id of the User that posted this review\n          type: string\n      required:\n        - reviewId\n        - headline\n        - description\n        - rating\n        - reportDate\n        - appId\n        - userId\n        - status\n        - customData\n    ReviewPages:\n      description: Pages of review results\n      properties:\n        count:\n          description: The total number of results\n          type: integer\n        list:\n          description: An array of reviews for the current page\n          items:\n            $ref: \"#/components/schemas/Review\"\n          type: array\n        pageNumber:\n          description: The current page number for this result set\n          type: integer\n        pages:\n          description: The total number of pages available for this result set\n          type: integer\n      required:\n        - count\n        - list\n    Review_Entry:\n      description: \"\"\n      properties:\n        date:\n          description: The date (in millis) of when this action was performed\n          format: int64\n          type: integer\n        reviewId:\n          description: The id of the review involved in this action\n          type: string\n      required:\n        - date\n        - reviewId\n    SearchPages:\n      description: Pages of search results\n      properties:\n        count:\n          description: The total number of results\n          type: integer\n        list:\n          description: An array of results for the current page\n          items:\n            $ref: \"#/components/schemas/App\"\n          type: array\n        pageNumber:\n          description: The current page number for this result set\n          type: integer\n        pages:\n          description: The total number of pages available for this result set\n          type: integer\n      required:\n        - count\n        - list\n    Stat:\n      description: The statistic value\n      properties:\n        value:\n          description: The statistic value\n          format: int64\n          type: integer\n      required:\n        - value\n    Status:\n      description: The current status of this review\n      properties:\n        profanity:\n          description: A list of profanity found in this review\n          items:\n            $ref: \"#/components/schemas/Profanity\"\n          type: array\n        reason:\n          description: Text describing the reason for the current status\n          enum:\n            - profanity\n            - spam\n          type: string\n        value:\n          description: The current status value\n          enum:\n            - pending\n            - spam\n            - flagged\n            - approved\n          type: string\n      required:\n        - value\n        - profanity\n        - reason\n    Total:\n      description: The total number of events for a particular field\n      properties:\n        apps:\n          $ref: \"#/components/schemas/AppTotal\"\n        end:\n          description: The end date for this total (in millis)\n          format: int64\n          type: integer\n        start:\n          description: The start date for this total (in millis)\n          format: int64\n          type: integer\n        totals:\n          $ref: \"#/components/schemas/DataTotal\"\n      required:\n        - apps\n        - totals\n    Transaction:\n      description: A transaction for an app initiated by a user\n      properties:\n        amount:\n          description: The total amount paid in cents\n          type: integer\n        appId:\n          description: The id of the app involved with this transaction\n          type: string\n        customData:\n          description: A custom JSON object that you can create and attach to this record\n          type: object\n        date:\n          description: The date (in millis) of when this transaction occurred\n          format: int64\n          type: integer\n        developerAmount:\n          description: The total amount paid to the developer in cents\n          type: integer\n        developerId:\n          description: The id of the developer involved with this transaction\n          type: string\n        feeAmount:\n          description: The total amount paid to payment processing fees in cents\n          type: integer\n        marketplaceAmount:\n          description: The total amount paid to the marketplace owner in cents\n          type: integer\n        ownershipId:\n          description: The id for the ownership associated with this transaction\n          type: string\n        transactionId:\n          description: The id for this transaction\n          type: string\n        type:\n          description: The type for this transaction\n          enum:\n            - payment\n            - refund\n          type: string\n        userId:\n          description: The id of the user making the transaction\n          type: string\n      required:\n        - transactionId\n        - ownershipId\n        - type\n        - appId\n        - developerId\n        - userId\n        - date\n        - amount\n    TransactionPages:\n      description: Pages of transaction results\n      properties:\n        count:\n          description: The total number of results\n          type: integer\n        list:\n          description: An array of paymnets for the current page\n          items:\n            $ref: \"#/components/schemas/Transaction\"\n          type: array\n        pageNumber:\n          description: The current page number for this result set\n          type: integer\n        pages:\n          description: The total number of pages available for this result set\n          type: integer\n      required:\n        - count\n        - list\n    User:\n      description: A User\n      properties:\n        created:\n          description: The date (in millis) of when this user was created\n          format: int64\n          type: integer\n        customData:\n          description: A custom JSON object that you can create and attach to this record\n          type: object\n        email:\n          description: The user's email\n          type: string\n        name:\n          description: The user's name\n          type: string\n        type:\n          description: The type for this user\n          type: string\n        userId:\n          description: The id of this user\n          type: string\n      required:\n        - userId\n        - created\n        - customData\n    UserAccount:\n      description: A User Account\n      properties:\n        customData:\n          description: A custom JSON object that you can create and attach to this record\n          type: object\n        email:\n          description: The contact email address\n          type: string\n        name:\n          description: The name for the account\n          type: string\n        userAccountId:\n          description: The id of this user account\n          type: string\n        userId:\n          description: The id of this user that this account belongs to\n          type: string\n      required:\n        - userAccountId\n        - userId\n    UserAccountPages:\n      description: Pages of userAccount results\n      properties:\n        count:\n          description: The total number of results\n          type: integer\n        list:\n          description: An array of userAccounts for the current page\n          items:\n            $ref: \"#/components/schemas/UserAccount\"\n          type: array\n        pageNumber:\n          description: The current page number for this result set\n          type: integer\n        pages:\n          description: The total number of pages available for this result set\n          type: integer\n      required:\n        - count\n        - list\n    UserPages:\n      description: Pages of user results\n      properties:\n        count:\n          description: The total number of results\n          type: integer\n        list:\n          description: An array of users for the current page\n          items:\n            $ref: \"#/components/schemas/User\"\n          type: array\n        pageNumber:\n          description: The current page number for this result set\n          type: integer\n        pages:\n          description: The total number of pages available for this result set\n          type: integer\n      required:\n        - count\n        - list\n    VersionPages:\n      description: Pages of AppVersion results\n      properties:\n        count:\n          description: The total number of results\n          type: integer\n        list:\n          description: An array of apps for the current page\n          items:\n            $ref: \"#/components/schemas/AppVersion\"\n          type: array\n        pageNumber:\n          description: The current page number for this result set\n          type: integer\n        pages:\n          description: The total number of pages available for this result set\n          type: integer\n      required:\n        - count\n        - list\n    VirusScan:\n      description: The virus scan results for this file\n      properties:\n        finished:\n          description: The date (in milliseconds) when this file finished it's scan\n          format: int64\n          type: integer\n        foundViruses:\n          description: The list of viruses found in this file\n          items:\n            $ref: \"#/components/schemas/FoundVirus\"\n          type: array\n        started:\n          description: The date (in milliseconds) when this file started it's scan\n          format: int64\n          type: integer\n        status:\n          description: The status of this scan. Can be NOT_SCANNED, CLEAN or DIRTY\n          type: string\n      required:\n        - status\n  securitySchemes:\n    basicAuth:\n      scheme: basic\n      type: http\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/openchannel.io/market/2.0.24/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/openchannel.io/market/2.0.24/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/developers\": get: responses: default: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}