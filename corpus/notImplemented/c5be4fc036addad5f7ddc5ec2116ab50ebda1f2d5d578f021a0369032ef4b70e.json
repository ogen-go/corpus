{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ghga-de/datameta"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "datameta/api/openapi.yaml",
			"byteSize": 52474,
			"content": "# Copyright 2021 Universität Tübingen, DKFZ and EMBL for the German Human Genome-Phenome Archive (GHGA)\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nopenapi: 3.0.0\ninfo:\n  description: DataMeta\n  version: 1.4.0\n  title: DataMeta\n\nservers:\n  - url: /api/v1\n\npaths:\n\n  /keys:\n    post:\n      summary: Create new API Key/Token\n      description: Create new API Key/Token\n      tags:\n        - Authentication and Users\n      operationId: CreateApiKey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateTokenRequest\"\n        description: \u003e-\n          Credentials to use (optional when using cookie sessions),\n          a label for the ApiKey to be created and the date it expires.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserSession\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n      security:\n        - bearerAuth: []\n        - cookieAuth: []\n        - {}\n\n  /keys/{id}:\n    delete:\n      summary: Delete ApiKey by label\n      description: \u003e-\n        Delete ApiKey by label.\n      tags:\n        - Authentication and Users\n      operationId: DeleteApiKey\n      parameters:\n        - name: id\n          in: path\n          description: ID (not label) of Apikey\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: The specified key does not exist.\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n\n  /rpc/whoami:\n    get:\n      summary: \"[Not RESTful]: Returns information about the authenticated user\"\n      description: \u003e-\n        Returns the ids, name, groupAdmin, siteAdmin,\n        email and groupName attributes for the logged in user.\n        [Attention this endpoint is not RESTful, the result should not be cached.]\n      tags:\n        - Remote Procedure Calls\n      operationId: GetUserInformation\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WhoamiResponse\"\n        '401':\n          description: Unauthorized\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n\n  /rpc/delete-files:\n    post:\n      summary: Bulk-delete Staged Files\n      description: \u003e-\n        Bulk-delete Staged Files.\n      tags:\n        - Remote Procedure Calls\n      operationId: BulkDeleteStagedFiles\n      requestBody:\n        content:\n          application/json:\n           schema:\n             $ref: \"#/components/schemas/StagedFiles\"\n        description: \u003e-\n          Provide a list of staged files to be deleted.\n      responses:\n        '204':\n          description: Deletion successful\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: File not found\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n\n  /rpc/delete-metadatasets:\n    post:\n      summary: Bulk-delete Staged MetaDataSets\n      description: \u003e-\n        Bulk-delete Staged MetaDataSets.\n      tags:\n        - Remote Procedure Calls\n      operationId: BulkDeleteStagedMetaDataSets\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/StagedMetaDataSets\"\n        description: \u003e-\n          Provide a list of staged MetaDataSets to be deleted.\n      responses:\n        '204':\n          description: Deletion successful\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: File not found\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n\n\n  /rpc/get-file-url/{id}:\n    get:\n      summary: \"[Not RESTful]: Redirects to a temporary, pre-signed HTTP-URL for downloading a file.\"\n      description: \u003e-\n        For the file with the given ID, this enpoint will redirect to a pre-signed HTTP URL for\n        downloading the requested file. The pre-signed URL times out after a certain amount of\n        time which can be configured with the \"expires\" query string.\n        [Attention this endpoint is not RESTful, the result should not be cached.]\n      tags:\n        - Remote Procedure Calls\n      operationId: GetFileUrl\n      parameters:\n        - name: id\n          in: path\n          description: ID of the file\n          required: true\n          schema:\n            type: string\n        - name: expires\n          in: query\n          description: Minutes until the pre-signed URL will expire, defaults to 1\n          schema:\n            type: integer\n            default: 1\n        - name: redirect\n          in: query\n          description: If set to true, the endpoint will return a 307 response, otherwise a 200 response.\n          schema:\n            type: boolean\n            default: false\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileUrl\"\n        '307':\n          description: Redirecting to the pre-signed URL of the file\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileUrl\"\n          headers:\n            location:\n              description: Location to redirect to\n              schema:\n                type: string\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: The specified file does not exist.\n        '500':\n          description: Internal Server Error\n\n\n  /users/{id}/keys:\n    get:\n      summary: All API keys for a user\n      description: \u003e-\n        Get a list of all API keys for a user.\n        Please note that you cannot retrieve\n        the tokens themselves because they are\n        stored in a hashed format in our database\n        as only the respective user is allowed\n        to know them.\n      tags:\n        - Authentication and Users\n      operationId: GetUserApiKeys\n      parameters:\n        - name: id\n          in: path\n          description: ID of the User\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKeyList\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: The specified user does not exist.\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n\n  /users/{id}/password:\n    put:\n      summary: Update a user's password\n      description: Update a user's password. The user ID can be specified either as a UUID or as a site ID.\n      tags:\n        - Authentication and Users\n      operationId: SetUserPassword\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PasswordChange\"\n        description: Old and new password\n      parameters:\n        - name: id\n          in: path\n          description: User ID, either as UUID or as site ID. '0' for password reset token based access.\n          required: true\n          schema:\n            type: string\n      security:\n        - bearerAuth: []\n        - cookieAuth: []\n        - {} # Unauthenticated access for use with reset token\n      responses:\n        \"204\":\n          description: Password update successful\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: The specified user does not exist or is not the same user as the authorized user.\n        \"404\":\n          description: Password reset token not found\n        \"410\":\n          description: Password reset token expired\n        \"400\":\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        \"500\":\n          description: Internal Server Error\n\n  /users/{id}:\n    get:\n      summary: Get user information\n      description: \u003e-\n        Get information about a user.\n      tags:\n        - Authentication and Users\n      operationId: UserInformationRequest\n      parameters:\n        - name: id\n          in: path\n          description: ID of the user\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not found\n        '500':\n          description: Internal Server Error\n    put:\n      summary: Update a user's credentials and status\n      description: Update a user's name, group, admin status and enabled status.\n      tags:\n        - Authentication and Users\n      operationId: UserUpdateRequest\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserUpdateRequest\"\n        description: username, group, admin status and enabled status\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: User update successful\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: This user does not have the rights to perform this action.\n        \"404\":\n          description: The specified user does not exist.\n        \"400\":\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        \"500\":\n          description: Internal Server Error\n\n  /metadata:\n    get:\n      summary: Get metadata definitions\n      description: \u003e-\n        Get the metadata definitions that are configured for this site.\n      tags:\n        - Metadata\n      operationId: GetMetaData\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetaDatumResponse'\n        '401':\n          description: Unauthorized\n        '500':\n          description: Internal Server Error\n    post:\n      summary: Create a New MetaDatum\n      description: \u003e-\n        Create a new MetaDatum. This is an administrative Endpoint that is not accessible for regular users.\n      tags:\n        - Metadata\n      operationId: CreateMetaDatum\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/MetaDatum\"\n        description: \u003e-\n          Provide all properties for one MetaDatum.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetaDataResponse'\n        \"401\":\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        \"404\":\n          description: The specified Service does not exist.\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n\n  /metadata/{id}:\n    put:\n      summary: Update a MetaDatum\n      description: Update a MetaDatum. This is an administrative Endpoint that is not accessible for regular users.\n      tags:\n        - Metadata\n      operationId: UpdateMetaDatum\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/MetaDatum\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetaDataResponse'\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: This user does not have the rights to perform this action.\n        \"404\":\n          description: The specified service does not exist.\n        \"400\":\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        \"500\":\n          description: Internal Server Error\n\n  /metadatasets:\n    post:\n      summary: Create a New MetaDataSet\n      description: \u003e-\n        Create a new MetaDataSet\n      tags:\n        - Metadata\n      operationId: CreateMetaDataSet\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/MetaDataSet\"\n        description: \u003e-\n          Provide all properties for one MetaDataSet.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MetaDataSetResponse\"\n        '401':\n          description: Unauthorized\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n    get:\n      summary: Query metadatasets\n      description: \u003e-\n        Query all metadatasets\n      tags:\n        - Metadata\n      operationId: GetMetaDataSets\n      parameters:\n        - name: submittedAfter\n          in: query\n          description: ISO datetime string specifying an exclusive lower bound for the submission date of the returned metadatasets.\n          schema:\n            type: string\n            format: date-time\n        - name: submittedBefore\n          in: query\n          description: ISO datetime string specifying an exclusive upper bound for the submission date of the returned metadatasets.\n          schema:\n            type: string\n            format: date-time\n        - name: awaitingService\n          in: query\n          description: Identifier for a service. Restricts the result to metadatsets for which the specified service has not been executed yet.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/MetaDataSetResponse\"\n        '401':\n          description: Unauthorized\n        '404':\n          description: Not Found\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n\n  /metadatasets/{id}:\n    get:\n      summary: Get Details for a MetaDataSet\n      description: \u003e-\n        Get details for a metadataset.\n      tags:\n        - Metadata\n      operationId: GetMetaDataSet\n      parameters:\n        - name: id\n          in: path\n          description: ID of the MetaDataSet\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MetaDataSetResponse\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        \"404\":\n          description: The specified metadataset does not exist.\n        '500':\n          description: Internal Server Error\n    delete:\n      summary: Delete Not-Submitted Metadataset\n      description: \u003e-\n        Delete File. Please note:\n        This is only allowed if the metadataset\n        has not been part of a Submission, yet.\n      tags:\n        - Metadata\n      operationId: DeleteMetadataSet\n      parameters:\n        - name: id\n          in: path\n          description: ID of the Metadataset\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Deletion successful\n        '401':\n          description: Unauthorized\n        '403':\n          description: Either forbidden or the resource is not modifiable\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        \"404\":\n          description: The specified metadataset does not exist.\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n\n  /service-execution/{serviceId}/{metadatasetId}:\n    post:\n      summary: Endpoint to store the result of a service execution for a single metadataset\n      description: \u003e-\n        This endpoint is used to report the result of a service execution in\n        the form of metadatum key - value pairs for the service-related\n        metadata and corresponding files if file metadata are involved.\n      tags:\n        - Services\n      operationId: ServiceSetMetaDatum\n      parameters:\n        - name: serviceId\n          in: path\n          description: ID of the service\n          required: true\n          schema:\n            type: string\n        - name: metadatasetId\n          in: path\n          description: ID of the metadataset\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ServiceExecution\"\n        description: \u003e-\n          The `records` attribute of the request body must describe the result\n          of the service execution in form of key/value pairs corresponding to\n          the metadata associated with the service. The `fileIds` list must\n          contain all file IDs of files referenced in values of file metadata.\n          It can be empty (`[]`) but not `null` or missing.\n      responses:\n        '200':\n          description: Update successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MetaDataSetResponse\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: The specified metadataset or service does not exist.\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n\n  /files:\n    post:\n      summary: Create a New File\n      description: \u003e-\n        Creates a new empty file object.\n        Attention: this endpoint does not\n        take the file content for upload.\n        Instead, it will respond with a\n        presigned URL which you can use to\n        upload (PUT) your file content.\n      tags:\n        - Files\n      operationId: CreateFile\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FileAnnouncement\"\n        description: \u003e-\n          Provide essential properties of the file that\n          shall be uploaded\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileUploadResponse\"\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '401':\n          description: Unauthorized\n        '500':\n          description: Internal Server Error\n\n  /files/{id}:\n    get:\n      summary: Get Details for A File\n      description: \u003e-\n        Get details for a file.\n      tags:\n        - Files\n      operationId: GetFile\n      parameters:\n        - name: id\n          in: path\n          description: ID of the File\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileResponse\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Either forbidden or the resource is not modifiable\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '404':\n          description: File not found\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n    put:\n      summary: Update File Details\n      description: \u003e-\n        Update details for a File.\n        E.g. to indicate that the File content\n        has been uploaded (set contentUploaded=true).\n        Please note: this only works for Files that\n        have not been submitted, yet. Other file\n        attributes (checksum and name) can only be\n        updated until contentUploaded has been set to\n        'true'.\n      tags:\n        - Files\n      operationId: UpdateFile\n      parameters:\n        - name: id\n          in: path\n          description: ID of the File\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FileUpdateRequest\"\n        description: \u003e-\n          Provide properties of the file that\n          shall be updated.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileResponse\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Either forbidden or the resource is not modifiable\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '404':\n          description: File not found\n        '409':\n          description: Mismatch between uploaded data checksum and announced checksum\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n    delete:\n      summary: Delete Not-Submitted File\n      description: \u003e-\n        Delete File. Please note:\n        This is only allowed if the File\n        has not been part of a Submission, yet.\n      tags:\n        - Files\n      operationId: DeleteFile\n      parameters:\n        - name: id\n          in: path\n          description: ID of the File\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Deletion successful\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: File not found\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n\n  /submissions:\n    post:\n      summary: Create a New Submission\n      description: \u003e-\n        Creates a new Submission.\n        A submission consists of a list of\n        metadatasets and a list of files.\n      tags:\n        - Submissions\n      operationId: CreateSubmission\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SubmissionRequest\"\n        description: \u003e-\n          Provide a list of metadatasets and a list of files.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SubmissionResponse\"\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '401':\n          description: Unauthorized\n        '500':\n          description: Internal Server Error\n\n  /presubvalidation:\n    post:\n      summary: Pre-validate a submission\n      description: \u003e-\n        Pre-validates a submission request without actually creating a\n        submission.  A submission request consists of a list of metadatasets\n        and a list of files.\n      tags:\n        - Submissions\n      operationId: PrevalidateSubmission\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SubmissionRequest\"\n        description: \u003e-\n          Provide a list of metadatasets and a list of files.\n      responses:\n        '204':\n          description: OK\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '401':\n          description: Unauthorized\n        '500':\n          description: Internal Server Error\n\n  /groups/{id}/submissions:\n    get:\n      summary: Get A List of All Submissions of A Group.\n      description: \u003e-\n        Get a list of all submissions of a group.\n      tags:\n        - Submissions\n        - Groups\n      operationId: GetGroupSubmissions\n      parameters:\n        - name: id\n          in: path\n          description: ID of the group\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GroupSubmissions\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        \"404\":\n          description: The specified group does not exist.\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n\n  /groups/{id}:\n    get:\n      summary: Get group information\n      description: \u003e-\n        Get information about a group.\n      tags:\n        - Groups\n      operationId: GroupInformationRequest\n      parameters:\n        - name: id\n          in: path\n          description: ID of the group\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupResponse'\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not found\n        '500':\n          description: Internal Server Error\n    put:\n      summary: Change the name of a group.\n      description: \u003e-\n        Change the name of a group.\n      tags:\n        - Groups\n      operationId: ChangeGroupName\n      parameters:\n        - name: id\n          in: path\n          description: ID of the group\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GroupUpdateRequest\"\n      responses:\n        \"204\":\n          description: No Content\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        \"404\":\n          description: The specified group does not exist.\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n\n  /appsettings:\n    get:\n      summary: GET all AppSettings\n      description: \u003e-\n        GET all AppSettings. This is an administrative Endpoint that is not accessible for regular users.\n      tags:\n        - Settings\n      operationId: AppSettings\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/AppSettingsResponse\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n  \n  /services:\n    post:\n      summary: Create a new service. \n      description: Create a new service.\n      tags:\n        - Services\n      operationId: PostService\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ServiceRequest\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceResponse\"\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '500':\n          description: Internal Server Error\n    get:\n      summary: Get Services information\n      description: Get names and IDs for all services\n      tags:\n        - Services\n      operationId: GetServiceInfo\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Services\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        \"500\":\n          description: Internal Server Error\n\n  /services/{id}:\n    put:\n      summary: Update a specific service. \n      description: \u003e-\n        Update the name and/or the users of this service. \n        If the name, or the userIds are omitted, those will not be updated upon request.\n        To remove all users, an empty array must be submitted for userIds.\n      tags:\n        - Services\n      operationId: PutService\n      parameters:\n        - name: id\n          in: path\n          description: ID of the service\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ServiceUpdateRequest\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceResponse\"\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Service does not exist\n        '500':\n          description: Internal Server Error\n\n  /server:\n    get:\n      summary: Get DataMeta server information\n      description: Get information about the DataMeta server serving this API\n      tags:\n        - Server\n      operationId: GetServerInfo\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerInfoResponse\"\n        \"500\":\n          description: Internal Server Error\n\n  /registrations:\n    post:\n      summary: Create a new user registration request\n      description: Create a new user registration request\n      tags:\n        - User\n      operationId: PostRegistration\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RegistrationRequest\"\n      responses:\n        \"204\":\n          description: New User Registration Request created\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        \"500\":\n          description: Internal Server Error\n\n\n  /registrationsettings:\n    get:\n      summary: Get details for the registration view\n      description: Get all available groups and the user agreement for the registration view\n      tags:\n        - User\n      operationId: GetRegistrationSettings\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RegisterSettingsResponse\"\n        \"500\":\n          description: Internal Server Error\n\n  /appsettings/{id}:\n    put:\n      summary: Update a specific appsetting. This is an administrative Endpoint that is not accessible for regular users.\n      description: \u003e-\n        Update a specific appsetting\n      tags:\n        - Settings\n      operationId: UpdateAppSettings\n      parameters:\n        - name: id\n          in: path\n          description: ID of the appsetting\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AppSettingsUpdateRequest\"\n      responses:\n        \"204\":\n          description: App Settings Updated\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Setting does not exist\n        '400':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorModel\"\n        '500':\n          description: Internal Server Error\n\nsecurity:\n  - bearerAuth: []\n  - cookieAuth: []\n\ncomponents:\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: datameta\n\n  schemas:\n    CreateTokenRequest:\n      type: object\n      properties:\n        email:\n          type: string\n        password:\n          type: string\n        label:\n          type: string\n        expires:\n          type: string\n        # email and password are\n        # not required when using cookie-based\n        # sessions from the front end\n      required:\n        - label\n      additionalProperties: false\n\n    UserSession:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/Identifier\"\n        userId:\n          $ref: \"#/components/schemas/Identifier\"\n        token:\n          type: string\n        label:\n          type: string\n        expires:\n          type: string\n          nullable: true\n      required:\n        - id\n        - userId\n        - token\n        - label\n        - expires\n      additionalProperties: false\n\n    FileUrl:\n      type: object\n      properties:\n        fileId:\n          $ref: \"#/components/schemas/Identifier\"\n        fileUrl:\n          type: string\n        expires:\n          type: string\n          format: date-time\n        checksum:\n          type: string\n      required:\n        - fileId\n        - fileUrl\n        - expires\n        - checksum\n      additionalProperties: false\n\n    ApiKeyList:\n      type: array\n      items:\n        type: object\n        properties:\n          id:\n            $ref: \"#/components/schemas/Identifier\"\n          label:\n            type: string\n          expires:\n            type: string\n            nullable: True\n          hasExpired:\n            type: boolean\n        required:\n          - id\n          - label\n          - expires\n      additionalProperties: false\n\n    PasswordChange:\n      type: object\n      properties:\n        passwordChangeCredential:\n          type: string\n        newPassword:\n          type: string\n      required:\n        - newPassword\n        - passwordChangeCredential\n      additionalProperties: false\n\n    MetaDatum:\n      type: object\n      properties:\n        name:\n          type: string\n        regexDescription:\n          type: string\n        longDescription:\n          type: string\n        example:\n          type: string\n        regExp:\n          type: string\n        dateTimeFmt:\n          type: string\n        isMandatory:\n          type: boolean\n        order:\n          type: integer\n        isFile:\n          type: boolean\n        isSubmissionUnique:\n          type: boolean\n        isSiteUnique:\n          type: boolean\n        serviceId:\n          type: string\n          nullable: true\n      required:\n        - name\n        - regexDescription\n        - longDescription\n        - example\n        - regExp\n        - dateTimeFmt\n        - isMandatory\n        - order\n        - isFile\n        - isSubmissionUnique\n        - isSiteUnique\n        - serviceId\n      additionalProperties: false\n\n    MetaDataSet:\n      type: object\n      properties:\n        record:\n          type: object\n          additionalProperties: true\n          # a free-form object,\n          # any property is allowed\n      required:\n        - record\n      additionalProperties: false\n\n    ServiceExecution:\n      type: object\n      properties:\n        record:\n          type: object\n          additionalProperties: true\n          nullable: false\n          # a free-form object,\n          # any property is allowed\n        fileIds:\n          type: array\n          nullable: false\n          items:\n            type: string\n      required:\n        - record\n        - fileIds\n      additionalProperties: false\n\n    MetaDataSetResponse:\n      type: object\n      properties:\n        record:\n          type: object\n          additionalProperties: true\n          # a free-form object, any property is allowed\n        fileIds:\n          type: object\n          additionalProperties: true\n          # a free-form object mapping the field names to file IDs\n        serviceExecutions:\n          type: object\n          # nullable as a whole for responses to users who cannot see service executions\n          nullable: true\n          additionalProperties:\n            # Maps record field names to service executions. The individual\n            # fields are also nullable for services that haven't been executed\n            # yet.\n            $ref: \"#/components/schemas/MetaDataSetServiceExecution\"\n        id:\n          $ref: \"#/components/schemas/Identifier\"\n        submissionId:   \n          $ref: \"#/components/schemas/NullableIdentifier\"\n        userId:\n          $ref: \"#/components/schemas/Identifier\"\n      required:\n        - record\n      additionalProperties: false\n\n    MetaDataSetServiceExecution:\n      type: object\n      nullable: true\n      properties:\n        serviceExecutionId:\n          $ref: \"#/components/schemas/Identifier\"\n        executionTime:\n          type: string\n          format: date-time\n        serviceId:\n          $ref: \"#/components/schemas/Identifier\"\n        userId:\n          $ref: \"#/components/schemas/Identifier\"\n\n    FileAnnouncement:\n      type: object\n      properties:\n        name:\n          type: string\n        checksum:\n          type: string\n      required:\n        - name\n        - checksum\n      additionalProperties: false\n\n    FileUploadResponse:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/Identifier\"\n        name:\n          type: string\n        urlToUpload:\n          type: string\n        requestHeaders:\n          type: object\n          additionalProperties: true\n        userId:\n          $ref: \"#/components/schemas/Identifier\"\n        expires:\n          type: string\n      required:\n        - name\n        - id\n        - urlToUpload\n        - userId\n        - expires\n      additionalProperties: false\n\n    FileResponse:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/Identifier\"\n        name:\n          type: string\n        contentUploaded:\n          type: boolean\n          nullable: true\n        checksum:\n          type: string\n        filesize:\n          type: integer\n          nullable: true\n        userId:\n          $ref: \"#/components/schemas/Identifier\"\n        expires:\n          type: string\n          nullable: true\n      required:\n        - name\n        - id\n        - contentUploaded\n        - checksum\n        - userId\n        - expires\n      additionalProperties: false\n\n    FileUpdateRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        contentUploaded:\n          type: boolean\n        checksum:\n          type: string\n      additionalProperties: false\n\n    ServiceRequest:\n      type: object\n      properties:\n        name:\n          type: string\n      required:\n        - name\n      additionalProperties: false\n\n    ServiceUpdateRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          nullable: true\n        userIds:\n          type: array\n          nullable: true\n          items:\n            type: string\n      additionalProperties: false\n\n    Services:\n      type: array\n      items:\n        $ref: \"#/components/schemas/ServiceResponse\"\n\n    ServiceResponse:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/Identifier\"\n        name:\n          type: string\n        userIds:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Identifier\"\n      required:\n        - id\n        - name\n        - userIds\n      additionalProperties: false\n\n    StagedFiles:\n      type: object\n      properties:\n        fileIds:\n          type: array\n          items:\n            type: string\n      required:\n        - fileIds\n      additionalProperties: false\n\n    StagedMetaDataSets:\n      type: object\n      properties:\n        metadatasetIds:\n          type: array\n          items:\n            type: string\n      required:\n        - metadatasetIds\n      additionalProperties: false\n\n    SubmissionRequest:\n      type: object\n      properties:\n        metadatasetIds:\n          type: array\n          items:\n            type: string\n        fileIds:\n          type: array\n          items:\n            type: string\n        label:\n          type: string\n          nullable: true\n      required:\n        - metadatasetIds\n        - fileIds\n      additionalProperties: false\n\n    SubmissionResponse:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/Identifier\"\n        label:\n          type: string\n          nullable: true\n        metadatasetIds:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Identifier\"\n        fileIds:\n          type: array\n          items: \n            $ref: \"#/components/schemas/Identifier\"\n      required:\n        - id\n        - metadatasetIds\n        - fileIds\n      additionalProperties: false\n\n    GroupSubmissions:\n      type: array\n      items:\n        $ref: \"#/components/schemas/SubmissionResponse\"\n\n    GroupUpdateRequest:\n      type: object\n      properties:\n        name:\n          type: string\n      required:\n        - name\n      additionalProperties: false\n    \n    GroupResponse:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/Identifier\"\n        name:\n          type: string\n      required:\n        - id\n        - name\n      additionalProperties: false\n        \n    WhoamiResponse:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/Identifier\"\n        name:\n          type: string\n        groupAdmin:\n          type: boolean\n        siteAdmin:\n          type: boolean\n        siteRead:\n          type: boolean\n        email:\n          type: string\n        group:\n          type: object\n          properties:\n            id:\n              $ref: \"#/components/schemas/Identifier\"\n            name:\n              type: string\n      required:\n        - id\n        - name\n        - groupAdmin\n        - siteAdmin\n        - siteRead\n        - email\n        - group\n      additionalProperties: false\n\n    UserResponse:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/Identifier\"\n        name:\n          type: string\n        groupAdmin:\n          type: boolean\n          nullable: true\n        siteAdmin:\n          type: boolean\n          nullable: true\n        siteRead:\n          type: boolean\n          nullable: true\n        email:\n          type: string\n          nullable: true\n        groupId:\n          $ref: \"#/components/schemas/Identifier\"\n      required:\n        - id\n        - name\n        - groupId\n      additionalProperties: false\n\n    UserUpdateRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        groupId:\n          type: string\n        groupAdmin:\n          type: boolean\n        siteAdmin:\n          type: boolean\n        siteRead:\n          type: boolean\n        enabled:\n          type: boolean\n\n    MetaDataResponse:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/Identifier\"\n        name:\n          type: string\n        regexDescription:\n          type: string\n          nullable: true\n        longDescription:\n          type: string\n          nullable: true\n        example:\n          type: string\n          nullable: true\n        regExp:\n          type: string\n          nullable: true\n        dateTimeFmt:\n          type: string\n          nullable: true\n        isMandatory:\n          type: boolean\n        order:\n          type: integer\n        isFile:\n          type: boolean\n        isSubmissionUnique:\n          type: boolean\n        isSiteUnique:\n          type: boolean\n        serviceId:\n          $ref: \"#/components/schemas/NullableIdentifier\"\n      required:\n        - id\n        - name\n        - regexDescription\n        - longDescription\n        - example\n        - regExp\n        - dateTimeFmt\n        - isMandatory\n        - order\n        - isFile\n        - isSubmissionUnique\n        - isSiteUnique\n        - serviceId\n      additionalProperties: false\n\n    MetaDatumResponse:\n      type: array\n      items:\n        $ref: \"#/components/schemas/MetaDataResponse\"\n\n    ServerInfoResponse:\n      type: object\n      properties:\n        apiVersion:\n          type: string\n        datametaVersion:\n          type: string\n      required:\n        - apiVersion\n        - datametaVersion\n      additionalProperties: false\n\n    RegistrationRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          nullable: true\n        email:\n          type: string\n          nullable: true\n        org_select:\n          type: string\n          nullable: true\n        org_create:\n          type: string\n          nullable: true\n        org_new_name:\n          type: string\n          nullable: true\n        check_user_agreement:\n          type: boolean\n          nullable: true\n      required:\n        - name\n        - email\n        - org_select\n        - org_create\n        - org_new_name\n        - check_user_agreement\n      additionalProperties: false\n\n    RegisterSettingsResponse:\n      type: object\n      properties:\n        userAgreement:\n          type: string\n          nullable: True\n        groups:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                $ref: \"#/components/schemas/Identifier\"\n              name:\n                type: string\n      required:\n        - groups\n        - userAgreement\n      additionalProperties: false      \n\n    AppSettingsResponse:\n      type: object\n      properties:\n        id:\n          $ref: \"#/components/schemas/Identifier\"\n        key:\n          type: string\n        valueType:\n          type: string\n        value:\n          type: string\n      required:\n        - id\n        - key\n        - valueType\n        - value\n      additionalProperties: false\n\n    AppSettingsUpdateRequest:\n      type: object\n      properties:\n        value:\n          type: string\n      required:\n        - value\n      additionalProperties: false\n\n    Identifier:\n      type: object\n      properties:\n        uuid:\n          type: string\n        site:\n          type: string\n      required:\n        - uuid\n      additionalProperties: false\n\n    NullableIdentifier:\n      type: object\n      nullable: true\n      properties:\n        uuid:\n          type: string\n        site:\n          type: string\n      required:\n        - uuid\n      additionalProperties: false\n\n    Error:\n      type: object\n      properties:\n        exception:\n          type: string\n        error_code:\n          type: string\n        message:\n          type: string\n        entity:\n          $ref: \"#/components/schemas/Identifier\"\n        field:\n          type: string\n      required:\n        - message\n      additionalProperties: false\n\n    ErrorModel:\n      type: array\n      items:\n       $ref: \"#/components/schemas/Error\"\n",
			"canonicalURL": "/github.com/ghga-de/datameta@e161b857d97c8563e9f6303eb1fbe86821b64ede/-/blob/datameta/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ghga-de/datameta/blob/e161b857d97c8563e9f6303eb1fbe86821b64ede/datameta/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/appsettings/{id}\": put: security: security \"cookieAuth\" (index 1): cookie security not implemented",
	"NotImplemented": [
		"cookie security"
	]
}