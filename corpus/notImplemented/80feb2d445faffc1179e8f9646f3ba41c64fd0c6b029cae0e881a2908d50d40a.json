{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wso2/identity-api-server"
		},
		"file": {
			"name": "userstore.yaml",
			"size": 0,
			"path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/resources/userstore.yaml",
			"byteSize": 28231,
			"content": "openapi: 3.0.0\ninfo:\n  description: \u003e\n    This is the RESTful API for user store management related operations in WSO2 Identity Server\n  version: \"v1\"\n  title: WSO2 Identity Server - UserStore Rest API\n  contact:\n    name: WSO2 Identity Server\n    url: 'https://wso2.com/identity-and-access-management'\n    email: architecture@wso2.org\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: admin\n    description: Secured Admin-only calls\nsecurity:\n  - OAuth2: []\n  - BasicAuth: []\npaths:\n  /userstores:\n    post:\n      tags:\n        - User Store\n      summary: Add a secondary user store.\n      operationId: addUserStore\n      description: |\n        This API provides the capability to add a secondary user store.\n\n        **NOTE:**\n\n          To retrieve the available user store classes/types, use the **api/server/v1/userstores/meta/types** API.\n\n         \u003cb\u003ePermission required:\u003c/b\u003e\n          - /permission/admin\n      responses:\n        '201':\n          description: Successful response\n          headers:\n            Location:\n              description: \u003e-\n                Location of the newly created secondary userstore. userstore id is generated as base-64-url-encoded(domain-name) value.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStoreResponse'\n        '400':\n          $ref: '#/components/responses/InvalidInput'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '409':\n          $ref: '#/components/responses/Conflict'\n        '500':\n          $ref: '#/components/responses/ServerError'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserStoreReq'\n        description: Secondary user store to add.\n    get:\n      tags:\n        - User Store\n      summary: Retrieve or list the configured secondary user stores.\n      operationId: getSecondaryUserStores\n      description: \u003e\n        This API provides the capability to list the configured secondary userstores.\n        \u003cb\u003ePermission required:\u003c/b\u003e\n        */permission/admin\n      parameters:\n        - $ref: '#/components/parameters/limitQueryParam'\n        - $ref: '#/components/parameters/offsetQueryParam'\n        - $ref: '#/components/parameters/filterQueryParam'\n        - $ref: '#/components/parameters/sortQueryParam'\n        - $ref: '#/components/parameters/requiredAttributesQueryParam'\n      responses:\n        '200':\n          description: Successful response.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserStoreListResponse'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n        '501':\n          $ref: '#/components/responses/NotImplemented'\n  '/userstores/primary':\n    get:\n      tags:\n        - User Store\n      summary: \u003e-\n        Retrieve the configurations of primary userstore.\n      operationId: getPrimaryUserStore\n      description: \u003e\n        This API provides the capability to retrieve the configurations of\n        primary user store.\n\n          \u003cb\u003ePermission required:\u003c/b\u003e\n        */permission/admin\n      responses:\n        '200':\n          description: Successful response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStoreConfigurationsRes'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/userstores/{userstore-domain-id}':\n    get:\n      tags:\n        - User Store\n      summary: \u003e-\n        Retrieve the configurations of secondary user store based on its domain id.\n      operationId: getUserStoreByDomainId\n      description: \u003e\n        This API provides the capability to retrieve the configurations of\n        secondary user store based on its domain id.\n\n          \u003cb\u003ePermission required:\u003c/b\u003e\n        */permission/admin\n      parameters:\n        - $ref: '#/components/parameters/domainNamePathParam'\n      responses:\n        '200':\n          description: Successful response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStoreConfigurationsRes'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n    delete:\n      tags:\n        - User Store\n      summary: Delete a secondary user store.\n      operationId: deleteUserStore\n      description: \u003e\n        This API provides the capability to delete a secondary user store\n        matching to the given user store domain id.\n\n         \u003cb\u003ePermission required:\u003c/b\u003e\n         */permission/admin\n      parameters:\n        - $ref: '#/components/parameters/domainNamePathParam'\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '500':\n          $ref: '#/components/responses/ServerError'\n    put:\n      tags:\n        - User Store\n      summary: Update a user store by its domain id.\n      operationId: updateUserStore\n      description: \u003e\n        This API provides the capability to edit a user store based on its\n        domain id.\n\n         \u003cb\u003ePermission required:\u003c/b\u003e\n          */permission/admin\n      parameters:\n        - in: path\n          name: userstore-domain-id\n          required: true\n          description: Current domain id of the user store\n          schema:\n            type: string\n            example: SkRCQy1TRUNPTkRBUlk\n      responses:\n        '200':\n          description: Successful response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStoreResponse'\n        '400':\n          $ref: '#/components/responses/InvalidInput'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserStoreReq'\n              # But not allowing to change the typeName and name in the PUT request.\n        description: \u003e-\n          The secondary user store values which are needed to be edited for a\n          given domain id.\n    patch:\n      tags:\n        - User Store\n      summary: Patch the secondary user store by it's domain id.\n      operationId: patchUserStore\n      description: \u003e\n        This API provides the capability to update the secondary user store's\n        property using patch request by using its domain id.\n\n         \u003cb\u003ePermission required:\u003c/b\u003e\n         */permission/admin\n      parameters:\n        - $ref: '#/components/parameters/domainNamePathParam'\n      responses:\n        '200':\n          description: Successful response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStoreResponse'\n        '400':\n          $ref: '#/components/responses/InvalidInput'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchRequest'\n        required: true\n\n  /userstores/{userstore-domain-id}/attribute-mappings:\n    patch:\n      tags:\n        - User Store\n      summary: Update the secondary user store attribute mappings by it's domain id.\n      operationId: updateAttributeMappings\n      description: \u003e\n        This API provides the capability to update the secondary user store's attribute mappings using patch request by using its domain id.\n         \u003cb\u003ePermission required:\u003c/b\u003e\n         */permission/admin\n      parameters:\n        - $ref: '#/components/parameters/domainNamePathParam'\n      responses:\n        '200':\n          $ref: '#/components/responses/OK'\n        '400':\n          $ref: '#/components/responses/InvalidInput'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AttributeMappingsReq'\n        required: true\n  /userstores/meta/types:\n    get:\n      tags:\n        - Meta\n      summary: Retrieve the available user store classes/types.\n      operationId: getAvailableUserStoreTypes\n      description: \u003e\n        This API provides the capability to retrieve the available user store\n        types.\n\n         \u003cb\u003ePermission required:\u003c/b\u003e\n\n        */permission/admin\n      responses:\n        '200':\n          description: Successful Response.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AvailableUserStoreClassesRes'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/userstores/meta/types/{type-id}':\n    get:\n      tags:\n        - Meta\n      summary: \u003e-\n        Retrieve the properties of secondary user store of a given user store type.\n      operationId: getUserStoreManagerProperties\n      description: \u003e\n        This API provides the capability to retrieve the properties of secondary\n        user store of a given class name.\n\n         \u003cb\u003ePermission required:\u003c/b\u003e\n\n        */permission/admin\n      parameters:\n        - in: path\n          name: type-id\n          required: true\n          description: Id of the user store type\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetaUserStoreType'\n        '400':\n          $ref: '#/components/responses/InvalidInput'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n        '501':\n          $ref: '#/components/responses/NotImplemented'\n  '/userstores/meta/types/{type-id}/attributes':\n    get:\n      tags:\n        - Meta\n      summary: \u003e-\n        Retrieve the meta attributes of a user store of a given user store type.\n      operationId: getUserStoreAttributeMappings\n      description: \u003e\n        This API provides the capability to retrieve the attribute mappings\n        of a given user store type\n\n        \u003cb\u003ePermission required:\u003c/b\u003e\u003cbr\u003e\n        */permission/admin/manage/identity/userstore/config/view\n\n        \u003cb\u003escope required:\u003c/b\u003e\n        * internal_userstore_view\n      parameters:\n        - in: path\n          name: type-id\n          required: true\n          description: Id of the user store type\n          schema:\n            type: string\n        - $ref: '#/components/parameters/includeIdentityClaimsQueryParam'\n      responses:\n        '200':\n          description: Successful Response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStoreAttributeMappingResponse'\n        '400':\n          $ref: '#/components/responses/InvalidInput'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n            $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  /userstores/test-connection:\n    post:\n      tags:\n        - User Store\n      summary: Test the connection to the datasource used by a JDBC user store manager.\n      operationId: testRDBMSConnection\n      description: \u003e\n        This API provides the capability to test the connection to the\n        datasource used by a JDBC user store manager.\n\n          \u003cb\u003ePermission required:\u003c/b\u003e\n          */permission/admin\n      responses:\n        '200':\n          description: Successful response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionEstablishedResponse'\n        '400':\n          $ref: '#/components/responses/InvalidInput'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '500':\n          $ref: '#/components/responses/ServerError'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RDBMSConnectionReq'\n        description: \u003e-\n          RDBMS connection properties used to connect to the datasource used by a\n          JDBC user store manager.\nservers:\n  - url: 'https://localhost:9443/t/{tenant-domain}/api/server/v1'\n    variables:\n      tenant-domain:\n        default: unknown\ncomponents:\n  parameters:\n    domainNamePathParam:\n      name: userstore-domain-id\n      in: path\n      required: true\n      description: The unique name of the user store domain\n      schema:\n        type: string\n        example: SkRCQy1TRUNPTkRBUlk\n    includeIdentityClaimsQueryParam:\n      in: query\n      name: includeIdentityClaimMappings\n      required: false\n      description: Whether to include the identity claim mappings with userstore attributes.\n      example: true\n      schema:\n        type: boolean\n    limitQueryParam:\n      in: query\n      name: limit\n      required: false\n      description: maximum number of records to return\n      schema:\n        type: integer\n        format: int32\n    offsetQueryParam:\n      in: query\n      name: offset\n      required: false\n      description: number of records to skip for pagination\n      schema:\n        type: integer\n        format: int32\n    filterQueryParam:\n      in: query\n      name: filter\n      required: false\n      description: Condition to filter the retrieval of records.\n      schema:\n        type: string\n    sortQueryParam:\n      in: query\n      name: sort\n      required: false\n      description: Define the order of how the retrieved records should be sorted.\n      schema:\n        type: string\n    requiredAttributesQueryParam:\n      in: query\n      name: requiredAttributes\n      required: false\n      description: Define set of user store attributes (as comma separated) to be returned.\n      schema:\n        type: string\n  responses:\n    NotFound:\n      description: The specified resource is not found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Unauthorized:\n      description: Unauthorized.\n    ServerError:\n      description: Internal Server Error.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    NotImplemented:\n      description: Not Implemented.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    InvalidInput:\n      description: Invalid input request.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Conflict:\n      description: Element Already Exists.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Deleted:\n      description: Item Deleted\n    Created:\n      description: User Store Created.\n    OK:\n      description: OK.\n    Success:\n      description: Connection Established.\n    NoContent:\n      description: No Content.\n    Forbidden:\n      description: Resource Forbidden.\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n    OAuth2:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: 'https://localhost:9443/oauth/authorize'\n          tokenUrl: 'https://localhost:9443/oauth/token'\n          scopes:\n            read: Grants read access\n            write: Grants write access\n            admin: Grants read and write access to administrative information\n  schemas:\n    UserStoreReq:\n      type: object\n      required:\n        - typeId\n        - description\n        - name\n        - properties\n      description: Secondary user store request.\n      properties:\n        typeId:\n          type: string\n          description: The id of the user store manager class type.\n          example: VW5pcXVlSURKREJDVXNlclN0b3JlTWFuYWdlcg\n        description:\n          type: string\n          description: Description of the user store.\n          example: Some description about the user store.\n        name:\n          type: string\n          description: This is a unique name that identifies the user store.\n          example: JDBC-SECONDARY\n        properties:\n          type: array\n          description: \u003e-\n            Various properties related to the user store such as connection URL,\n            connection password etc.\n          items:\n            $ref: '#/components/schemas/Property'\n        claimAttributeMappings:\n          type: array\n          description: Claim attribute mappings.\n          items:\n            $ref: '#/components/schemas/ClaimAttributeMapping'\n    PatchRequest:\n      type: array\n      items:\n        $ref: '#/components/schemas/PatchDocument'\n    ConnectionEstablishedResponse:\n      type: object\n      properties:\n        connection:\n          type: boolean\n          example: true\n    PatchDocument:\n      description: A JSONPatch document as defined by RFC 6902\n      required:\n        - operation\n        - path\n      properties:\n        operation:\n          type: string\n          description: The operation to be performed\n          enum:\n            - ADD\n            - REMOVE\n            - REPLACE\n          example: REPLACE\n        path:\n          type: string\n          description: A JSON-Pointer\n          example: /properties/disabled\n        value:\n          type: string\n          description: The value to be used within the operations\n          example: 'true'\n    RDBMSConnectionReq:\n      required:\n        - driverName\n        - connectionURL\n        - username\n        - connectionPassword\n      description: RDBMS Connection Request.\n      properties:\n        domain:\n          type: string\n          description: User store domain name.\n          example: PRIMARY\n        driverName:\n          type: string\n          description: Driver Name.\n          example: com.mysql.jdbc.Driver\n        connectionURL:\n          type: string\n          description: The Connection URL.\n          example: 'jdbc:mysql://192.168.48.154:3306/test'\n        username:\n          type: string\n          description: The username.\n          example: root\n        connectionPassword:\n          type: string\n          description: The password.\n          example: root\n    ClaimAttributeMapping:\n      type: object\n      required:\n        - claimURI\n        - mappedAttribute\n      properties:\n        claimURI:\n          type: string\n          description: A unique URI specific to the claim.\n          example: \"http://wso2.org/claims/username\"\n        mappedAttribute:\n          type: string\n          description: Userstore attribute to be mapped to.\n          example: \"username\"\n    AttributeMappingsReq:\n      type: array\n      description: Array of ClaimURI attribute mappings.\n      items:\n        $ref: '#/components/schemas/ClaimAttributeMapping'\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: string\n          example: AAA-00000\n        message:\n          type: string\n          example: Some Error Message\n        description:\n          type: string\n          example: Some Error Description\n    Property:\n      type: object\n      required:\n        - name\n        - value\n      properties:\n        name:\n          type: string\n          example: some property name\n        value:\n          type: string\n          example: some property value\n    UserStoreListResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          example: SkRCQy1TRUNPTkRBUlk\n          description: base64 url encoded value of domain name\n        name:\n          type: string\n          example: JDBC-SECONDARY\n          description: Domain name of the secondary user store.\n        enabled:\n          type: boolean\n          example: true\n          description: Enabled status of the userstore.\n        description:\n          type: string\n          example: Some description of the user store\n        isLocal:\n          type: boolean\n          example: true\n          description: Whether the userstore is local or not.\n        self:\n          type: string\n          example: /t/{tenant-domain}/api/server/v1/userstores/SkRCQy1TRUNPTkRBUlk\n          description: Location of the created/updated resource.\n        typeName:\n          type: string\n          example: UniqueIDJDBCUserStoreManager\n          description: User store type name.\n        properties:\n          type: array\n          description: Requested configured user store property for the set\n          items:\n            $ref: '#/components/schemas/AddUserStorePropertiesRes'\n    MetaUserStoreType:\n      type: object\n      properties:\n        typeName:\n          type: string\n          example: UniqueIDJDBCUserStoreManager\n        typeId:\n          type: string\n          example: b3JnLndzbzIuY2FyYm9uLnVzZXIuY29yZS5qZGJjLkpEQkNVc2VyU3RvcmVNYW5hZ2Vy\n        className:\n          type: string\n          example: org.wso2.carbon.user.core.jdbc.UniqueIDJDBCUserStoreManager\n        isLocal:\n          type: boolean\n          example: true\n          description: Whether the userstore is local or not.\n        properties:\n          $ref: '#/components/schemas/UserStorePropertiesRes'\n    UserStoreResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          example: SkRCQy1TRUNPTkRBUlk=\n          description: base64 url encoded value of domain name\n        name:\n          type: string\n          example: JDBC-SECONDARY\n          description: domain name of the secondary user store\n        typeName:\n          type: string\n          example: UniqueIDJDBCUserStoreManager\n        typeId:\n          type: string\n          example: VW5pcXVlSURKREJDVXNlclN0b3JlTWFuYWdlcg\n        description:\n          type: string\n          example: Some description of the user store\n        properties:\n          type: array\n          description: Configured user store proper for the set.\n          items:\n            $ref: '#/components/schemas/AddUserStorePropertiesRes'\n        claimAttributeMappings:\n          type: array\n          description: Configured user store claim attribute mappings\n          items:\n            $ref: '#/components/schemas/ClaimAttributeMapping'\n    AvailableUserStoreClassesRes:\n      type: object\n      description: Available User Store Classes Response.\n      properties:\n        typeId:\n          type: string\n          example: VW5pcXVlSURKREJDVXNlclN0b3JlTWFuYWdlcg\n        typeName:\n          type: string\n          example: UniqueIDJDBCUserStoreManager\n        className:\n          type: string\n          example: org.wso2.carbon.user.core.jdbc.UniqueIDJDBCUserStoreManager\n        isLocal:\n          type: boolean\n          example: true\n          description: Whether the userstore is local or not.\n        self:\n          type: string\n          example: /t/{tenant-domain}/api/server/v1/userstores/meta/types/VW5pcXVlSURKREJDVXNlclN0b3JlTWFuYWdlcg\n    UserStoreConfigurationsRes:\n      type: object\n      description: Available User Store Configurations Response.\n      properties:\n        typeName:\n          type: string\n          example: UniqueIDJDBCUserStoreManager\n        typeId:\n          type: string\n          example: VW5pcXVlSURKREJDVXNlclN0b3JlTWFuYWdlcg\n        name:\n          type: string\n          example: JDBC-SECONDARY\n        description:\n          type: string\n          example: Some description of the user store\n        className:\n          type: string\n          example: org.wso2.carbon.user.core.jdbc.UniqueIDJDBCUserStoreManager\n        isLocal:\n          type: boolean\n          example: true\n          description: Whether the userstore is local or not.\n        properties:\n          type: array\n          description: Configured user store property for the set\n          items:\n            $ref: '#/components/schemas/AddUserStorePropertiesRes'\n        claimAttributeMappings:\n          type: array\n          description: Requested configured user store claim attribute mappings.\n          items:\n            $ref: '#/components/schemas/ClaimAttributeMapping'\n    AddUserStorePropertiesRes:\n      type: object\n      description: Available User Store Properties.\n      required:\n        - name\n        - value\n      properties:\n        name:\n          type: string\n          example: ConnectionName\n        value:\n          type: string\n          example: 'CN=,DC='\n    UserStorePropertiesRes:\n      properties:\n        Mandatory:\n          type: array\n          items:\n            $ref: '#/components/schemas/PropertiesRes'\n        Optional:\n          type: array\n          items:\n            $ref: '#/components/schemas/PropertiesRes'\n        Advanced:\n          type: array\n          items:\n            $ref: '#/components/schemas/PropertiesRes'\n    PropertiesRes:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Some Mandatory Property Name\n        defaultValue:\n          type: string\n          example: Some Mandatory Property Value\n        description:\n          type: string\n          example: Description of the property\n        attributes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Attribute'\n    Attribute:\n      type: object\n      properties:\n        name:\n          type: string\n          example: category\n        value:\n          type: string\n          example: basic\n    UserStoreAttributeMappingResponse:\n      type: object\n      properties:\n        typeName:\n          type: string\n          description: Type name of the userstore.\n          example: org.wso2.carbon.user.core.ldap.UniqueIDActiveDirectoryUserStoreManager\n        typeId:\n          type: string\n          description: Type id of the userstore.\n          example: b3JnLndzbzIuY2FyYm9uLnVzZXIuY29yZS5qZGJjLkpEQkNVc2VyU3RvcmVNYW5hZ2Vy\n        isLocal:\n          type: boolean\n          description: Whether the userstore is local or not.\n          example: true\n        attributeMappings:\n          type: array\n          description: Userstore attribute mappings.\n          items:\n            $ref: '#/components/schemas/UserStoreAttributeResponse'\n    UserStoreAttributeResponse:\n      type: object\n      properties:\n        claimId:\n          type: string\n          description: Claim id of the attribute.\n          example: bzIuY2FyYm9uLnVzZXIuY29yZS5qZG\n        claimURI:\n          type: string\n          description: Claim URI of the attribute.\n          example: http://wso2.org/claims/givenname\n        mappedAttribute:\n          type: string\n          description: Mapped attribute name.\n          example: givenName\n        displayName:\n          type: string\n          description: Display name of the attribute.\n          example: First Name\n",
			"canonicalURL": "/github.com/wso2/identity-api-server@1c81f70117e6130228ac537f8526ad3655061b43/-/blob/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/resources/userstore.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/wso2/identity-api-server/blob/1c81f70117e6130228ac537f8526ad3655061b43/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/resources/userstore.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/userstores/meta/types/{type-id}/attributes\": get: security: security \"OAuth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}