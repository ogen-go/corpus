{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/apicurio.local/registry/1.3.2.Final/openapi.yaml",
			"byteSize": 75339,
			"content": "openapi: 3.0.2\nservers:\n  - url: http://apicurio.local\ninfo:\n  contact:\n    email: apicurio@lists.jboss.org\n    name: Apicurio\n    url: https://github.com/apicurio/apicurio-registry\n  description: |\n    Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.\n\n    The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata. \n\n    The supported artifact types include:\n    - Apache Avro schema\n    - AsyncAPI specification\n    - Google protocol buffers (schema and file descriptor)\n    - GraphQL schema\n    - JSON Schema\n    - Kafka Connect schema\n    - OpenAPI specification\n    - Web Services Description Language\n    - XML Schema Definition\n\n\n    **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`.\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0\n  title: Apicurio Registry API\n  version: 1.3.2.Final\n  x-apisguru-categories:\n    - developer_tools\n  x-origin:\n    - format: openapi\n      url: https://raw.githubusercontent.com/Apicurio/apicurio-registry/master/app/src/main/resources-unfiltered/META-INF/resources/api-specifications/registry/v1/openapi.json\n      version: \"3.0\"\n  x-preferred: false\n  x-providerName: apicurio.local\n  x-serviceName: registry\ntags:\n  - description: |-\n      The primary way to interact with the Apicurio Registry API is to add, update, \n      or delete artifacts. This section includes all of these primary operations.\n    name: Artifacts\n  - description: |-\n      Sometimes the metadata for an artifact is important. For example, metadata includes \n      when the artifact was created, last updated, and so on. This section contains \n      operations to access (and in some cases change) an artifact's metadata.\n    name: Metadata\n  - description: |-\n      Whenever an artifact's content is updated, the old versions of the artifact's content\n      are not lost.  All versions can be listed and accessed if necessary.  This section \n      describes the operations used to list and access all versions of an artifact's content\n      and metadata.\n    name: Versions\n  - description: |-\n      Rules can be configured on a per-artifact basis, allowing for different approaches\n      to content evolution for each artifact.  These rules will override any global rules\n      that have been configured.  This section contains the operations used to manage a\n      single artifact's rules.\n    name: Artifact rules\n  - description: |-\n      Global rules can be configured in the registry to govern how artifact content can \n      evolve over time (as artifact content is **updated**). Global rules will be applied \n      whenever an artifact is added to the registry, and also whenever an artifact's \n      content is updated (only if that artifact doesn't have its own specific rules \n      configured). This section describes the operations used to manage the global rules.\n    name: Global rules\n  - description: \"The search API is used to browse or find artifacts in the registry. This section describes the operations for searching for artifacts and versions. \"\n    name: Search\npaths:\n  /artifacts:\n    get:\n      description: |-\n        Returns a list of IDs of all artifacts in the registry as a flat list.  Typically the\n        server is configured to limit the number of artifact IDs returned when a large number \n        of artifacts exist. In this case, the result of this call may be non-deterministic. The \n        default limit is typically 1000 artifacts.\n      operationId: listArtifacts\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: |-\n            On a successful response, returns an array of artifact IDs - one for each artifact\n            in the registry.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: List all artifact IDs\n      tags:\n        - Artifacts\n    post:\n      description: |\n        Creates a new artifact by posting the artifact content.  The body of the request should\n        be the raw content of the artifact.  This is typically in JSON format for *most* of the \n        supported types, but may be in another format for a few (for example, `PROTOBUF`).\n\n        The registry attempts to figure out what kind of artifact is being added from the\n        following supported list:\n\n        * Avro (`AVRO`)\n        * Protobuf (`PROTOBUF`)\n        * Protobuf File Descriptor (`PROTOBUF_FD`)\n        * JSON Schema (`JSON`)\n        * Kafka Connect (`KCONNECT`)\n        * OpenAPI (`OPENAPI`)\n        * AsyncAPI (`ASYNCAPI`)\n        * GraphQL (`GRAPHQL`)\n        * Web Services Description Language (`WSDL`)\n        * XML Schema (`XSD`)\n\n        Alternatively, you can specify the artifact type using the `X-Registry-ArtifactType` \n        HTTP request header, or include a hint in the request's `Content-Type`.  For example:\n\n        ```\n        Content-Type: application/json; artifactType=AVRO\n        ```\n\n        An artifact is created using the content provided in the body of the request.  This\n        content is created under a unique artifact ID that can be provided in the request\n        using the `X-Registry-ArtifactId` request header.  If not provided in the request,\n        the server generates a unique ID for the artifact.  It is typically recommended\n        that callers provide the ID, because this is typically a meaningful identifier, \n        and for most use cases should be supplied by the caller.\n\n        If an artifact with the provided artifact ID already exists, the default behavior\n        is for the server to reject the content with a 409 error.  However, the caller can\n        supply the `ifExists` query parameter to alter this default behavior. The `ifExists`\n        query parameter can have one of the following values:\n\n        * `FAIL` (*default*) - server rejects the content with a 409 error\n        * `UPDATE` - server updates the existing artifact and returns the new metadata\n        * `RETURN` - server does not create or add content to the server, but instead \n        returns the metadata for the existing artifact\n        * `RETURN_OR_UPDATE` - server returns an existing **version** that matches the \n        provided content if such a version exists, otherwise a new version is created\n\n        This operation may fail for one of the following reasons:\n\n        * An invalid `ArtifactType` was indicated (HTTP error `400`)\n        * No `ArtifactType` was indicated and the server could not determine one from the content (HTTP error `400`)\n        * Provided content (request body) was empty (HTTP error `400`)\n        * An artifact with the provided ID already exists (HTTP error `409`)\n        * The content violates one of the configured global rules (HTTP error `409`)\n        * A server error occurred (HTTP error `500`)\n      operationId: createArtifact\n      parameters:\n        - description: |-\n            Specifies the type of the artifact being added. Possible values include:\n\n            * Avro (`AVRO`)\n            * Protobuf (`PROTOBUF`)\n            * Protobuf File Descriptor (`PROTOBUF_FD`)\n            * JSON Schema (`JSON`)\n            * Kafka Connect (`KCONNECT`)\n            * OpenAPI (`OPENAPI`)\n            * AsyncAPI (`ASYNCAPI`)\n            * GraphQL (`GRAPHQL`)\n            * Web Services Description Language (`WSDL`)\n            * XML Schema (`XSD`)\n          in: header\n          name: X-Registry-ArtifactType\n          schema:\n            enum:\n              - AVRO\n              - PROTOBUF\n              - PROTOBUF_FD\n              - JSON\n              - OPENAPI\n              - ASYNCAPI\n              - GRAPHQL\n              - KCONNECT\n              - WSDL\n              - XSD\n              - XML\n            type: string\n        - description: A client-provided, globally unique identifier for the new artifact.\n          in: header\n          name: X-Registry-ArtifactId\n          schema:\n            type: string\n        - description: Set this option to instruct the server on what to do if the artifact already exists.\n          in: query\n          name: ifExists\n          schema:\n            enum:\n              - FAIL\n              - UPDATE\n              - RETURN\n              - RETURN_OR_UPDATE\n            type: string\n      requestBody:\n        content:\n          \"*/*\":\n            examples:\n              OpenAPI Example:\n                value:\n                  components:\n                    schemas:\n                      Widget:\n                        description: A sample data type.\n                        example:\n                          property-1: value1\n                          property-2: true\n                        properties:\n                          property-1:\n                            type: string\n                          property-2:\n                            type: boolean\n                        title: Root Type for Widget\n                        type: object\n                  info:\n                    description: An example API design using OpenAPI.\n                    title: Empty API\n                    version: 1.0.7\n                  openapi: 3.0.2\n                  paths:\n                    /widgets:\n                      get:\n                        responses:\n                          \"200\":\n                            content:\n                              application/json:\n                                schema:\n                                  items:\n                                    type: string\n                                  type: array\n                            description: All widgets\n                        summary: Get widgets\n        description: |\n          The content of the artifact being created. This is often, but not always, JSON data\n          representing one of the supported artifact types:\n\n          * Avro (`AVRO`)\n          * Protobuf (`PROTOBUF`)\n          * Protobuf File Descriptor (`PROTOBUF_FD`)\n          * JSON Schema (`JSON`)\n          * Kafka Connect (`KCONNECT`)\n          * OpenAPI (`OPENAPI`)\n          * AsyncAPI (`ASYNCAPI`)\n          * GraphQL (`GRAPHQL`)\n          * Web Services Description Language (`WSDL`)\n          * XML Schema (`XSD`)\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArtifactMetaData\"\n          description: Artifact was successfully created.\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"409\":\n          $ref: \"#/components/responses/Conflict\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Create artifact\n      tags:\n        - Artifacts\n      x-codegen-async: true\n    summary: Manage the collection of artifacts in the registry.\n  \"/artifacts/{artifactId}\":\n    delete:\n      description: |-\n        Deletes an artifact completely, resulting in all versions of the artifact also being\n        deleted.  This may fail for one of the following reasons:\n\n        * No artifact with the `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: deleteArtifact\n      responses:\n        \"204\":\n          description: Returned when the artifact was successfully deleted.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Delete artifact\n      tags:\n        - Artifacts\n    get:\n      description: |\n        Returns the latest version of the artifact in its raw form.  The `Content-Type` of the\n        response depends on the artifact type.  In most cases, this is `application/json`, but \n        for some types it may be different (for example, `PROTOBUF`).\n\n        This operation may fail for one of the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getLatestArtifact\n      responses:\n        \"200\":\n          content:\n            application/graphql: {}\n            application/json:\n              examples:\n                OpenAPI:\n                  value:\n                    info:\n                      description: An example API design using OpenAPI.\n                      title: Empty API\n                      version: 1.0.0\n                    openapi: 3.0.2\n            application/x-protobuf:\n              examples:\n                Protobuf Example:\n                  value: |-\n                    message SearchResponse {\n                      repeated Result result = 1;\n                    }\n\n                    message Result {\n                      required string url = 1;\n                      optional string title = 2;\n                      repeated string snippets = 3;\n                    }\n            application/x-protobuffer:\n              examples:\n                Protobuffer Example:\n                  value: |-\n                    message SearchResponse {\n                      repeated Result result = 1;\n                    }\n\n                    message Result {\n                      required string url = 1;\n                      optional string title = 2;\n                      repeated string snippets = 3;\n                    }\n          description: The most recent version of the artifact.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get latest artifact\n      tags:\n        - Artifacts\n    parameters:\n      - description: The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          type: string\n    put:\n      description: |-\n        Updates an artifact by uploading new content.  The body of the request should\n        be the raw content of the artifact.  This is typically in JSON format for *most*\n        of the supported types, but may be in another format for a few (for example, `PROTOBUF`).\n\n        The registry attempts to figure out what kind of artifact is being added from the\n        following supported list:\n\n        * Avro (`AVRO`)\n        * Protobuf (`PROTOBUF`)\n        * Protobuf File Descriptor (`PROTOBUF_FD`)\n        * JSON Schema (`JSON`)\n        * Kafka Connect (`KCONNECT`)\n        * OpenAPI (`OPENAPI`)\n        * AsyncAPI (`ASYNCAPI`)\n        * GraphQL (`GRAPHQL`)\n        * Web Services Description Language (`WSDL`)\n        * XML Schema (`XSD`)\n\n        Alternatively, you can specify the artifact type using the `X-Registry-ArtifactType` \n        HTTP request header, or include a hint in the request's `Content-Type`.  For example:\n\n        ```\n        Content-Type: application/json; artifactType=AVRO\n        ```\n\n        The update could fail for a number of reasons including:\n\n        * Provided content (request body) was empty (HTTP error `400`)\n        * No artifact with the `artifactId` exists (HTTP error `404`)\n        * The new content violates one of the rules configured for the artifact (HTTP error `409`)\n        * The provided artifact type is not recognized (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n\n        When successful, this creates a new version of the artifact, making it the most recent\n        (and therefore official) version of the artifact.\n      operationId: updateArtifact\n      parameters:\n        - description: |-\n            Specifies the type of the artifact being added.  Possible values include:\n\n            * Avro (`AVRO`)\n            * Protobuf (`PROTOBUF`)\n            * Protobuf File Descriptor (`PROTOBUF_FD`)\n            * JSON Schema (`JSON`)\n            * Kafka Connect (`KCONNECT`)\n            * OpenAPI (`OPENAPI`)\n            * AsyncAPI (`ASYNCAPI`)\n            * GraphQL (`GRAPHQL`)\n            * Web Services Description Language (`WSDL`)\n            * XML Schema (`XSD`)\n          in: header\n          name: X-Registry-ArtifactType\n          required: false\n          schema:\n            enum:\n              - AVRO\n              - PROTOBUF\n              - PROTOBUF_FD\n              - JSON\n              - OPENAPI\n              - ASYNCAPI\n              - GRAPHQL\n              - KCONNECT\n              - WSDL\n              - XSD\n              - XML\n            type: string\n      requestBody:\n        content:\n          \"*/*\":\n            examples:\n              OpenAPI Example:\n                value:\n                  components:\n                    schemas:\n                      Widget:\n                        description: A sample data type.\n                        example:\n                          property-1: value1\n                          property-2: true\n                        properties:\n                          property-1:\n                            type: string\n                          property-2:\n                            type: boolean\n                        title: Root Type for Widget\n                        type: object\n                  info:\n                    description: An example API design using OpenAPI.\n                    title: Empty API\n                    version: 1.0.7\n                  openapi: 3.0.2\n                  paths:\n                    /widgets:\n                      get:\n                        responses:\n                          \"200\":\n                            content:\n                              application/json:\n                                schema:\n                                  items:\n                                    type: string\n                                  type: array\n                            description: All widgets\n                        summary: Get widgets\n        description: |\n          The new content of the artifact being updated. This is often, but not always, JSON data\n          representing one of the supported artifact types:\n\n          * Avro (`AVRO`)\n          * Protobuf (`PROTOBUF`)\n          * Protobuf File Descriptor (`PROTOBUF_FD`)\n          * JSON Schema (`JSON`)\n          * Kafka Connect (`KCONNECT`)\n          * OpenAPI (`OPENAPI`)\n          * AsyncAPI (`ASYNCAPI`)\n          * GraphQL (`GRAPHQL`)\n          * Web Services Description Language (`WSDL`)\n          * XML Schema (`XSD`)\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArtifactMetaData\"\n          description: When successful, returns the updated artifact metadata.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"409\":\n          $ref: \"#/components/responses/Conflict\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update artifact\n      tags:\n        - Artifacts\n      x-codegen-async: true\n    summary: Manage a single artifact.\n  \"/artifacts/{artifactId}/meta\":\n    get:\n      description: |-\n        Gets the metadata for an artifact in the registry.  The returned metadata includes\n        both generated (read-only) and editable metadata (such as name and description).\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getArtifactMetaData\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArtifactMetaData\"\n          description: The artifact's metadata.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get artifact metadata\n      tags:\n        - Metadata\n    parameters:\n      - description: The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          type: string\n    post:\n      description: |\n        Gets the metadata for an artifact that matches the raw content.  Searches the registry\n        for a version of the given artifact matching the content provided in the body of the\n        POST.\n\n        This operation can fail for the following reasons:\n\n        * Provided content (request body) was empty (HTTP error `400`)\n        * No artifact with the `artifactId` exists (HTTP error `404`)\n        * No artifact version matching the provided content exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getArtifactMetaDataByContent\n      requestBody:\n        content:\n          application/json:\n            examples:\n              OpenAPI Example:\n                value:\n                  components:\n                    schemas:\n                      Widget:\n                        description: A sample data type.\n                        example:\n                          property-1: value1\n                          property-2: true\n                        properties:\n                          property-1:\n                            type: string\n                          property-2:\n                            type: boolean\n                        title: Root Type for Widget\n                        type: object\n                  info:\n                    description: An example API design using OpenAPI.\n                    title: Empty API\n                    version: 1.0.7\n                  openapi: 3.0.2\n                  paths:\n                    /widgets:\n                      get:\n                        responses:\n                          \"200\":\n                            content:\n                              application/json:\n                                schema:\n                                  items:\n                                    type: string\n                                  type: array\n                            description: All widgets\n                        summary: Get widgets\n        description: The content of an artifact version.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArtifactMetaData\"\n          description: The metadata of the artifact version matching the provided content.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get artifact metadata by content\n      tags:\n        - Metadata\n    put:\n      description: |-\n        Updates the editable parts of the artifact's metadata.  Not all metadata fields can\n        be updated.  For example, `createdOn` and `createdBy` are both read-only properties.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with the `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: updateArtifactMetaData\n      requestBody:\n        content:\n          \"*/*\":\n            schema:\n              $ref: \"#/components/schemas/EditableMetaData\"\n        description: Updated artifact metadata.\n        required: true\n      responses:\n        \"204\":\n          description: The artifact's metadata was updated.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update artifact metadata\n      tags:\n        - Metadata\n    summary: Manage the metadata of a single artifact.\n  \"/artifacts/{artifactId}/rules\":\n    delete:\n      description: |-\n        Deletes all of the rules configured for the artifact.  After this is done, the global\n        rules apply to the artifact again.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: deleteArtifactRules\n      responses:\n        \"204\":\n          description: The rules were successfully deleted.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Delete artifact rules\n      tags:\n        - Artifact rules\n    get:\n      description: |-\n        Returns a list of all rules configured for the artifact.  The set of rules determines\n        how the content of an artifact can evolve over time.  If no rules are configured for\n        an artifact, the set of globally configured rules are used.  If no global rules \n        are defined, there are no restrictions on content evolution.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: listArtifactRules\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RuleType\"\n                type: array\n          description: Returns the names of the rules configured for the artifact.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: List artifact rules\n      tags:\n        - Artifact rules\n    parameters:\n      - description: The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          type: string\n    post:\n      description: |-\n        Adds a rule to the list of rules that get applied to the artifact when adding new\n        versions.  All configured rules must pass to successfully add a new artifact version.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * Rule (named in the request body) is unknown (HTTP error `400`)\n        * A server error occurred (HTTP error `500`)\n      operationId: createArtifactRule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Rule\"\n        required: true\n      responses:\n        \"204\":\n          description: The rule was added.\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Create artifact rule\n      tags:\n        - Artifact rules\n    summary: Manage the rules for a single artifact.\n  \"/artifacts/{artifactId}/rules/{rule}\":\n    delete:\n      description: |-\n        Deletes a rule from the artifact.  This results in the rule no longer applying for\n        this artifact.  If this is the only rule configured for the artifact, this is the \n        same as deleting **all** rules, and the globally configured rules now apply to\n        this artifact.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No rule with this name/type is configured for this artifact (HTTP error `404`)\n        * Invalid rule type (HTTP error `400`)\n        * A server error occurred (HTTP error `500`)\n      operationId: deleteArtifactRule\n      responses:\n        \"204\":\n          description: The rule was successfully deleted.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Delete artifact rule\n      tags:\n        - Artifact rules\n    get:\n      description: |-\n        Returns information about a single rule configured for an artifact.  This is useful\n        when you want to know what the current configuration settings are for a specific rule.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No rule with this name/type is configured for this artifact (HTTP error `404`)\n        * Invalid rule type (HTTP error `400`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getArtifactRuleConfig\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Rule\"\n          description: Information about a rule.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get artifact rule configuration\n      tags:\n        - Artifact rules\n    parameters:\n      - description: The unique name/type of a rule.\n        in: path\n        name: rule\n        required: true\n        schema:\n          enum:\n            - VALIDITY\n            - COMPATIBILITY\n          type: string\n      - description: The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          type: string\n    put:\n      description: |\n        Updates the configuration of a single rule for the artifact.  The configuration data\n        is specific to each rule type, so the configuration of the `COMPATIBILITY` rule \n        is in a different format from the configuration of the `VALIDITY` rule.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No rule with this name/type is configured for this artifact (HTTP error `404`)\n        * Invalid rule type (HTTP error `400`)\n        * A server error occurred (HTTP error `500`)\n      operationId: updateArtifactRuleConfig\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Rule\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Rule\"\n          description: Rule configuration was updated.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update artifact rule configuration\n      tags:\n        - Artifact rules\n    summary: Manage the configuration of a single artifact rule.\n  \"/artifacts/{artifactId}/state\":\n    parameters:\n      - description: The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          type: string\n    put:\n      description: |\n        Updates the state of the artifact.  For example, you can use this to mark the latest\n        version of an artifact as `DEPRECATED`.  The operation changes the state of the latest \n        version of the artifact.  If multiple versions exist, only the most recent is changed.\n\n        The following state changes are supported:\n\n        * Enabled -\u003e Disabled\n        * Enabled -\u003e Deprecated\n        * Enabled -\u003e Deleted\n        * Disabled -\u003e Enabled\n        * Disabled -\u003e Deleted\n        * Disabled -\u003e Deprecated\n        * Deprecated -\u003e Deleted\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * Artifact cannot transition to the given state (HTTP error `400`)\n        * A server error occurred (HTTP error `500`)\n      operationId: updateArtifactState\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateState\"\n        required: true\n      responses:\n        \"204\":\n          description: Returned when the operation was successful.\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update artifact state\n      tags:\n        - Artifacts\n    summary: Manage the state of an artifact.\n  \"/artifacts/{artifactId}/test\":\n    parameters:\n      - description: The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          type: string\n    put:\n      description: |-\n        Tests whether an update to the artifact's content *would* succeed for the provided content.\n        Ultimately, this applies any rules configured for the artifact against the given content\n        to determine whether the rules would pass or fail, but without actually updating the artifact\n        content.\n\n        The body of the request should be the raw content of the artifact.  This is typically in \n        JSON format for *most* of the supported types, but may be in another format for a few \n        (for example, `PROTOBUF`).\n\n        The registry attempts to figure out what kind of artifact is being added from the following  supported list: \n\n        * Avro (`AVRO`)  \n        * Protobuf (`PROTOBUF`)  \n        * Protobuf File Descriptor (`PROTOBUF_FD`)  \n        * JSON Schema (`JSON`)  \n        * Kafka Connect (`KCONNECT`) \n        * OpenAPI (`OPENAPI`)  \n        * AsyncAPI (`ASYNCAPI`) \n        * GraphQL (`GRAPHQL`) \n        * Web Services Description Language (`WSDL`) \n        * XML Schema (`XSD`)\n\n        Alternatively, you can explicitly specify the artifact type using the `X-Registry-ArtifactType` \n        HTTP request header, or by including a hint in the request's `Content-Type`.  For example:\n\n        ```\n        Content-Type: application/json; artifactType=AVRO\n        ```\n\n        The update could fail for a number of reasons including:\n\n        * Provided content (request body) was empty (HTTP error `400`)\n        * No artifact with the `artifactId` exists (HTTP error `404`)\n        * The new content violates one of the rules configured for the artifact (HTTP error `409`)\n        * The provided artifact type is not recognized (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n\n        When successful, this operation simply returns a *No Content* response.\n      operationId: testUpdateArtifact\n      parameters:\n        - description: |-\n            This header parameter can be used to indicate the type of the artifact being added.  Possible values include: \n            * Avro (`AVRO`)  \n            * Protobuf (`PROTOBUF`)  \n            * Protobuf File Descriptor (`PROTOBUF_FD`)  \n            * JSON Schema (`JSON`)  \n            * Kafka Connect (`KCONNECT`)  \n            * OpenAPI (`OPENAPI`)  \n            * AsyncAPI (`ASYNCAPI`) \n            * GraphQL (`GRAPHQL`)  \n            * Web Services Description Language (`WSDL`)  \n            * XML Schema (`XSD`)\n          in: header\n          name: X-Registry-ArtifactType\n          schema:\n            enum:\n              - AVRO\n              - PROTOBUF\n              - PROTOBUF_FD\n              - JSON\n              - OPENAPI\n              - ASYNCAPI\n              - GRAPHQL\n              - KCONNECT\n              - WSDL\n              - XSD\n              - XML\n            type: string\n      requestBody:\n        content:\n          \"*/*\": {}\n        description: |\n          The content of the artifact being tested. This is often, but not always, JSON data\n          representing one of the supported artifact types:\n\n          * Avro (`AVRO`)\n          * Protobuf (`PROTOBUF`)\n          * Protobuf File Descriptor (`PROTOBUF_FD`)\n          * JSON Schema (`JSON`)\n          * Kafka Connect (`KCONNECT`)\n          * OpenAPI (`OPENAPI`)\n          * AsyncAPI (`ASYNCAPI`)\n          * GraphQL (`GRAPHQL`)\n          * Web Services Description Language (`WSDL`)\n          * XML Schema (`XSD`)\n        required: true\n      responses:\n        \"204\":\n          description: |-\n            When successful, returns \"No Content\" to indicate that the rules passed, and the\n            content was not updated.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"409\":\n          $ref: \"#/components/responses/Conflict\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Test update artifact\n      tags:\n        - Artifact rules\n    summary: Test whether content would pass update rules.\n  \"/artifacts/{artifactId}/versions\":\n    get:\n      description: |\n        Returns a list of all version numbers for the artifact.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: listArtifactVersions\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                All Versions:\n                  value:\n                    - 5\n                    - 6\n                    - 10\n                    - 103\n              schema:\n                items:\n                  format: int64\n                  type: integer\n                type: array\n          description: List of all artifact versions (just the version IDs).\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: List artifact versions\n      tags:\n        - Versions\n    parameters:\n      - description: The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          type: string\n    post:\n      description: |\n        Creates a new version of the artifact by uploading new content.  The configured rules for\n        the artifact are applied, and if they all pass, the new content is added as the most recent \n        version of the artifact.  If any of the rules fail, an error is returned.\n\n        The body of the request should be the raw content of the new artifact version.  This \n        is typically in JSON format for *most* of the supported types, but may be in another \n        format for a few (for example, `PROTOBUF`).\n\n        The registry attempts to figure out what kind of artifact is being added from the\n        following supported list:\n\n        * Avro (`AVRO`)\n        * Protobuf (`PROTOBUF`)\n        * Protobuf File Descriptor (`PROTOBUF_FD`)\n        * JSON Schema (`JSON`)\n        * Kafka Connect (`KCONNECT`)\n        * OpenAPI (`OPENAPI`)\n        * AsyncAPI (`ASYNCAPI`)\n        * GraphQL (`GRAPHQL`)\n        * Web Services Description Language (`WSDL`)\n        * XML Schema (`XSD`)\n\n        Alternatively, you can explicitly specify the artifact type using the `X-Registry-ArtifactType` \n        HTTP request header, or by including a hint in the request's `Content-Type`.\n\n        For example:\n\n        ```\n        Content-Type: application/json; artifactType=AVRO\n        ```\n\n        This operation can fail for the following reasons:\n\n        * Provided content (request body) was empty (HTTP error `400`)\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * The new content violates one of the rules configured for the artifact (HTTP error `409`)\n        * A server error occurred (HTTP error `500`)\n      operationId: createArtifactVersion\n      parameters:\n        - description: |-\n            This header parameter can be used to indicate the type of the artifact being added. Possible values include: \n            * Avro (`AVRO`)   \n            * Protobuf (`PROTOBUF`)  \n            * Protobuf File Descriptor (`PROTOBUF_FD`)   \n            * JSON Schema (`JSON`)   \n            * Kafka Connect (`KCONNECT`)   \n            * OpenAPI (`OPENAPI`)   \n            * AsyncAPI (`ASYNCAPI`)  \n            * GraphQL (`GRAPHQL`)   \n            * Web Services Description Language (`WSDL`)   \n            * XML Schema (`XSD`)\n          in: header\n          name: X-Registry-ArtifactType\n          schema:\n            enum:\n              - AVRO\n              - PROTOBUF\n              - PROTOBUF_FD\n              - JSON\n              - OPENAPI\n              - ASYNCAPI\n              - GRAPHQL\n              - KCONNECT\n              - WSDL\n              - XSD\n              - XML\n            type: string\n      requestBody:\n        content:\n          \"*/*\":\n            examples:\n              OpenAPI Example:\n                value:\n                  components:\n                    schemas:\n                      Widget:\n                        description: A sample data type.\n                        example:\n                          property-1: value1\n                          property-2: true\n                        properties:\n                          property-1:\n                            type: string\n                          property-2:\n                            type: boolean\n                        title: Root Type for Widget\n                        type: object\n                  info:\n                    description: An example API design using OpenAPI.\n                    title: Empty API\n                    version: 1.0.7\n                  openapi: 3.0.2\n                  paths:\n                    /widgets:\n                      get:\n                        responses:\n                          \"200\":\n                            content:\n                              application/json:\n                                schema:\n                                  items:\n                                    type: string\n                                  type: array\n                            description: All widgets\n                        summary: Get widgets\n        description: |\n          The content of the artifact version being created. This is often, but not always, JSON data\n          representing one of the supported artifact types:\n\n          * Avro (`AVRO`)\n          * Protobuf (`PROTOBUF`)\n          * Protobuf File Descriptor (`PROTOBUF_FD`)\n          * JSON Schema (`JSON`)\n          * Kafka Connect (`KCONNECT`)\n          * OpenAPI (`OPENAPI`)\n          * AsyncAPI (`ASYNCAPI`)\n          * GraphQL (`GRAPHQL`)\n          * Web Services Description Language (`WSDL`)\n          * XML Schema (`XSD`)\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VersionMetaData\"\n          description: The artifact version was successfully created.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"409\":\n          $ref: \"#/components/responses/Conflict\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Create artifact version\n      tags:\n        - Versions\n      x-codegen-async: true\n    summary: Manage all the versions of an artifact in the registry.\n  \"/artifacts/{artifactId}/versions/{version}\":\n    get:\n      description: |\n        Retrieves a single version of the artifact content.  Both the `artifactId` and the\n        unique `version` number must be provided.  The `Content-Type` of the response depends \n        on the artifact type.  In most cases, this is `application/json`, but for some types \n        it may be different (for example, `PROTOBUF`).\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No version with this `version` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getArtifactVersion\n      responses:\n        \"200\":\n          content:\n            application/graphql: {}\n            application/json:\n              examples:\n                OpenAPI:\n                  value:\n                    info:\n                      description: An example API design using OpenAPI.\n                      title: Empty API\n                      version: 1.0.0\n                    openapi: 3.0.2\n            application/x-protobuf:\n              examples:\n                Protobuf Example:\n                  value: |-\n                    message SearchResponse {\n                      repeated Result result = 1;\n                    }\n\n                    message Result {\n                      required string url = 1;\n                      optional string title = 2;\n                      repeated string snippets = 3;\n                    }\n            application/x-protobuffer:\n              examples:\n                Protobuffer Example:\n                  value: |-\n                    message SearchResponse {\n                      repeated Result result = 1;\n                    }\n\n                    message Result {\n                      required string url = 1;\n                      optional string title = 2;\n                      repeated string snippets = 3;\n                    }\n          description: The content of the artifact version.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get artifact version\n      tags:\n        - Versions\n    parameters:\n      - description: The unique identifier of a specific version of the artifact content.\n        in: path\n        name: version\n        required: true\n        schema:\n          type: integer\n      - description: The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          type: string\n    summary: Manage a single version of a single artifact in the registry.\n  \"/artifacts/{artifactId}/versions/{version}/meta\":\n    delete:\n      description: |\n        Deletes the user-editable metadata properties of the artifact version.  Any properties\n        that are not user-editable are preserved.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No version with this `version` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: deleteArtifactVersionMetaData\n      responses:\n        \"204\":\n          description: The artifact version's user-editable metadata was successfully deleted.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Delete artifact version metadata\n      tags:\n        - Metadata\n    get:\n      description: |\n        Retrieves the metadata for a single version of the artifact.  The version metadata is \n        a subset of the artifact metadata and only includes the metadata that is specific to\n        the version (for example, this doesn't include `modifiedOn`).\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No version with this `version` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getArtifactVersionMetaData\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VersionMetaData\"\n          description: The artifact version's metadata.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get artifact version metadata\n      tags:\n        - Metadata\n    parameters:\n      - description: The unique identifier of a specific version of the artifact content.\n        in: path\n        name: version\n        required: true\n        schema:\n          type: integer\n      - description: The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          type: string\n    put:\n      description: |\n        Updates the user-editable portion of the artifact version's metadata.  Only some of \n        the metadata fields are editable by the user.  For example, `description` is editable, \n        but `createdOn` is not.\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No version with this `version` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: updateArtifactVersionMetaData\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditableMetaData\"\n        required: true\n      responses:\n        \"204\":\n          description: The artifact version's metadata was successfully updated.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update artifact version metadata\n      tags:\n        - Metadata\n    summary: Manage the metadata for a single version of an artifact in the registry.\n  \"/artifacts/{artifactId}/versions/{version}/state\":\n    parameters:\n      - description: The unique identifier of a specific version of the artifact content.\n        in: path\n        name: version\n        required: true\n        schema:\n          type: integer\n      - description: The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          type: string\n    put:\n      description: |\n        Updates the state of a specific version of an artifact.  For example, you can use \n        this operation to disable a specific version.\n\n        The following state changes are supported:\n\n        * Enabled -\u003e Disabled\n        * Enabled -\u003e Deprecated\n        * Enabled -\u003e Deleted\n        * Disabled -\u003e Enabled\n        * Disabled -\u003e Deleted\n        * Disabled -\u003e Deprecated\n        * Deprecated -\u003e Deleted\n\n        This operation can fail for the following reasons:\n\n        * No artifact with this `artifactId` exists (HTTP error `404`)\n        * No version with this `version` exists (HTTP error `404`)\n        * Artifact version cannot transition to the given state (HTTP error `400`)\n        * A server error occurred (HTTP error `500`)\n      operationId: updateArtifactVersionState\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateState\"\n        required: true\n      responses:\n        \"204\":\n          description: Returned when the update was successful.\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update artifact version state\n      tags:\n        - Versions\n    summary: Manage the state of a specific artifact version.\n  \"/ids/{globalId}\":\n    get:\n      description: |\n        Gets the content for an artifact version in the registry using its globally unique\n        identifier.\n\n        This operation may fail for one of the following reasons:\n\n        * No artifact version with this `globalId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getArtifactByGlobalId\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                OpenAPI Example:\n                  value:\n                    info:\n                      description: An example API design using OpenAPI.\n                      title: Empty API\n                      version: 1.0.0\n                    openapi: 3.0.2\n            application/x-protobuf:\n              examples:\n                Protobuf Example:\n                  value: |-\n                    message SearchResponse {\n                      repeated Result result = 1;\n                    }\n\n                    message Result {\n                      required string url = 1;\n                      optional string title = 2;\n                      repeated string snippets = 3;\n                    }\n            application/x-protobuffer:\n              examples:\n                Protobuffer Example:\n                  value: |-\n                    message SearchResponse {\n                      repeated Result result = 1;\n                    }\n\n                    message Result {\n                      required string url = 1;\n                      optional string title = 2;\n                      repeated string snippets = 3;\n                    }\n          description: The content of the artifact version.\n      summary: Get artifact by global ID\n      tags:\n        - Artifacts\n    parameters:\n      - description: Global identifier for an artifact version.\n        in: path\n        name: globalId\n        required: true\n        schema:\n          format: int64\n          type: integer\n    summary: Access artifact content utilizing an artifact version's globally unique identifier.\n  \"/ids/{globalId}/meta\":\n    get:\n      description: |\n        Gets the metadata for an artifact version in the registry using its globally unique\n        identifier.  The returned metadata includes both generated (read-only) and editable\n        metadata (such as name and description).\n\n        This operation may fail for one of the following reasons:\n\n        * No artifact version with this `globalId` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getArtifactMetaDataByGlobalId\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArtifactMetaData\"\n          description: The artifact's metadata.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get global artifact metadata\n      tags:\n        - Metadata\n    parameters:\n      - description: Global identifier for an artifact version.\n        in: path\n        name: globalId\n        required: true\n        schema:\n          format: int64\n          type: integer\n    summary: Access an artifact verison's metadata using its globally unique identifier.\n  /rules:\n    delete:\n      description: |\n        Deletes all globally configured rules.\n\n        This operation can fail for the following reasons:\n\n        * A server error occurred (HTTP error `500`)\n      operationId: deleteAllGlobalRules\n      responses:\n        \"204\":\n          description: All global rules have been removed successfully.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Delete all global rules\n      tags:\n        - Global rules\n    get:\n      description: |\n        Gets a list of all the currently configured global rules (if any).\n\n        This operation can fail for the following reasons:\n\n        * A server error occurred (HTTP error `500`)\n      operationId: listGlobalRules\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RuleType\"\n                type: array\n          description: The list of names of the globally configured rules.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: List global rules\n      tags:\n        - Global rules\n    post:\n      description: |\n        Adds a rule to the list of globally configured rules.\n\n        This operation can fail for the following reasons:\n\n        * The rule type is unknown (HTTP error `400`)\n        * The rule already exists (HTTP error `409`)\n        * A server error occurred (HTTP error `500`)\n      operationId: createGlobalRule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Rule\"\n        required: true\n      responses:\n        \"204\":\n          description: The global rule was added.\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"409\":\n          $ref: \"#/components/responses/Conflict\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Create global rule\n      tags:\n        - Global rules\n    summary: Manage the global rules that apply to all artifacts if not otherwise configured.\n  \"/rules/{rule}\":\n    delete:\n      description: |\n        Deletes a single global rule.  If this is the only rule configured, this is the same\n        as deleting **all** rules.\n\n        This operation can fail for the following reasons:\n\n        * Invalid rule name/type (HTTP error `400`)\n        * No rule with name/type `rule` exists (HTTP error `404`)\n        * Rule cannot be deleted (HTTP error `409`)\n        * A server error occurred (HTTP error `500`)\n      operationId: deleteGlobalRule\n      responses:\n        \"204\":\n          description: The global rule was successfully deleted.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Delete global rule\n      tags:\n        - Global rules\n    get:\n      description: |\n        Returns information about the named globally configured rule.\n\n        This operation can fail for the following reasons:\n\n        * Invalid rule name/type (HTTP error `400`)\n        * No rule with name/type `rule` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: getGlobalRuleConfig\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Rule\"\n          description: The global rule's configuration.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Get global rule configuration\n      tags:\n        - Global rules\n    parameters:\n      - description: The unique name/type of a rule.\n        in: path\n        name: rule\n        required: true\n        schema:\n          enum:\n            - VALIDITY\n            - COMPATIBILITY\n          type: string\n    put:\n      description: |\n        Updates the configuration for a globally configured rule.\n\n        This operation can fail for the following reasons:\n\n        * Invalid rule name/type (HTTP error `400`)\n        * No rule with name/type `rule` exists (HTTP error `404`)\n        * A server error occurred (HTTP error `500`)\n      operationId: updateGlobalRuleConfig\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Rule\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Rule\"\n          description: The global rule's configuration was successfully updated.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Update global rule configuration\n      tags:\n        - Global rules\n    summary: Manage the configuration of a single global artifact rule.\n  /search/artifacts:\n    get:\n      description: |\n        Returns a paginated list of all artifacts that match the provided search criteria.\n      operationId: searchArtifacts\n      parameters:\n        - description: The text to search.\n          in: query\n          name: search\n          schema:\n            type: string\n        - description: The number of artifacts to skip before starting to collect the result set.\n          in: query\n          name: offset\n          required: true\n          schema:\n            default: 0\n            type: integer\n        - description: The number of artifacts to return.\n          in: query\n          name: limit\n          required: true\n          schema:\n            default: 20\n            type: integer\n        - description: What fields to search.\n          in: query\n          name: over\n          required: false\n          schema:\n            enum:\n              - everything\n              - name\n              - description\n              - labels\n            type: string\n        - description: Sort order, ascending or descending.\n          in: query\n          name: order\n          required: false\n          schema:\n            enum:\n              - asc\n              - desc\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArtifactSearchResults\"\n          description: |-\n            On a successful response, returns a result set of artifacts - one for each artifact\n            in the registry that matches the criteria.\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Search for artifacts\n      tags:\n        - Search\n        - Artifacts\n    summary: Search for content in the registry; artifacts in particular.\n  \"/search/artifacts/{artifactId}/versions\":\n    get:\n      description: |-\n        Searches for versions of a specific artifact.  This is typically used to get a listing\n        of all versions of an artifact (for example, in a user interface).\n      operationId: searchVersions\n      parameters:\n        - description: The number of versions to skip before starting to collect the result set.\n          in: query\n          name: offset\n          required: true\n          schema:\n            type: integer\n        - description: The number of versions to return.\n          in: query\n          name: limit\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VersionSearchResults\"\n          description: |-\n            On a successful response, returns a result set of versions - one for each version\n            of the artifact.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: \"#/components/responses/ServerError\"\n      summary: Search artifact versions\n      tags:\n        - Search\n        - Versions\n    parameters:\n      - description: The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier.\n        in: path\n        name: artifactId\n        required: true\n        schema:\n          type: string\n    summary: Search for all versions of an artifact.\ncomponents:\n  responses:\n    BadRequest:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: Common response for all operations that can return a `400` error.\n    Conflict:\n      content:\n        application/json:\n          examples:\n            ConflictExample:\n              value:\n                error_code: 409\n                message: The artifact content was invalid.\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: Common response used when an input conflicts with existing data.\n    NotFound:\n      content:\n        application/json:\n          examples:\n            NotFoundExample:\n              value:\n                error_code: 404\n                message: No artifact with id 'Topic-1/Inbound' could be found.\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: Common response for all operations that can return a `404` error.\n    ServerError:\n      content:\n        application/json:\n          examples:\n            ErrorExample:\n              value:\n                error_code: 500\n                message: Lost connection to the database.\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: Common response for all operations that can fail with an unexpected server error.\n  schemas:\n    ArtifactMetaData:\n      description: \"\"\n      example:\n        createdBy: user1\n        createdOn: 2019-03-22T12:51:19Z\n        description: Description of the artifact\n        globalId: 12984719247\n        id: Procurement-Invoice\n        labels:\n          - label-1\n          - label-2\n        modifiedBy: user2\n        modifiedOn: 2019-07-19T15:09:00Z\n        name: Artifact Name\n        properties:\n          custom-1: foo\n          custom-2: bar\n        type: AVRO\n        version: 18\n      properties:\n        createdBy:\n          type: string\n        createdOn:\n          format: date-time\n          type: string\n        description:\n          type: string\n        globalId:\n          description: \"\"\n          format: int64\n          type: integer\n        id:\n          description: \"\"\n          type: string\n        labels:\n          description: \"\"\n          items:\n            type: string\n          type: array\n        modifiedBy:\n          type: string\n        modifiedOn:\n          format: date-time\n          type: string\n        name:\n          type: string\n        properties:\n          $ref: \"#/components/schemas/Properties\"\n          description: \"\"\n        state:\n          $ref: \"#/components/schemas/ArtifactState\"\n          description: \"\"\n        type:\n          $ref: \"#/components/schemas/ArtifactType\"\n          description: \"\"\n        version:\n          description: \"\"\n          format: int64\n          type: integer\n      required:\n        - id\n        - createdBy\n        - createdOn\n        - modifiedBy\n        - modifiedOn\n        - version\n        - type\n        - globalId\n        - state\n      title: Root Type for ArtifactMetaData\n      type: object\n    ArtifactSearchResults:\n      description: Describes the response received when searching for artifacts.\n      properties:\n        artifacts:\n          description: The artifacts that matched the search criteria.\n          items:\n            $ref: \"#/components/schemas/SearchedArtifact\"\n          type: array\n        count:\n          description: The total number of artifacts that matched the search criteria.\n          type: integer\n      required:\n        - count\n        - artifacts\n      type: object\n    ArtifactState:\n      description: |\n        Describes the state of an artifact or artifact version.  The following states\n        are possible:\n\n        * ENABLED\n        * DISABLED\n        * DEPRECATED\n      enum:\n        - ENABLED\n        - DISABLED\n        - DEPRECATED\n        - DELETED\n      type: string\n      x-codegen-package: io.apicurio.registry.types\n    ArtifactType:\n      description: \"\"\n      enum:\n        - AVRO\n        - PROTOBUF\n        - PROTOBUF_FD\n        - JSON\n        - OPENAPI\n        - ASYNCAPI\n        - GRAPHQL\n        - KCONNECT\n        - WSDL\n        - XSD\n        - XML\n      example: AVRO\n      type: string\n      x-codegen-package: io.apicurio.registry.types\n    EditableMetaData:\n      description: \"\"\n      example:\n        description: The description of the artifact.\n        labels:\n          - regional\n          - global\n        name: Artifact Name\n        properties:\n          custom-1: foo\n          custom-2: bar\n      properties:\n        description:\n          type: string\n        labels:\n          description: \"\"\n          items:\n            type: string\n          type: array\n        name:\n          type: string\n        properties:\n          $ref: \"#/components/schemas/Properties\"\n          description: \"\"\n      title: Root Type for EditableArtifactMetaData\n      type: object\n    Error:\n      description: |-\n        All error responses, whether `4xx` or `5xx` will include one of these as the response\n        body.\n      example:\n        error_code: 500\n        message: An error occurred somewhere.\n      properties:\n        detail:\n          description: Full details about the error.  This might contain a server stack trace, for example.\n          type: string\n        error_code:\n          description: The server-side error code.\n          format: int32\n          type: integer\n        message:\n          description: The short error message.\n          type: string\n      title: Root Type for Error\n      type: object\n    Properties:\n      additionalProperties:\n        type: string\n      description: User-defined name-value pairs. Name and value must be strings.\n      type: object\n    Rule:\n      description: \"\"\n      example:\n        config: FULL\n        type: VALIDITY\n      properties:\n        config:\n          type: string\n        type:\n          $ref: \"#/components/schemas/RuleType\"\n      required:\n        - config\n      title: Root Type for Rule\n      type: object\n    RuleType:\n      description: \"\"\n      enum:\n        - VALIDITY\n        - COMPATIBILITY\n      example: VALIDITY\n      type: string\n      x-codegen-package: io.apicurio.registry.types\n    SearchOver:\n      description: \"\"\n      enum:\n        - everything\n        - name\n        - description\n        - labels\n      type: string\n    SearchedArtifact:\n      description: Models a single artifact from the result set returned when searching for artifacts.\n      example:\n        createdBy: user1\n        createdOn: 2019-03-22T12:51:19Z\n        description: Description of the artifact\n        id: Procurement-Invoice\n        labels:\n          - current\n          - internal\n        name: Artifact Name\n        state: ENABLED\n        type: AVRO\n      properties:\n        createdBy:\n          description: \"\"\n          type: string\n        createdOn:\n          description: \"\"\n          format: date-time\n          type: string\n        description:\n          description: \"\"\n          type: string\n        id:\n          description: \"\"\n          type: string\n        labels:\n          description: \"\"\n          items:\n            type: string\n          type: array\n        modifiedBy:\n          description: \"\"\n          type: string\n        modifiedOn:\n          description: \"\"\n          format: date-time\n          type: string\n        name:\n          description: \"\"\n          type: string\n        state:\n          $ref: \"#/components/schemas/ArtifactState\"\n          description: \"\"\n        type:\n          $ref: \"#/components/schemas/ArtifactType\"\n          description: \"\"\n      required:\n        - createdBy\n        - createdOn\n        - id\n        - type\n        - state\n      type: object\n    SearchedVersion:\n      description: Models a single artifact from the result set returned when searching for artifacts.\n      example:\n        createdBy: user1\n        createdOn: 2019-03-22T12:51:19Z\n        description: Description of the artifact version\n        globalId: 3849759283547\n        labels:\n          - current\n          - internal\n        name: Artifact Version Name\n        state: ENABLED\n        type: AVRO\n        version: 17\n      properties:\n        createdBy:\n          description: \"\"\n          type: string\n        createdOn:\n          description: \"\"\n          format: date-time\n          type: string\n        description:\n          description: \"\"\n          type: string\n        globalId:\n          description: \"\"\n          format: int64\n          type: integer\n        labels:\n          description: \"\"\n          items:\n            type: string\n          type: array\n        name:\n          description: \"\"\n          type: string\n        state:\n          $ref: \"#/components/schemas/ArtifactState\"\n          description: \"\"\n        type:\n          $ref: \"#/components/schemas/ArtifactType\"\n          description: \"\"\n        version:\n          description: \"\"\n          format: int32\n          type: integer\n      required:\n        - createdBy\n        - createdOn\n        - type\n        - state\n        - globalId\n        - version\n      type: object\n    SortOrder:\n      description: \"\"\n      enum:\n        - asc\n        - desc\n      type: string\n    UpdateState:\n      description: \"\"\n      example:\n        state: DISABLED\n      properties:\n        state:\n          $ref: \"#/components/schemas/ArtifactState\"\n      required:\n        - state\n      title: Root Type for UpdateState\n      type: object\n    VersionMetaData:\n      description: \"\"\n      example:\n        createdBy: user1\n        createdOn: 2019-05-17T12:00:00Z\n        description: The description of the artifact\n        globalId: 183282932983\n        id: my-artifact-id\n        labels:\n          - label-1\n          - label-2\n        name: Artifact Name\n        properties:\n          custom-1: foo\n          custom-2: bar\n        type: PROTOBUF\n        version: 1221432\n      properties:\n        createdBy:\n          type: string\n        createdOn:\n          format: date-time\n          type: string\n        description:\n          type: string\n        globalId:\n          description: \"\"\n          format: int64\n          type: integer\n        id:\n          description: The artifact id.\n          type: string\n        labels:\n          description: \"\"\n          items:\n            type: string\n          type: array\n        name:\n          type: string\n        properties:\n          $ref: \"#/components/schemas/Properties\"\n          description: \"\"\n        state:\n          $ref: \"#/components/schemas/ArtifactState\"\n          description: \"\"\n        type:\n          $ref: \"#/components/schemas/ArtifactType\"\n          description: \"\"\n        version:\n          format: int64\n          type: integer\n      required:\n        - createdOn\n        - createdBy\n        - version\n        - type\n        - globalId\n        - id\n      title: Root Type for ArtifactVersionMetaData\n      type: object\n    VersionSearchResults:\n      description: Describes the response received when searching for artifacts.\n      properties:\n        count:\n          description: The total number of artifacts that matched the search criteria.\n          type: integer\n        versions:\n          description: \"\"\n          items:\n            $ref: \"#/components/schemas/SearchedVersion\"\n          type: array\n      required:\n        - count\n        - versions\n      type: object\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/apicurio.local/registry/1.3.2.Final/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/apicurio.local/registry/1.3.2.Final/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/artifacts/{artifactId}/versions\": post: requestBody: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"empty schema",
		"unsupported content types"
	]
}