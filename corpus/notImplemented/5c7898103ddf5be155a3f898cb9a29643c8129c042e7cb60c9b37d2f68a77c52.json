{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aldy505/jokes-bapak2"
		},
		"file": {
			"name": "documentation.yaml",
			"size": 0,
			"path": "api/documentation.yaml",
			"byteSize": 8960,
			"content": "openapi: 3.0.0\ninfo:\n  title: Jokesbapak2 Image API\n  description: \u003e\n    Jokes Bapak2 is an image API that you can use for free! I've been seeing lots and lots of Indonesian dad jokes on Twitter,\n    Facebook and Instagram on early 2020. In a month, I made a Discord bot that provides the jokes.\n    But I thought, why not make it as an API?\n  version: 0.0.1\n  contact:\n    name: Reinaldy Rafli\n    url: https://github.com/aldy505\n    email: aldy505@tutanota.com\n  license:\n    name: GNU General Public License v3.0\n    url: https://github.com/aldy505/jokes-bapak2/blob/master/LICENSE\nservers:\n  - url: \"https://jokesbapak2.herokuapp.com/v1\"\n    description: Production\n  - url: \"https://jokesbapak2.herokuapp.com\"\n    description: Production\n  - url: \"http://localhost:5000\"\n    description: Development\npaths:\n  /:\n    get:\n      tags:\n        - Jokes\n      summary: Get random Jokes Bapak2 image\n      description: Returns a different image (PNG, JPG, or GIF) for every call.\n      responses:\n        200:\n          description: Image data\n          content:\n            'image/gif': {}\n            'image/png': {}\n            'image/jpeg': {}\n    put:\n      summary: Add a new joke into database\n      description: asd\n      tags:\n        - Jokes\n      requestBody:\n        description: asds\n        required: true\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/request.auth'\n                - $ref: '#/components/schemas/request.joke'\n      responses:\n        201:\n          description: Image has been added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/request.joke'\n              example:\n                link: https://link.to/image.jpg\n        400:\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/response.error'\n              example:\n                error: URL provided is not a valid image\n        403:\n          description: Must be authenticated to submit a joke\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/response.error'\n  /id/{id}:\n    parameters:\n      - in: path\n        name: id\n        schema:\n          type: number\n        required: true\n        description: A number that represents image's ID\n    get:\n      summary: Get random Jokes Bapak2 image by ID\n      description: Returns consistent image for every call.\n      tags:\n        - Jokes\n      responses:\n        200:\n          description: Image data\n          content:\n            'image/jpeg': {}\n            'image/png': {}\n            'image/gif': {}\n        404:\n          description: Provided image ID was not found\n          content:\n            text/plain:\n              schema:\n                type: string\n              example:\n                Requested ID was not found.\n    patch:\n      summary: Update a Joke with certain image ID\n      description: Returns consistent image for every call.\n      tags:\n        - Jokes\n      responses:\n        200:\n          description: Sucessfully updated an image item\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/response.confirmation'\n                  - $ref: '#/components/schemas/request.joke'\n        400:\n          description: Link provided is not a valid image\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/response.error'\n        403:\n          description: Must be authenticated to submit a joke\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/response.error'\n        406:\n          description: If the Joke ID does not exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/response.error'\n    delete:\n      summary: Delete a Joke with certain image ID\n      description: hi\n      tags:\n        - Jokes\n      responses:\n        200:\n          description: Sucessfully deleted an image item\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/response.confirmation'\n        403:\n          description: Must be authenticated to submit a joke\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/response.error'\n        406:\n          description: If the Joke ID does not exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/response.error'\n  /today:\n    get:\n      summary: Get the joke of the day\n      description: A joke a day makes more of a dad out of you.\n      tags:\n        - Jokes\n      responses:\n        200:\n          description: Image data\n          content:\n            'image/jpeg': {}\n            'image/png': {}\n            'image/gif': {}\n  /total:\n    get:\n      summary: Get total amount of jokes in database\n      tags:\n        - Jokes\n      responses:\n        200:\n          description: Total jokes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/response.confirmation'\n              example:\n                message: \"154\"\n  /submit:\n    get:\n      summary: Get submitted Jokes\n      tags:\n        - Submission\n      parameters:\n        - name: author\n          in: query\n          required: false\n          description: Author to be queried\n          schema:\n            type: string\n        - name: approved\n          in: query\n          required: false\n          description: Whether query just approved jokes or not\n          schema:\n            type: boolean\n        - name: limit\n          in: query\n          required: false\n          schema:\n            type: number\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: number\n      responses:\n        200:\n          description: asd\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  count:\n                    type: number\n                  jokes:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/response.submission'\n    post:\n      summary: Submit a joke\n      description: \u003e\n        Must be in multipart/form-data format.\n        Author must be in the format of \"Name \u0026lt;email\u0026gt;\".\n      tags:\n        - Submission\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                link:\n                  description: Image link\n                  type: string\n                image:\n                  description: Image data\n                  type: string\n                author:\n                  description: Person who submitted this\n                  type: string\n              required:\n                - author\n                - image\n                - link\n      responses:\n        201:\n          description: Joke successfully submitted\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/response.confirmation'\n                  - type: object\n                    properties:\n                      data:\n                        $ref: '#/components/schemas/response.submission'\n        400:\n          description: Invalid data was sent\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/response.error'\n  /health:\n    get:\n      summary: Health check\n      description: Ping the databases to make sure everything's alright\n      tags:\n        - Health\n      responses:\n        200:\n          description: Everything is okay\n        403:\n          description: Something is not okay\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/response.error'\n\ncomponents:\n  schemas:\n    request.auth:\n      type: object\n      properties:\n        key:\n          type: string\n        token:\n          type: string\n    request.joke:\n      type: object\n      properties:\n        link:\n          type: string\n    response.confirmation:\n      type: object\n      properties:\n        message:\n          type: string\n    response.error:\n      type: object\n      properties:\n        error:\n          type: string\n    response.submission:\n      type: object\n      properties:\n        id:\n          type: number\n        link:\n          type: string\n        created_at:\n          type: string\n        author:\n          type: string\n        status:\n          type: number",
			"canonicalURL": "/github.com/aldy505/jokes-bapak2@215a160205b0ce4d03c6940fc0bda85984ac14bd/-/blob/api/documentation.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aldy505/jokes-bapak2/blob/215a160205b0ce4d03c6940fc0bda85984ac14bd/api/documentation.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/\": get: responses: 200: contents: unsupported content types: [image/gif, image/jpeg, image/png]",
	"NotImplemented": [
		"unsupported content types"
	]
}