{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OAI/Documentation"
		},
		"file": {
			"name": "tictactoe.yaml",
			"size": 0,
			"path": "examples/tictactoe.yaml",
			"byteSize": 3681,
			"content": "openapi: 3.1.0\ninfo:\n  title: Tic Tac Toe\n  description: |\n    This API allows writing down marks on a Tic Tac Toe board\n    and requesting the state of the board or of individual squares.\n  version: 1.0.0\ntags:\n  - name: Gameplay\npaths:\n  # Whole board operations\n  /board:\n    get:\n      summary: Get the whole board\n      description: Retrieves the current state of the board and the winner.\n      tags:\n        - Gameplay\n      operationId: get-board\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/status\"\n\n  # Single square operations\n  /board/{row}/{column}:\n    parameters:\n      - $ref: \"#/components/parameters/rowParam\"\n      - $ref: \"#/components/parameters/columnParam\"\n    get:\n      summary: Get a single board square\n      description: Retrieves the requested square.\n      tags:\n        - Gameplay\n      operationId: get-square\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/mark\"\n        \"400\":\n          description: The provided parameters are incorrect\n          content:\n            text/html:\n              schema:\n                $ref: \"#/components/schemas/errorMessage\"\n              example: \"Illegal coordinates\"\n    put:\n      summary: Set a single board square\n      description: Places a mark on the board and retrieves the whole board and the winner (if any).\n      tags:\n        - Gameplay\n      operationId: put-square\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/mark\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/status\"\n        \"400\":\n          description: The provided parameters are incorrect\n          content:\n            text/html:\n              schema:\n                $ref: \"#/components/schemas/errorMessage\"\n              examples:\n                illegalCoordinates:\n                  value: \"Illegal coordinates.\"\n                notEmpty:\n                  value: \"Square is not empty.\"\n                invalidMark:\n                  value: \"Invalid Mark (X or O).\"\n\ncomponents:\n  parameters:\n    rowParam:\n      description: Board row (vertical coordinate)\n      name: row\n      in: path\n      required: true\n      schema:\n        $ref: \"#/components/schemas/coordinate\"\n    columnParam:\n      description: Board column (horizontal coordinate)\n      name: column\n      in: path\n      required: true\n      schema:\n        $ref: \"#/components/schemas/coordinate\"\n  schemas:\n    errorMessage:\n      type: string\n      maxLength: 256\n      description: A text message describing an error\n    coordinate:\n      type: integer\n      minimum: 1\n      maximum: 3\n      example: 1\n    mark:\n      type: string\n      enum: [\".\", \"X\", \"O\"]\n      description: Possible values for a board square. `.` means empty square.\n      example: \".\"\n    board:\n      type: array\n      maxItems: 3\n      minItems: 3\n      items:\n        type: array\n        maxItems: 3\n        minItems: 3\n        items:\n          $ref: \"#/components/schemas/mark\"\n    winner:\n      type: string\n      enum: [\".\", \"X\", \"O\"]\n      description: Winner of the game. `.` means nobody has won yet.\n      example: \".\"\n    status:\n      type: object\n      properties:\n        winner:\n          $ref: \"#/components/schemas/winner\"\n        board:\n          $ref: \"#/components/schemas/board\"\n",
			"canonicalURL": "/github.com/OAI/Documentation@d42b3bf8818446d19488ed36a3f3a584fde70ede/-/blob/examples/tictactoe.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OAI/Documentation/blob/d42b3bf8818446d19488ed36a3f3a584fde70ede/examples/tictactoe.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/board/{row}/{column}\": get: responses: 400: contents: unsupported content types: [text/html]",
	"NotImplemented": [
		"unsupported content types"
	]
}