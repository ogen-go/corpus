{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cloudtrust/keycloak-bridge"
		},
		"file": {
			"name": "swagger-api_events.yaml",
			"size": 0,
			"path": "api/events/swagger-api_events.yaml",
			"byteSize": 5223,
			"content": "openapi: 3.0.1\ninfo:\n  title: Swagger Cloudtrust Management\n  description: 'API Mangement for Cloudtrust.'\n  version: 1.0.0\nservers:\n- url: http://localhost:8888\ntags:\n- name: Events\n  description: Events management\npaths:\n  /events/actions:\n    get:\n      tags:\n      - Actions\n      summary: Get the list of all possible actions\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Actions'\n  /events:\n    get:\n      tags:\n      - Events\n      parameters:\n      - name: first\n        in: query\n        description: start offset. Used by pagination.\n        required: false\n        schema:\n          type: number\n      - name: max\n        in: query\n        description: page size. Used by pagination.\n        required: false\n        schema:\n          type: number\n      - name: dateFrom\n        in: query\n        description: start date expressed as seconds since Unix EPOCH\n        required: false\n        schema:\n          type: number\n      - name: dateTo\n        in: query\n        description: end date expressed as seconds since Unix EPOCH\n        required: false\n        schema:\n          type: number\n      - name: realmTarget\n        in: query\n        description: realm. When missing, all realms\n        required: false\n        schema:\n          type: string\n      - name: origin\n        in: query\n        description: origin (a.k.a. \"source\"). When missing, all origins.\n        required: false\n        schema:\n          type: string\n      - name: ctEventType\n        in: query\n        description: CT event type. When missing, all CT event types.\n        required: false\n        schema:\n          type: string\n      - name: exclude\n        in: query\n        description: CT event type to be excluded\n        required: false\n        schema:\n          type: string\n      summary: Get all events\n      responses:\n        200:\n          description: Returns a list of all events\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  events:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Event'\n                  count:\n                    type: number\n  /events/summary:\n    get:\n      tags:\n      - Events\n      summary: Events summary. Used by the backoffice dropdowns.\n      responses:\n        200:\n          description: Returns a summary of all events\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  origins:\n                    type: array\n                    items:\n                      type: string\n                  ctEventTypes:\n                    type: array\n                    items:\n                      type: string\n  /events/realms/{realm}/users/{userID}/events:\n    get:\n      tags:\n      - Events\n      summary: Get all events for the user\n      parameters:\n      - name: realm\n        in: path\n        description: realm name (not id!)\n        required: true\n        schema:\n          type: string\n      - name: userID\n        in: path\n        description: User id\n        required: true\n        schema:\n          type: string\n      - name: first\n        in: query\n        description: start offset. Used by pagination.\n        required: false\n        schema:\n          type: number\n      - name: max\n        in: query\n        description: page size. Used by pagination.\n        required: false\n        schema:\n          type: number\n      - name: exclude\n        in: query\n        description: CT event type to be excluded\n        required: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  events:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Event'\n                  count:\n                    type: number\ncomponents:\n  schemas:\n    Actions:\n      type: object\n      properties:\n        name:\n          type: string\n        scope:\n          type: string\n    Event:\n      type: object\n      properties:\n        auditId:\n          type: string\n        auditTime:\n          type: number\n        origin:\n          type: string\n        realmName:\n          type: string\n        agentUserId:\n          type: string\n        agentUsername:\n          type: string\n        agentRealmName:\n          type: string\n        userId:\n          type: string\n        username:\n          type: string\n        ctEventType:\n          type: string\n        kcEventType:\n          type: string\n        kcOperationType:\n          type: string\n        clientId:\n          type: string\n        additionalInfo:\n          type: string\n  securitySchemes:\n    openId:\n      type: openIdConnect\n      openIdConnectUrl: http://toto.com/.well-known/openid-configuration\nsecurity:\n  - openId:\n    - todo",
			"canonicalURL": "/github.com/cloudtrust/keycloak-bridge@9ba93092766b60c67c76b3432b8df605e4f7d8a7/-/blob/api/events/swagger-api_events.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/cloudtrust/keycloak-bridge/blob/9ba93092766b60c67c76b3432b8df605e4f7d8a7/api/events/swagger-api_events.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/events\": get: security: security \"openId\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}