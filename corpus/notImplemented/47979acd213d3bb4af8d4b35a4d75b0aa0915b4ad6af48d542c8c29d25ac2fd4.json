{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/veracity/veracity-documentation"
		},
		"file": {
			"name": "datafabric-dataapi-openapi.yaml",
			"size": 0,
			"path": "sections/datafabric/datafabric-dataapi-openapi.yaml",
			"byteSize": 28602,
			"content": "openapi: 3.0.1\ninfo:\n  title: Data API\n  version: '1.0'\nservers:\n  - url: https://api.veracity.com/veracity/datafabric/data\npaths:\n  '/api/1/resources/{resourceId}/accesses':\n    get:\n      tags:\n        - v1.0 Access\n      summary: Retrieves a list of Providers that have access to a specified resource.\n      description: \"Get a list of all providers with accesses for a given storage item per page, using a page number and page size.\\r\\nNote the variable keyCreatedTimeUTC is the time the SAS key generated is valid from,\\r\\nthis is set one hour in the past from the time created this to avoid azure time skew issues.\"\n      operationId: v1-0Access_Get\n      parameters:\n        - name: resourceId\n          in: path\n          description: Format - uuid. Azure resource\n          required: true\n          schema:\n            type: string\n        - name: pageNo\n          in: query\n          description: Format - int32. Page number. Defaults to 1.\n          schema:\n            type: integer\n        - name: pageSize\n          in: query\n          description: 'Format - int32. Number of results per page. Defaults to 50. If this is a negative number, all results will be fetched'\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n    post:\n      tags:\n        - v1.0 Access\n      summary: Share access to another user for the specified resource\n      description: Share access to another user for the specified resource\n      operationId: v1-0Access_Post\n      parameters:\n        - name: resourceId\n          in: path\n          description: Format - uuid. Azure resource\n          required: true\n          schema:\n            type: string\n        - name: autoRefreshed\n          in: query\n          description: Should a renewed key be issued to the shared party after it expires\n          required: true\n          schema:\n            type: boolean\n      requestBody:\n        description: ''\n        content:\n          application/json: { }\n          text/json: { }\n          application/xml: { }\n          text/xml: { }\n          application/x-www-form-urlencoded: { }\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '400':\n          description: BadRequest\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: Resource was not found.\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  '/api/1/resources/{resourceId}/accesses/{accessId}':\n    put:\n      tags:\n        - v1.0 Access\n      summary: Revoke an users ability to refresh keys on a resource\n      description: Revoke an users ability to refresh keys on a resource\n      operationId: v1-0Access_Put\n      parameters:\n        - name: resourceId\n          in: path\n          description: Format - uuid. Azure resource\n          required: true\n          schema:\n            type: string\n        - name: accessId\n          in: path\n          description: Format - uuid. Access ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '403':\n          description: User is not the owner or a data steward\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: Resource or access is not found\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  '/api/1/resources/{resourceId}/accesses/{accessId}/key':\n    put:\n      tags:\n        - v1.0 Access\n      summary: Fetch a SAS key to access the storage item shared with you\n      description: Fetch a SAS key to access the storage item shared with you\n      operationId: v1-0Access_ClaimKey\n      parameters:\n        - name: resourceId\n          in: path\n          description: Format - uuid. Resource Id\n          required: true\n          schema:\n            type: string\n        - name: accessId\n          in: path\n          description: Format - uuid. Access Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: Resource or access sharing not found\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  /api/1/application:\n    get:\n      tags:\n        - v1.0 Application\n      summary: Returns information about the current application.\n      description: Returns information about the current application.\n      operationId: v1-0Application_Me\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: NotFound\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n    post:\n      tags:\n        - v1.0 Application\n      summary: Add a new application to Veracity data fabric.\n      description: Needs to have the role \"DataAdmin\" to perform this action\n      operationId: v1-0Application_Create\n      requestBody:\n        description: ''\n        content:\n          application/json: { }\n          text/json: { }\n          application/xml: { }\n          text/xml: { }\n          application/x-www-form-urlencoded: { }\n      responses:\n        '200':\n          description: The application is created\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '400':\n          description: BadRequest\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '409':\n          description: A application with this ID already exist in veracity\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  '/api/1/application/{applicationId}':\n    get:\n      tags:\n        - v1.0 Application\n      summary: Gets information about an application in Veracity data fabric.\n      description: Gets information about an application in Veracity data fabric.\n      operationId: v1-0Application_Get\n      parameters:\n        - name: applicationId\n          in: path\n          description: Format - uuid. AAD B2C Application Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: The application was not found.\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n    put:\n      tags:\n        - v1.0 Application\n      summary: Update role of a application on Veracity data fabric.\n      description: Needs to have the role \"DataAdmin\" to perform this action\n      operationId: v1-0Application_UpdateRole\n      parameters:\n        - name: applicationId\n          in: path\n          description: Format - uuid. AAD B2C Application Id\n          required: true\n          schema:\n            type: string\n        - name: role\n          in: query\n          description: Role name\n          required: true\n          schema:\n            enum:\n              - none\n              - manager\n              - consumer\n              - fullAll\n              - identity\n              - dataAdmin\n            type: string\n      responses:\n        '200':\n          description: Role is updated\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: Application was not found\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  '/api/1/resources/{resourceId}/datastewards':\n    get:\n      tags:\n        - v1.0 DataStewards\n      summary: Retrieve a list of data stewards for the resource\n      description: Retrieve a list of data stewards for the resource\n      operationId: v1-0DataStewards_GetDataStewardsByResourceId\n      parameters:\n        - name: resourceId\n          in: path\n          description: Format - uuid. The Id of the resource\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: ''\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  '/api/1/resources/{resourceId}/owner':\n    put:\n      tags:\n        - v1.0 DataStewards\n      summary: \"Transfer the ownership of the Azure resource to a specified user. \\r\\nBoth previous and the new owner should be affiliated with the same company.\"\n      description: Returns the Azure resource with updated OwnerId field.\n      operationId: v1-0DataStewards_TransferOwnership\n      parameters:\n        - name: resourceId\n          in: path\n          description: Format - uuid. The Id of the resource\n          required: true\n          schema:\n            type: string\n        - name: userId\n          in: query\n          description: Format - uuid. The Id of the user with role of Data Manager that ownership will be transfered to.\n          required: true\n          schema:\n            type: string\n        - name: keepAccessAsDataSteward\n          in: query\n          description: 'The endpoint specified below will be updated with an Input flag. When the \"SetPreviousOwnerAsDataSteward\" flag is set to true. If it is false, then the previous owner will not be assigned as Data Steward.'\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '400':\n          description: 'During the validation none of the users were set as the new Owner of the resource. The reasons can be following: the resource doesn''t exist in Veracity system, you don''t have the ownership of the resource, you provided the same userId that owns the resource (yourself), provided user doesn''t have a role of Data Manager or provided user doesn''t exist in the Veracity Identity System'\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  '/api/1/resources/{resourceId}/datastewards/{userId}':\n    post:\n      tags:\n        - v1.0 DataStewards\n      summary: Delegate the rights to use the Azure resource to another Veracity user.\n      description: \"If a DataSteward with this user id exist on this resource, it will be updated.\\r\\nReturns the Users that DataSteward for the provided resource was assigned to.\"\n      operationId: v1-0DataStewards_Post\n      parameters:\n        - name: resourceId\n          in: path\n          description: Format - uuid. The Id of the resource\n          required: true\n          schema:\n            type: string\n        - name: userId\n          in: path\n          description: Format - uuid. A Data Steward user Id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Data-stewardship optional details\n        content:\n          application/json: { }\n          text/json: { }\n          application/xml: { }\n          text/xml: { }\n          application/x-www-form-urlencoded: { }\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '400':\n          description: 'During the validation the users were not saved as the Data Steward for the provided Azure Resource.The reasons can be following: the resource doesn''t exist in Veracity system, you don''t have the ownership of the resource, user already is a Data Steward for this container, user is an owner of the resource (yourself), or user doesn''t exist in the Veracity Identity System'\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n    delete:\n      tags:\n        - v1.0 DataStewards\n      summary: Delete a data stewards\n      description: The user must be the owner of the resource to be able to delete datastewards\n      operationId: v1-0DataStewards_Delete\n      parameters:\n        - name: resourceId\n          in: path\n          description: Format - uuid. The Id of the resource\n          required: true\n          schema:\n            type: string\n        - name: userId\n          in: path\n          description: Format - uuid.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Datasteward is deleted\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '403':\n          description: If the user is not the owner of the resource\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: If resource or datasteward was not found.\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  /api/1/keytemplates:\n    get:\n      tags:\n        - v1.0 KeyTemplates\n      summary: Returns the templates for the different types of keys you can generate.\n      description: \"Returns the template for the different types of keys you can generate.\\r\\nBlob Storage is the only storage type supported at the moment.\\r\\n            \\r\\nSupported access types for the Blob Storage types are as follows:\\r\\n    1. Write key\\r\\n    2. Read and list key\\r\\n    3. Read, write and list key\\r\\n    4. Read, write, delete and list key\\r\\nFor Each access type there are key templates that lasts 1 h, 8 h, 1 month, 2 months, 3 months, 4 months, 5 months and 6 months.\\r\\n            \\r\\nNote : \\\"IsSystemKey\\\" field in the result data is not relevant for the functionality currently supported. Please ignore that field.\"\n      operationId: v1-0KeyTemplates_GetStorageKeyTemplates\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  '/api/1/resource/{resourceId}/ledger':\n    get:\n      tags:\n        - v1.0 Ledger\n      summary: Returns a list of ledger records\n      description: \"Endpoint returns a list of ledger records.\\r\\nA ledger record is an action done to a container, ex; creating a file, sharing a key.\"\n      operationId: v1-0Ledger_Get\n      parameters:\n        - name: resourceId\n          in: path\n          description: Format - uuid. Veracity resource id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns a list ledger records\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '403':\n          description: Not owner of container\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: Resource was not found\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '500':\n          description: Unexpected server error\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  /api/1/resources:\n    get:\n      tags:\n        - v1.0 Resources\n      summary: Fetches all storage resources that you can claim keys for\n      description: Fetches all storage resources that you can claim keys for\n      operationId: v1-0Resources_Get\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  '/api/1/resources/{resourceId}':\n    get:\n      tags:\n        - v1.0 Resources\n      summary: Returns a single resource\n      description: Returns a single resource.\n      operationId: v1-0Resources_GetById\n      parameters:\n        - name: resourceId\n          in: path\n          description: Format - uuid. Resource Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns a single resource\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '403':\n          description: Missing the correct access to view the resource\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: Resource was not found\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  '/api/1/resources/{resourceId}/keys':\n    get:\n      tags:\n        - v1.0 Resources\n      summary: \"Fetch a SAS key to access a storage item shared with you\\r\\nDeprecated. Please use PUT /api/resources/{resourceId}/accesses/{accessId}/key\"\n      description: \"Fetch a SAS key to access a storage item shared with you\\r\\nDeprecated. Please use PUT /api/resources/{resourceId}/accesses/{accessId}/key\"\n      operationId: v1-0Resources_FetchKeyForStorageContainer\n      parameters:\n        - name: resourceId\n          in: path\n          description: Format - uuid. Storage resource Id\n          required: true\n          schema:\n            type: string\n        - name: accessSharingId\n          in: query\n          description: Format - uuid. The Id for the key you want to return\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: Resource or access sharing not found\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  /api/1/tags:\n    get:\n      tags:\n        - v1.0 Tags\n      summary: Retrieve metadata tags in Veracity.\n      description: \"Default returns approved and non deleted tags.\\r\\nUse Query parameters to includes non approved and deleted (needs to be DataAdmin to perform this action)\"\n      operationId: v1-0Tags_GetTags\n      parameters:\n        - name: includeDeleted\n          in: query\n          schema:\n            type: boolean\n        - name: includeNonVeracityApproved\n          in: query\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: Returns a list of tags\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '403':\n          description: Missing correct role to perform this action\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n    post:\n      tags:\n        - v1.0 Tags\n      summary: \"Inserts tags and returns the inserted new inserted tags with ID's\\r\\n\u003cremarks\u003e\\r\\nId is not required for the input\\r\\n\u003c/remarks\u003e\"\n      description: \"Inserts tags and returns the inserted new inserted tags with ID's\\r\\n\u003cremarks\u003e\\r\\nId is not required for the input\\r\\n\u003c/remarks\u003e\"\n      operationId: v1-0Tags_InsertTags\n      requestBody:\n        content:\n          application/json: { }\n          text/json: { }\n          application/xml: { }\n          text/xml: { }\n          application/x-www-form-urlencoded: { }\n      responses:\n        '200':\n          description: Returns a list of tags\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  /api/1/users/me:\n    get:\n      tags:\n        - v1.0 Users\n      summary: Returns information about the current user.\n      description: Returns information about the current user.\n      operationId: v1-0Users_Me\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: NotFound\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  '/api/1/users/{userId}':\n    get:\n      tags:\n        - v1.0 Users\n      summary: Gets information about an user.\n      description: Gets information about an user.\n      operationId: v1-0Users_Get\n      parameters:\n        - name: userId\n          in: path\n          description: Format - uuid. My DNV GL Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: The user was not found.\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  /api/1/groups:\n    get:\n      tags:\n        - v1.0 Groups\n      summary: Retrieve a list of all groups for the User.\n      description: Retrieve a list of all groups for the User.\n      operationId: v1-0Groups_Get\n      responses:\n        '200':\n          description: List of groups for this user.\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n    post:\n      tags:\n        - v1.0 Groups\n      summary: Creates a Group from the input parameters for User.\n      description: Creates a Group from the input parameters for User.\n      operationId: v1-0Groups_Post\n      requestBody:\n        description: ''\n        content:\n          application/json: { }\n          text/json: { }\n          application/xml: { }\n          text/xml: { }\n          application/x-www-form-urlencoded: { }\n      responses:\n        '201':\n          description: Group created successfully\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '400':\n          description: Resource ID not found.\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  '/api/1/groups/{Id}':\n    get:\n      tags:\n        - v1.0 Groups\n      summary: Retrieve Group by Id for the User.\n      description: Retrieve Group by Id for the User.\n      operationId: v1-0Groups_GetById\n      parameters:\n        - name: Id\n          in: path\n          description: Format - uuid. The GUID of the group.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Group with given Id found for user.\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: Group with given Id not found for user\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n    put:\n      tags:\n        - v1.0 Groups\n      summary: Updates the given group with the parameters from the request body.\n      description: Updates the given group with the parameters from the request body.\n      operationId: v1-0Groups_Put\n      parameters:\n        - name: Id\n          in: path\n          description: Format - uuid. The GUID of the Group\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The group parameters.\n        content:\n          application/json: { }\n          text/json: { }\n          application/xml: { }\n          text/xml: { }\n          application/x-www-form-urlencoded: { }\n      responses:\n        '200':\n          description: Successfully updated group.\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '400':\n          description: Resource ID not found.\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: Group with given ID not found.\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n    delete:\n      tags:\n        - v1.0 Groups\n      summary: 'Will delete the Users given group, and remove references to resources, will NOT delete resources.'\n      description: 'Will delete the Users given group, and remove references to resources, will NOT delete resources.'\n      operationId: v1-0Groups_Delete\n      parameters:\n        - name: Id\n          in: path\n          description: Format - uuid. The GUID of the group.\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Successfully deleted group.\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '404':\n          description: Specified group was not found.\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n  /api/1/users/ResourceDistributionList:\n    get:\n      tags:\n        - v1.0 Users\n      summary: Get the list of the users with whom storage accounts shared.\n      description: Get the list of the users with whom storage accounts shared.\n      operationId: v1-0Users_ResourceDistributionList\n      parameters:\n        - name: userId\n          in: query\n          description: Format - uuid. My DNV GL Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\n        '403':\n          description: Not allowed to access the list.\n          content:\n            application/json: { }\n            text/json: { }\n            application/xml: { }\n            text/xml: { }\ncomponents:\n  securitySchemes:\n    apiKeyHeader:\n      type: apiKey\n      name: Ocp-Apim-Subscription-Key\n      in: header\n    apiKeyQuery:\n      type: apiKey\n      name: subscription-key\n      in: query\nsecurity:\n  - apiKeyHeader: [ ]\n  - apiKeyQuery: [ ]\nx-ms-export-notes:\n  - 'The exported API contains schemas that aren''t of content type ''application/vnd.oai.openapi.components+json'', and are hence not exported as OpenAPI components.'\n",
			"canonicalURL": "/github.com/veracity/veracity-documentation@f98ffe55a88fd8a92da5eff08ff1cadac2ec6387/-/blob/sections/datafabric/datafabric-dataapi-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/veracity/veracity-documentation/blob/f98ffe55a88fd8a92da5eff08ff1cadac2ec6387/sections/datafabric/datafabric-dataapi-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/1/users/ResourceDistributionList\": get: responses: 200: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema"
	]
}