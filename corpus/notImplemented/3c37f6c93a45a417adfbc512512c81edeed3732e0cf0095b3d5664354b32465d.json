{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/bisstats/openapi.yaml",
			"byteSize": 31428,
			"content": "openapi: 3.0.0\ninfo:\n  x-ballerina-display:\n    label: BIS Stats\n    iconPath: \"icon.png\"\n  version: '1.4.0'\n  title: 'SDMX RESTful API'\n  description: \u003e\n    This is a generated connector for [BIS SDMX RESTful API v1](https://stats.bis.org/api-doc/v1/) OpenAPI specification.\n\n    The BIS SDMX RESTful API is a subset of the official SDMX RESTful API v1.4.0, released in June 2019.\n    \n    This service offers programmatic access to the BIS statistical data and metadata published on the [BIS statistics pages](https://www.bis.org/statistics/index.htm) released to the public.\n\n    For additional information about the SDMX RESTful API, check the [official sdmx-rest specification](https://github.com/sdmx-twg/sdmx-rest/tree/master/v2_1/ws/rest/docs) or the [dedicated Wiki](https://github.com/sdmx-twg/sdmx-rest/wiki), including [**useful tips for consumers**](https://github.com/sdmx-twg/sdmx-rest/wiki/Tips-for-consumers).\n  x-ballerina-init-description: \u003e\n    The connector initialization doesn't require setting the API credentials. \n    \n    Please refer the [API documentation](https://stats.bis.org/api-doc/v1/) for more information.\nservers:\n  - description: BIS Stats API\n    url: https://stats.bis.org/api/v1\n  \npaths:\n  /data/{flow}/{key}/all:\n    get:\n      operationId: getData\n      summary: 'Get data'\n      tags: \n        - Data queries\n      parameters:\n        - $ref: '#/components/parameters/flow'\n        - $ref: '#/components/parameters/key'\n        - $ref: '#/components/parameters/startPeriod'\n        - $ref: '#/components/parameters/endPeriod'\n        - $ref: '#/components/parameters/firstNObservations'\n        - $ref: '#/components/parameters/lastNObservations'\n        - $ref: '#/components/parameters/detail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n\n  /availableconstraint/{flow}/{key}/all/{componentID}:\n    get:\n      operationId: getDataAvailabilityInformation\n      summary: 'Get information about data availability'\n      tags: \n        - Data availability queries\n      parameters:\n        - $ref: '#/components/parameters/flow'\n        - $ref: '#/components/parameters/key'\n        - $ref: '#/components/parameters/componentID'\n        - $ref: '#/components/parameters/mode'\n        - $ref: '#/components/parameters/acreferences'\n        - $ref: '#/components/parameters/startPeriod'\n        - $ref: '#/components/parameters/endPeriod'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n  \n  /datastructure/{agencyID}/{resourceID}/{version}:\n    get:\n      operationId: getDataStructures\n      summary: 'Get data structures'\n      tags: \n        - Structure queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n   \n  /dataflow/{agencyID}/{resourceID}/{version}:\n    get:\n      operationId: getDataFlows\n      summary: 'Get dataflows'\n      tags: \n        - Structure queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n            \n  /categorisation/{agencyID}/{resourceID}/{version}:\n    get:\n      operationId: getCategorisations\n      summary: 'Get categorisations'\n      tags: \n        - Structure queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n          \n  /contentconstraint/{agencyID}/{resourceID}/{version}:\n    get:\n      operationId: getContentConstraints\n      summary: 'Get content constraints'\n      tags: \n        - Structure queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n          \n  /actualconstraint/{agencyID}/{resourceID}/{version}:\n    get:\n      operationId: getActualConstraints\n      summary: 'Get actual constraints'\n      tags: \n        - Structure queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n          \n  /allowedconstraint/{agencyID}/{resourceID}/{version}:\n    get:\n      operationId: getAllowedConstraints\n      summary: 'Get allowed constraints'\n      tags: \n        - Structure queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n          \n  /structure/{agencyID}/{resourceID}/{version}:\n    get:\n      operationId: getStructures\n      summary: 'Get structures'\n      tags: \n        - Structure queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n          \n  /conceptscheme/{agencyID}/{resourceID}/{version}:\n    get:\n      operationId: getConceptSchemes\n      summary: 'Get concept schemes'\n      tags: \n        - Structure queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n  \n  /codelist/{agencyID}/{resourceID}/{version}:\n    get:\n      operationId: getCodelists\n      summary: 'Get codelists'\n      tags: \n        - Structure queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n          \n  /categoryscheme/{agencyID}/{resourceID}/{version}:\n    get:\n      operationId: getCategorySchemes\n      summary: 'Get category schemes'\n      tags: \n        - Structure queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n          \n  /hierarchicalcodelist/{agencyID}/{resourceID}/{version}:\n    get:\n      operationId: getHierarchicalCodelists\n      summary: 'Get hierarchical codelists'\n      tags: \n        - Structure queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n          \n  /agencyscheme/{agencyID}/{resourceID}/{version}:\n    get:\n      operationId: getAgencySchemes\n      summary: 'Get agency schemes'\n      tags: \n        - Structure queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n          \n  /conceptscheme/{agencyID}/{resourceID}/{version}/{itemID}:\n    get:\n      operationId: getConcepts\n      summary: 'Get concepts'\n      tags: \n        - Item queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/items'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n  \n  /codelist/{agencyID}/{resourceID}/{version}/{itemID}:\n    get:\n      operationId: getCodes\n      summary: 'Get codes'\n      tags: \n        - Item queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/items'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n\n  /categoryscheme/{agencyID}/{resourceID}/{version}/{itemID}:\n    get:\n      operationId: getCategories\n      summary: 'Get categories'\n      tags: \n        - Item queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/items'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n\n  /hierarchicalcodelist/{agencyID}/{resourceID}/{version}/{itemID}:\n    get:\n      operationId: getHierarchies\n      summary: 'Get hierarchies'\n      tags: \n        - Item queries\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/items'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n      responses:\n        '200':\n          $ref: '#/components/responses/200-struct'\n        '400': \n          $ref: '#/components/responses/400'\n        '404': \n          $ref: '#/components/responses/404'\n        '406':\n          $ref: '#/components/responses/406'\n        '500': \n          $ref: '#/components/responses/500'\n        '501': \n          $ref: '#/components/responses/501'\n        '503': \n          $ref: '#/components/responses/503'\n  \ncomponents:\n  parameters:\n    flow:\n      in: path\n      name: flow\n      description: |\n        The **statistical domain** (aka dataflow) of the data to be returned.\n        \n        Examples:\n        \n        * `BISWEB_EERDATAFLOW`: The ID of the domain\n        * `BIS,BISWEB_EERDATAFLOW`: The BISWEB_EERDATAFLOW domain, maintained by the BIS\n        * `BIS,BISWEB_EERDATAFLOW,1.0`: Version 1.0 of the BISWEB_EERDATAFLOW domain, maintained by the BIS\n      required: true\n      schema:\n        type: string\n        pattern: '^([a-zA-Z][a-zA-Z\\d_-]*(\\.[a-zA-Z][a-zA-Z\\d_-]*)*,)?[a-zA-Z\\d_@$-]+(,(latest|(\\d+(\\.\\d+)*)))?$'\n    key:\n      in: path\n      name: key\n      description: |\n        The (possibly partial) **key identifying the data to be returned**. \n        \n        The keyword `all` can be used to indicate that all data belonging to the specified dataflow and provided by the specified provider must be returned.\n        \n        The examples below are based on the following key: Frequency, Type, Basket, Country.\n         * `M.N.B.CH`: Full key, matching exactly one series, i.e. the monthly (`M`) nominal rate (`N`) in the broad basket (`B`) for Switzerland (`CH`).\n         * `M.N+R.B.CH`: Retrieves both nominal and real rates (`N+R`), matching exactly two series.\n         * `M.N.B.`: The last dimension is wildcarded, and it will therefore match all countries.\n      required: true\n      schema:\n        type: string\n        pattern: '^([\\.A-Za-z\\d_@$-]+(\\+[A-Za-z\\d_@$-]+)*)*$'\n    agencyID:\n      in: path\n      name: agencyID\n      description: The agency maintaining the artefact used to generate the schema to be returned.\n      required: true\n      schema:\n        type: string\n        pattern: '^[A-Za-z][A-Za-z\\d_-]*(\\.[A-Za-z][A-Za-z\\d_-]*)*$'\n    resourceID:\n      in: path\n      name: resourceID\n      description: The id of the artefact used to generate the schema to be returned.\n      required: true\n      schema:\n        type: string\n        pattern: '^[A-Za-z\\d_@$-]+$'\n    version:\n      in: path\n      name: version\n      description: |\n        The version of the artefact used to generate the schema to be returned.\n        \n        The keyword `latest` can be used to return the latest production version of the matching resource.\n      required: true\n      schema:\n        type: string\n        pattern: '^(latest|[\\d]+(\\.[\\d]+)*)$'\n    agencies:\n      in: path\n      name: agencyID\n      description: |\n        The agency maintaining the artefact to be returned. \n        \n        It is possible to set more than one agency, using `+` as separator (e.g. BIS+ECB).\n        \n        The keyword `all` can be used to indicate that artefacts maintained by any maintenance agency should be returned.\n      required: true\n      schema:\n        type: string\n        pattern: '^(([A-Za-z][A-Za-z\\d_-]*)(\\.[A-Za-z][A-Za-z\\d_-]*)*,)?[A-Za-z\\d_@$-]+(\\+([A-Za-z][A-Za-z\\d_-]*(\\.[A-Za-z][A-Za-z\\d_-]*)*,)?[A-Za-z\\d_@$-]+)*$'\n    resourceIDs:\n      in: path\n      name: resourceID\n      description: |\n        The id of the artefact to be returned.\n        \n        It is possible to set more than one id, using `+` as separator (e.g. CL_FREQ+CL_CONF_STATUS).\n        \n        The keyword `all` can be used to indicate that any artefact of the specified resource type, {agencyID} and {version} should be returned. \n      required: true\n      schema:\n        type: string\n        pattern: '^([A-Za-z\\d_@$-]+(\\+[A-Za-z\\d_@$-]+)*)*$'\n    versions:\n      in: path\n      name: version\n      description: | \n        The version of the artefact to be returned. \n        \n        It is possible to set more than one version, using `+` as separator (e.g. 1.0+2.1).\n        \n        The keyword `all` can be used to return all versions of the matching resource.\n        \n        The keyword `latest` can be used to return the latest production version of the matching resource.\n      required: true\n      schema:\n        type: string\n        pattern: '^(all|latest|[\\d]+(\\.[\\d]+)*(\\+[\\d]+(\\.[\\d]+)*)*)$'\n    items:\n      in: path\n      name: itemID\n      description: |\n        The id of the item to be returned. \n        \n        It is possible to set more than one id, using `+` as separator (e.g. A+Q+M).\n        \n        The keyword `all` can be used to return all items of the matching resource.\n      required: true\n      schema:\n        type: string\n        pattern: '^[A-Za-z\\d_@$-]+(\\.[A-Za-z\\d_@$-]+)*(\\+[A-Za-z\\d_@$-]+(\\.[A-Za-z\\d_@$-]+)*)*$'\n    componentID:\n      in: path\n      name: componentID\n      description: |\n        The id of the Dimension for which to obtain availability information about. Use all to indicate that data availability should be provided for all dimensions.\n      required: true\n      schema:\n        type: string\n        pattern: '^[A-Za-z][A-Za-z\\d_-]*$'\n    startPeriod:\n      in: query\n      name: startPeriod\n      description: |\n        The start of the period for which results should be supplied (inclusive).\n        \n        Can be expressed using 8601 dates or SDMX reporting periods. \n        \n        Examples:\n        * `2000`: Year (ISO 8601)\n        * `2000-01`: Month (ISO 8601)\n        * `2000-01-01`: Date (ISO 8601)\n        * `2000-Q1`: Quarter (SDMX)\n        * `2000-W01`: Week (SDMX)\n        \n      required: false\n      schema:\n        type: string\n        pattern: '^\\d{4}-?((\\d{2}(-\\d{2})?)|A1|S[1|2]|Q[1-4]|T[1-3]|M(0[1-9]|1[0-2])|W(0[1-9]|[1-4][0-9]|5[0-3])|D(0[0-9][1-9]|[1-2][0-9][0-9]|3[0-5][0-9]|36[0-6]))?$'\n    endPeriod:\n      in: query\n      name: endPeriod\n      description: |\n        The end of the period for which results should be supplied (inclusive).\n        \n        Can be expressed using 8601 dates or SDMX reporting periods. \n        \n        Examples:\n        * `2000`: Year (ISO 8601)\n        * `2000-01`: Month (ISO 8601)\n        * `2000-01-01`: Date (ISO 8601)\n        * `2000-S1`: Semester (SDMX)\n        * `2000-D001`: Day (SDMX)\n      required: false\n      schema:\n        type: string\n        pattern: '^\\d{4}-?((\\d{2}(-\\d{2})?)|A1|S[1|2]|Q[1-4]|T[1-3]|M(0[1-9]|1[0-2])|W(0[1-9]|[1-4][0-9]|5[0-3])|D(0[0-9][1-9]|[1-2][0-9][0-9]|3[0-5][0-9]|36[0-6]))?$'\n    firstNObservations:  \n      in: query\n      name: firstNObservations\n      description: |\n        The maximum number of observations to be returned starting from the oldest one\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n    lastNObservations:\n      in: query\n      name: lastNObservations\n      description: |\n        The maximum number of observations to be returned starting from the most recent one\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n    detail:\n      in: query\n      name: detail\n      description: |\n        The **amount of information** to be returned. \n        \n        Possible options are: \n        \n        * `full`: All data and documentation\n        * `dataonly`: Everything except attributes\n        * `serieskeysonly`: The series keys. This is useful to return the series that match a certain query, without returning the actual data (e.g. overview page)\n        * `nodata`: The series, including attributes and annotations, without observations.\n      required: false\n      schema:\n        type: string\n        enum: [full, dataonly, serieskeysonly, nodata]\n        default: full\n    structDetail:\n      in: query\n      name: detail\n      description: |\n        The amount of information to be returned. \n        \n        Possible values are: \n        \n        * `allstubs`: All artefacts should be returned as stubs, containing only identification information, as well as the artefacts' name\n        * `referencestubs`: Referenced artefacts should be returned as stubs, containing only identification information, as well as the artefacts' name\n        * `referencepartial`: Referenced item schemes should only include items used by the artefact to be returned. For example, a concept scheme would only contain the concepts used in a DSD, and its isPartial flag would be set to `true`\n        * `allcompletestubs`: All artefacts should be returned as complete stubs, containing identification information, the artefacts' name, description, annotations and isFinal information\n        * `referencecompletestubs`: Referenced artefacts should be returned as complete stubs, containing identification information, the artefacts' name, description, annotations and isFinal information\n        * `full`: All available information for all artefacts should be returned\n      required: false\n      schema:\n        type: string\n        enum: [allstubs, referencestubs, referencepartial, allcompletestubs, referencecompletestubs, full]\n        default: full\n    references:\n      in: query\n      name: references\n      description: |\n        Instructs the web service to return (or not) the artefacts referenced by the artefact to be returned.\n        \n        Possible values are: \n        \n        * `none`: No references will be returned\n        * `parents`: Returns the artefacts that use the artefact matching the query\n        * `parentsandsiblings`: Returns the artefacts that use the artefact matching the query, as well as the artefacts referenced by these artefacts\n        * `children`: Returns the artefacts referenced by the artefact to be returned\n        * `descendants`: References of references, up to any level, will be returned\n        * `all`: The combination of parentsandsiblings and descendants\n        * In addition, a concrete type of resource may also be used (for example, references=codelist).\n      required: false\n      schema:\n        type: string\n        enum: [none, parents, parentsandsiblings, children, descendants, all, datastructure, categoryscheme, conceptscheme, codelist, hierarchicalcodelist, agencyscheme, dataflow, provisionagreement, categorisation, contentconstraint, actualconstraint, allowedconstraint]\n        default: none\n    mode:\n      in: query\n      name: mode\n      description: |\n        Instructs the web service to return a ContentConstraint which defines a Cube Region containing values which will be returned by executing the query (mode=\"exact\") vs a Cube Region showing what values remain valid selections that could be added to the data query (mode=\"available\"). A valid selection is one which results in one or more series existing for the selected value, based on the current data query selection state defined by the current path parameters.\n      required: false\n      schema:\n        type: string\n        enum: [exact, available]\n        default: exact\n    acreferences:\n      in: query\n      name: references\n      description: |\n        Instructs the web service to return (or not) the artefacts referenced by the ContentConstraint to be returned.\n      required: false\n      schema:\n        type: string\n        enum: [none, all, datastructure, conceptscheme, codelist, dataproviderscheme, dataflow]\n        default: none\n    accept-encoding:\n      in: header\n      name: Accept-Encoding\n      description: |\n        Specifies whether the response should be compressed and how. \n        \n        `identity` (the default) indicates that no compression will be performed.\n      schema:\n        type: string\n        enum: [br, compress, deflate, exi, gzip, identity, pack200-gzip, zstd]\n        default: identity\n        \n  responses:\n    '200':\n      description: OK\n      content:\n        application/vnd.sdmx.genericdata+xml;version=2.1:\n          schema:\n            type: string\n        application/vnd.sdmx.structurespecificdata+xml;version=2.1:\n          schema:\n            type: string\n        application/vnd.sdmx.data+csv;version=1.0.0:\n          schema:\n            type: string\n        application/vnd.sdmx.data+json;version=1.0.0:\n          schema:\n            type: string\n    '200-struct':\n      description: OK\n      content:\n        application/vnd.sdmx.structure+xml;version=2.1:\n          schema:\n            type: string\n        application/vnd.sdmx.structure+json;version=1.0.0:\n          schema:\n            type: string\n    '400': \n      description: Bad syntax\n    '404': \n      description: Not found\n    '406':\n      description: Not acceptable\n    '500': \n      description: Internal server error\n    '501': \n      description: Not implemented\n    '503': \n      description: Service unavailable\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/bisstats/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/bisstats/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/conceptscheme/{agencyID}/{resourceID}/{version}\": get: responses: 200: contents: unsupported content types: [application/vnd.sdmx.structure+json;version=1.0.0, application/vnd.sdmx.structure+xml;version=2.1]",
	"NotImplemented": [
		"unsupported content types"
	]
}