{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/schemathesis/schemathesis"
		},
		"file": {
			"name": "petstore_v3.yaml",
			"size": 0,
			"path": "test/data/petstore_v3.yaml",
			"byteSize": 17801,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    email: apiteam@swagger.io\n  description: 'This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For\n    this sample, you can use the api key `special-key` to test the authorization filters.'\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  termsOfService: http://swagger.io/terms/\n  title: Swagger Petstore\n  version: 1.0.0\nservers:\n  - url: https://petstore.swagger.io/v2\n  - url: http://petstore.swagger.io/v2\ntags:\n  - description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n    name: pet\n  - description: Access to Petstore orders\n    name: store\n  - description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\n    name: user\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\npaths:\n  /pet:\n    post:\n      description: ''\n      operationId: addPet\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n      summary: Add a new pet to the store\n      tags:\n        - pet\n    put:\n      description: ''\n      operationId: updatePet\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n      summary: Update an existing pet\n      tags:\n        - pet\n  /pet/findByStatus:\n    get:\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - description: Status values that need to be considered for filter\n          explode: true\n          in: query\n          name: status\n          required: true\n          schema:\n            items:\n              default: available\n              enum:\n                - available\n                - pending\n                - sold\n              type: string\n            type: array\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n          description: successful operation\n        '400':\n          description: Invalid status value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n      summary: Finds Pets by status\n      tags:\n        - pet\n  /pet/findByTags:\n    get:\n      deprecated: true\n      description: Muliple tags can be provided with comma separated strings. Use\n        tag1, tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - description: Tags to filter by\n          explode: true\n          in: query\n          name: tags\n          required: true\n          schema:\n            items:\n              type: string\n            type: array\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n          description: successful operation\n        '400':\n          description: Invalid tag value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n      summary: Finds Pets by tags\n      tags:\n        - pet\n  /pet/{petId}:\n    delete:\n      description: ''\n      operationId: deletePet\n      parameters:\n        - in: header\n          name: api_key\n          required: true\n          schema:\n            type: string\n        - description: Pet id to delete\n          in: path\n          name: petId\n          required: true\n          schema:\n            format: int64\n            type: integer\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n      summary: Deletes a pet\n      tags:\n        - pet\n    get:\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - description: ID of pet to return\n          in: path\n          name: petId\n          required: true\n          schema:\n            format: int64\n            type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n          description: successful operation\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - api_key: []\n      summary: Find pet by ID\n      tags:\n        - pet\n    post:\n      description: ''\n      operationId: updatePetWithForm\n      parameters:\n        - description: ID of pet that needs to be updated\n          in: path\n          name: petId\n          required: true\n          schema:\n            format: int64\n            type: integer\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n              type: object\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n      summary: Updates a pet in the store with form data\n      tags:\n        - pet\n  /pet/{petId}/uploadImage:\n    post:\n      description: ''\n      operationId: uploadFile\n      parameters:\n        - description: ID of pet to update\n          in: path\n          name: petId\n          required: true\n          schema:\n            format: int64\n            type: integer\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              format: binary\n              type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: successful operation\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n      summary: uploads an image\n      tags:\n        - pet\n  /store/inventory:\n    get:\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                additionalProperties:\n                  format: int32\n                  type: integer\n                type: object\n          description: successful operation\n      security:\n        - api_key: []\n      summary: Returns pet inventories by status\n      tags:\n        - store\n  /store/order:\n    post:\n      description: ''\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Order'\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n          description: successful operation\n        '400':\n          description: Invalid Order\n      summary: Place an order for a pet\n      tags:\n        - store\n  /store/order/{orderId}:\n    delete:\n      description: For valid response try integer IDs with positive integer value.\n        Negative or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - description: ID of the order that needs to be deleted\n          in: path\n          name: orderId\n          required: true\n          schema:\n            format: int64\n            minimum: 1\n            type: integer\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n      summary: Delete purchase order by ID\n      tags:\n        - store\n    get:\n      description: For valid response try integer IDs with value \u003e= 1 and \u003c= 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - description: ID of pet that needs to be fetched\n          in: path\n          name: orderId\n          required: true\n          schema:\n            format: int64\n            maximum: 10\n            minimum: 1\n            type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n          description: successful operation\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n      summary: Find purchase order by ID\n      tags:\n        - store\n  /user:\n    post:\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n      summary: Create user\n      tags:\n        - user\n  /user/createWithArray:\n    post:\n      description: ''\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: '#/components/requestBodies/UserArray'\n      responses:\n        default:\n          description: successful operation\n      summary: Creates list of users with given input array\n      tags:\n        - user\n  /user/createWithList:\n    post:\n      description: ''\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: '#/components/requestBodies/UserArray'\n      responses:\n        default:\n          description: successful operation\n      summary: Creates list of users with given input array\n      tags:\n        - user\n  /user/login:\n    get:\n      description: ''\n      operationId: loginUser\n      parameters:\n        - description: The user name for login\n          in: query\n          name: username\n          required: true\n          schema:\n            type: string\n        - description: The password for login in clear text\n          in: query\n          name: password\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: string\n            application/xml:\n              schema:\n                type: string\n          description: successful operation\n          headers:\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                format: date-time\n                type: string\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                format: int32\n                type: integer\n        '400':\n          description: Invalid username/password supplied\n      summary: Logs user into the system\n      tags:\n        - user\n  /user/logout:\n    get:\n      description: ''\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n      summary: Logs out current logged in user session\n      tags:\n        - user\n  /user/{username}:\n    delete:\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - description: The name that needs to be deleted\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n      summary: Delete user\n      tags:\n        - user\n    get:\n      description: ''\n      operationId: getUserByName\n      parameters:\n        - description: 'The name that needs to be fetched. Use user1 for testing. '\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: successful operation\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n      summary: Get user by user name\n      tags:\n        - user\n    put:\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - description: name that need to be updated\n          in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Updated user object\n        required: true\n      responses:\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n      summary: Updated user\n      tags:\n        - user\ncomponents:\n  requestBodies:\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Pet'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/Pet'\n      description: Pet object that needs to be added to the store\n      required: true\n    UserArray:\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: '#/components/schemas/User'\n            type: array\n      description: List of user object\n      required: true\n  schemas:\n    ApiResponse:\n      properties:\n        code:\n          format: int32\n          type: integer\n        message:\n          type: string\n        type:\n          type: string\n      type: object\n    Category:\n      properties:\n        id:\n          format: int64\n          type: integer\n        name:\n          type: string\n      type: object\n      xml:\n        name: Category\n    Order:\n      properties:\n        complete:\n          default: false\n          type: boolean\n        id:\n          format: int64\n          type: integer\n        petId:\n          format: int64\n          type: integer\n        quantity:\n          format: int32\n          type: integer\n        shipDate:\n          format: date-time\n          type: string\n        status:\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n          type: string\n      type: object\n      xml:\n        name: Order\n    Pet:\n      properties:\n        category:\n          $ref: '#/components/schemas/Category'\n        id:\n          format: int64\n          type: integer\n        name:\n          example: doggie\n          type: string\n        photoUrls:\n          items:\n            type: string\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          example: [\"https://photourl.com\"]\n        status:\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n          type: string\n        tags:\n          items:\n            $ref: '#/components/schemas/Tag'\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n      required:\n        - name\n        - photoUrls\n      type: object\n      xml:\n        name: Pet\n    Tag:\n      properties:\n        id:\n          format: int64\n          type: integer\n        name:\n          type: string\n      type: object\n      xml:\n        name: Tag\n    User:\n      properties:\n        email:\n          type: string\n        firstName:\n          type: string\n        id:\n          format: int64\n          type: integer\n        lastName:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          description: User Status\n          format: int32\n          type: integer\n        username:\n          type: string\n      type: object\n      xml:\n        name: User\n  securitySchemes:\n    api_key:\n      in: header\n      name: api_key\n      type: apiKey\n    petstore_auth:\n      flows:\n        implicit:\n          authorizationUrl: https://petstore.swagger.io/oauth/dialog\n          scopes:\n            read:pets: read your pets\n            write:pets: modify pets in your account\n      type: oauth2\n",
			"canonicalURL": "/github.com/schemathesis/schemathesis@9e576e4e58173b626c4910247aa279f466a33265/-/blob/test/data/petstore_v3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/schemathesis/schemathesis/blob/9e576e4e58173b626c4910247aa279f466a33265/test/data/petstore_v3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/pet/findByTags\": get: security: security \"petstore_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}