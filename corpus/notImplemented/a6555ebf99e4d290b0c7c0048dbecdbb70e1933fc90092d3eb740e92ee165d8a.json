{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/osbuild/osbuild-composer"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "internal/kojiapi/api/openapi.yml",
			"byteSize": 9379,
			"content": "openapi: 3.0.1\ninfo:\n  title: OSBuild Composer - Koji\n  version: '1'\n  description: Service to build and push images to Koji.\n  license:\n    name: Apache 2.0\n    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'\nservers:\n  - url: /api/composer-koji/v1\npaths:\n  /status:\n    get:\n      summary: status\n      tags: [ ]\n      responses:\n        '200':\n          description: OK\n          headers: { }\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Status'\n      operationId: GetStatus\n      description: Simple status handler to check whether the service is up.\n  '/compose/{id}':\n    get:\n      summary: The status of a compose\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n            format: uuid\n            example: 123e4567-e89b-12d3-a456-426655440000\n          required: true\n          description: ID of compose status to get\n      description: 'Get the status of a running or finished compose. This includes whether or not it succeeded, and also meta information about the result.'\n      responses:\n        '200':\n          description: Compose status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComposeStatus'\n        '400':\n          description: Invalid compose id\n          content:\n            text/plain:\n              schema:\n                type: string\n        '404':\n          description: Unknown compose id\n          content:\n            text/plain:\n              schema:\n                type: string\n  '/compose/{id}/logs':\n    get:\n      summary: Get logs for a compose.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n            format: uuid\n            example: 123e4567-e89b-12d3-a456-426655440000\n          required: true\n          description: ID of compose status to get\n      description: 'Get the status of a running or finished compose. This includes whether or not it succeeded, and also meta information about the result.'\n      responses:\n        '200':\n          description: The logs for the given compose, in no particular format (though valid JSON).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComposeLogs'\n        '400':\n          description: Invalid compose id\n          content:\n            text/plain:\n              schema:\n                type: string\n        '404':\n          description: Unknown compose id\n          content:\n            text/plain:\n              schema:\n                type: string\n  '/compose/{id}/manifests':\n    get:\n      summary: Get the manifests for a compose.\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n            format: uuid\n            example: 123e4567-e89b-12d3-a456-426655440000\n          required: true\n          description: ID of compose status to get\n      description: 'Get the manifests of a running or finished compose. Returns one manifest for each image in the request. Each manifest conforms to the format defined at https://www.osbuild.org/man/osbuild-manifest.5'\n      responses:\n        '200':\n          description: The manifest for the given compose.\n          content:\n            application/json:\n        '400':\n          description: Invalid compose id\n          content:\n            text/plain:\n              schema:\n                type: string\n        '404':\n          description: Unknown compose id\n          content:\n            text/plain:\n              schema:\n                type: string\n  /compose:\n    post:\n      summary: Create compose\n      description: 'Create a new compose, potentially consisting of several images and upload each to koji.'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ComposeRequest'\n      responses:\n        '201':\n          description: Compose has started\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComposeResponse'\n        '400':\n          description: Invalid compose request\n          content:\n            text/plain:\n              schema:\n                type: string\n        '415':\n          description: The content type is not supported\n          content:\n            text/plain:\n              schema:\n                type: string\ncomponents:\n  schemas:\n    Status:\n      required:\n        - status\n      properties:\n        status:\n          type: string\n          enum:\n            - OK\n    ComposeStatus:\n      required:\n        - status\n        - image_statuses\n        - koji_task_id\n      properties:\n        status:\n          $ref: '#/components/schemas/ComposeStatusValue'\n        image_statuses:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageStatus'\n        koji_task_id:\n          type: integer\n          example: 203143\n        koji_build_id:\n          type: integer\n          example: 42\n    ComposeStatusValue:\n      type: string\n      enum:\n        - success\n        - failure\n        - pending\n        - registering\n      example: success\n    ComposeLogs:\n      required:\n        - koji_init_logs\n        - koji_import_logs\n        - image_logs\n      properties:\n        koji_init_logs: {}\n        koji_import_logs: {}\n        image_logs:\n          type: array\n    ImageStatus:\n      required:\n        - status\n      properties:\n        status:\n          $ref: '#/components/schemas/ImageStatusValue'\n    ImageStatusValue:\n      type: string\n      enum:\n        - success\n        - failure\n        - pending\n        - building\n        - uploading\n      example: success\n    ComposeRequest:\n      type: object\n      required:\n        - name\n        - version\n        - release\n        - distribution\n        - image_requests\n        - koji\n      properties:\n        name:\n          type: string\n          example: Fedora-Cloud-Base\n        version:\n          type: string\n          example: '31'\n        release:\n          type: string\n          example: '20200907.0'\n        distribution:\n          type: string\n          example: fedora-32\n        image_requests:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImageRequest'\n        koji:\n          $ref: '#/components/schemas/Koji'\n    ImageRequest:\n      required:\n        - architecture\n        - image_type\n        - repositories\n      properties:\n        architecture:\n          type: string\n          example: x86_64\n        image_type:\n          type: string\n          example: ami\n        repositories:\n          type: array\n          items:\n            $ref: '#/components/schemas/Repository'\n    Repository:\n      type: object\n      required:\n        - baseurl\n      properties:\n        baseurl:\n          type: string\n          format: url\n          example: 'https://cdn.redhat.com/content/dist/rhel8/8/x86_64/baseos/os/'\n        gpgkey:\n          type: string\n          example: \"-----BEGIN PGP PUBLIC KEY BLOCK-----\\\\n\\\\nmQINBErgSTsBEACh2A4b0O9t+vzC9VrVtL1AKvUWi9OPCjkvR7Xd8DtJxeeMZ5eF\\\\n0HtzIG58qDRybwUe89FZprB1ffuUKzdE+HcL3FbNWSSOXVjZIersdXyH3NvnLLLF\\\\n0DNRB2ix3bXG9Rh/RXpFsNxDp2CEMdUvbYCzE79K1EnUTVh1L0Of023FtPSZXX0c\\\\nu7Pb5DI5lX5YeoXO6RoodrIGYJsVBQWnrWw4xNTconUfNPk0EGZtEnzvH2zyPoJh\\\\nXGF+Ncu9XwbalnYde10OCvSWAZ5zTCpoLMTvQjWpbCdWXJzCm6G+/hx9upke546H\\\\n5IjtYm4dTIVTnc3wvDiODgBKRzOl9rEOCIgOuGtDxRxcQkjrC+xvg5Vkqn7vBUyW\\\\n9pHedOU+PoF3DGOM+dqv+eNKBvh9YF9ugFAQBkcG7viZgvGEMGGUpzNgN7XnS1gj\\\\n/DPo9mZESOYnKceve2tIC87p2hqjrxOHuI7fkZYeNIcAoa83rBltFXaBDYhWAKS1\\\\nPcXS1/7JzP0ky7d0L6Xbu/If5kqWQpKwUInXtySRkuraVfuK3Bpa+X1XecWi24JY\\\\nHVtlNX025xx1ewVzGNCTlWn1skQN2OOoQTV4C8/qFpTW6DTWYurd4+fE0OJFJZQF\\\\nbuhfXYwmRlVOgN5i77NTIJZJQfYFj38c/Iv5vZBPokO6mffrOTv3MHWVgQARAQAB\\\\ntDNSZWQgSGF0LCBJbmMuIChyZWxlYXNlIGtleSAyKSA8c2VjdXJpdHlAcmVkaGF0\\\\nLmNvbT6JAjYEEwECACAFAkrgSTsCGwMGCwkIBwMCBBUCCAMEFgIDAQIeAQIXgAAK\\\\nCRAZni+R/UMdUWzpD/9s5SFR/ZF3yjY5VLUFLMXIKUztNN3oc45fyLdTI3+UClKC\\\\n2tEruzYjqNHhqAEXa2sN1fMrsuKec61Ll2NfvJjkLKDvgVIh7kM7aslNYVOP6BTf\\\\nC/JJ7/ufz3UZmyViH/WDl+AYdgk3JqCIO5w5ryrC9IyBzYv2m0HqYbWfphY3uHw5\\\\nun3ndLJcu8+BGP5F+ONQEGl+DRH58Il9Jp3HwbRa7dvkPgEhfFR+1hI+Btta2C7E\\\\n0/2NKzCxZw7Lx3PBRcU92YKyaEihfy/aQKZCAuyfKiMvsmzs+4poIX7I9NQCJpyE\\\\nIGfINoZ7VxqHwRn/d5mw2MZTJjbzSf+Um9YJyA0iEEyD6qjriWQRbuxpQXmlAJbh\\\\n8okZ4gbVFv1F8MzK+4R8VvWJ0XxgtikSo72fHjwha7MAjqFnOq6eo6fEC/75g3NL\\\\nGht5VdpGuHk0vbdENHMC8wS99e5qXGNDued3hlTavDMlEAHl34q2H9nakTGRF5Ki\\\\nJUfNh3DVRGhg8cMIti21njiRh7gyFI2OccATY7bBSr79JhuNwelHuxLrCFpY7V25\\\\nOFktl15jZJaMxuQBqYdBgSay2G0U6D1+7VsWufpzd/Abx1/c3oi9ZaJvW22kAggq\\\\ndzdA27UUYjWvx42w9menJwh/0jeQcTecIUd0d0rFcw/c1pvgMMl/Q73yzKgKYw==\\\\n=zbHE\\\\n-----END PGP PUBLIC KEY BLOCK-----\\\\n\"\n    Koji:\n      type: object\n      required:\n        - server\n        - task_id\n      properties:\n        server:\n          type: string\n          format: url\n          example: 'https://koji.fedoraproject.org/kojihub'\n        task_id:\n          type: integer\n          example: 42\n    ComposeResponse:\n      required:\n        - id\n        - koji_build_id\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 123e4567-e89b-12d3-a456-426655440000\n        koji_build_id:\n          type: integer\n          example: 42\n",
			"canonicalURL": "/github.com/osbuild/osbuild-composer@5c79d4e98cbcf6e521e98aefbf7347c5b24c373a/-/blob/internal/kojiapi/api/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/osbuild/osbuild-composer/blob/5c79d4e98cbcf6e521e98aefbf7347c5b24c373a/internal/kojiapi/api/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/compose/{id}/manifests\": get: responses: 200: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema",
		"unsupported content types"
	]
}