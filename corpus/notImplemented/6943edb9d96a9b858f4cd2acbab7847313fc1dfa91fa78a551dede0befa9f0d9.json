{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/briansimoni/stereodose"
		},
		"file": {
			"name": "api-definition.yml",
			"size": 0,
			"path": "api-definition.yml",
			"byteSize": 20434,
			"content": "openapi: 3.0.0\ninfo:\n  description: |\n    This is the Stereodose API\n    [https://github.com/briansimoni/stereodose](https://github.com/briansimoni/stereodose)\n  version: '1.0.0'\n  title: Stereodose API\n  license:\n    name: GPL 3.0\n    url: 'https://github.com/briansimoni/stereodose/blob/master/LICENSE'\nservers:\n  - url: 'https://stereodose.app'\n  - url: 'http://localhost:3000'\n  - url: 'http://localhost:4000'\n\npaths:\n  '/auth/login':\n    get:\n      tags:\n        - auth\n      responses:\n        302:\n          description: sends you to SpotifyAPI auth URL\n          headers:\n            Set-Cookie:\n              description: temporary auth state cookie which is required for the /callback endpoint\n              schema:\n                type: string\n                example: stereodose_auth_state=abcde12345; Path=/;\n\n  '/auth/logout':\n    get:\n      tags:\n        - auth\n      responses:\n        200:\n          description: attempts to delete cookie\n\n  '/auth/callback':\n    get:\n      tags:\n        - auth\n      parameters:\n        - in: cookie\n          name: stereodose_auth_state\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: code\n          description: the authorization code returned from Spotify\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: state\n          description: CSRF token returned from spotify\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successfully logged in, setting cookie\n          headers:\n            Set-Cookie:\n              schema:\n                type: string\n                example: stereodose_session=abcde12345; Path=/;\n\n  '/auth/token-swap':\n    post:\n      description: \u003e\n        TokenSwap was created to support the iOS app.\n        The Spotify iOS documentation refers to a \"token swap\" API endpoint which is essentially\n        the same as the OAuth callback or redirect URL.\n        The difference here is that instead of 302 redirecting on the callback,\n        we simply return a 200 response with the JSON returned from the Spotify code exchange\n      tags:\n        - auth\n      requestBody:\n        description: the authorization code from spotify\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                code:\n                  type: string\n      responses:\n        200:\n          description: successfully exchanged authorization code for access tokens\n          headers:\n            Set-Cookie:\n              schema:\n                type: string\n                example: stereodose_session=abcde12345; Path=/;\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  access_token:\n                    type: string\n                  token_type:\n                    type: string\n                  scope:\n                    type: string\n                  expires_in:\n                    type: string\n                  refresh_token:\n                    type: string\n\n  '/auth/mobile-login':\n    post:\n      description: \u003e\n        MobileLogin is here to support the iOS app.\n        Because Spotify basically constrains iOS developers to using only their SDK\n        and not the WebAPI for authentication, we have to create this separate endpoint\n        It will take a Spotify access token, and then create a Stereodose session.\n        The response is simply a 200 and a set-cookie header\n      tags:\n        - auth\n      requestBody:\n        description: Create a new Stereodose playlist\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                access_token:\n                  type: string\n      responses:\n        200:\n          description: The cookie returned can be used as an API key for subsequent requests\n          headers:\n            Set-Cookie:\n              schema:\n                type: string\n                example: stereodose_session=abcde12345; Path=/;\n\n  '/auth/refresh':\n    get:\n      security:\n        - cookieAuth: []\n      tags:\n        - auth\n      responses:\n        200:\n          description: refreshes access token (notice this is different than /token)\n          content:\n            application/json:\n              schema:\n                properties:\n                  access_token:\n                    type: string\n                  token_type:\n                    type: string\n                  expires_in:\n                    type: string\n                  scope:\n                    type: string\n\n  '/auth/token':\n    get:\n      security:\n        - cookieAuth: []\n      tags:\n        - auth\n      responses:\n        200:\n          description: returns the current access token (notice this is different than /refresh)\n          content:\n            application/json:\n              schema:\n                properties:\n                  access_token:\n                    type: string\n                  token_type:\n                    type: string\n                  refresh_token:\n                    type: string\n                  expiry:\n                    type: string\n\n  '/api/users/me':\n    get:\n      tags:\n        - users\n      summary: get information about the current user\n      security:\n        - cookieAuth: []\n      responses:\n        200:\n          description: JSON data about the currently logged in user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n                \n  '/api/users/{id}':\n    get:\n      tags:\n        - users\n      summary: get information about a user\n      description: This endpoint returns user information. Note that it does not include access tokens.\n      parameters: \n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        \n      security:\n        - cookieAuth: []\n      responses:\n        200:\n          description: JSON data about the requested user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n                \n  '/api/users/{id}/likes':\n    get:\n      tags:\n        - users\n      summary: get a user's likes\n      description: This endpoint returns an array of likes from a particular user.\n      parameters: \n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n            \n      security:\n        - cookieAuth: []\n      responses:\n        200:\n          description: JSON array of likes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          \n                \n  '/api/categories/':\n    get:\n      tags:\n        - categories\n      responses:\n        200:\n          description: returns an object that contains all of the categories/subcategories\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Category'\n\n  '/api/playlists/':\n    get:\n      tags:\n        - playlists\n      summary: get a set of playlists\n      parameters:\n        - in: query\n          name: offset\n          schema:\n            type: integer\n          description: The number of items to skip before starting to collect the result set\n        - in: query\n          name: limit\n          schema:\n            type: integer\n          description: Limit the of items to return\n        - in: query\n          name: category\n          schema:\n            type: string\n          description: The overall category of playlist\n        - in: query\n          name: subcategory\n          schema:\n            type: string\n          description: The subcategory of playlist\n        - in: query\n          name: sort-key\n          schema:\n            type: string\n          description: \"Can be one of the following defaulting to likes_count: created_at, updated_at, name, likes_count\"\n        - in: query\n          name: order\n          schema:\n            type: string\n          description: \"Can be one of the following defaulting to desc: asc, desc\"\n        - in: query\n          name: spotify-ids\n          schema:\n            type: string\n          description: \"A space delimited set of playlist IDs\"\n      responses:\n        200:\n          description: A JSON array of playlists\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Playlist'\n\n    post:\n      tags:\n        - playlists\n      summary: create a playlist\n      security:\n        - cookieAuth: []\n      requestBody:\n        description: Create a new Stereodose playlist\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                SpotifyID:\n                  type: string\n                Category:\n                  type: string\n                Subcategory:\n                  type: string\n                ImageURL:\n                  type: string\n                ThumbnailURL:\n                  type: string\n      responses:\n        201:\n          description: successfully created playlist\n\n  '/api/playlists/random':\n    get:\n      tags:\n        - playlists\n      summary: get a random playlist\n      parameters:\n        - in: query\n          name: category\n          schema:\n            type: string\n          description: The overall category of playlist\n        - in: query\n          name: subcategory\n          schema:\n            type: string\n          description: The subcategory of playlist\n      responses:\n        200:\n          description: A JSON array of playlists\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Playlist'\n\n  '/api/playlists/{id}':\n    get:\n      tags:\n        - playlists\n      summary: get a playlist\n      parameters:\n        - in: path\n          name: id # Note the name is the same as in the path\n          required: true\n          schema:\n            type: string\n          description: The playlist ID\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Playlist'\n\n    delete:\n      tags:\n        - playlists\n      summary: delete a playlist\n      description: Deletes the playlist and associated likes and comments. Only admins may perform this operation\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          description: The playlist ID\n      responses:\n        204:\n          description: no content indicates success\n\n  '/api/playlists/image':\n    post:\n      tags:\n        - playlists\n      summary: create an image and thumbnail for a new playlist\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id # Note the name is the same as in the path\n          required: true\n          schema:\n            type: string\n          description: The playlist ID\n      requestBody:\n        description: \u003e\n          content-type header should be multipart/form-data\n          and the filename parameter should always be \"playlist-image\".\n          The playlist-image parameter should be the binary that makes up the image.\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                filename:\n                  type: string\n                playlist-image:\n                  type: string\n                  format: binary\n      responses:\n        201:\n          description: returns JSON useful for creating a Stereodose playlist\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    type: integer\n                  imageURL:\n                    type: string\n                  thumbnailURL:\n                    type: string\n\n  '/api/playlists/{id}/comments':\n    post:\n      tags:\n        - playlists\n      summary: comment on a playlist\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id # Note the name is the same as in the path\n          required: true\n          schema:\n            type: string\n          description: The playlist ID\n      requestBody:\n        required: true\n        description: \u003e\n          Send the comment as the value of the Text property. The backend allows\n          for up to 10,000 characters\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                Text:\n                  type: string\n      responses:\n        201:\n          description: returns the new Comment object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n\n  '/api/playlists/{id}/comments/{commentId}':\n    delete:\n      tags:\n        - playlists\n      summary: remove a comment from a playlist\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id # Note the name is the same as in the path\n          required: true\n          schema:\n            type: string\n          description: The playlist ID\n        - in: path\n          name: commentId # Note the name is the same as in the path\n          required: true\n          schema:\n            type: string\n          description: The comment ID\n      responses:\n        200:\n          description: successfully deleted comment\n\n  '/api/playlists/{id}/likes':\n    post:\n      tags:\n        - playlists\n      summary: like a playlist\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id # Note the name is the same as in the path\n          required: true\n          schema:\n            type: string\n          description: The playlist ID\n      responses:\n        201:\n          description: successfully liked the playlist\n\n  '/api/playlists/{id}/likes/{likeId}':\n    delete:\n      tags:\n        - playlists\n      summary: remove a like from a playlist\n      security:\n        - cookieAuth: []\n      parameters:\n        - in: path\n          name: id # Note the name is the same as in the path\n          required: true\n          schema:\n            type: string\n          description: The playlist ID\n        - in: path\n          name: likeId # Note the name is the same as in the path\n          required: true\n          schema:\n            type: string\n          description: The like ID\n      responses:\n        200:\n          description: successfully deleted like\n\n  '/api/playlists/me':\n    get:\n      tags:\n        - playlists\n      summary: get the playlists that belong to the current user\n      security:\n        - cookieAuth: []\n      responses:\n        200:\n          description: A JSON array of playlists\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Playlist'\n                  \n  '/api/feedback/':\n    post:\n      tags:\n        - feedback\n      summary: send feedback about Stereodose\n      description: \u003e\n        This is essentially a way to collect survey data. Expect more fields to\n        be added in the near future. While this endpoint does not require\n        authentication, it will save more data if the request is authenticated.\n        For instance, behind the scenes I'm tracking userID. The otherComments\n        field is currently limited to 10,000 characters.\n      responses:\n        200:\n          description: Feedback submission successful\n      requestBody:\n        description: JSON represrenting feedback\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                goodExperience:\n                  type: boolean\n                otherComments:\n                  type: string\n                  \n\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        ID:\n          type: integer\n        CreatedAt:\n          type: string\n        UpdatedAt:\n          type: string\n        displayName:\n          type: string\n        birthDate:\n          type: string\n        email:\n          type: string\n        spotifyID:\n          type: string\n        accessToken:\n          type: string\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserImage'\n        playlists:\n          type: array\n          items:\n            $ref: '#/components/schemas/Playlist'\n        comments:\n          type: array\n          items:\n            $ref: '#/components/schemas/Comment'\n        likes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Like'\n        product:\n          type: string\n\n    UserImage:\n      type: object\n      properties:\n        ID:\n          type: integer\n        CreatedAt:\n          type: string\n        UpdatedAt:\n          type: string\n        DeletedAt:\n          type: string\n        height:\n          type: integer\n        width:\n          type: integer\n        url:\n          type: string\n\n    Playlist:\n      type: object\n      properties:\n        spotifyID:\n          type: string\n        createdAt:\n          type: string\n        updatedAt:\n          type: string\n        category:\n          type: string\n        categoryDisplayName:\n          type: string\n        subCategory:\n          type: string\n        collaborative:\n          type: boolean\n        href:\n          type: string\n        name:\n          type: string\n        public:\n          type: boolean\n        snapshot_id:\n          type: string\n        tracks:\n          type: array\n          items:\n            $ref: '#/components/schemas/Track'\n        comments:\n          type: array\n          items:\n            $ref: '#/components/schemas/Comment'\n        likes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Like'\n        likesCount:\n          type: integer\n        URI:\n          type: string\n        userId:\n          type: integer\n        bucketImageURL:\n          type: string\n        bucketThumbnailURL:\n          type: string\n        permalink:\n          type: string\n\n    Track:\n      type: object\n      properties:\n        spotifyID:\n          type: string\n        createdAt:\n          type: string\n        updatedAt:\n          type: string\n        name:\n          type: string\n        duration:\n          type: integer\n        previewURL:\n          type: string\n        trackNumber:\n          type: string\n        URI:\n          type: string\n        artists:\n          type: string\n        spotifyArtistIDs:\n          type: string\n\n    Comment:\n      type: object\n      properties:\n        ID:\n          type: integer\n        CreatedAt:\n          type: string\n        UpdatedAt:\n          type: string\n        DeletedAt:\n          type: string\n        content:\n          type: string\n        PlaylistID:\n          type: string\n        userID:\n          type: string\n        displayName:\n          type: string\n        permalink:\n          type: string\n\n    Like:\n      type: object\n      properties:\n        ID:\n          type: string\n        CreatedAt:\n          type: string\n        UpdatedAt:\n          type: string\n        userID:\n          type: integer\n        playlistID:\n          type: string\n        playlistName:\n          type: string\n        playlist: \n          $ref: '#/components/schemas/Playlist'\n        permalink:\n          type: string\n\n    Category:\n      type: object\n      properties:\n        name:\n          type: string\n        displayName:\n          type: string\n        subcategories:\n          type: array\n          items:\n            type: string\n\n  securitySchemes:\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: stereodose_session",
			"canonicalURL": "/github.com/briansimoni/stereodose@606800aff9d7d5f60f2ac42281983c519b7660e0/-/blob/api-definition.yml",
			"externalURLs": [
				{
					"url": "https://github.com/briansimoni/stereodose/blob/606800aff9d7d5f60f2ac42281983c519b7660e0/api-definition.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/playlists/\": post: security: security \"cookieAuth\" (index 0): cookie security not implemented",
	"NotImplemented": [
		"cookie params",
		"cookie security"
	]
}