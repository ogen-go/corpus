{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/egovernments/municipal-services"
		},
		"file": {
			"name": "property-services.yml",
			"size": 0,
			"path": "docs/property-services/property-services.yml",
			"byteSize": 38685,
			"content": "openapi: 3.0.0\ninfo:\n  title: eGov Property Registry System.\n  description: \u003e\n    APIs for Property Registry module. This provide APIs for create new property, update existing property, search existing property.\n  contact:\n    name: Egovernments Foundation\n    email: contact@egovernments.org\n  version: '1.0.0'\nservers:\n- url: https://virtserver.swaggerhub.com/egovernmets-faundation/PT-2.0/1.0.0\n  description: SwaggerHub API Auto Mocking\n  variables: {}\n- url: https://egov-micro-dev.egovernments.org\n  variables: {}\npaths:\n  /property/_create:\n    post:\n      tags:\n      - Property\n      summary: Creates new property.\n      description: Creates new property with basic information related to land and owner information. Can be integrated with other modules like Water and Sewerage or Trade License to act as base entity against which water connection or trade license can be issued\n      operationId: Createsnewproperty.\n      parameters: []\n      requestBody:\n        description: Details for the new property + RequestHeader meta data.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PropertyRequest'\n        required: true\n      responses:\n        201:\n          description: Property created sucessfully\n          headers: {}\n          content:\n            text/plain:\n              schema:\n                type: object\n                description: Property created sucessfully\n        400:\n          description: Property(s) creation failed\n      deprecated: false\n  /property/_update:\n    post:\n      tags:\n      - Property\n      summary: Update existing property.\n      description: Updates a given `Property` with newer details.\n      operationId: Updateexistingproperty.\n      parameters: []\n      requestBody:\n        description: Request header for the property Request.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PropertyRequest'\n        required: true\n      responses:\n        200:\n          description: Update Property successful\n          headers: {}\n          content:\n            text/plain:\n              schema:\n                type: object\n                description: Update Property successful\n        400:\n          description: Update Property failed\n      deprecated: false\n  /property/_search:\n    post:\n      tags:\n      - Property\n      summary: Get the list of properties defined in the system.\n      description: \u003e\n        Get the properties list based on the input parameters.\n      operationId: Getthelistofpropertiesdefinedinthesystem.\n      parameters:\n      - name: tenantId\n        in: query\n        description: Unique id for a tenant.\n        required: true\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: name\n        in: query\n        description: Name of owner whose property is to be searched.\n        style: form\n        explode: true\n        schema:\n          type: string\n          nullable: true\n      - name: ids\n        in: query\n        description: List of system generated ids of properties.\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: constructionDetailNumbers\n        in: query\n        description: List of constructionDetailNumbers to search.\n        style: form\n        explode: true\n        schema:\n          maxLength: 128\n          minLength: 4\n          type: string\n      - name: oldpropertyids\n        in: query\n        description: List of oldPropertyIds to search..\n        style: form\n        explode: true\n        schema:\n          maxLength: 128\n          minLength: 4\n          type: string\n      - name: mobileNumber\n        in: query\n        description: MobileNumber of owner whose property is to be searched.\n        style: form\n        explode: true\n        schema:\n          type: integer\n          format: int64\n      - name: fromDate\n        in: query\n        description: Fetches properties with created time after fromDate.\n        style: form\n        explode: true\n        schema:\n          type: number\n          format: double\n      - name: toDate\n        in: query\n        description: Fetches properties with created time till toDate.\n        style: form\n        explode: true\n        schema:\n          type: number\n          format: double\n      requestBody:\n        description: RequestHeader meta data.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestHeader'\n        required: true\n      responses:\n        200:\n          description: Successful response\n          headers: {}\n          content:\n            text/plain:\n              schema:\n                type: object\n                description: Successful response\n        400:\n          description: Invalid input.\n      deprecated: false\n  /property/_delete:\n    post:\n      tags:\n      - Property\n      summary: Delete existing property.\n      description: The API will delete the property associated with the given propertyId from the system  The API works in idempotent manner.\n      operationId: Deleteexistingproperty.\n      parameters:\n      - name: tenantId\n        in: query\n        description: Unique id for a tenant.\n        required: true\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: propertyId\n        in: query\n        description: The properrtyId to be deactivated\n        required: true\n        style: form\n        explode: true\n        schema:\n          maxLength: 128\n          minLength: 4\n          type: string\n      requestBody:\n        description: Request header for the property delete Request.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestHeader'\n        required: true\n      responses:\n        200:\n          description: Deleted Property successful\n          headers: {}\n          content:\n            text/plain:\n              schema:\n                type: object\n                description: Deleted Property successful\n        404:\n          description: Delete Property failed\n      deprecated: false\n  /property/_cancel:\n    post:\n      tags:\n      - Property\n      summary: Cancel existing property.\n      description: The API will delete the property associated with the given propertyId from the system  The API works in idempotent manner.\n      operationId: Cancelexistingproperty.\n      parameters:\n      - name: tenantId\n        in: query\n        description: Unique id for a tenant.\n        required: true\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: propertyId\n        in: query\n        description: The properrtyId to be deactivated\n        required: true\n        style: form\n        explode: true\n        schema:\n          maxLength: 128\n          minLength: 4\n          type: string\n      requestBody:\n        description: Request header for the property delete Request.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestHeader'\n        required: true\n      responses:\n        200:\n          description: Deleted Property successful\n          headers: {}\n          content:\n            text/plain:\n              schema:\n                type: object\n                description: Deleted Property successful\n        404:\n          description: Delete Property failed\n      deprecated: false\ncomponents:\n  schemas:\n    PropertyInfo:\n      title: PropertyInfo\n      required:\n      - tenantId\n      - address\n      type: object\n      properties:\n        id:\n          maxLength: 64\n          minLength: 1\n          type: string\n          description: Unique Identifier of the Property for internal reference.\n        propertyId:\n          maxLength: 64\n          minLength: 1\n          type: string\n          description: Unique Identifier of the Property.\n        linkedProperties:\n          maxLength: 64\n          minLength: 1\n          type: array\n          items: \n            type: string\n          description: Unique Identifier of the Properties from which the current proeprty is derived.\n        tenantId:\n          maxLength: 256\n          minLength: 2\n          type: string\n          description: tenant id of the Property\n        accountId:\n          maxLength: 64\n          minLength: 1\n          type: string\n          description: UUID of the user to which the property will be associated\n        oldPropertyId:\n          maxLength: 256\n          minLength: 1\n          type: string\n          description: Old upic no of the Property. ULBs have the existing property in their system/manual records with their identification number, they want to continue the old reference number in this case the same identification number will be captured here.\n        status:\n          $ref: '#/components/schemas/Status'\n        address:\n          $ref: '#/components/schemas/Address'\n      description: This is lightweight property object that can be used as reference by definitions needing property linking. Actual Property Object extends this to include more elaborate attributes of the property.\n    Property:\n      title: Property\n      required:\n      - tenantId\n      - address\n      - propertyType\n      - owners\n      - source\n      type: object\n      properties:\n        id:\n          maxLength: 64\n          minLength: 1\n          type: string\n          description: Unique Identifier of the Property for internal reference.\n        propertyId:\n          maxLength: 64\n          minLength: 1\n          type: string\n          description: Unique Identifier of the Property.\n        tenantId:\n          maxLength: 256\n          minLength: 2\n          type: string\n          description: tenant id of the Property\n        surveyId:\n          maxLength: 256\n          minLength: 2\n          type: string\n          description: survey id of the Property\n        accountId:\n          maxLength: 64\n          minLength: 1\n          type: string\n          description: UUID of the user to which the property will be associated\n        oldPropertyId:\n          maxLength: 256\n          minLength: 1\n          type: string\n          description: Old upic no of the Property. ULBs have the existing property in their system/manual records with their identification number, they want to continue the old reference number in this case the same identification number will be captured here.\n        status:\n          $ref: '#/components/schemas/Status'\n        address:\n          $ref: '#/components/schemas/Address'\n        acknowldgementIds:\n          maxLength: 64\n          minLength: 1\n          type: string\n          description: Acknowldgement number given to citizen on submitting the application for creation or modification of the property.\n        propertyType:\n          maxLength: 64\n          type: string\n          description: Type of a property like Private, Vacant Land, State Government, Central Government etc.\n          example: VACANT\n        ownershipCategory:\n          maxLength: 64\n          type: string\n          description: The type of ownership of the property.\n        owners:\n          type: array\n          items:\n            $ref: '#/components/schemas/OwnerInfo'\n          description: Property owners, these will be citizen users in system.\n        institution:\n          $ref: '#/components/schemas/Institution'\n        creationReason:\n          $ref: '#/components/schemas/CreationReason'\n        noOfFloors:\n          type: integer\n          description: no of floors in the property\n          format: int64\n        landArea:\n          type: number\n          description: Land area of the property in sq ft\n        superBuiltUpArea:\n          type: number\n          description: super builtup area of the complete property\n        source:\n          $ref: '#/components/schemas/Source'\n        channel:\n          $ref: '#/components/schemas/Channel'\n        documents:\n          type: array\n          items:\n            $ref: '#/components/schemas/Document'\n          description: The documents attached by owner for exemption.\n        unit:\n          $ref: '#/components/schemas/Unit'\n        additionalDetails:\n          type: object\n          description: The json (array of '#/definitions/Factor')\n    ConstructionDetail:\n      title: ConstructionDetail\n      type: object\n      properties:\n        id:\n          maxLength: 64\n          type: string\n          description: id of the property with which the constructionDetail is associated.\n        carpetArea:\n          type: number\n          description: Total built up area in sq ft(built-up area = carpet area + areas covered by walls)\n        builtUpArea:\n          type: number\n          description: Total built up area in sq ft(built-up area = carpet area + areas covered by walls)\n        plinthArea:\n          type: number\n          description: Area of the extension builtup of the Unit, Like balcony, sitouts.\n        superBuiltUpArea:\n          type: number\n          description: Total built up area in sq ft(built-up area + Common area = Super built-up area)\n        constructionType:\n          maxLength: 64\n          minLength: 1\n          type: string\n          description: Construction type is defined in MDMS ConstructionTypeMaster.\n        constructionDate:\n          type: integer\n          description: The date when the property was constructed\n          format: int64\n        dimensions:\n          type: object\n          description: The dimensions of the plot or building or any unit\n        auditDetails:\n          $ref: '#/components/schemas/AuditDetails'\n        additionalDetails:\n          type: object\n          description: The json (array of '#/definitions/Factor')\n      description: Construction/constructionDetail details are captured here. Detail information of the constructionDetail including floor wise usage and area are saved as seperate units .For each financial year construction details may change. constructionDetail object is required for tax calculation\n    OwnerInfo:\n      title: OwnerInfo\n      required:\n      - name\n      - mobileNumber\n      - gender\n      - fatherOrHusbandName\n      - relationship\n      type: object\n      properties:\n        name:\n          maxLength: 256\n          type: string\n          description: The name of the owner.\n        mobileNumber:\n          maxLength: 256\n          type: string\n          description: MobileNumber of the owner.\n        gender:\n          maxLength: 256\n          type: string\n          description: Gender of the owner.\n        fatherOrHusbandName:\n          maxLength: 256\n          type: string\n          description: Father or Husband name of the owner.\n        correspondenceAddress:\n          maxLength: 1024\n          type: string\n          description: The current address of the owner for correspondence.\n        isPrimaryOwner:\n          type: boolean\n          description: The owner is primary or not\n        ownerShipPercentage:\n          type: number\n          description: Ownership percentage.\n        ownerType:\n          maxLength: 256\n          type: string\n          description: Type of owner, based on this option Exemptions will be applied. This is master data defined in mdms.\n        institutionId:\n          maxLength: 64\n          type: string\n          description: The id of the institution if the owner is the authorized person for one\n        documents:\n          type: array\n          items:\n            $ref: '#/components/schemas/Document'\n          description: The documents attached by owner for exemption.\n        relationship:\n          $ref: '#/components/schemas/Relationship'\n        additionalDetails:\n          type: object\n          description: Json object to capture any extra information which is not accommodated of model\n    Unit:\n      title: Unit\n      type: object\n      properties:\n        id:\n          type: string\n          description: Unique Identifier of the Unit(UUID).\n        tenantId:\n          maxLength: 256\n          minLength: 2\n          type: string\n          description: tenant id of the Property\n        floorNo:\n          maxLength: 64\n          minLength: 1\n          type: string\n          description: floor number of the Unit\n        unitType:\n          type: string\n          description: Unit type is master data.\n          example: Building, Room, Kitchen etc.\n        usageCategory:\n          maxLength: 64\n          minLength: 1\n          type: string\n          description: This is about the usage of the property like Residential, Non-residential, Mixed(Property witch is gettiong used for Residential, Non-residential purpose)\n        occupancyType:\n          $ref: '#/components/schemas/OccupancyType2'\n        occupancyDate:\n          type: integer\n          description: Date on which unit is occupied.\n          format: int64\n        constructionDetail:\n          $ref: '#/components/schemas/ConstructionDetail'\n        additionalDetails:\n          type: object\n          description: Json object to capture any extra information which is not accommodated by model\n    PropertyRequest:\n      title: PropertyRequest\n      type: object\n      properties:\n        RequestHeader:\n          $ref: '#/components/schemas/RequestHeader'\n        Property:\n          $ref: '#/components/schemas/Property'\n      description: Contract class to receive request. Array of Property items  are used in case of create . Where as single Property item is used for update\n    PropertyResponse:\n      title: PropertyResponse\n      type: object\n      properties:\n        ResponseHeader:\n          $ref: '#/components/schemas/ResponseHeader'\n        Property:\n          $ref: '#/components/schemas/Property'\n      description: Contains the ResponseHeader and the created/updated property\n    PropertySearchResponse:\n      title: PropertySearchResponse\n      type: object\n      properties:\n        ResponseHeader:\n          $ref: '#/components/schemas/ResponseHeader'\n        Properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/Property'\n          description: Used for search result and create only\n      description: Contract class to send response.  Property items  is used in case of search results or response for search.\n    PropertyType:\n      title: PropertyType\n      required:\n      - code\n      type: object\n      properties:\n        name:\n          maxLength: 128\n          minLength: 2\n          type: string\n          description: name of the propertytype\n        code:\n          maxLength: 64\n          minLength: 2\n          type: string\n          description: code of the propertytype\n        active:\n          type: boolean\n          description: describes Whether propertyType is Active or not.\n    UsageCategoryMajor:\n      title: UsageCategoryMajor\n      required:\n      - code\n      type: object\n      properties:\n        name:\n          maxLength: 128\n          minLength: 2\n          type: string\n          description: name of the UsageCategoryMajor\n        code:\n          maxLength: 64\n          minLength: 2\n          type: string\n          description: code of the UsageCategoryMajor\n        active:\n          type: boolean\n          description: Whether UsageCategoryMajor is Active or not.\n    ConstructionType:\n      title: ConstructionType\n      required:\n      - code\n      type: object\n      properties:\n        name:\n          maxLength: 128\n          minLength: 2\n          type: string\n          description: name of the construction type.\n        code:\n          maxLength: 64\n          minLength: 2\n          type: string\n          description: unique code of the construction type.\n        active:\n          type: boolean\n          description: Whether UsageCategorySubMinor is Active or not. If the value is TRUE, then UsageCategorySubMinor is active, if the value is FALSE then UsageCategorySubMinor is inactive, default value is TRUE\n    OwnerShipCategory:\n      title: OwnerShipCategory\n      required:\n      - code\n      type: object\n      properties:\n        name:\n          maxLength: 128\n          minLength: 2\n          type: string\n          description: name of the OwnerShipCategory\n        code:\n          maxLength: 64\n          minLength: 2\n          type: string\n          description: unique code for Ownership category.\n        active:\n          type: boolean\n          description: Whether UsageCategorySubMinor is Active or not. If the value is TRUE, then UsageCategorySubMinor is active, if the value is FALSE then UsageCategorySubMinor is inactive, default value is TRUE\n    OwnerType:\n      title: OwnerType\n      required:\n      - code\n      type: object\n      properties:\n        name:\n          maxLength: 128\n          minLength: 2\n          type: string\n          description: name of the\n        code:\n          maxLength: 64\n          minLength: 2\n          type: string\n          description: code of the Owner Type.\n        active:\n          type: boolean\n          description: Whether UsageCategorySubMinor is Active or not. If the value is TRUE, then UsageCategorySubMinor is active, if the value is FALSE then UsageCategorySubMinor is inactive, default value is TRUE\n    Floor:\n      title: Floor\n      required:\n      - code\n      type: object\n      properties:\n        name:\n          maxLength: 64\n          minLength: 2\n          type: string\n          description: Floor Number.\n        code:\n          maxLength: 64\n          minLength: 2\n          type: string\n          description: Code of Floor Number.\n        active:\n          type: boolean\n          description: Whether UsageCategorySubMinor is Active or not. If the value is TRUE, then UsageCategorySubMinor is active, if the value is FALSE then UsageCategorySubMinor is inactive, default value is TRUE\n    OccupancyType:\n      title: OccupancyType\n      required:\n      - code\n      type: object\n      properties:\n        name:\n          maxLength: 128\n          minLength: 2\n          type: string\n          description: name of the occupancy\n        code:\n          maxLength: 64\n          minLength: 2\n          type: string\n          description: code of the OccupancyType\n        active:\n          type: boolean\n          description: Whether OccupancyType is Active or not. If the value is TRUE, then OccupancyType is active, if the value is FALSE then OccupancyType is inactive, default value is TRUE\n    Additionalrole:\n      title: Additionalrole\n      required:\n      - tenantId\n      - roles\n      type: object\n      properties:\n        tenantId:\n          type: string\n          description: tenantid for the tenant\n        roles:\n          type: array\n          items:\n            $ref: '#/components/schemas/Primaryrole'\n          description: Roles assigned for a particular tenant - array of role codes/names\n      description: User role carries the tenant related role information for the user. A user can have multiple roles per tenant based on the need of the tenant. A user may also have multiple roles for multiple tenants.\n    Address:\n      title: Address\n      required:\n      - tenantId\n      - locality\n      type: object\n      properties:\n        tenantId:\n          type: string\n          description: Unique Identifier of the tenant to which user primarily belongs\n        doorNo:\n          type: string\n          description: House number or door number.\n        plotNo:\n          type: string\n          description: Plot number of the house.\n        id:\n          type: string\n          description: System generated id for the address\n        landmark:\n          type: string\n          description: additional landmark to help locate the address\n        city:\n          type: string\n          description: City of the address. Can be represented by the tenantid itself\n        district:\n          type: string\n          description: The district in which the property is located\n        region:\n          type: string\n          description: The Region in which the property is located\n        state:\n          type: string\n          description: The State in which the property is located\n        country:\n          type: string\n          description: The country in which the property is located\n        pincode:\n          type: string\n          description: PIN code of the address. Indian pincodes will usually be all numbers.\n        additionDetails:\n          type: string\n          description: more address detail as may be needed\n        buildingName:\n          maxLength: 64\n          minLength: 2\n          type: string\n          description: Name of the building\n        street:\n          maxLength: 64\n          minLength: 2\n          type: string\n          description: Street Name\n        locality:\n          $ref: '#/components/schemas/Locality'\n        geoLocation:\n          $ref: '#/components/schemas/GeoLocation'\n      description: Representation of a address. Indiavidual APIs may choose to extend from this using allOf if more details needed to be added in their case.\n    ApiInfo:\n      title: ApiInfo\n      type: object\n      properties:\n        id:\n          maxLength: 64\n          minLength: 2\n          type: string\n          description: The id of the API being called\n        version:\n          maxLength: 64\n          minLength: 2\n          type: string\n          description: The version of the API\n        path:\n          type: string\n          description: The URI of the API\n      description: Info of the API being called\n    AuditDetails:\n      title: AuditDetails\n      type: object\n      properties:\n        createdBy:\n          type: string\n          description: username (preferred) or userid of the user that created the object\n        lastModifiedBy:\n          type: string\n          description: username (preferred) or userid of the user that last modified the object\n        createdTime:\n          type: integer\n          description: epoch of the time object is created\n          format: int64\n        lastModifiedTime:\n          type: integer\n          description: epoch of the time object is last modified\n          format: int64\n      description: Collection of audit related fields used by most models\n    Channel:\n      title: Channel\n      enum:\n      - SYSTEM\n      - CFC_COUNTER\n      - CITIZEN\n      - DATA_ENTRY\n      - MIGRATION\n      type: string\n      description: constructionDetail details can be created from different channels Eg. System (properties created by ULB officials), CFC Counter (From citizen faciliation counters) etc. Here we are defining some known channels, there can be more client to client.\n    CreationReason:\n      title: CreationReason\n      enum:\n      - NEWPROPERTY\n      - SUBDIVISION\n      type: string\n      description: New property comes into system either property is newly constructed or existing property got sub divided. Here the reason for creation will be captured.\n    DeviceDetail:\n      title: DeviceDetail\n      type: object\n      properties:\n        id:\n          type: string\n          description: The id of the device which is trying to accessed\n        signature:\n          type: string\n          description: The electronic signature of the device\n      description: Contains information about the device used to access the api\n    Document:\n      title: Document\n      type: object\n      properties:\n        id:\n          maxLength: 64\n          type: string\n          description: system id of the Document.\n        documentType:\n          type: string\n          description: unique document type code, should be validated with document type master\n        fileStore:\n          type: string\n          description: File store reference key.\n        documentUid:\n          maxLength: 64\n          type: string\n          description: The unique id(Pancard Number,Adhar etc.) of the given Document.\n        additionalDetails:\n          type: object\n          description: Json object to capture any extra information which is not accommodated by model\n      description: This object holds list of documents attached during the transaciton for a property\n    Error:\n      title: Error\n      required:\n      - code\n      - message\n      type: object\n      properties:\n        code:\n          type: string\n          description: Error Code will be module specific error label/code to identiffy the error. All modules should also publish the Error codes with their specific localized values in localization service to ensure clients can print locale specific error messages. Example for error code would be User.NotFound to indicate User Not Found by User/Authentication service. All services must declare their possible Error Codes with brief description in the error response section of their API path.\n        message:\n          type: string\n          description: English locale message of the error code. Clients should make a separate call to get the other locale description if configured with the service. Clients may choose to cache these locale specific messages to enhance performance with a reasonable TTL (May be defined by the localization service based on tenant + module combination).\n        description:\n          type: string\n          description: Optional long description of the error to help clients take remedial action. This will not be available as part of localization service.\n        params:\n          type: array\n          items:\n            type: string\n          description: Some error messages may carry replaceable fields (say $1, $2) to provide more context to the message. E.g. Format related errors may want to indicate the actual field for which the format is invalid. Client's should use the values in the param array to replace those fields.\n      description: Error object will be returned as a part of reponse body in conjunction with ResponseHeader as part of ErrorResponse whenever the request processing status in the ResponseHeader is FAILED. HTTP return in this scenario will usually be HTTP 400.\n    GeoLocation:\n      title: GeoLocation\n      type: object\n      properties:\n        latitude:\n          type: number\n          description: latitude of the address\n        longitude:\n          type: number\n          description: longitude of the address\n        additionalDetails:\n          type: object\n          description: Json object to capture any extra information which is not accommodated by model\n    Institution:\n      title: Institution\n      type: object\n      properties:\n        id:\n          maxLength: 64\n          type: string\n          description: Unique Identifier of the Institution(UUID).\n        tenantId:\n          maxLength: 256\n          type: string\n          description: tenant id of the Property\n        type:\n          maxLength: 64\n          type: string\n          description: Institution type.\n        designation:\n          maxLength: 64\n          type: string\n          description: Designation of the person creating/updatingentity on behalf of the institution\n        nameOfAuthorizedPerson:\n          maxLength: 256\n          type: string\n          description: Name of the person who is taking action on behalf of institution\n        additionalDetails:\n          type: object\n          description: Json object to capture any extra information which is not accommodated by model\n    Locality:\n      title: Locality\n      required:\n      - code\n      - name\n      type: object\n      properties:\n        code:\n          type: string\n          description: code of the boundary.\n        name:\n          type: string\n          description: name of the boundary.\n        label:\n          type: string\n          description: localized label for the boundry.\n        latitude:\n          type: string\n          description: latitude of the boundary.\n        longitude:\n          type: string\n          description: longitude of the boundary.\n        children:\n          type: array\n          items:\n            $ref: '#/components/schemas/Locality'\n          description: ''\n        materializedPath:\n          type: string\n          description: materialized path of the boundary - this would be of the format tenantid.[code] from parentt till teh current boundary\n    OccupancyType2:\n      title: OccupancyType2\n      enum:\n      - OWNER\n      - TENANT\n      type: string\n      description: Value denoting if the unit is rented or occupied by owner\n    Primaryrole:\n      title: Primaryrole\n      required:\n      - code\n      - tenantId\n      type: object\n      properties:\n        name:\n          maxLength: 64\n          type: string\n          description: Unique name of the role\n        code:\n          maxLength: 64\n          type: string\n          description: Unique code of the role\n        tenantId:\n          maxLength: 64\n          type: string\n          description: The tenantId for which the role is available\n        description:\n          type: string\n          description: brief description of the role\n      description: minimal representation of the Roles in the system to be carried along in UserInfo with RequestHeader meta data. Actual authorization service to extend this to have more role related attributes\n    Relationship:\n      title: Relationship\n      enum:\n      - FATHER\n      - HUSBAND\n      type: string\n      description: The relationship of gaurdian.\n    RequestHeader:\n      title: RequestHeader\n      required:\n      - ts\n      - action\n      - msgId\n      type: object\n      properties:\n        apiInfo:\n          $ref: '#/components/schemas/ApiInfo'\n        deviceDetail:\n          $ref: '#/components/schemas/DeviceDetail'\n        ts:\n          type: integer\n          description: time in epoch\n          format: int64\n        action:\n          maxLength: 32\n          type: string\n          description: API action to be performed like _create, _update, _search (denoting POST, PUT, GET) or _oauth etc\n        key:\n          maxLength: 256\n          type: string\n          description: API key (API key provided to the caller in case of server to server communication)\n        msgId:\n          maxLength: 256\n          type: string\n          description: Unique request message id from the caller\n        requesterId:\n          maxLength: 256\n          type: string\n          description: UserId of the user calling\n        authToken:\n          type: string\n          description: //session/jwt/saml token/oauth token - the usual value that would go into HTTP bearer token\n        userInfo:\n          $ref: '#/components/schemas/UserInfo'\n        correlationId:\n          type: string\n        signature:\n          type: string\n          description: Hash describing the current RequestHeader\n      description: RequestHeader should be used to carry meta information about the requests to the server as described in the fields below. All eGov APIs will use requestHeader as a part of the request body to carry this meta information. Some of this information will be returned back from the server as part of the ResponseHeader in the response body to ensure correlation.\n    ResponseHeader:\n      title: ResponseHeader\n      required:\n      - resMsgId\n      - msgId\n      - status\n      type: object\n      properties:\n        ts:\n          type: integer\n          description: response time in epoch\n          format: int64\n        resMsgId:\n          maxLength: 256\n          type: string\n          description: unique response message id (UUID) - will usually be the correlation id from the server\n        msgId:\n          maxLength: 256\n          type: string\n          description: message id of the request\n        status:\n          $ref: '#/components/schemas/Status2'\n        signature:\n          type: string\n          description: Hash describing the current ResponseHeader\n        error:\n          $ref: '#/components/schemas/Error'\n        information:\n          type: object\n          description: Additional information from API\n        debug:\n          type: object\n          description: Debug information when requested\n        additionalInfo:\n          type: object\n          description: Any additional information if required e.g. status url (to find out the current status of an asynchronous processing response), additional links to perform special functions like file uploads etc.\n      description: ResponseHeader should be used to carry metadata information about the response from the server. apiId, ver and msgId in ResponseHeader should always correspond to the same values in respective request's RequestHeader.\n    Source:\n      title: Source\n      enum:\n      - MUNICIPAL_RECORDS\n      - FIELD_SURVEY\n      type: string\n      description: Source of a constructionDetail data. The constructionDetail will be created in a system based on the data avaialble in their manual records or during field survey. There can be more from client to client.\n    Status:\n      title: Status\n      enum:\n      - ACTIVE\n      - INACTIVE\n      type: string\n      description: status of the Property\n    Status2:\n      title: Status2\n      enum:\n      - COMPLETED\n      - ACCEPTED\n      - FAILED\n      type: string\n      description: status of request processing\n    UserInfo:\n      title: UserInfo\n      required:\n      - tenantId\n      - userName\n      - primaryrole\n      type: object\n      properties:\n        tenantId:\n          type: string\n          description: Unique Identifier of the tenant to which user primarily belongs\n        uuid:\n          type: string\n          description: System Generated User id of the authenticated user.\n        userName:\n          type: string\n          description: Unique user name of the authenticated user\n        password:\n          type: string\n          description: password of the user.\n        idToken:\n          type: string\n          description: This will be the OTP.\n        mobile:\n          type: string\n          description: mobile number of the autheticated user\n        email:\n          type: string\n          description: email address of the authenticated user\n        primaryrole:\n          type: array\n          items:\n            $ref: '#/components/schemas/Primaryrole'\n          description: List of all the roles for the primary tenant\n        additionalroles:\n          type: array\n          items:\n            $ref: '#/components/schemas/Additionalrole'\n          description: array of additional tenantids authorized for the authenticated user\n      description: This is acting ID token of the authenticated user on the server. Any value provided by the clients will be ignored and actual user based on authtoken will be used on the server.\ntags:\n- name: Property\n  description: ''\n",
			"canonicalURL": "/github.com/egovernments/municipal-services@61cf15d768b4bb5cc3ebf770789b1fefd5367103/-/blob/docs/property-services/property-services.yml",
			"externalURLs": [
				{
					"url": "https://github.com/egovernments/municipal-services/blob/61cf15d768b4bb5cc3ebf770789b1fefd5367103/docs/property-services/property-services.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/property/_cancel\": post: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}