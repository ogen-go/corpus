{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/grycap/im"
		},
		"file": {
			"name": "swagger_api.yaml",
			"size": 0,
			"path": "doc/swagger_api.yaml",
			"byteSize": 46338,
			"content": "openapi: 3.0.0\n\ninfo:\n  description: Infrastructure Manager (IM) REST API.\n  version: 1.11.0\n  title: Infrastructure Manager (IM) REST API\n  contact:\n    email: products@grycap.upv.es\n  license:\n    name: GPL 3.0\n    url: 'https://www.gnu.org/licenses/gpl-3.0.en.html'\n\ntags:\n  - name: infrastructures\n    description: Manages Virtual Infrastructures.\n  - name: version\n    description: Get IM server version.\n  - name: clouds\n    description: Get cloud information.\n\npaths:\n\n  /version:\n    get:\n      tags:\n        - version\n      summary: Get IM server version.\n      description: Get IM server version.\n      operationId: GetVersion\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: 1.10.0\n        '400':\n          description: Invalid status value\n\n  /infrastructures:\n    get:\n      tags:\n        - infrastructures\n      summary: List user infrastructures.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Return a list of URIs referencing the infrastructures associated to the\n        IM user.\n      operationId: GetInfrastructures\n      parameters:\n        - name: filter\n          in: query\n          description: \u003e-\n            The filter parameter is optional and it is a regular expression\n            (python format) to search in the RADL or TOSCA used to create the\n            infrastructure. If not specified all the user infrastructures will\n            be returned.          \n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/uri-list:\n              examples:\n                response:\n                  value: |\n                    http://server.com:8800/infrastructures/inf_id1\n                    http://server.com:8800/infrastructures/inf_id2\n            application/json:\n              examples:\n                response:\n                  value: |\n                    {\n                      \"uri-list\": [\n                        {\"uri\": \"http://server.com:8800/infrastructures/inf_id1\"},\n                        {\"uri\": \"http://server.com:8800/infrastructures/inf_id2\"}\n                      ]\n                    }\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n    post:\n      tags:\n        - infrastructures\n      summary: Creates an infrastructures.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Create and configure an infrastructure with the requirements specified\n        in RADL or TOSCA document.\n      operationId: CreateInfrastructure\n      parameters:\n        - name: async\n          in: query\n          description: \u003e-\n            The async parameter is optional and is a flag to specify if the call\n            will not wait the VMs to be created. \n          required: false\n          schema:\n            type: string\n            enum:\n              - 'yes'\n              - 'no'\n              - 'true'\n              - 'false'\n              - '0'\n              - '1'\n            default: 'false'\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n              example: |\n                network net (outbound = 'yes')\n                system node (\n                   cpu.count \u003e= 2 and\n                   memory.size \u003e= 2G and\n                   net_interface.0.connection = 'net' and\n                   disk.0.image.url = 'one://someserver.com/123'\n                )\n                deploy node 1\n          application/json:\n            schema:\n              type: string\n              example:\n                - class: network\n                  id: net\n                  outbound: \"yes\"\n                - class: system\n                  id: node\n                  cpu.count_min: 2\n                  memory.size_min: 2147483648\n                  net_interface.0.connection: net\n                  disk.0.image.url: \"one://someserver.com/123\"\n                - class: deploy\n                  system: wn\n                  vm_number: 1\n          text/yaml:\n            schema:\n              type: string\n              example:\n                tosca_definitions_version: tosca_simple_yaml_1_0\n                topology_template:\n                  node_templates:\n                    web_server:\n                      type: tosca.nodes.Compute\n                      capabilities:\n                        host:\n                          properties:\n                            num_cpus: 1\n                            mem_size: 1 GB\n                        os:\n                          properties:\n                            type: linux \n                            distribution: CentOS\n                            version: 8\n        description: RADL (in plain RADL or in JSON formats) or TOSCA document (YAML).\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/uri-list:\n              examples:\n                response:\n                  value: 'http://server.com:8800/infrastructures/inf_id1'\n            application/json:\n              examples:\n                response:\n                  value: |\n                    {\n                      \"uri\": \"http://server.com:8800/infrastructures/inf_id1\"\n                    }\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n    put:\n      tags:\n        - infrastructures\n      summary: Import an infrastructure.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Take control of the infrastructure serialized in in the body and return\n        the ID associated in the server. (See GET\n        /infrastructures/{infId}/data).\n      operationId: Importfrastructure\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n        description: \u003e-\n          JSON data of the infrastructure obtained with GET\n          /infrastructures/{infId}/data.\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/uri-list:\n              examples:\n                response:\n                  value: 'http://server.com:8800/infrastructures/inf_id1'\n            application/json:\n              examples:\n                response:\n                  value: |\n                    {\n                      \"uri\": \"http://server.com:8800/infrastructures/inf_id1\"\n                    }\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '415':\n          description: Unsupported Media type\n\n  /infrastructures/{InfId}:\n    get:\n      tags:\n        - infrastructures\n      summary: List of VMs in a infrastructure.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Return a list of URIs referencing the virtual machines associated to the\n        infrastructure with ID InfId\n      operationId: GetVMList\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/uri-list:\n              examples:\n                response:\n                  value: |\n                    http://server.com:8800/infrastructures/inf_id/vms/0\n                    http://server.com:8800/infrastructures/inf_id/vms/1\n            application/json:\n              examples:\n                response:\n                  value: |\n                    {\n                      \"uri-list\": [\n                        {\"uri\": \"http://server.com:8800/infrastructures/inf_id/vms/0\"},\n                        {\"uri\": \"http://server.com:8800/infrastructures/inf_id/vms/1\"}\n                      ]\n                    }\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n    post:\n      tags:\n        - infrastructures\n      summary: Add resources to an infrastructures.\n      security:\n        - IMAuth: []\n      description: \u003e\n        Add the resources specified in the body contents (in TOSCA, RADL plain\n        or in JSON formats) to the infrastructure with ID infId.\n\n        In case of using RADL as input the deploy instructions in the radl must\n        refer to systems already defined. If all the systems defined in radl are\n        new, they will be added. Otherwise the new systems defined will be\n        ignored. All the systems specified in the deploy must be specified in\n        the radl. If they has been already defined only a reference is needed.\n        This is a simple example to deploy one new VM from an alreay defined\n        system:\n\n        Using TOSCA as input this method can be used to add or remove resources\n        depending on the number of resources specified in the new TOSCA document\n        sent. If new nodes are added in the body compared with the last TOSCA\n        sent to the IM, these new nodes will be added. For example an\n        infrastructure has been created with this TOSCA document:\n        [tosca_create.yml](https://github.com/grycap/im/blob/master/test/files/tosca_create.yml)\n        it launches one DB server and one Web server. If this TOSCA document is\n        sent as body of this POST function:\n        [tosca_add.yml](https://github.com/grycap/im/blob/master/test/files/tosca_add.yml),\n        a new web server will be added as the number of web servers has been\n        increased to two (count parameter of scalable capability). However if\n        this document is sent after the node addition (the number of web servers\n        will be two):\n        [tosca_remove.yml](https://github.com/grycap/im/blob/master/test/files/tosca_remove.yml)\n        , a web server (the VM with the ID 2 as specified in the removal_list\n        parameter) will be removed.      \n      operationId: AddResources\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: context\n          in: query\n          description: \u003e-\n            The context parameter is optional and is a flag to specify if the\n            contextualization step will be launched just after the VM addition.\n          required: false\n          schema:\n            type: string\n            enum:\n              - 'yes'\n              - 'no'\n              - 'true'\n              - 'false'\n              - '0'\n              - '1'\n            default: 'true'\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n              example: |\n                network net\n                system node\n                deploy node 1\n          application/json:\n            schema:\n              type: string\n              example:\n                - class: network\n                  id: net\n                  reference: true\n                - class: system\n                  id: node\n                  reference: true\n                - class: deploy\n                  system: wn\n                  vm_number: 1\n          text/yaml:\n            schema:\n              type: string\n              example:\n                tosca_definitions_version: tosca_simple_yaml_1_0\n                topology_template:\n                  node_templates:\n                    web_server:\n                      type: tosca.nodes.Compute\n                      capabilities:\n                        host:\n                          properties:\n                            num_cpus: 1\n                            mem_size: 1 GB\n                        os:\n                          properties:\n                            type: linux \n                            distribution: CentOS\n                            version: 8              \n        description: RADL (in plain RADL or in JSON formats) or TOSCA document (YAML).\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/uri-list:\n              examples:\n                response:\n                  value: |\n                    http://server.com:8800/infrastructures/inf_id/vms/0\n                    http://server.com:8800/infrastructures/inf_id/vms/1\n            application/json:\n              examples:\n                response:\n                  value: |\n                    {\n                      \"uri-list\": [\n                        {\"uri\": \"http://server.com:8800/infrastructures/inf_id/vms/0\"},\n                        {\"uri\": \"http://server.com:8800/infrastructures/inf_id/vms/1\"}\n                      ]\n                    }\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '415':\n          description: Unsupported Media type\n    delete:\n      tags:\n        - infrastructures\n      summary: Delete an infrastructure.\n      security:\n        - IMAuth: []\n      description: Undeploy the virtual machines associated to the infrastructure with ID.\n      operationId: DestroyInfrastructure\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: force\n          in: query\n          description: \u003e-\n            The force parameter is optional and is a flag to specify that the\n            infra will be from the IM although not all resources are deleted.\n          required: false\n          schema:\n            type: string\n            enum:\n              - 'yes'\n              - 'no'\n              - 'true'\n              - 'false'\n              - '0'\n              - '1'\n            default: 'false'\n        - name: async\n          in: query\n          description: \u003e-\n            The async parameter is optional and is a flag to specify if the call\n            will not wait the infrastructure to be deleted. \n          required: false\n          schema:\n            type: string\n            enum:\n              - 'yes'\n              - 'no'\n              - 'true'\n              - 'false'\n              - '0'\n              - '1'\n            default: 'false'\n      responses:\n        '200':\n          description: successful operation\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/state:\n    get:\n      tags:\n        - infrastructures\n      summary: Get infrastructure state.\n      security:\n        - IMAuth: []\n      description: Return a the state of the infrastructure with ID InfId.\n      operationId: GetInfrastructureState\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InfrastructureState'\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/outputs:\n    get:\n      tags:\n        - infrastructures\n      summary: Get the infrastructure outputs.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        In case of TOSCA documents it will return a JSON object with the outputs\n        of the TOSCA document.\n      operationId: GetInfrastructureOutpus\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              examples:\n                response:\n                  value: |\n                    {\n                      \"output_name1\": \"output_value1\",\n                      \"output_name2\": \"output_value2\",\n                    }\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/contmsg:\n    get:\n      tags:\n        - infrastructures\n      summary: Get a infrastructure contextualization message.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Return a string with the contextualization message. In case of\n        headeronly flag is set to ‘yes’, ‘true’ or ‘1’ only the initial part of\n        the infrastructure contextualization log will be returned (without any\n        VM contextualization log).\n      operationId: GetInfrastructureContmsg\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: headeronly\n          in: query\n          description: \u003e-\n            In case of headeronly flag is set to `yes`, `true` or `1` only the\n            initial part of the infrastructure contextualization log will be\n            returned (without any VM contextualization log).\n          required: false\n          schema:\n            type: string\n            enum:\n              - 'yes'\n              - 'no'\n              - 'true'\n              - 'false'\n              - '0'\n              - '1'\n            default: 'false'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/plain:\n              examples:\n                response:\n                  value: \u003e\n                    2019-12-11 11:08:14.574891: Select master VM\n\n                    2019-12-11 11:08:14.576685: Wait master VM to boot\n\n                    2019-12-11 11:08:14.577905: Wait master VM to have the SSH\n                    active.\n            application/json:\n              examples:\n                response:\n                  value:\n                      contmsg: |\n                        2019-12-11 11:08:14.574891: Select master VM\n                        2019-12-11 11:08:14.576685: Wait master VM to boot\n                        2019-12-11 11:08:14.577905: Wait master VM to have the SSH active.\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/data:\n    get:\n      tags:\n        - infrastructures\n      summary: Export an infrastructure.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Return the serialization of the infrastructure with ID InfId. This\n        function is useful to transfer the control of an infrastructure to other\n        IM server (See PUT /infrastructures). In case of delete flag is set to\n        ‘yes’, ‘true’ or ‘1’ the data not only will be exported but also the\n        infrastructure will be set deleted (the virtual infrastructure will not\n        be modified).\n      operationId: GetInfrastructureData\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: delete\n          in: query\n          description: \u003e-\n            In case of delete flag is set to ‘yes’, ‘true’ or ‘1’ the data not\n            only will be exported but also the infrastructure will be set\n            deleted (the virtual infrastructure will not be modified).\n          required: false\n          schema:\n            type: string\n            enum:\n              - 'yes'\n              - 'no'\n              - 'true'\n              - 'false'\n              - '0'\n              - '1'\n            default: 'false'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    vm_list: []\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/radl:\n    get:\n      tags:\n        - infrastructures\n      summary: Get the infrastructure RADL used to create it.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Return a string with the original specified RADL of the infrastructure\n        with ID InfId.\n      operationId: GetInfrastructureRADL\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/plain:\n              examples:\n                response:\n                  value: |\n                    network net (outbound = 'yes')\n                    system node (\n                      ...\n                    )\n            application/json:\n              examples:\n                response:\n                  value:\n                    radl: \"network net (outbound = 'yes')\\nsystem node ( ... )\"\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/tosca:\n    get:\n      tags:\n        - infrastructures\n      summary: Get the TOSCA representation of the infrastructure.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Return a string with the TOSCA representation of the infrastructure with\n        ID InfId.\n      operationId: GetInfrastructureTOSCA\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    tosca: |\n                      tosca_definitions_version: tosca_simple_yaml_1_0\n                      description: Some TOSCA template\n                      ...\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/authorization:\n    post:\n      tags:\n        - infrastructures\n      summary: Change the authorization data of the infrastructure.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Change the authorization data of the infrastructure with ID InfId.\n        The body of the request contains the new authorization data in json\n        format. It can be a pair username-password or a token. In case of using\n        a token it must be a valid access token.\n      operationId: ChangeInfrastructureAuth\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: overwrite\n          in: query\n          description: \u003e-\n            The overwrite parameter is optional and is a flag to specify if the\n            authorization data will be overwrited or will be appended.\n          required: false\n          schema:\n            type: string\n            enum:\n              - 'yes'\n              - 'no'\n              - 'true'\n              - 'false'\n              - '0'\n              - '1'\n            default: 'false'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - type: object\n                  properties:\n                    username:\n                      type: string\n                      example: new_user\n                    password:\n                      type: string\n                      example: new_password\n                - type: object\n                  properties:\n                    token:\n                      type: string\n                      example: acces_token_new_user\n                \n      responses:\n        '200':\n          description: successful operation\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/stop:\n    put:\n      tags:\n        - infrastructures\n      summary: Stop an infrastructure.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Perform the stop operation in all the virtual machines in the\n        infrastructure.\n      operationId: StopInfrastructure\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/start:\n    put:\n      tags:\n        - infrastructures\n      summary: Start an infrastructure.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Perform the start operation in all the (previuosly stopped) virtual\n        machines in the infrastructure.\n      operationId: StartInfrastructure\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/reconfigure:\n    put:\n      tags:\n        - infrastructures\n      summary: Reconfigure an infrastructure.\n      security:\n        - IMAuth: []\n      description: Re-start the contextualization process of the infrastructure.\n      operationId: ReconfigureInfrastructure\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: vm_list\n          in: query\n          description: \u003e-\n            The vm_list parameter is optional and is a coma separated list of\n            IDs of the VMs to reconfigure. If not specified all the VMs will be\n            reconfigured\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n              example: |\n                configure node (\n                @begin\n                ---\n                  - tasks:\n                      - debug: msg=\"Some message\"\n                @end\n                )\n          application/json:\n            schema:\n              type: string\n              example:\n                - class: configure\n                  id: node\n                  recipes: |\n                    - tasks:\n                        - debug: msg=\"Some message\"\n        description: \u003e-\n          Optional RADL (in plain RADL or in JSON formats) with new\n          configuration recipes. If not specified the current configuration\n          recipes will be executed again.\n      responses:\n        '200':\n          description: successful operation\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '415':\n          description: Unsupported Media type\n\n  /infrastructures/{InfId}/vms/{VMId}:\n    get:\n      tags:\n        - infrastructures\n      summary: Get VM info.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Return information about the virtual machine with ID VMId associated to\n        the infrastructure with ID InfId\n      operationId: GetVMInfo\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: VMId\n          in: path\n          description: The ID of the specific VM.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: |\n                  network net (outbound = 'yes')\n                  system node (\n                     cpu.count \u003e= 2 and\n                     memory.size \u003e= 2G and\n                     net_interface.0.ip = '8.8.8.8' and\n                     net_interface.0.connection = 'net' and\n                     disk.0.image.url = 'one://someserver.com/123'\n                  )\n            application/json:\n              schema:\n                type: string\n              example:\n                - class: network\n                  id: net\n                  outbound: \"yes\"\n                - class: system\n                  id: node\n                  cpu.count_min: 2\n                  memory.size_min: 2147483648\n                  net_interface.0.ip: 8.8.8.8\n                  net_interface.0.connection: net\n                  disk.0.image.url: \"one://someserver.com/123\"\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n    put:\n      tags:\n        - infrastructures\n      summary: Alter VM.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Change the features of the virtual machine with ID VMId in the\n        infrastructure with with ID infId.\n      operationId: AlterVM\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: VMId\n          in: path\n          description: The ID of the specific VM.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n              example: |\n                system node (\n                   memory.size \u003e= 4G\n                )\n          application/json:\n            schema:\n              type: string\n              example:\n                - class: system\n                  id: node\n                  memory.size_min: 4294967296\n        description: RADL (in plain RADL or in JSON formats).\n        required: true\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: |\n                  network net (outbound = 'yes')\n                  system node (\n                     cpu.count \u003e= 2 and\n                     memory.size \u003e= 4G and\n                     net_interface.0.ip = '8.8.8.8' and\n                     net_interface.0.connection = 'net' and\n                     disk.0.image.url = 'one://someserver.com/123'\n                  )\n            application/json:\n              schema:\n                type: string\n                example:\n                - class: network\n                  id: net\n                  outbound: \"yes\"\n                - class: system\n                  id: node\n                  cpu.count_min: 2\n                  memory.size_min: 4294967296\n                  net_interface.0.ip: 8.8.8.8\n                  net_interface.0.connection: net\n                  disk.0.image.url: \"one://someserver.com/123\"\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '415':\n          description: Unsupported Media type\n    delete:\n      tags:\n        - infrastructures\n      summary: Delete a VM.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Undeploy the virtual machine VMId associated to the infrastructure with\n        ID infId\n      operationId: DestroyVM\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: VMId\n          in: path\n          description: The ID of the specific VM.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/vms/{VMId}/contmsg:\n    get:\n      tags:\n        - infrastructures\n      summary: Get a VM contextualization message.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Return a string with the contextualization message associated to the\n        virtual machine with ID VMId in the infrastructure with with ID infId\n      operationId: GetVMContMsg\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: VMId\n          in: path\n          description: The ID of the specific VM.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/plain:\n              examples:\n                response:\n                  value: |\n                    Launch task: basic\n                    ...\n            application/json:\n              examples:\n                response:\n                  value:\n                    contmsg: |\n                      Launch task: basic\n                      ...\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/vms/{VMId}/{Property}:\n    get:\n      tags:\n        - infrastructures\n      summary: Get a VM property.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Return a property associated to the virtual machine with ID VMId in the\n        infrastructure with with ID infId\n      operationId: GetVMProperty\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: VMId\n          in: path\n          description: The ID of the specific VM.\n          required: true\n          schema:\n            type: string\n        - name: Property\n          in: path\n          description: The specific VM RADL property to get.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/plain:\n              examples:\n                response:\n                  value: property_value\n            application/json:\n              examples:\n                response:\n                  value:\n                    property_name: property_value\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/vms/{VMId}/stop:\n    put:\n      tags:\n        - infrastructures\n      summary: Stop a VM.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Perform the stop operation in the virtual machine VMId of the\n        infrastructure InfId. The default behavior is suspending the VM if this\n        operation is not available the VM will be stopped.\n      operationId: StopVM\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: VMId\n          in: path\n          description: The ID of the specific VM.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/vms/{VMId}/start:\n    put:\n      tags:\n        - infrastructures\n      summary: Start a VM.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Perform the start operation in the (previuosly stopped) virtual machine\n        VMId of the infrastructure InfId.\n      operationId: StartVM\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: VMId\n          in: path\n          description: The ID of the specific VM.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/vms/{VMId}/reboot:\n    put:\n      tags:\n        - infrastructures\n      summary: Reboot a VM.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Perform the reboot operation in the virtual machine VMId of the\n        infrastructure InfId.\n      operationId: RebootVM\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: VMId\n          in: path\n          description: The ID of the specific VM.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /infrastructures/{InfId}/vms/{VMId}/disks/{diskNum}/snapshot:\n    put:\n      tags:\n        - infrastructures\n      summary: Create a disk snapshot.\n      security:\n        - IMAuth: []\n      description: \u003e-\n        Create a snapshot of the specified diskNum in the VM VMId of the\n        infrastructure with ID InfId and returns the image url of the new\n        created image in IM format.\n      operationId: CreateSnapShot\n      parameters:\n        - name: InfId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: VMId\n          in: path\n          description: The ID of the specific VM.\n          required: true\n          schema:\n            type: string\n        - name: diskNum\n          in: path\n          description: The number of the specific disk.\n          required: true\n          schema:\n            type: string\n        - name: image_name\n          in: query\n          description: The name to assing to the created snapshot.\n          required: true\n          schema:\n            type: string\n        - name: auto_delete\n          in: query\n          description: \u003e-\n            The auto_delete flag specifies that the snapshot will be deleted\n            when the infrastructure is destroyed\n          required: false\n          schema:\n            type: string\n            enum:\n              - 'yes'\n              - 'no'\n              - 'true'\n              - 'false'\n              - '0'\n              - '1'\n            default: 'false'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: 'one://server.com/image_id'\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n\n  /clouds/{CloudId}/images:\n    get:\n      tags:\n        - clouds\n      summary: Get the list of available images in the specified cloud provider.\n      security:\n        - IMAuth: []\n      description: \u003e\n        Return a list of URIs referencing the available images in the specified\n        cloud provider. The id cloudId is relative to the id field in the\n        AUTHORIZATION header.\n      operationId: GetCloudImages\n      parameters:\n        - name: CloudId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n        - name: filters\n          in: query\n          description: \u003e-\n            The optional filters parameter enables filterin the list of images.\n            It is a comma separated list of keypair values\n            ('key1=val1,key2=value2').\n\n            This field is cloud provider specific (e.g. 'region=region_name' for\n            Amazon EC2, GCE or Azure).\n          required: false\n          schema:\n            type: string\n            default: ''\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    images:\n                      - uri: ost://hostname/image-id1\n                        name: Image Name1\n                      - uri: ost://hostname/image-id2\n                        name: Image Name2\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n\n  /clouds/{CloudId}/quotas:\n    get:\n      tags:\n        - clouds\n      summary: \u003e-\n        Get available and used resources for the current user in the specified\n        cloud provider.\n      security:\n        - IMAuth: []\n      description: \u003e\n        Return a dictionary with available and used resources for the current\n        user in the specified cloud provider. The id cloudId is relative to the\n        id field in the AUTHORIZATION header.\n      operationId: GetCloudQuotas\n      parameters:\n        - name: CloudId\n          in: path\n          description: The ID of the specific infrastructure.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              examples:\n                response:\n                  value:\n                    quotas:\n                      cores:\n                        used: 1\n                        limit: 10\n                      ram:\n                        used: 1\n                        limit: 10\n                      instances:\n                        used: 1\n                        limit: 10\n                      floating_ips:\n                        used: 1\n                        limit: 10\n                      security_groups:\n                        used: 1\n                        limit: 10\n        '400':\n          description: Invalid status value\n        '401':\n          description: Unauthorized\n\nexternalDocs:\n  description: Find out more about IM\n  url: 'http://www.grycap.upv.es/im'\nservers:\n  - url: 'https://appsgrycap.i3m.upv.es:31443/im'\ncomponents:\n  schemas:\n    State:\n      type: string\n      enum:\n        - pending\n        - running\n        - configured\n        - unconfigured\n        - stopped\n        - 'off'\n        - failed\n        - unknown\n        - deleting\n      title: State\n      example: running\n    InfrastructureState:\n      type: object\n      properties:\n        state:\n          $ref: '#/components/schemas/State'\n        vm_states:\n          type: array\n          items:\n            $ref: '#/components/schemas/State'\n          example:\n            - running\n            - running\n      title: InfrastructureState\n\n  securitySchemes:\n    IMAuth:\n      type: apiKey\n      in: header\n      name: Authorization\n      description: \u003e-\n        The Authentication header must provide the content of the\n        [Authorization\n        File](https://imdocs.readthedocs.io/en/latest/client.html#auth-file),\n        but putting all the elements in one line using “\\n” as separator.\n",
			"canonicalURL": "/github.com/grycap/im@b56eeeff4f52a4085dc7581929b51a1efd3b67e5/-/blob/doc/swagger_api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/grycap/im/blob/b56eeeff4f52a4085dc7581929b51a1efd3b67e5/doc/swagger_api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/infrastructures/{InfId}/radl\": get: responses: 200: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema",
		"unsupported content types"
	]
}