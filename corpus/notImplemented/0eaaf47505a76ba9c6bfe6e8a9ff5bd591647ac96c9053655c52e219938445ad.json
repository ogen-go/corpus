{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/albar965/littlenavmap"
		},
		"file": {
			"name": "webapi.yaml",
			"size": 0,
			"path": "web/webapi.yaml",
			"byteSize": 20678,
			"content": "openapi: 3.0.1\ninfo:\n  title: Little Navmap Web API\n  description: ''\n  version: 1.0.0\nservers:\n- url: http://localhost:8965/api\ntags:\n- name: Airport\n  description: AirportActionsController\n- name: Map\n  description: MapActionsController\n- name: Sim\n  description: SimActionsController\n- name: UI\n  description: UiActionsController\npaths:\n  /airport/info:\n    get:\n      tags:\n      - Airport\n      summary: Get airport information by ICAO code\n      operationId: airportInfoAction\n      parameters:\n      - name: ident\n        required: true\n        in: query\n        description: Airport ICAO code\n        schema:\n          type: string\n          example: eddm\n      responses:\n        200:\n          description: Airport information\n          content: \n            application/json:\n              schema: \n                $ref: '#/components/schemas/AirportInfoResponse'                 \n        400:\n          description: Airport not found\n          content: \n            text/plain:\n              schema: \n                type: string\n                example: \"Airport not found\" \n  /map/image:\n    get:\n      tags:\n      - Map\n      summary: Get map image by lat/lon rectangle\n      operationId: mapImageAction\n      parameters:\n      - name: toplat\n        required: true\n        in: query\n        description: Top latitude\n        schema:\n          type: number\n          example: 10\n      - name: bottomlat\n        required: true\n        in: query\n        description: Bottom latitude\n        schema:\n          type: number\n          example: 15\n      - name: leftlon\n        required: true\n        in: query\n        description: Left longitude\n        schema:\n          type: number\n          example: 40\n      - name: rightlon\n        required: true\n        in: query\n        description: Right longitude\n        schema:\n          type: number\n          example: 45\n      - name: width\n        required: true\n        in: query\n        description: Width in pixels\n        schema:\n          type: number\n          example: 256\n      - name: height\n        required: true\n        in: query\n        description: Height in pixels\n        schema:\n          type: number\n          example: 256\n      - name: quality\n        required: true\n        in: query\n        description: Image quality\n        schema:\n          type: number\n          example: 80\n      - name: format\n        required: true\n        in: query\n        description: Image format\n        schema:\n          type: string\n          enum: [png, jpg]\n      - name: detailfactor\n        required: true\n        in: query\n        description: Detail factor\n        schema:\n          type: integer\n          minimum: 8\n          maximum: 15\n          example: 10\n      responses:\n        200:\n          description: Resulting map image\n          content: \n             image/png:\n              schema:\n                type: string\n                format: binary\n  /map/features:\n    get:\n      tags:\n      - Map\n      summary: Get features by lat/lon rectangle\n      operationId: mapFeaturesAction\n      parameters:\n      - name: toplat\n        required: true\n        in: query\n        description: Top latitude\n        schema:\n          type: number\n          example: 10\n      - name: bottomlat\n        required: true\n        in: query\n        description: Bottom latitude\n        schema:\n          type: number\n          example: 15\n      - name: leftlon\n        required: true\n        in: query\n        description: Left longitude\n        schema:\n          type: number\n          example: 40\n      - name: rightlon\n        required: true\n        in: query\n        description: Right longitude\n        schema:\n          type: number\n          example: 45\n      - name: detailfactor\n        required: true\n        in: query\n        description: Detail factor\n        schema:\n          type: integer\n          minimum: 8\n          maximum: 15\n          example: 10\n      responses:\n        200:\n          description: map feature list\n          content: \n            application/json:\n              schema: \n                $ref: '#/components/schemas/MapFeaturesResponse'\n  /map/feature:\n    get:\n      tags:\n      - Map\n      summary: Get feature by map object id and object type id\n      operationId: mapFeatureAction\n      parameters:\n      - name: object_id\n        required: true\n        in: query\n        description: the map object id\n        schema:\n          type: number\n          example: 10\n      - name: type_id\n        required: true\n        in: query\n        description: the map object type id\n        schema:\n          type: number\n          example: 1\n      responses:\n        200:\n          description: map feature list\n          content: \n            application/json:\n              schema: \n                $ref: '#/components/schemas/MapFeaturesResponse'\n  /sim/info:\n    get:\n      tags:\n      - Sim\n      summary: Get active simulation information\n      operationId: simInfoAction\n      responses:\n        200:\n          description: Simulation information\n          content: \n            application/json:\n              schema: \n                $ref: '#/components/schemas/SimInfoResponse'\n  /ui/info:\n    get:\n      tags:\n      - UI\n      summary: Get UI information\n      operationId: uiInfoAction\n      responses:\n        200:\n          description: UI information\n          content: \n            application/json:\n              schema: \n                $ref: '#/components/schemas/UiInfoResponse'\ncomponents:\n  schemas:\n    Coordinates:\n      type: object\n      description: Common coordinates type\n      properties:\n        lat:\n          type: number\n        lon:\n          type: number\n    AirportInfoResponse:\n      type: object\n      properties:\n        activeDateTime:\n          description: The active LNM time\n          example: \"Fr Jul 9 19:54:59 2021 GMT\"\n          type: string\n          format: date-time\n        activeDateTimeSource:\n          description: The active LNM time source\n          example:\n            - \"simulator date\"\n            - \"real date\"\n          type: string\n        city:\n          description: The airports city\n          example: \"München\"\n          type: string\n        closed:\n          description: airport closed\n          type: boolean\n        com: \n          description: The airports available COM frequencies\n          type: object\n          properties:\n            ATIS:\n              type: number\n              description: Only set if available. (Format 000,000 MHz)\n              example: \"123450\"\n            Tower:\n              type: number\n              description: Only set if available. (Format 000,000 MHz)\n              example: \"123450\"\n            AWOS:\n              type: number\n              description: Only set if available. (Format 000,000 MHz)\n              example: \"123450\"\n            ASOS:\n              type: number\n              description: Only set if available. (Format 000,000 MHz)\n              example: \"123450\"\n            UNICOM:\n              type: number\n              description: Only set if available. (Format 000,000 MHz)\n              example: \"123450\"\n        country: \n          description: The airports country\n          type: string\n          example: \"\"\n        elevation: \n          description: The airports elevation in feet\n          type: number\n          example: \"1468\"\n        facilities:\n          description: Array of airport facilities/features\n          type: array \n          items:\n            type: string\n            example:\n              - \"Aprons\"\n              - \"Taxiways\"\n              - \"ILS\"\n              - \"Avgas\"\n              - \"Jetfuel\"\n        iata: \n          description: The airports IATA code\n          type: string\n          example: \"\"\n        icao: \n          description: The airports ICAO code\n          type: string\n          example: \"\"\n        ident: \n          description: The airports ident (ICAO)\n          type: string\n          example: \"EDDM\"\n        longestRunwayHeading: \n          description: The airports longest runway heading\n          type: string\n          example: \"81°M, 261°M\"\n        longestRunwayLength: \n          description: The airports longest runway length in metres\n          type: number\n          example: \"13106\"\n        longestRunwaySurface: \n          description: The airports longest runway surface\n          type: string\n          example:  \"CE\"\n        longestRunwayWidth: \n          description: The airports longest runway width in metres\n          type: number\n          example: \"188\"\n        magneticDeclination: \n          description: The airports magnetic variation/declination (+/East, -/West)\n          type: number\n          example: \"1.9\"\n        metar: \n          description: The airports METAR weather reports\n          type: object\n          properties:\n            simulator: \n              description: Only set if available\n              type: object\n              properties:\n                nearest: \n                  type: string\n                  example: \"EDDM 091920Z 35005KT 320V020 9999 -SHRA FEW015 SCT025CB 16/14 Q1022 RESHRA NOSIG\"\n                station: \n                  type: string\n                  example: \"EDDM 091920Z 35005KT 320V020 9999 -SHRA FEW015 SCT025CB 16/14 Q1022 RESHRA NOSIG\"\n            activesky: \n              description: Only set if available\n              type: object\n              properties:\n                nearest: \n                  type: string\n                  example: \"EDDM 091920Z 35005KT 320V020 9999 -SHRA FEW015 SCT025CB 16/14 Q1022 RESHRA NOSIG\"\n                station: \n                  type: string\n                  example: \"EDDM 091920Z 35005KT 320V020 9999 -SHRA FEW015 SCT025CB 16/14 Q1022 RESHRA NOSIG\"\n            noaa: \n              description: Only set if available\n              type: object\n              properties:\n                nearest: \n                  type: string\n                  example: \"EDDM 091920Z 35005KT 320V020 9999 -SHRA FEW015 SCT025CB 16/14 Q1022 RESHRA NOSIG\"\n                station: \n                  type: string\n                  example: \"EDDM 091920Z 35005KT 320V020 9999 -SHRA FEW015 SCT025CB 16/14 Q1022 RESHRA NOSIG\"\n            vatsim: \n              description: Only set if available\n              type: object\n              properties:\n                nearest: \n                  type: string\n                  example: \"EDDM 091920Z 35005KT 320V020 9999 -SHRA FEW015 SCT025CB 16/14 Q1022 RESHRA NOSIG\"\n                station: \n                  type: string\n                  example: \"EDDM 091920Z 35005KT 320V020 9999 -SHRA FEW015 SCT025CB 16/14 Q1022 RESHRA NOSIG\"\n            ivao: \n              description: Only set if available\n              type: object\n              properties:\n                nearest: \n                  type: string\n                  example: \"EDDM 091920Z 35005KT 320V020 9999 -SHRA FEW015 SCT025CB 16/14 Q1022 RESHRA NOSIG\"\n                station: \n                  type: string\n                  example: \"EDDM 091920Z 35005KT 320V020 9999 -SHRA FEW015 SCT025CB 16/14 Q1022 RESHRA NOSIG\"\n        name: \n          description: The airports name\n          type: string\n          example: \"München\"\n        parking:\n          description: The airports parking capacities\n          type: object\n          properties:\n            gates:\n              type: integer\n              description: Only set if available\n              format: int32\n            jetWays: \n              type: integer\n              description: Only set if available\n              format: int32\n            gaRamps: \n              type: integer\n              description: Only set if available\n              format: int32\n            cargo: \n              type: integer\n              description: Only set if available\n              format: int32\n            militaryCargo: \n              type: integer\n              description: Only set if available\n              format: int32\n            militaryCombat: \n              type: integer\n              description: Only set if available\n              format: int32\n            helipads: \n              type: integer\n              description: Only set if available\n              format: int32\n        position: \n          description: The airports geographical position\n          $ref: '#/components/schemas/Coordinates'\n        rating: \n          description: The airports rating\n          type: integer\n          format: int32\n        region: \n          description: The airports region\n          type: string\n          example: \"\"\n        runways:\n          description: Array of airport runway flags\n          type: array\n          items:\n            type: string\n            example: \n              - \"Hard\"\n              - \"Lighted\"\n        state: \n          description: The airports state/province\n          type: string\n          example: \"\"\n        sunrise:\n          description: The airports sunrise time\n          type: string\n          example: \"02:40:40\"\n        sunset:\n          description: The airports sunset time\n          type: string\n          example: \"19:54:52\"\n        transitionAltitude:\n          description: The airports transition altitude in feet\n          type: number\n          example: \"5000\"\n    SimInfoResponse:\n      type: object\n      properties:\n        active:\n          type: boolean\n        altitude_above_ground:\n          description: \"ft\"\n          type: number\n          example: 1737.796875\n        ground_altitude:\n          description: \"meters (?)\"\n          type: number\n          example: 0.05364101380109787\n        ground_speed:\n          description: \"kts\"\n          type: number\n          example: 178.37759399414062\n        heading:\n          type: number\n          description: \"degrees\"\n          example: 155.85145568847656\n        indicated_altitude:\n          description: \"ft\"\n          type: number\n          example: 1799.44482421875\n        indicated_speed:\n          description: \"kts\"\n          type: number\n          example: 173.4679718017578\n        position:\n          description: The user aircrafts geographical position\n          $ref: '#/components/schemas/Coordinates'\n        sea_level_pressure:\n          description: \"Mbar\"\n          type: number\n          example: 1020\n        simconnect_status:\n          type: string\n          example: \"No error\"\n        true_airspeed:\n          description: \"kts\"\n          type: number\n          example: 178.34288024902344\n        vertical_speed:\n          description: \"fpm\"\n          type: number\n          example: -4.088292598724365\n        wind_direction:\n          description: \"degrees corrected by aircrafts position magvar\"\n          type: number\n          example: 50.69130325317383\n        wind_speed:\n          description: \"kts\"\n          type: number\n          example: 4.874995708465576\n    UiInfoResponse:\n      type: object\n      description: Common UI info\n      properties:\n        zoom_ui:\n          description: the zoom value of the map inside LNM UI\n          type: number\n          example: 1803\n        zoom_web:\n          description: the zoom value of the map inside LNM Web UI\n          type: number\n          example: 1803\n        distance_ui:\n          description: the distance value of the map inside LNM UI in km\n          type: number\n          example: 6.814605113425086\n        distance_web:\n          description: the distance value of the map inside LNM Web UI in km\n          type: number\n          example: 6.814605113425086\n    MapFeaturesResponse:\n      type: object\n      description: List of map features\n      properties:\n        airports:\n          description: airports list\n          type: object\n          properties:\n            count:\n              type: number\n              example: 361\n            result:\n              type: array\n              items: \n                type: object\n                $ref: '#/components/schemas/MapAirportFeature'\n        ndbs:\n          description: NDBs list\n          type: object\n          properties:\n            count:\n              type: number\n              example: 361\n            result:\n              type: array\n              items: \n                type: object\n                $ref: '#/components/schemas/MapNDBFeature'\n        vors:\n          description: VORs list\n          type: object\n          properties:\n            count:\n              type: number\n              example: 361\n            result:\n              type: array\n              items: \n                type: object\n                $ref: '#/components/schemas/MapVORFeature'\n        markers:\n          description: markers list\n          type: object\n          properties:\n            count:\n              type: number\n              example: 361\n            result:\n              type: array\n              items: \n                type: object\n                $ref: '#/components/schemas/MapMarkerFeature'\n        waypoints:\n          description: markers list\n          type: object\n          properties:\n            count:\n              type: number\n              example: 361\n            result:\n              type: array\n              items: \n                type: object\n                $ref: '#/components/schemas/MapWaypointFeature'\n    MapObject:\n      type: object\n      description: Identifiable map object\n      properties:\n        object_id:\n          description: the map object id\n          type: number\n          example: 1\n        type_id:\n          description: the map object type id\n          type: number\n          example: 1\n    MapAirportFeature:\n      type: object\n      description: Single airport list entry\n      allOf:\n        - $ref: '#/components/schemas/MapObject'\n      properties:\n        elevation:\n          description: the airports elevation in ft\n          type: number\n          example: 1352\n        ident:\n          description: The airports ident (ICAO)\n          type: string\n          example: \"LOIH\"\n        name:\n          description: The airpotrts name\n          type: string\n          example: \"Dornbirn\"\n        position:\n          description: The airports geographical position\n          $ref: '#/components/schemas/Coordinates'\n    MapNDBFeature:\n      type: object\n      description: Single NDB list entry\n      allOf:\n        - $ref: '#/components/schemas/MapObject'\n      properties:\n        elevation:\n          description: the NDB elevation in ft\n          type: number\n          example: 3.40\n        ident:\n          description: The NDB ident (ICAO)\n          type: string\n          example: \"OB\"\n        name:\n          description: The NDB name\n          type: string\n          example: \"Overberg\"\n        position:\n          description: The NDB geographical position\n          $ref: '#/components/schemas/Coordinates'\n    MapVORFeature:\n      type: object\n      description: Single VOR list entry\n      allOf:\n        - $ref: '#/components/schemas/MapObject'\n      properties:\n        elevation:\n          description: the VOR elevation in ft\n          type: number\n          example: 659\n        ident:\n          description: The VOR ident (ICAO)\n          type: string\n          example: \"GRV\"\n        name:\n          description: The VOR name\n          type: string\n          example: \"George\"\n        position:\n          description: The VOR geographical position\n          $ref: '#/components/schemas/Coordinates'\n    MapMarkerFeature:\n      type: object\n      description: Single marker list entry\n      allOf:\n        - $ref: '#/components/schemas/MapObject'\n      properties:\n        elevation:\n          description: the marker elevation in ft\n          type: number\n          example: 0\n        ident:\n          description: The marker ident (ICAO)\n          type: string\n          example: \"AL\"\n        type:\n          description: The marker type\n          type: string\n          example: \"OUTER\"\n        position:\n          description: The airports geographical position\n          $ref: '#/components/schemas/Coordinates'\n    MapWaypointFeature:\n      type: object\n      description: Single waypoint list entry\n      allOf:\n        - $ref: '#/components/schemas/MapObject'\n      properties:\n        elevation:\n          description: the marker elevation in ft\n          type: number\n          example: 0\n        ident:\n          description: The marker ident (ICAO)\n          type: string\n          example: \"AL\"\n        type:\n          description: The marker type\n          type: string\n          example: \"OUTER\"\n        position:\n          description: The airports geographical position\n          $ref: '#/components/schemas/Coordinates'\n",
			"canonicalURL": "/github.com/albar965/littlenavmap@00c1c2f93190687c50f644d66d98bbb899c26759/-/blob/web/webapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/albar965/littlenavmap/blob/00c1c2f93190687c50f644d66d98bbb899c26759/web/webapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/airport/info\": get: responses: 400: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}