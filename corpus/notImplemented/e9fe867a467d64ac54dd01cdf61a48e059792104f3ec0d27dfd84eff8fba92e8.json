{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/backstage/backstage"
		},
		"file": {
			"name": "auth.yaml",
			"size": 0,
			"path": "docs/openapi/definitions/auth.yaml",
			"byteSize": 8269,
			"content": "openapi: 3.0.1\ninfo:\n  title: Auth API\n  description: |\n    # Backstage's auth-provider API.\n\n    **Provided by `@backstage/auth-backend`.**\n\n    The purpose of the Auth APIs in Backstage are to identify the user, and to provide a way for plugins\n    to request access to 3rd party services on behalf of that user.\n\n    The API is supplied with a list of providers - such as `Google` or `Github` - and will add the endpoints\n    described below to each of those providers.\n\n    Read more about [User Authentication and Authorization in Backstage](https://github.com/backstage/backstage/blob/master/docs/auth/overview.md).\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 0.1.1-alpha.8\nexternalDocs:\n  description: Backstage official documentation\n  url: https://github.com/backstage/backstage/blob/master/docs/README.md\nservers:\n  - url: http://localhost:7007/api/auth/\ntags:\n  - name: provider\n    description: List of endpoints per provider\npaths:\n  /start:\n    get:\n      tags:\n        - provider\n      summary:\n        Initializes the authorization flow and redirects to a consent screen for\n        the provider\n      description:\n        The popup window is pointed to the `/start` endpoint of the auth\n        provider in the auth-backend plugin, which then redirects to the OAuth\n        consent screen of the provider.\n      parameters:\n        - name: scope\n          in: query\n          description:\n            Scope requested for the auth session. The scope format and handling\n            is specific to each provider\n          required: true\n          schema:\n            type: string\n            example: email\n        - name: env\n          in: query\n          description: Parameter to indicate runtime environment\n          required: true\n          schema:\n            type: string\n            example: development\n      responses:\n        302:\n          description: Redirect to the consent popup\n          headers:\n            Location:\n              description: The url to the consent popup\n              schema:\n                type: string\n            Set-Cookie:\n              description: Nonce cookie\n              schema:\n                $ref: '#/components/schemas/Nonce-Cookie'\n        default:\n          description: An error occurred\n  /frame/handler:\n    get:\n      tags:\n        - provider\n      summary: Handles the response from the consent popup for the provider\n      description:\n        If the login request is accepted, the popup window will be redirected\n        back to the `/handler/frame` endpoint of the auth backend.\n      parameters:\n        - name: scope\n          in: query\n          description: Scope requested for the auth session\n          required: true\n          schema:\n            type: string\n            example: email\n        - name: code\n          in: query\n          description: Short-term authorization code used to be exchanged for access tokens\n          required: true\n          schema:\n            type: string\n        - name: state\n          in: query\n          description: Nonce value stored in state\n          required: true\n          schema:\n            type: string\n        - name: provider-nonce\n          in: cookie\n          description: Nonce value stored in cookie\n          required: true\n          schema:\n            type: string\n        - name: env\n          in: query\n          description: Parameter to indicate runtime environment\n          required: true\n          schema:\n            type: string\n            example: development\n      responses:\n        200:\n          description: Message received from consent popup\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/AuthResponse'\n                  - $ref: '#/components/schemas/AuthError'\n              examples:\n                AuthResponse:\n                  summary: AuthResponse\n                  value: |\n                    {\n                      type: \"auth-result\",\n                      payload: {\n                          accessToken: \"access-token\",\n                          idToken: \"id-token\",\n                          expiresInSecond: 3600,\n                          scope: \"email\"\n                        }\n                    }\n                AuthError:\n                  summary: AuthError\n                  value: |\n                    {\n                      type: \"auth-result\",\n                      error: {\n                        name: \"error\",\n                        message: \"message\",\n                        stack: \"stack\"\n                      }\n                    }\n          headers:\n            Set-Cookie:\n              description: Refresh cookie\n              schema:\n                $ref: '#/components/schemas/Refresh-Cookie'\n  /refresh:\n    get:\n      tags:\n        - provider\n      summary: Handles refreshing of tokens due to reload or expiry\n      description:\n        If supported by the provider, the `/refresh` endpoint is responsible for\n        refreshing the tokens using a refresh-token stored in a cookie\n      parameters:\n        - name: scope\n          in: query\n          description: Scope requested for the auth session\n          required: true\n          schema:\n            type: string\n            example: email\n        - name: optional\n          in: query\n          description: Prevent the popup from being displayed\n          schema:\n            type: string\n        - name: x-requested-with\n          in: header\n          description: X-Requested-With header preventing CSRF\n          required: true\n          schema:\n            type: string\n            example: 'x-requested-with: XMLHttpRequest'\n        - name: provider-refresh-token\n          in: cookie\n          description: Refresh token used to refresh the current session\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Successfully refreshed the session\n        401:\n          description: Validation error\n  /logout:\n    post:\n      tags:\n        - provider\n      summary: Logs user out of the current provider\n      description:\n        When logging out the current session is removed and if present the\n        cookie containing the refresh token is also removed\n      parameters:\n        - name: x-requested-with\n          in: header\n          description: X-Requested-With header preventing CSRF\n          required: true\n          schema:\n            type: string\n            example: 'x-requested-with: XMLHttpRequest'\n      responses:\n        200:\n          description: Successfully logged out\n          headers:\n            Set-Cookie:\n              description: Refresh cookie\n              schema:\n                $ref: '#/components/schemas/Refresh-Cookie'\n        401:\n          description: Validation error\ncomponents:\n  schemas:\n    Nonce-Cookie:\n      type: object\n      properties:\n        provider-nonce:\n          type: string\n        maxAge:\n          type: integer\n        secure:\n          type: boolean\n        sameSite:\n          type: string\n        domain:\n          type: string\n        path:\n          type: string\n        httpOnly:\n          type: boolean\n    Refresh-Cookie:\n      type: object\n      properties:\n        provider-refresh-token:\n          type: string\n        maxAge:\n          type: integer\n        secure:\n          type: boolean\n        sameSite:\n          type: string\n        domain:\n          type: string\n        path:\n          type: string\n        httpOnly:\n          type: boolean\n    AuthResponse:\n      type: object\n      properties:\n        type:\n          type: string\n        payload:\n          type: object\n          properties:\n            accessToken:\n              type: string\n            idToken:\n              type: string\n            expiresInSeconds:\n              type: number\n            scope:\n              type: string\n    AuthError:\n      type: object\n      properties:\n        type:\n          type: string\n        error:\n          type: object\n          properties:\n            name:\n              type: string\n            message:\n              type: string\n            stack:\n              type: string\n",
			"canonicalURL": "/github.com/backstage/backstage@3ae400df6e5a1ec2975e39c75a7d1cdaf767ca04/-/blob/docs/openapi/definitions/auth.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/backstage/backstage/blob/3ae400df6e5a1ec2975e39c75a7d1cdaf767ca04/docs/openapi/definitions/auth.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: cookie params not implemented",
	"NotImplemented": [
		"cookie params"
	]
}