{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/maif.local/otoroshi/1.5.0-dev/openapi.yaml",
			"byteSize": 209973,
			"content": "openapi: 3.0.0\nservers:\n  - url: http://otoroshi-api.oto.tools/\n  - url: http://maif.local\ninfo:\n  contact:\n    email: oss@maif.fr\n    name: Otoroshi Team\n  description: Admin API of the Otoroshi reverse proxy\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  title: Otoroshi Admin API\n  version: 1.5.0-dev\n  x-apisguru-categories:\n    - developer_tools\n  x-logo:\n    backgroundColor: \"#FFFFFF\"\n    url: https://maif.github.io/otoroshi/assets/images/svg/otoroshi_logo.svg\n  x-origin:\n    - format: openapi\n      url: https://raw.githubusercontent.com/MAIF/otoroshi/master/docs/manual/code/swagger.json\n      version: \"3.0\"\n  x-providerName: maif.local\n  x-serviceName: otoroshi\nexternalDocs:\n  description: Find out more about Otoroshi\n  url: https://maif.github.io/otoroshi/\ntags:\n  - description: Everything about Otoroshi global configuration\n    name: configuration\n  - description: Everything about Otoroshi import/export\n    name: import\n  - description: Everything about Otoroshi entities templates\n    name: templates\n  - description: Everything about Otoroshi Environments\n    name: environments\n  - description: Everything about Otoroshi service groups\n    name: groups\n  - description: Everything about Otoroshi api keys\n    name: apikeys\n  - description: Everything about Otoroshi service descriptors\n    name: services\n  - description: Everything about Otoroshi stats\n    name: stats\n  - description: Everything about Otoroshi Snow Monkey\n    name: snowmonkey\n  - description: Everything about Otoroshi health status\n    name: health\n  - description: Everything about Otoroshi global JWT token verifiers\n    name: jwt-verifiers\n  - description: Everything about Otoroshi global auth. module config\n    name: auth-config\n  - description: Everything about Otoroshi request transformer scripts\n    name: scripts\n  - description: Everything about Otoroshi SSL/TLS certificates\n    name: certificates\n  - description: Everything about Otoroshi validation authorities\n    name: validation-authorities\n  - description: Everything about Otoroshi data exporters\n    name: data-exporter-configs\npaths:\n  /api/apikeys:\n    get:\n      deprecated: false\n      description: Get all api keys\n      operationId: allApiKeys\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ApiKey\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all api keys\n      tags:\n        - apikeys\n  /api/auths:\n    get:\n      deprecated: false\n      description: Get all global auth. module configs\n      operationId: findAllGlobalAuthModules\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  oneOf:\n                    - $ref: \"#/components/schemas/LdapAuthModuleConfig\"\n                    - $ref: \"#/components/schemas/InMemoryAuthModuleConfig\"\n                    - $ref: \"#/components/schemas/GenericOauth2ModuleConfig\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all global auth. module configs\n      tags:\n        - auth-config\n    post:\n      deprecated: false\n      description: Create one global auth. module config\n      operationId: createGlobalAuthModule\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/LdapAuthModuleConfig\"\n                - $ref: \"#/components/schemas/InMemoryAuthModuleConfig\"\n                - $ref: \"#/components/schemas/GenericOauth2ModuleConfig\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/LdapAuthModuleConfig\"\n                  - $ref: \"#/components/schemas/InMemoryAuthModuleConfig\"\n                  - $ref: \"#/components/schemas/GenericOauth2ModuleConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create one global auth. module config\n      tags:\n        - auth-config\n  \"/api/auths/{id}\":\n    delete:\n      deprecated: false\n      description: Delete one global auth. module config\n      operationId: deleteGlobalAuthModule\n      parameters:\n        - description: The auth. config id id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete one global auth. module config\n      tags:\n        - auth-config\n    get:\n      deprecated: false\n      description: Get one global auth. module configs\n      operationId: findGlobalAuthModuleById\n      parameters:\n        - description: The auth. config id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/LdapAuthModuleConfig\"\n                  - $ref: \"#/components/schemas/InMemoryAuthModuleConfig\"\n                  - $ref: \"#/components/schemas/GenericOauth2ModuleConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get one global auth. module configs\n      tags:\n        - auth-config\n    patch:\n      deprecated: false\n      description: Update one global auth. module config\n      operationId: patchGlobalAuthModule\n      parameters:\n        - description: The auth. config id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/LdapAuthModuleConfig\"\n                  - $ref: \"#/components/schemas/InMemoryAuthModuleConfig\"\n                  - $ref: \"#/components/schemas/GenericOauth2ModuleConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update one global auth. module config\n      tags:\n        - auth-config\n    put:\n      deprecated: false\n      description: Update one global auth. module config\n      operationId: updateGlobalAuthModule\n      parameters:\n        - description: The auth. config id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/LdapAuthModuleConfig\"\n                - $ref: \"#/components/schemas/InMemoryAuthModuleConfig\"\n                - $ref: \"#/components/schemas/GenericOauth2ModuleConfig\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/LdapAuthModuleConfig\"\n                  - $ref: \"#/components/schemas/InMemoryAuthModuleConfig\"\n                  - $ref: \"#/components/schemas/GenericOauth2ModuleConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update one global auth. module config\n      tags:\n        - auth-config\n  /api/certificates:\n    get:\n      deprecated: false\n      description: Get all certificates\n      operationId: allCerts\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Certificate\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all certificates\n      tags:\n        - certificates\n    post:\n      deprecated: false\n      description: Create one certificate\n      operationId: createCert\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Certificate\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Certificate\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create one certificate\n      tags:\n        - certificates\n  \"/api/certificates/{id}\":\n    delete:\n      deprecated: false\n      description: Delete one certificate by id\n      operationId: deleteCert\n      parameters:\n        - description: The certificate id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete one certificate by id\n      tags:\n        - certificates\n    get:\n      deprecated: false\n      description: Get one certificate by id\n      operationId: oneCert\n      parameters:\n        - description: The auth. config id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Certificate\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get one certificate by id\n      tags:\n        - certificates\n    patch:\n      deprecated: false\n      description: Update one certificate by id\n      operationId: patchCert\n      parameters:\n        - description: The certificate id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Certificate\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update one certificate by id\n      tags:\n        - certificates\n    put:\n      deprecated: false\n      description: Update one certificate by id\n      operationId: putCert\n      parameters:\n        - description: The certificate id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Certificate\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Certificate\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update one certificate by id\n      tags:\n        - certificates\n  /api/client-validators:\n    get:\n      deprecated: false\n      description: Get all validation authoritiess\n      operationId: findAllClientValidators\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ValidationAuthority\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all validation authoritiess\n      tags:\n        - validation-authorities\n    post:\n      deprecated: false\n      description: Create one validation authorities\n      operationId: createClientValidator\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ValidationAuthority\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ValidationAuthority\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create one validation authorities\n      tags:\n        - validation-authorities\n  \"/api/client-validators/{id}\":\n    delete:\n      deprecated: false\n      description: Delete one validation authorities by id\n      operationId: deleteClientValidator\n      parameters:\n        - description: The validation authorities id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete one validation authorities by id\n      tags:\n        - validation-authorities\n    get:\n      deprecated: false\n      description: Get one validation authorities by id\n      operationId: findClientValidatorById\n      parameters:\n        - description: The auth. config id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ValidationAuthority\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get one validation authorities by id\n      tags:\n        - validation-authorities\n    patch:\n      deprecated: false\n      description: Update one validation authorities by id\n      operationId: patchClientValidator\n      parameters:\n        - description: The validation authorities id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ValidationAuthority\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update one validation authorities by id\n      tags:\n        - validation-authorities\n    put:\n      deprecated: false\n      description: Update one validation authorities by id\n      operationId: updateClientValidator\n      parameters:\n        - description: The validation authorities id\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ValidationAuthority\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ValidationAuthority\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update one validation authorities by id\n      tags:\n        - validation-authorities\n  /api/data-exporter-configs:\n    get:\n      deprecated: false\n      description: Get all data exporter configs\n      operationId: findAllDataExporters\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/DataExporterConfig\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all data exporter configs\n      tags:\n        - data-exporter-configs\n    post:\n      deprecated: false\n      description: Create a new data exporter config\n      operationId: createDataExporterConfig\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DataExporterConfig\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DataExporterConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create a new data exporter config\n      tags:\n        - data-exporter-configs\n  /api/data-exporter-configs/_bulk:\n    delete:\n      deprecated: false\n      description: Delete a data exporter config\n      operationId: deletebulkDataExporterConfig\n      parameters: []\n      requestBody:\n        content:\n          application/ndjson:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  description: The bulk response\n                  properties:\n                    deleted:\n                      description: Whether the action was carried out correctly or not\n                      example: true\n                      type: boolean\n                    id:\n                      description: Data exporter id\n                      example: true\n                      type: boolean\n                    status:\n                      description: Status\n                      enum:\n                        - \"200\"\n                      type: string\n                  type: object\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete a data exporter config\n      tags:\n        - data-exporter-configs\n    patch:\n      deprecated: false\n      description: Update a data exporter configs with a diff\n      operationId: patchBulkDataExporterConfig\n      parameters: []\n      requestBody:\n        content:\n          application/ndjson:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  description: The bulk response\n                  properties:\n                    id:\n                      description: Data exporter id\n                      example: true\n                      type: boolean\n                    status:\n                      description: Status\n                      enum:\n                        - \"200\"\n                      type: string\n                    updated:\n                      description: Whether the action was carried out correctly or not\n                      example: true\n                      type: boolean\n                  type: object\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a data exporter configs with a diff\n      tags:\n        - data-exporter-configs\n    post:\n      deprecated: false\n      description: Create a new data exporter configs\n      operationId: createBulkDataExporterConfigs\n      parameters: []\n      requestBody:\n        content:\n          application/ndjson:\n            schema:\n              $ref: \"#/components/schemas/DataExporterConfig\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  description: The bulk response\n                  properties:\n                    created:\n                      description: Whether the action was carried out correctly or not\n                      example: true\n                      type: boolean\n                    id:\n                      description: Data exporter id\n                      example: true\n                      type: boolean\n                    status:\n                      description: Status\n                      enum:\n                        - \"201\"\n                      type: string\n                  type: object\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create a new data exporter configs\n      tags:\n        - data-exporter-configs\n    put:\n      deprecated: false\n      description: Update a data exporter configs\n      operationId: updateBulkDataExporterConfig\n      parameters: []\n      requestBody:\n        content:\n          application/ndjson:\n            schema:\n              $ref: \"#/components/schemas/DataExporterConfig\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  description: The bulk response\n                  properties:\n                    id:\n                      description: Data exporter id\n                      example: true\n                      type: boolean\n                    status:\n                      description: Status\n                      enum:\n                        - \"200\"\n                      type: string\n                    updated:\n                      description: Whether the action was carried out correctly or not\n                      example: true\n                      type: boolean\n                  type: object\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a data exporter configs\n      tags:\n        - data-exporter-configs\n  /api/data-exporter-configs/_template:\n    get:\n      deprecated: false\n      description: Get all data exporter configs\n      operationId: DataExporterTemplate\n      parameters:\n        - description: The data exporter config type\n          in: query\n          name: type\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DataExporterConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all data exporter configs\n      tags:\n        - data-exporter-configs\n  \"/api/data-exporter-configs/{dataExporterConfigId}\":\n    delete:\n      deprecated: false\n      description: Delete a data exporter config\n      operationId: deleteDataExporterConfig\n      parameters:\n        - description: The data exporter config id\n          in: path\n          name: dataExporterConfigId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete a data exporter config\n      tags:\n        - data-exporter-configs\n    get:\n      deprecated: false\n      description: Get a data exporter config\n      operationId: findDataExporterConfigById\n      parameters:\n        - description: The data exporter config id\n          in: path\n          name: dataExporterConfigId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DataExporterConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a data exporter config\n      tags:\n        - data-exporter-configs\n    patch:\n      deprecated: false\n      description: Update a data exporter config with a diff\n      operationId: patchDataExporterConfig\n      parameters:\n        - description: The data exporter config id\n          in: path\n          name: dataExporterConfigId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DataExporterConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a data exporter config with a diff\n      tags:\n        - data-exporter-configs\n    put:\n      deprecated: false\n      description: Update a data exporter config\n      operationId: updateDataExporterConfig\n      parameters:\n        - description: The data exporter config id\n          in: path\n          name: dataExporterConfigId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DataExporterConfig\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DataExporterConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a data exporter config\n      tags:\n        - data-exporter-configs\n  /api/globalconfig:\n    get:\n      deprecated: false\n      description: Get the full configuration of Otoroshi\n      operationId: globalConfig\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GlobalConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get the full configuration of Otoroshi\n      tags:\n        - configuration\n    patch:\n      deprecated: false\n      description: Update the global configuration with a diff\n      operationId: patchGlobalConfig\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GlobalConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update the global configuration with a diff\n      tags:\n        - configuration\n    put:\n      deprecated: false\n      description: Update the global configuration\n      operationId: putGlobalConfig\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GlobalConfig\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GlobalConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update the global configuration\n      tags:\n        - configuration\n  /api/groups:\n    get:\n      deprecated: false\n      description: Get all service groups\n      operationId: allServiceGroups\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Group\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all service groups\n      tags:\n        - groups\n    post:\n      deprecated: false\n      description: Create a new service group\n      operationId: createGroup\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Group\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create a new service group\n      tags:\n        - groups\n  \"/api/groups/{groupId}/apikeys\":\n    get:\n      deprecated: false\n      description: Get all api keys for the group of a service\n      operationId: apiKeysFromGroup\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ApiKey\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all api keys for the group of a service\n      tags:\n        - apikeys\n    post:\n      deprecated: false\n      description: Create a new api key for a group\n      operationId: createApiKeyFromGroup\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ApiKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create a new api key for a group\n      tags:\n        - apikeys\n  \"/api/groups/{groupId}/apikeys/{clientId}\":\n    delete:\n      deprecated: false\n      description: Delete an api key for a specified service group\n      operationId: deleteApiKeyFromGroup\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete an api key\n      tags:\n        - apikeys\n    get:\n      deprecated: false\n      description: Get an api key for a specified service group\n      operationId: apiKeyFromGroup\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get an api key\n      tags:\n        - apikeys\n    patch:\n      deprecated: false\n      description: Update an api key for a specified service descriptor with a diff\n      operationId: patchApiKeyFromGroup\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update an api key with a diff\n      tags:\n        - apikeys\n    put:\n      deprecated: false\n      description: Update an api key for a specified service group\n      operationId: updateApiKeyFromGroup\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ApiKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update an api key\n      tags:\n        - apikeys\n  \"/api/groups/{groupId}/apikeys/{clientId}/quotas\":\n    delete:\n      deprecated: false\n      description: Reset the quota state of an api key\n      operationId: resetApiKeyFromGroupQuotas\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Quotas\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Reset the quota state of an api key\n      tags:\n        - apikeys\n    get:\n      deprecated: false\n      description: Get the quota state of an api key\n      operationId: apiKeyFromGroupQuotas\n      parameters:\n        - description: The api key group id\n          in: path\n          name: groupId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Quotas\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get the quota state of an api key\n      tags:\n        - apikeys\n  \"/api/groups/{serviceGroupId}\":\n    delete:\n      deprecated: false\n      description: Delete a service group\n      operationId: deleteGroup\n      parameters:\n        - description: The service group id\n          in: path\n          name: serviceGroupId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete a service group\n      tags:\n        - groups\n    get:\n      deprecated: false\n      description: Get a service group\n      operationId: serviceGroup\n      parameters:\n        - description: The service group id\n          in: path\n          name: serviceGroupId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a service group\n      tags:\n        - groups\n    patch:\n      deprecated: false\n      description: Update a service group with a diff\n      operationId: patchGroup\n      parameters:\n        - description: The service group id\n          in: path\n          name: serviceGroupId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a service group with a diff\n      tags:\n        - groups\n    put:\n      deprecated: false\n      description: Update a service group\n      operationId: updateGroup\n      parameters:\n        - description: The service group id\n          in: path\n          name: serviceGroupId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Group\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a service group\n      tags:\n        - groups\n  \"/api/groups/{serviceGroupId}/services\":\n    get:\n      deprecated: false\n      description: Get all services descriptor for a group\n      operationId: serviceGroupServices\n      parameters:\n        - description: The service group id\n          in: path\n          name: serviceGroupId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ApiKey\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all services descriptor for a group\n      tags:\n        - services\n  /api/import:\n    post:\n      deprecated: false\n      description: Import the full state of Otoroshi as a file\n      operationId: fullImportFromFile\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ImportExport\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Done\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Import the full state of Otoroshi as a file\n      tags:\n        - import\n  /api/live:\n    get:\n      deprecated: false\n      description: Get global otoroshi stats\n      operationId: globalLiveStats\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Stats\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get global otoroshi stats\n      tags:\n        - stats\n  \"/api/live/{id}\":\n    get:\n      deprecated: false\n      description: Get live feed of global otoroshi stats (global) or for a service {id}\n      operationId: serviceLiveStats\n      parameters:\n        - description: The service id or global for otoroshi stats\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Stats\"\n            text/event-stream:\n              schema:\n                $ref: \"#/components/schemas/Stats\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get live feed of otoroshi stats\n      tags:\n        - stats\n  /api/otoroshi.json:\n    get:\n      deprecated: false\n      description: Export the full state of Otoroshi\n      operationId: fullExport\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImportExport\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Export the full state of Otoroshi\n      tags:\n        - import\n    post:\n      deprecated: false\n      description: Import the full state of Otoroshi\n      operationId: fullImport\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ImportExport\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Done\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Import the full state of Otoroshi\n      tags:\n        - import\n  /api/scripts:\n    get:\n      deprecated: false\n      description: Get all scripts\n      operationId: findAllScripts\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Script\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all scripts\n      tags:\n        - scripts\n    post:\n      deprecated: false\n      description: Create a new script\n      operationId: createScript\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Script\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Script\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create a new script\n      tags:\n        - scripts\n  /api/scripts/_compile:\n    post:\n      deprecated: false\n      description: Compile a script\n      operationId: compileScript\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Script\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScriptCompilationResult\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Compile a script\n      tags:\n        - scripts\n  \"/api/scripts/{scriptId}\":\n    delete:\n      deprecated: false\n      description: Delete a script\n      operationId: deleteScript\n      parameters:\n        - description: The script id\n          in: path\n          name: scriptId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete a script\n      tags:\n        - scripts\n    get:\n      deprecated: false\n      description: Get a script\n      operationId: findScriptById\n      parameters:\n        - description: The script id\n          in: path\n          name: scriptId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Script\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a script\n      tags:\n        - scripts\n    patch:\n      deprecated: false\n      description: Update a script with a diff\n      operationId: patchScript\n      parameters:\n        - description: The script id\n          in: path\n          name: scriptId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Script\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a script with a diff\n      tags:\n        - scripts\n    put:\n      deprecated: false\n      description: Update a script\n      operationId: updateScript\n      parameters:\n        - description: The script id\n          in: path\n          name: scriptId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Script\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Script\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a script\n      tags:\n        - scripts\n  /api/services:\n    get:\n      deprecated: false\n      description: Get all services\n      operationId: allServices\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Service\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all services\n      tags:\n        - services\n    post:\n      deprecated: false\n      description: Create a new service descriptor\n      operationId: createService\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Service\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create a new service descriptor\n      tags:\n        - services\n  \"/api/services/{serviceId}\":\n    delete:\n      deprecated: false\n      description: Delete a service descriptor\n      operationId: deleteService\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete a service descriptor\n      tags:\n        - services\n    get:\n      deprecated: false\n      description: Get a service descriptor\n      operationId: service\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a service descriptor\n      tags:\n        - services\n    patch:\n      deprecated: false\n      description: Update a service descriptor with a diff\n      operationId: patchService\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a service descriptor with a diff\n      tags:\n        - services\n    put:\n      deprecated: false\n      description: Update a service descriptor\n      operationId: updateService\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Service\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a service descriptor\n      tags:\n        - services\n  \"/api/services/{serviceId}/apikeys\":\n    get:\n      deprecated: false\n      description: Get all api keys for the group of a service\n      operationId: apiKeys\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ApiKey\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all api keys for the group of a service\n      tags:\n        - apikeys\n    post:\n      deprecated: false\n      description: \"\"\n      operationId: createApiKey\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ApiKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create a new api key for a service\n      tags:\n        - apikeys\n  \"/api/services/{serviceId}/apikeys/{clientId}\":\n    delete:\n      deprecated: false\n      description: Delete an api key for a specified service descriptor\n      operationId: deleteApiKey\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete an api key\n      tags:\n        - apikeys\n    get:\n      deprecated: false\n      description: Get an api key for a specified service descriptor\n      operationId: apiKey\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get an api key\n      tags:\n        - apikeys\n    patch:\n      deprecated: false\n      description: Update an api key for a specified service descriptor with a diff\n      operationId: patchApiKey\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update an api key with a diff\n      tags:\n        - apikeys\n    put:\n      deprecated: false\n      description: Update an api key for a specified service descriptor\n      operationId: updateApiKey\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ApiKey\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update an api key\n      tags:\n        - apikeys\n  \"/api/services/{serviceId}/apikeys/{clientId}/group\":\n    get:\n      deprecated: false\n      description: Get the group of an api key\n      operationId: apiKeyGroup\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get the group of an api key\n      tags:\n        - apikeys\n  \"/api/services/{serviceId}/apikeys/{clientId}/quotas\":\n    delete:\n      deprecated: false\n      description: Reset the quota state of an api key\n      operationId: resetApiKeyQuotas\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Quotas\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Reset the quota state of an api key\n      tags:\n        - apikeys\n    get:\n      deprecated: false\n      description: Get the quota state of an api key\n      operationId: apiKeyQuotas\n      parameters:\n        - description: The api key service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n        - description: the api key id\n          in: path\n          name: clientId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Quotas\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get the quota state of an api key\n      tags:\n        - apikeys\n  \"/api/services/{serviceId}/targets\":\n    delete:\n      deprecated: false\n      description: Delete a service descriptor target\n      operationId: serviceDeleteTarget\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Target\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete a service descriptor target\n      tags:\n        - services\n    get:\n      deprecated: false\n      description: Get a service descriptor targets\n      operationId: serviceTargets\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Target\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a service descriptor targets\n      tags:\n        - services\n    patch:\n      deprecated: false\n      description: Update a service descriptor targets\n      operationId: updateServiceTargets\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Target\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update a service descriptor targets\n      tags:\n        - services\n    post:\n      deprecated: false\n      description: Add a target to a service descriptor\n      operationId: serviceAddTarget\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Target\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Target\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Add a target to a service descriptor\n      tags:\n        - services\n  \"/api/services/{serviceId}/template\":\n    delete:\n      deprecated: false\n      description: Delete a service descriptor error template\n      operationId: deleteServiceTemplate\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete a service descriptor error template\n      tags:\n        - services\n    get:\n      deprecated: false\n      description: Get a service descriptor error template\n      operationId: serviceTemplate\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorTemplate\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a service descriptor error template\n      tags:\n        - services\n    post:\n      deprecated: false\n      description: Update a service descriptor targets\n      operationId: createServiceTemplate\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ErrorTemplate\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorTemplate\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create a service descriptor error template\n      tags:\n        - services\n    put:\n      deprecated: false\n      description: Update an error template to a service descriptor\n      operationId: updateServiceTemplate\n      parameters:\n        - description: The service id\n          in: path\n          name: serviceId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ErrorTemplate\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorTemplate\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update an error template to a service descriptor\n      tags:\n        - services\n  /api/snowmonkey/_start:\n    post:\n      deprecated: false\n      description: Start the Snow Monkey\n      operationId: startSnowMonkey\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Done\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Start the Snow Monkey\n      tags:\n        - snowmonkey\n  /api/snowmonkey/_stop:\n    post:\n      deprecated: false\n      description: Stop the Snow Monkey\n      operationId: stopSnowMonkey\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Done\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Stop the Snow Monkey\n      tags:\n        - snowmonkey\n  /api/snowmonkey/config:\n    get:\n      deprecated: false\n      description: Get current Snow Monkey config\n      operationId: getSnowMonkeyConfig\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SnowMonkeyConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get current Snow Monkey config\n      tags:\n        - snowmonkey\n    patch:\n      deprecated: false\n      description: Update current Snow Monkey config\n      operationId: patchSnowMonkey\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Group\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SnowMonkeyConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update current Snow Monkey config\n      tags:\n        - snowmonkey\n    put:\n      deprecated: false\n      description: Update current Snow Monkey config\n      operationId: updateSnowMonkey\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Group\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SnowMonkeyConfig\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update current Snow Monkey config\n      tags:\n        - snowmonkey\n  /api/snowmonkey/outages:\n    delete:\n      deprecated: false\n      description: Reset Snow Monkey Outages for the day\n      operationId: resetSnowMonkey\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Done\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Reset Snow Monkey Outages for the day\n      tags:\n        - snowmonkey\n    get:\n      deprecated: false\n      description: Get all current Snow Monkey ourages\n      operationId: getSnowMonkeyOutages\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Outage\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all current Snow Monkey ourages\n      tags:\n        - snowmonkey\n  /api/verifiers:\n    get:\n      deprecated: false\n      description: Get all global JWT verifiers\n      operationId: findAllGlobalJwtVerifiers\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/GlobalJwtVerifier\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all global JWT verifiers\n      tags:\n        - jwt-verifiers\n    post:\n      deprecated: false\n      description: Create one global JWT verifiers\n      operationId: createGlobalJwtVerifier\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GlobalJwtVerifier\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GlobalJwtVerifier\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Create one global JWT verifiers\n      tags:\n        - jwt-verifiers\n  \"/api/verifiers/{verifierId}\":\n    delete:\n      deprecated: false\n      description: Delete one global JWT verifiers\n      operationId: deleteGlobalJwtVerifier\n      parameters:\n        - description: The jwt verifier id\n          in: path\n          name: verifierId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Delete one global JWT verifiers\n      tags:\n        - jwt-verifiers\n    get:\n      deprecated: false\n      description: Get one global JWT verifiers\n      operationId: findGlobalJwtVerifiersById\n      parameters:\n        - description: The jwt verifier id\n          in: path\n          name: verifierId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GlobalJwtVerifier\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get one global JWT verifiers\n      tags:\n        - jwt-verifiers\n    patch:\n      deprecated: false\n      description: Update one global JWT verifiers\n      operationId: patchGlobalJwtVerifier\n      parameters:\n        - description: The jwt verifier id\n          in: path\n          name: verifierId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GlobalJwtVerifier\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update one global JWT verifiers\n      tags:\n        - jwt-verifiers\n    put:\n      deprecated: false\n      description: Update one global JWT verifiers\n      operationId: updateGlobalJwtVerifier\n      parameters:\n        - description: The jwt verifier id\n          in: path\n          name: verifierId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GlobalJwtVerifier\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GlobalJwtVerifier\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Update one global JWT verifiers\n      tags:\n        - jwt-verifiers\n  /health:\n    get:\n      deprecated: false\n      description: Import the full state of Otoroshi as a file\n      operationId: health\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OtoroshiHealth\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"404\":\n          description: Resource not found or does not exist\n      summary: Return current Otoroshi health\n      tags:\n        - health\n  /lines:\n    get:\n      deprecated: false\n      description: Get all environments provided by the current Otoroshi instance\n      operationId: allLines\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Environment\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all environments\n      tags:\n        - environments\n  \"/lines/{line}/services\":\n    get:\n      deprecated: false\n      description: Get all services for an environment provided by the current Otoroshi instance\n      operationId: servicesForALine\n      parameters:\n        - description: The environment where to find services\n          in: path\n          name: line\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Service\"\n                type: array\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get all services for an environment\n      tags:\n        - environments\n  /new/apikey:\n    get:\n      deprecated: false\n      description: Get a template of an Otoroshi Api Key. The generated entity is not persisted\n      operationId: initiateApiKey\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiKey\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a template of an Otoroshi Api Key\n      tags:\n        - templates\n  /new/group:\n    get:\n      deprecated: false\n      description: Get a template of an Otoroshi service group. The generated entity is not persisted\n      operationId: initiateServiceGroup\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a template of an Otoroshi service group\n      tags:\n        - templates\n  /new/service:\n    get:\n      deprecated: false\n      description: Get a template of an Otoroshi service descriptor. The generated entity is not persisted\n      operationId: initiateService\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Service\"\n          description: Successful operation\n        \"400\":\n          description: Bad resource format. Take another look to the swagger, or open an issue :)\n        \"401\":\n          description: You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication\n        \"404\":\n          description: Resource not found or does not exist\n      security:\n        - otoroshi_auth: []\n      summary: Get a template of an Otoroshi service descriptor\n      tags:\n        - templates\ncomponents:\n  schemas:\n    ApiKey:\n      description: An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services.\n      properties:\n        authorizedEntities:\n          description: The group/service ids (prefixed by group_ or service_ on which the key is authorized\n          example:\n            - a string value\n          items:\n            example: a string value\n            type: string\n          type: array\n        clientId:\n          description: The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything\n          example: a string value\n          type: string\n        clientName:\n          description: The name of the api key, for humans ;-)\n          example: a string value\n          type: string\n        clientSecret:\n          description: The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything\n          example: a string value\n          type: string\n        dailyQuota:\n          description: Authorized number of calls per day\n          example: 123\n          format: int64\n          type: integer\n        enabled:\n          description: Whether or not the key is enabled. If disabled, resources won't be available to calls using this key\n          example: true\n          type: boolean\n        metadata:\n          additionalProperties:\n            type: string\n          description: Bunch of metadata for the key\n          example:\n            key: value\n          type: object\n        monthlyQuota:\n          description: Authorized number of calls per month\n          example: 123\n          format: int64\n          type: integer\n        throttlingQuota:\n          description: Authorized number of calls per second, measured on 10 seconds\n          example: 123\n          format: int64\n          type: integer\n      required:\n        - clientId\n        - clientSecret\n        - clientName\n        - authorizedEntities\n        - enabled\n      type: object\n    Auth0Config:\n      description: Configuration for Auth0 domain\n      properties:\n        callbackUrl:\n          description: Auth0 callback URL\n          example: a string value\n          type: string\n        clientId:\n          description: Auth0 client id\n          example: a string value\n          type: string\n        clientSecret:\n          description: Auth0 client secret\n          example: a string value\n          type: string\n        domain:\n          description: Auth0 domain\n          example: a string value\n          type: string\n      required:\n        - clientId\n        - clientSecret\n        - domain\n        - callbackUrl\n      type: object\n    BadResponse:\n      description: An HTTP response that is not supposed to be returned by a service\n      properties:\n        body:\n          description: The body of the HTTP response\n          example: a string value\n          type: string\n        headers:\n          additionalProperties:\n            type: string\n          description: The HTTP headers of the response\n          example:\n            key: value\n          type: object\n        status:\n          description: The HTTP status for the response\n          example: 123123\n          format: int32\n          type: integer\n      required:\n        - status\n        - body\n        - headers\n      type: object\n    BadResponsesFaultConfig:\n      description: Config for bad requests injection fault\n      properties:\n        ratio:\n          description: The percentage of requests affected by this fault. Value should be between 0.0 and 1.0\n          example: 42.2\n          format: double\n          type: number\n        responses:\n          description: The possibles responses\n          items:\n            $ref: \"#/components/schemas/BadResponse\"\n          type: array\n      required:\n        - ratio\n        - responses\n      type: object\n    Canary:\n      description: The configuration of the canary mode for a service descriptor\n      properties:\n        enabled:\n          description: Use canary mode for this service\n          example: true\n          type: boolean\n        root:\n          description: Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar\n          example: a string value\n          type: string\n        targets:\n          description: The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures\n          items:\n            $ref: \"#/components/schemas/Target\"\n          type: array\n        traffic:\n          description: Ratio of traffic that will be sent to canary targets.\n          example: 123123\n          format: int32\n          type: integer\n      required:\n        - enabled\n        - traffic\n        - targets\n        - root\n      type: object\n    Certificate:\n      description: A SSL/TLS X509 certificate\n      properties:\n        autoRenew:\n          description: Allow Otoroshi to renew the certificate (if self signed)\n          example: a string value\n          type: string\n        ca:\n          description: Certificate is a CA (read only)\n          example: a string value\n          type: string\n        caRef:\n          description: Reference for a CA certificate in otoroshi\n          example: a string value\n          type: string\n        chain:\n          description: Certificate chain of trust in PEM format\n          example: a string value\n          type: string\n        domain:\n          description: Domain of the certificate (read only)\n          example: a string value\n          type: string\n        from:\n          description: Start date of validity\n          example: a string value\n          type: string\n        id:\n          description: Id of the certificate\n          example: a string value\n          type: string\n        privateKey:\n          description: PKCS8 private key in PEM format\n          example: a string value\n          type: string\n        selfSigned:\n          description: Certificate is self signed  read only)\n          example: a string value\n          type: string\n        subject:\n          description: Subject of the certificate (read only)\n          example: a string value\n          type: string\n        to:\n          description: End date of validity\n          example: a string value\n          type: string\n        valid:\n          description: Certificate is valid (read only)\n          example: a string value\n          type: string\n      required:\n        - id\n        - chain\n        - privateKey\n        - caRef\n        - domain\n        - selfSigned\n        - ca\n        - valid\n        - autoRenew\n        - subject\n        - from\n        - to\n      type: object\n    ChaosConfig:\n      description: Configuration for the faults that can be injected in requests\n      properties:\n        badResponsesFaultConfig:\n          $ref: \"#/components/schemas/BadResponsesFaultConfig\"\n        enabled:\n          description: Whether or not this config is enabled\n          example: true\n          type: boolean\n        largeRequestFaultConfig:\n          $ref: \"#/components/schemas/LargeRequestFaultConfig\"\n        largeResponseFaultConfig:\n          $ref: \"#/components/schemas/LargeResponseFaultConfig\"\n        latencyInjectionFaultConfig:\n          $ref: \"#/components/schemas/LatencyInjectionFaultConfig\"\n      required:\n        - enabled\n      type: object\n    CleverSettings:\n      description: Configuration for CleverCloud client\n      properties:\n        consumerKey:\n          description: CleverCloud consumer key\n          example: a string value\n          type: string\n        consumerSecret:\n          description: CleverCloud consumer token\n          example: a string value\n          type: string\n        orgaId:\n          description: CleverCloud organization id\n          example: a string value\n          type: string\n        secret:\n          description: CleverCloud oauth secret\n          example: a string value\n          type: string\n        token:\n          description: CleverCloud oauth token\n          example: a string value\n          type: string\n      required:\n        - consumerKey\n        - consumerSecret\n        - token\n        - secret\n        - orgaId\n      type: object\n    ClientConfig:\n      description: The configuration of the circuit breaker for a service descriptor\n      properties:\n        backoffFactor:\n          description: Specify the factor to multiply the delay for each retry\n          example: 123123\n          format: int32\n          type: integer\n        callTimeout:\n          description: Specify how long each call should last at most in milliseconds\n          example: 123123\n          format: int32\n          type: integer\n        globalTimeout:\n          description: Specify how long the global call (with retries) should last at most in milliseconds\n          example: 123123\n          format: int32\n          type: integer\n        maxErrors:\n          description: Specify how many errors can pass before opening the circuit breaker\n          example: 123123\n          format: int32\n          type: integer\n        retries:\n          description: Specify how many times the client will try to fetch the result of the request after an error before giving up.\n          example: 123123\n          format: int32\n          type: integer\n        retryInitialDelay:\n          description: Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor\n          example: 123123\n          format: int32\n          type: integer\n        sampleInterval:\n          description: Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted\n          example: 123123\n          format: int32\n          type: integer\n        useCircuitBreaker:\n          description: Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !\n          example: true\n          type: boolean\n      required:\n        - useCircuitBreaker\n        - retries\n        - maxErrors\n        - retryInitialDelay\n        - backoffFactor\n        - callTimeout\n        - globalTimeout\n        - sampleInterval\n      type: object\n    ConsoleDataExporterConfig:\n      properties: {}\n      type: object\n    CorsSettings:\n      description: The configuration for cors support\n      properties:\n        allowCredentials:\n          description: Allow to pass credentials\n          example: true\n          type: boolean\n        allowHeaders:\n          description: The cors allowed headers\n          items:\n            example: a string value\n            type: string\n          type: array\n        allowMethods:\n          description: The cors allowed methods\n          items:\n            example: a string value\n            type: string\n          type: array\n        allowOrigin:\n          description: The cors allowed origin\n          example: a string value\n          type: string\n        enabled:\n          description: Whether or not cors is enabled\n          example: true\n          type: boolean\n        excludedPatterns:\n          description: The cors excluded patterns\n          items:\n            example: a string value\n            type: string\n          type: array\n        exposeHeaders:\n          description: The cors exposed header\n          items:\n            example: a string value\n            type: string\n          type: array\n        maxAge:\n          description: Cors max age\n          example: 123123\n          format: int32\n          type: integer\n      required:\n        - enabled\n        - allowOrigin\n        - exposeHeaders\n        - allowHeaders\n        - allowMethods\n        - excludedPatterns\n        - maxAge\n        - allowCredentials\n      type: object\n    CustomDataExporterConfig:\n      properties:\n        config:\n          additionalProperties:\n            type: string\n          description: Custom data exporter config\n          example:\n            key: value\n          type: object\n        ref:\n          description: Script Ref\n          example: a string value\n          type: string\n      required:\n        - ref\n        - config\n      type: object\n    DataExporterConfig:\n      description: Settings to export Otorshi events\n      properties:\n        bufferSize:\n          description: buffer size\n          example: 123123\n          format: int32\n          type: integer\n        config:\n          description: Data Exporter config\n          oneOf:\n            - $ref: \"#/components/schemas/ElasticConfig\"\n            - $ref: \"#/components/schemas/KafkaConfig\"\n            - $ref: \"#/components/schemas/PulsarDataExporterConfig\"\n            - $ref: \"#/components/schemas/FileDataExporterConfig\"\n            - $ref: \"#/components/schemas/MailerGenericExporterConfig\"\n            - $ref: \"#/components/schemas/MailerConsoleExporterConfig\"\n            - $ref: \"#/components/schemas/MailerMailgunExporterConfig\"\n            - $ref: \"#/components/schemas/MailerMailjetExporterConfig\"\n            - $ref: \"#/components/schemas/MailerSendgridExporterConfig\"\n            - $ref: \"#/components/schemas/ConsoleDataExporterConfig\"\n            - $ref: \"#/components/schemas/CustomDataExporterConfig\"\n        desc:\n          description: Description\n          example: a string value\n          type: string\n        enabled:\n          description: Boolean\n          example: a string value\n          type: string\n        filtering:\n          $ref: \"#/components/schemas/Filtering\"\n          description: filtering\n        groupDuration:\n          description: duration\n          example: 123\n          format: int64\n          type: integer\n        groupSize:\n          description: Group size\n          example: 123123\n          format: int32\n          type: integer\n        id:\n          description: Id\n          example: a string value\n          type: string\n        jsonWorkers:\n          description: nb workers\n          example: 123123\n          format: int32\n          type: integer\n        location:\n          $ref: \"#/components/schemas/Location\"\n          description: location\n        metadata:\n          additionalProperties:\n            type: string\n          description: Metadata\n          example:\n            key: value\n          type: object\n        name:\n          description: Name\n          example: a string value\n          type: string\n        projection:\n          additionalProperties:\n            type: string\n          description: projection\n          example:\n            key: value\n          type: object\n        sendWorkers:\n          description: send workers\n          example: 123123\n          format: int32\n          type: integer\n        typ:\n          description: Type of data exporter\n          enum:\n            - kafka\n            - pulsar\n            - file\n            - mailer\n            - elastic\n            - console\n            - custom\n          type: string\n      type: object\n    Deleted:\n      properties:\n        deleted:\n          example: true\n          type: boolean\n      required:\n        - deleted\n      type: object\n    Done:\n      properties:\n        done:\n          example: true\n          type: boolean\n      required:\n        - done\n      type: object\n    ESAlgoSettings:\n      description: Settings for an EC + SHA signing algorithm\n      properties:\n        privateKey:\n          description: The private key for the RSA function\n          example: a string value\n          type: string\n        publicKey:\n          description: The public key for the RSA function\n          example: a string value\n          type: string\n        size:\n          description: Size for SHA function. can be 256, 384 or 512\n          example: 123123\n          format: int32\n          type: integer\n        type:\n          description: String with value ESAlgoSettings\n          example: a string value\n          type: string\n      required:\n        - type\n        - size\n        - publicKey\n      type: object\n    ElasticConfig:\n      description: The configuration for elastic access\n      properties:\n        clusterUri:\n          description: URL of the elastic cluster\n          example: a string value\n          type: string\n        headers:\n          additionalProperties:\n            type: string\n          description: Additionnal http headers\n          example:\n            key: value\n          type: object\n        index:\n          description: Index for events. Default is otoroshi-events\n          example: a string value\n          type: string\n        password:\n          description: Optional password\n          example: a string value\n          type: string\n        type:\n          description: Type of events. Default is event\n          example: a string value\n          type: string\n        user:\n          description: Optional user\n          example: a string value\n          type: string\n      required:\n        - clusterUri\n        - index\n        - type\n        - user\n        - password\n        - headers\n      type: object\n    Environment:\n      description: The name of the environment for service descriptors\n      example: prod\n      type: string\n    ErrorTemplate:\n      description: Error templates for a service descriptor\n      properties:\n        messages:\n          additionalProperties:\n            type: string\n          description: Map for custom messages\n          example:\n            key: value\n          type: object\n        serviceId:\n          description: The Id of the service for which the error template is enabled\n          example: a string value\n          type: string\n        template40x:\n          description: The html template for 40x errors\n          example: a string value\n          type: string\n        template50x:\n          description: The html template for 50x errors\n          example: a string value\n          type: string\n        templateBuild:\n          description: The html template for build page\n          example: a string value\n          type: string\n        templateMaintenance:\n          description: The html template for maintenance page\n          example: a string value\n          type: string\n      required:\n        - serviceId\n        - template40x\n        - template50x\n        - templateBuild\n        - templateMaintenance\n        - messages\n      type: object\n    ExposedApi:\n      description: The Open API configuration for your service (if one)\n      properties:\n        exposeApi:\n          description: Whether or not the current service expose an API with an Open API descriptor\n          example: true\n          type: boolean\n        openApiDescriptorUrl:\n          description: The URL of the Open API descriptor\n          example: http://www.google.com\n          format: uri\n          type: string\n      required:\n        - exposeApi\n      type: object\n    FileDataExporterConfig:\n      properties:\n        path:\n          description: Path to file\n          example: a string value\n          type: string\n      required:\n        - path\n      type: object\n    Filtering:\n      properties:\n        exclude:\n          description: Excluding pattern\n          items:\n            additionalProperties:\n              type: string\n            example:\n              key: value\n            type: object\n          type: array\n        include:\n          description: Including pattern\n          items:\n            additionalProperties:\n              type: string\n            example:\n              key: value\n            type: object\n          type: array\n      required:\n        - include, exclude\n      type: object\n    GenericOauth2ModuleConfig:\n      description: Settings to authenticate users using a generic OAuth2 provider\n      properties:\n        accessTokenField:\n          description: Field name to get access token\n          example: a string value\n          type: string\n        authorizeUrl:\n          description: OAuth authorize URL\n          example: a string value\n          type: string\n        callbackUrl:\n          description: Otoroshi callback URL\n          example: a string value\n          type: string\n        claims:\n          description: The claims of the token\n          example: a string value\n          type: string\n        clientId:\n          description: OAuth Client id\n          example: a string value\n          type: string\n        clientSecret:\n          description: OAuth Client secret\n          example: a string value\n          type: string\n        desc:\n          description: Description of the config\n          example: a string value\n          type: string\n        emailField:\n          description: Field name to get email from user profile\n          example: a string value\n          type: string\n        id:\n          description: Unique id of the config\n          example: a string value\n          type: string\n        jwtVerifier:\n          description: Algo. settings to verify JWT token\n          oneOf:\n            - $ref: \"#/components/schemas/HSAlgoSettings\"\n            - $ref: \"#/components/schemas/RSAlgoSettings\"\n            - $ref: \"#/components/schemas/ESAlgoSettings\"\n            - $ref: \"#/components/schemas/JWKSAlgoSettings\"\n        loginUrl:\n          description: OAuth login URL\n          example: a string value\n          type: string\n        logoutUrl:\n          description: OAuth logout URL\n          example: a string value\n          type: string\n        name:\n          description: Name of the config\n          example: a string value\n          type: string\n        nameField:\n          description: Field name to get name from user profile\n          example: a string value\n          type: string\n        oidConfig:\n          description: URL of the OIDC config. file\n          example: a string value\n          type: string\n        otoroshiDataField:\n          description: Field name to get otoroshi metadata from. You can specify sub fields using | as separator\n          example: a string value\n          type: string\n        readProfileFromToken:\n          description: The user profile will be read from the JWT token in id_token\n          example: true\n          type: boolean\n        scope:\n          description: The scope of the token\n          example: a string value\n          type: string\n        sessionMaxAge:\n          description: Max age of the session\n          example: 123123\n          format: int32\n          type: integer\n        tokenUrl:\n          description: OAuth token URL\n          example: a string value\n          type: string\n        type:\n          description: Type of settings. value is oauth2\n          example: a string value\n          type: string\n        useCookies:\n          description: Use for redirection to actual service\n          example: true\n          type: boolean\n        useJson:\n          description: Use JSON or URL Form Encoded as payload with the OAuth provider\n          example: true\n          type: boolean\n        userInfoUrl:\n          description: OAuth userinfo to get user profile\n          example: a string value\n          type: string\n      required:\n        - type\n        - id\n        - name\n        - desc\n        - sessionMaxAge\n        - clientId\n        - clientSecret\n        - authorizeUrl\n        - tokenUrl\n        - userInfoUrl\n        - loginUrl\n        - logoutUrl\n        - callbackUrl\n        - accessTokenField\n        - nameField\n        - emailField\n        - otoroshiDataField\n      type: object\n    GlobalConfig:\n      description: The global config object of Otoroshi, used to customize settings of the current Otoroshi instance\n      properties:\n        alertsEmails:\n          description: Email addresses that will receive all Otoroshi alert events\n          items:\n            example: admin@otoroshi.io\n            format: email\n            type: string\n          type: array\n        alertsWebhooks:\n          description: Webhook that will receive all Otoroshi alert events\n          items:\n            $ref: \"#/components/schemas/Webhook\"\n          type: array\n        analyticsWebhooks:\n          description: Webhook that will receive all internal Otoroshi events\n          items:\n            $ref: \"#/components/schemas/Webhook\"\n          type: array\n        apiReadOnly:\n          description: If enabled, Admin API won't be able to write/update/delete entities\n          example: true\n          type: boolean\n        autoLinkToDefaultGroup:\n          description: If not defined, every new service descriptor will be added to the default group\n          example: true\n          type: boolean\n        backofficeAuth0Config:\n          $ref: \"#/components/schemas/Auth0Config\"\n          description: Optional configuration for the backoffice Auth0 domain\n        cleverSettings:\n          $ref: \"#/components/schemas/CleverSettings\"\n          description: Optional CleverCloud configuration\n        elasticReadsConfig:\n          $ref: \"#/components/schemas/ElasticConfig\"\n          description: Config. for elastic reads\n        elasticWritesConfigs:\n          description: Configs. for Elastic writes\n          items:\n            $ref: \"#/components/schemas/ElasticConfig\"\n          type: array\n        endlessIpAddresses:\n          description: IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros\n          items:\n            example: 192.192.192.192\n            format: ipv4\n            type: string\n          type: array\n        ipFiltering:\n          $ref: \"#/components/schemas/IpFiltering\"\n        limitConcurrentRequests:\n          description: If enabled, Otoroshi will reject new request if too much at the same time\n          example: true\n          type: boolean\n        lines:\n          description: Possibles lines for Otoroshi\n          items:\n            example: a string value\n            type: string\n          type: array\n        mailerSettings:\n          $ref: \"#/components/schemas/MailerSettings\"\n          description: Optional mailer configuration\n        maxConcurrentRequests:\n          description: The number of authorized request processed at the same time\n          example: 123\n          format: int64\n          type: integer\n        maxHttp10ResponseSize:\n          description: The max size in bytes of an HTTP 1.0 response\n          example: 123\n          format: int64\n          type: integer\n        maxLogsSize:\n          description: Number of events kept locally\n          example: 123123\n          format: int32\n          type: integer\n        middleFingers:\n          description: Use middle finger emoji as a response character for endless HTTP responses\n          example: true\n          type: boolean\n        perIpThrottlingQuota:\n          description: Authorized number of calls per second globally per IP address, measured on 10 seconds\n          example: 123\n          format: int64\n          type: integer\n        privateAppsAuth0Config:\n          $ref: \"#/components/schemas/Auth0Config\"\n          description: Optional configuration for the private apps Auth0 domain\n        streamEntityOnly:\n          description: HTTP will be streamed only. Doesn't work with old browsers\n          example: true\n          type: boolean\n        throttlingQuota:\n          description: Authorized number of calls per second globally, measured on 10 seconds\n          example: 123\n          format: int64\n          type: integer\n        u2fLoginOnly:\n          description: If enabled, login to backoffice through Auth0 will be disabled\n          example: true\n          type: boolean\n        useCircuitBreakers:\n          description: If enabled, services will be authorized to use circuit breakers\n          example: true\n          type: boolean\n      required:\n        - streamEntityOnly\n        - autoLinkToDefaultGroup\n        - limitConcurrentRequests\n        - maxConcurrentRequests\n        - useCircuitBreakers\n        - apiReadOnly\n        - u2fLoginOnly\n        - ipFiltering\n        - throttlingQuota\n        - perIpThrottlingQuota\n        - analyticsWebhooks\n        - alertsWebhooks\n        - alertsEmails\n        - endlessIpAddresses\n      type: object\n    GlobalJwtVerifier:\n      description: A JWT verifier used by multiple service descriptor\n      properties:\n        algoSettings:\n          oneOf:\n            - $ref: \"#/components/schemas/HSAlgoSettings\"\n            - $ref: \"#/components/schemas/RSAlgoSettings\"\n            - $ref: \"#/components/schemas/ESAlgoSettings\"\n            - $ref: \"#/components/schemas/JWKSAlgoSettings\"\n        desc:\n          description: Verifier description\n          example: a string value\n          type: string\n        enabled:\n          description: Is it enabled\n          example: true\n          type: boolean\n        id:\n          description: Verifier id\n          example: a string value\n          type: string\n        name:\n          description: Verifier name\n          example: a string value\n          type: string\n        source:\n          oneOf:\n            - $ref: \"#/components/schemas/InQueryParam\"\n            - $ref: \"#/components/schemas/InHeader\"\n            - $ref: \"#/components/schemas/InCookie\"\n        strategy:\n          oneOf:\n            - $ref: \"#/components/schemas/PassThrough\"\n            - $ref: \"#/components/schemas/Sign\"\n            - $ref: \"#/components/schemas/Transform\"\n        strict:\n          description: Does it fail if JWT not found\n          example: true\n          type: boolean\n      required:\n        - type\n        - id\n        - name\n        - desc\n        - enabled\n        - strict\n        - source\n        - algoSettings\n        - strategy\n      type: object\n    Group:\n      description: An Otoroshi service group is just a group of service descriptor. It is useful to be able to define Api Keys for the whole group\n      properties:\n        description:\n          description: The descriptoin of the group\n          example: a string value\n          type: string\n        id:\n          description: The unique id of the group. Usually 64 random alpha numerical characters, but can be anything\n          example: a string value\n          type: string\n        name:\n          description: The name of the group\n          example: a string value\n          type: string\n      required:\n        - id\n        - name\n      type: object\n    Gzip:\n      description: Configuration for gzip of service responses\n      properties:\n        blackList:\n          description: Blacklisted mime types. Wildcard supported\n          items:\n            example: a string value\n            type: string\n          type: array\n        bufferSize:\n          description: Size of the GZip buffer\n          example: 123\n          format: int64\n          type: integer\n        chunkedThreshold:\n          description: Threshold for chunking data\n          example: 123\n          format: int64\n          type: integer\n        compressionLevel:\n          description: Compression level. From 0 to 9\n          example: 123123\n          format: int32\n          type: integer\n        enabled:\n          description: Whether gzip compression is enabled or not\n          example: true\n          type: boolean\n        excludedPatterns:\n          description: Patterns that are excluded from gzipping\n          items:\n            example: a string value\n            type: string\n          type: array\n        whiteList:\n          description: Whitelisted mime types. Wildcard supported\n          items:\n            example: a string value\n            type: string\n          type: array\n      required:\n        - enabled\n        - excludedPatterns\n        - whiteList\n        - blackList\n        - bufferSize\n        - chunkedThreshold\n        - compressionLevel\n      type: object\n    HSAlgoSettings:\n      description: Settings for an HMAC + SHA signing algorithm\n      properties:\n        secret:\n          description: The secret value for the HMAC function\n          example: a string value\n          type: string\n        size:\n          description: Size for SHA function. can be 256, 384 or 512\n          example: 123123\n          format: int32\n          type: integer\n        type:\n          description: String with value HSAlgoSettings\n          example: a string value\n          type: string\n      required:\n        - type\n        - size\n        - secret\n      type: object\n    HealthCheck:\n      description: The configuration for checking health of a service. Otoroshi will perform GET call on the URL to check if the service is still alive\n      properties:\n        enabled:\n          description: Whether or not healthcheck is enabled on the current service descriptor\n          example: true\n          type: boolean\n        url:\n          description: The URL to check\n          example: http://www.google.com\n          format: uri\n          type: string\n      required:\n        - enabled\n      type: object\n    ImportExport:\n      description: The structure that can be imported to or exported from Otoroshi. It represent the memory state of Otoroshi\n      properties:\n        admins:\n          description: Current U2F admin at the time of export\n          items:\n            description: Administrator using FIDO U2F device to access Otoroshi\n            properties:\n              createdAt:\n                description: The creation date of the user\n                example: 123\n                format: int64\n                type: integer\n              label:\n                description: The label for the user\n                example: a string value\n                type: string\n              password:\n                description: The hashed password of the user\n                example: a string value\n                type: string\n              registration:\n                additionalProperties:\n                  type: string\n                description: The U2F registration slug\n                example:\n                  key: value\n                type: object\n              username:\n                description: The email address of the user\n                example: a string value\n                type: string\n            required:\n              - username\n              - label\n              - password\n              - createdAt\n              - registration\n            type: object\n          type: array\n        apiKeys:\n          description: Current apik keys at the time of export\n          items:\n            description: An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services.\n            properties:\n              authorizedEntities:\n                description: The group/service ids (prefixed by group_ or service_ on which the key is authorized\n                example:\n                  - a string value\n                items:\n                  example: a string value\n                  type: string\n                type: array\n              clientId:\n                description: The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything\n                example: a string value\n                type: string\n              clientName:\n                description: The name of the api key, for humans ;-)\n                example: a string value\n                type: string\n              clientSecret:\n                description: The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything\n                example: a string value\n                type: string\n              dailyQuota:\n                description: Authorized number of calls per day\n                example: 123\n                format: int64\n                type: integer\n              enabled:\n                description: Whether or not the key is enabled. If disabled, resources won't be available to calls using this key\n                example: true\n                type: boolean\n              metadata:\n                additionalProperties:\n                  type: string\n                description: Bunch of metadata for the key\n                example:\n                  key: value\n                type: object\n              monthlyQuota:\n                description: Authorized number of calls per month\n                example: 123\n                format: int64\n                type: integer\n              throttlingQuota:\n                description: Authorized number of calls per second, measured on 10 seconds\n                example: 123\n                format: int64\n                type: integer\n            required:\n              - clientId\n              - clientSecret\n              - clientName\n              - authorizedEntities\n              - enabled\n            type: object\n          type: array\n        appConfig:\n          additionalProperties:\n            type: string\n          description: Current env variables at the time of export\n          example:\n            key: value\n          type: object\n        config:\n          $ref: \"#/components/schemas/GlobalConfig\"\n          description: Current global config at the time of export\n        date:\n          example: 2017-07-21T17:32:28Z\n          format: date-time\n          type: string\n        dateRaw:\n          example: 123\n          format: int64\n          type: integer\n        errorTemplates:\n          description: Current error templates at the time of export\n          items:\n            description: Error templates for a service descriptor\n            properties:\n              messages:\n                additionalProperties:\n                  type: string\n                description: Map for custom messages\n                example:\n                  key: value\n                type: object\n              serviceId:\n                description: The Id of the service for which the error template is enabled\n                example: a string value\n                type: string\n              template40x:\n                description: The html template for 40x errors\n                example: a string value\n                type: string\n              template50x:\n                description: The html template for 50x errors\n                example: a string value\n                type: string\n              templateBuild:\n                description: The html template for build page\n                example: a string value\n                type: string\n              templateMaintenance:\n                description: The html template for maintenance page\n                example: a string value\n                type: string\n            required:\n              - serviceId\n              - template40x\n              - template50x\n              - templateBuild\n              - templateMaintenance\n              - messages\n            type: object\n          type: array\n        label:\n          example: a string value\n          type: string\n        serviceDescriptors:\n          description: Current service descriptors at the time of export\n          items:\n            description: An otoroshi service descriptor. Represent a forward HTTP call on a domain to another location with some optional api management mecanism\n            properties:\n              Canary:\n                $ref: \"#/components/schemas/Canary\"\n              additionalHeaders:\n                additionalProperties:\n                  type: string\n                description: Specify headers that will be added to each client request. Useful to add authentication\n                example:\n                  key: value\n                type: object\n              api:\n                $ref: \"#/components/schemas/ExposedApi\"\n              authConfigRef:\n                description: A reference to a global auth module config\n                example: a string value\n                type: string\n              buildMode:\n                description: Display a construction page when a user try to use the service\n                example: true\n                type: boolean\n              chaosConfig:\n                $ref: \"#/components/schemas/ChaosConfig\"\n              clientConfig:\n                $ref: \"#/components/schemas/ClientConfig\"\n              clientValidatorRef:\n                description: A reference to validation authority\n                example: a string value\n                type: string\n              cors:\n                $ref: \"#/components/schemas/CorsSettings\"\n              domain:\n                description: The domain on which the service is available.\n                example: a string value\n                type: string\n              enabled:\n                description: Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist\n                example: true\n                type: boolean\n              enforceSecureCommunication:\n                description: When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside\n                example: true\n                type: boolean\n              env:\n                description: The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'\n                example: a string value\n                type: string\n              forceHttps:\n                description: Will force redirection to https:// if not present\n                example: true\n                type: boolean\n              groups:\n                description: Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group\n                example:\n                  - a string value\n                items:\n                  example: a string value\n                  type: string\n                type: array\n              gzip:\n                $ref: \"#/components/schemas/Gzip\"\n              headersVerification:\n                additionalProperties:\n                  type: string\n                description: Specify headers that will be verified after routing.\n                example:\n                  key: value\n                type: object\n              healthCheck:\n                $ref: \"#/components/schemas/HealthCheck\"\n              id:\n                description: A unique random string to identify your service\n                example: 110e8400-e29b-11d4-a716-446655440000\n                format: uuid\n                type: string\n              ipFiltering:\n                $ref: \"#/components/schemas/IpFiltering\"\n              jwtVerifier:\n                oneOf:\n                  - $ref: \"#/components/schemas/LocalJwtVerifier\"\n                  - $ref: \"#/components/schemas/RefJwtVerifier\"\n              localHost:\n                description: The host used localy, mainly localhost:xxxx\n                example: a string value\n                type: string\n              localScheme:\n                description: The scheme used localy, mainly http\n                example: a string value\n                type: string\n              maintenanceMode:\n                description: Display a maintainance page when a user try to use the service\n                example: true\n                type: boolean\n              matchingHeaders:\n                additionalProperties:\n                  type: string\n                description: Specify headers that MUST be present on client request to route it. Useful to implement versioning\n                example:\n                  key: value\n                type: object\n              matchingRoot:\n                description: The root path on which the service is available\n                example: a string value\n                type: string\n              metadata:\n                additionalProperties:\n                  type: string\n                description: Just a bunch of random properties\n                example:\n                  key: value\n                type: object\n              name:\n                description: The name of your service. Only for debug and human readability purposes\n                example: a string value\n                type: string\n              overrideHost:\n                description: Host header will be overriden with Host of the target\n                example: true\n                type: boolean\n              privateApp:\n                description: When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain\n                example: true\n                type: boolean\n              privatePatterns:\n                description: If you define a public pattern that is a little bit too much, you can make some of public URL private again\n                items:\n                  example: a string value\n                  type: string\n                type: array\n              publicPatterns:\n                description: By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'\n                items:\n                  example: a string value\n                  type: string\n                type: array\n              redirectToLocal:\n                description: If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests\n                example: true\n                type: boolean\n              redirection:\n                $ref: \"#/components/schemas/RedirectionSettings\"\n              root:\n                description: Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar\n                example: a string value\n                type: string\n              secComExcludedPatterns:\n                description: URI patterns excluded from secured communications\n                items:\n                  example: a string value\n                  type: string\n                type: array\n              secComSettings:\n                oneOf:\n                  - $ref: \"#/components/schemas/HSAlgoSettings\"\n                  - $ref: \"#/components/schemas/RSAlgoSettings\"\n                  - $ref: \"#/components/schemas/ESAlgoSettings\"\n                  - $ref: \"#/components/schemas/JWKSAlgoSettings\"\n              sendOtoroshiHeadersBack:\n                description: When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...\n                example: true\n                type: boolean\n              statsdConfig:\n                $ref: \"#/components/schemas/StatsdConfig\"\n              subdomain:\n                description: The subdomain on which the service is available\n                example: a string value\n                type: string\n              targets:\n                description: The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures\n                items:\n                  $ref: \"#/components/schemas/Target\"\n                type: array\n              transformerRef:\n                description: A reference to a request transformer\n                example: a string value\n                type: string\n              userFacing:\n                description: The fact that this service will be seen by users and cannot be impacted by the Snow Monkey\n                example: true\n                type: boolean\n              xForwardedHeaders:\n                description: Send X-Forwarded-* headers\n                example: true\n                type: boolean\n            required:\n              - id\n              - groups\n              - name\n              - env\n              - domain\n              - subdomain\n              - targets\n              - root\n              - enabled\n              - privateApp\n              - forceHttps\n              - maintenanceMode\n              - buildMode\n              - enforceSecureCommunication\n            type: object\n          type: array\n        serviceGroups:\n          description: Current service groups at the time of export\n          items:\n            description: An Otoroshi service group is just a group of service descriptor. It is useful to be able to define Api Keys for the whole group\n            properties:\n              description:\n                description: The descriptoin of the group\n                example: a string value\n                type: string\n              id:\n                description: The unique id of the group. Usually 64 random alpha numerical characters, but can be anything\n                example: a string value\n                type: string\n              name:\n                description: The name of the group\n                example: a string value\n                type: string\n            required:\n              - id\n              - name\n            type: object\n          type: array\n        simpleAdmins:\n          description: Current simple admins at the time of export\n          items:\n            description: Administrator using just login/password tuple to access Otoroshi\n            properties:\n              createdAt:\n                description: The creation date of the user\n                example: 123\n                format: int64\n                type: integer\n              label:\n                description: The label for the user\n                example: a string value\n                type: string\n              password:\n                description: The hashed password of the user\n                example: a string value\n                type: string\n              username:\n                description: The email address of the user\n                example: a string value\n                type: string\n            required:\n              - username\n              - label\n              - password\n              - createdAt\n            type: object\n          type: array\n        stats:\n          $ref: \"#/components/schemas/ImportExportStats\"\n          description: Current global stats at the time of export\n      required:\n        - label\n        - dateRaw\n        - date\n        - stats\n        - config\n        - admins\n        - simpleAdmins\n        - serviceGroups\n        - apiKeys\n        - serviceDescriptors\n        - errorTemplates\n      type: object\n    ImportExportStats:\n      description: Global stats for the current Otoroshi instances\n      properties:\n        calls:\n          description: Number of calls to Otoroshi globally\n          example: 123\n          format: int64\n          type: integer\n        dataIn:\n          description: The amount of data sent to Otoroshi globally\n          example: 123\n          format: int64\n          type: integer\n        dataOut:\n          description: The amount of data sent from Otoroshi globally\n          example: 123\n          format: int64\n          type: integer\n      required:\n        - calls\n        - dataIn\n        - dataOut\n      type: object\n    InCookie:\n      description: JWT location in a cookie\n      properties:\n        name:\n          description: Name of the cookie\n          example: a string value\n          type: string\n        type:\n          description: String with value InCookie\n          example: a string value\n          type: string\n      required:\n        - type\n        - name\n      type: object\n    InHeader:\n      description: JWT location in a header\n      properties:\n        name:\n          description: Name of the header\n          example: a string value\n          type: string\n        remove:\n          description: Remove regex inside the value, like 'Bearer '\n          example: a string value\n          type: string\n        type:\n          description: String with value InHeader\n          example: a string value\n          type: string\n      required:\n        - type\n        - name\n        - remove\n      type: object\n    InMemoryAuthModuleConfig:\n      description: Settings to authenticate users using the in memory user store\n      properties:\n        desc:\n          description: Description of the config\n          example: a string value\n          type: string\n        id:\n          description: Unique id of the config\n          example: a string value\n          type: string\n        name:\n          description: Name of the config\n          example: a string value\n          type: string\n        sessionMaxAge:\n          description: Max age of the session\n          example: a string value\n          type: string\n        type:\n          description: Type of settings. value is basic\n          example: a string value\n          type: string\n        users:\n          description: List of users\n          items:\n            $ref: \"#/components/schemas/InMemoryUser\"\n          type: array\n      required:\n        - type\n        - id\n        - name\n        - desc\n        - users\n        - sessionMaxAge\n      type: object\n    InMemoryUser:\n      description: A user\n      properties:\n        email:\n          description: Email of the user\n          example: a string value\n          type: string\n        metadata:\n          additionalProperties:\n            type: string\n          description: Metadata of the user\n          example:\n            key: value\n          type: object\n        name:\n          description: Name of the user\n          example: a string value\n          type: string\n        password:\n          description: Password of the user (BCrypt hash)\n          example: a string value\n          type: string\n      required:\n        - name\n        - password\n        - email\n        - metadata\n      type: object\n    InQueryParam:\n      description: JWT location in a query param\n      properties:\n        name:\n          description: Name of the query param\n          example: a string value\n          type: string\n        type:\n          description: String with value InQueryParam\n          example: a string value\n          type: string\n      required:\n        - type\n        - name\n      type: object\n    IpFiltering:\n      description: The filtering configuration block for a service of globally.\n      properties:\n        blacklist:\n          description: Blacklisted IP addresses\n          items:\n            example: 192.192.192.192\n            format: ipv4\n            type: string\n          type: array\n        whitelist:\n          description: Whitelisted IP addresses\n          items:\n            example: 192.192.192.192\n            format: ipv4\n            type: string\n          type: array\n      required:\n        - whitelist\n        - blacklist\n      type: object\n    JWKSAlgoSettings:\n      description: Settings for a JWK set\n      properties:\n        headers:\n          additionalProperties:\n            type: string\n          description: The headers for the http call\n          example:\n            key: value\n          type: object\n        kty:\n          description: \"The type of key: RSA or EC\"\n          example: a string value\n          type: string\n        timeout:\n          description: The timeout of the http call\n          example: 123\n          format: int64\n          type: integer\n        ttl:\n          description: The ttl of the keyset\n          example: 123\n          format: int64\n          type: integer\n        type:\n          description: String with value JWKSAlgoSettings\n          example: a string value\n          type: string\n        url:\n          description: The url for the http call\n          example: a string value\n          type: string\n      required:\n        - type\n        - size\n        - publicKey\n      type: object\n    KafkaConfig:\n      description: The configuration for kafka access\n      properties:\n        keyPass:\n          description: Optional keypass\n          example: a string value\n          type: string\n        keyStore:\n          description: Optional path to keystore\n          example: a string value\n          type: string\n        servers:\n          description: URLs of the kafka servers\n          items:\n            example: a string value\n            type: string\n          type: array\n        topic:\n          description: Optional kafka topic (otoroshi-events by default)\n          example: a string value\n          type: string\n        trustore:\n          description: Optional path to trustore\n          example: a string value\n          type: string\n      required:\n        - servers\n      type: object\n    LargeRequestFaultConfig:\n      description: Config for large request injection fault\n      properties:\n        additionalRequestSize:\n          description: The size added to the request body in bytes. Added payload will be spaces only.\n          example: 123123\n          format: int32\n          type: integer\n        ratio:\n          description: The percentage of requests affected by this fault. Value should be between 0.0 and 1.0\n          example: 42.2\n          format: double\n          type: number\n      required:\n        - ratio\n        - additionalRequestSize\n      type: object\n    LargeResponseFaultConfig:\n      description: Config for large response injection fault\n      properties:\n        additionalRequestSize:\n          description: The size added to the response body in bytes. Added payload will be spaces only.\n          example: 123123\n          format: int32\n          type: integer\n        ratio:\n          description: The percentage of requests affected by this fault. Value should be between 0.0 and 1.0\n          example: 42.2\n          format: double\n          type: number\n      required:\n        - ratio\n        - additionalResponseSize\n      type: object\n    LatencyInjectionFaultConfig:\n      description: Config for large latency injection fault\n      properties:\n        from:\n          description: The start range of latency added to the request\n          example: 123123\n          format: int32\n          type: integer\n        ratio:\n          description: The percentage of requests affected by this fault. Value should be between 0.0 and 1.0\n          example: 42.2\n          format: double\n          type: number\n        to:\n          description: The end range of latency added to the request\n          example: 123123\n          format: int32\n          type: integer\n      required:\n        - ratio\n        - from\n        - to\n      type: object\n    LdapAuthModuleConfig:\n      description: Settings to authenticate users using a generic OAuth2 provider\n      properties:\n        adminPassword:\n          description: The admin password\n          example: a string value\n          type: string\n        adminUsername:\n          description: The admin username\n          example: a string value\n          type: string\n        desc:\n          description: Description of the config\n          example: a string value\n          type: string\n        emailField:\n          description: Field name to get email from user profile\n          example: a string value\n          type: string\n        groupFilter:\n          description: Filter for groups\n          example: a string value\n          type: string\n        id:\n          description: Unique id of the config\n          example: a string value\n          type: string\n        name:\n          description: Name of the config\n          example: a string value\n          type: string\n        nameField:\n          description: Field name to get name from user profile\n          example: a string value\n          type: string\n        otoroshiDataField:\n          description: Field name to get otoroshi metadata from. You can specify sub fields using | as separator\n          example: a string value\n          type: string\n        searchBase:\n          description: LDAP search base\n          example: a string value\n          type: string\n        searchFilter:\n          description: Filter for users\n          example: a string value\n          type: string\n        serverUrl:\n          description: URL of the ldap server\n          example: a string value\n          type: string\n        sessionMaxAge:\n          description: Max age of the session\n          example: 123123\n          format: int32\n          type: integer\n        type:\n          description: Type of settings. value is ldap\n          example: a string value\n          type: string\n        userBase:\n          description: LDAP user base DN\n          example: a string value\n          type: string\n      required:\n        - type\n        - id\n        - name\n        - desc\n        - sessionMaxAge\n        - serverUrl\n        - searchBase\n        - userBase\n        - groupFilter\n        - searchFilter\n        - adminUsername\n        - adminPassword\n        - nameField\n        - emailField\n        - metadataField\n      type: object\n    LdapUser:\n      description: A user\n      properties:\n        email:\n          description: Email of the user\n          example: a string value\n          type: string\n        metadata:\n          additionalProperties:\n            type: string\n          description: Metadata of the user\n          example:\n            key: value\n          type: object\n        name:\n          description: Name of the user\n          example: a string value\n          type: string\n      required:\n        - name\n        - email\n        - metadata\n      type: object\n    LocalJwtVerifier:\n      description: A JWT verifier used only for the current service descriptor\n      properties:\n        algoSettings:\n          oneOf:\n            - $ref: \"#/components/schemas/HSAlgoSettings\"\n            - $ref: \"#/components/schemas/RSAlgoSettings\"\n            - $ref: \"#/components/schemas/ESAlgoSettings\"\n            - $ref: \"#/components/schemas/JWKSAlgoSettings\"\n        enabled:\n          description: Is it enabled\n          example: true\n          type: boolean\n        source:\n          oneOf:\n            - $ref: \"#/components/schemas/InQueryParam\"\n            - $ref: \"#/components/schemas/InHeader\"\n            - $ref: \"#/components/schemas/InCookie\"\n        strategy:\n          oneOf:\n            - $ref: \"#/components/schemas/PassThrough\"\n            - $ref: \"#/components/schemas/Sign\"\n            - $ref: \"#/components/schemas/Transform\"\n        strict:\n          description: Does it fail if JWT not found\n          example: true\n          type: boolean\n        type:\n          description: A string with value 'local'\n          example: a string value\n          type: string\n      required:\n        - type\n        - enabled\n        - strict\n        - source\n        - algoSettings\n        - strategy\n      type: object\n    Location:\n      properties:\n        teams:\n          description: Team ids\n          items:\n            additionalProperties:\n              type: string\n            example:\n              key: value\n            type: object\n          type: array\n        tenant:\n          description: Tenant id\n          example: a string value\n          type: string\n      required:\n        - tenant\n        - teams\n      type: object\n    MailerConsoleExporterConfig:\n      properties:\n        type:\n          description: Type of mailer\n          enum:\n            - generic\n          type: string\n      type: object\n    MailerGenericExporterConfig:\n      properties:\n        headers:\n          additionalProperties:\n            type: string\n          description: Optional headers\n          example:\n            key: value\n          type: object\n        to:\n          description: Email adresses of recipents\n          items:\n            example: a string value\n            type: string\n          type: array\n        type:\n          description: Type of mailer\n          enum:\n            - generic\n          type: string\n        url:\n          description: Url of mailer\n          example: a string value\n          type: string\n      required:\n        - type\n      type: object\n    MailerMailgunExporterConfig:\n      properties:\n        apiKey:\n          description: Mailgun apiKey\n          example: a string value\n          type: string\n        domain:\n          description: Mailgun domain\n          example: a string value\n          type: string\n        eu:\n          description: Whether the mailgun server is european\n          example: true\n          type: boolean\n        to:\n          description: Email adresses of recipents\n          items:\n            example: admin@otoroshi.io\n            format: email\n            type: string\n          type: array\n        type:\n          description: Type of mailer\n          enum:\n            - mailgun\n          type: string\n      required:\n        - type\n      type: object\n    MailerMailjetExporterConfig:\n      properties:\n        apiKeyPrivate:\n          description: Mailjet private apiKey\n          example: a string value\n          type: string\n        apiKeyPublic:\n          description: Mailjet public apiKey\n          example: a string value\n          type: string\n        to:\n          description: Email adresses of recipents\n          items:\n            example: admin@otoroshi.io\n            format: email\n            type: string\n          type: array\n        type:\n          description: Type of mailer\n          enum:\n            - mailjet\n          type: string\n      required:\n        - type\n      type: object\n    MailerSendgridExporterConfig:\n      properties:\n        apiKeyPublic:\n          description: Sendgrid apiKey\n          example: a string value\n          type: string\n        to:\n          description: Email adresses of recipents\n          items:\n            example: admin@otoroshi.io\n            format: email\n            type: string\n          type: array\n        type:\n          description: Type of mailer\n          enum:\n            - sendgrid\n          type: string\n      required:\n        - type\n      type: object\n    MailerSettings:\n      description: Configuration for mailgun api client\n      properties:\n        apiKey:\n          description: Mailgun mailer api key\n          example: a string value\n          type: string\n        apiKeyPrivate:\n          description: Mailjet mailer private api key\n          example: a string value\n          type: string\n        apiKeyPublic:\n          description: Mailjet mailer public api key\n          example: a string value\n          type: string\n        domain:\n          description: Mailgun mailer domain\n          example: a string value\n          type: string\n        eu:\n          description: Mailgun mailer, use EU tenant api\n          example: true\n          type: boolean\n        header:\n          additionalProperties:\n            type: string\n          description: Generic mailer headers\n          example:\n            key: value\n          type: object\n        type:\n          description: \"Type of the mailer: console, generic, mailgun, mailjet\"\n          example: a string value\n          type: string\n        url:\n          description: Generic mailer url\n          example: a string value\n          type: string\n      required:\n        - apiKey\n        - domain\n      type: object\n    MappingSettings:\n      description: Settings to change fields of a JWT token\n      properties:\n        map:\n          additionalProperties:\n            type: string\n          description: Fields to rename\n          example:\n            key: value\n          type: object\n        remove:\n          description: Fields to remove\n          items:\n            example: a string value\n            type: string\n          type: array\n        values:\n          additionalProperties:\n            type: string\n          description: Fields to set\n          example:\n            key: value\n          type: object\n      required:\n        - map\n        - values\n        - remove\n      type: object\n    OtoroshiHealth:\n      description: The structure that represent current Otoroshi health\n      properties:\n        datastore:\n          enum:\n            - healthy\n            - unhealthy\n            - unreachable\n          type: string\n        otoroshi:\n          enum:\n            - healthy\n            - unhealthy\n            - down\n          type: string\n      required:\n        - label\n        - otoroshi\n        - datastore\n      type: object\n    Outage:\n      description: An outage by the Snow Monkey on a service\n      properties:\n        descriptorId:\n          description: The service impacted by outage\n          example: a string value\n          type: string\n        descriptorName:\n          description: The name of service impacted by outage\n          example: a string value\n          type: string\n        duration:\n          description: The duration of the outage\n          example: 123123\n          format: int32\n          type: integer\n        until:\n          description: The end of the outage\n          example: 17:32:28.000\n          format: time\n          type: string\n      required:\n        - descriptorId\n        - descriptorName\n        - until\n        - duration\n      type: object\n    OutageStrategy:\n      enum:\n        - OneServicePerGroup\n        - AllServicesPerGroup\n      type: string\n    PassThrough:\n      description: Strategy where only signature and field values are verified\n      properties:\n        type:\n          description: String with value PassThrough\n          example: a string value\n          type: string\n        verificationSettings:\n          $ref: \"#/components/schemas/VerificationSettings\"\n      required:\n        - type\n        - verificationSettings\n      type: object\n    Patch:\n      description: \"A set of changes described in JSON Patch format: http://jsonpatch.com/ (RFC 6902)\"\n      items:\n        properties:\n          op:\n            enum:\n              - add\n              - replace\n              - remove\n              - copy\n              - test\n            type: string\n          path:\n            example: a string value\n            type: string\n          value: {}\n        required:\n          - op\n          - path\n        type: object\n      type: array\n    PulsarDataExporterConfig:\n      description: The configuration for kafka access\n      properties:\n        namespace:\n          description: Namespace\n          example: a string value\n          type: string\n        tenant:\n          description: Tenant\n          example: a string value\n          type: string\n        topic:\n          description: Topic\n          example: a string value\n          type: string\n        uri:\n          description: URI of the pulsar server\n          items:\n            example: a string value\n            type: string\n          type: array\n      required:\n        - uri\n        - tenant\n        - namespace\n        - topic\n      type: object\n    Quotas:\n      description: Quotas state for an api key on a service group\n      properties:\n        authorizedCallsPerDay:\n          description: The number of authorized calls per day\n          example: 123\n          format: int64\n          type: integer\n        authorizedCallsPerMonth:\n          description: The number of authorized calls per month\n          example: 123\n          format: int64\n          type: integer\n        authorizedCallsPerSec:\n          description: The number of authorized calls per second\n          example: 123\n          format: int64\n          type: integer\n        currentCallsPerDay:\n          description: The current number of calls per day\n          example: 123\n          format: int64\n          type: integer\n        currentCallsPerMonth:\n          description: The current number of calls per month\n          example: 123\n          format: int64\n          type: integer\n        currentCallsPerSec:\n          description: The current number of calls per second\n          example: 123\n          format: int64\n          type: integer\n        remainingCallsPerDay:\n          description: The remaining number of calls per day\n          example: 123\n          format: int64\n          type: integer\n        remainingCallsPerMonth:\n          description: The number of authorized calls per month\n          example: 123\n          format: int64\n          type: integer\n        remainingCallsPerSec:\n          description: The remaining number of calls per second\n          example: 123\n          format: int64\n          type: integer\n      required:\n        - authorizedCallsPerSec\n        - currentCallsPerSec\n        - remainingCallsPerSec\n        - authorizedCallsPerDay\n        - currentCallsPerDay\n        - remainingCallsPerDay\n        - authorizedCallsPerMonth\n        - currentCallsPerMonth\n        - remainingCallsPerMonth\n      type: object\n    RSAlgoSettings:\n      description: Settings for an HMAC + SHA signing algorithm\n      properties:\n        privateKey:\n          description: The private key for the RSA function\n          example: a string value\n          type: string\n        publicKey:\n          description: The public key for the RSA function\n          example: a string value\n          type: string\n        size:\n          description: Size for SHA function. can be 256, 384 or 512\n          example: 123123\n          format: int32\n          type: integer\n        type:\n          description: String with value RSAlgoSettings\n          example: a string value\n          type: string\n      required:\n        - type\n        - size\n        - publicKey\n      type: object\n    RedirectionSettings:\n      description: The configuration for redirection per service\n      properties:\n        code:\n          description: The http redirect code\n          example: 123123\n          format: int32\n          type: integer\n        enabled:\n          description: Whether or not redirection is enabled\n          example: true\n          type: boolean\n        to:\n          description: The location for redirection\n          example: a string value\n          type: string\n      required:\n        - enabled\n        - to\n        - code\n      type: object\n    RefJwtVerifier:\n      description: Reference to a global JWT verifier\n      properties:\n        enabled:\n          description: Is it enabled\n          example: true\n          type: boolean\n        id:\n          description: The id of the GlobalJWTVerifier\n          example: a string value\n          type: string\n        type:\n          description: A string with value 'ref'\n          example: a string value\n          type: string\n      required:\n        - type\n        - id\n        - enabled\n      type: object\n    Script:\n      description: \"A script to transformer otoroshi requests \"\n      properties:\n        code:\n          additionalProperties:\n            type: string\n          description: The code of the script\n          example:\n            key: value\n          type: object\n        desc:\n          additionalProperties:\n            type: string\n          description: The description of the script\n          example:\n            key: value\n          type: object\n        id:\n          description: The id of the script\n          example: a string value\n          type: string\n        name:\n          description: The name of the script\n          example: a string value\n          type: string\n      required:\n        - id\n        - name\n        - desc\n        - code\n      type: object\n    ScriptCompilationError:\n      description: The error of the compilation of a Script\n      properties:\n        column:\n          description: The column of the error\n          example: a string value\n          type: string\n        file:\n          additionalProperties:\n            type: string\n          description: The file where the error is located\n          example:\n            key: value\n          type: object\n        line:\n          description: The line of the error\n          example: a string value\n          type: string\n        message:\n          additionalProperties:\n            type: string\n          description: The message to display for the error\n          example:\n            key: value\n          type: object\n        rawMessage:\n          additionalProperties:\n            type: string\n          description: The raw message from the compiler\n          example:\n            key: value\n          type: object\n      required:\n        - line\n        - column\n        - file\n        - rawMessage\n        - message\n      type: object\n    ScriptCompilationResult:\n      description: The result of the compilation of a Script\n      properties:\n        done:\n          description: Is the task done or not\n          example: true\n          type: boolean\n        error:\n          $ref: \"#/components/schemas/ScriptCompilationError\"\n      required:\n        - done\n      type: object\n    Service:\n      description: An otoroshi service descriptor. Represent a forward HTTP call on a domain to another location with some optional api management mecanism\n      properties:\n        Canary:\n          $ref: \"#/components/schemas/Canary\"\n        additionalHeaders:\n          additionalProperties:\n            type: string\n          description: Specify headers that will be added to each client request. Useful to add authentication\n          example:\n            key: value\n          type: object\n        api:\n          $ref: \"#/components/schemas/ExposedApi\"\n        authConfigRef:\n          description: A reference to a global auth module config\n          example: a string value\n          type: string\n        buildMode:\n          description: Display a construction page when a user try to use the service\n          example: true\n          type: boolean\n        chaosConfig:\n          $ref: \"#/components/schemas/ChaosConfig\"\n        clientConfig:\n          $ref: \"#/components/schemas/ClientConfig\"\n        clientValidatorRef:\n          description: A reference to validation authority\n          example: a string value\n          type: string\n        cors:\n          $ref: \"#/components/schemas/CorsSettings\"\n        domain:\n          description: The domain on which the service is available.\n          example: a string value\n          type: string\n        enabled:\n          description: Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist\n          example: true\n          type: boolean\n        enforceSecureCommunication:\n          description: When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside\n          example: true\n          type: boolean\n        env:\n          description: The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'\n          example: a string value\n          type: string\n        forceHttps:\n          description: Will force redirection to https:// if not present\n          example: true\n          type: boolean\n        groups:\n          description: Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group\n          example:\n            - a string value\n          items:\n            example: a string value\n            type: string\n          type: array\n        gzip:\n          $ref: \"#/components/schemas/Gzip\"\n        headersVerification:\n          additionalProperties:\n            type: string\n          description: Specify headers that will be verified after routing.\n          example:\n            key: value\n          type: object\n        healthCheck:\n          $ref: \"#/components/schemas/HealthCheck\"\n        id:\n          description: A unique random string to identify your service\n          example: 110e8400-e29b-11d4-a716-446655440000\n          format: uuid\n          type: string\n        ipFiltering:\n          $ref: \"#/components/schemas/IpFiltering\"\n        jwtVerifier:\n          oneOf:\n            - $ref: \"#/components/schemas/LocalJwtVerifier\"\n            - $ref: \"#/components/schemas/RefJwtVerifier\"\n        localHost:\n          description: The host used localy, mainly localhost:xxxx\n          example: a string value\n          type: string\n        localScheme:\n          description: The scheme used localy, mainly http\n          example: a string value\n          type: string\n        maintenanceMode:\n          description: Display a maintainance page when a user try to use the service\n          example: true\n          type: boolean\n        matchingHeaders:\n          additionalProperties:\n            type: string\n          description: Specify headers that MUST be present on client request to route it. Useful to implement versioning\n          example:\n            key: value\n          type: object\n        matchingRoot:\n          description: The root path on which the service is available\n          example: a string value\n          type: string\n        metadata:\n          additionalProperties:\n            type: string\n          description: Just a bunch of random properties\n          example:\n            key: value\n          type: object\n        name:\n          description: The name of your service. Only for debug and human readability purposes\n          example: a string value\n          type: string\n        overrideHost:\n          description: Host header will be overriden with Host of the target\n          example: true\n          type: boolean\n        privateApp:\n          description: When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain\n          example: true\n          type: boolean\n        privatePatterns:\n          description: If you define a public pattern that is a little bit too much, you can make some of public URL private again\n          items:\n            example: a string value\n            type: string\n          type: array\n        publicPatterns:\n          description: By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'\n          items:\n            example: a string value\n            type: string\n          type: array\n        redirectToLocal:\n          description: If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests\n          example: true\n          type: boolean\n        redirection:\n          $ref: \"#/components/schemas/RedirectionSettings\"\n        root:\n          description: Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar\n          example: a string value\n          type: string\n        secComExcludedPatterns:\n          description: URI patterns excluded from secured communications\n          items:\n            example: a string value\n            type: string\n          type: array\n        secComSettings:\n          oneOf:\n            - $ref: \"#/components/schemas/HSAlgoSettings\"\n            - $ref: \"#/components/schemas/RSAlgoSettings\"\n            - $ref: \"#/components/schemas/ESAlgoSettings\"\n            - $ref: \"#/components/schemas/JWKSAlgoSettings\"\n        sendOtoroshiHeadersBack:\n          description: When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...\n          example: true\n          type: boolean\n        statsdConfig:\n          $ref: \"#/components/schemas/StatsdConfig\"\n        subdomain:\n          description: The subdomain on which the service is available\n          example: a string value\n          type: string\n        targets:\n          description: The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures\n          items:\n            $ref: \"#/components/schemas/Target\"\n          type: array\n        transformerRef:\n          description: A reference to a request transformer\n          example: a string value\n          type: string\n        userFacing:\n          description: The fact that this service will be seen by users and cannot be impacted by the Snow Monkey\n          example: true\n          type: boolean\n        xForwardedHeaders:\n          description: Send X-Forwarded-* headers\n          example: true\n          type: boolean\n      required:\n        - id\n        - groups\n        - name\n        - env\n        - domain\n        - subdomain\n        - targets\n        - root\n        - enabled\n        - privateApp\n        - forceHttps\n        - maintenanceMode\n        - buildMode\n        - enforceSecureCommunication\n      type: object\n    Sign:\n      description: Strategy where signature and field values are verified, and then token si re-signed\n      properties:\n        algoSettings:\n          oneOf:\n            - $ref: \"#/components/schemas/HSAlgoSettings\"\n            - $ref: \"#/components/schemas/RSAlgoSettings\"\n            - $ref: \"#/components/schemas/ESAlgoSettings\"\n            - $ref: \"#/components/schemas/JWKSAlgoSettings\"\n        type:\n          description: String with value Sign\n          example: a string value\n          type: string\n        verificationSettings:\n          $ref: \"#/components/schemas/VerificationSettings\"\n      required:\n        - type\n        - verificationSettings\n        - algoSettings\n      type: object\n    SimpleAdmin:\n      description: Administrator using just login/password tuple to access Otoroshi\n      properties:\n        createdAt:\n          description: The creation date of the user\n          example: 123\n          format: int64\n          type: integer\n        label:\n          description: The label for the user\n          example: a string value\n          type: string\n        password:\n          description: The hashed password of the user\n          example: a string value\n          type: string\n        username:\n          description: The email address of the user\n          example: a string value\n          type: string\n      required:\n        - username\n        - label\n        - password\n        - createdAt\n      type: object\n    SnowMonkeyConfig:\n      description: Configuration for the faults that can be injected in requests. The name Snow Monkey is an hommage to Netflix's Chaos Monkey 😉\n      properties:\n        chaosConfig:\n          $ref: \"#/components/schemas/ChaosConfig\"\n        dryRun:\n          description: Whether or not outages will actualy impact requests\n          example: true\n          type: boolean\n        enabled:\n          description: Whether or not this config is enabled\n          example: true\n          type: boolean\n        includeUserFacingDescriptors:\n          description: Whether or not user facing apps. will be impacted by Snow Monkey\n          example: true\n          type: boolean\n        outageDurationFrom:\n          description: Start of outage duration range\n          example: 123123\n          format: int32\n          type: integer\n        outageDurationTo:\n          description: End of outage duration range\n          example: 123123\n          format: int32\n          type: integer\n        outageStrategy:\n          $ref: \"#/components/schemas/OutageStrategy\"\n          description: \"\"\n        startTime:\n          description: Start time of Snow Monkey each day\n          example: 17:32:28.000\n          format: time\n          type: string\n        stopTime:\n          description: Stop time of Snow Monkey each day\n          example: 17:32:28.000\n          format: time\n          type: string\n        targetGroups:\n          description: Groups impacted by Snow Monkey. If empty, all groups will be impacted\n          items:\n            example: a string value\n            type: string\n          type: array\n        timesPerDay:\n          description: Number of time per day each service will be outage\n          example: 123123\n          format: int32\n          type: integer\n      required:\n        - enabled\n        - outageStrategy\n        - includeUserFacingDescriptors\n        - dryRun\n        - timesPerDay\n        - startTime\n        - stopTime\n        - outageDurationFrom\n        - outageDurationTo\n        - targetGroups\n        - chaosConfig\n      type: object\n    Stats:\n      description: Live stats for a service or globally\n      properties:\n        calls:\n          description: Number of calls on the specified service or globally\n          example: 123\n          format: int64\n          type: integer\n        concurrentHandledRequests:\n          description: The number of concurrent request currently\n          example: 123\n          format: int64\n          type: integer\n        dataIn:\n          description: The amount of data sent to the specified service or Otoroshi globally\n          example: 123\n          format: int64\n          type: integer\n        dataInRate:\n          description: The rate of data sent to the specified service or Otoroshi globally\n          example: 42.2\n          format: double\n          type: number\n        dataOut:\n          description: The amount of data sent from the specified service or Otoroshi globally\n          example: 123\n          format: int64\n          type: integer\n        dataOutRate:\n          description: The rate of data sent from the specified service or Otoroshi globally\n          example: 42.2\n          format: double\n          type: number\n        duration:\n          description: The average duration for a call\n          example: 42.2\n          format: double\n          type: number\n        overhead:\n          description: The average overhead time induced by Otoroshi for each call\n          example: 42.2\n          format: double\n          type: number\n        rate:\n          description: The rate of data sent from and to the specified service or Otoroshi globally\n          example: 42.2\n          format: double\n          type: number\n      required:\n        - calls\n        - dataIn\n        - dataOut\n        - rate\n        - duration\n        - overhead\n        - dataInRate\n        - dataOutRate\n        - concurrentHandledRequests\n      type: object\n    StatsdConfig:\n      description: The configuration for statsd metrics push\n      properties:\n        datadog:\n          description: Datadog agent\n          example: true\n          type: boolean\n        host:\n          description: The host of the StatsD agent\n          example: a string value\n          type: string\n        port:\n          description: The port of the StatsD agent\n          example: 123123\n          format: int32\n          type: integer\n      required:\n        - host\n        - port\n        - datadog\n      type: object\n    Target:\n      description: A Target is where an HTTP call will be forwarded in the end from a service domain\n      properties:\n        host:\n          description: The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port\n          example: www.google.com\n          format: hostname\n          type: string\n        scheme:\n          description: The protocol used for communication. Can be http or https\n          example: a string value\n          type: string\n      required:\n        - host\n        - scheme\n      type: object\n    Transform:\n      description: Strategy where signature and field values are verified, trasnformed and then token si re-signed\n      properties:\n        algoSettings:\n          oneOf:\n            - $ref: \"#/components/schemas/HSAlgoSettings\"\n            - $ref: \"#/components/schemas/RSAlgoSettings\"\n            - $ref: \"#/components/schemas/ESAlgoSettings\"\n            - $ref: \"#/components/schemas/JWKSAlgoSettings\"\n        transformSettings:\n          $ref: \"#/components/schemas/TransformSettings\"\n        type:\n          description: String with value Transform\n          example: a string value\n          type: string\n        verificationSettings:\n          $ref: \"#/components/schemas/VerificationSettings\"\n      required:\n        - type\n        - verificationSettings\n        - algoSettings\n      type: object\n    TransformSettings:\n      description: Settings to transform a JWT token and its location\n      properties:\n        location:\n          oneOf:\n            - $ref: \"#/components/schemas/InQueryParam\"\n            - $ref: \"#/components/schemas/InHeader\"\n            - $ref: \"#/components/schemas/InCookie\"\n        mappingSettings:\n          $ref: \"#/components/schemas/MappingSettings\"\n      required:\n        - location\n        - mappingSettings\n      type: object\n    U2FAdmin:\n      description: Administrator using FIDO U2F device to access Otoroshi\n      properties:\n        createdAt:\n          description: The creation date of the user\n          example: 123\n          format: int64\n          type: integer\n        label:\n          description: The label for the user\n          example: a string value\n          type: string\n        password:\n          description: The hashed password of the user\n          example: a string value\n          type: string\n        registration:\n          additionalProperties:\n            type: string\n          description: The U2F registration slug\n          example:\n            key: value\n          type: object\n        username:\n          description: The email address of the user\n          example: a string value\n          type: string\n      required:\n        - username\n        - label\n        - password\n        - createdAt\n        - registration\n      type: object\n    ValidationAuthority:\n      description: Settings to access a validation authority server\n      properties:\n        alwaysValid:\n          description: Bypass http calls, every certificates are valids\n          example: true\n          type: boolean\n        badTtl:\n          description: The TTL for invalid access response caching\n          example: 123\n          format: int64\n          type: integer\n        description:\n          description: The description of the settings\n          example: a string value\n          type: string\n        goodTtl:\n          description: The TTL for valid access response caching\n          example: 123\n          format: int64\n          type: integer\n        headers:\n          additionalProperties:\n            type: string\n          description: HTTP call headers\n          example:\n            key: value\n          type: object\n        host:\n          description: The host of the server\n          example: a string value\n          type: string\n        id:\n          description: The id of the settings\n          example: a string value\n          type: string\n        method:\n          description: The HTTP method\n          example: a string value\n          type: string\n        name:\n          description: The name of the settings\n          example: a string value\n          type: string\n        noCache:\n          description: Avoid caching responses\n          example: true\n          type: boolean\n        path:\n          description: The URL path\n          example: a string value\n          type: string\n        timeout:\n          description: The call timeout\n          example: 123\n          format: int64\n          type: integer\n        url:\n          description: The URL of the server\n          example: a string value\n          type: string\n      required:\n        - id\n        - name\n        - description\n        - url\n        - host\n        - goodTtl\n        - badTtl\n        - method\n        - path\n        - timeout\n        - noCache\n        - alwaysValid\n        - headers\n      type: object\n    VerificationSettings:\n      description: Settings to verify the value of JWT token fields\n      properties:\n        fields:\n          additionalProperties:\n            type: string\n          description: Fields to verify with their values\n          example:\n            key: value\n          type: object\n        mappingSettings:\n          $ref: \"#/components/schemas/MappingSettings\"\n      required:\n        - fields\n      type: object\n    Webhook:\n      description: A callback URL where events are posted\n      properties:\n        headers:\n          additionalProperties:\n            type: string\n          description: Headers to authorize the call or whatever\n          example:\n            key: value\n          type: object\n        url:\n          description: The URL where events are posted\n          example: http://www.google.com\n          format: uri\n          type: string\n      required:\n        - url\n        - headers\n      type: object\n    whebhookConfig:\n      description: The configuration for webhook\n      properties:\n        headers:\n          additionalProperties:\n            type: string\n          description: Optional headers\n          example:\n            key: value\n          type: object\n        url:\n          description: URLs of the webhook\n          items:\n            example: a string value\n            type: string\n          type: array\n      required:\n        - servers\n      type: object\n  securitySchemes:\n    otoroshi_auth:\n      scheme: basic\n      type: http\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/maif.local/otoroshi/1.5.0-dev/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/maif.local/otoroshi/1.5.0-dev/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/auths/{id}\": get: responses: 200: contents: application/json: generate schema: oneOf: collect variants: oneOf[2]: field jwtVerifier: oneOf: oneOf GenericOauth2ModuleConfigJwtVerifier: variant ESAlgoSettings: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"discriminator inference",
		"unsupported content types"
	]
}