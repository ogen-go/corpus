{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bundesAPI/strahlenschutz-api"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 9671,
			"content": "openapi: 3.0.0\ninfo:\n  title: ODL-Info API\n  description: Daten zur radioaktiven Belastung in Deutschland. Weitere Informationen unter https://odlinfo.bfs.de/ODL/DE/service/datenschnittstelle/datenschnittstelle_node.html. \n  version: 1.0.0\nservers:\n  - url: https://www.imis.bfs.de/ogc/opendata/ows\ncomponents:\n  schemas:\n    NormalFeatureProperties:\n      type: object\n      description: Grundlegende Werte eines einzelnen Datenpunktes\n      properties:\n        id:\n          type: string\n          description: Internationale ID der Messstelle\n          example: \"DEZ2096\"\n        kenn:\n          type: string\n          description: Interne Messstellenkennung\n          example: \"066340191\"\n        plz:\n          type: string\n          description: PLZ der Messstelle\n          example: \"36280\"\n        name:\n          type: string\n          description: Name/Ortsname der Messstelle\n          example: \"Oberaula\"\n        start_measure:\n          type: string\n          format: date-time\n          description: Startzeitpunkt der Messperiode für den gegebenen Messwert als ISO-Datetime\n          example: \"2021-11-30T20:00:00Z\"\n        end_measure:\n          type: string\n          format: date-time\n          description: Endzeitpunkt der Messperiode für den gegebenen Messwert als ISO-Datetime\n          example: \"2021-11-30T21:00:00Z\"\n        value:\n          type: number\n          description: Der Messwert in `unit` (setzt sich aus `value_cosmic` und `value_terrestrial` zusammen)\n          example: 0.124\n        unit:\n          type: string\n          description: Einheit der Messwerte\n          example: \"µSv/h\"\n        validated:\n          type: number\n          enum: [1, 2]\n          description: \u003e\n            Prüfstatus des Messwertes:\n              * `1` - geprüft\n              * `2` - ungeprüft\n        nuclide:\n          type: string\n          description: Bezeichnung der Messgröße\n          example: \"Gamma-ODL-Brutto\"\n        duration:\n          type: string\n          enum: [1h, 1d]\n          description: \u003e\n            Dauer der Messperiode\n              * `1h` - eine Stunde\n              * `1d` - ein Tag\n    ExtendedFeatureProperties:\n      type: object\n      description: Erweiterte Werte eines einzelnen Datenpunktes\n      allOf:\n        - $ref: '#/components/schemas/NormalFeatureProperties'\n      properties:\n        site_status:\n          type: number\n          enum: [1, 2, 3]\n          description: \u003e\n            Status der Messstelle:\n              * `1` - In Betrieb\n              * `2` - Defekt\n              * `3` - Testbetrieb\n        site_status_text:\n          type: string\n          description: Status der Messstelle als Text\n          example: \"in Betrieb\"\n        kid:\n          type: number\n          enum: [1, 2, 3, 4, 5, 6]\n          description: \u003e\n            ID des Messnetzknotens, dem die Messstelle zugeordnet ist:\n              * `1` - Freiburg\n              * `2` - Berlin\n              * `3` - München\n              * `4` - Bonn\n              * `5` - Salzgitter\n              * `6` - Rendsburg\n        height_above_sea:\n          type: number\n          description: Höhe der Messstelle über NN (Normal Null, Meereshöhe)\n          example: 380\n        value_cosmic:\n          type: number\n          description: Kosmischer Anteil in `unit`\n          example: 0.047\n        value_terrestrial:\n          type: number\n          description: Terrestrischer Anteil in `unit`\n          example: 0.077\n    GeometryPoint:\n      type: object\n      description: Koordinaten der Messstelle\n      properties:\n        type:\n          type: string\n          enum: [Point]\n          description: Point-Feld, immer `Point`\n        coordinates:\n          type: array\n          description: Koordinaten des Punkts (erster Wert Längengrad, zweiter Wert Breitengrad)\n          minItems: 2\n          maxItems: 2\n          items:\n            type: number\n    BaseFeature:\n      type: object\n      description: Abstrakter Datenpunkt mit grundlegenden Werten. Entspricht einem `Feature` in GeoJSON.\n      properties:\n        type:\n          type: string\n          enum: [Feature]\n          description: Feature-Feld, immer `Feature`\n        id:\n          type: string\n          description: ID des Features, setzt sich zusammen aus dem Name des Layers und einer eindeutigen ID\n          example: \"odlinfo_odl_1h_latest.fid-764e3717_17d72ce7d3d_52d7\"\n        geometry:\n          $ref: '#/components/schemas/GeometryPoint'\n        geometry_name:\n          type: string\n          enum: [geom]\n          description: Geometriename, immer `geom`\n    NormalFeature:\n      type: object\n      description: Einzelner Datenpunkt, der nur über den normalen Umfang an Werten verfügt\n      allOf:\n        - $ref: '#/components/schemas/BaseFeature'\n      properties:\n        properties:\n          $ref: '#/components/schemas/NormalFeatureProperties'\n    ExtendedFeature:\n      type: object\n      description: Einzelner Datenpunkt, der nur über den erweiterten Umfang an Werten verfügt\n      allOf:\n        - $ref: '#/components/schemas/BaseFeature'\n      properties:\n        properties:\n          $ref: '#/components/schemas/ExtendedFeatureProperties'\n    BaseSchema:\n      description: Abstraktes Standardschema der API. Diese Ebene entspricht einer `FeatureCollection` in GeoJSON.\n      type: object\n      properties:\n        type:\n          type: string\n          enum: [FeatureCollection]\n          description: FeatureCollection-Feld, immer `FeatureCollection`\n        totalFeatures:\n          type: number\n          description: Anzahl der insgesamt gefundenen Datensätze\n          example: 1722\n        numberReturned:\n          type: number\n          description: Anzahl zurückgegebener Datensätze, also die Länge von `features`. Kleinergleich `totalFeatures`.\n          example: 1000\n        timeStamp:\n          type: string\n          format: date-time\n          description: Zeitstempel der Antwort\n          example: \"2021-11-30T22:01:25.691Z\"\n    NormalSchema:\n      description: Schema für Endpunkte, die den grundlegen Umfang an Messwerten pro Datenpunkt bereitstellen.\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/BaseSchema'\n      properties:\n        features:\n          type: array\n          description: Liste einzelner Datensätze\n          items:\n            $ref: '#/components/schemas/NormalFeature'\n    ExtendedSchema:\n      description: Schema für Endpunkte, die den erweiterten Umfang an Messwerten pro Datenpunkt bereitstellen.\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/BaseSchema'\n      properties:\n        features:\n          type: array\n          description: Liste einzelner Datensätze\n          items:\n            $ref: '#/components/schemas/ExtendedFeature'\n\npaths:\n  /:\n    get:\n      summary: Hauptendpunkt\n      parameters:\n        - in: query\n          name: service\n          required: true\n          description: Name des Service der benutzt werden soll. Aktuell immer `WFS`.\n          schema:\n            type: string\n            enum: [WFS]\n        - in: query\n          name: request\n          required: true\n          description: Name der OWS-Request. Aktuell immer `GetFeature`.\n          schema:\n            type: string\n            enum: [GetFeature]\n        - in: query\n          name: typeName\n          description: \u003e\n            Name des Datenlayers, das benutzt werden soll.\n              * `odlinfo_odl_1h_latest` - Liste der Messstellen inklusive dem jeweils letzten 1-Stunden-Messwert\n              * `odlinfo_timeseries_odl_1h` - Zeitreihe mit 1-Stunden-Messdaten\n              * `odlinfo_timeseries_odl_24h` - Zeitreihe mit 24-Stunden-Messdaten\n          schema:\n            type: string\n            enum: [opendata:odlinfo_odl_1h_latest, opendata:odlinfo_timeseries_odl_1h, opendata:odlinfo_timeseries_odl_24h]\n        - in: query\n          name: outputFormat\n          required: true\n          description: Ausgabeformat. Aktuell immer `application/json`.\n          schema:\n            type: string\n            enum: [application/json]\n        - in: query\n          name: viewparams\n          description: \u003e\n            Nur in Kombination mit historischen Daten (also nur Layer ohne `_latest`) relevant. \n            Genutzt zur Angabe einer spezifischen Messstelle mittels `kenn`-Wert.\n          schema:\n            type: string\n            example: \"kenn:031020004\"\n        - in: query\n          name: sortBy\n          description: \u003e\n            Hier kann ein Feld von `properties` (also den zurückgegebenen Datenpunkten) angegeben werden, dann wird nach diesem aufsteigend sortiert.\n            Wird an den Namen des Feldes noch `+D` angehängt, so wird absteigend sortiert.\n          schema:\n            type: string\n            example: \"end_measure+D\"\n        - in: query\n          name: maxFeatures\n          description: Maximale Anzahl an Datenpunkten die zurückgegeben werden soll.\n          schema:\n            type: number\n            example: 100\n        - in: query\n          name: startIndex\n          description: Offset, von dem aus Datenpunkte zurückgegeben werden sollen. Kann in Kombination mit `maxFeatures` genutzt werden, um Pagination zu ermöglichen.\n          schema:\n            type: number\n\n      responses:\n        '200':\n          description: Erfolgreicher Abruf - je nach Layer werden entweder grundlegende oder erweiterte Werte pro Datenpunkt zurückgegeben.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/NormalSchema'\n                  - $ref: '#/components/schemas/ExtendedSchema'\n",
			"canonicalURL": "/github.com/bundesAPI/strahlenschutz-api@172c6b1d8a5f8c16da79aaa09e2b13da847694a8/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/bundesAPI/strahlenschutz-api/blob/172c6b1d8a5f8c16da79aaa09e2b13da847694a8/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/\": get: responses: 200: contents: application/json: generate schema: oneOf: collect variants: GetOK: sum types with same names not implemented",
	"NotImplemented": [
		"sum types with same names"
	]
}