{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenAPITools/openapi-generator"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "samples/client/petstore/java/okhttp-gson-group-parameter/api/openapi.yaml",
			"byteSize": 12376,
			"content": "openapi: 3.0.0\ninfo:\n  description: \"This is a sample server Petstore server. For this sample, you can\\\n    \\ use the api key `special-key` to test the authorization filters.\"\n  license:\n    name: Apache-2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  title: OpenAPI Petstore\n  version: 1.0.0\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n- url: http://petstore.swagger.io/v2\ntags:\n- description: Everything about your Pets\n  name: pet\n- description: Access to Petstore orders\n  name: store\n- description: Operations about user\n  name: user\npaths:\n  /pet:\n    post:\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n          description: successful operation\n        \"405\":\n          description: Invalid input\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Add a new pet to the store\n      tags:\n      - pet\n      x-content-type: application/json\n      x-accepts: application/json\n    put:\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n          description: successful operation\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Update an existing pet\n      tags:\n      - pet\n      x-content-type: application/json\n      x-accepts: application/json\n  /pet/findByStatus:\n    get:\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n      - deprecated: true\n        description: Status values that need to be considered for filter\n        explode: false\n        in: query\n        name: status\n        required: true\n        schema:\n          items:\n            default: available\n            enum:\n            - available\n            - pending\n            - sold\n            type: string\n          type: array\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n          description: successful operation\n        \"400\":\n          description: Invalid status value\n      security:\n      - petstore_auth:\n        - read:pets\n      summary: Finds Pets by status\n      tags:\n      - pet\n      x-accepts: application/json\n  /pet/findByTags:\n    get:\n      deprecated: true\n      description: \"Multiple tags can be provided with comma separated strings. Use\\\n        \\ tag1, tag2, tag3 for testing.\"\n      operationId: findPetsByTags\n      parameters:\n      - description: Tags to filter by\n        explode: false\n        in: query\n        name: tags\n        required: true\n        schema:\n          items:\n            type: string\n          type: array\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n          description: successful operation\n        \"400\":\n          description: Invalid tag value\n      security:\n      - petstore_auth:\n        - read:pets\n      summary: Finds Pets by tags\n      tags:\n      - pet\n      x-accepts: application/json\n  /pet/{petId}:\n    delete:\n      description: \"\"\n      operationId: deletePet\n      parameters:\n      - explode: false\n        in: header\n        name: api_key\n        required: false\n        schema:\n          type: string\n        style: simple\n      - description: Pet id to delete\n        explode: false\n        in: path\n        name: petId\n        required: true\n        schema:\n          format: int64\n          type: integer\n        style: simple\n      responses:\n        \"400\":\n          description: Invalid pet value\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Deletes a pet\n      tags:\n      - pet\n      x-accepts: application/json\n    get:\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n      - description: ID of pet to return\n        explode: false\n        in: path\n        name: petId\n        required: true\n        schema:\n          format: int64\n          type: integer\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n          description: successful operation\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n      security:\n      - api_key: []\n      summary: Find pet by ID\n      tags:\n      - pet\n      x-accepts: application/json\n    post:\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n      - description: ID of pet that needs to be updated\n        explode: false\n        in: path\n        name: petId\n        required: true\n        schema:\n          format: int64\n          type: integer\n        style: simple\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/updatePetWithForm_request'\n      responses:\n        \"405\":\n          description: Invalid input\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Updates a pet in the store with form data\n      tags:\n      - pet\n      x-group-parameters: false\n      x-content-type: application/x-www-form-urlencoded\n      x-accepts: application/json\n  /pet/{petId}/uploadImage:\n    post:\n      description: \"\"\n      operationId: uploadFile\n      parameters:\n      - description: ID of pet to update\n        explode: false\n        in: path\n        name: petId\n        required: true\n        schema:\n          format: int64\n          type: integer\n        style: simple\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/uploadFile_request'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: successful operation\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: uploads an image\n      tags:\n      - pet\n      x-content-type: multipart/form-data\n      x-accepts: application/json\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: '#/components/schemas/User'\n            type: array\n      description: List of user object\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Pet'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/Pet'\n      description: Pet object that needs to be added to the store\n      required: true\n  schemas:\n    Order:\n      description: An order for a pets from the pet store\n      properties:\n        id:\n          format: int64\n          type: integer\n        petId:\n          format: int64\n          type: integer\n        quantity:\n          format: int32\n          type: integer\n        shipDate:\n          format: date-time\n          type: string\n        status:\n          description: Order Status\n          enum:\n          - placed\n          - approved\n          - delivered\n          type: string\n        complete:\n          default: false\n          type: boolean\n      title: Pet Order\n      type: object\n      xml:\n        name: Order\n    Category:\n      description: A category for a pet\n      example:\n        name: name\n        id: 6\n      properties:\n        id:\n          format: int64\n          type: integer\n        name:\n          pattern: \"^[a-zA-Z0-9]+[a-zA-Z0-9\\\\.\\\\-_]*[a-zA-Z0-9]+$\"\n          type: string\n      title: Pet category\n      type: object\n      xml:\n        name: Category\n    User:\n      description: A User who is purchasing from the pet store\n      properties:\n        id:\n          format: int64\n          type: integer\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          description: User Status\n          format: int32\n          type: integer\n      title: a User\n      type: object\n      xml:\n        name: User\n    Tag:\n      description: A tag for a pet\n      example:\n        name: name\n        id: 1\n      properties:\n        id:\n          format: int64\n          type: integer\n        name:\n          type: string\n      title: Pet Tag\n      type: object\n      xml:\n        name: Tag\n    Pet:\n      description: A pet for sale in the pet store\n      example:\n        photoUrls:\n        - photoUrls\n        - photoUrls\n        name: doggie\n        id: 0\n        category:\n          name: name\n          id: 6\n        tags:\n        - name: name\n          id: 1\n        - name: name\n          id: 1\n        status: available\n      properties:\n        id:\n          format: int64\n          type: integer\n        category:\n          $ref: '#/components/schemas/Category'\n        name:\n          example: doggie\n          type: string\n        photoUrls:\n          items:\n            type: string\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n        tags:\n          items:\n            $ref: '#/components/schemas/Tag'\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n        status:\n          deprecated: true\n          description: pet status in the store\n          enum:\n          - available\n          - pending\n          - sold\n          type: string\n      required:\n      - name\n      - photoUrls\n      title: a Pet\n      type: object\n      xml:\n        name: Pet\n    ApiResponse:\n      description: Describes the result of uploading an image resource\n      example:\n        code: 0\n        type: type\n        message: message\n      properties:\n        code:\n          format: int32\n          type: integer\n        type:\n          type: string\n        message:\n          type: string\n      title: An uploaded response\n      type: object\n    updatePetWithForm_request:\n      properties:\n        name:\n          description: Updated name of the pet\n          type: string\n        status:\n          description: Updated status of the pet\n          type: string\n      type: object\n    uploadFile_request:\n      properties:\n        additionalMetadata:\n          description: Additional data to pass to server\n          type: string\n        file:\n          description: file to upload\n          format: binary\n          type: string\n      type: object\n  securitySchemes:\n    petstore_auth:\n      flows:\n        implicit:\n          authorizationUrl: http://petstore.swagger.io/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n      type: oauth2\n    api_key:\n      in: header\n      name: api_key\n      type: apiKey\n\n",
			"canonicalURL": "/github.com/OpenAPITools/openapi-generator@3a2bbbb8501f7238dba0dc124234e9e0459cdd9e/-/blob/samples/client/petstore/java/okhttp-gson-group-parameter/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenAPITools/openapi-generator/blob/3a2bbbb8501f7238dba0dc124234e9e0459cdd9e/samples/client/petstore/java/okhttp-gson-group-parameter/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/pet/findByStatus\": get: security: security \"petstore_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}