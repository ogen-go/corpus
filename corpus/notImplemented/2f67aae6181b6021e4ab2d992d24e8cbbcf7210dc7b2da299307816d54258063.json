{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cuplsensor/cuplbackend"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "docs/api/consumer/api.yaml",
			"byteSize": 19270,
			"content": "openapi: 3.0.1\ninfo:\n  title: cupl Consumer API\n  description: API endpoints that do not require token based authentication.\n  contact:\n    url: www.plotsensor.com\n    email: malcolm@plotsensor.com\n  version: 0.0.2\npaths:\n  /tag/{serial}:\n    get:\n      tags:\n      - Tags\n      summary: Get a tag by its serial.\n      operationId: TagGet\n      parameters:\n      - name: serial\n        required: True\n        in: path\n        description: Tag serial\n        schema:\n          type: string\n      responses:\n        200:\n          description: A tag object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n        400:\n          description: Bad input parameter.\n          content:\n            application/json:\n              schema:\n                type: object\n        404:\n          description: Tag not found.\n          content: {}\n    put:\n      tags:\n        - Tags\n      summary: Edit a tag description.\n      operationId: TagDescriptionPut\n      security:\n        - TagToken: [ ]\n      parameters:\n        - name: serial\n          required: True\n          in: path\n          description: Tag serial\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tag'\n      responses:\n        200:\n          description: A tag object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n        400:\n          description: Bad input parameter.\n          content:\n            application/json:\n              schema:\n                type: object\n        401:\n          description: Not authorised. TagToken is not valid for this tag.\n          content:\n            application/json:\n              schema:\n                type: object\n        404:\n          description: Tag not found.\n          content: { }\n  /tag/{serial}/samples:\n    get:\n      tags:\n        - Tags\n      summary: List unique samples\n      description: List unique samples from a tag, newest first.\n      operationId: UniqueSamplesGet\n      parameters:\n        - name: serial\n          in: path\n          description: Tag serial\n          required: true\n          schema:\n            type: string\n        - name: starttime\n          in: query\n          description: start timestamp as an ISO-8601 string. Defaults\n            to the time the tag was registered (i.e. this returns all unique samples ever taken).\n          schema:\n            type: string\n            format: datetime\n        - name: endtime\n          in: query\n          description: end timestamp as an ISO-8601 string. Defaults to now.\n          schema:\n            type: string\n            format: datetime\n        - name: page\n          in: query\n          description: Page of samples to return.\n          schema:\n            type: integer\n        - name: per_page\n          in: query\n          description: The number of samples per page.\n          schema:\n            type: integer\n      responses:\n        200:\n          description: A list of samples from newest to oldest\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CaptureSample'\n        400:\n          description: bad input parameter\n          content:\n            application/json:\n              schema:\n                type: object\n  /tag/{serial}/captures:\n    get:\n      tags:\n      - Tags\n      summary: List captures\n      operationId: CapturesGet\n      parameters:\n      - name: serial\n        in: path\n        description: Tag serial\n        required: true\n        schema:\n          type: string\n      - name: offset\n        in: query\n        description: Return samples starting from this index.\n        schema:\n          type: integer\n      - name: limit\n        in: query\n        description: Limit the number of samples returned.\n        schema:\n          type: integer\n      responses:\n        200:\n          description: A capture object\n          headers:\n            Link:\n              schema:\n                type: string\n              description: |\n                Links to related resources, in the format defined by\n                [RFC 5988](https://tools.ietf.org/html/rfc5988#section-5).\n                This will include a link with relation type `next` to the\n                next page, if there is a next page.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Capture'\n        400:\n          description: invalid input, object invalid\n          content:\n            application/json:\n              schema:\n                type: object\n        404:\n          description: Tag with serial not found.\n          content:\n            application/json:\n              schema:\n                type: object\n  /captures:\n    post:\n      tags:\n        - Captures\n      summary: Create a capture\n      operationId: CapturesPost\n      requestBody:\n        description: Capture creation fields\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/EncodedCapture'\n        required: true\n      responses:\n        200:\n          description: The newly created Capture with a TagToken.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CaptureWithTagToken'\n        400:\n          description: invalid input, object invalid\n          content:\n            application/json:\n              schema:\n                type: object\n        401:\n          description: Not authorised. HMAC does not correspond to input data.\n          content:\n            application/json:\n              schema:\n                type: object\n        404:\n          description: Tag not found\n          content:\n            application/json:\n              schema:\n                type: object\n        409:\n          description: Conflict. A capture with this HMAC already exists. Dead battery\n            or replay attack.\n          content:\n            application/json:\n              schema:\n                type: object\n      x-codegen-request-body-name: body\n  /capture/{id}:\n    get:\n      tags:\n      - Captures\n      summary: Get a capture by ID\n      operationId: CaptureGet\n      parameters:\n        - name: id\n          in: path\n          description: Capture database ID\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: A capture object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Capture'\n        400:\n          description: invalid input, object invalid\n          content:\n            application/json:\n              schema:\n                type: object\n        404:\n          description: Capture not found.\n          content:\n            application/json:\n              schema:\n                type: object\n  /capture/{id}/samples:\n    get:\n      tags:\n      - Captures\n      summary: List samples.\n      operationId: CaptureSamplesGet\n      parameters:\n      - name: id\n        in: path\n        required: True\n        description: Capture database ID\n        schema:\n          type: integer\n      - name: offset\n        in: query\n        description: Return samples starting from this index.\n        schema:\n          type: integer\n      - name: limit\n        in: query\n        description: Limit the number of samples returned.\n        schema:\n          type: integer\n      responses:\n        200:\n          description: A list of sample objects\n          headers:\n            Link:\n              schema:\n                type: string\n              description: |\n                Links to related resources, in the format defined by\n                [RFC 5988](https://tools.ietf.org/html/rfc5988#section-5).\n                This will include a link with relation type `next` to the\n                next page, if there is a next page.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CaptureSample'\n        400:\n          description: bad input parameter\n          content:\n            application/json:\n              schema:\n                type: object\n  /tag/{serial}/webhook:\n    get:\n      tags:\n      - Webhook\n      summary: Get a webhook.\n      operationId: WebhookGet\n      security:\n        - TagToken: [ ]\n      parameters:\n      - name: serial\n        required: True\n        in: path\n        description: Tag serial\n        schema:\n          type: string\n      responses:\n        200:\n          description: A webhook for this tag\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Webhook'\n        400:\n          description: bad input parameter\n          content:\n            application/json:\n              schema:\n                type: object\n    post:\n      tags:\n        - Webhook\n      summary: Post a webhook.\n      operationId: WebhookPost\n      security:\n        - TagToken: [ ]\n      requestBody:\n        description: Webhook creation fields\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/WebhookWithSecretkey'\n        required: true\n      parameters:\n        - name: serial\n          required: True\n          in: path\n          description: Tag serial\n          schema:\n            type: string\n      responses:\n        200:\n          description: A webhook for this tag\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebhookWithSecretkey'\n        400:\n          description: bad input parameter\n          content:\n            application/json:\n              schema:\n                type: object\n        409:\n          description: Conflict. This tag already has a webhook and only one is allowed.\n          content:\n            application/json:\n              schema:\n                type: object\n    delete:\n      description: Delete a webhook\n      summary: Delete a webhook\n      tags:\n        - Webhook\n      operationId: WebhookDelete\n      security:\n        - TagToken: [ ]\n      parameters:\n        - name: serial\n          required: True\n          in: path\n          description: Tag serial\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Webhook has been deleted\n          content:\n            application/json:\n              schema: { }\n        '404':\n          description: No tag found\n          content:\n            application/json:\n              schema: { }\n\n  /version:\n    get:\n      summary: Get version\n      description: Get cuplbackend version information.\n      operationId: VersionGet\n      responses:\n        '200':\n          description: Version information\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  cuplcodec:\n                    type: string\n                    description: cuplcodec version number. This is a dependency of cuplbackend.\n                    example: \"2.0.6\"\n                  cuplbackend:\n                    type: string\n                    description: cuplbackend version number.\n                    example: \"0.1.4\"\n\nx-webhooks:\n  captureDecoded:\n    post:\n      summary: Capture Decoded\n      description: A capture has been read from a tag and decoded successfully.\n      operationId: captureHook\n      tags:\n        - Captures\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CaptureWithSamples'\n      responses:\n        \"200\":\n          description: Return a 200 status to indicate that the data was received successfully\n\ncomponents:\n  schemas:\n    WebhookWithSecretkey:\n      allOf: # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/Webhook'\n        - type: object\n          properties:\n            wh_secretkey:\n              type: string\n              description: The secret key used to create an HMAC-SHA256 signature in the webhook header. Only returned once by a POST request.\n              example: 4490vasnl456q2l\n    Webhook:\n      title: Webhook\n      type: object\n      properties:\n        address:\n          type: string\n          description: URL to send the POST request to when the tag is scanned. Data are encoded as JSON.\n          example: https://webhook.site/a1b658b6-6b23-4a49-959c-e9b33d20e034\n        fields:\n          type: string\n          description: A string containing a comma separated list of fields to include in the capture webhook.\n          example: '[\"samples\", \"batvoltagemv\"]'\n        created_on:\n          type: string\n          format: date-time\n          readOnly: true\n          example: 2019-01-15T13:09:52.456Z\n    Tag:\n      title: Tag\n      type: object\n      properties:\n        description:\n          type: string\n          description: A free text field that a user can modify. It may be a description of the tag location.\n                       Alternatively, this may be the URL of a linked frontend web application.\n          example: In the kitchen.\n        fwversion:\n          type: string\n          description: Version string for the cuplTag firmware.\n          example: HT04_F1.1_C2\n          readOnly: true\n        hwversion:\n          type: string\n          description: Version string for the cuplTag hardware.\n          example: HT04\n          readOnly: true\n        serial:\n          type: string\n          description: Serial of the tag that made the capture\n          example: YWJjZGVM\n          readOnly: true\n        timeregistered:\n          type: string\n          description: Time the tag was created\n          format: date-time\n          example: 2019-01-15T13:09:52.456\n          readOnly: true\n        webhook:\n          type: integer\n          description: Webhook Id or null if no webhook has been set.\n          example: 3\n          readOnly: true\n    CaptureWithSamples:\n      allOf: # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/Capture'\n        - type: object\n          properties:\n            samples:\n              type: array\n              items:\n                $ref: '#/components/schemas/CaptureSample'\n    CaptureWithTagToken:\n      allOf: # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/Capture'\n        - type: object\n          properties:\n            token:\n              example: eyJz93a...k4laUWw\n              type: string\n            token_type:\n              example: Bearer\n              type: string\n    Capture:\n      title: Capture\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          example: 232\n        tagserial:\n          type: string\n          description: Serial of the tag that made the capture\n          example: YWJjZGVM\n        batvoltagemv:\n          type: integer\n          description: Tag battery voltage in mV.\n          example: 3000\n        cursorpos:\n          type: integer\n          description: Cursor position in the circular buffer.\n          example: 20\n        loopcount:\n          type: integer\n          description: Number of times the circularbuffer pointer has wrapped from\n            the end to the beginning\n          example: 2\n        timeintmins:\n          type: integer\n          description: The time interval between samples in minutes.\n          example: 12\n        timestamp:\n          type: string\n          format: date-time\n          example: 2019-01-15T13:09:52.456Z\n        format:\n          type: integer\n          description: Indicates whether samples in this capture contain temperature and relative humidity readings\n           or just temperature.\n          example: 1\n        status:\n          $ref: '#/components/schemas/CaptureStatus'\n    CaptureSample:\n      title: CaptureSample\n      required:\n      - capture_id\n      - id\n      - temp\n      - timestamp\n      type: object\n      properties:\n        capture_id:\n          type: integer\n          description: ID of the parent Capture object\n          format: int32\n          example: 1\n        id:\n          type: integer\n          description: CaptureSample ID\n          format: int32\n          example: 1\n        rh:\n          type: number\n          description: Relative Humidity in percent\n          format: double\n          example: 55.0\n        temp:\n          type: number\n          description: Temperature in degrees Celsius\n          format: double\n          example: 21.0\n        timestamp:\n          type: string\n          description: Unix timestamp in seconds since January 1st 1970\n          format: date-time\n          example: 2019-01-15T13:09:52.456Z\n    CaptureStatus:\n      title: CaptureStatus\n      type: object\n      properties:\n        id:\n          type: integer\n          description: CaptureStatus ID\n          format: int32\n          example: 1\n        brownout:\n          type: boolean\n          description: True if the cause of the most recentreset was a brown out condition.\n          example: false\n        clockfail:\n          type: boolean\n          description: True if the most recent reset was caused by an MCU clock failure.\n          example: false\n        lpm5wakeup:\n          type: boolean\n          description: True if the MCU has woken up from LPM (Low Power Mode) x.5\n          example: false\n        misc:\n          type: boolean\n          description: True if a reset has occured for miscellaneous reasons\n          example: false\n        resetsalltime:\n          type: integer\n          example: 20\n        supervisor:\n          type: boolean\n          description: True if the supply voltage supervisor caused the most recent\n            reset\n          example: false\n        watchdog:\n          type: boolean\n          description: True if the MCU watchdog caused the most recent reset.\n          example: false\n    EncodedCapture:\n      title: Base64 Encoded Capture\n      type: object\n      properties:\n        serial:\n          type: string\n          description: Serial of the tag that made the capture\n          example: YWJjZGVM\n        circbufb64:\n          type: string\n          description: Circular buffer including samples encoded as base64.\n          example: Add example here\n        statusb64:\n          type: string\n          description: 12 character status string\n          example: AAAAAAAA\n        timeintb64:\n          type: string\n          description: Time interval in minutes in base64\n          example: Awg=\n        vfmtb64:\n          type: string\n          description: Version and Format encoded in base64. This may be zero padded so remove all but 4 last characters before use.\n          example: \"000000Ae3g\"\n  securitySchemes:\n    TagToken: # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\n",
			"canonicalURL": "/github.com/cuplsensor/cuplbackend@5ae991494ca704b969a580be055b0f7f6c44936b/-/blob/docs/api/consumer/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/cuplsensor/cuplbackend/blob/5ae991494ca704b969a580be055b0f7f6c44936b/docs/api/consumer/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/tag/{serial}/webhook\": post: requestBody: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}