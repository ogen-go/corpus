{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tigrisdata/tigris-api"
		},
		"file": {
			"name": "api_openapi.yaml",
			"size": 0,
			"path": "server/v1/api_openapi.yaml",
			"byteSize": 53247,
			"content": "# Generated with protoc-gen-openapi\n# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi\nopenapi: 3.0.3\ninfo:\n    title: Tigris API Reference\n    description: |-\n        ## Overview\n        This section is organized around HTTP APIs. The APIs accepts JSON requests and returns JSON-encoded responses. The APIs conforms to standard HTTP status codes.\n    license:\n        name: Apache License\n        url: https://github.com/tigrisdata/tigris/blob/main/LICENSE\n    version: 0.0.1\npaths:\n    /api/v1/databases/list:\n        post:\n            tags:\n                - Databases\n            summary: List Databases\n            description: List returns all the databases.\n            operationId: Tigris_ListDatabases\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListDatabasesResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/collections/list:\n        post:\n            tags:\n                - Databases\n            summary: List Collections\n            description: List all collections in the database passed in the request.\n            operationId: Tigris_ListCollections\n            parameters:\n                - name: db\n                  in: path\n                  description: List collection in this database.\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ListCollectionsRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListCollectionsResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/collections/{collection}/createOrUpdate:\n        post:\n            tags:\n                - Collections\n            summary: Create or update a collection\n            description: |-\n                Creates a new collection or atomically upgrades the collection to the new schema changes in the database\n                 passed in the request.\n            operationId: Tigris_CreateOrUpdateCollection\n            parameters:\n                - name: db\n                  in: path\n                  description: Database name where to create collection.\n                  required: true\n                  schema:\n                    type: string\n                - name: collection\n                  in: path\n                  description: Collection name to create.\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CreateOrUpdateCollectionRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CreateOrUpdateCollectionResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/collections/{collection}/describe:\n        post:\n            tags:\n                - Collections\n            summary: Describe Collection\n            description: Describe collection describes the information related to collection.\n            operationId: Tigris_DescribeCollection\n            parameters:\n                - name: db\n                  in: path\n                  description: Name of the database.\n                  required: true\n                  schema:\n                    type: string\n                - name: collection\n                  in: path\n                  description: Name of the collection.\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DescribeCollectionRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DescribeCollectionResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/collections/{collection}/documents/delete:\n        delete:\n            tags:\n                - Documents\n            summary: Delete Documents\n            description: Delete a range of documents in the collection using the condition provided in the filter.\n            operationId: Tigris_Delete\n            parameters:\n                - name: db\n                  in: path\n                  description: Database name where to insert documents.\n                  required: true\n                  schema:\n                    type: string\n                - name: collection\n                  in: path\n                  description: Collection name where to insert documents.\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DeleteRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DeleteResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/collections/{collection}/documents/insert:\n        post:\n            tags:\n                - Documents\n            summary: Insert Documents\n            description: |-\n                Inserts new documents in the collection and returns an AlreadyExists error if any of the documents\n                 in the request already exists. Insert provides idempotency by returning an error if the document\n                 already exists. To replace documents, use REPLACE API instead of INSERT.\n            operationId: Tigris_Insert\n            parameters:\n                - name: db\n                  in: path\n                  description: Database name where to insert documents.\n                  required: true\n                  schema:\n                    type: string\n                - name: collection\n                  in: path\n                  description: Collection name where to insert documents.\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/InsertRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/InsertResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/collections/{collection}/documents/read:\n        post:\n            tags:\n                - Documents\n            summary: Read Documents\n            description: Reads range of documents from the collection using the condition in the filter.\n            operationId: Tigris_Read\n            parameters:\n                - name: db\n                  in: path\n                  description: Database name to read documents from.\n                  required: true\n                  schema:\n                    type: string\n                - name: collection\n                  in: path\n                  description: Collection name to read documents from.\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ReadRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/StreamingReadResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/collections/{collection}/documents/replace:\n        put:\n            tags:\n                - Documents\n            summary: Insert or Replace Documents\n            description: Inserts the documents or replaces the existing documents in the collections.\n            operationId: Tigris_Replace\n            parameters:\n                - name: db\n                  in: path\n                  description: Database name where to replace documents.\n                  required: true\n                  schema:\n                    type: string\n                - name: collection\n                  in: path\n                  description: Collection name where to replace documents.\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/ReplaceRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ReplaceResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/collections/{collection}/documents/search:\n        post:\n            tags:\n                - Documents\n            summary: Search Documents\n            description: Searches a collection for documents matching the query\n            operationId: Tigris_Search\n            parameters:\n                - name: db\n                  in: path\n                  description: Database name to read documents from.\n                  required: true\n                  schema:\n                    type: string\n                - name: collection\n                  in: path\n                  description: Collection name to read documents from.\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/SearchRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/StreamingSearchResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/collections/{collection}/documents/update:\n        put:\n            tags:\n                - Documents\n            summary: Update Documents\n            description: Update a range of documents in the collection using the condition provided in the filter.\n            operationId: Tigris_Update\n            parameters:\n                - name: db\n                  in: path\n                  description: Database name where to update documents\n                  required: true\n                  schema:\n                    type: string\n                - name: collection\n                  in: path\n                  description: Collection name where to update documents\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/UpdateRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/UpdateResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/collections/{collection}/drop:\n        delete:\n            tags:\n                - Collections\n            summary: Drop Collection\n            description: Drop the collection and all its documents in the database passed in the request.\n            operationId: Tigris_DropCollection\n            parameters:\n                - name: db\n                  in: path\n                  description: Database name of the collection.\n                  required: true\n                  schema:\n                    type: string\n                - name: collection\n                  in: path\n                  description: Collection name to drop.\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DropCollectionRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DropCollectionResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/create:\n        post:\n            tags:\n                - Databases\n            summary: Create Database\n            description: Creates a new database and returns a AlreadyExists error if the database already exists.\n            operationId: Tigris_CreateDatabase\n            parameters:\n                - name: db\n                  in: path\n                  description: Create database with this name.\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CreateDatabaseRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CreateDatabaseResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/describe:\n        post:\n            tags:\n                - Databases\n            summary: Describe Database\n            description: |-\n                Describe database describes the information related to database along\n                 with all the collections inside database.\n            operationId: Tigris_DescribeDatabase\n            parameters:\n                - name: db\n                  in: path\n                  description: Name of the database.\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DescribeDatabaseRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DescribeDatabaseResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/drop:\n        delete:\n            tags:\n                - Databases\n            summary: Drop Database\n            description: Drop database deletes all the collections in the database along with all it documents.\n            operationId: Tigris_DropDatabase\n            parameters:\n                - name: db\n                  in: path\n                  description: 'Drop database with this name. **Note**: Deletes all the collections in the database. Use with caution.'\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/DropDatabaseRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/DropDatabaseResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/stream:\n        post:\n            tags:\n                - Streams\n            summary: Stream\n            description: |-\n                Provides real time events for the changes made into the database. Streams by default publish all events for a database\n                 but can be restricted to a specific collection. These events can be useful to build event-driven applications.\n            operationId: Tigris_Stream\n            parameters:\n                - name: db\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/StreamRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/StreamingStreamResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/transactions/begin:\n        post:\n            tags:\n                - Transactions\n            summary: Begin a transaction\n            description: |-\n                Starts a new transaction and returns a transactional object. All reads/writes performed\n                 within a transaction will run with serializable isolation.\n            operationId: Tigris_BeginTransaction\n            parameters:\n                - name: db\n                  in: path\n                  description: Database name this transaction belongs to.\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/BeginTransactionRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/BeginTransactionResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/transactions/commit:\n        post:\n            tags:\n                - Transactions\n            summary: Commit a Transaction\n            description: |-\n                Atomically commit all the changes performed in the context of the transaction. Commit provides all\n                 or nothing semantics by ensuring no partial updates are in the database due to a transaction failure.\n            operationId: Tigris_CommitTransaction\n            parameters:\n                - name: db\n                  in: path\n                  description: Database name this transaction belongs to.\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CommitTransactionRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CommitTransactionResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/databases/{db}/transactions/rollback:\n        post:\n            tags:\n                - Transactions\n            summary: Rollback a transaction\n            description: |-\n                Rollback transaction discards all the changes\n                 performed in the transaction\n            operationId: Tigris_RollbackTransaction\n            parameters:\n                - name: db\n                  in: path\n                  description: Database name this transaction belongs to.\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/RollbackTransactionRequest'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/RollbackTransactionResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /api/v1/info:\n        get:\n            tags:\n                - Admin\n            summary: Information about the server\n            description: Provides the information about the server. This information includes returning the server version, etc.\n            operationId: Tigris_GetInfo\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/GetInfoResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\ncomponents:\n    schemas:\n        BeginTransactionRequest:\n            type: object\n            properties:\n                options:\n                    $ref: '#/components/schemas/TransactionOptions'\n            description: Start new transaction in database specified by \"db\".\n        BeginTransactionResponse:\n            type: object\n            properties:\n                tx_ctx:\n                    $ref: '#/components/schemas/TransactionCtx'\n            description: Start transaction returns transaction context  which uniquely identifies the transaction\n        CollectionDescription:\n            type: object\n            properties:\n                collection:\n                    type: string\n                    description: Name of the collection.\n                metadata:\n                    $ref: '#/components/schemas/CollectionMetadata'\n                schema:\n                    type: object\n                    description: Collections schema\n        CollectionInfo:\n            type: object\n            properties:\n                collection:\n                    type: string\n                    description: Collection name.\n                metadata:\n                    $ref: '#/components/schemas/CollectionMetadata'\n        CollectionMetadata:\n            type: object\n            properties: {}\n        CollectionOptions:\n            type: object\n            properties:\n                tx_ctx:\n                    $ref: '#/components/schemas/TransactionCtx'\n            description: Collection requests modifying options.\n        CommitTransactionRequest:\n            type: object\n            properties:\n                tx_ctx:\n                    $ref: '#/components/schemas/TransactionCtx'\n            description: Commit transaction with the given ID\n        CommitTransactionResponse:\n            type: object\n            properties:\n                status:\n                    type: string\n                    description: Status of commit transaction operation.\n        CreateDatabaseRequest:\n            type: object\n            properties:\n                options:\n                    $ref: '#/components/schemas/DatabaseOptions'\n        CreateDatabaseResponse:\n            type: object\n            properties:\n                message:\n                    type: string\n                    description: A detailed response message.\n                status:\n                    type: string\n                    description: An enum with value set as \"created\".\n        CreateOrUpdateCollectionRequest:\n            type: object\n            properties:\n                schema:\n                    type: object\n                    description: 'Schema of the documents in this collection. The schema specifications are same as JSON schema specification defined \u003ca href=\"https://json-schema.org/specification.html\" title=\"here\"\u003ehere\u003c/a\u003e. \u003cp\u003e\u003c/p\u003eThe following is an schema example: `{  \"title\": \"user\",  \"description\": \"Collection of documents with details of users\",  \"properties\": {    \"id\": {      \"description\": \"A unique identifier for the user\",      \"type\": \"integer\"    },    \"name\": {      \"description\": \"Name of the user\",      \"type\": \"string\",      \"maxLength\": 100    },    \"balance\": {      \"description\": \"User account balance\",      \"type\": \"number\"    }  },  \"primary_key\": [\"id\"] }`'\n                only_create:\n                    type: boolean\n                options:\n                    $ref: '#/components/schemas/CollectionOptions'\n        CreateOrUpdateCollectionResponse:\n            type: object\n            properties:\n                message:\n                    type: string\n                    description: A detailed response message.\n                status:\n                    type: string\n                    description: An enum with value set as \"created\" or \"updated\"\n        DatabaseInfo:\n            type: object\n            properties:\n                db:\n                    type: string\n                    description: Database name.\n                metadata:\n                    $ref: '#/components/schemas/DatabaseMetadata'\n        DatabaseMetadata:\n            type: object\n            properties: {}\n        DatabaseOptions:\n            type: object\n            properties: {}\n            description: Database requests modifying options.\n        DeleteRequest:\n            type: object\n            properties:\n                filter:\n                    type: object\n                    description: 'Delete documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: \u003cli\u003e To delete a user document where the id has a value 1: ```{\"id\": 1 }``` \u003cli\u003e To delete all the user documents where the key \"id\" has a value 1 or 2 or 3: `{\"$or\": [{\"id\": 1}, {\"id\": 2}, {\"id\": 3}]}`'\n                options:\n                    $ref: '#/components/schemas/DeleteRequestOptions'\n        DeleteRequestOptions:\n            type: object\n            properties:\n                write_options:\n                    $ref: '#/components/schemas/WriteOptions'\n            description: Additional options for deleted requests.\n        DeleteResponse:\n            type: object\n            properties:\n                metadata:\n                    $ref: '#/components/schemas/ResponseMetadata'\n                status:\n                    type: string\n                    description: an enum with value set as \"deleted\"\n        DescribeCollectionRequest:\n            type: object\n            properties:\n                db:\n                    type: string\n                    description: Name of the database.\n                collection:\n                    type: string\n                    description: Name of the collection.\n                options:\n                    $ref: '#/components/schemas/CollectionOptions'\n        DescribeCollectionResponse:\n            type: object\n            properties:\n                collection:\n                    type: string\n                    description: Name of the collection.\n                metadata:\n                    $ref: '#/components/schemas/CollectionMetadata'\n                schema:\n                    type: object\n                    description: Collections schema\n            description: A detailed description about the collection. The description returns collection metadata and the schema.\n        DescribeDatabaseRequest:\n            type: object\n            properties:\n                db:\n                    type: string\n                    description: Name of the database.\n        DescribeDatabaseResponse:\n            type: object\n            properties:\n                db:\n                    type: string\n                    description: Name of the database.\n                metadata:\n                    $ref: '#/components/schemas/DatabaseMetadata'\n                collections:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/CollectionDescription'\n                    description: A detailed description about all the collections. The description returns collection metadata and the schema.\n            description: A detailed description about the database and all associated collections. Description of the collection includes schema details as well.\n        DropCollectionRequest:\n            type: object\n            properties:\n                options:\n                    $ref: '#/components/schemas/CollectionOptions'\n        DropCollectionResponse:\n            type: object\n            properties:\n                message:\n                    type: string\n                    description: A detailed response message.\n                status:\n                    type: string\n                    description: An enum with value set as \"dropped\".\n        DropDatabaseRequest:\n            type: object\n            properties:\n                options:\n                    $ref: '#/components/schemas/DatabaseOptions'\n        DropDatabaseResponse:\n            type: object\n            properties:\n                message:\n                    type: string\n                    description: A detailed response message.\n                status:\n                    type: string\n                    description: An enum with value set as \"dropped\".\n        Error:\n            type: object\n            properties:\n                code:\n                    enum:\n                        - OK\n                        - CANCELLED\n                        - UNKNOWN\n                        - INVALID_ARGUMENT\n                        - DEADLINE_EXCEEDED\n                        - NOT_FOUND\n                        - ALREADY_EXISTS\n                        - PERMISSION_DENIED\n                        - RESOURCE_EXHAUSTED\n                        - FAILED_PRECONDITION\n                        - ABORTED\n                        - OUT_OF_RANGE\n                        - UNIMPLEMENTED\n                        - INTERNAL\n                        - UNAVAILABLE\n                        - DATA_LOSS\n                        - UNAUTHENTICATED\n                        - CONFLICT\n                        - BAD_GATEWAY\n                    type: string\n                    description: The status code is a short, machine parsable string, which uniquely identifies the error type. Tigris to HTTP code mapping [here](/reference/http-code)\n                    format: enum\n                message:\n                    type: string\n                    description: A developer-facing descriptive error message\n            description: The Error type defines a logical error model\n        FacetCount:\n            type: object\n            properties:\n                count:\n                    type: integer\n                    format: int64\n                value:\n                    type: string\n        FacetStats:\n            type: object\n            properties:\n                avg:\n                    type: number\n                    format: float\n                max:\n                    type: integer\n                    format: int64\n                min:\n                    type: integer\n                    format: int64\n                sum:\n                    type: integer\n                    format: int64\n                count:\n                    type: integer\n                    format: int64\n            description: avg, min, max, sum are only available for numeric fields\n        GetInfoResponse:\n            type: object\n            properties:\n                server_version:\n                    type: string\n        GoogleProtobufAny:\n            type: object\n            properties:\n                '@type':\n                    type: string\n                    description: The type of the serialized message.\n            additionalProperties: true\n            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.\n        InsertRequest:\n            type: object\n            properties:\n                documents:\n                    type: array\n                    items:\n                        type: object\n                    description: Array of documents to insert. Each document is a JSON object.\n                options:\n                    $ref: '#/components/schemas/InsertRequestOptions'\n        InsertRequestOptions:\n            type: object\n            properties:\n                write_options:\n                    $ref: '#/components/schemas/WriteOptions'\n            description: additional options for insert requests.\n        InsertResponse:\n            type: object\n            properties:\n                metadata:\n                    $ref: '#/components/schemas/ResponseMetadata'\n                status:\n                    type: string\n                    description: An enum with value set as \"inserted\"\n                keys:\n                    type: array\n                    items:\n                        type: string\n                        format: byte\n                    description: an array returns the value of the primary keys.\n        ListCollectionsRequest:\n            type: object\n            properties:\n                options:\n                    $ref: '#/components/schemas/CollectionOptions'\n        ListCollectionsResponse:\n            type: object\n            properties:\n                db:\n                    type: string\n                    description: Name of the database.\n                collections:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/CollectionInfo'\n                    description: List of the collections info in the database.\n        ListDatabasesResponse:\n            type: object\n            properties:\n                databases:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/DatabaseInfo'\n                    description: List of the databases.\n        Page:\n            type: object\n            properties:\n                current:\n                    type: integer\n                    format: int64\n                total:\n                    type: integer\n                    format: int64\n                per_page:\n                    type: integer\n                    format: int32\n            description: Pagination meta. Used only in /search as of now\n        ReadRequest:\n            type: object\n            properties:\n                filter:\n                    type: object\n                    description: 'Returns documents matching this filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: \u003cli\u003e To read a user document where the id has a value 1: ```{\"id\": 1 }``` \u003cli\u003e To read all the user documents where the key \"id\" has a value 1 or 2 or 3: `{\"$or\": [{\"id\": 1}, {\"id\": 2}, {\"id\": 3}]}`'\n                fields:\n                    type: object\n                    description: To read specific fields from a document. Default is all.\n                options:\n                    $ref: '#/components/schemas/ReadRequestOptions'\n        ReadRequestOptions:\n            type: object\n            properties:\n                tx_ctx:\n                    $ref: '#/components/schemas/TransactionCtx'\n                limit:\n                    type: integer\n                    description: Limit the number of documents returned by the read operation.\n                    format: int64\n                skip:\n                    type: integer\n                    description: Number of documents to skip before starting to return resulting documents.\n                    format: int64\n                offset:\n                    type: string\n                    description: A cursor for use in pagination. The next streams will return documents after this offset.\n                    format: byte\n            description: Options that can be used to modify the results, for example \"limit\" to control the number of documents returned by the server.\n        ReadResponse:\n            type: object\n            properties:\n                data:\n                    type: object\n                    description: Object containing the collection document.\n                resume_token:\n                    type: string\n                    description: An internal key, used for pagination.\n                    format: byte\n                metadata:\n                    $ref: '#/components/schemas/ResponseMetadata'\n        ReplaceRequest:\n            type: object\n            properties:\n                documents:\n                    type: array\n                    items:\n                        type: object\n                    description: Array of documents to be replaced. Each document is a JSON object.\n                options:\n                    $ref: '#/components/schemas/ReplaceRequestOptions'\n        ReplaceRequestOptions:\n            type: object\n            properties:\n                write_options:\n                    $ref: '#/components/schemas/WriteOptions'\n            description: Additional options for replace requests.\n        ReplaceResponse:\n            type: object\n            properties:\n                metadata:\n                    $ref: '#/components/schemas/ResponseMetadata'\n                status:\n                    type: string\n                    description: an enum with value set as \"replaced\"\n                keys:\n                    type: array\n                    items:\n                        type: string\n                        format: byte\n                    description: an array returns the value of the primary keys.\n        ResponseMetadata:\n            type: object\n            properties:\n                created_at:\n                    type: string\n                    description: Time at which the document was inserted/replaced. Measured in nano-seconds since the Unix epoch.\n                    format: date-time\n                updated_at:\n                    type: string\n                    description: Time at which the document was updated. Measured in nano-seconds since the Unix epoch.\n                    format: date-time\n                deleted_at:\n                    type: string\n                    description: Time at which the document was deleted. Measured in nano-seconds since the Unix epoch.\n                    format: date-time\n            description: Has metadata related to the documents stored.\n        RollbackTransactionRequest:\n            type: object\n            properties:\n                tx_ctx:\n                    $ref: '#/components/schemas/TransactionCtx'\n            description: Rollback transaction with the given ID\n        RollbackTransactionResponse:\n            type: object\n            properties:\n                status:\n                    type: string\n                    description: Status of rollback transaction operation.\n        SearchFacet:\n            type: object\n            properties:\n                counts:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/FacetCount'\n                stats:\n                    $ref: '#/components/schemas/FacetStats'\n        SearchHit:\n            type: object\n            properties:\n                data:\n                    type: object\n                    description: actual search document\n                meta:\n                    $ref: '#/components/schemas/SearchHitMeta'\n        SearchHitMeta:\n            type: object\n            properties: {}\n        SearchMetadata:\n            type: object\n            properties:\n                found:\n                    type: integer\n                    format: int64\n                page:\n                    $ref: '#/components/schemas/Page'\n        SearchRequest:\n            type: object\n            properties:\n                q:\n                    type: string\n                    description: Query string for searching across text fields\n                search_fields:\n                    type: array\n                    items:\n                        type: string\n                    description: Array of fields to project search query against\n                filter:\n                    type: string\n                    description: Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`\n                    format: byte\n                facet:\n                    type: object\n                    description: Facet query to aggregate results on given fields\n                sort:\n                    type: string\n                    description: 'Array of fields and corresponding sort orders to order the results `[{ \"salary\": \"$desc\" }]`'\n                    format: byte\n                fields:\n                    type: object\n                    description: Fetch specific fields from a document. Default is all\n        SearchResponse:\n            type: object\n            properties:\n                hits:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/SearchHit'\n                facets:\n                    type: object\n                    additionalProperties:\n                        $ref: '#/components/schemas/SearchFacet'\n                meta:\n                    $ref: '#/components/schemas/SearchMetadata'\n            description: Response struct for /search\n        StreamEvent:\n            type: object\n            properties:\n                tx_id:\n                    type: string\n                    format: byte\n                collection:\n                    type: string\n                op:\n                    type: string\n                key:\n                    type: string\n                    format: byte\n                lkey:\n                    type: string\n                    format: byte\n                rkey:\n                    type: string\n                    format: byte\n                data:\n                    type: object\n                last:\n                    type: boolean\n        StreamRequest:\n            type: object\n            properties:\n                db:\n                    type: string\n                collection:\n                    type: string\n                options:\n                    $ref: '#/components/schemas/StreamRequestOptions'\n        StreamRequestOptions:\n            type: object\n            properties: {}\n        StreamResponse:\n            type: object\n            properties:\n                event:\n                    $ref: '#/components/schemas/StreamEvent'\n        TransactionCtx:\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: Unique for a single transactional request.\n                origin:\n                    type: string\n                    description: Serves as an internal identifier.\n            description: Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the subsequent requests in order to run them in the context of the same transaction.\n        TransactionOptions:\n            type: object\n            properties: {}\n            description: Options that can be used to modify the transaction semantics.\n        UpdateRequest:\n            type: object\n            properties:\n                fields:\n                    type: object\n                    description: Fields contains set of fields with the values which need to be updated. Should be proper JSON object.\n                filter:\n                    type: object\n                    description: 'Update documents which matching specified filter. A filter can simply be key, value where key is the field name and value would be the value for this field. Or a filter can be logical where two or more fields can be logically joined using $or and $and. A few examples of filter: \u003cli\u003e To update a user document where the id has a value 1: ```{\"id\": 1 }``` \u003cli\u003e To update all the user documents where the key \"id\" has a value 1 or 2 or 3: `{\"$or\": [{\"id\": 1}, {\"id\": 2}, {\"id\": 3}]}`'\n                options:\n                    $ref: '#/components/schemas/UpdateRequestOptions'\n        UpdateRequestOptions:\n            type: object\n            properties:\n                write_options:\n                    $ref: '#/components/schemas/WriteOptions'\n            description: Additional options for update requests.\n        UpdateResponse:\n            type: object\n            properties:\n                metadata:\n                    $ref: '#/components/schemas/ResponseMetadata'\n                modified_count:\n                    type: integer\n                    description: Returns the number of documents modified.\n                    format: int32\n                status:\n                    type: string\n                    description: an enum with value set as \"updated\".\n        WriteOptions:\n            type: object\n            properties:\n                tx_ctx:\n                    $ref: '#/components/schemas/TransactionCtx'\n            description: Additional options to modify write requests.\n        StreamingReadResponse:\n            type: object\n            properties:\n                result:\n                    $ref: '#/components/schemas/ReadResponse'\n                error:\n                    $ref: '#/components/schemas/Error'\n        StreamingSearchResponse:\n            type: object\n            properties:\n                result:\n                    $ref: '#/components/schemas/SearchResponse'\n                error:\n                    $ref: '#/components/schemas/Error'\n        StreamingStreamResponse:\n            type: object\n            properties:\n                result:\n                    $ref: '#/components/schemas/StreamResponse'\n                error:\n                    $ref: '#/components/schemas/Error'\n        Status:\n            type: object\n            properties:\n                error:\n                    $ref: '#/components/schemas/Error'\n    securitySchemes:\n        BearerAuth:\n            type: http\n            scheme: bearer\ntags:\n    - name: Admin\n      description: APIs to manage or get more information about the server.\n    - name: Collections\n      description: APIs that can used to manage collections.\n    - name: Databases\n      description: APIs that can used to manage databases. A single database can have one or more collections.\n    - name: Documents\n      description: APIs to manage documents insides a collection. Uniqueness of documents are enforced by the primary key.\n    - name: Streams\n      description: APIs that provide real-time events for writes made to collections in the database.\n    - name: Transactions\n      description: APIs to manage documents insides a collection. Uniqueness of documents are enforced by the primary key.\n",
			"canonicalURL": "/github.com/tigrisdata/tigris-api@9bcd046e704c80bee9525dfe3be513f60d02c385/-/blob/server/v1/api_openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/tigrisdata/tigris-api/blob/9bcd046e704c80bee9525dfe3be513f60d02c385/server/v1/api_openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/v1/databases/{db}/collections/{collection}/documents/delete\": delete: responses: default: contents: application/json: generate schema: field error: field code: primitive: format \"enum\": enum format not implemented",
	"NotImplemented": [
		"enum format"
	]
}