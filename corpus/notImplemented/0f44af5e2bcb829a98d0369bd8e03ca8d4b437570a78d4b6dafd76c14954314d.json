{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/spring-petclinic/spring-petclinic-rest"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "src/main/resources/openapi.yml",
			"byteSize": 61854,
			"content": "openapi: 3.0.1\ninfo:\n  title: Spring PetClinic\n  description: Spring PetClinic Sample Application.\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0\n  version: '1.0'\nservers:\n  - url: http://localhost:8080/api\ntags:\n  - name: failing\n    description: Endpoint which always returns an error.\n  - name: owner\n    description: Endpoints related to pet owners.\n  - name: user\n    description: Endpoints related to users.\n  - name: pet\n    description: Endpoints related to pets.\n  - name: vet\n    description: Endpoints related to vets.\n  - name: visit\n    description: Endpoints related to vet visits.\npaths:\n  /oops:\n    get:\n      tags:\n        - failing\n      operationId: failingRequest\n      summary: Always fails\n      description: Produces sample error response.\n      responses:\n        200:\n          description: Never returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            text/plain:\n              schema:\n                type: string\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /owners:\n    post:\n      tags:\n        - owner\n      operationId: addOwner\n      summary: Adds a pet owner\n      description: Records the details of a new pet owner.\n      requestBody:\n        description: The pet owner\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OwnerFields'\n        required: true\n      responses:\n        201:\n          description: The pet owner was sucessfully added.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Owner'\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    get:\n      tags:\n        - owner\n      operationId: listOwners\n      summary: Lists pet owners\n      description: Returns an array of pet owners.\n      parameters:\n        - name: lastName\n          in: query\n          description: Last name.\n          required: false\n          schema:\n            type: string\n            example: Davis\n      responses:\n        200:\n          description: Owner details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Owner'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /owners/{ownerId}:\n    get:\n      tags:\n        - owner\n      operationId: getOwner\n      summary: Get a pet owner by ID\n      description: Returns the pet owner or a 404 error.\n      parameters:\n        - name: ownerId\n          in: path\n          description: The ID of the pet owner.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      responses:\n        200:\n          description: Owner details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Owner'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Owner not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    put:\n      tags:\n        - owner\n      operationId: updateOwner\n      summary: Update a pet owner's details\n      description: Updates the pet owner record with the specified details.\n      parameters:\n        - name: ownerId\n          in: path\n          description: The ID of the pet owner.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      requestBody:\n        description: The pet owner details to use for the update.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OwnerFields'\n        required: true\n      responses:\n        200:\n          description: Update successful.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Owner'\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Owner not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n\n    delete:\n      tags:\n        - owner\n      operationId: deleteOwner\n      summary: Delete an owner by ID\n      description: Returns the owner or a 404 error.\n      parameters:\n        - name: ownerId\n          in: path\n          description: The ID of the owner.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      responses:\n        200:\n          description: Owner details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Owner'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Owner  not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /owners/{ownerId}/pets:\n    post:\n      tags:\n        - pet\n      operationId: addPetToOwner\n      summary: Adds a pet to an owner\n      description: Records the details of a new pet.\n      parameters:\n        - name: ownerId\n          in: path\n          description: The ID of the pet owner.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      requestBody:\n        description: The details of the new pet.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PetFields'\n        required: true\n      responses:\n        201:\n          description: The pet was sucessfully added.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Pet not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /owners/{ownerId}/pets/{petId}:\n    get:\n      tags:\n        - pet\n      operationId: getOwnersPet\n      summary: Get a pet by ID\n      description: Returns the pet or a 404 error.\n      parameters:\n        - name: ownerId\n          in: path\n          description: The ID of the pet owner.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n        - name: petId\n          in: path\n          description: The ID of the pet.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      responses:\n        200:\n          description: Pet details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Pet not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    put:\n      tags:\n        - pet\n      operationId: updateOwnersPet\n\n      summary: Update a pet's details\n      description: Updates the pet record with the specified details.\n      parameters:\n        - name: ownerId\n          in: path\n          description: The ID of the pet owner.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n        - name: petId\n          in: path\n          description: The ID of the pet.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      requestBody:\n        description: The pet details to use for the update.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PetFields'\n        required: true\n      responses:\n        204:\n          description: Update successful.\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Pet not found for this owner.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /owners/{ownerId}/pets/{petId}/visits:\n    post:\n      tags:\n        - visit\n      operationId: addVisitToOwner\n      summary: Adds a vet visit\n      description: Records the details of a new vet visit.\n      parameters:\n        - name: ownerId\n          in: path\n          description: The ID of the pet owner.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n        - name: petId\n          in: path\n          description: The ID of the pet.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      requestBody:\n        description: The details of the new vet visit.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VisitFields'\n        required: true\n      responses:\n        201:\n          description: The vet visit was sucessfully added.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Visit'\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Pet not found for this owner.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /pettypes:\n    get:\n      tags:\n        - pettypes\n      operationId: listPetTypes\n      summary: Lists pet types\n      description: Returns an array of pet types.\n      responses:\n        200:\n          description: Pet types found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PetType'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    post:\n      tags:\n        - pettypes\n      operationId: addPetType\n      summary: Create a pet type\n      description: Creates a pet type .\n      requestBody:\n        description: The pet type\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PetType'\n        required: true\n      responses:\n        200:\n          description: Pet type created successfully.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PetType'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Pet Type not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /pettypes/{petTypeId}:\n    get:\n      tags:\n        - pettypes\n      operationId: getPetType\n      summary: Get a pet type by ID\n      description: Returns the pet type or a 404 error.\n      parameters:\n        - name: petTypeId\n          in: path\n          description: The ID of the pet type.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      responses:\n        200:\n          description: Pet type details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PetType'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Pet Type not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    put:\n      tags:\n        - pettypes\n      operationId: updatePetType\n      summary: Update a pet type by ID\n      description: Returns the pet type or a 404 error.\n      parameters:\n        - name: petTypeId\n          in: path\n          description: The ID of the pet type.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      requestBody:\n        description: The pet type\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PetType'\n        required: true\n      responses:\n        200:\n          description: Pet type details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PetType'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Pet Type not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    delete:\n      tags:\n        - pettypes\n      operationId: deletePetType\n      summary: Delete a pet type by ID\n      description: Returns the pet type or a 404 error.\n      parameters:\n        - name: petTypeId\n          in: path\n          description: The ID of the pet type.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      responses:\n        200:\n          description: Pet type details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PetType'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Pet type not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n\n  /pets:\n    get:\n      tags:\n        - pet\n      operationId: listPets\n      summary: Lists pet\n      description: Returns an array of pet .\n      responses:\n        200:\n          description: Pet types found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    post:\n      tags:\n        - pet\n      operationId: addPet\n      summary: Create a pet\n      description: Creates a pet .\n      requestBody:\n        description: The pet\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        200:\n          description: Pet type created successfully.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Pet not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /pets/{petId}:\n    get:\n      tags:\n        - pet\n      operationId: getPet\n      summary: Get a pet by ID\n      description: Returns the pet  or a 404 error.\n      parameters:\n        - name: petId\n          in: path\n          description: The ID of the pet.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      responses:\n        200:\n          description: Pet details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Pet not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    put:\n      tags:\n        - pet\n      operationId: updatePet\n      summary: Update a pet by ID\n      description: Returns the pet or a 404 error.\n      parameters:\n        - name: petId\n          in: path\n          description: The ID of the pet.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      requestBody:\n        description: The pet\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        200:\n          description: Pet details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Pet not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    delete:\n      tags:\n        - pet\n      operationId: deletePet\n      summary: Delete a pet by ID\n      description: Returns the pet or a 404 error.\n      parameters:\n        - name: petId\n          in: path\n          description: The ID of the pet.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      responses:\n        200:\n          description: Pet details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Pet not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /visits:\n    get:\n      tags:\n        - visit\n      operationId: listVisits\n      summary: Lists visits\n      description: Returns an array of visit .\n      responses:\n        200:\n          description: visits found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Visit'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    post:\n      tags:\n        - visit\n      operationId: addVisit\n      summary: Create a visit\n      description: Creates a visit.\n      requestBody:\n        description: The visit\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Visit'\n        required: true\n      responses:\n        200:\n          description: visit created successfully.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Visit'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Visit not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /visits/{visitId}:\n    get:\n      tags:\n        - visit\n      operationId: getVisit\n      summary: Get a visit by ID\n      description: Returns the visit or a 404 error.\n      parameters:\n        - name: visitId\n          in: path\n          description: The ID of the visit.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      responses:\n        200:\n          description: Visit details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Visit'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Visit not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    put:\n      tags:\n        - visit\n      operationId: updateVisit\n      summary: Update a visit by ID\n      description: Returns the visit or a 404 error.\n      parameters:\n        - name: visitId\n          in: path\n          description: The ID of the visit.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      requestBody:\n        description: The visit\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Visit'\n        required: true\n      responses:\n        200:\n          description: Visit details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Visit'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Visit not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    delete:\n      tags:\n        - visit\n      operationId: deleteVisit\n      summary: Delete a visit by ID\n      description: Returns the visit or a 404 error.\n      parameters:\n        - name: visitId\n          in: path\n          description: The ID of the visit.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      responses:\n        200:\n          description: Visit details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Visit'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Visit not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /specialties:\n    get:\n      tags:\n        - specialty\n      operationId: listSpecialties\n      summary: Lists specialties\n      description: Returns an array of specialty .\n      responses:\n        200:\n          description: Specialties found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Specialty'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    post:\n      tags:\n        - specialty\n      operationId: addSpecialty\n      summary: Create a specialty\n      description: Creates a specialty .\n      requestBody:\n        description: The specialty\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Specialty'\n        required: true\n      responses:\n        200:\n          description: Specialty created successfully.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Specialty'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Specialty not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /specialties/{specialtyId}:\n    get:\n      tags:\n        - specialty\n      operationId: getSpecialty\n      summary: Get a specialty by ID\n      description: Returns the specialty or a 404 error.\n      parameters:\n        - name: specialtyId\n          in: path\n          description: The ID of the pet.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      responses:\n        200:\n          description: Specialty details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Specialty'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Specialty not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    put:\n      tags:\n        - specialty\n      operationId: updateSpecialty\n      summary: Update a specialty by ID\n      description: Returns the specialty or a 404 error.\n      parameters:\n        - name: specialtyId\n          in: path\n          description: The ID of the specialty.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      requestBody:\n        description: The pet\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Specialty'\n        required: true\n      responses:\n        200:\n          description: Specialty details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Specialty'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Specialty not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    delete:\n      tags:\n        - specialty\n      operationId: deleteSpecialty\n      summary: Delete a specialty by ID\n      description: Returns the specialty or a 404 error.\n      parameters:\n        - name: specialtyId\n          in: path\n          description: The ID of the specialty.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      responses:\n        200:\n          description: Specialty details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Specialty'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Specialty not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /vets:\n    get:\n      tags:\n        - vet\n      operationId: listVets\n      summary: Lists vets\n      description: Returns an array of vets.\n      responses:\n        200:\n          description: Vets found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Vet'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n\n    post:\n      tags:\n        - vet\n      operationId: addVet\n      summary: Create a Vet\n      description: Creates a vet .\n      requestBody:\n        description: The vet\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Vet'\n        required: true\n      responses:\n        200:\n          description: Vet created successfully.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Vet'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Vet not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /vets/{vetId}:\n    get:\n      tags:\n        - vet\n      operationId: getVet\n      summary: Get a vet by ID\n      description: Returns the vet or a 404 error.\n      parameters:\n        - name: vetId\n          in: path\n          description: The ID of the vet.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      responses:\n        200:\n          description: Vet details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Vet'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Vet not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    put:\n      tags:\n        - vet\n      operationId: updateVet\n      summary: Update a vet  by ID\n      description: Returns the vet or a 404 error.\n      parameters:\n        - name: vetId\n          in: path\n          description: The ID of the vet.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      requestBody:\n        description: The vet\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Vet'\n        required: true\n      responses:\n        200:\n          description: Pet type details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Vet'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Vet not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n    delete:\n      tags:\n        - vets\n      operationId: deleteVet\n      summary: Delete a vet by ID\n      description: Returns the vet or a 404 error.\n      parameters:\n        - name: vetId\n          in: path\n          description: The ID of the vet.\n          required: true\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            example: 1\n      responses:\n        200:\n          description: Vet details found and returned.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Vet'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: Vet not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n  /users:\n    post:\n      tags:\n        - user\n      operationId: addUser\n      summary: Create a user\n      description: Creates a user.\n      requestBody:\n        description: The user\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        200:\n          description: User created successfully.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        304:\n          description: Not modified.\n          headers:\n            ETag:\n              description: An ID for this version of the response.\n              schema:\n                type: string\n        400:\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        404:\n          description: User not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n        500:\n          description: Server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\ncomponents:\n  schemas:\n    RestError:\n      title: REST Error\n      description: The schema for all error responses.\n      type: object\n      properties:\n        status:\n          title: Status\n          description: The HTTP status code.\n          type: integer\n          format: int32\n          example: 400\n          readOnly: true\n        error:\n          title: Error\n          description: The short error message.\n          type: string\n          example: Bad Request\n          readOnly: true\n        path:\n          title: Path\n          description: The path of the URL for this request.\n          type: string\n          format: uri\n          example: '/api/owners'\n          readOnly: true\n        timestamp:\n          title: Timestamp\n          description: The time the error occured.\n          type: string\n          format: date-time\n          example: '2019-08-21T21:41:46.158+0000'\n          readOnly: true\n        message:\n          title: Message\n          description: The long error message.\n          type: string\n          example: 'Request failed schema validation'\n          readOnly: true\n        schemaValidationErrors:\n          title: Schema validation errors\n          description: Validation errors against the OpenAPI schema.\n          type: array\n          items:\n            $ref: '#/components/schemas/ValidationMessage'\n        trace:\n          title: Trace\n          description: The stacktrace for this error.\n          type: string\n          example: 'com.atlassian.oai.validator.springmvc.InvalidRequestException: ...'\n          readOnly: true\n      required:\n        - status\n        - error\n        - path\n        - timestamp\n        - message\n        - schemaValidationErrors\n    ValidationMessage:\n      title: Validation message\n      description: Messages describing a validation error.\n      type: object\n      properties:\n        message:\n          title: Message\n          description: The valiation message.\n          type: string\n          example: \"[Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: [\\\"string\\\"])\"\n          readOnly: true\n      required:\n        - message\n      additionalProperties: true\n    Specialty:\n      title: Specialty\n      description: Fields of specialty of vets.\n      type: object\n      properties:\n        id:\n          title: ID\n          description: The ID of the specialty.\n          type: integer\n          format: int32\n          minimum: 0\n          example: 1\n          readOnly: true\n        name:\n          title: Name\n          description: The name of the specialty.\n          type: string\n          maxLength: 80\n          minLength: 1\n          example: radiology\n      required:\n        - id\n        - name\n    OwnerFields:\n      title: Owner fields\n      description: Editable fields of a pet owner.\n      type: object\n      properties:\n        firstName:\n          title: First name\n          description: The first name of the pet owner.\n          type: string\n          minLength: 1\n          maxLength: 30\n          pattern: '^[a-zA-Z]*$'\n          example: George\n        lastName:\n          title: Last name\n          description: The last name of the pet owner.\n          type: string\n          minLength: 1\n          maxLength: 30\n          pattern: '^[a-zA-Z]*$'\n          example: Franklin\n        address:\n          title: Address\n          description: The postal address of the pet owner.\n          type: string\n          minLength: 1\n          maxLength: 255\n          example: '110 W. Liberty St.'\n        city:\n          title: City\n          description: The city of the pet owner.\n          type: string\n          minLength: 1\n          maxLength: 80\n          example: Madison\n        telephone:\n          title: Telephone number\n          description: The telephone number of the pet owner.\n          type: string\n          minLength: 1\n          maxLength: 20\n          pattern: '^[0-9]*$'\n          example: '6085551023'\n      required:\n        - firstName\n        - lastName\n        - address\n        - city\n        - telephone\n    Owner:\n      title: Owner\n      description: A pet owner.\n      allOf:\n        - $ref: '#/components/schemas/OwnerFields'\n        - type: object\n          properties:\n            id:\n              title: ID\n              description: The ID of the pet owner.\n              type: integer\n              format: int32\n              minimum: 0\n              example: 1\n              readOnly: true\n            pets:\n              title: Pets\n              description: The pets owned by this individual including any booked vet visits.\n              type: array\n              items:\n                $ref: '#/components/schemas/Pet'\n              readOnly: true\n          required:\n            - pets\n    PetFields:\n      title: Pet fields\n      description: Editable fields of a pet.\n      type: object\n      properties:\n        name:\n          title: Name\n          description: The name of the pet.\n          type: string\n          maxLength: 30\n          example: Leo\n        birthDate:\n          title: Birth date\n          description: The date of birth of the pet.\n          type: string\n          format: date\n          example: '2010-09-07'\n        type:\n          $ref: '#/components/schemas/PetType'\n      required:\n        - name\n        - birthDate\n        - type\n    Pet:\n      title: Pet\n      description: A pet.\n      allOf:\n        - $ref: '#/components/schemas/PetFields'\n        - type: object\n          properties:\n            id:\n              title: ID\n              description: The ID of the pet.\n              type: integer\n              format: int32\n              minimum: 0\n              example: 1\n              readOnly: true\n            ownerId:\n              title: Owner ID\n              description: The ID of the pet's owner.\n              type: integer\n              format: int32\n              minimum: 0\n              example: 1\n              readOnly: true\n            visits:\n              title: Visits\n              description: Vet visit bookings for this pet.\n              type: array\n              items:\n                $ref: '#/components/schemas/Visit'\n              readOnly: true\n          required:\n            - id\n            - type\n            - visits\n    VetFields:\n      title: VetFields\n      description: Editable fields of a veterinarian.\n      type: object\n      properties:\n        firstName:\n          title: First name\n          description: The first name of the vet.\n          type: string\n          minLength: 1\n          maxLength: 30\n          pattern: '^[a-zA-Z]*$'\n          example: 'James'\n        lastName:\n          title: Last name\n          description: The last name of the vet.\n          type: string\n          minLength: 1\n          maxLength: 30\n          pattern: '^[a-zA-Z]*$'\n          example: 'Carter'\n        specialties:\n          title: Specialties\n          description: The specialties of the vet.\n          type: array\n          items:\n            $ref: '#/components/schemas/Specialty'\n      required:\n        - firstName\n        - lastName\n        - specialties\n    Vet:\n      title: Vet\n      description: A veterinarian.\n      allOf:\n        - $ref: '#/components/schemas/VetFields'\n        - type: object\n          properties:\n            id:\n              title: ID\n              description: The ID of the vet.\n              type: integer\n              format: int32\n              minimum: 0\n              example: 1\n              readOnly: true\n      required:\n        - id\n        - firstName\n        - lastName\n        - specialties\n    VisitFields:\n      title: Visit fields\n      description: Editable fields of a vet visit.\n      type: object\n      properties:\n        date:\n          title: Date\n          description: The date of the visit.\n          type: string\n          format: date\n          example: '2013-01-01'\n        description:\n          title: Description\n          description: The description for the visit.\n          type: string\n          minLength: 1\n          maxLength: 255\n          example: 'rabies shot'\n      required:\n        - description\n    Visit:\n      title: Visit\n      description: A booking for a vet visit.\n      allOf:\n        - $ref: '#/components/schemas/VisitFields'\n        - type: object\n          properties:\n            id:\n              title: ID\n              description: The ID of the visit.\n              type: integer\n              format: int32\n              minimum: 0\n              example: 1\n              readOnly: true\n            petId:\n              title: Pet ID\n              description: The ID of the pet.\n              type: integer\n              format: int32\n              minimum: 0\n              example: 1\n              readOnly: true\n          required:\n            - id\n    PetTypeFields:\n      title: PetType fields\n      description: Editable fields of a pet type.\n      type: object\n      properties:\n        name:\n          title: Name\n          description: The name of the pet type.\n          type: string\n          maxLength: 80\n          minLength: 1\n          example: cat\n      required:\n        - name\n    PetType:\n      title: Pet type\n      description: A pet type.\n      allOf:\n        - $ref: '#/components/schemas/PetTypeFields'\n        - type: object\n          properties:\n            id:\n              title: ID\n              description: The ID of the pet type.\n              type: integer\n              format: int32\n              minimum: 0\n              example: 1\n              readOnly: true\n          required:\n            - id\n    User:\n      title: User\n      description: An user.\n      type: object\n      properties:\n        username:\n          title: username\n          description: The username\n          type: string\n          maxLength: 80\n          minLength: 1\n          example: john.doe\n        password:\n          title: Password\n          description: The password\n          type: string\n          maxLength: 80\n          minLength: 1\n          example: 1234\n        enabled:\n          title: enabled\n          description: Indicates if the user is enabled\n          type: boolean\n          example: true\n        roles:\n          title: Roles\n          description: The roles of an user\n          type: array\n          items:\n            $ref: '#/components/schemas/Role'\n      required:\n        - username\n    Role:\n      title: Role\n      description: A role.\n      type: object\n      properties:\n        name:\n          title: name\n          description: The role's name\n          type: string\n          maxLength: 80\n          minLength: 1\n          example: admin\n      required:\n        - name\n",
			"canonicalURL": "/github.com/spring-petclinic/spring-petclinic-rest@07eb8255c2e2ee1575a5ad6d337c3660ad40ce26/-/blob/src/main/resources/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/spring-petclinic/spring-petclinic-rest/blob/07eb8255c2e2ee1575a5ad6d337c3660ad40ce26/src/main/resources/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/oops\": get: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}