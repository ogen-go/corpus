{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/newamericafoundation/MDDL"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "docs/api.yaml",
			"byteSize": 38593,
			"content": "openapi: 3.0.2\nservers:\n  - url: /v1/\ninfo:\n  description: |-\n    This documents the API for the New America Data Locker project.\n  version: 1.0.0\n  title: Data Locker\ntags:\n  - name: user\n    description: User based operations\n  - name: document\n    description: Document based operations\n  - name: collections\n    description: Collection based operations\n  - name: delegate\n    description: Account Delegate based operations\npaths:\n\n  '/users/{userId}/documents':\n    get:\n      tags:\n        - user\n      summary: List documents owned by a user\n      description: List documents owned by a user\n      operationId: listUserDocuments\n      parameters:\n        - name: userId\n          in: path\n          description: ID of user to find documents for\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentList'\n        '404':\n          description: User not found\n      security:\n        - datalocker_auth: []\n    post:\n      tags:\n        - user\n      summary: Add a new document\n      description: Add a new document for a user\n      operationId: addUserDocument\n      parameters:\n        - name: userId\n          in: path\n          description: ID of user to create document for\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Document'\n        '400':\n          description: Bad Request\n      security:\n        - datalocker_auth: []\n      requestBody:\n        description: Create a new document\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocumentCreate'\n  '/users/{userId}':\n    get:\n      tags:\n        - user\n      summary: Get user\n      description: Get user details\n      operationId: getUser\n      parameters:\n        - name: userId\n          in: path\n          description: ID of user to find\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '404':\n          description: User not found\n      security:\n        - datalocker_auth: []\n  '/users/{userId}/accept-terms':\n    post:\n      tags:\n        - user\n      summary: Accept Terms\n      description: Accept application Terms of Use for a user\n      operationId: acceptTerms\n      parameters:\n        - name: userId\n          in: path\n          description: ID of current user\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '404':\n          description: User not found\n      security:\n        - datalocker_auth: []\n  '/users/{userId}/delegates':\n    get:\n      tags:\n        - user\n      summary: List delegated access\n      description: List access delegated to and from a user\n      operationId: listAccountDelegates\n      parameters:\n        - name: userId\n          in: path\n          description: ID of user to find delegated access items for\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDelegatedAccessList'\n      security:\n        - datalocker_auth: []\n    post:\n      tags:\n        - user\n      summary: Add delegated access\n      description: Add delegated access to a user for current user\n      operationId: addAccountDelegate\n      parameters:\n        - name: userId\n          in: path\n          description: ID of user to delegate access for\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDelegatedAccess'\n        '404':\n          description: User not found\n      requestBody:\n        description: Create a new delegated access\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserDelegatedAccessCreate'\n      security:\n        - datalocker_auth: []\n  '/users/{userId}/collections':\n    get:\n      tags:\n        - user\n      summary: List collections owned by a user\n      description: List collections owned by a user\n      operationId: listUserCollections\n      parameters:\n        - name: userId\n          in: path\n          description: ID of user to find collections for\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionList'\n        '404':\n          description: User not found\n      security:\n        - datalocker_auth: []\n    post:\n      tags:\n        - user\n      summary: Add a new collection\n      description: Add a new collection for a user\n      operationId: addUserCollection\n      parameters:\n        - name: userId\n          in: path\n          description: ID of user to create the collection for\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Collection'\n        '400':\n          description: Bad Request\n      security:\n        - datalocker_auth: []\n      requestBody:\n        description: Create a new collection\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CollectionCreate'\n  '/users/{userId}/collections/shared':\n    get:\n      tags:\n        - user\n      summary: List collections shared to user\n      description: List collections shared to user\n      operationId: listUserCollectionsShared\n      parameters:\n        - name: userId\n          in: path\n          description: ID of user to find accessible collections for\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SharedCollectionList'\n        '404':\n          description: User not found\n      security:\n        - datalocker_auth: []\n  '/users/{userId}/documents/shared':\n    get:\n      tags:\n        - user\n      summary: List documents shared by a user\n      description: List documents shared by a user to the calling user\n      operationId: listUserDocumentsShared\n      parameters:\n        - name: userId\n          in: path\n          description: ID of user who has shared documents to an agent\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SharedCollectionList'\n        '404':\n          description: User not found\n      security:\n        - datalocker_auth: []\n  '/users/{userId}/activity':\n    get:\n      tags:\n        - user\n      summary: List activity for an account\n      description: List audit activity in an account, limited to 50 most recent items.\n      operationId: listAccountActivity\n      parameters:\n        - name: userId\n          in: path\n          description: ID of user to find collections for\n          required: true\n          schema:\n            type: string\n        - name: nextToken\n          in: query\n          description: The token to be used to fetch the next set of results\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ActivityList'\n        '404':\n          description: User not found\n      security:\n        - datalocker_auth: []\n\n  '/documents/{documentId}':\n    get:\n      tags:\n        - document\n      summary: Find document by ID\n      description: Returns a single document. This will be audited as a document view by the current user\n      operationId: getDocumentById\n      parameters:\n        - name: documentId\n          in: path\n          description: ID of document to return\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Document'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Document not found\n      security:\n        - datalocker_auth: []\n    put:\n      tags:\n        - document\n      summary: Updates an existing document\n      description: ''\n      operationId: updateDocumentById\n      parameters:\n        - name: documentId\n          in: path\n          description: ID of the document that needs to be updated\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Completed, no content\n        '400':\n          description: Invalid input\n      security:\n        - datalocker_auth: []\n      requestBody:\n        description: Updates a document\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocumentUpdate'\n    delete:\n      tags:\n        - document\n      summary: Deletes a document\n      description: ''\n      operationId: deleteDocumentById\n      parameters:\n        - name: documentId\n          in: path\n          description: ID of Document to delete\n          required: true\n          schema:\n            type: string\n      responses:\n        '404':\n          description: Document not found\n      security:\n        - datalocker_auth: []\n  '/documents/{documentId}/files/{fileId}/download':\n    get:\n      tags:\n        - document\n      summary: File download information\n      description: Get a presigned POST URL to download the specified file. This will be audited as a download by the end user.\n      operationId: downloadDocumentFileById\n      parameters:\n        - name: documentId\n          in: path\n          description: ID of document\n          required: true\n          schema:\n            type: string\n        - name: fileId\n          in: path\n          description: ID of file in the document\n          required: true\n          schema:\n            type: string\n        - name: disposition\n          in: query\n          description: Content Disposition for the file download. Will default to attachment if none given.\n          required: false\n          schema:\n            $ref: '#/components/schemas/FileDownloadDispositionTypeEnum'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileDownload'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Document or file not found\n      security:\n        - datalocker_auth: []\n\n  '/collections/{collectionId}/grants':\n    get:\n      tags:\n        - collections\n      summary: Get access grants to collection\n      description: Returns access grants for a single collection\n      operationId: getGrantsByCollectionId\n      parameters:\n        - name: collectionId\n          in: path\n          description: ID of collection to find grants for\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionGrantList'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Collection not found\n      security:\n        - datalocker_auth: []\n  '/collections/{collectionId}/documents':\n    get:\n      tags:\n        - collections\n      summary: Get documents\n      description: Get documents in a collection\n      operationId: getCollectionDocuments\n      parameters:\n        - name: collectionId\n          in: path\n          description: ID of the collection to fetch\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentList'\n        '404':\n          description: User not found\n      security:\n        - datalocker_auth: []\n  '/collections/{collectionId}/documents/downloads':\n    post:\n      tags:\n        - collections\n      summary: Download Collection documents\n      description: Download all documents in a collection\n      operationId: downloadCollectionDocuments\n      parameters:\n        - name: collectionId\n          in: path\n          description: ID of collection to download documents for\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentsDownload'\n        '400':\n          description: Bad Request\n      security:\n        - datalocker_auth: []\n      requestBody:\n        description: Requests a new download to be created for this collection\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocumentsDownloadCreate'\n  '/collections/{collectionId}/documents/downloads/{downloadId}':\n    get:\n      tags:\n        - collections\n      summary: Collections download information\n      description: Get information about a download for a collections documents\n      operationId: getDownloadForCollectionDocuments\n      parameters:\n        - name: collectionId\n          in: path\n          description: ID of collection\n          required: true\n          schema:\n            type: string\n        - name: downloadId\n          in: path\n          description: ID of download\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentsDownload'\n        '400':\n          description: Bad Request\n      security:\n        - datalocker_auth: []\n\n  '/delegates/{delegateId}':\n    delete:\n      tags:\n        - delegate\n      summary: Deletes a delegated users access\n      description: ''\n      operationId: deleteAccountDelegate\n      parameters:\n        - name: delegateId\n          in: path\n          description: ID of the User Delegated Access record\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: User Delegated Access deleted\n        '404':\n          description: User Delegated Access not found\n      security:\n        - datalocker_auth: []\n  '/delegates/{delegateId}/accept':\n    post:\n      tags:\n        - delegate\n      summary: Accept delegated access\n      description: Accept delegated access to a users account for current user\n      operationId: acceptDelegatedAccount\n      parameters:\n        - name: delegateId\n          in: path\n          description: ID of the User Delegated Access record\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDelegatedAccess'\n        '404':\n          description: User not found\n      security:\n        - datalocker_auth: []\n\ncomponents:\n  schemas:\n    Link:\n      description: A HATEOS Link\n      type: object\n      required:\n        - href\n        - rel\n        - type\n      properties:\n        href:\n          type: string\n          description: The web address (relative or absolute) for the linked resource\n          example: 'https://my-doc-link.com'\n        rel:\n          type: string\n          description: The relation this linked resource has to the resource it is attached to.\n          example: 'parent'\n        type:\n          type: string\n          description: The HTTP method to use to access the linked resource\n          example: GET\n        includeFormData:\n          type: object\n          description: Form data to include in the request\n          additionalProperties:\n            type: string\n    Links:\n      description: An array of Links\n      type: array\n      items:\n        $ref: '#/components/schemas/Link'\n    FileContentTypeEnum:\n      description: The accepted content type for files\n      type: string\n      enum:\n        - application/pdf\n        - image/jpeg\n        - image/png\n        - image/tiff\n      example: image/jpeg\n    DocumentUpdate:\n      description: Request data to update a document\n      type: object\n      properties:\n        name:\n          type: string\n          description: Document name.\n          example: Sam's SSN\n        description:\n          type: string\n          nullable: true\n          description: Document description or notes\n          example: Saved with help of my case manager, Charlie :)\n    DocumentCreate:\n      description: Request data to create a document\n      required:\n        - name\n        - files\n      properties:\n        name:\n          type: string\n          description: Document name (system or user provided)\n          example: Sam's SSN\n        description:\n          type: string\n          description: Document description or notes\n          example: Saved with help of my case manager, Charlie :)\n        files:\n          type: array\n          description: The files that are part of the document\n          items:\n            $ref: '#/components/schemas/DocumentCreateFile'\n      type: object\n    DocumentCreateFile:\n      description: Request data to create a file of a document\n      required:\n        - name\n        - contentType\n        - sha256Checksum\n        - contentLength\n      properties:\n        name:\n          type: string\n          description: File original name\n          example: IMG20200101.jpg\n        contentType:\n          $ref: '#/components/schemas/FileContentTypeEnum'\n        sha256Checksum:\n          type: string\n          description: SHA256 Checksum of file content\n        contentLength:\n          type: number\n          description: Content length in bytes of the file\n      type: object\n    DocumentList:\n      description: A result containing a list of documents\n      required:\n        - documents\n      properties:\n        documents:\n          type: array\n          description: The documents list\n          items:\n            $ref: '#/components/schemas/DocumentListItem'\n      type: object\n    DocumentListItem:\n      description: A listed document, deliberately minimal\n      required:\n        - id\n        - name\n        - createdDate\n        - links\n      properties:\n        id:\n          type: string\n          description: The ID of the document\n          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44\n        name:\n          type: string\n          description: The human readable name of the document\n          example: Letter of Employment\n        createdDate:\n          type: string\n          description: Date the document was created\n          format: date-time\n          example: '2020-01-01T01:01:01Z'\n        links:\n          $ref: '#/components/schemas/Links'\n      type: object\n    DocumentFile:\n      description: A file of a document\n      required:\n        - id\n        - name\n        - contentType\n        - sha256Checksum\n        - createdDate\n        - contentLength\n        - links\n      properties:\n        id:\n          type: string\n          description: The ID of the document file\n          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44\n        name:\n          type: string\n          description: File original name\n          example: IMG20200101.jpg\n        contentType:\n          $ref: '#/components/schemas/FileContentTypeEnum'\n        sha256Checksum:\n          type: string\n          description: SHA256 Checksum of file content\n        contentLength:\n          type: number\n          description: Content length in bytes of the file\n        createdDate:\n          type: string\n          format: date-time\n          description: Date the document file was created\n          example: '2020-01-01T01:01:01Z'\n        links:\n          $ref: '#/components/schemas/Links'\n      type: object\n    Document:\n      description: A document\n      required:\n        - id\n        - name\n        - description\n        - createdDate\n        - files\n        - links\n      properties:\n        id:\n          type: string\n          description: The ID of the document\n          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44\n        name:\n          type: string\n          description: Document name (system or user provided)\n          example: Sam's SSN\n        description:\n          type: string\n          nullable: true\n          description: Document description or notes\n          example: Saved with help of my case manager, Charlie :)\n        createdDate:\n          type: string\n          description: Date the document was created\n          format: date-time\n          example: '2020-01-01T01:01:01Z'\n        files:\n          type: array\n          description: The files in the document\n          items:\n            $ref: '#/components/schemas/DocumentFile'\n        links:\n          $ref: '#/components/schemas/Links'\n      type: object\n    FileDownloadDispositionTypeEnum:\n      description: The disposition type for the file download\n      type: string\n      enum:\n        - inline\n        - attachment\n      example: attachment\n    FileDownload:\n      description: A result containing a download link to a file\n      type: object\n      nullable: true\n      required:\n        - href\n      properties:\n        href:\n          type: string\n          description: The web address (relative or absolute) for the linked resource\n          example: 'https://my-download-link.com'\n    Owner:\n      description: A record owner\n      required:\n        - id\n        - givenName\n        - familyName\n        - name\n      properties:\n        id:\n          type: string\n          example: 2D3D5CF7-ED9D-48F1-8A14-12B0C1114B64\n          description: The user id\n        givenName:\n          type: string\n          nullable: true\n          example: Sam\n          description: The users given name\n        familyName:\n          type: string\n          nullable: true\n          description: The users family name\n          example: Citizen\n        name:\n          type: string\n          description: The users name or email address, if name not provided\n          example: sam.citizen@example.com\n      type: object\n    Sharer:\n      description: A user who shared information\n      required:\n        - id\n        - email\n        - name\n      properties:\n        id:\n          type: string\n          example: 2D3D5CF7-ED9D-48F1-8A14-12B0C1114B64\n          description: The user id\n        email:\n          type: string\n          nullable: true\n          description: The users email address\n          example: sam.citizen@example.com\n        name:\n          type: string\n          description: The users name or email address, if name not provided\n          example: sam.citizen@example.com\n      type: object\n    ShareInformation:\n      description: Information on how data was shared\n      required:\n        - sharedBy\n        - sharedDate\n      properties:\n        sharedBy:\n          $ref: '#/components/schemas/Sharer'\n        sharedDate:\n          type: string\n          description: The date the access delegation was added\n          format: date-time\n          example: '2020-01-01T01:01:01Z'\n      type: object\n    User:\n      description: A user\n      required:\n        - id\n        - givenName\n        - familyName\n        - email\n        - name\n        - links\n      properties:\n        id:\n          type: string\n          example: 2D3D5CF7-ED9D-48F1-8A14-12B0C1114B64\n          description: The user id\n        givenName:\n          type: string\n          nullable: true\n          example: Sam\n          description: The users given name\n        familyName:\n          type: string\n          nullable: true\n          description: The users family name\n          example: Citizen\n        termsOfUseAccepted:\n          type: boolean\n          description: Whether the terms of use have been accepted for the current user for this application\n          example: false\n        email:\n          type: string\n          nullable: true\n          description: The users email address\n          example: sam.citizen@example.com\n        name:\n          type: string\n          description: The users name or email address, if name not provided\n          example: sam.citizen@example.com\n        links:\n          $ref: '#/components/schemas/Links'\n      type: object\n    UserDelegatedAccessList:\n      description: A result containing the delagated access information for a user account\n      required:\n        - delegatedAccess\n      properties:\n        delegatedAccess:\n          type: array\n          description: The list of delegated access to the account\n          items:\n            $ref: '#/components/schemas/UserDelegatedAccess'\n      type: object\n    UserDelegatedAccess:\n      description: Delegated access to a user account\n      required:\n        - id\n        - email\n        - createdDate\n        - status\n        - links\n      properties:\n        id:\n          type: string\n          description: The ID for the delegated access\n          example: BC9115B9-B1E2-41AA-ACF4-F5908E2FB09B\n        email:\n          type: string\n          description: The email of the user to delegate access to\n          example: inviteduser@example.com\n        allowsAccessToUser:\n          $ref: '#/components/schemas/Owner'\n        createdDate:\n          type: string\n          description: The date the access delegation was added\n          format: date-time\n          example: '2020-01-01T01:01:01Z'\n        status:\n          $ref: '#/components/schemas/UserDelegatedAccessStatus'\n        links:\n          $ref: '#/components/schemas/Links'\n      type: object\n    UserDelegatedAccessStatus:\n      description: The statuses a delegated access record can be in\n      type: string\n      enum:\n        - INVITATION_SENT\n        - INVITATION_EXPIRED\n        - ACTIVE\n      example: ACTIVE\n    UserDelegatedAccessCreate:\n      description: Request data to create delegated access to a user account\n      required:\n        - email\n      properties:\n        email:\n          type: string\n          description: The email of the user to delegate access to\n          example: inviteduser@example.com\n      type: object\n    CollectionGrantType:\n      description: The valid types for access grants to a collection\n      type: string\n      enum:\n        - INDIVIDUAL_EMAIL\n      example: INDIVIDUAL_EMAIL\n    CollectionGrantList:\n      description: A result containing a list of access grants to a document\n      required:\n        - collectionGrants\n      properties:\n        collectionGrants:\n          type: array\n          description: The list of grants for a collection\n          items:\n            $ref: '#/components/schemas/CollectionGrant'\n      type: object\n    CollectionGrant:\n      description: A collection access grant\n      required:\n        - id\n        - type\n        - createdDate\n        - links\n        - individualEmailAddress\n      properties:\n        id:\n          type: string\n          example: 0693772D-5AED-4955-A6B5-41D1246E54AC\n          description: The ID of the grant\n        type:\n          $ref: '#/components/schemas/CollectionGrantType'\n        createdDate:\n          type: string\n          format: date-time\n          example: '2020-01-01T01:01:01Z'\n          description: The date the grant was created\n        individualEmailAddress:\n          description: The email address that has been granted access\n          type: string\n        links:\n          $ref: '#/components/schemas/Links'\n      type: object\n    CollectionList:\n      type: object\n      description: A result containing a list of collections\n      required:\n        - collections\n      properties:\n        collections:\n          type: array\n          description: The collections list\n          items:\n            $ref: '#/components/schemas/CollectionListItem'\n    SharedDocumentsList:\n      type: object\n      description: A result containing a list of shared documents\n      required:\n        - sharedDocuments\n      properties:\n        sharedDocuments:\n          type: array\n          description: The documents list\n          items:\n            $ref: '#/components/schemas/SharedDocumentsListItem'\n    SharedDocumentsListItem:\n      type: object\n      description: Details for listing a shared document\n      required:\n        - latestShareInformation\n        - document\n      properties:\n        latestShareInformation:\n          $ref: '#/components/schemas/ShareInformation'\n        document:\n          $ref: '#/components/schemas/DocumentListItem'\n    SharedCollectionList:\n      type: object\n      description: A result containing a list of shared collections\n      required:\n        - sharedCollections\n      properties:\n        sharedCollections:\n          type: array\n          description: The collections list\n          items:\n            $ref: '#/components/schemas/SharedCollectionListItem'\n    SharedCollectionListItem:\n      type: object\n      description: Basic details for listing a shared collection\n      required:\n        - owner\n        - shareInformation\n        - collection\n      properties:\n        owner:\n          $ref: '#/components/schemas/Owner'\n        shareInformation:\n          $ref: '#/components/schemas/ShareInformation'\n        collection:\n          $ref: '#/components/schemas/CollectionListItem'\n    CollectionListItem:\n      type: object\n      description: Basic details for listing a collection\n      required:\n        - id\n        - name\n        - createdDate\n        - links\n      properties:\n        id:\n          type: string\n          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44\n          description: The ID of the collection\n        name:\n          type: string\n          example: Housing application\n          description: The name of the collection\n        createdDate:\n          type: string\n          format: date-time\n          example: '2020-01-01T01:01:01Z'\n          description: The date the collection was created\n        links:\n          $ref: '#/components/schemas/Links'\n    Collection:\n      type: object\n      description: A collection of documents\n      required:\n        - id\n        - name\n        - createdDate\n        - links\n      properties:\n        id:\n          type: string\n          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44\n          description: The ID of the collection\n        name:\n          type: string\n          example: Housing application\n          description: The name of the collection\n        createdDate:\n          type: string\n          format: date-time\n          example: '2020-01-01T01:01:01Z'\n          description: The date the collection was created\n        links:\n          $ref: '#/components/schemas/Links'\n    CollectionCreate:\n      type: object\n      description: Request data to create a collection\n      required:\n        - name\n        - documentIds\n        - individualEmailAddresses\n      properties:\n        name:\n          type: string\n          example: Housing application\n          description: The name of the collection\n        documentIds:\n          type: array\n          description: The ID's of the Documents to add to this collection\n          items:\n            type: string\n        individualEmailAddresses:\n          type: array\n          description: The email addresses of individuals to grant access to this collection\n          items:\n            type: string\n    DocumentsDownloadCreate:\n      type: object\n      description: Request data to create a download of a set of documents\n      required:\n        - format\n      properties:\n        format:\n          $ref: '#/components/schemas/DocumentsDownloadFormatEnum'\n    DocumentsDownloadFormatEnum:\n      description: The valid formats for a requested download\n      type: string\n      enum:\n        - ZIP\n      example: ZIP\n    DocumentsDownloadStatusEnum:\n      description: The valid statuses for a requested download\n      type: string\n      enum:\n        - SUCCESS\n        - PENDING\n      example: SUCCESS\n    DocumentsDownload:\n      type: object\n      description: Details about a document download\n      required:\n        - id\n        - status\n        - fileDownload\n      properties:\n        id:\n          type: string\n          description: The ID of the download\n        status:\n          $ref: '#/components/schemas/DocumentsDownloadStatusEnum'\n        fileDownload:\n          $ref: '#/components/schemas/FileDownload'\n    ActivityList:\n      type: object\n      description: A list of account activity\n      required:\n        - activity\n        - nextToken\n      properties:\n        activity:\n          type: array\n          description: The list of account activity\n          items:\n            $ref: '#/components/schemas/Activity'\n        nextToken:\n          type: string\n          nullable: true\n          description: The token to use to fetch further account activity\n          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44\n    ActivityActionTypeEnum:\n      description: The type of an activity action\n      type: string\n      enum:\n        - COLLECTION.CREATED\n        - DOCUMENT.CREATED\n        - DOCUMENT.ACCESSED\n        - DOCUMENT.EDITED\n        - DOCUMENT.DELETED\n        - DELEGATEDUSER.INVITED\n        - DELEGATEDUSER.INVITE_ACCEPTED\n        - DELEGATEDUSER.DELETED\n        - USER.TERMS_ACCEPTED\n      example: COLLECTION.CREATED\n    ActivityResourceTypeEnum:\n      description: The type of an activity resource\n      type: string\n      enum:\n        - COLLECTION\n        - COLLECTION.INDIVIDUAL_EMAIL_GRANT\n        - DOCUMENT\n        - DOCUMENT.FILE\n        - DELEGATEDUSER\n        - USER\n      example: COLLECTION\n    ActivityResourceChange:\n      type: object\n      description: Changes made to a resource\n      required:\n        - field\n        - oldValue\n        - newValue\n      properties:\n        field:\n          type: string\n          description: The name of the field that was change\n          example: description\n        oldValue:\n          type: string\n          nullable: true\n          description: The value of the field before the change\n          example: Contains a picture of my social security card\n        newValue:\n          type: string\n          nullable: true\n          description: The value of the field after the change\n          example: Contains a picture of my SSN\n    ActivityResource:\n      type: object\n      description: A resource (or record) related to an activity\n      required:\n        - id\n        - name\n        - type\n      properties:\n        id:\n          type: string\n          description: The ID of the resource\n          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44\n        name:\n          type: string\n          description: The name of the resource, at the time of the activity, for human readable reference.\n          example: Housing application\n        type:\n          $ref: '#/components/schemas/ActivityResourceTypeEnum'\n        changes:\n          type: array\n          description: The list of any changes made to the resource\n          items:\n            $ref: '#/components/schemas/ActivityResourceChange'\n    ActivityPrincipal:\n      type: object\n      description: Details on the user principal that performed the activity\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: string\n          description: The ID of the principal\n          example: d537795d-3b76-4188-9e77-fdd5e9bfe218\n        name:\n          type: string\n          description: The consistent name of the principal, generally the user email, for human readable reference.\n          example: inviteduser@example.com\n    Activity:\n      type: object\n      description: An activity item\n      required:\n        - principal\n        - type\n        - requestId\n        - date\n        - resource\n      properties:\n        principal:\n          $ref: '#/components/schemas/ActivityPrincipal'\n        type:\n          $ref: '#/components/schemas/ActivityActionTypeEnum'\n        requestId:\n          type: string\n          description: The ID of the request that created this action\n          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44\n        date:\n          type: string\n          format: date-time\n          example: '2020-01-01T01:01:01Z'\n          description: The date the activity happened\n        resource:\n          $ref: '#/components/schemas/ActivityResource'\n        relatedResources:\n          type: array\n          description: The list of any additional resources part of this activity\n          items:\n            $ref: '#/components/schemas/ActivityResource'\n\n  securitySchemes:\n    datalocker_auth:\n      type: oauth2\n      description: Example only. Scope is only defined here to distinguish between Agent access and Client access\n      flows:\n        authorizationCode:\n          authorizationUrl: 'https://example-auth-server.com/oauth/authorize'\n          tokenUrl: 'https://example-auth-server.com/oauth/tokens'\n          scopes:\n            'agent': has access to agent portal\n",
			"canonicalURL": "/github.com/newamericafoundation/MDDL@916c4929eda59f9fe11473db87d59a2bde5062d1/-/blob/docs/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/newamericafoundation/MDDL/blob/916c4929eda59f9fe11473db87d59a2bde5062d1/docs/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/users/{userId}/delegates\": get: security: security \"datalocker_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}