{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/disit/snap4city"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "iot-device-api/web/openapi.yaml",
			"byteSize": 24185,
			"content": "openapi: 3.0.1\ninfo:\n  title: IoT Device Registration API\n  description: The API accepts in input a description of an IoT device with its broker and attributes in the form of a JSON document shaped conforming to a well-defined schema and set of acceptable values, and performs delete/insert operations on a graph database, also returning the URI of the inserted, updated or deleted device.\n  version: 2.0.0\nservers:\n  - description: Test\n    url: http://www.disit.org/ServiceMap/api/v1/iot\n  - description: Local\n    url: http://localhost:8080/iotdeviceapi\nsecurity:\n  - bearerAuth: []    \npaths:\n  /insert:\n    post:\n      tags: [Registry]\n      summary: For registering or updating a device in the graph database.\n      requestBody:\n        description: An appropriate JSON representation of the device that has to be registered or updated.\n        required: true\n        content:\n          application/json; charset=utf-8:\n            schema:\n              $ref: '#/components/schemas/device'\n      responses:\n        200:\n          description: The response body contains in plain text the URI of the registered or updated device, or it is empty if something goes wrong. In the latter case, a _Warning_ header is added where a description of the problem can be found.\n          headers:\n            Warning:\n              description: The possible error message\n              required: false\n              schema: \n                type: string\n                example: 'Validation failed for data: service-uri-p1.'\n          content:\n            text/plain:\n              schema:\n                type: string\n                format: uri\n                example: http://www.disit.org/km4city/resource/iot/orionUNIFI/TrafficLight_229_widgetOnOffButton2932\n              \n  /delete:\n    post:\n      tags: [Registry]\n      summary: For deleting a device from the graph database.\n      requestBody:\n        description: An appropriate JSON representation of the device that has to be deleted.\n        required: true\n        content:\n          application/json; charset=utf-8:\n            schema:\n              $ref: '#/components/schemas/device'\n      responses:\n        200:\n          description: The response body contains in plain text the URI of the deleted device, or it is empty if something goes wrong. In the latter case, a _Warning_ header is added where a description of the problem can be found.\n          headers:\n            Warning:\n              description: The possible error message\n              required: false\n              schema: \n                type: string\n                example: 'Validation failed for data: service-uri-p1.'\n          content:\n            text/plain:\n              schema:\n                type: string\n                format: uri\n                example: http://www.disit.org/km4city/resource/iot/orionUNIFI/TrafficLight_229_widgetOnOffButton2932\n                \n  /move:\n    post:\n      tags: [Mobile]\n      summary: For updating the GPS coordinates of the device\n      requestBody:\n        description: The URI of the device, and its new GPS coordinates.\n        required: true\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n              required:\n                - uri\n                - latitude\n                - longitude\n              properties:\n                uri:\n                  type: string\n                  format: uri\n                  example: http://www.disit.org/km4city/resource/iot/orionUNIFI/TrafficLight_229_widgetOnOffButton2932       \n                latitude:\n                  type: number\n                  format: float\n                  example: 43.769562\n                longitude:\n                  type: number\n                  format: float\n                  example: 11.255814\n      responses:\n        200:\n          description: DONE, written in plain text.\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: DONE                \n                \n  /list-static-attr:\n    post:\n      tags: [Static Attributes]\n      summary: It provides the list of the static attributes that are applicable for a given class (subnature) of devices.\n      requestBody:\n        description: The subnature URI or name must be provided in the property _subnature_ (the subnature name corresponds to the last part of the URI, delimited by a sharp), _or_ a full JSON representation of a device must be provided including the property _attributes_ whose value is an array of objects each having a set of properties and in particular the _value_type_ that is the only relevant for the purpose of identifying the applicable static attributes, since from the value types it is possible to determine the subnature, and from the subnature we can finally determine the applicable static attributes.\n        required: true\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n              properties:\n                subnature:\n                  description: The URI of the class (subnature) of interest, or its name, corresponding to the last part of the URI, delimited by a sharp.\n                  type: string\n                  example: http://www.disit.org/km4city/schema#Noise_level_sensor \n                attributes:\n                  description: A JSON array whose items describe what the device detects. The emphasis here is only on the value_type property of those items, that is the only one that is relevant to the purpose of identifying the applicable static attributes.\n                  type: array\n                  items:\n                    type: object\n                    required:\n                      - value_type\n                    properties:\n                      value_type: \n                        description: A text string where a high-level indication can be found of the type of detections that the attribute represents, that is aimed at enabling searches of all devices that detect the same thing in different locations. A list of the allowed values for value_type has been defined, but it cannot be found in the configuration documents. Instead, the list of the allowed values can be found in the destination Knowledge Base, shaped as a set of SSN Property instances.\n                        type: string\n                        example: temperature\n      responses:\n        200:\n          description: An array of objects, each describing a static attribute that can be applied to those devices that have the given subnature.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    label:\n                      description: A human-readable label for the static attribute\n                      type: string\n                      example: Maximum capacity\n                    type:\n                      description: The expected type of data for the value of the static attribute, represented as an XML Schema data type URI\n                      type: string\n                      format: uri\n                      example: http://www.w3.org/2001/XMLSchema#string\n                    uri:\n                      description: The URI of the RDF resource that represents the static attribute in KB\n                      type: string\n                      format: uri\n                      example: http://www.disit.org/km4city/schema#minCapacity\n    get:\n      tags: [Static Attributes]\n      summary: It provides the list of the static attributes that are applicable for a given class (subnature) of devices.\n      parameters:\n        - in: query\n          name: subnature\n          schema: \n            type: string\n          required: true\n          description: The subnature URI or name (that corresponds to the last part of the URI, delimited by a sharp).\n          example: http://www.disit.org/km4city/schema#Noise_level_sensor\n      responses:\n        200:\n          description: An array of objects, each describing a static attribute that can be applied to those devices that have the given subnature.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    label:\n                      description: A human-readable label for the static attribute\n                      type: string\n                      example: Maximum capacity\n                    type:\n                      description: The expected type of data for the value of the static attribute, represented as an XML Schema data type URI\n                      type: string\n                      format: uri\n                      example: http://www.w3.org/2001/XMLSchema#string\n                    uri:\n                      description: The URI of the RDF resource that represents the static attribute in KB\n                      type: string\n                      format: uri\n                      example: http://www.disit.org/km4city/schema#minCapacity\n\n  /insert-static-attr:\n    post:\n      tags: [Static Attributes]\n      summary: It adds a new RDF resource representing a new static attribute in the KB, so that it can be next applied to the newly created devices (that have the appropriate subnature).\n      requestBody:\n        description: A JSON object representing the new static attribute.\n        required: true\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n              properties:\n                graph:\n                  description: The URI of the graph where the resource that represents the new static attribute will be created\n                  type: string\n                  format: URI\n                  example: http://www.disit.org/km4city/resource/addedStaticAttrs \n                subnature:\n                  description: The URI of the subnature to which the new static attribute applies\n                  type: string\n                  format: URI\n                  example: http://www.disit.org/km4city/schema#Noise_level_sensors\n                attribute:\n                  description: The URI of the new static attribute\n                  type: string\n                  format: URI\n                  example: http://www.disit.org/km4city/schema#maxCapacity\n                range:\n                  description: The URI of the XML Schema data type that corresponds to the type of data that is expected for the value of the static attribute\n                  type: string\n                  format: URI\n                  example: http://www.w3.org/2001/XMLSchema#string\n                label:\n                  description: A multi-language name/label for the new static attribute\n                  type: array\n                  items: \n                    type: object\n                    properties: \n                      text:\n                        description: The name of the new static attribute\n                        type: string\n                        example: Max capacity                   \n                      lang:\n                        description: The language in which the name is written\n                        type: string\n                        example: en\n      responses:\n        200:\n          description: The URI of the newly created static attribute. It is the same that the requester has provided through the _attribute_ property.\n          content:\n            text/plain:\n              schema:\n                type: string\n                format: uri\n                example: http://www.disit.org/km4city/schema#maxCapacity\n                \n  /delete-static-attr:\n    post:\n      tags: [Static Attributes]\n      summary: It deletes a static attribute. After this, it will not be possible to apply the static attribute to the newly created devices, and for those that already have it applied, it will not be anymore explicitly represented its meaning in the KB. This operation only can be requested by a (very carefull) Root Admin.\n      requestBody:\n        description: A full JSON representation of the static attribute to be deleted.\n        required: true\n        content:\n          application/json; charset=utf-8:\n            schema:\n              type: object\n              properties:\n                graph:\n                  description: The URI of the graph where the resource locates that represents the static attribute to be deleted\n                  type: string\n                  format: URI\n                  example: http://www.disit.org/km4city/resource/addedStaticAttrs \n                subnature:\n                  description: The URI of the subnature to which the static attribute to be deleted applies\n                  type: string\n                  format: URI\n                  example: http://www.disit.org/km4city/schema#Noise_level_sensors\n                attribute:\n                  description: The URI of the static attribute to be deleted\n                  type: string\n                  format: URI\n                  example: http://www.disit.org/km4city/schema#maxCapacity\n                range:\n                  description: The URI of the XML Schema data type that corresponds to the type of data that is expected for the value of the static attribute to be deleted\n                  type: string\n                  format: URI\n                  example: http://www.w3.org/2001/XMLSchema#string\n                label:\n                  description: The multi-language name/label of the static attribute to be deleted\n                  type: array\n                  items: \n                    type: object\n                    properties: \n                      text:\n                        description: The name of the static attribute\n                        type: string\n                        example: Max capacity                   \n                      lang:\n                        description: The language in which the name is written\n                        type: string\n                        example: en\n      responses:\n        200:\n          description: The URI of the deleted static attribute. It is the same that the requester has provided through the _attribute_ property.\n          content:\n            text/plain:\n              schema:\n                type: string\n                format: uri        \n                example: http://www.disit.org/km4city/schema#maxCapacity\n                      \n\ncomponents:\n  schemas:\n    device:\n      type: object\n      required:\n        - id \n        - type\n        - kind\n        - broker\n        - attributes\n      properties:\n        id:\n          description: A free text string where a unique identifier for the device can be found.\n          type: string\n          example: ARDUINO_ST_4201\n        organization:\n          description: The organization that is responsible for the device.\n          type: string\n          example: Firenze\n        type:\n          description: A free text string that synthetically describes what the device measures, e.g. whether it is a temperature sensor, a traffic sensor, a presence detector, or what else.\n          type: string\n          example: Temperature\n        kind:\n          description: A text string that is expected to be set to sensor, or actuator, for differentiating the two typologies of devices.\n          type: string\n          enum: [sensor, actuator]\n          example: sensor\n        protocol:\n          description: A text string where the communication protocol is indicated through which the broker can be accessed, i.e. amqp, mqtt, or ngsi.\n          type: string\n          enum: [amqp, mqtt, ngsi]\n          example: ngsi\n        format:\n          description: A free text string that describes the format of the possible output that is produced by the device, e.g. csv.\n          type: string\n          example: csv\n        macaddress:\n          description: A text string where the MAC address of the device can be found.\n          type: string\n          example: '00-14-22-01-23-45'\n        model: \n          description: A free text string where the model of the device (the product name provided by the manufacturer) can be found.\n          type: string\n          example: ST 4201\n        producer:\n          description: A free text string the manufacturer of the device can be found.\n          type: string\n          example: Arduino\n        latitude:\n          description: A float number that indicates the (starting) WGS84 latitude of the device. If the device moves over the time, an attribute (see below) is expected to be defined for the device, that contains its real-time latitude (can be missing, but in that case, the broker must have the latitude property set and valid).\n          type: number\n          format: float\n          example: 43.833333\n        longitude:\n          description: A float number that indicates the (starting) WGS84 longitude of the device. If the device moves over the time, an attribute (see below) is expected to be defined for the device, that contains its real-time latitude (can be missing, but in that case, the broker must have the longitude property set and valid).\n          type: number\n          format: float\n          example: 11.333333\n        frequency:\n          description: An integer number that expresses the frequency at which the device produces its outputs, as the time interval in seconds between two consecutive detections.\n          type: integer\n          format: int32\n          example: 60\n        created:\n          description: A text string where the date and time when the device has been put in place can be found.\n          type: string\n          format: date-time\n          example: '2018-03-12 15:17:11'\n        uri:\n          description: The URI is provided if the device has already been registered in the Knowledge Base (update operations). If it is not provided, an insert operation is assumed, and a new URI is generated based on the broker name and device id.\n          type: string\n          format: uri\n          example: http://www.disit.org/km4city/resource/iot/orionUNIMI/ARDUINO_ST_4201\n        ownership:\n          description: The ownership of the device.\n          type: string\n          enum: [public, private]\n          default: public\n          example: public\n        broker:\n          description: A JSON object that describes the device broker.\n          type: object\n          required:\n            - name\n            - type\n            - ip\n            - port\n          properties:\n            name:\n              description: A free text string where the broker name can be found.\n              type: string\n              example: orionUNIMI\n            type:\n              description: A text string in lowercase letters that indicates whether it is a AMQP, MQTT, or NGSI broker.\n              type: string\n              enum: [amqp, mqtt, ngsi]\n              example: ngsi\n            ip:\n              description: A text string where the IP address of the broker can be found.\n              type: string\n              example: 159.149.129.184\n            port:\n              description: An integer number that indicates the network port that is opened on the broker. Together with the IP address, it makes up the broker endpoint.\n              type: integer\n              format: int32\n              example: 1026\n            login: \n              description: A text string that indicates the user name that should be used for requesting data to the broker.\n              type: string\n              example: guest\n            password:\n              description: A text string that indicates the password that should be used in combination with the user name for requesting data to the broker.\n              type: string\n              example: guestpwd\n            latitude:\n              description: A float number where the WGS84 latitude of the broker can be found (mandatory if a latitude has not been specified for the device).\n              type: number\n              format: float\n              example: 44.833333\n            longitude:\n              description: A float number where the WGS84 longitude of the broker can be found (mandatory if a latitude has not been specified for the device).\n              type: number\n              format: float\n              example: 12.333333\n            created:\n              description: A text string where the date and time when the broker has been put in place can be found.\n              type: string\n              format: date-time\n              example: '2018-03-13 15:17:11'\n        attributes:\n          description: A JSON array whose items describe what the device detects.\n          type: array\n          items:\n            type: object\n            required:\n              - value_name\n              - data_type\n              - value_type\n              - value_unit\n            properties:\n              value_name:\n                description: A free text string that briefly indicates what type of detection the attribute represents, e.g. tempXX, humXX, thievesInLivingRoom.\n                type: string\n                example: temp\n              data_type:\n                description: A text string that indicates the data type of the values that the device produces in output for the specific type of detections, e.g. integer, float, Boolean, string. A list of the allowed values for data_type has been defined and can be found in the XML request configuration documents.\n                type: string\n                example: float\n              value_type: \n                description: A text string where a high-level indication can be found of the type of detections that the attribute represents, that is aimed at enabling searches of all devices that detect the same thing in different locations. A list of the allowed values for value_type has been defined, but it cannot be found in the configuration documents. Instead, the list of the allowed values can be found in the destination Knowledge Base, shaped as a set of SSN Property instances.\n                type: string\n                example: temperature\n              value_unit:\n                description: The unit of measure of the values that are produced in output as a result of the detections of the type that is represented by the device attribute. A list of the allowed value_unit can be found in the XML request configuration documents.\n                type: string\n                example: °C\n              value_refresh_rate:\n                description: An integer number that expresses the frequency at which the device produces outputs of the type that is represented by the device attribute. The frequency is expressed as the time interval in seconds between two consecutive detections.\n                type: integer\n                format: int32\n                example: 60\n              different_values:\n                description: An integer number, see the _healthiness_criteria_ for details about its semantic.\n                type: integer\n                format: int32\n                example: 10\n              value_bounds:\n                description: A text string with a well-defined syntax, that represents a value interval. See the healthiness_criteria for details about its semantic.\n                type: string\n                example: '-10;+60'\n              disabled:\n                description: |\n                  It indicates if the device attribute has to be disabled, and therefore hidden in the user views, excluded from indexing, and so on. If missing, the status of the device attribute is left unaltered. _Remark: unaltered_ is not the same as _enabled_.\n                type: boolean\n                example: false\n  securitySchemes:\n    bearerAuth:           \n      type: http\n      scheme: bearer                \nexternalDocs:\n  description: Extended PDF documentation (313k)\n  url: https://servicemap.disit.org/WebAppGrafo/api/v1/iot/doc.pdf\n  ",
			"canonicalURL": "/github.com/disit/snap4city@523488172f08a8e700ea3a777117724aac25eb65/-/blob/iot-device-api/web/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/disit/snap4city/blob/523488172f08a8e700ea3a777117724aac25eb65/iot-device-api/web/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/move\": post: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}