{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "trashnothing.com-1.0.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/trashnothing.com-1.0.0-swagger.yaml",
			"byteSize": 166206,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    x-twitter: trashnothing\n  description: \u003e\n    This is the REST API for [trashnothing.com](https://trashnothing.com).\n\n\n    To learn more about the API or to register your app for use with the API\n\n    visit the [trash nothing Developer page](https://trashnothing.com/developer).\n\n\n    NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time)\n\n    and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53).\n  termsOfService: |\n    https://trashnothing.com/tos\n  title: trash nothing\n  version: 1.0.0\n  x-apisguru-categories:\n    - social\n  x-logo:\n    url: https://twitter.com/trashnothing/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: https://trashnothing.com/api/trashnothing-openapi.yaml\n      version: \"2.0\"\n  x-providerName: trashnothing.com\nsecurity:\n  - oauth2_implicit:\n      - basic\n  - oauth2_code:\n      - basic\ntags:\n  - description: Retrieve and update user data.\n    name: users\n  - description: Retrieve and update posts.\n    name: posts\n  - description: Search, subscribe and unsubscribe to groups.\n    name: groups\n  - description: Upload, delete and rotate photos.\n    name: photos\n  - description: \u003e\n      Manage conversations and messages with other users. \u003cbr /\u003e\u003cbr /\u003e It's\n      important to note that messages are always sent by email to the\n      users.   So it's possible to create a fully functional app using the trash\n      nothing API without using any of the conversations or messages API\n      endpoints.  These API endpoints are useful for developers who want to\n      build a complete messaging interface into their app.\n    name: messages\n  - description: Miscellaneous functionality.\n    name: misc\npaths:\n  /conversations:\n    get:\n      operationId: get_conversations\n      parameters:\n        - description: \u003e\n            Used to filter messases by category.  Must be set to one of the\n            following three categories: inbox, archived, blocked\n          in: query\n          name: category\n          required: false\n          schema:\n            type: string\n            default: inbox\n        - description: The page of conversations to return.\n          in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            default: 1\n        - description: The number of conversations to return per page (must be \u003e= 1 and \u003c=\n            30).\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 30\n            default: 10\n        - description: \u003e\n            The number of recent messages to return with each conversation.\n            Additional messages can be retrieved using get conversation messages\n            endpoint.\n          in: query\n          name: num_messages\n          required: false\n          schema:\n            type: integer\n            minimum: 0\n            maximum: 30\n            default: 10\n        - description: \u003e\n            If set to 1, the num_unread field in the response will be set to the\n            count of the total number of conversations that have unread\n            messages.\n\n            This is useful for showing users the total number of unread messages that they have in their inbox. Calculating the count will slow the request down a bit so setting this should be avoided for requests where it's not needed (eg. requesting archived or blocked conversations or requests that are just paging through older conversations).\n          in: query\n          name: include_num_unread\n          required: false\n          schema:\n            type: integer\n            default: 0\n        - description: Client device pixel ratio used to determine thumbnail size (default\n            1.0).\n          in: query\n          name: device_pixel_ratio\n          required: false\n          schema:\n            type: number\n            default: 1\n      responses:\n        \"200\":\n          description: The conversations and paging data.\n          content:\n            application/json:\n              schema:\n                properties:\n                  conversations:\n                    items:\n                      $ref: \"#/components/schemas/Conversation\"\n                    type: array\n                  num_unread:\n                    description: \u003e\n                      If the include_num_unread parameter is set to 1, this will\n                      be set to the total number of conversations that have\n                      unread messages matching the query parameters of the\n                      request.  If the num_unread parameter is set to 0, this\n                      will be null.\n                    type: integer\n                  page:\n                    type: integer\n                  per_page:\n                    type: integer\n                type: object\n        \"400\":\n          description: Invalid parameters.\n      summary: List conversations\n      tags:\n        - messages\n  /conversations/mark-all-read:\n    put:\n      operationId: mark_all_conversations_read\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                message_id:\n                  description: The message_id of the most recent message from the\n                    conversations that the client has downloaded.\n                  type: string\n              required:\n                - message_id\n      responses:\n        \"200\":\n          description: Conversations marked as read.\n        \"400\":\n          description: Invalid message_id.\n      summary: Mark all conversations as read\n      tags:\n        - messages\n  /conversations/search:\n    get:\n      description: Searches all conversations except blocked conversations.\n      operationId: search_conversations\n      parameters:\n        - description: The search query used to find conversations and messages.\n          in: query\n          name: search\n          required: true\n          schema:\n            type: string\n        - description: The page of conversations to return.\n          in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            default: 1\n        - description: The number of conversations to return per page (must be \u003e= 1 and \u003c=\n            30).\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 30\n            default: 10\n        - description: Client device pixel ratio used to determine thumbnail size (default\n            1.0).\n          in: query\n          name: device_pixel_ratio\n          required: false\n          schema:\n            type: number\n            default: 1\n      responses:\n        \"200\":\n          description: The conversations and paging data.\n          content:\n            application/json:\n              schema:\n                properties:\n                  conversations:\n                    items:\n                      $ref: \"#/components/schemas/Conversation\"\n                    type: array\n                  page:\n                    type: integer\n                  per_page:\n                    type: integer\n                  search:\n                    type: string\n                type: object\n        \"400\":\n          description: Invalid parameters.\n      summary: Search conversations\n      tags:\n        - messages\n  \"/conversations/{conversation_id}/archive\":\n    put:\n      operationId: archive_conversation\n      parameters:\n        - description: The ID of the conversation to archive.\n          in: path\n          name: conversation_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Conversation archived.\n        \"403\":\n          description: The user doesn't have permission to modify this conversation.\n        \"404\":\n          description: Conversation not found.\n      summary: Archive conversation\n      tags:\n        - messages\n  \"/conversations/{conversation_id}/block\":\n    put:\n      operationId: block_conversation\n      parameters:\n        - description: The ID of the conversation to block.\n          in: path\n          name: conversation_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Conversation blocked.\n        \"400\":\n          description: Conversations with moderators cannot be blocked.\n        \"403\":\n          description: The user doesn't have permission to modify this conversation.\n        \"404\":\n          description: Conversation not found.\n      summary: Block conversation\n      tags:\n        - messages\n  \"/conversations/{conversation_id}/mark-read\":\n    put:\n      operationId: mark_conversation_read\n      parameters:\n        - description: The ID of the conversation to mark as read.\n          in: path\n          name: conversation_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                message_id:\n                  description: The ID of the newest message in the conversation that the\n                    current user has read.\n                  type: string\n              required:\n                - message_id\n      responses:\n        \"200\":\n          description: Conversation marked as read.\n        \"400\":\n          description: Invalid parameters.\n        \"403\":\n          description: The user doesn't have permission to modify this conversation.\n        \"404\":\n          description: Conversation or message not found.\n      summary: Mark conversation as read\n      tags:\n        - messages\n  \"/conversations/{conversation_id}/messages\":\n    get:\n      operationId: get_conversation_messages\n      parameters:\n        - description: The ID of the conversation to return messages from.\n          in: path\n          name: conversation_id\n          required: true\n          schema:\n            type: string\n        - description: The page of messages to return.\n          in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            default: 1\n        - description: The number of messages to return per page (must be \u003e= 1 and \u003c= 30).\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 30\n            default: 10\n        - description: Client device pixel ratio used to determine thumbnail size (default\n            1.0).\n          in: query\n          name: device_pixel_ratio\n          required: false\n          schema:\n            type: number\n            default: 1\n        - description: If set to 1, the conversation will be returned along with the\n            messages.\n          in: query\n          name: include_conversation\n          required: false\n          schema:\n            type: integer\n            default: 0\n      responses:\n        \"200\":\n          description: \u003e\n            The messages and page data.  The conversation data is optional and\n            is only returned if the include_conversation parameter is set.\n          content:\n            application/json:\n              schema:\n                properties:\n                  conversation:\n                    $ref: \"#/components/schemas/Conversation\"\n                  messages:\n                    items:\n                      $ref: \"#/components/schemas/Message\"\n                    type: array\n                  page:\n                    type: integer\n                  per_page:\n                    type: integer\n                type: object\n        \"400\":\n          description: Invalid parameters.\n        \"403\":\n          description: The user doesn't have permission to access the conversation.\n        \"404\":\n          description: Conversation not found.\n      summary: List conversation messages\n      tags:\n        - messages\n  \"/conversations/{conversation_id}/reply\":\n    post:\n      operationId: reply_to_conversation\n      parameters:\n        - description: The ID of the conversation to reply to.\n          in: path\n          name: conversation_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                content:\n                  description: The content of the reply.\n                  type: string\n                photo_ids:\n                  description: A comma separated list of the IDs of the photos that should\n                    be attached to this message.\n                  type: string\n                device_pixel_ratio:\n                  description: Client device pixel ratio used to determine thumbnail size\n                    (default 1.0).\n                  type: number\n                  default: 1\n              required:\n                - content\n      responses:\n        \"200\":\n          description: The new message sent to the conversation.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n        \"400\":\n          description: Invalid parameters or duplicate reply or conversation is blocked.\n        \"403\":\n          description: The user doesn't have permission to reply to the conversation.\n        \"404\":\n          description: Conversation not found.\n      summary: Reply to conversation\n      tags:\n        - messages\n  \"/conversations/{conversation_id}/report\":\n    post:\n      operationId: report_conversation\n      parameters:\n        - description: The ID of the conversation to report.\n          in: path\n          name: conversation_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                reason:\n                  description: A user provided reason why the conversation is being\n                    reported.\n                  type: string\n              required:\n                - reason\n      responses:\n        \"200\":\n          description: Conversation reported.\n        \"400\":\n          description: Empty reason parameter.\n        \"403\":\n          description: The user doesn't have permission to report the conversation.\n        \"404\":\n          description: Conversation not found.\n      summary: Report conversation\n      tags:\n        - messages\n  \"/conversations/{conversation_id}/unarchive\":\n    put:\n      operationId: unarchive_conversation\n      parameters:\n        - description: The ID of the conversation to unarchive.\n          in: path\n          name: conversation_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Conversation unarchived.\n        \"403\":\n          description: The user doesn't have permission to modify this conversation.\n        \"404\":\n          description: Conversation not found.\n      summary: Unarchive conversation\n      tags:\n        - messages\n  \"/conversations/{conversation_id}/unblock\":\n    put:\n      operationId: unblock_conversation\n      parameters:\n        - description: The ID of the conversation to unblock.\n          in: path\n          name: conversation_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Conversation unblocked.\n        \"403\":\n          description: The user doesn't have permission to modify this conversation.\n        \"404\":\n          description: Conversation not found.\n      summary: Unblock conversation\n      tags:\n        - messages\n  /feedback:\n    post:\n      description: Allows users to send feedback about the trashnothing.com site or apps.\n      operationId: send_feedback\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                subject:\n                  description: The subject.\n                  type: string\n                message:\n                  description: The message.\n                  type: string\n                meta:\n                  description: \u003e\n                    Extra information set by the client that may be useful to\n                    contextualize the feedback (eg. operating system details,\n                    browser details, app details, device details).\n                  type: string\n              required:\n                - subject\n                - message\n      responses:\n        \"200\":\n          description: The feedback has been sent.\n      summary: Send feedback\n      tags:\n        - misc\n  /groups:\n    get:\n      operationId: search_groups\n      parameters:\n        - description: Find groups that have the given text somewhere in their name (case\n            insensitive).\n          in: query\n          name: name\n          required: false\n          schema:\n            type: string\n        - description: Find groups near the given latitude and longitude.\n          in: query\n          name: latitude\n          required: false\n          schema:\n            type: number\n        - description: Find groups near the given latitude and longitude.\n          in: query\n          name: longitude\n          required: false\n          schema:\n            type: number\n        - description: \u003e\n            When latitude and longitude are passed, distance can optionally be\n            passed to only return groups within a certain distance (in\n            kilometers) from the point specified by the latitude and\n            longitude.  The distance must be \u003e 0 and \u003c= 150 and will default to\n            100.\n          in: query\n          name: distance\n          required: false\n          schema:\n            type: number\n            minimum: 0\n            maximum: 150\n            default: 100\n        - description: \u003e\n            Find groups in the given country where country is a 2 letter country\n            code for the country (see\n            https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ).\n          in: query\n          name: country\n          required: false\n          schema:\n            type: string\n        - description: \u003e\n            For countries with regions (AU, CA, GB, US), search groups in a\n            specific region as specified by the region abbreviation.  The\n            supported regions and their abbreviations are listed below. \u003cbr\n            /\u003e\u003cbr /\u003e NOTE: The region and postal_code parameters cannot be used\n            at the same time and if both are passed then the postal_code will\n            take priority. \u003cbr /\u003e\u003cbr /\u003e --- \u003cbr /\u003e\u003cbr /\u003e **AU**\u003cbr /\u003e - QLD:\n            Queensland\u003cbr /\u003e - SA: South Australia\u003cbr /\u003e - TAS: Tasmania\u003cbr /\u003e -\n            VIC: Victoria\u003cbr /\u003e - WA: Western Australia\u003cbr /\u003e - NT: Northern\n            Territory\u003cbr /\u003e - NSW: New South Wales - ACT\u003cbr /\u003e \u003cbr /\u003e **CA**\u003cbr\n            /\u003e - AB: Alberta\u003cbr /\u003e - BC: British Columbia\u003cbr /\u003e - MB:\n            Manitoba\u003cbr /\u003e - NB: New Brunswick\u003cbr /\u003e - NL: Newfoundland and\n            Labrador\u003cbr /\u003e - NS: Nova Scotia\u003cbr /\u003e - ON: Ontario\u003cbr /\u003e - QC:\n            Quebec\u003cbr /\u003e - SK: Saskatchewan\u003cbr /\u003e - PE: Prince Edward Island\u003cbr\n            /\u003e \u003cbr /\u003e **GB**\u003cbr /\u003e - E: East\u003cbr /\u003e - EM: East Midlands\u003cbr /\u003e -\n            LDN: London\u003cbr /\u003e - NE: North East\u003cbr /\u003e - NW: North West\u003cbr /\u003e -\n            NI: Northern Ireland\u003cbr /\u003e - SC: Scotland\u003cbr /\u003e - SE: South East\u003cbr\n            /\u003e - SW: South West\u003cbr /\u003e - WA: Wales\u003cbr /\u003e - WM: West Midlands\u003cbr\n            /\u003e - YH: Yorkshire and the Humber\u003cbr /\u003e \u003cbr /\u003e **US**\u003cbr /\u003e All 50\n            states and the District of Columbia are supported.  For the\n            abbreviations, see:\n            https://github.com/jasonong/List-of-US-States/blob/master/states.csv\n          in: query\n          name: region\n          required: false\n          schema:\n            type: string\n        - description: \u003e\n            Find groups in the given postal code.  Only a few countries support\n            postal code searches (US, CA, AU, GB).  The country parameter must\n            be passed when the postal_code parameter is set. \u003cbr /\u003e\u003cbr /\u003e NOTE:\n            The region and postal_code parameters cannot be used at the same\n            time and if both are passed then the postal_code will take priority.\n          in: query\n          name: postal_code\n          required: false\n          schema:\n            type: string\n        - description: The page of groups to return.\n          in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            default: 1\n        - description: The number of groups to return per page (must be \u003e= 1 and \u003c= 100).\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n            default: 20\n      responses:\n        \"200\":\n          description: The groups and paging data.\n          content:\n            application/json:\n              schema:\n                properties:\n                  end_index:\n                    description: The index of the last group being returned (an integer\n                      between start_index and num_groups).\n                    type: integer\n                  groups:\n                    items:\n                      $ref: \"#/components/schemas/Group\"\n                    type: array\n                  num_groups:\n                    description: The total number of groups available.\n                    type: integer\n                  num_pages:\n                    description: The total number of pages available.\n                    type: integer\n                  page:\n                    description: The page number of the groups being returned.\n                    type: integer\n                  per_page:\n                    description: The number of groups being returned per page.\n                    type: integer\n                  start_index:\n                    description: The index of the first group being returned (an integer\n                      between 1 and num_groups).\n                    type: integer\n                type: object\n        \"400\":\n          description: Missing or invalid parameters.\n      security:\n        - oauth2_implicit:\n            - basic\n        - oauth2_code:\n            - basic\n        - api_key: []\n      summary: Search groups\n      tags:\n        - groups\n  /groups/multiple:\n    get:\n      operationId: get_groups_by_ids\n      parameters:\n        - description: The IDs of the groups to retrieve.  If more than 20 group IDs are\n            passed, only the first 20 groups will be returned.\n          in: query\n          name: group_ids\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The groups.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Group\"\n                type: array\n        \"400\":\n          description: Missing or invalid parameters.\n      security:\n        - oauth2_implicit:\n            - basic\n        - oauth2_code:\n            - basic\n        - api_key: []\n      summary: Retrieve multiple groups\n      tags:\n        - groups\n  /groups/subscribe:\n    post:\n      description: \u003e\n        Request membership to one or more groups. \u003cbr /\u003e\u003cbr /\u003e NOTE: Any group\n        with a has_questions field set to true will also require answers to the\n        groups' new member questionnaire to be submitted.  Groups waiting for\n        answers will have their membership field set to\n        'pending-questions'.  And the questionnaire that needs to be answered\n        can be found in the membership.questionnaire field of the group after a\n        subscribe request is made to that group.\n      operationId: join_groups\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                group_ids:\n                  description: A comma separated list of the IDs of the groups to join.\n                  type: string\n              required:\n                - group_ids\n      responses:\n        \"200\":\n          description: The groups with updated membership data.\n          content:\n            application/json:\n              schema:\n                properties:\n                  groups:\n                    description: Updated data about the groups and the current users'\n                      membership to each group.\n                    items:\n                      $ref: \"#/components/schemas/Group\"\n                    type: array\n                  over_group_limit:\n                    description: \u003e\n                      When this is true, it means that some of the membership\n                      requests weren't processed in order to keep the user from\n                      going over the 12 group limit (the membership field of the\n                      groups can be used to determine which requests were\n                      processed).\n                    type: boolean\n                type: object\n        \"400\":\n          description: Missing or invalid parameters.\n        \"404\":\n          description: Group not found.\n      summary: Join groups\n      tags:\n        - groups\n  \"/groups/{group_id}\":\n    get:\n      operationId: get_group\n      parameters:\n        - description: The ID of the group to retrieve.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The group.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        \"404\":\n          description: Group not found.\n      security:\n        - oauth2_implicit:\n            - basic\n        - oauth2_code:\n            - basic\n        - api_key: []\n      summary: Retrieve a group\n      tags:\n        - groups\n  \"/groups/{group_id}/answers\":\n    post:\n      description: \u003e\n        Submits answers to a groups' membership questionnaire. \u003cbr /\u003e\u003cbr /\u003e The\n        request body should be a JSON object mapping each question from the\n        group membership.questionnaire.questions field to an answer (eg. {\"Where\n        do you live?\": \"New York City\"} ). All questions are required so no null\n        or empty string answers are allowed.\n      operationId: submit_answers\n      parameters:\n        - description: The group ID of the group that the user is submitting answers for.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties:\n                type: string\n              type: object\n        description: \u003e\n          A JSON object mapping each question from the group\n          membership.questionnaire.questions field to an answer (eg. {\"Where do\n          you live?\": \"New York City\"} ). All questions are required so no null\n          or empty string answers are allowed.\n        required: true\n      responses:\n        \"200\":\n          description: The updated group.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        \"400\":\n          description: Missing or invalid answers or questions were already answered or\n            questions don't need to be answered.\n        \"404\":\n          description: Group not found.\n      summary: Submit group answers\n      tags:\n        - groups\n  \"/groups/{group_id}/contact\":\n    post:\n      operationId: contact_moderators\n      parameters:\n        - description: The group ID of the group whose moderators will be contacted.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                subject:\n                  description: The subject of the message.\n                  type: string\n                message:\n                  description: The body of the message.\n                  type: string\n              required:\n                - subject\n                - message\n      responses:\n        \"200\":\n          description: Message was sent to moderators.\n        \"400\":\n          description: Missing or invalid parameters.\n        \"404\":\n          description: Group not found.\n      summary: Contact group moderators\n      tags:\n        - groups\n  \"/groups/{group_id}/unsubscribe\":\n    post:\n      operationId: leave_group\n      parameters:\n        - description: The ID of the group to leave.\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Updated data about the group and the current users' membership.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Group\"\n        \"400\":\n          description: The current user is not an active or pending member of the given\n            group.\n        \"404\":\n          description: Group not found.\n      summary: Leave a group\n      tags:\n        - groups\n  /photos:\n    post:\n      operationId: upload_photo\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                photo:\n                  description: Photo to upload.\n                  type: string\n                  format: binary\n                device_pixel_ratio:\n                  description: Client device pixel ratio used to determine thumbnail size\n                    (default 1.0).\n                  type: number\n                  default: 1\n              required:\n                - photo\n      responses:\n        \"200\":\n          description: Photo created.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PhotoResult\"\n        \"400\":\n          description: Invalid photo.\n      summary: Create a photo\n      tags:\n        - photos\n  /photos/multiple:\n    get:\n      operationId: get_photos_by_ids\n      parameters:\n        - description: The IDs of the photos to retrieve.  If more than 50 photo IDs are\n            passed, only the first 50 photos will be returned.\n          in: query\n          name: photo_ids\n          required: true\n          schema:\n            type: string\n        - description: Client device pixel ratio used to determine thumbnail size (default\n            1.0).\n          in: query\n          name: device_pixel_ratio\n          required: false\n          schema:\n            type: number\n            default: 1\n      responses:\n        \"200\":\n          description: The photos.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/PhotoResult\"\n                type: array\n        \"400\":\n          description: Missing or invalid parameters.\n      summary: Retrieve multiple photos\n      tags:\n        - photos\n  \"/photos/{photo_id}\":\n    delete:\n      operationId: delete_photo\n      parameters:\n        - in: path\n          name: photo_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Photo deleted.\n        \"400\":\n          description: Invalid photo.\n        \"403\":\n          description: The user doesn't have permission to delete the photo.\n        \"404\":\n          description: Photo not found.\n      summary: Delete a photo\n      tags:\n        - photos\n  \"/photos/{photo_id}/rotate\":\n    post:\n      operationId: rotate_photo\n      parameters:\n        - in: path\n          name: photo_id\n          required: true\n          schema:\n            type: string\n        - description: Rotation in degrees - currently only 90, 180 and 270 are supported\n            which correspond to rotate left, rotate upside down and rotate\n            right.\n          in: query\n          name: degrees\n          required: true\n          schema:\n            type: integer\n        - description: Client device pixel ratio used to determine thumbnail size (default\n            1.0).\n          in: query\n          name: device_pixel_ratio\n          required: false\n          schema:\n            type: number\n            default: 1\n      responses:\n        \"200\":\n          description: Photo rotated.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PhotoResult\"\n        \"400\":\n          description: Invalid photo.\n        \"403\":\n          description: The user doesn't have permission to rotate the photo.\n        \"404\":\n          description: Photo not found.\n      summary: Rotate a photo\n      tags:\n        - photos\n  /posts:\n    get:\n      description: \u003e\n        NOTE: When paging through the posts returned by this endpoint, there\n        will be at most 1,000 posts that can be returned (eg. 50 pages worth of\n        posts with the default per_page value of 20).  In areas where there are\n        more than 1,000 posts, clients can use more specific query parameters to\n        adjust which posts are returned.\n\n        NOTE: Passing the latitude, longitude and radius parameters filters all posts by their location and so these parameters will temporarily override the current users' location preferences. When latitude, longitude and radius are not specified, public posts will be filtered by the current users' location preferences.\n      operationId: get_posts\n      parameters:\n        - description: \u003e\n            A comma separated list of the post types to return.  The available\n            post types are: offer, taken, wanted, received, admin\n          in: query\n          name: types\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            A comma separated list of the post sources to retrieve posts from.\n            The available sources are: groups, trashnothing,\n            open_archive_groups. The trashnothing source is for public posts\n            that are posted on trash nothing but are not associated with any\n            group. The open_archive_groups source provides a way to easily\n            request posts from groups that have open_archives set to true\n            without having to pass a group_ids parameter.  When passed, it will\n            automatically return posts from open archive groups that are within\n            the area specified by the latitude, longitude and radius parameters\n            (or the current users' location if latitude, longitude and radius\n            aren't passed). \u003cbr /\u003e\u003cbr /\u003e NOTE: For requests using an api key\n            instead of oauth, passing the trashnothing source or the\n            open_archive_groups source makes the latitude, longitude and radius\n            parameters required.\n          in: query\n          name: sources\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            A comma separated list of the group IDs to retrieve posts from. This\n            parameter is only used if the 'groups' source is passed in the\n            sources parameter and only groups that the current user is a member\n            of or that are open archives groups will be used (the group IDs of\n            other groups will be silently discarded*). \u003cbr /\u003e\u003cbr /\u003e NOTE: For\n            requests using an api key instead of oauth, this field is required\n            if the 'groups' source is passed. In addition, only posts from\n            groups that have open_archives set to true will be used (the group\n            IDS of other groups will be silently discarded*). \u003cbr /\u003e\u003cbr/\u003e *To\n            determine which group IDs were used and which were discarded, use\n            the group_ids field in the response.\n          in: query\n          name: group_ids\n          required: false\n          schema:\n            type: string\n            default: The group IDs of every group the current user is a member of.\n        - description: The number of posts to return per page (must be \u003e= 1 and \u003c= 100).\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n            default: 20\n        - description: The page of posts to return.\n          in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            default: 1\n        - description: Client device pixel ratio used to determine thumbnail size (default\n            1.0).\n          in: query\n          name: device_pixel_ratio\n          required: false\n          schema:\n            type: number\n            default: 1\n        - description: |\n            The latitude of a point around which to return posts.\n          in: query\n          name: latitude\n          required: false\n          schema:\n            type: number\n        - description: |\n            The longitude of a point around which to return posts.\n          in: query\n          name: longitude\n          required: false\n          schema:\n            type: number\n        - description: \u003e\n            The radius in meters of a circle centered at the point defined by\n            the latitude and longitude parameters. When latitude, longitude and\n            radius are passed, only posts within the circle defined by these\n            parameters will be returned.\n          in: query\n          name: radius\n          required: false\n          schema:\n            type: number\n            minimum: 0\n            maximum: 257500\n        - description: \u003e\n            Only posts newer than this UTC date and time will be returned.  If\n            unset, defaults to the current date and time minus 90 days.\n          in: query\n          name: date_min\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - description: Only posts older than this UTC date and time will be returned.  If\n            unset, defaults to the current date and time.\n          in: query\n          name: date_max\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - description: \u003e\n            Whether or not to return satisfied offer and wanted posts.  This\n            does not affect posts other than offer and wanted posts. If set to\n            '0' (the default), only posts that are not satisfied are returned.\n            If set to '1', only satisfied posts will be returned. If set to\n            'all', all posts will be returned.\n          in: query\n          name: satisfied\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The posts and paging data.\n          content:\n            application/json:\n              schema:\n                properties:\n                  end_index:\n                    description: The index of the last post being returned (an integer\n                      between start_index and num_posts).\n                    type: integer\n                  group_ids:\n                    description: \u003e\n                      The IDs of the groups that the posts were retrieved from\n                      (will be null when no group IDs were used). These IDs may\n                      be a subset of the requested group IDs when a request\n                      includes group IDs for groups that are not open archives\n                      and that the current user is not a member of.  If the\n                      open_archive_groups source is used, these IDs may include\n                      the IDs of open archive groups that weren't present in the\n                      group_ids parameter of the request.\n                    items:\n                      type: string\n                    type: array\n                  last_listings_view:\n                    description: \u003e\n                      The UTC date and time when the current user last viewed\n                      the newest posts on the All Posts page (may be null). \u003cbr\n                      /\u003e\u003cbr /\u003e NOTE: For this to be accurate, clients must\n                      update the last_listings_view property of the current user\n                      every time the user is shown the newest posts on the All\n                      Posts page. \u003cbr /\u003e\u003cbr /\u003e NOTE: For requests using an api\n                      key instead of oauth, this field is always null.\n                    format: date-time\n                    type: string\n                  num_pages:\n                    description: The total number of pages available.\n                    type: integer\n                  num_posts:\n                    description: The total number of posts available.\n                    type: integer\n                  page:\n                    description: The page number of the posts being returned.\n                    type: integer\n                  per_page:\n                    description: The number of posts being returned per page.\n                    type: integer\n                  posts:\n                    items:\n                      $ref: \"#/components/schemas/Post\"\n                    type: array\n                  start_index:\n                    description: The index of the first post being returned (an integer\n                      between 1 and num_posts).\n                    type: integer\n                type: object\n        \"400\":\n          description: Missing or invalid parameters.\n      security:\n        - oauth2_implicit:\n            - basic\n        - oauth2_code:\n            - basic\n        - api_key: []\n      summary: List posts\n      tags:\n        - posts\n    post:\n      description: \u003e\n        Submits a new post. \u003cbr /\u003e\u003cbr /\u003e NOTE: An alternate way to submit posts\n        that does quicker client side validation is to use the script served by\n        the API at the /posts/client.js endpoint (see the description of the\n        /posts/client.js endpoint for usage instructions).\n      operationId: submit_post\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                group_ids:\n                  description: A comma separated list of group IDs to submit the post to\n                    (if any).\n                  type: string\n                type:\n                  description: |\n                    The type of post.  One of: offer, wanted\n                  type: string\n                title:\n                  description: A short description of the item(s).\n                  type: string\n                  minLength: 2\n                  maxLength: 35\n                location:\n                  description: A short location description.\n                  type: string\n                  minLength: 2\n                  maxLength: 30\n                content:\n                  description: A longer description of the item(s).\n                  type: string\n                fair_offer:\n                  description: If set to 1, the post will be posted with the Fair Offer\n                    Policy (only valid for offer posts - see\n                    https://trashnothing.com/fair_offer_policy ).\n                  type: integer\n                  default: 0\n                latitude:\n                  description: \u003e\n                    The latitude corresponding to the location description\n                    provided. \u003cbr /\u003e\u003cbr /\u003e If latitude and longitude are not\n                    provided, an attempt will be made to automatically geocode\n                    the location.  If the location is unable to be geocoded, the\n                    post will be rejected* and will have to be resubmitted with\n                    a latitude and longitude corresponding to the location or\n                    resubmitted with a different location that can be\n                    automatically geocoded. \u003cbr /\u003e\u003cbr /\u003e NOTE: The latitude and\n                    longitude should NOT be the users' exact location because we\n                    don't want to publicize their exact location unless their\n                    location description is their full address (which is not\n                    recommended). \u003cbr /\u003e\u003cbr /\u003e *When a post is rejected because\n                    it can't be geocoded, the returned error will have its\n                    identifier property set to 'unknown-location'.\n                  type: number\n                longitude:\n                  description: The longitude corresponding to the location description\n                    provided. (see the NOTE in latitude description)\n                  type: number\n                photo_ids:\n                  description: A comma separated list of the IDs of the photos that should\n                    be attached to this post.\n                  type: string\n                session:\n                  description: \u003e\n                    A JSON string representing a temporary object that is used\n                    to store data about the submission process for a single\n                    post.  The first time a post is submitted, session should be\n                    a new empty object (eg. '{}').  The session object should be\n                    persisted by the client until that post is successfully\n                    submitted and then it can be discarded so that the next post\n                    will start over with a new empty session object.  Every time\n                    a post is submitted and the response indicates that the\n                    submission was not successful, the session object returned\n                    in the response should override the clients copy of the\n                    session.\n                  type: string\n                preferences:\n                  description: \u003e\n                    A JSON string representing a permanent object that the\n                    client persists and modifies based on warnings returned by\n                    the post submission process and user input.  Some warnings\n                    returned after submitting a post have a preference_key\n                    string property so that users can opt out of those warnings\n                    in the future.  To save this opt-out preference, set the\n                    property indicated by the preference_key in the preferences\n                    object (eg. preferences[preference_key] = 1).  The\n                    preferences object is only read by submit_post and never\n                    modified - it is up to the client to initialize, modify and\n                    persist the preferences object.\n                  type: string\n              required:\n                - type\n                - title\n                - location\n                - session\n      responses:\n        \"200\":\n          description: Post submission result.\n          content:\n            application/json:\n              schema:\n                properties:\n                  identifier:\n                    description: \u003e\n                      When an error or warning is returned, this will contain a\n                      short string representing the type of error or warning\n                      that occurred.  Is null on success.\n                    type: string\n                  message:\n                    description: Contains text describing the reason a post was not\n                      successful.  Is null on success.\n                    type: string\n                  preference_key:\n                    description: \u003e\n                      Certain types of warnings can be opted out of.  These\n                      warnings will set preference_key to a string that can\n                      be  set in the preferences object by the client to opt out\n                      of that type of warning in the future (see the description\n                      of the preferences parameter for more details).  Is null\n                      for errors, success and warnings that can't be opted out\n                      of.\n                    type: string\n                  result:\n                    description: \u003e\n                      One of: success, error, warning. \u003cbr /\u003e\u003cbr /\u003e A success\n                      result indicates that the post was submitted successfully.\n                      Note that posts may not appear instantly after submission\n                      because the moderators of many groups may have additional\n                      automatic or manual review processes in place that can\n                      delay the publishing of a post. \u003cbr /\u003e\u003cbr /\u003e An error\n                      result indicates that there is an error with the post to\n                      show the user and the message property will contain text\n                      describing the error. \u003cbr /\u003e\u003cbr /\u003e A warning result\n                      indicates that there is a warning about the post to show\n                      the user and the message property will contain a string\n                      describing the warning.  A warning result doesn't prevent\n                      a post from being submitted, to continue the submission\n                      process after a warning result, just re-submit the\n                      post  (with the updated session object) to temporarily\n                      override that specific warning.\n                    type: string\n                  session:\n                    additionalProperties:\n                      type: string\n                    description: \u003e\n                      The updated session object that should override the\n                      client's copy of the session that was passed in the\n                      session parameter. Is null on success.\n                    type: object\n                type: object\n        \"400\":\n          description: Missing or invalid parameters.\n      summary: Submit a post\n      tags:\n        - posts\n  /posts/client.js:\n    get:\n      description: \u003e\n        Defines javascript functions that can be used to validate and submit\n        posts.\n\n\n        The advantage of using these functions versus using the post submission endpoint directly is that\n\n        some of the post validation checks can be done on the client side which will be faster.\n\n\n        NOTE: If used, this javascript file MUST be loaded dynamically for each user because the contents\n\n        of the file are generated dynamically based on the current user.  The file may be cached on a per\n\n        user basis based on the HTTP cache headers that are returned when the file is requested (currently\n\n        the cache headers specify that the file should expire after one day).\n\n\n\n        The following functions are available:\n\n\n        ---\n\n\n        **window.TN.check_crossposting_restrictions(group_ids)**\n\n\n        Checks for crossposting restrictions when the user selects more than one group to post to.\n\n\n        Parameters:\n\n        - **group_ids** is an array of group IDs\n\n\n        Returns an object with three properties {allowed, restricted, restrictions}.\n\n\n        - **allowed** is an array of the group IDs from group_ids that can be crossposted to\n\n\n        - **restricted** is an array of the group IDs from group_ids that can't be crossposted to\n\n\n        - **restrictions** is an object mapping group IDs that have crossposting restrictions to arrays of group IDs that are restricted.\n          It is useful for pinpointing why a group ID shows up in the restricted array so that users can be provided feedback\n          about the reason for the crossposting restriction (eg. a message like 'group A doesn't allow crossposting to group B').\n\n        For example, given group_ids = [1, 2, 3, 4] and assuming group 1 doesn't allow posting to group 3 and group 2 doesn't allow\n\n        posting to group 1, the returned object will be:\n\n\n        {allowed: [4], restricted: [1, 2, 3], restrictions: {1: [3], 2: [1]}}\n\n\n\n        ---\n\n\n        **window.TN.submit_post(args, session, preferences, callback)**\n\n\n        Submits a new post and performs validation checks on the post before it is accepted for submission.\n\n\n        Parameters:\n\n\n        - **args** is an object containing data about the post being submitted and must include\n          the following properties:\n\n          - type: The type of post.  One of: offer, wanted\n          - title: A short description of the item(s).\n          - location: A short location description.\n\n          The following properties are optional:\n\n          - content: A longer description of the item(s).\n          - group_ids: An array of group IDs to submit the post to (if any).\n          - fair_offer: If set to 1, the post will be posted with the Fair Offer Policy (only valid for offer posts - see https://trashnothing.com/fair_offer_policy ).\n          - photo_ids: A comma separated list of the IDs of the photos that should be attached to this post.\n          - latitude\n          - longitude\n\n        - **session** is a temporary object that is used by submit_post to store data about the submission\n          process for a single post.  The first time submit_post is called with a post, session should\n          be a new empty object (eg. {}).  The session object should be persisted until that post\n          is successfully submitted and then it can be discarded so that the next post will start\n          over with a new empty session object.  \n\n        - **preferences** is a permanent object that the client persists and modifies based on warnings returned\n          by the post submission process and user input.  Some post warnings passed to the callback object\n          have a preference_key string property so that users can opt out of those warnings in the future.\n          To save this opt-out preference, set the property indicated by the preference_key in the preferences\n          object (eg. preferences[preference_key] = 1).  The preferences object is only read by submit_post and\n          never modified - it is up to the client to initialize, modify and persist the preferences object.\n\n        - **callback** is a function used to return the result of the post submission. It is called and passed\n          one argument - an object with five properties {result, message, preference_key, identifier, session}.\n          The result property is a string that is one of: success, error, warning.  The identifier property is\n          set for errors and warnings and will contain a string that represents the type of error or warning that\n          occurred.\n\n          A success result indicates that the post was submitted successfully. Note that posts may not\n          appear instantly after submission because the moderators of many groups may have additional\n          automatic or manual review processes in place that can delay the publishing of a post.\n          \n          An error result indicates that there is an error with the post to show the user and the message property\n          will contain text describing the error.\n\n          A warning result indicates that there is a warning about the post to show the user and the\n          message property will contain a string describing the warning.  A warning result doesn't prevent a post from\n          being submitted, to continue the submission process after a warning result, just re-submit the post\n          (with the updated session object) to temporarily override that specific warning.\n\n          Certain types of warnings can be opted out of.  These warnings will set preference_key to a string that can be \n          set in the preferences object by the client to opt out of that type of warning in the future (see the description\n          of the preferences parameter for more details).\n      operationId: get_post_client_javascript\n      parameters:\n        - description: \u003e\n            A comma separated list of all the group IDs that the current user is\n            a member of. If the current user is not a member of any groups,\n            simply pass an empty string.\n          in: query\n          name: group_ids\n          required: true\n          schema:\n            type: string\n        - description: The name of a global function to call once the script is loaded.\n          in: query\n          name: callback\n          required: false\n          schema:\n            type: string\n        - description: \u003e\n            Passing the current users' OAuth2 access token as a GET parameter\n            makes it easier to load this script in a normal HTML \u003cscript\u003e tag.\n          in: query\n          name: access_token\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The client.js javascript file.\n        \"400\":\n          description: Invalid group IDs.\n      summary: Retrieve client.js\n      tags:\n        - posts\n  /posts/multiple:\n    get:\n      operationId: get_posts_by_ids\n      parameters:\n        - description: \u003e\n            A comma separated list of the post IDs. If more than 10 post IDs are\n            passed, only the first 10 posts will be returned.\n          in: query\n          name: post_ids\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The posts.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Post\"\n                type: array\n      security:\n        - oauth2_implicit:\n            - basic\n        - oauth2_code:\n            - basic\n        - api_key: []\n      summary: Retrieve multiple posts\n      tags:\n        - posts\n  /posts/search:\n    get:\n      description: \u003e\n        Searching posts takes the same arguments as listing posts except for the\n        addition of the search and sort_by parameters.\n\n        NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned.\n      operationId: search_posts\n      parameters:\n        - description: The search query used to find posts.\n          in: query\n          name: search\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            How to sort the posts that are returned.  One of: relevance, date\n            \u003cbr /\u003e\u003cbr /\u003e Setting sort_by to date will sort posts from newest to\n            oldest.\n          in: query\n          name: sort_by\n          required: false\n          schema:\n            type: string\n            default: relevance\n        - description: \u003e\n            A comma separated list of the post types to return.  The available\n            post types are: offer, taken, wanted, received, admin\n          in: query\n          name: types\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            A comma separated list of the post sources to retrieve posts from.\n            The available sources are: groups, trashnothing,\n            open_archive_groups. The trashnothing source is for public posts\n            that are posted on trash nothing but are not associated with any\n            group. The open_archive_groups source provides a way to easily\n            request posts from groups that have open_archives set to true\n            without having to pass a group_ids parameter.  When passed, it will\n            automatically return posts from open archive groups that are within\n            the area specified by the latitude, longitude and radius parameters\n            (or the current users' location if latitude, longitude and radius\n            aren't passed). \u003cbr /\u003e\u003cbr /\u003e NOTE: For requests using an api key\n            instead of oauth, passing the trashnothing source or the\n            open_archive_groups source makes the latitude, longitude and radius\n            parameters required.\n          in: query\n          name: sources\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            A comma separated list of the group IDs to retrieve posts from. This\n            parameter is only used if the 'groups' source is passed in the\n            sources parameter and only groups that the current user is a member\n            of or that are open archives groups will be used (the group IDs of\n            other groups will be silently discarded*). \u003cbr /\u003e\u003cbr /\u003e NOTE: For\n            requests using an api key instead of oauth, this field is required\n            if the 'groups' source is passed. In addition, only posts from\n            groups that have open_archives set to true will be used (the group\n            IDS of other groups will be silently discarded*). \u003cbr /\u003e\u003cbr/\u003e *To\n            determine which group IDs were used and which were discarded, use\n            the group_ids field in the response.\n          in: query\n          name: group_ids\n          required: false\n          schema:\n            type: string\n            default: The group IDs of every group the current user is a member of.\n        - description: The number of posts to return per page (must be \u003e= 1 and \u003c= 100).\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n            default: 20\n        - description: The page of posts to return.\n          in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            default: 1\n        - description: Client device pixel ratio used to determine thumbnail size (default\n            1.0).\n          in: query\n          name: device_pixel_ratio\n          required: false\n          schema:\n            type: number\n            default: 1\n        - description: |\n            The latitude of a point around which to return posts.\n          in: query\n          name: latitude\n          required: false\n          schema:\n            type: number\n        - description: |\n            The longitude of a point around which to return posts.\n          in: query\n          name: longitude\n          required: false\n          schema:\n            type: number\n        - description: \u003e\n            The radius in meters of a circle centered at the point defined by\n            the latitude and longitude parameters. When latitude, longitude and\n            radius are passed, only posts within the circle defined by these\n            parameters will be returned.\n          in: query\n          name: radius\n          required: false\n          schema:\n            type: number\n            minimum: 0\n            maximum: 257500\n        - description: \u003e\n            Only posts newer than this UTC date and time will be returned.  If\n            unset, defaults to the current date and time minus 90 days.\n          in: query\n          name: date_min\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - description: Only posts older than this UTC date and time will be returned.  If\n            unset, defaults to the current date and time.\n          in: query\n          name: date_max\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - description: \u003e\n            Whether or not to return satisfied offer and wanted posts.  This\n            does not affect posts other than offer and wanted posts. If set to\n            '0' (the default), only posts that are not satisfied are returned.\n            If set to '1', only satisfied posts will be returned. If set to\n            'all', all posts will be returned.\n          in: query\n          name: satisfied\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The posts and paging data.\n          content:\n            application/json:\n              schema:\n                properties:\n                  end_index:\n                    description: The index of the last post being returned (an integer\n                      between start_index and num_posts).\n                    type: integer\n                  group_ids:\n                    description: \u003e\n                      The IDs of the groups that the posts were retrieved from\n                      (will be null when no group IDs were used). These IDs may\n                      be a subset of the requested group IDs when a request\n                      includes group IDs for groups that are not open archives\n                      and that the current user is not a member of.  If the\n                      open_archive_groups source is used, these IDs may include\n                      the IDs of open archive groups that weren't present in the\n                      group_ids parameter of the request.\n                    items:\n                      type: string\n                    type: array\n                  num_pages:\n                    description: The total number of pages available.\n                    type: integer\n                  num_posts:\n                    description: The total number of posts available.\n                    type: integer\n                  page:\n                    description: The page number of the posts being returned.\n                    type: integer\n                  per_page:\n                    description: The number of posts being returned per page.\n                    type: integer\n                  posts:\n                    items:\n                      $ref: \"#/components/schemas/PostSearchResult\"\n                    type: array\n                  start_index:\n                    description: The index of the first post being returned (an integer\n                      between 1 and num_posts).\n                    type: integer\n                type: object\n        \"400\":\n          description: Missing or invalid parameters.\n      security:\n        - oauth2_implicit:\n            - basic\n        - oauth2_code:\n            - basic\n        - api_key: []\n      summary: Search posts\n      tags:\n        - posts\n  \"/posts/{post_id}\":\n    get:\n      operationId: get_post\n      parameters:\n        - description: The ID of the post to retrieve.\n          in: path\n          name: post_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The post.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Post\"\n        \"403\":\n          description: The user doesn't have permission to access the post.\n        \"404\":\n          description: Post not found.\n      security:\n        - oauth2_implicit:\n            - basic\n        - oauth2_code:\n            - basic\n        - api_key: []\n      summary: Retrieve a post\n      tags:\n        - posts\n  \"/posts/{post_id}/display\":\n    get:\n      description: \u003e\n        Retrieve a post and other data related to the post that is useful for\n        displaying the post such as data about the user who posted the post and\n        the groups the post was posted on.\n      operationId: get_post_and_related_data\n      parameters:\n        - description: The ID of the post to retrieve.\n          in: path\n          name: post_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The post and related data.\n          content:\n            application/json:\n              schema:\n                properties:\n                  author:\n                    $ref: \"#/components/schemas/User\"\n                  author_offer_count:\n                    description: Count of offer posts made by the post author in the last\n                      90 days.\n                    type: integer\n                  author_posts:\n                    description: \u003e\n                      Other active posts from the post author in the last 90\n                      days. A maximum of 30 posts will be returned.\n                    items:\n                      $ref: \"#/components/schemas/Post\"\n                    type: array\n                  author_wanted_count:\n                    description: Count of wanted posts made by the post author in the last\n                      90 days.\n                    type: integer\n                  geolocate_bounds:\n                    $ref: \"#/components/schemas/GeolocateBounds\"\n                  groups:\n                    description: The groups the post is published on.\n                    items:\n                      $ref: \"#/components/schemas/Group\"\n                    type: array\n                  post:\n                    $ref: \"#/components/schemas/Post\"\n                  related_posts:\n                    description: \u003e\n                      If the post is an offer post, this will contain taken\n                      posts that may correspond to the offer post (if any). If\n                      the post is a wanted post, this will contain received\n                      posts that may correspond to the wanted post (if any).\n                      These posts are useful to help people viewing the post\n                      decide if one or more of the items in the post is no\n                      longer available (for offer posts) or needed (for wanted\n                      posts).\n                    items:\n                      $ref: \"#/components/schemas/Post\"\n                    type: array\n                  user_can_reply:\n                    description: \u003e\n                      Whether or not the current user (if any) can reply to this\n                      post. Unverified users cannot reply to posts until they\n                      verify their account.\n                    type: boolean\n                type: object\n        \"403\":\n          description: The user doesn't have permission to access the post.\n        \"404\":\n          description: Post not found.\n      security:\n        - oauth2_implicit:\n            - basic\n        - oauth2_code:\n            - basic\n        - api_key: []\n      summary: Retrieve post display data\n      tags:\n        - posts\n  \"/posts/{post_id}/flag\":\n    post:\n      description: Flags a post to be reviewed by the moderators.\n      operationId: flag_post\n      parameters:\n        - in: path\n          name: post_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                reason:\n                  description: \u003e\n                    The reason that this post is being flagged.  Must be one of:\n                    'spam', 'not free (for sale/trade/borrow)', 'illegal item',\n                    'not family-friendly', 'other', 'mislabeled: is a Want',\n                    'mislabeled: is an Offer'. \u003cbr /\u003e\u003cbr /\u003e NOTE: If reason is\n                    set to 'other', the details parameter is required to be set.\n                  type: string\n                details:\n                  description: \u003e\n                    An explanation from the current user for why they are\n                    flagging this post.   This is useful for users to provide\n                    evidence or explain why there is a problem with the post.\n                    \u003cbr /\u003e\u003cbr /\u003e NOTE: If reason is set to 'other', details are\n                    required.\n                  type: string\n              required:\n                - reason\n      responses:\n        \"200\":\n          description: The post has been flagged.\n        \"400\":\n          description: Invalid reason parameter or missing details.\n        \"404\":\n          description: Post not found.\n      summary: Flag a post\n      tags:\n        - posts\n  \"/posts/{post_id}/geolocate\":\n    put:\n      description: Map a post to a specific location when the post is missing a location or\n        has an incorrect location.\n      operationId: geolocate_post\n      parameters:\n        - description: The ID of the post to geolocate.\n          in: path\n          name: post_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                latitude:\n                  type: number\n                longitude:\n                  type: number\n                location:\n                  description: \u003e\n                    A location name corresponding to the given latitude and\n                    longitude.  Usually this is either a location included\n                    somewhere in the post title or content or a location\n                    description typed or selected by the user who is mapping the\n                    post.\n                  type: string\n              required:\n                - latitude\n                - longitude\n      responses:\n        \"200\":\n          description: The updated post.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Post\"\n        \"400\":\n          description: Invalid latitude or longitude.\n        \"403\":\n          description: The user doesn't have permission to access the post.\n        \"404\":\n          description: Post not found.\n      summary: Map a post\n      tags:\n        - posts\n  \"/posts/{post_id}/reply\":\n    post:\n      description: Send a reply to a post from the current user to the post author.\n      operationId: reply_to_post\n      parameters:\n        - description: The ID of the post to reply to.\n          in: path\n          name: post_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                message:\n                  description: The message to send to the post author.\n                  type: string\n                send_copy:\n                  description: If set to 1, a copy of the reply will be emailed to the\n                    current user.\n                  type: integer\n                  default: 0\n                photo_ids:\n                  description: A comma separated list of the IDs of the photos that should\n                    be attached to this reply.\n                  type: string\n              required:\n                - message\n      responses:\n        \"200\":\n          description: The reply has been sent.\n        \"400\":\n          description: Missing message parameter or post has been satisfied or post author\n            is blocked.\n        \"403\":\n          description: The user doesn't have permission to reply to the post.\n        \"404\":\n          description: Post not found.\n      summary: Reply to a post\n      tags:\n        - posts\n  \"/posts/{post_id}/satisfy\":\n    put:\n      description: Mark an offer or wanted post by the current user as satisfied (eg. an\n        offer has been taken or a wanted has been received).\n      operationId: satisfy_post\n      parameters:\n        - description: The ID of the post to satisfy.\n          in: path\n          name: post_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                summary:\n                  description: \u003e\n                    If the post contains multiple items and not every item has\n                    been taken or received, pass a short summary of the items\n                    that have been so that the post will be updated to reflect\n                    which items are still being offered or request. Once all\n                    items in the post have been taken or received, this endpoint\n                    should be called with no summary passed so that the post\n                    will be removed from the listings.\n                  type: string\n      responses:\n        \"200\":\n          description: The updated post.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Post\"\n        \"400\":\n          description: Invalid summary or the post is not an offer or wanted post.\n        \"403\":\n          description: The user doesn't have permission to access the post.\n        \"404\":\n          description: Post not found.\n      summary: Satisfy a post\n      tags:\n        - posts\n  \"/posts/{post_id}/share\":\n    get:\n      description: Retrieve text and html content useful for sharing a post by email.\n      operationId: get_post_share_content\n      parameters:\n        - description: The ID of the post to share.\n          in: path\n          name: post_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Email subject, text body and html body for sharing a post by email.\n          content:\n            application/json:\n              schema:\n                properties:\n                  html:\n                    description: Email body as html.\n                    type: string\n                  subject:\n                    description: Email subject line text.\n                    type: string\n                  text:\n                    description: Email body as plain text.\n                    type: string\n                type: object\n      summary: Retrieve post share content\n      tags:\n        - posts\n    post:\n      description: Forwards a copy of the post to the current user so that they can forward\n        it to friends.\n      operationId: share_post\n      parameters:\n        - description: The ID of the post to share.\n          in: path\n          name: post_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Post shared.\n        \"403\":\n          description: The user doesn't have permission to access the post.\n        \"404\":\n          description: Post not found.\n      summary: Share a post\n      tags:\n        - posts\n  /users/me:\n    get:\n      operationId: get_current_user\n      responses:\n        \"200\":\n          description: User data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CurrentUser\"\n        \"404\":\n          description: User not found.\n      summary: Retrieve current user\n      tags:\n        - users\n    put:\n      description: \u003e\n        Update the current user.  All fields are optional so requests can update\n        just one or multiple user properties at a time.\n      operationId: update_current_user\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                firstname:\n                  description: The first name of the user.\n                  type: string\n                lastname:\n                  description: The last name of the user.\n                  type: string\n                public_name:\n                  description: \u003e\n                    Whether or not the users' first and last name will be\n                    visible to other users. Set to 1 to enable and 0 to disable.\n                  type: integer\n                digest:\n                  description: \u003e\n                    The frequency of digest emails sent to this user. One of:\n                    daily, 12_hours, 8_hours, 6_hours, 4_hours, 2_hours, hourly\n                    \u003cbr /\u003e\u003cbr /\u003e To disable digests, set this to an empty\n                    string. \u003cbr /\u003e\u003cbr /\u003e NOTE: A weekly option with the value\n                    'weekly' will probably be added in the future so clients\n                    should recognize weekly as a valid value that can be\n                    displayed and set if it is ever returned.\n                  type: string\n                digest_photos:\n                  description: \u003e\n                    Whether or not to include photos in the digest emails. Set\n                    to 1 to enable photos and 0 to disable photos.\n                  type: integer\n                post_reminders:\n                  description: \u003e\n                    Whether or not the user will receive post reminder emails\n                    (to remind them to update or repost their posts). Set to 1\n                    to enable and 0 to disable.\n                  type: integer\n                password:\n                  description: \u003e\n                    A new password for the users' account.  When setting a new\n                    password, the old_password parameter must be passed and set\n                    to the users' current password. \u003cbr /\u003e\u003cbr /\u003e NOTE: The\n                    password and old_password properties can NOT be used when\n                    the user property has_password is false.  Instead, use the\n                    password reset endpoint to have a new password emailed to\n                    the user.\n                  type: string\n                old_password:\n                  description: The users current password.  This is required when the user\n                    is changing their password.\n                  type: string\n                profile_image_source:\n                  description: \u003e\n                    The source of the users' profile image. The values this can\n                    be set to change dynamically based on the users' account. To\n                    get the values that can be used, use the source properties\n                    returned by the profile images endpoint.\n                  type: string\n                last_listings_view:\n                  description: The UTC date and time when the user last viewed the newest\n                    posts on the All Posts page.\n                  type: string\n                  format: date-time\n                public_post_sources:\n                  description: \u003e\n                    A comma separated list of the sources to show public posts\n                    from. Currently only 'trashnothing' is supported.\n\n                    If not passed, all sources will be enabled.\n\n                    If set to an empty string, no sources will be enabled which effectively disables public posts for the user so that the user will only see posts from the groups they are a member of.  Setting to an empty string is only allowed if the user is a member of one or more groups.\n                  type: string\n                show_all_group_posts:\n                  description: \u003e\n                    Set to 1 to show all group posts on the main posts page and\n                    in the digest emails.  Set to 0 to only show group posts in\n                    the area defined by the users' location.  Can only be set to\n                    0 if the users' location is already set.\n                  type: integer\n      responses:\n        \"200\":\n          description: The updated user data.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CurrentUser\"\n        \"400\":\n          description: Invalid parameter.\n      summary: Update current user\n      tags:\n        - users\n  /users/me/alerts:\n    get:\n      operationId: get_alerts\n      responses:\n        \"200\":\n          description: The users alerts.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Alert\"\n                type: array\n      summary: List current users' email alerts\n      tags:\n        - users\n    put:\n      operationId: create_alert\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                search:\n                  description: When a post matches this search query, an email alert will\n                    be sent.  Must have a length \u003e= 2 and \u003c 255 characters.\n                  type: string\n                types:\n                  description: \u003e\n                    A comma separated list of the post types that the alert\n                    should match against. The available post types are: offer,\n                    wanted\n                  type: string\n              required:\n                - search\n                - types\n      responses:\n        \"200\":\n          description: The new alert.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Alert\"\n        \"400\":\n          description: Missing or invalid parameters or maximum number of alerts reached.\n      summary: Create an email alert\n      tags:\n        - users\n  \"/users/me/alerts/{alert_id}\":\n    delete:\n      operationId: delete_alert\n      parameters:\n        - description: The ID of the email alert to delete.\n          in: path\n          name: alert_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Alert deleted.\n        \"403\":\n          description: The user doesn't have permission to access the alert.\n        \"404\":\n          description: Alert not found.\n      summary: Delete an email alert\n      tags:\n        - users\n  /users/me/email:\n    post:\n      description: \u003e\n        Change the users' current email address.  A verification link will be\n        emailed to the new email address to verify that the email account\n        belongs to the user.  The email change will not take effect until the\n        user clicks the link in the verification email.\n      operationId: change_email\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                address:\n                  description: The new email address.\n                  type: string\n              required:\n                - address\n      responses:\n        \"200\":\n          description: A verification email was sent to the new email address.\n        \"400\":\n          description: Invalid email address.\n      summary: Change email address\n      tags:\n        - users\n  /users/me/email/not-bouncing:\n    put:\n      description: \u003e\n        Resets an email address bouncing state to false.  The users' email\n        address may be automatically marked as bouncing again if further emails\n        sent to it are bounced.\n      operationId: set_email_not_bouncing\n      responses:\n        \"200\":\n          description: The updated user.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CurrentUser\"\n        \"400\":\n          description: Email not yet verified.\n      summary: Set users' email address as not bouncing\n      tags:\n        - users\n  /users/me/groups:\n    get:\n      operationId: get_current_user_groups\n      parameters:\n        - description: \u003e\n            Set the membership parameter to only return certain groups. The\n            options are: \u003cbr /\u003e\u003cbr /\u003e - **subscribed**: Only return groups the\n            user is a member of.\u003cbr /\u003e - **pending-questions**: Only return\n            groups where the user needs to respond to a new member\n            questionnaire.\u003cbr /\u003e - **pending**: Only return groups where the\n            user is waiting for their membership request to be approved\n            (excludes groups which are pending-questions). \u003cbr /\u003e\u003cbr /\u003e If\n            unset, all groups the user is a member of and pending membership on\n            will be returned.\n          in: query\n          name: membership\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The users groups.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Group\"\n                type: array\n        \"400\":\n          description: Invalid membership parameter.\n      summary: List current users' groups\n      tags:\n        - users\n  /users/me/location:\n    put:\n      description: \u003e\n        Update the current users' location. The location is used to determine\n        which posts are shown to the user (both public posts and group posts).\n      operationId: update_location\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: A name that describes the location specified by the given\n                    latitude and longitude (must be \u003c= 128 characters).\n                  type: string\n                latitude:\n                  type: number\n                longitude:\n                  type: number\n                radius:\n                  description: \u003e\n                    A radius in meters that defines a circle around the point\n                    specified by latitude and longitude. Only posts within the\n                    area specified by this circle will be shown.\n\n                    If set to 0, effectively disables public posts for the user.\n                  type: number\n                  minimum: 0\n                  maximum: 257500\n              required:\n                - name\n                - latitude\n                - longitude\n                - radius\n      responses:\n        \"200\":\n          description: The user with the updated location.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CurrentUser\"\n        \"400\":\n          description: Missing or invalid parameters.\n      summary: Update location\n      tags:\n        - users\n  /users/me/notices:\n    get:\n      operationId: get_user_group_notices\n      parameters:\n        - description: A comma separated list of group IDs to return notices for.  If\n            unset, notices for all the users groups will be returned.\n          in: query\n          name: group_ids\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The users group notices.\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/GroupNotice\"\n                type: array\n        \"400\":\n          description: Invalid group IDs.\n      summary: List current users' group notices\n      tags:\n        - users\n  /users/me/posts:\n    get:\n      description: \u003e\n        NOTE: In order to make it easier to see all a users\u0026#39; posts, the\n        current users\u0026#39; location preferences are not applied when listing or\n        searching posts from a single user.  If location based filtering of the\n        posts is needed, the latitude, longitude and radius parameters may be\n        used.\n      operationId: get_current_user_posts\n      parameters:\n        - description: \u003e\n            A comma separated list of the post types to return.  The available\n            post types are: offer, taken, wanted, received, admin\n          in: query\n          name: types\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            A comma separated list of the post sources to retrieve posts from.\n            The available sources are: groups, trashnothing,\n            open_archive_groups. The trashnothing source is for public posts\n            that are posted on trash nothing but are not associated with any\n            group. The open_archive_groups source provides a way to easily\n            request posts from groups that have open_archives set to true\n            without having to pass a group_ids parameter.  When passed, it will\n            automatically return posts from open archive groups that are within\n            the area specified by the latitude, longitude and radius parameters\n            (or the current users' location if latitude, longitude and radius\n            aren't passed). \u003cbr /\u003e\u003cbr /\u003e NOTE: For requests using an api key\n            instead of oauth, passing the trashnothing source or the\n            open_archive_groups source makes the latitude, longitude and radius\n            parameters required.\n          in: query\n          name: sources\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            A comma separated list of the group IDs to retrieve posts from. This\n            parameter is only used if the 'groups' source is passed in the\n            sources parameter and only groups that the current user is a member\n            of or that are open archives groups will be used (the group IDs of\n            other groups will be silently discarded*). \u003cbr /\u003e\u003cbr /\u003e NOTE: For\n            requests using an api key instead of oauth, this field is required\n            if the 'groups' source is passed. In addition, only posts from\n            groups that have open_archives set to true will be used (the group\n            IDS of other groups will be silently discarded*). \u003cbr /\u003e\u003cbr/\u003e *To\n            determine which group IDs were used and which were discarded, use\n            the group_ids field in the response.\n          in: query\n          name: group_ids\n          required: false\n          schema:\n            type: string\n            default: The group IDs of every group the current user is a member of.\n        - description: The number of posts to return per page (must be \u003e= 1 and \u003c= 100).\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n            default: 20\n        - description: The page of posts to return.\n          in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            default: 1\n        - description: Client device pixel ratio used to determine thumbnail size (default\n            1.0).\n          in: query\n          name: device_pixel_ratio\n          required: false\n          schema:\n            type: number\n            default: 1\n        - description: |\n            The latitude of a point around which to return posts.\n          in: query\n          name: latitude\n          required: false\n          schema:\n            type: number\n        - description: |\n            The longitude of a point around which to return posts.\n          in: query\n          name: longitude\n          required: false\n          schema:\n            type: number\n        - description: \u003e\n            The radius in meters of a circle centered at the point defined by\n            the latitude and longitude parameters. When latitude, longitude and\n            radius are passed, only posts within the circle defined by these\n            parameters will be returned.\n          in: query\n          name: radius\n          required: false\n          schema:\n            type: number\n            minimum: 0\n            maximum: 257500\n        - description: |\n            Only posts newer than this UTC date and time will be returned.\n          in: query\n          name: date_min\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - description: Only posts older than this UTC date and time will be returned.\n          in: query\n          name: date_max\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - description: \u003e\n            Whether or not to return satisfied offer and wanted posts.  This\n            does not affect posts other than offer and wanted posts. If set to\n            '0' (the default), only posts that are not satisfied are returned.\n            If set to '1', only satisfied posts will be returned. If set to\n            'all', all posts will be returned.\n          in: query\n          name: satisfied\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The posts and paging data.\n          content:\n            application/json:\n              schema:\n                properties:\n                  end_index:\n                    description: The index of the last post being returned (an integer\n                      between start_index and num_posts).\n                    type: integer\n                  group_ids:\n                    description: \u003e\n                      The IDs of the groups that the posts were retrieved from\n                      (will be null when no group IDs were used). These IDs may\n                      be a subset of the requested group IDs when a request\n                      includes group IDs for groups that are not open archives\n                      and that the current user is not a member of.  If the\n                      open_archive_groups source is used, these IDs may include\n                      the IDs of open archive groups that weren't present in the\n                      group_ids parameter of the request.\n                    items:\n                      type: string\n                    type: array\n                  last_listings_view:\n                    description: \u003e\n                      The UTC date and time when the current user last viewed\n                      the newest posts on the All Posts page (may be null). \u003cbr\n                      /\u003e\u003cbr /\u003e NOTE: For this to be accurate, clients must\n                      update the last_listings_view property of the current user\n                      every time the user is shown the newest posts on the All\n                      Posts page. \u003cbr /\u003e\u003cbr /\u003e NOTE: For requests using an api\n                      key instead of oauth, this field is always null.\n                    format: date-time\n                    type: string\n                  num_pages:\n                    description: The total number of pages available.\n                    type: integer\n                  num_posts:\n                    description: The total number of posts available.\n                    type: integer\n                  page:\n                    description: The page number of the posts being returned.\n                    type: integer\n                  per_page:\n                    description: The number of posts being returned per page.\n                    type: integer\n                  posts:\n                    items:\n                      $ref: \"#/components/schemas/Post\"\n                    type: array\n                  start_index:\n                    description: The index of the first post being returned (an integer\n                      between 1 and num_posts).\n                    type: integer\n                type: object\n        \"400\":\n          description: Missing or invalid parameters.\n      summary: List current users' posts\n      tags:\n        - users\n  /users/me/posts/search:\n    get:\n      description: \u003e\n        Searching posts takes the same arguments as listing posts except for the\n        addition of the search and sort_by parameters.\n      operationId: search_current_user_posts\n      parameters:\n        - description: The search query used to find posts.\n          in: query\n          name: search\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            How to sort the posts that are returned.  One of: relevance, date\n            \u003cbr /\u003e\u003cbr /\u003e Setting sort_by to date will sort posts from newest to\n            oldest.\n          in: query\n          name: sort_by\n          required: false\n          schema:\n            type: string\n            default: relevance\n        - description: \u003e\n            A comma separated list of the post types to return.  The available\n            post types are: offer, taken, wanted, received, admin\n          in: query\n          name: types\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            A comma separated list of the post sources to retrieve posts from.\n            The available sources are: groups, trashnothing,\n            open_archive_groups. The trashnothing source is for public posts\n            that are posted on trash nothing but are not associated with any\n            group. The open_archive_groups source provides a way to easily\n            request posts from groups that have open_archives set to true\n            without having to pass a group_ids parameter.  When passed, it will\n            automatically return posts from open archive groups that are within\n            the area specified by the latitude, longitude and radius parameters\n            (or the current users' location if latitude, longitude and radius\n            aren't passed). \u003cbr /\u003e\u003cbr /\u003e NOTE: For requests using an api key\n            instead of oauth, passing the trashnothing source or the\n            open_archive_groups source makes the latitude, longitude and radius\n            parameters required.\n          in: query\n          name: sources\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            A comma separated list of the group IDs to retrieve posts from. This\n            parameter is only used if the 'groups' source is passed in the\n            sources parameter and only groups that the current user is a member\n            of or that are open archives groups will be used (the group IDs of\n            other groups will be silently discarded*). \u003cbr /\u003e\u003cbr /\u003e NOTE: For\n            requests using an api key instead of oauth, this field is required\n            if the 'groups' source is passed. In addition, only posts from\n            groups that have open_archives set to true will be used (the group\n            IDS of other groups will be silently discarded*). \u003cbr /\u003e\u003cbr/\u003e *To\n            determine which group IDs were used and which were discarded, use\n            the group_ids field in the response.\n          in: query\n          name: group_ids\n          required: false\n          schema:\n            type: string\n            default: The group IDs of every group the current user is a member of.\n        - description: The number of posts to return per page (must be \u003e= 1 and \u003c= 100).\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n            default: 20\n        - description: The page of posts to return.\n          in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            default: 1\n        - description: Client device pixel ratio used to determine thumbnail size (default\n            1.0).\n          in: query\n          name: device_pixel_ratio\n          required: false\n          schema:\n            type: number\n            default: 1\n        - description: |\n            The latitude of a point around which to return posts.\n          in: query\n          name: latitude\n          required: false\n          schema:\n            type: number\n        - description: |\n            The longitude of a point around which to return posts.\n          in: query\n          name: longitude\n          required: false\n          schema:\n            type: number\n        - description: \u003e\n            The radius in meters of a circle centered at the point defined by\n            the latitude and longitude parameters. When latitude, longitude and\n            radius are passed, only posts within the circle defined by these\n            parameters will be returned.\n          in: query\n          name: radius\n          required: false\n          schema:\n            type: number\n            minimum: 0\n            maximum: 257500\n        - description: |\n            Only posts newer than this UTC date and time will be returned.\n          in: query\n          name: date_min\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - description: Only posts older than this UTC date and time will be returned.\n          in: query\n          name: date_max\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - description: \u003e\n            Whether or not to return satisfied offer and wanted posts.  This\n            does not affect posts other than offer and wanted posts. If set to\n            '0' (the default), only posts that are not satisfied are returned.\n            If set to '1', only satisfied posts will be returned. If set to\n            'all', all posts will be returned.\n          in: query\n          name: satisfied\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The posts and paging data.\n          content:\n            application/json:\n              schema:\n                properties:\n                  end_index:\n                    description: The index of the last post being returned (an integer\n                      between start_index and num_posts).\n                    type: integer\n                  group_ids:\n                    description: \u003e\n                      The IDs of the groups that the posts were retrieved from\n                      (will be null when no group IDs were used). These IDs may\n                      be a subset of the requested group IDs when a request\n                      includes group IDs for groups that are not open archives\n                      and that the current user is not a member of.  If the\n                      open_archive_groups source is used, these IDs may include\n                      the IDs of open archive groups that weren't present in the\n                      group_ids parameter of the request.\n                    items:\n                      type: string\n                    type: array\n                  num_pages:\n                    description: The total number of pages available.\n                    type: integer\n                  num_posts:\n                    description: The total number of posts available.\n                    type: integer\n                  page:\n                    description: The page number of the posts being returned.\n                    type: integer\n                  per_page:\n                    description: The number of posts being returned per page.\n                    type: integer\n                  posts:\n                    items:\n                      $ref: \"#/components/schemas/PostSearchResult\"\n                    type: array\n                  start_index:\n                    description: The index of the first post being returned (an integer\n                      between 1 and num_posts).\n                    type: integer\n                type: object\n        \"400\":\n          description: Missing or invalid parameters.\n      summary: Search current users' posts\n      tags:\n        - users\n  /users/me/profile-images:\n    get:\n      operationId: get_profile_images\n      responses:\n        \"200\":\n          description: The  users profile images.\n          content:\n            application/json:\n              schema:\n                items:\n                  properties:\n                    image:\n                      description: An image URL.\n                      type: string\n                    source:\n                      description: \u003e\n                        The source of the image.  Currently one of: gravatar,\n                        facebook, twitter, google \u003cbr /\u003e\u003cbr /\u003e NOTE: Additional\n                        sources may be added in the future (eg. 'trashnothing'\n                        when support for uploading custom profile images is\n                        added) so clients should take care to support arbitrary\n                        sources being returned.\n                      type: string\n                  type: object\n                type: array\n      summary: List current users' profile images\n      tags:\n        - users\n  /users/me/resend-verification:\n    post:\n      operationId: resend_account_verification_email\n      responses:\n        \"200\":\n          description: Verification email was resent.\n        \"400\":\n          description: Account already verified.\n      summary: Resend account verification email\n      tags:\n        - users\n  /users/me/reset-password:\n    post:\n      operationId: send_password_reset_email\n      responses:\n        \"200\":\n          description: Password reset email was sent.\n      summary: Send password reset email\n      tags:\n        - users\n  /users/report:\n    post:\n      operationId: report_user\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                subject:\n                  description: The subject of the message.\n                  type: string\n                message:\n                  description: The body of the message.\n                  type: string\n                user_id:\n                  description: The ID of the user to report.  One of user_id or user_email\n                    must be passed but only user_id will be used if both are\n                    passed.\n                  type: string\n                user_email:\n                  description: \u003e\n                    The email of the user to report.  Often users only know to\n                    identify other users by their email addresses so allowing\n                    users to enter an email address can be easier in certain\n                    cases.\n                  type: string\n                group_id:\n                  description: \u003e\n                    The ID of the group to report the user to.  This may be\n                    disregarded in cases where user_email is set and can be used\n                    to automatically identify which group the user should be\n                    reported to (because some email addresses are specific to\n                    certain groups).\n                  type: string\n              required:\n                - subject\n                - message\n      responses:\n        \"200\":\n          description: The user was reported.\n        \"400\":\n          description: Missing or invalid parameters.  In particular, a user cannot report\n            themselves.\n        \"404\":\n          description: User or group not found.\n      summary: Report a user\n      tags:\n        - users\n  \"/users/{user_id}\":\n    get:\n      operationId: get_user\n      parameters:\n        - description: A user ID.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: User data\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"404\":\n          description: User not found.\n      summary: Retrieve a user\n      tags:\n        - users\n  \"/users/{user_id}/posts\":\n    get:\n      description: \u003e\n        NOTE: In order to make it easier to see all a users\u0026#39; posts, the\n        current users\u0026#39; location preferences are not applied when listing or\n        searching posts from a single user.  If location based filtering of the\n        posts is needed, the latitude, longitude and radius parameters may be\n        used.\n      operationId: get_user_posts\n      parameters:\n        - description: \u003e\n            The user ID of the user whose posts will be retrieved. Using 'me' as\n            the user_id will return the posts for the current user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            A comma separated list of the post types to return.  The available\n            post types are: offer, taken, wanted, received, admin\n          in: query\n          name: types\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            A comma separated list of the post sources to retrieve posts from.\n            The available sources are: groups, trashnothing,\n            open_archive_groups. The trashnothing source is for public posts\n            that are posted on trash nothing but are not associated with any\n            group. The open_archive_groups source provides a way to easily\n            request posts from groups that have open_archives set to true\n            without having to pass a group_ids parameter.  When passed, it will\n            automatically return posts from open archive groups that are within\n            the area specified by the latitude, longitude and radius parameters\n            (or all the open archive groups the requested user has posted to if\n            latitude, longitude and radius aren't passed). \u003cbr /\u003e\u003cbr /\u003e NOTE:\n            For requests using an api key instead of oauth, passing the\n            trashnothing source or the open_archive_groups source makes the\n            latitude, longitude and radius parameters required.\n          in: query\n          name: sources\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            A comma separated list of the group IDs to retrieve posts from. This\n            parameter is only used if the 'groups' source is passed in the\n            sources parameter and only groups that the current user is a member\n            of or that are open archives groups will be used (the group IDs of\n            other groups will be silently discarded*). \u003cbr /\u003e\u003cbr /\u003e NOTE: For\n            requests using an api key instead of oauth, this field is required\n            if the 'groups' source is passed. In addition, only posts from\n            groups that have open_archives set to true will be used (the group\n            IDS of other groups will be silently discarded*). \u003cbr /\u003e\u003cbr/\u003e *To\n            determine which group IDs were used and which were discarded, use\n            the group_ids field in the response.\n          in: query\n          name: group_ids\n          required: false\n          schema:\n            type: string\n            default: The group IDs of every group the current user is a member of.\n        - description: The number of posts to return per page (must be \u003e= 1 and \u003c= 100).\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n            default: 20\n        - description: The page of posts to return.\n          in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            default: 1\n        - description: Client device pixel ratio used to determine thumbnail size (default\n            1.0).\n          in: query\n          name: device_pixel_ratio\n          required: false\n          schema:\n            type: number\n            default: 1\n        - description: |\n            The latitude of a point around which to return posts.\n          in: query\n          name: latitude\n          required: false\n          schema:\n            type: number\n        - description: |\n            The longitude of a point around which to return posts.\n          in: query\n          name: longitude\n          required: false\n          schema:\n            type: number\n        - description: \u003e\n            The radius in meters of a circle centered at the point defined by\n            the latitude and longitude parameters. When latitude, longitude and\n            radius are passed, only posts within the circle defined by these\n            parameters will be returned.\n          in: query\n          name: radius\n          required: false\n          schema:\n            type: number\n            minimum: 0\n            maximum: 257500\n        - description: |\n            Only posts newer than this UTC date and time will be returned.\n          in: query\n          name: date_min\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - description: Only posts older than this UTC date and time will be returned.\n          in: query\n          name: date_max\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - description: \u003e\n            Whether or not to return satisfied offer and wanted posts.  This\n            does not affect posts other than offer and wanted posts. If set to\n            '0' (the default), only posts that are not satisfied are returned.\n            If set to '1', only satisfied posts will be returned. If set to\n            'all', all posts will be returned.\n          in: query\n          name: satisfied\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The posts and paging data.\n          content:\n            application/json:\n              schema:\n                properties:\n                  end_index:\n                    description: The index of the last post being returned (an integer\n                      between start_index and num_posts).\n                    type: integer\n                  group_ids:\n                    description: \u003e\n                      The IDs of the groups that the posts were retrieved from\n                      (will be null when no group IDs were used). These IDs may\n                      be a subset of the requested group IDs when a request\n                      includes group IDs for groups that are not open archives\n                      and that the current user is not a member of.  If the\n                      open_archive_groups source is used, these IDs may include\n                      the IDs of open archive groups that weren't present in the\n                      group_ids parameter of the request.\n                    items:\n                      type: string\n                    type: array\n                  last_listings_view:\n                    description: \u003e\n                      The UTC date and time when the current user last viewed\n                      the newest posts on the All Posts page (may be null). \u003cbr\n                      /\u003e\u003cbr /\u003e NOTE: For this to be accurate, clients must\n                      update the last_listings_view property of the current user\n                      every time the user is shown the newest posts on the All\n                      Posts page. \u003cbr /\u003e\u003cbr /\u003e NOTE: For requests using an api\n                      key instead of oauth, this field is always null.\n                    format: date-time\n                    type: string\n                  num_pages:\n                    description: The total number of pages available.\n                    type: integer\n                  num_posts:\n                    description: The total number of posts available.\n                    type: integer\n                  page:\n                    description: The page number of the posts being returned.\n                    type: integer\n                  per_page:\n                    description: The number of posts being returned per page.\n                    type: integer\n                  posts:\n                    items:\n                      $ref: \"#/components/schemas/Post\"\n                    type: array\n                  start_index:\n                    description: The index of the first post being returned (an integer\n                      between 1 and num_posts).\n                    type: integer\n                type: object\n        \"400\":\n          description: Missing or invalid parameters.\n      security:\n        - oauth2_implicit:\n            - basic\n        - oauth2_code:\n            - basic\n        - api_key: []\n      summary: List posts by a user\n      tags:\n        - users\n  \"/users/{user_id}/posts/search\":\n    get:\n      description: \u003e\n        Searching posts takes the same arguments as listing posts except for the\n        addition of the search and sort_by parameters.\n      operationId: search_user_posts\n      parameters:\n        - description: \u003e\n            The user ID of the user whose posts will be retrieved. Using 'me' as\n            the user_id will return the posts for the current user.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: string\n        - description: The search query used to find posts.\n          in: query\n          name: search\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            How to sort the posts that are returned.  One of: relevance, date\n            \u003cbr /\u003e\u003cbr /\u003e Setting sort_by to date will sort posts from newest to\n            oldest.\n          in: query\n          name: sort_by\n          required: false\n          schema:\n            type: string\n            default: relevance\n        - description: \u003e\n            A comma separated list of the post types to return.  The available\n            post types are: offer, taken, wanted, received, admin\n          in: query\n          name: types\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            A comma separated list of the post sources to retrieve posts from.\n            The available sources are: groups, trashnothing,\n            open_archive_groups. The trashnothing source is for public posts\n            that are posted on trash nothing but are not associated with any\n            group. The open_archive_groups source provides a way to easily\n            request posts from groups that have open_archives set to true\n            without having to pass a group_ids parameter.  When passed, it will\n            automatically return posts from open archive groups that are within\n            the area specified by the latitude, longitude and radius parameters\n            (or all the open archive groups the requested user has posted to if\n            latitude, longitude and radius aren't passed). \u003cbr /\u003e\u003cbr /\u003e NOTE:\n            For requests using an api key instead of oauth, passing the\n            trashnothing source or the open_archive_groups source makes the\n            latitude, longitude and radius parameters required.\n          in: query\n          name: sources\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            A comma separated list of the group IDs to retrieve posts from. This\n            parameter is only used if the 'groups' source is passed in the\n            sources parameter and only groups that the current user is a member\n            of or that are open archives groups will be used (the group IDs of\n            other groups will be silently discarded*). \u003cbr /\u003e\u003cbr /\u003e NOTE: For\n            requests using an api key instead of oauth, this field is required\n            if the 'groups' source is passed. In addition, only posts from\n            groups that have open_archives set to true will be used (the group\n            IDS of other groups will be silently discarded*). \u003cbr /\u003e\u003cbr/\u003e *To\n            determine which group IDs were used and which were discarded, use\n            the group_ids field in the response.\n          in: query\n          name: group_ids\n          required: false\n          schema:\n            type: string\n            default: The group IDs of every group the current user is a member of.\n        - description: The number of posts to return per page (must be \u003e= 1 and \u003c= 100).\n          in: query\n          name: per_page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n            default: 20\n        - description: The page of posts to return.\n          in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            default: 1\n        - description: Client device pixel ratio used to determine thumbnail size (default\n            1.0).\n          in: query\n          name: device_pixel_ratio\n          required: false\n          schema:\n            type: number\n            default: 1\n        - description: |\n            The latitude of a point around which to return posts.\n          in: query\n          name: latitude\n          required: false\n          schema:\n            type: number\n        - description: |\n            The longitude of a point around which to return posts.\n          in: query\n          name: longitude\n          required: false\n          schema:\n            type: number\n        - description: \u003e\n            The radius in meters of a circle centered at the point defined by\n            the latitude and longitude parameters. When latitude, longitude and\n            radius are passed, only posts within the circle defined by these\n            parameters will be returned.\n          in: query\n          name: radius\n          required: false\n          schema:\n            type: number\n            minimum: 0\n            maximum: 257500\n        - description: |\n            Only posts newer than this UTC date and time will be returned.\n          in: query\n          name: date_min\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - description: Only posts older than this UTC date and time will be returned.\n          in: query\n          name: date_max\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - description: \u003e\n            Whether or not to return satisfied offer and wanted posts.  This\n            does not affect posts other than offer and wanted posts. If set to\n            '0' (the default), only posts that are not satisfied are returned.\n            If set to '1', only satisfied posts will be returned. If set to\n            'all', all posts will be returned.\n          in: query\n          name: satisfied\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The posts and paging data.\n          content:\n            application/json:\n              schema:\n                properties:\n                  end_index:\n                    description: The index of the last post being returned (an integer\n                      between start_index and num_posts).\n                    type: integer\n                  group_ids:\n                    description: \u003e\n                      The IDs of the groups that the posts were retrieved from\n                      (will be null when no group IDs were used). These IDs may\n                      be a subset of the requested group IDs when a request\n                      includes group IDs for groups that are not open archives\n                      and that the current user is not a member of.  If the\n                      open_archive_groups source is used, these IDs may include\n                      the IDs of open archive groups that weren't present in the\n                      group_ids parameter of the request.\n                    items:\n                      type: string\n                    type: array\n                  num_pages:\n                    description: The total number of pages available.\n                    type: integer\n                  num_posts:\n                    description: The total number of posts available.\n                    type: integer\n                  page:\n                    description: The page number of the posts being returned.\n                    type: integer\n                  per_page:\n                    description: The number of posts being returned per page.\n                    type: integer\n                  posts:\n                    items:\n                      $ref: \"#/components/schemas/PostSearchResult\"\n                    type: array\n                  start_index:\n                    description: The index of the first post being returned (an integer\n                      between 1 and num_posts).\n                    type: integer\n                type: object\n        \"400\":\n          description: Missing or invalid parameters.\n      security:\n        - oauth2_implicit:\n            - basic\n        - oauth2_code:\n            - basic\n        - api_key: []\n      summary: Search posts by a user\n      tags:\n        - users\n  \"/users/{user_id}/profile-image\":\n    get:\n      description: \u003e\n        This is designed to be used as the src attribute of an HTML \u0026lt;img\u0026gt;\n        tag to show the profile image of the given user.\n      operationId: get_profile_image_file\n      parameters:\n        - description: The user ID of the user to return the profile image of.\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            A default image URL to use when the user has no profile image. Or to\n            use one of the Gravatar default images, you can set default to any\n            one of (404, mm, identicon, monsterid, wavatar, retro, blank). \u003cbr\n            /\u003e\u003cbr /\u003e To learn how the Gravatar default images options work, see\n            the Default Image section on the page at:\u003cbr /\u003e\n            https://en.gravatar.com/site/implement/images/\n          in: query\n          name: default\n          required: false\n          schema:\n            type: string\n      responses:\n        \"302\":\n          description: \u003e\n            This endpoint returns an HTTP redirect to a URL that hosts the\n            image. So requests on this endpoint that automatically follow\n            redirects (eg. most browsers) will be redirected to a valid image\n            file.\n        \"400\":\n          description: Invalid default parameter.\n      summary: Retrieve a users' profile image\n      tags:\n        - users\nservers:\n  - url: https://trashnothing.com/api/v1.0\ncomponents:\n  securitySchemes:\n    api_key:\n      description: \u003e\n        Provides access to specific public API endpoints which don't require\n        user authorization. \u003cbr /\u003e\u003cbr /\u003e The API currently allows api key access\n        to list, search and retrieve posts (for public posts and posts on open\n        archive groups) and to list, search and retrieve groups. \u003cbr /\u003e\u003cbr /\u003e\n        NOTE: Some API endpoints behave differently when requests are made using\n        api keys instead of oauth (because api key requests have no user\n        associated with them).  Check the documentation for each endpoint for a\n        description of the differences.\n      in: query\n      name: api_key\n      type: apiKey\n    oauth2_code:\n      description: \u003e\n        This OAuth2 flow is designed for server side apps and is not enabled by\n        default for new apps. If you would like to use this flow for your app,\n        contact us through the [trash nothing Developer\n        page](https://trashnothing.com/developer).\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: https://trashnothing.com/oauth2/authorize\n          tokenUrl: https://trashnothing.com/oauth2/token\n          scopes:\n            basic: Provides full access to a user's account\n    oauth2_implicit:\n      description: |\n        This is the default OAuth2 flow for new apps.\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://trashnothing.com/oauth2/authorize\n          scopes:\n            basic: Provides full access to a user's account\n  schemas:\n    Alert:\n      description: A search alert that the user has created so that they can be notified\n        when new posts match the search query specified by the alert.\n      example:\n        alert_id: 7584\n        last_sent: 2018-02-16T12:58:51.000Z\n        search: table\n        send_count: 3\n        types:\n          - offer\n        user_id: 9191\n      properties:\n        alert_id:\n          type: string\n        last_sent:\n          description: The UTC date and time when the alert was last triggered and sent out\n            (may be null).\n          format: date-time\n          type: string\n        search:\n          description: The search phrase that the alert triggers on.\n          type: string\n        send_count:\n          description: The number of time the alert has triggered and been send out.\n          type: integer\n        types:\n          description: \u003e\n            A list of the post types that the alert is set to match\n            against.  The available post types are: offer, wanted \u003cbr /\u003e\u003cbr /\u003e\n            NOTE: Additional post types may be added in the future (eg. events)\n            so clients should take care to support arbitrary types being\n            returned.\n          items:\n            type: string\n          type: array\n        user_id:\n          type: string\n      type: object\n    BoundingBox:\n      description: A geographic bounding box defined by its southwest and northeast points.\n      example:\n        northeast:\n          latitude: 52.8293255665\n          longitude: -0.600956182\n        southwest:\n          latitude: 51.0025285305\n          longitude: -3.5323240284\n      properties:\n        northeast:\n          description: The point defining the northeast corner of the bounding box.\n          properties:\n            latitude:\n              type: number\n            longitude:\n              type: number\n          type: object\n        southwest:\n          description: The point defining the southwest corner of the bounding box.\n          properties:\n            latitude:\n              type: number\n            longitude:\n              type: number\n          type: object\n      type: object\n    Conversation:\n      description: A conversation between the current user and another user.\n      example:\n        archived: false\n        blocked: false\n        conversation_id: 38914\n        last_message_date: 2019-07-24T22:51:09.000Z\n        messages:\n          - content: Here are some photos and the directions for pick up.\n            date: 2019-07-24T22:29:10.000Z\n            email_attachments:\n              - Directions and map.pdf\n            from_user_id: 2946512\n            message_id: 10199633\n            photos:\n              - images:\n                  - height: 120\n                    url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.90x120.jpg\n                    width: 90\n                  - height: 240\n                    url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.180x240.jpg\n                    width: 180\n                  - height: 360\n                    url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.270x360.jpg\n                    width: 270\n                  - height: 500\n                    url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.375x500.jpg\n                    width: 375\n                photo_id: 695624-768616\n                thumbnail: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.90x120.jpg\n                url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.375x500.jpg\n            subject: Dining Table and 4 Chairs\n            to_user_id: 119458\n        num_unread_messages: 1\n        user:\n          country: GB\n          firstname: null\n          lastname: null\n          member_since: 2017-01-27T06:35:55.000Z\n          profile_image: https://lh3.googleusercontent.com/-1qVLzuOCyYg/AAAAAAAAAAI/AAAAAAAAAAA/0aGNzRAO61c/s64-c/100783935580725962164.jpg\n          user_id: 2946512\n          username: fred gibson\n      properties:\n        archived:\n          description: Whether or not this conversation is archived.\n          type: boolean\n        blocked:\n          description: Whether or not this conversation is blocked.\n          type: boolean\n        conversation_id:\n          type: string\n        last_message_date:\n          description: The UTC date and time of the last message in this conversation.\n          format: date-time\n          type: string\n        messages:\n          description: The latest messages in this conversation.\n          items:\n            $ref: \"#/components/schemas/Message\"\n          type: array\n        num_unread_messages:\n          description: The count of how many unread messages this conversation has.\n          type: integer\n        user:\n          $ref: \"#/components/schemas/User\"\n      type: object\n    CurrentUser:\n      allOf:\n        - $ref: \"#/components/schemas/User\"\n        - properties:\n            digest:\n              description: \u003e\n                If digest emails are enabled, this is the frequency of digest\n                emails sent to this user. One of: daily, 12_hours, 8_hours,\n                6_hours, 4_hours, 2_hours, hourly \u003cbr /\u003e\u003cbr /\u003e If digest emails\n                are disabled, this will be null. \u003cbr /\u003e\u003cbr /\u003e NOTE: A weekly\n                option with the value 'weekly' will probably be added in the\n                future so clients should recognize weekly as a valid value that\n                can be displayed and set if it is ever returned.\n              type: string\n            digest_photos:\n              description: Whether or not photos are included in the digest emails sent to\n                the user.\n              type: boolean\n            email:\n              description: Data related to the users' email address.\n              properties:\n                address:\n                  description: The email address.\n                  type: string\n                bouncing:\n                  description: \u003e\n                    Whether or not this email address has been bouncing emails\n                    that are sent to it.  When bouncing is true, no emails will\n                    be sent to the user.  If the user thinks that their email\n                    account shouldn't be bouncing emails, use the email not\n                    bouncing endpoint to reset bouncing to false.\n                  type: boolean\n                spam_stop:\n                  description: \u003e\n                    Whether or not emails have been stopped because of a spam\n                    complaint from the users' email account. When spam_stop is\n                    first set to true, it indicates that all emails have been\n                    automatically disabled for the users' account (eg. digest\n                    and alerts).  The user will need to re-enable digests and\n                    re-add any alerts that they had previously set up.\n                  type: boolean\n              type: object\n            has_password:\n              description: \u003e\n                Whether or not the user has a password (accounts created using\n                3rd party providers like Facebook don't have passwords set).\n\n                When has_password is false, the only way to set a password on the users' account is to send the user a password reset email.\n              type: boolean\n            last_listings_view:\n              description: \u003e\n                The UTC date and time when the user last viewed the newest posts\n                on the All Posts page (may be null). \u003cbr /\u003e\u003cbr /\u003e NOTE: For this\n                to be accurate, clients must update the last_listings_view\n                property of the current user every time the user is shown the\n                newest posts on the All Posts page.\n              format: date-time\n              type: string\n            location:\n              description: The users' location.  The location is used to determine which\n                posts are shown to the user (may be null).\n              properties:\n                latitude:\n                  type: number\n                longitude:\n                  type: number\n                name:\n                  description: A text description of the location specified by latitude and\n                    longitude.\n                  type: string\n                radius:\n                  description: Defines the radius (in meters) of a circle around the point\n                    specified by latitude and longitude.\n                  maximum: 257500\n                  minimum: 0\n                  type: number\n              type: object\n            post_location:\n              description: The short location description used by the user the last time\n                they posted.\n              properties:\n                latitude:\n                  description: May be null.\n                  type: number\n                longitude:\n                  description: May be null.\n                  type: number\n                name:\n                  description: A text description of the location specified by latitude and\n                    longitude.\n                  type: string\n              type: object\n            post_reminders:\n              description: Whether or not post reminders are enabled for this user (to\n                remind them to update or repost their posts).\n              type: boolean\n            profile_image_source:\n              description: \u003e\n                The source of the users' profile image. One of: gravatar,\n                facebook, twitter, google, freegle, custom\n              type: string\n            public_name:\n              description: Whether or not the user has chosen to make their first and last\n                name public.\n              type: boolean\n            public_post_sources:\n              description: \u003e\n                A list of the public post sources the user is interested in\n                seeing posts from (currently only 'trashnothing' is supported).\n                If the array is empty, no sources are enabled and the user will\n                only see posts from the groups they are a member of. \u003cbr /\u003e\u003cbr\n                /\u003e NOTE: Additional sources may be added in the future so\n                clients should take care to support arbitrary sources being\n                returned.\n              items:\n                type: string\n              type: array\n            show_all_group_posts:\n              description: \u003e\n                If true, all group posts from the users' groups are shown to\n                them on the main posts page and in the digest emails. \u003cbr /\u003e\u003cbr\n                /\u003e If false, only group posts in the area defined by the users'\n                location are shown.\n              type: boolean\n            signup:\n              description: The UTC date and time when the user signed up.\n              format: date-time\n              type: string\n            uses_fair_offer_policy:\n              description: Whether or not the user used the Fair Offer Policy (see\n                https://trashnothing.com/fair_offer_policy ) the last time they\n                posted.\n              type: boolean\n            verified:\n              description: \u003e\n                Whether or not the user has verified their account. The user\n                account will be limited (eg. they will not be able to reply to\n                posts) until their account is verified.\n              type: boolean\n          type: object\n      example:\n        country: US\n        digest: 6_hours\n        digest_photos: false\n        email:\n          address: johndoe@example.com\n          bouncing: false\n          spam_stop: false\n          verified: true\n        firstname: Jack\n        has_password: false\n        last_listings_view: 2018-02-15T15:04:47.000Z\n        lastname: Carter\n        location:\n          latitude: 39.766098\n          longitude: -105.077206\n          name: Wheat Ridge, CO, USA\n          radius': 32186.88\n        member_since: 2009-09-25T14:20:01.000Z\n        post_location:\n          latitude: 39.766098\n          longitude: -105.077206\n          name: Wheat Ridge\n        post_reminders: true\n        profile_image: https://gravatar.com/avatar/88305a95b05b30f6cd306019ea5d88f3?s=90\u0026r=pg\u0026default=identicon\n        profile_image_source: gravatar\n        public_name: false\n        public_post_sources:\n          - trashnothing\n        show_all_group_posts: true\n        signup: 2017-11-20T04:32:06.000Z\n        user_id: 119458\n        username: captainjack\n        uses_fair_offer_policy: true\n        verified: true\n    GeolocateBounds:\n      description: \u003e\n        Two bounding boxes that make using Google Maps' geocoder easier. \u003cbr\n        /\u003e\u003cbr /\u003e The default bounding box defines the area in which the post is\n        probably located.  This is useful for providing a bounds to Google Maps\n        geocoder. \u003cbr /\u003e\u003cbr /\u003e The limit bounding box is a larger bounding box\n        that contains the default bounding box. This is useful for discarding\n        Google Maps geocoding results that are outside of this bounding box.\n      properties:\n        default:\n          $ref: \"#/components/schemas/BoundingBox\"\n        limit:\n          $ref: \"#/components/schemas/BoundingBox\"\n      type: object\n    Group:\n      description: \u003e\n        Groups are run by volunteer moderators and provide a way to group\n        activity in a specific location. Because each group is usually run by\n        different people, there can be variations in rules from group to group\n        (eg. who is allowed to join, what is allowed to be posted, how often\n        reposts are allowed).\n      example:\n        country:\n          abbreviation: CA\n          name: Canada\n        group_id: 46\n        has_questions: true\n        homepage: https://trashnothing.com/OttawaReuse\n        identifier: OttawaReuse\n        latitude: 45.423494\n        longitude: -75.697933\n        member_count: 4838\n        membership:\n          date: 2015-01-22T17:05:50.000Z\n          questionnaire:\n            message: This group is only for people who live in Ottawa.\n            questions:\n              - Where do you live?\n          status: pending-questions\n        name: Ottawa Reuse\n        open_archives: false\n        open_membership: false\n        region:\n          abbreviation: ON\n          name: Ontario\n        timezone: America/Toronto\n        utc_offset: -5\n      properties:\n        country:\n          description: Provides information about the country that is associated with a\n            group.  May be null.\n          example:\n            abbreviation: US\n            name: United States\n          properties:\n            abbreviation:\n              description: \u003e\n                A 2 letter country code for the country (see\n                https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ).\n              type: string\n            name:\n              description: The name of the country.\n              type: string\n          type: object\n        group_id:\n          type: string\n        has_questions:\n          description: When true, anyone requesting membership to this group will be\n            required to answer a new membership questionnaire.\n          type: boolean\n        homepage:\n          description: A URL to the group homepage.\n          type: string\n        identifier:\n          description: A unique identifier for the group that is used in URLs.\n          type: string\n        latitude:\n          type: number\n        longitude:\n          type: number\n        member_count:\n          description: The number of members who belong to the group.\n          type: integer\n        membership:\n          description: \u003e\n            Provides information about the current users' active or pending\n            membership to this group (if any).  Will be null if there is no\n            active or pending membership to this group.\n          properties:\n            date:\n              description: \u003e\n                For pending and pending-questions memberships, this is the UTC\n                date and time when the current user requested membership to this\n                group. For subscribed memberships, this is the UTC date and time\n                when the membership status became subscribed.\n              format: date-time\n              type: string\n            questionnaire:\n              description: Membership questionnaire data.  Will be null unless the\n                membership status is pending-questions.\n              properties:\n                message:\n                  description: A message from the group moderators to be displayed above\n                    the questions (may be null).\n                  type: string\n                questions:\n                  description: The list of questions.\n                  items:\n                    type: string\n                  type: array\n              type: object\n            status:\n              description: |\n                One of: subscribed, pending, pending-questions\n              type: string\n          type: object\n        name:\n          description: The name of the group (not guaranteed to be unique).\n          type: string\n        open_archives:\n          description: When true, the group posts are viewable by anyone.  When false, the\n            group posts can only be viewed by members of the group.\n          type: boolean\n        open_membership:\n          description: When true, the group allows anyone to join.  When false, the group\n            moderators review and approve applicants.\n          type: boolean\n        region:\n          description: Provides information about an area within a country that a group is\n            associated with (eg. a state in the US or a province in\n            Canada).  May be null.\n          example:\n            abbreviation: CA\n            name: California\n          properties:\n            abbreviation:\n              description: A 2 letter abbreviation for the region (is not guaranteed to be\n                globally unique but is unique among all the regions in the\n                country).\n              type: string\n            name:\n              description: The name of the region.\n              type: string\n          type: object\n        timezone:\n          description: The timezone that the group is in (eg. America/New_York).\n          type: string\n        utc_offset:\n          description: The group offset (in hours) from UTC time.  This does not take into\n            account daylight savings time (DST) in places that observe DST so it\n            may be incorrect during DST.\n          type: number\n      type: object\n    GroupNotice:\n      description: Group notices are created by group moderators in order to provide useful\n        information to the group members (eg. group rules and guidelines).\n      example:\n        content: Everything must be free, legal and appropriate for all ages.  Repeat\n          offenders will be banned.\n        date: 2018-02-17T13:22:40.000Z\n        group_id: 1781\n        notice_id: 81178\n        title: Group Rules \u0026 Guidelines\n      properties:\n        content:\n          type: string\n        date:\n          description: The UTC date and time when this notice was received.\n          format: date-time\n          type: string\n        group_id:\n          type: string\n        notice_id:\n          type: string\n        title:\n          type: string\n      type: object\n    Message:\n      description: A message between two users.\n      example:\n        content: Here are some photos and the directions for pick up.\n        date: 2019-07-24T22:29:10.000Z\n        email_attachments:\n          - Directions and map.pdf\n        from_user_id: 2946512\n        message_id: 10199633\n        photos:\n          - images:\n              - height: 120\n                url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.90x120.jpg\n                width: 90\n              - height: 240\n                url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.180x240.jpg\n                width: 180\n              - height: 360\n                url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.270x360.jpg\n                width: 270\n              - height: 500\n                url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.375x500.jpg\n                width: 375\n            photo_id: 695624-768616\n            thumbnail: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.90x120.jpg\n            url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.375x500.jpg\n        subject: Dining Table and 4 Chairs\n        to_user_id: 119458\n      properties:\n        content:\n          description: The content of the message.\n          type: string\n        date:\n          description: The UTC date and time when the message was sent.\n          format: date-time\n          type: string\n        email_attachments:\n          description: \u003e\n            Every message a user receives is made available via the API and is\n            sent to the user by email.  Some messages may contain unsupported\n            attachments that are not available by the API but are emailed to the\n            user (eg. documents, videos, zip files). The email_attachments field\n            provides the names of all the unsupported attachments that were\n            emailed to the user (will be null if there are no unsupported\n            attachments).\n          items:\n            type: string\n          type: array\n        from_user_id:\n          description: The ID of the user that sent the message (the sender).\n          type: string\n        message_id:\n          type: string\n        photos:\n          description: Details about the photos associated with this message (may be null\n            if there are no photos).\n          items:\n            properties:\n              images:\n                description: All the versions of this photo ordered from smallest to\n                  largest.  This list is guaranteed to include the photos\n                  specified by the above thumbnail and url properties.\n                items:\n                  properties:\n                    height:\n                      type: integer\n                    url:\n                      type: string\n                    width:\n                      type: integer\n                  type: object\n                type: array\n              photo_id:\n                type: string\n              thumbnail:\n                description: A URL to a thumbnail of this photo.  The size of the thumbnail\n                  depends on the device_pixel_ratio parameter and it is not\n                  guaranteed to be square.\n                type: string\n              url:\n                description: A URL to a large version of this photo (but not necessarily\n                  the largest size available).\n                type: string\n            type: object\n          type: array\n        subject:\n          description: \u003e\n            Because many messages are received by email, all messages have a\n            subject. The subject is often useful to allow the recipient to\n            determine which post a message may be referring to.  In rare cases,\n            some senders send emails with a subject and but no email body which\n            causes the message content to be an empty string.\n          type: string\n        to_user_id:\n          description: The ID of the user that received the message (the recipient).\n          type: string\n      type: object\n    Photo:\n      example:\n        images:\n          - height: 120\n            url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.90x120.jpg\n            width: 90\n          - height: 240\n            url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.180x240.jpg\n            width: 180\n          - height: 360\n            url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.270x360.jpg\n            width: 270\n          - height: 500\n            url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.375x500.jpg\n            width: 375\n        photo_id: 695624-768616\n        thumbnail: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.90x120.jpg\n        url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.375x500.jpg\n      properties:\n        images:\n          description: All the versions of this photo ordered from smallest to\n            largest.  This list is guaranteed to include the photos specified by\n            the above thumbnail and url properties.\n          items:\n            properties:\n              height:\n                type: integer\n              url:\n                type: string\n              width:\n                type: integer\n            type: object\n          type: array\n        photo_id:\n          type: string\n        thumbnail:\n          description: A URL to a thumbnail of this photo.  The size of the thumbnail\n            depends on the device_pixel_ratio parameter and it is not guaranteed\n            to be square.\n          type: string\n        url:\n          description: A URL to a large version of this photo (but not necessarily the\n            largest size available).\n          type: string\n      type: object\n    PhotoResult:\n      description: The result of uploading or editing a photo.\n      example:\n        photo_id: 987-423\n        thumbnail:\n          height: 120\n          url: https://trashnothing.com/img/2018-02-02/307731-20180119_155358.90x120.jpg\n          width: 90\n      properties:\n        photo_id:\n          type: string\n        thumbnail:\n          description: Photo thumbnail data.\n          properties:\n            height:\n              type: integer\n            url:\n              type: string\n            width:\n              type: integer\n          type: object\n      type: object\n    Post:\n      description: An offer, wanted, admin, taken or received post.\n      example:\n        content: This ultrasonic diffuser creates an aroma in your home. It comes with\n          two essential oils - mint and lavender.\n        date: 2018-02-05T15:10:21.000Z\n        footer: null\n        group_id: 6\n        latitude: 43.653226\n        longitude: -79.383184\n        photos:\n          - images:\n              - height: 120\n                url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.90x120.jpg\n                width: 90\n              - height: 240\n                url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.180x240.jpg\n                width: 180\n              - height: 360\n                url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.270x360.jpg\n                width: 270\n              - height: 500\n                url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.375x500.jpg\n                width: 375\n            photo_id: 695624-768616\n            thumbnail: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.90x120.jpg\n            url: https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.375x500.jpg\n        post_id: 3171898\n        satisfied: true\n        title: Ultrasonic diffuser (Downtown Toronto)\n        type: offer\n        user_id: 2933\n      properties:\n        content:\n          type: string\n        date:\n          description: The UTC date and time when the post was published.\n          format: date-time\n          type: string\n        footer:\n          description: Some groups add footers to posts that are separate and sometimes\n            unrelated to the post itself - such as reminders about group rules\n            or features (may be null).\n          type: string\n        group_id:\n          description: |\n            The group ID of the post.  For public posts, this is always null.\n          type: string\n        latitude:\n          description: May be null if a post hasn't been mapped.\n          type: number\n        longitude:\n          description: May be null if a post hasn't been mapped.\n          type: number\n        photos:\n          description: Details about the photos associated with this post (may be null if\n            there are no photos).\n          items:\n            $ref: \"#/components/schemas/Photo\"\n          type: array\n        post_id:\n          type: string\n        satisfied:\n          description: \u003e\n            For offer and wanted posts, indicates whether or not this post has\n            been satisfied or not. An offer that has been taken or a want that\n            has been received have both been satisfied. For other types of\n            posts, this is always null.\n          type: boolean\n        source:\n          description: \u003e\n            The source of the post.  One of: groups, trashnothing,\n            open_archive_groups.  A value of groups or open_archive_groups\n            indicates the post is from a group and the group_id field will\n            contain the ID of the group. A value of trashnothing indicates the\n            post is a public post not associated with any group.\n          type: string\n        title:\n          type: string\n        type:\n          description: |\n            The type of post.  One of: offer, taken, wanted, received, admin\n          type: string\n        user_id:\n          type: string\n      type: object\n    PostSearchResult:\n      allOf:\n        - $ref: \"#/components/schemas/Post\"\n        - properties:\n            search_content:\n              description: \u003e\n                A snippet of the post content as HTML with the parts of the\n                content that matched the search query (if any) wrapped in an\n                HTML span tags with the class 'highlight' (eg. \u0026lt;span\n                class=\"highlight\"\u0026gt;matched words\u0026lt;/span\u0026gt;). May be null if\n                none of the words in the post content matched the search query.\n                \u003cbr /\u003e\u003cbr /\u003e NOTE: This is not the full content of the post  It\n                is just a snippet of around 200 characters that can be used to\n                display the parts of the post content relevant to the search\n                query.\n              type: string\n            search_title:\n              description: \u003e\n                The post subject as HTML with the parts of the subject that\n                matched the search query (if any) wrapped in HTML span tags with\n                the class 'highlight'. (eg. \u0026lt;span\n                class=\"highlight\"\u0026gt;matched words\u0026lt;/span\u0026gt;). May be null if\n                none of the words in the subject matched the search query.\n              type: string\n          type: object\n      example:\n        content: \u003e\n          Panasonic microwave oven in good working order 800 W power and\n          turntable inside Has all the normal microwave functions plus grill\n          elements for browning Comes with original instructions booklet It's an\n          old microwave and could do with a bit of a clean, but still works very\n          well\n        date: 2018-02-18T17:11:38.000Z\n        footer: null\n        group_id: 81\n        latitude: 42.961404\n        longitude: -88.012586\n        photos: null\n        post_id: 25997431\n        satisfied: false\n        search_content: Panasonic \u003cspan class=\"highlight\"\u003emicrowave\u003c/span\u003e oven in good\n          working order 800 W power and turntable\n        search_title: \u003cspan class=\"highlight\"\u003eMicrowave\u003c/span\u003e Oven (Greenfield)\n        title: Microwave Oven (Greenfield)\n        type: offer\n        user_id: 82928\n    User:\n      example:\n        country: GB\n        firstname: null\n        lastname: null\n        member_since: 2017-01-27T06:35:55.000Z\n        profile_image: https://lh3.googleusercontent.com/-1qVLzuOCyYg/AAAAAAAAAAI/AAAAAAAAAAA/0aGNzRAO61c/s64-c/100783935580725962164.jpg\n        user_id: 2946512\n        username: fred gibson\n      properties:\n        country:\n          description: \u003e\n            A 2 letter country code for the country that has been automatically\n            detected for the user (see\n            https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ). May be null if\n            no country has been set.\n          type: string\n        firstname:\n          description: The first name of the user (may be null).\n          type: string\n        lastname:\n          description: The last name of the user (may be null).\n          type: string\n        member_since:\n          description: The date and time when the user first became publicly active on a\n            group (the date may be older than when the user signed up).\n          type: string\n        profile_image:\n          description: \u003e\n            A URL to a profile image for the user.  Profile images sizes vary\n            based on the source (Google, Facebook, Twitter, Gravatar, etc) and\n            some can be as small as 64px by 64px.  Will be null for api key\n            requests and requests where the oauth user doesn't belong to any of\n            the same groups as this user.\n          type: string\n        user_id:\n          type: string\n        username:\n          description: \u003e\n            A username that can be displayed for the user (the username is NOT\n            guaranteed to be unique). Will be null for api key requests and\n            requests where the oauth user doesn't belong to any of the same\n            groups as this user.\n          type: string\n      type: object\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/trashnothing.com-1.0.0-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/trashnothing.com-1.0.0-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/groups\": get: security: security \"oauth2_implicit\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}