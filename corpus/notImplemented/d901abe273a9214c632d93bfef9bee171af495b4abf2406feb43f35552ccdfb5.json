{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stackql/stackql-provider-registry"
		},
		"file": {
			"name": "realtimebidding-v1alpha.yaml",
			"size": 0,
			"path": "providers/src/googleapis.com/v0.1.2/services/realtimebidding-v1alpha.yaml",
			"byteSize": 12012,
			"content": "components:\n  parameters:\n    _.xgafv:\n      description: V1 error format.\n      in: query\n      name: $.xgafv\n      schema:\n        enum:\n        - '1'\n        - '2'\n        type: string\n    access_token:\n      description: OAuth access token.\n      in: query\n      name: access_token\n      schema:\n        type: string\n    alt:\n      description: Data format for response.\n      in: query\n      name: alt\n      schema:\n        enum:\n        - json\n        - media\n        - proto\n        type: string\n    callback:\n      description: JSONP\n      in: query\n      name: callback\n      schema:\n        type: string\n    fields:\n      description: Selector specifying which fields to include in a partial response.\n      in: query\n      name: fields\n      schema:\n        type: string\n    key:\n      description: API key. Your API key identifies your project and provides you\n        with API access, quota, and reports. Required unless you provide an OAuth\n        2.0 token.\n      in: query\n      name: key\n      schema:\n        type: string\n    oauth_token:\n      description: OAuth 2.0 token for the current user.\n      in: query\n      name: oauth_token\n      schema:\n        type: string\n    prettyPrint:\n      description: Returns response with indentations and line breaks.\n      in: query\n      name: prettyPrint\n      schema:\n        type: boolean\n    quotaUser:\n      description: Available to use for quota purposes for server-side applications.\n        Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n      in: query\n      name: quotaUser\n      schema:\n        type: string\n    uploadType:\n      description: Legacy upload protocol for media (e.g. \"media\", \"multipart\").\n      in: query\n      name: uploadType\n      schema:\n        type: string\n    upload_protocol:\n      description: Upload protocol for media (e.g. \"raw\", \"multipart\").\n      in: query\n      name: upload_protocol\n      schema:\n        type: string\n  schemas:\n    ActivateBiddingFunctionRequest:\n      description: The request to activate a bidding function.\n      properties: {}\n      type: object\n    ArchiveBiddingFunctionRequest:\n      description: A request to archive a bidding function.\n      properties: {}\n      type: object\n    BiddingFunction:\n      description: The bidding function to be executed as part of the TURTLEDOVE simulation\n        experiment bidding flow.\n      properties:\n        biddingFunction:\n          description: The raw Javascript source code of the bidding function.\n          type: string\n        name:\n          description: 'The name of the bidding function that must follow the pattern:\n            `bidders/{bidder_account_id}/biddingFunctions/{bidding_function_name}`.'\n          type: string\n        state:\n          description: Output only. The state of the bidding function.\n          enum:\n          - STATE_UNSPECIFIED\n          - ACTIVE\n          - ARCHIVED\n          readOnly: true\n          type: string\n        type:\n          description: The type of the bidding function to be created.\n          enum:\n          - FUNCTION_TYPE_UNSPECIFIED\n          - TURTLEDOVE_SIMULATION_BIDDING_FUNCTION\n          - FLEDGE_BIDDING_FUNCTION\n          type: string\n      type: object\n    ListBiddingFunctionsResponse:\n      description: A response containing a list of a bidder's bidding functions.\n      properties:\n        biddingFunctions:\n          description: A list of a bidder's bidding functions.\n          items:\n            $ref: '#/components/schemas/BiddingFunction'\n          type: array\n        nextPageToken:\n          description: A token which can be passed to a subsequent call to the `ListBiddingFunctions`\n            method to retrieve the next page of results in ListBiddingFunctionsRequest.pageToken.\n          type: string\n      type: object\n  securitySchemes:\n    Oauth2:\n      description: Oauth 2.0 implicit authentication\n      flows:\n        implicit:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            https://www.googleapis.com/auth/realtime-bidding: See, create, edit, and\n              delete your Authorized Buyers and Open Bidding account entities\n      type: oauth2\n    Oauth2c:\n      description: Oauth 2.0 authorizationCode authentication\n      flows:\n        authorizationCode:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            https://www.googleapis.com/auth/realtime-bidding: See, create, edit, and\n              delete your Authorized Buyers and Open Bidding account entities\n          tokenUrl: https://accounts.google.com/o/oauth2/token\n      type: oauth2\n  x-stackQL-resources: {}\nexternalDocs:\n  url: https://developers.google.com/authorized-buyers/apis/realtimebidding/reference/rest/\ninfo:\n  contact:\n    name: Google\n    url: https://google.com\n    x-twitter: youtube\n  description: Allows external bidders to manage their RTB integration with Google.\n    This includes managing bidder endpoints, QPS quotas, configuring what ad inventory\n    to receive via pretargeting, submitting creatives for verification, and accessing\n    creative metadata such as approval status.\n  license:\n    name: Creative Commons Attribution 3.0\n    url: http://creativecommons.org/licenses/by/3.0/\n  termsOfService: https://developers.google.com/terms/\n  title: Real-time Bidding API\n  version: v1alpha\n  x-apisguru-categories:\n  - analytics\n  - media\n  x-logo:\n    url: https://api.apis.guru/v2/cache/logo/https_upload.wikimedia.org_wikipedia_commons_e_e1_YouTube_play_buttom_icon_%282013-2017%29.svg\n  x-origin:\n  - format: google\n    url: https://realtimebidding.googleapis.com/$discovery/rest?version=v1alpha\n    version: v1\n  x-providerName: googleapis.com\n  x-serviceName: realtimebidding\nopenapi: 3.0.0\npaths:\n  /v1alpha/{name}:activate:\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: Activates an existing bidding function. An activated function is\n        available for invocation for the server-side TURTLEDOVE simulations.\n      operationId: realtimebidding.bidders.biddingFunctions.activate\n      parameters:\n      - description: 'Required. The name of the bidding function to activate. Format:\n          `bidders/{bidder_account_id}/biddingFunction/{bidding_function_name}`'\n        in: path\n        name: name\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ActivateBiddingFunctionRequest'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BiddingFunction'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/realtime-bidding\n        Oauth2c:\n        - https://www.googleapis.com/auth/realtime-bidding\n      tags:\n      - bidders\n  /v1alpha/{name}:archive:\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: Archives an existing bidding function. An archived function will\n        not be available for function invocation for the server-side TURTLEDOVE simulations\n        unless it is activated.\n      operationId: realtimebidding.bidders.biddingFunctions.archive\n      parameters:\n      - description: 'Required. The name of the bidding function to archive. Format:\n          `bidders/{bidder_account_id}/biddingFunction/{bidding_function_name}`'\n        in: path\n        name: name\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ArchiveBiddingFunctionRequest'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BiddingFunction'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/realtime-bidding\n        Oauth2c:\n        - https://www.googleapis.com/auth/realtime-bidding\n      tags:\n      - bidders\n  /v1alpha/{parent}/biddingFunctions:\n    get:\n      description: Lists the bidding functions that a bidder currently has registered.\n      operationId: realtimebidding.bidders.biddingFunctions.list\n      parameters:\n      - description: 'Required. Name of the bidder whose bidding functions will be\n          listed. Format: `bidders/{bidder_account_id}`'\n        in: path\n        name: parent\n        required: true\n        schema:\n          type: string\n      - description: The maximum number of bidding functions to return.\n        in: query\n        name: pageSize\n        schema:\n          type: integer\n      - description: A token identifying a page of results the server should return.\n          This value is received from a previous `ListBiddingFunctions` call in ListBiddingFunctionsResponse.nextPageToken.\n        in: query\n        name: pageToken\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListBiddingFunctionsResponse'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/realtime-bidding\n        Oauth2c:\n        - https://www.googleapis.com/auth/realtime-bidding\n      tags:\n      - bidders\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: Creates a new bidding function.\n      operationId: realtimebidding.bidders.biddingFunctions.create\n      parameters:\n      - description: 'Required. The name of the bidder for which to create the bidding\n          function. Format: `bidders/{bidderAccountId}`'\n        in: path\n        name: parent\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BiddingFunction'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BiddingFunction'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/realtime-bidding\n        Oauth2c:\n        - https://www.googleapis.com/auth/realtime-bidding\n      tags:\n      - bidders\nservers:\n- url: https://realtimebidding.googleapis.com/\ntags:\n- name: bidders\n",
			"canonicalURL": "/github.com/stackql/stackql-provider-registry@7482bc9b2425a6491d640bf921a1dc9cf508f339/-/blob/providers/src/googleapis.com/v0.1.2/services/realtimebidding-v1alpha.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stackql/stackql-provider-registry/blob/7482bc9b2425a6491d640bf921a1dc9cf508f339/providers/src/googleapis.com/v0.1.2/services/realtimebidding-v1alpha.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1alpha/{name}:activate\": post: security: security \"Oauth2c\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}