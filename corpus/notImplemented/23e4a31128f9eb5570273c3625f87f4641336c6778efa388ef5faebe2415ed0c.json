{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/clouditor/clouditor"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/orchestrator/openapi.yaml",
			"byteSize": 41015,
			"content": "# Generated with protoc-gen-openapi\n# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi\n\nopenapi: 3.0.3\ninfo:\n    title: Orchestrator API\n    description: Manages the orchestration of components within the Clouditor architecture\n    version: 0.0.1\npaths:\n    /v1/orchestrator/assessment_results:\n        get:\n            tags:\n                - Orchestrator\n            description: List all assessment results. Part of the public API, also exposed as REST.\n            operationId: Orchestrator_ListAssessmentResults\n            parameters:\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListAssessmentResultsResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        post:\n            tags:\n                - Orchestrator\n            description: Stores the assessment result provided by an assessment tool\n            operationId: Orchestrator_StoreAssessmentResult\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/AssessmentResult'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/StoreAssessmentResultResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/assessment_tools:\n        get:\n            tags:\n                - Orchestrator\n            description: |-\n                Lists all assessment tools assessing evidences for the metric given by the\n                 passed metric id\n            operationId: Orchestrator_ListAssessmentTools\n            parameters:\n                - name: metricId\n                  in: query\n                  description: filter tools by metric id\n                  schema:\n                    type: string\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListAssessmentToolsResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        post:\n            tags:\n                - Orchestrator\n            description: Registers the passed assessment tool\n            operationId: Orchestrator_RegisterAssessmentTool\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/AssessmentTool'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/AssessmentTool'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/assessment_tools/{toolId}:\n        get:\n            tags:\n                - Orchestrator\n            description: Returns assessment tool given by the passed tool id\n            operationId: Orchestrator_GetAssessmentTool\n            parameters:\n                - name: toolId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/AssessmentTool'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        put:\n            tags:\n                - Orchestrator\n            description: Updates the assessment tool given by the passed id\n            operationId: Orchestrator_UpdateAssessmentTool\n            parameters:\n                - name: toolId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/AssessmentTool'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/AssessmentTool'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        delete:\n            tags:\n                - Orchestrator\n            description: |-\n                Remove assessment tool with passed id from the list of active assessment\n                 tools\n            operationId: Orchestrator_DeregisterAssessmentTool\n            parameters:\n                - name: toolId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content: {}\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/certificates:\n        get:\n            tags:\n                - Orchestrator\n            description: Lists all target certificates\n            operationId: Orchestrator_ListCertificates\n            parameters:\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListCertificatesResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        post:\n            tags:\n                - Orchestrator\n            description: Creates a new certificate\n            operationId: Orchestrator_CreateCertificate\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Certificate'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Certificate'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/certificates/{certificateId}:\n        get:\n            tags:\n                - Orchestrator\n            description: Retrieves a certificate\n            operationId: Orchestrator_GetCertificate\n            parameters:\n                - name: certificateId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Certificate'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        put:\n            tags:\n                - Orchestrator\n            description: Updates an existing certificate\n            operationId: Orchestrator_UpdateCertificate\n            parameters:\n                - name: certificateId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Certificate'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Certificate'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        delete:\n            tags:\n                - Orchestrator\n            description: Removes a certificate\n            operationId: Orchestrator_RemoveCertificate\n            parameters:\n                - name: certificateId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content: {}\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/cloud_services:\n        get:\n            tags:\n                - Orchestrator\n            description: Lists all target cloud services\n            operationId: Orchestrator_ListCloudServices\n            parameters:\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListCloudServicesResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        post:\n            tags:\n                - Orchestrator\n            description: Registers a new target cloud service\n            operationId: Orchestrator_RegisterCloudService\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CloudService'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CloudService'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/cloud_services/{serviceId}:\n        get:\n            tags:\n                - Orchestrator\n            description: Retrieves a target cloud service\n            operationId: Orchestrator_GetCloudService\n            parameters:\n                - name: serviceId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CloudService'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        put:\n            tags:\n                - Orchestrator\n            description: Registers a new target cloud service\n            operationId: Orchestrator_UpdateCloudService\n            parameters:\n                - name: serviceId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/CloudService'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/CloudService'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        delete:\n            tags:\n                - Orchestrator\n            description: Removes a target cloud service\n            operationId: Orchestrator_RemoveCloudService\n            parameters:\n                - name: serviceId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content: {}\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/cloud_services/{serviceId}/metric_configurations:\n        get:\n            tags:\n                - Orchestrator\n            description: |-\n                Lists all a metric configurations (target value and operator) for a\n                 specific service ID\n            operationId: Orchestrator_ListMetricConfigurations\n            parameters:\n                - name: serviceId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListMetricConfigurationResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/cloud_services/{serviceId}/metric_configurations/{metricId}:\n        get:\n            tags:\n                - Orchestrator\n            description: |-\n                Retrieves a metric configuration (target value and operator) for a specific\n                 service and metric ID\n            operationId: Orchestrator_GetMetricConfiguration\n            parameters:\n                - name: serviceId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: metricId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/MetricConfiguration'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        put:\n            tags:\n                - Orchestrator\n            description: |-\n                Updates a metric configuration (target value and operator) for a specific\n                 service and metric ID\n            operationId: Orchestrator_UpdateMetricConfiguration\n            parameters:\n                - name: serviceId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: metricId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/MetricConfiguration'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/MetricConfiguration'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/metrics:\n        get:\n            tags:\n                - Orchestrator\n            description: List all metrics provided by the metric catalog\n            operationId: Orchestrator_ListMetrics\n            parameters:\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListMetricsResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        post:\n            tags:\n                - Orchestrator\n            description: Creates a new metric\n            operationId: Orchestrator_CreateMetric\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Metric'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Metric'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/metrics/{metricId}:\n        get:\n            tags:\n                - Orchestrator\n            description: Returns the metric with the passed metric id\n            operationId: Orchestrator_GetMetric\n            parameters:\n                - name: metricId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Metric'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        put:\n            tags:\n                - Orchestrator\n            description: Updates an existing metric\n            operationId: Orchestrator_UpdateMetric\n            parameters:\n                - name: metricId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Metric'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Metric'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/metrics/{metricId}/implementation:\n        get:\n            tags:\n                - Orchestrator\n            description: Returns the metric implementation of the passed metric id\n            operationId: Orchestrator_GetMetricImplementation\n            parameters:\n                - name: metricId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n                - name: lang\n                  in: query\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/MetricImplementation'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n        put:\n            tags:\n                - Orchestrator\n            description: Updates an existing metric implementation\n            operationId: Orchestrator_UpdateMetricImplementation\n            parameters:\n                - name: metricId\n                  in: path\n                  required: true\n                  schema:\n                    type: string\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/MetricImplementation'\n                required: true\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/MetricImplementation'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\n    /v1/orchestrator/requirements:\n        get:\n            tags:\n                - Orchestrator\n            operationId: Orchestrator_ListRequirements\n            parameters:\n                - name: pageSize\n                  in: query\n                  schema:\n                    type: integer\n                    format: int32\n                - name: pageToken\n                  in: query\n                  schema:\n                    type: string\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/ListRequirementsResponse'\n                default:\n                    description: Default error response\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Status'\ncomponents:\n    schemas:\n        AllowedValues:\n            type: object\n            properties:\n                values:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GoogleProtobufValue'\n            description: Defines a range\n        AssessmentResult:\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: Assessment result id\n                timestamp:\n                    type: string\n                    description: Time of assessment\n                    format: date-time\n                metricId:\n                    type: string\n                    description: Reference to the metric the assessment was based on\n                metricConfiguration:\n                    $ref: '#/components/schemas/MetricConfiguration'\n                compliant:\n                    type: boolean\n                    description: 'Compliant case: true or false'\n                evidenceId:\n                    type: string\n                    description: Reference to the assessed evidence\n                resourceId:\n                    type: string\n                    description: Reference to the resource of the assessed evidence\n                resourceTypes:\n                    type: array\n                    items:\n                        type: string\n                    description: Resource types\n                nonComplianceComments:\n                    type: string\n                    description: Some comments on the reason for non-compliance\n            description: A result resource, representing the result after assessing the cloud resource with id resource_id.\n        AssessmentTool:\n            type: object\n            properties:\n                id:\n                    type: string\n                name:\n                    type: string\n                description:\n                    type: string\n                availableMetrics:\n                    type: array\n                    items:\n                        type: string\n                    description: a list of metrics that this tool can assess, referred by their ids\n            description: Represents an external tool or service that offers assessments according to certain metrics.\n        Certificate:\n            type: object\n            properties:\n                id:\n                    type: string\n                name:\n                    type: string\n                serviceId:\n                    type: string\n                issueDate:\n                    type: string\n                expirationDate:\n                    type: string\n                standard:\n                    type: string\n                assuranceLevel:\n                    type: string\n                cab:\n                    type: string\n                description:\n                    type: string\n                states:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/State'\n                    description: A list of states at specific times\n            description: An ISO17021-based certificate\n        CloudService:\n            type: object\n            properties:\n                id:\n                    type: string\n                name:\n                    type: string\n                description:\n                    type: string\n                requirements:\n                    $ref: '#/components/schemas/CloudService_Requirements'\n        CloudService_Requirements:\n            type: object\n            properties:\n                requirementIds:\n                    type: array\n                    items:\n                        type: string\n        GoogleProtobufAny:\n            type: object\n            properties:\n                '@type':\n                    type: string\n                    description: The type of the serialized message.\n            additionalProperties: true\n            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.\n        GoogleProtobufValue:\n            description: Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.\n        ListAssessmentResultsResponse:\n            type: object\n            properties:\n                results:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AssessmentResult'\n                nextPageToken:\n                    type: string\n        ListAssessmentToolsResponse:\n            type: object\n            properties:\n                tools:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/AssessmentTool'\n                nextPageToken:\n                    type: string\n        ListCertificatesResponse:\n            type: object\n            properties:\n                certificates:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Certificate'\n                nextPageToken:\n                    type: string\n        ListCloudServicesResponse:\n            type: object\n            properties:\n                services:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/CloudService'\n                nextPageToken:\n                    type: string\n        ListMetricConfigurationResponse:\n            type: object\n            properties:\n                configurations:\n                    type: object\n                    additionalProperties:\n                        $ref: '#/components/schemas/MetricConfiguration'\n                    description: A map of metric configurations associated by their metric ID\n        ListMetricsResponse:\n            type: object\n            properties:\n                metrics:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Metric'\n                nextPageToken:\n                    type: string\n        ListRequirementsResponse:\n            type: object\n            properties:\n                requirements:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Requirement'\n                nextPageToken:\n                    type: string\n        Metric:\n            type: object\n            properties:\n                id:\n                    type: string\n                    description: Required. The unique identifier of the metric.\n                name:\n                    type: string\n                    description: Required. The human readable name of the metric.\n                description:\n                    type: string\n                    description: The description of the metric\n                category:\n                    type: string\n                    description: The reference to control catalog category or domain\n                scale:\n                    enum:\n                        - SCALE_UNSPECIFIED\n                        - NOMINAL\n                        - ORDINAL\n                        - METRIC\n                    type: string\n                    description: The scale of this metric, e.g. categories, ranked data or metric values.\n                    format: enum\n                range:\n                    $ref: '#/components/schemas/Range'\n            description: A metric resource\n        MetricConfiguration:\n            type: object\n            properties:\n                operator:\n                    type: string\n                    description: The operator to compare the metric, such as == or \u003e\n                targetValue:\n                    $ref: '#/components/schemas/GoogleProtobufValue'\n                isDefault:\n                    type: boolean\n                    description: Whether this configuration is a default configuration\n                updatedAt:\n                    type: string\n                    description: The last time of update\n                    format: date-time\n            description: Defines the operator and a target value for an individual metric\n        MetricImplementation:\n            type: object\n            properties:\n                metricId:\n                    type: string\n                    description: The metric which is implemented\n                lang:\n                    enum:\n                        - LANGUAGE_UNSPECIFIED\n                        - REGO\n                    type: string\n                    description: The language this metric is implemented in\n                    format: enum\n                code:\n                    type: string\n                    description: The actual implementation\n                updatedAt:\n                    type: string\n                    description: The last time of update\n                    format: date-time\n            description: MetricImplementation defines the implementation of an individual metric.\n        MinMax:\n            type: object\n            properties:\n                min:\n                    type: integer\n                    description: Required.\n                    format: int64\n                max:\n                    type: integer\n                    description: Required.\n                    format: int64\n            description: Defines a range of values through a (inclusive) minimum and a maximum\n        Order:\n            type: object\n            properties:\n                values:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GoogleProtobufValue'\n            description: Defines a range of values in a pre-defined order from the lowest to the highest.\n        Range:\n            type: object\n            properties:\n                allowedValues:\n                    $ref: '#/components/schemas/AllowedValues'\n                order:\n                    $ref: '#/components/schemas/Order'\n                minMax:\n                    $ref: '#/components/schemas/MinMax'\n            description: A range resource representing the range of values\n        Requirement:\n            type: object\n            properties:\n                id:\n                    type: string\n                name:\n                    type: string\n                description:\n                    type: string\n                metrics:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/Metric'\n                    description: metrics contains either a list of reference to metrics - in this case only the id field of the metric is populated - or a list of populated metric meta-data, most likely returned by the database.\n                category:\n                    type: string\n                    description: category can be used to categorize requirements, e.g., according to a specific security catalog or something that groups requirements together, e.g., a security control.\n            description: Requirement represents a certain requirement that needs to be fulfilled. It could be a control in a certification catalog.\n        State:\n            type: object\n            properties:\n                id:\n                    type: string\n                state:\n                    type: string\n                    description: An EUCS-defined state, e.g. `new`, `suspended` or `withdrawn`\n                treeId:\n                    type: string\n                timestamp:\n                    type: string\n                certificateId:\n                    type: string\n                    description: Reference to the certificate\n            description: A state of a certificate at a given time\n        Status:\n            type: object\n            properties:\n                code:\n                    type: integer\n                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].\n                    format: int32\n                message:\n                    type: string\n                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.\n                details:\n                    type: array\n                    items:\n                        $ref: '#/components/schemas/GoogleProtobufAny'\n                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.\n            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'\n        StoreAssessmentResultResponse:\n            type: object\n            properties:\n                status:\n                    type: boolean\n                statusMessage:\n                    type: string\ntags:\n    - name: Orchestrator\n",
			"canonicalURL": "/github.com/clouditor/clouditor@4296b5e2ecb9c33601fe45231f026cde1b71940c/-/blob/openapi/orchestrator/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/clouditor/clouditor/blob/4296b5e2ecb9c33601fe45231f026cde1b71940c/openapi/orchestrator/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1/orchestrator/metrics\": get: responses: 200: contents: application/json: generate schema: field metrics: item: field scale: primitive: format \"enum\": enum format not implemented",
	"NotImplemented": [
		"enum format"
	]
}