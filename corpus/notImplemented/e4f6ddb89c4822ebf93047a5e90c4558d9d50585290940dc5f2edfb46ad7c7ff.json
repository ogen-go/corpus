{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sapporo-wes/sapporo-service"
		},
		"file": {
			"name": "sapporo-wes-1-0-1-openapi-spec.yml",
			"size": 0,
			"path": "sapporo-wes-1-0-1-openapi-spec.yml",
			"byteSize": 34618,
			"content": "openapi: 3.0.0\ninfo:\n  title: \u003e-\n    GA4GH Workflow Execution Service API specification extended for\n    the sapporo-service\n  version: sapporo-wes-1.0.1-oas3\n  description: \u003e-\n    The Workflow Execution Service (WES) API provides a standard way for users to submit workflow requests to workflow execution systems and monitor their execution.\n    This API lets users run a single workflow on multiple different platforms, clouds, and environments.\n\n    Key features of the API:\n\n    - can request that a workflow be run\n\n    - can pass parameters to that workflow (e.g. input files, cmd-line arguments)\n\n    - can get information about running workflows (e.g. status, errors, output file locations)\n\n    - can cancel a running workflow\n  license:\n    url: https://github.com/sapporo-wes/sapporo-service/blob/main/LICENSE\n    name: Apache-2.0\n  contact:\n    url: https://github.com/sapporo-wes/sapporo-service/issues\n    name: sapporo-wes - sapporo-service\n\npaths:\n  /service-info:\n    get:\n      summary: Get information about Workflow Execution Service.\n      description: \u003e-\n        May include information related (but not limited to) the workflow descriptor formats, versions supported, the WES API versions supported, and information about general service availability.\n      operationId: GetServiceInfo\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceInfo\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n  /executable-workflows:\n    get:\n      summary: Get a list of executable workflows.\n      description: \u003e-\n        Returns a list of all executable workflows.\n      operationId: GetExecutableWorkflows\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Workflow\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n  /parse-workflow:\n    post:\n      summary: Parse a workflow.\n      description: \u003e-\n        The endpoint for parsing the workflow document.\n      operationId: ParseWorkflow\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ParseResult\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/ParseRequest\"\n  /runs:\n    get:\n      summary: List the workflow runs.\n      description: \u003e-\n        This list should be provided in a stable ordering. (The actual order is implementation-dependent.)\n        When paging through the list, the client should not make assumptions about live updates but should assume the list's contents reflect the workflow list when the first page is requested.\n        To monitor a specific workflow run, use `GetRunStatus` or `GetRunLog`.\n      operationId: GetRunsList\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RunListResponse\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n      parameters:\n        - name: page_size\n          description: \u003e-\n            The preferred number of workflow runs to return in a page.\n            If not provided, the implementation should use a default page size.\n            The implementation must not return more items than `page_size`, but it may return fewer.\n            Clients should not assume that all items have been returned if fewer than `page_size` items are returned.\n            The value of `next_page_token` indicates the availability of additional pages in the response.\n          in: query\n          required: false\n          schema:\n            type: integer\n            format: int64\n        - name: page_token\n          description: \u003e-\n            Token to use to indicate where to start getting results.\n            If unspecified, return the first page of results.\n          in: query\n          required: false\n          schema:\n            type: string\n    post:\n      summary: Run a workflow.\n      description: \u003e-\n        This endpoint creates a new workflow run and returns a `RunId` to monitor its progress.\n      operationId: RunWorkflow\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RunId\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/RunRequest\"\n  /runs/{run_id}:\n    get:\n      summary: Get detailed info about a workflow run.\n      description: \u003e-\n        This endpoint provides detailed information about a given workflow run.\n        The returned result has information about the outputs produced by this workflow (if available), a log object which allows the stderr and stdout to be retrieved, a log array so stderr/stdout for individual tasks can be retrieved, and the overall state of the workflow run (e.g. `RUNNING`, see the State section).\n      operationId: GetRunLog\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RunLog\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"404\":\n          description: The requested workflow run was not found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n      parameters:\n        - name: run_id\n          in: path\n          required: true\n          schema:\n            type: string\n  /runs/{run_id}/cancel:\n    post:\n      summary: Cancel a running workflow.\n      operationId: CancelRun\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RunId\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"404\":\n          description: The requested workflow run wasn't found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n      parameters:\n        - name: run_id\n          in: path\n          required: true\n          schema:\n            type: string\n  /runs/{run_id}/status:\n    get:\n      summary: Get quick status info about a workflow run.\n      description: \u003e-\n        This provides an abbreviated (and likely fast depending on implementation) status of the running workflow, returning a simple result with the overall state of the workflow run (e.g. `RUNNING`, see the `State` section).\n      operationId: GetRunStatus\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RunStatus\"\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"404\":\n          description: The requested workflow run wasn't found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n      parameters:\n        - name: run_id\n          in: path\n          required: true\n          schema:\n            type: string\n  /runs/{run_id}/data/{path-to-file-or-dir}:\n    get:\n      summary: \u003e-\n        Download the files and directories under the run directory of the sapporo-service.\n      description: \u003e-\n        This provides a remote url to download a file or directory under the `run_dir` of the sapporo-service.\n\n        - In the case of `path/to/file`, this returns the download link for the file.\n\n        - In the case of `path/to/dir`, this returns the list of files under the directory in JSON format.\n\n        - In the case of `path/to/dir?download=true`, this returns the download link of the directory in zip format.\n\n        The path is relative to the base directory of each run. See `README.md` in the sapporo-service for the structure of `run_dir`.\n        For example, if you want to download the output `foo.txt`, specify something like `outputs/foo.txt`.\n\n        `..` will be ignored.\n      operationId: GetData\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"404\":\n          description: The requested workflow run wasn't found.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"500\":\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n      parameters:\n        - name: run_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: path-to-file-or-dir\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: download\n          in: query\n          schema:\n            type: boolean\n\ncomponents:\n  schemas:\n    WorkflowTypes:\n      type: string\n      nullable: true\n      enum:\n        - CWL\n        - WDL\n        - SMK\n        - NFL\n      description: The workflow type\n    DefaultWorkflowEngineParameter:\n      type: object\n      additionalProperties: false\n      required:\n        - name\n        - type\n        - default_value\n      properties:\n        name:\n          type: string\n          description: The name of the parameter\n        type:\n          type: string\n          description: Describes the type of the parameter, e.g., float.\n        default_value:\n          type: string\n          description: The stringified version of the default parameter. e.g. 2.45.\n      description: \u003e-\n        A message that allows one to describe default parameters for a workflow engine.\n    Log:\n      type: object\n      additionalProperties: false\n      required:\n        - name\n        - cmd\n        - start_time\n        - end_time\n        - stdout\n        - stderr\n        - exit_code\n      properties:\n        name:\n          type: string\n          description: The task or workflow name\n        cmd:\n          type: array\n          items:\n            type: string\n          description: The command line that was executed\n        start_time:\n          type: string\n          format: datetime\n          nullable: true\n          description: \u003e-\n            When the command started executing, in ISO 8601 format `%Y-%m-%dT%H:%M:%SZ`\n        end_time:\n          type: string\n          format: datetime\n          nullable: true\n          description: \u003e-\n            When the command stopped executing (completed, failed, or canceled), in ISO 8601 format `%Y-%m-%dT%H:%M:%SZ`\n        stdout:\n          type: string\n          nullable: true\n          description: \u003e-\n            A URL to retrieve standard output logs of the workflow run or task.\n            This URL may change between status requests or be unavailable until the task or workflow has finished execution.\n            It should be available using the same credentials used to access the WES endpoint.\n        stderr:\n          type: string\n          nullable: true\n          description: \u003e-\n            A URL to retrieve standard error logs of the workflow run or task.\n            This URL may change between status requests or be unavailable until the task or workflow has finished execution.\n            It should be available using the same credentials used to access the WES endpoint.\n        exit_code:\n          type: integer\n          format: int32\n          nullable: true\n          description: Exit code of the program\n      description: \u003e-\n        The logs, and other key info like timing and exit code, for the overall run of this workflow.\n    ServiceInfo:\n      type: object\n      additionalProperties: true\n      required:\n        - workflow_type_versions\n        - supported_wes_versions\n        - supported_filesystem_protocols\n        - workflow_engine_versions\n        - default_workflow_engine_parameters\n        - system_state_counts\n        - auth_instructions_url\n        - contact_info_url\n        - tags\n      properties:\n        workflow_type_versions:\n          type: object\n          properties:\n            CWL:\n              $ref: \"#/components/schemas/WorkflowTypeVersion\"\n            WDL:\n              $ref: \"#/components/schemas/WorkflowTypeVersion\"\n            SMK:\n              $ref: \"#/components/schemas/WorkflowTypeVersion\"\n            NFL:\n              $ref: \"#/components/schemas/WorkflowTypeVersion\"\n          description: \u003e-\n            A map with keys as the workflow format type name (currently only CWL and WDL are used although service may support others) and value is a workflow_type_version object which contains an array of one or more version strings\n        supported_wes_versions:\n          type: array\n          items:\n            type: string\n          description: The version(s) of the WES schema supported by this service\n        supported_filesystem_protocols:\n          type: array\n          items:\n            type: string\n          description: \u003e-\n            The filesystem protocols supported by this service, currently these may include common protocols using the terms 'http', 'https', 'sftp', 's3', 'gs', 'file', or 'synapse', but others are possible and the terms beyond these core protocols are currently not fixed.\n            This section reports those protocols (either common or not) supported by this WES service.\n        workflow_engine_versions:\n          type: object\n          additionalProperties:\n            type: string\n          description: \u003e-\n            The engine(s) used by this WES service, the key is engine name (e.g., Cromwell), and value is version\n        default_workflow_engine_parameters:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: \"#/components/schemas/DefaultWorkflowEngineParameter\"\n          description: \u003e-\n            Each workflow engine can present additional parameters that can be sent to the workflow engine.\n            This message will list the default values and their types for each workflow engine.\n        system_state_counts:\n          type: object\n          additionalProperties:\n            type: integer\n            format: int64\n          description: \u003e-\n            The system statistics, the key is the statistic, the value is the count of runs in that state. See the State enum for the possible keys.\n        auth_instructions_url:\n          type: string\n          description: \u003e-\n            A web page URL with human-readable instructions on how to get an authorization token for use with a specific WES endpoint.\n        contact_info_url:\n          type: string\n          description: \u003e-\n            An email address URL (mailto:) or web page URL with contact information for a specific WES endpoint operator.\n            Users of the endpoint should use this to report problems or security vulnerabilities.\n        tags:\n          type: object\n          additionalProperties:\n            type: string\n          description: \u003e-\n            A key-value map of arbitrary extended metadata outside the scope of the above but useful to report back\n      description: \u003e-\n        A message containing helpful information about the running service, including supported versions and default settings.\n    ParseRequest:\n      type: object\n      additionalProperties: false\n      properties:\n        workflow_content:\n          type: string\n          nullable: true\n          description: The workflow content to be parsed\n        workflow_location:\n          type: string\n          nullable: true\n          description: The location of the workflow content\n        types_of_parsing:\n          type: array\n          additionalProperties: true\n          nullable: true\n          items:\n            type: string\n            enum:\n              - workflow_type\n              - workflow_type_version\n              - inputs\n              - make_template\n          description: The types of parsing to perform\n    ParseResult:\n      type: object\n      required:\n        - workflow_type\n        - workflow_type_version\n        - inputs\n      properties:\n        workflow_type:\n          $ref: \"#/components/schemas/WorkflowTypes\"\n        workflow_type_version:\n          type: string\n          nullable: true\n          description: The workflow type version\n        inputs:\n          nullable: true\n          oneOf:\n            - type: array\n              items:\n                $ref: \"#/components/schemas/WorkflowInput\"\n            - type: string\n          description: The inputs to the workflow\n    WorkflowInput:\n      type: object\n      additionalProperties: true\n      properties:\n        default:\n          oneOf:\n            - type: string\n            - type: number\n            - type: boolean\n          nullable: true\n          description: The default value for the input\n        doc:\n          type: string\n          nullable: true\n          description: The documentation for the input\n        id:\n          type: string\n          description: The id of the input\n        label:\n          type: string\n          nullable: true\n          description: The label for the input\n        type:\n          type: string\n          enum:\n            - file\n            - directory\n            - any\n            - string\n            - number\n            - boolean\n          description: The type of the input\n        array:\n          type: boolean\n          default: false\n          description: Whether the input is an array\n        required:\n          type: boolean\n          default: true\n          description: Whether the input is required\n        secondaryFiles:\n          type: array\n          nullable: true\n          additionalProperties: false\n          items:\n            type: object\n            additionalProperties: false\n            required:\n              - required\n              - pattern\n            properties:\n              required:\n                type: boolean\n                description: Whether the secondary file is required\n              pattern:\n                type: string\n                description: The pattern for the secondary file\n    State:\n      type: string\n      enum:\n        - UNKNOWN\n        - QUEUED\n        - INITIALIZING\n        - RUNNING\n        - PAUSED\n        - COMPLETE\n        - EXECUTOR_ERROR\n        - SYSTEM_ERROR\n        - CANCELED\n        - CANCELING\n      default: UNKNOWN\n      description: \u003e-\n        - UNKNOWN: The state of the task is unknown.\n        This provides a safe default for messages where this field is missing.\n        For example, a missing field does not accidentally imply that the state is QUEUED.\n\n        - QUEUED: The task is queued.\n\n        - INITIALIZING: The task has been assigned to a worker and is currently preparing to run.\n        For example, the worker may be turning on, downloading input files, etc.\n\n        - RUNNING: The task is running.\n        Input files are downloaded, and the first executor has been started.\n\n        - PAUSED: The task is paused.\n        An implementation may have the ability to pause a task, but this is not required.\n\n        - COMPLETE: The task has been completed running.\n        Executors have exited without error, and output files have been successfully uploaded.\n\n        - EXECUTOR_ERROR: The task encountered an error in one of the Executor processes.\n        Generally, this means that an Executor exited with a non-zero exit code.\n\n        - SYSTEM_ERROR: The task was stopped due to a system error, but not from an Executor; for example, an upload failed due to network issues, the workers ran out of disk space, etc.\n\n        - CANCELED: The task was canceled by the user.\n\n        - CANCELING: The task was canceled by the user and is in the process of stopping.\n    RunListResponse:\n      type: object\n      additionalProperties: false\n      required:\n        - runs\n      properties:\n        runs:\n          type: array\n          additionalProperties: false\n          items:\n            $ref: \"#/components/schemas/RunStatus\"\n          description: \u003e-\n            A list of workflow runs that the service has executed or is executing.\n            The list is filtered to only include runs that the caller has permission to see.\n        next_page_token:\n          type: string\n          description: \u003e-\n            A token may be supplied as `page_token` in the workflow run list request to get the next page of results.\n            An empty string indicates there are no more items to return.\n      description: \u003e-\n        The service will return a RunListResponse when receiving a successful RunListRequest.\n    RunLog:\n      type: object\n      additionalProperties: false\n      required:\n        - run_id\n        - request\n        - state\n        - run_log\n        - task_logs\n        - outputs\n      properties:\n        run_id:\n          type: string\n          description: workflow run ID\n        request:\n          $ref: \"#/components/schemas/RunRequest\"\n        state:\n          $ref: \"#/components/schemas/State\"\n        run_log:\n          $ref: \"#/components/schemas/Log\"\n        task_logs:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Log\"\n          nullable: true\n          description: \u003e-\n            The logs, and other key info like timing and exit code, for each step in the workflow run.\n        outputs:\n          type: array\n          additionalProperties: false\n          items:\n            $ref: \"#/components/schemas/AttachedFile\"\n          description: The outputs from the workflow run.\n    RunRequest:\n      type: object\n      additionalProperties: false\n      required:\n        - workflow_engine_name\n      properties:\n        workflow_params:\n          type: string\n          format: application/json\n          nullable: true\n          description: \u003e-\n            The `workflow_params` JSON object specifies input parameters, such as input files.\n            The exact format of the JSON object depends on the conventions of the workflow language being used.\n            Input files should either be absolute URLs or relative URLs corresponding to files uploaded using `workflow_attachment`.\n            The WES endpoint must understand and be able to access URLs supplied in the input.\n            This is implementation-specific.\n        workflow_type:\n          type: string\n          nullable: true\n          description: \u003e-\n            The `workflow_type` is the type of workflow language.\n        workflow_type_version:\n          type: string\n          nullable: true\n          description: \u003e-\n            The `workflow_type_version` is the version of the workflow language submitted and must be one supported by this WES instance.\n        tags:\n          type: string\n          nullable: true\n          format: application/json\n          description: \u003e-\n            A key-value map of arbitrary metadata outside the scope of `workflow_params` but useful to track with this run request\n        workflow_engine_name:\n          type: string\n          description: \u003e-\n            Specify the name of the workflow engine to run a workflow.\n        workflow_engine_parameters:\n          type: string\n          format: application/json\n          nullable: true\n          description: \u003e-\n            Additional parameters can be sent to the workflow engine using this field.\n            Default values for these parameters can be obtained using the `GetServiceInfo` endpoint.\n        workflow_url:\n          type: string\n          nullable: true\n          description: \u003e-\n            The workflow CWL or WDL document.\n            When `workflow_attachment` is used to attach files, the `workflow_url` may be a relative path to one of the attachments.\n        workflow_name:\n          type: string\n          nullable: true\n          description: \u003e-\n            The `workflow_name` is used to execute the workflow registered in the sapporo-service.\n            Please request to `GetServiceInfo` to check registered workflows.\n            If `workflow_name` is specified, `workflow_url`, `workflow_type` and `workflow_type_version` will be ignored.\n        workflow_attachment:\n          anyOf:\n            - type: array\n              items:\n                type: string\n                format: binary\n            - type: string\n              format: application/json\n          nullable: true\n          description: \u003e-\n            The `workflow_attachment` array may be used to upload files required to execute the workflow, including the primary workflow, tools imported by the workflow, other files referenced by the workflow, or files that are part of the input.\n            The implementation should stage these files to a temporary directory and execute the workflow from there.\n            These parts must have a Content-Disposition header with a \"filename\" provided for each part.\n            Filenames may include subdirectories but must not include references to parent directories with '..' -- implementations should guard against maliciously constructed filenames.\n\n            As a workflow attachment, it returns a list of files attached to the run request.\n            The file_url is generated by using the file distribution feature of the sapporo-service server.\n\n            A JSON encoded string from `List[AttachedFile]`. The sapporo-service will download the file to the execution directory.\n      description: \u003e-\n        To execute a workflow, send a run request including all the details needed to begin downloading and managing a given workflow.\n    RunId:\n      type: object\n      additionalProperties: false\n      required:\n        - run_id\n      properties:\n        run_id:\n          type: string\n          description: workflow run ID\n    RunStatus:\n      type: object\n      required:\n        - run_id\n        - state\n      properties:\n        run_id:\n          type: string\n        state:\n          $ref: \"#/components/schemas/State\"\n      description: Small description of a workflow run, returned by server during listing\n    WorkflowTypeVersion:\n      type: object\n      additionalProperties: false\n      required:\n        - workflow_type_version\n      properties:\n        workflow_type_version:\n          type: array\n          items:\n            type: string\n          description: an array of one or more acceptable types for the `workflow_type`\n      description: Available workflow types supported by a given instance of the service.\n    ErrorResponse:\n      description: \u003e-\n        An object that can optionally include information about the error.\n      type: object\n      additionalProperties: false\n      required:\n        - msg\n        - status_code\n      properties:\n        msg:\n          type: string\n          description: A detailed error message.\n        status_code:\n          type: integer\n          description: The integer representing the HTTP status code (e.g. 200, 404).\n    Workflow:\n      type: object\n      additionalProperties: false\n      required:\n        - workflow_name\n        - workflow_type\n        - workflow_type_version\n        - workflow_url\n        - workflow_attachment\n      properties:\n        workflow_name:\n          type: string\n          description: The workflow name\n        workflow_url:\n          type: string\n          description: The workflow document\n        workflow_type:\n          type: string\n          description: \u003e-\n            The workflow descriptor type must be \"CWL\" or \"WDL\" currently (or another alternative supported by this WES instance)\n        workflow_type_version:\n          type: string\n          description: \u003e-\n            A map with keys as the workflow format type name (currently only CWL and WDL are used although service may support others) and value is a workflow_type_version object which contains an array of one or more version strings\n        workflow_attachment:\n          type: array\n          additionalProperties: false\n          items:\n            $ref: \"#/components/schemas/AttachedFile\"\n          description: \u003e-\n            The workflow_attachment array may be used to download files required to execute the workflow, including the primary workflow, tools imported by the workflow, other files referenced by the workflow, or files that are part of the input.\n            The implementation should stage these files to a temporary directory and execute the workflow from there.\n      description: \u003e-\n        The information about the workflow is provided by `GetServiceInfo` in the mode of executing only the workflow registered by the administrator.\n    AttachedFile:\n      type: object\n      additionalProperties: false\n      required:\n        - file_name\n        - file_url\n      properties:\n        file_name:\n          type: string\n          description: File name. It can be also specified like `dir_name/file_name`.\n        file_url:\n          type: string\n          description: Remote file URL.\n",
			"canonicalURL": "/github.com/sapporo-wes/sapporo-service@3bfabb0e58932dc8da4b70c065d87d59a3929a45/-/blob/sapporo-wes-1-0-1-openapi-spec.yml",
			"externalURLs": [
				{
					"url": "https://github.com/sapporo-wes/sapporo-service/blob/3bfabb0e58932dc8da4b70c065d87d59a3929a45/sapporo-wes-1-0-1-openapi-spec.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/parse-workflow\": post: requestBody: contents: multipart/form-data: complex form schema not implemented",
	"NotImplemented": [
		"complex form schema"
	]
}