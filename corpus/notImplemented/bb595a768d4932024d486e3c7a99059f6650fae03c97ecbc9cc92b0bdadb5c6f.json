{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/usdigitalresponse/univaf"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "server/public/docs/openapi.yaml",
			"byteSize": 31004,
			"content": "openapi: 3.0.0\nservers: []\ninfo:\n  version: \"0.1.0\"\n  title: \"COVID-19 Vaccine Appointment Availability API\"\n  description: |\n    This API provides combined information about COVID-19 vaccination\n    appointment availability at locations across the United States in a single,\n    standard format. Data is sourced from a variety of official data sources\n    (e.g. from CVS Pharmacy) and unofficial data sources (e.g. web scraping and\n    volunteer phone banking). This API is built and maintained by\n    [U.S. Digital Response](https://usdigitalresponse.org) in partnership with\n    the State of New Jersey Office of Innovation, VaccineSpotter.org, and\n    Vaccinate the States.\n\n\n    ## Data Sources\n\n    Data is currently sourced from:\n    - CVS Pharmacy (source names: `univaf-cvs-api`, `univaf-cvs-smart`)\n    - Walgreens Pharmacy (source name: `univaf-walgreens-smart`)\n    - Rite Aid Pharmacy (source name: `univaf-rite-aid-api`)\n    - Albertsons (source name: `univaf-albertsons`)\n    - HyVee (source name: `univaf-hyvee`)\n    - PrepMod (source name: `univaf-prepmod`)\n    - State of New Jersey Vaccine Scheduling System (source name: `univaf-njvss`)\n    - VaccineSpotter.org (source names: `univaf-vaccinespotter`, `vaccinespotter`)\n    - Centers for Disease Control (CDC) (source name: `cdc`, `univaf-cdc`)\n\n    Generally speaking, `univaf-*` sources are implemented directly in this\n    codebase, while others are implemented by partners. For example,\n    `univaf-vaccinespotter` is used when we loaded data from VaccineSpotter's\n    API, but `vaccinespotter` is used when VaccineSpotter *sent* data directly.\n\n    `*-smart` indicates the source reads data from an API that implement the\n    [SMART Scheduling Links](https://github.com/smart-on-fhir/smart-scheduling-links/)\n    standard, a national standard for vaccine appointment availability data.\n    Other names indicate custom or proprietary APIs.\n\n    See below for detailed notes and caveats on some sources.\n\n\n    ### Albertsons (`univaf-albertsons`)\n\n    [Albertsons](https://www.albertsonscompanies.com/) is the parent company for\n    a number of major grocery store and pharmacy chains. This source provides\n    data for the following stores:\n    - ACME\n    - Albertsons/Albertsons Market\n    - Amigos\n    - Carrs\n    - Haggen\n    - Jewel-Osco\n    - Lucky\n    - Market Street\n    - Pak ’n Save\n    - Pavilions\n    - Randalls/Randalls Pharmacy\n    - Safeway\n    - Shaw’s\n    - Tom Thumb\n    - United Supermarkets\n    - Vons\n\n    Albertsons does not provide day-by-day counts of appointment availability\n    or specific appointment slot times; only that slots are generally available\n    and for what vaccine product.\n\n\n    ### HyVee (`univaf-hyvee`)\n\n    [HyVee](https://www.hy-vee.com/corporate) is a large employee-co-op grocery\n    chain in the midwest. The `univaf-hyvee` source scrapes their booking\n    website’s API for data about vaccine products and availability. It does not\n    gather available appointment counts by day (`capacity`) or individual\n    appointment slots (`slots`).\n\n\n    ### PrepMod (`univaf-prepmod`)\n\n    PrepMod is a clinic management tool in use by many public health departments\n    and built by\n    [Maryland Partnership for Prevention](https://www.immunizemaryland.org).\n    It is designed around one-off *events*, so there are some caveats with how\n    we map clinic events to physical locations in this API. In particular:\n\n    - A location’s top-level `booking_url` property is generally the best link\n        for somebody who wants to book a vaccination. It links to a search\n        results page with criteria that match the location. However, there are\n        some caveats here:\n        - Most locations have multiple listings — most PrepMod “clincs” are\n            single-day events, so a given location may have one listing for each\n            day, or sometimes one for each day \u0026 vaccine type combination (it\n            depends on how the public health department sets things up).\n        - It may also list *other* locations that aren’t exact matches. PrepMod\n            searches are based on the centroid of a zip code, and so may include\n            additional similarly named clinics nearby. (This is most often a\n            problem for mobile clinics, where multiple nearby locations share\n            the same name, e.g. “Pop-up Clinic - Anchorage Health Department.”)\n    - A location’s `info_url` property links to a listing of all the clinics\n        managed by a given PrepMod server, and may include *many* different\n        locations.\n    - Each slot in a location’s `availability.slots` array has a relatively\n        unique `booking_url` that lets you book that exact slot. However, the\n        list of vaccines available may include more than are actually offered\n        for that slot. PrepMod's API unfortunately doesn't provide fine-grained\n        enough info to explain which vaccines are available for which slot.\n\n\n    ### Centers for Disease Control (`cdc`, `univaf-cdc`)\n\n    **The Centers for Disease Control (CDC) publishes open data about vaccine\n    stock, not appointments.** We include it because it provides valuable other\n    details, like which vaccine products are available or what the operating\n    hours are at a given location, that other sources do not.\n\n    In general, you should only use it in combination with other sources (the\n    default behavior), meaning the API will show appointment availability from\n    a different, more accurate source, but add other details from this one.\n\n    If you’re looking for 100% accurate information about appointments\n    (see “appointments vs. stock” below), you should use the `sources` query\n    parameter to strip out the `cdc` source when calling the API.\n\n    Stock information from the CDC is also extremely rough — many locations\n    report this information by hand at the end of a day, or every few days,\n    so it is not always completely up to date. The CDC also includes two\n    separate indicators of vaccine stock that often conflict (whether vaccines\n    are in stock, and roughly how long that stock is expected to last). We\n    currently take an optimistic approach here, and report availability if\n    either indicator shows some stock.\n\n\n    ## Appointments vs. Stock\n\n    This API does its best to provide reliable information about vaccine\n    *appointment* availability. That’s different from many official sources\n    (such as the CDC), which mainly provide information about what vaccines are\n    *in stock* at a given location. One reason we built this API is that stock\n    turns out not to relate to whether *appointments* are bookable at all.\n\n    For example, we’ve seen all of the following approaches at various clinics:\n\n    - A location may be out of stock, but still be booking future appointments\n      under the assumption that vaccine shipments will arrive on time.\n    - Alternatively, a location may stop booking appointments as soon as they\n      run out of stock because they are not confident about future shipments.\n    - A location may have stock, but all of it is spoken for in appointments\n      that have already been booked, so they are not accepting new apointments.\n\n    As of late summer 2021, demand is lower than supply at *most* locations, so\n    having vaccines in stock more often indicates appointments are available.\n    This is still not *always* true, though.\n\n\n    ## External IDs\n\n    Every location has a list of “external IDs” in the `external_ids` property.\n    These represent ways that other systems might identify the same location\n    (for example, the store number for a CVS pharmacy, or the ID of the same\n    site in [vaccines.gov](https://vaccines.gov)). An external ID is an array,\n    where the first element names system (e.g. `cvs`) and the second is the ID\n    in that system. For example:\n\n    ```js\n    [\n      // CVS Store #10047\n      [\"cvs\", \"10047\"],\n      // ID on the Vaccines.gov website\n      [\"vaccines_gov\", \"56789b30-ed05-4b28-b864-0b21b048a341\"]\n    ]\n    ```\n\n    In general, these external IDs are unique to a location (that is, no two\n    locations in this API should ever have an identical `[system, id]`\n    combination).\n\n    **However, the `vtrcks` and `npi_usa` systems are not\n    unique!** They exist in `external_ids` for historical reasons (we thought\n    these were unique early on, and later learned this was not so). You should\n    not assume a given `vtrcks` or `npi_usa` ID represents only one location.\n\n    You can also look up locations by their external ID. The `id` path parameter\n    can be an external ID in the form `system:id` instead of the actual location\n    ID. For example, these paths all get the same location:\n\n    ```txt\n    /api/edge/locations/215f56ac-8bda-4ae9-ad5e-a567ebe8c1bb\n    /api/edge/locations/cvs:10047\n    /api/edge/locations/vaccines_gov:56789b30-ed05-4b28-b864-0b21b048a341\n    ```\n  contact:\n    email: univaf@usdigitalresponse.org\n  license:\n    name: MIT\n    url: \"https://opensource.org/licenses/MIT\"\npaths:\n  \"/api/edge/locations\":\n    get:\n      summary: List locations + availability\n      description: |\n        List out known locations, including their current appointment\n        availability. This responds in paginated batches of 2,000 locations.\n        Use the `links.next` property to get a URL to the next page of results.\n\n        The availability information included here may merge data from multiple\n        sources. To get individual availability data from each source, use the\n        `/api/edge/availability` endpoint.\n      parameters:\n        - in: query\n          name: state\n          description: Get locations in a particular state. Should be the USPS abbreviation for that state, e.g. `NJ` for New Jersey.\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: limit\n          description: maximum number of records to return\n          required: false\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 2000\n        - in: query\n          name: page_next\n          description: Indicates where to resume from in a paginated request.\n          schema:\n            type: string\n        - in: query\n          name: sources\n          description: |\n            List of data sources that should be included when building the\n            `availability` object for each location. The list can be comma\n            separated or you can specify `sources` multiple times.\n\n            This API sources data in a variety of ways. If you'd like to limit\n            availability data only to APIs from CVS and Rite Aid, for example,\n            you might set:\n\n            ```\n            ?sources=univaf-cvs-smart,univaf-rite-aid-api\n            ```\n\n            See [\"Data Sources\"](#section/Data-Sources) to list of source names.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: List of locations + availability\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LocationsPage\"\n\n        \"422\":\n          description: bad input parameter\n  \"/api/edge/locations.ndjson\":\n    get:\n      summary: List locations + availability\n      description: |\n        List out known locations, including their current appointment\n        availability. This streams out as many results as possible as\n        newline-delimted JSON objects for 25 seconds. If it hasn't returned all\n        results in that timeframe, the last object will be:\n        ```\n        { \"__next__\": \"\u003curl_to_resume_from\u003e\" }\n        ```\n\n        The availability information included here may merge data from multiple\n        sources. To get individual availability data from each source, use the\n        `/api/edge/availability` endpoint.\n      parameters:\n        - in: query\n          name: state\n          description: Get locations in a particular state. Should be the USPS abbreviation for that state, e.g. `NJ` for New Jersey.\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: limit\n          description: maximum number of records to return\n          required: false\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 2000\n        - in: query\n          name: page_next\n          description: Indicates where to resume from in a paginated request.\n          schema:\n            type: string\n        - in: query\n          name: sources\n          description: |\n            List of data sources that should be included when building the\n            `availability` object for each location. The list can be comma\n            separated or you can specify `sources` multiple times.\n\n            This API sources data in a variety of ways. If you'd like to limit\n            availability data only to APIs from CVS and Rite Aid, for example,\n            you might set:\n\n            ```\n            ?sources=univaf-cvs-smart,univaf-rite-aid-api\n            ```\n\n            See [\"Data Sources\"](#section/Data-Sources) to list of source names.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: List of locations + availability\n          content:\n            application/x-ndjson:\n              schema:\n                $ref: \"#/components/schemas/LocationWithAvailability\"\n        \"422\":\n          description: bad input parameter\n  \"/api/edge/locations/{id}\":\n    get:\n      summary: Get a single location\n      description: |\n        Get a single location and its current availability.\n\n        The availability information included here may merge data from multiple\n        sources. To get individual availability data from each source, use the\n        `/api/edge/availability` endpoint.\n      parameters:\n        - in: path\n          name: id\n          description: ID of the location to get\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: sources\n          description: |\n            List of data sources that should be included when building the\n            `availability` object for each location. The list can be comma\n            separated or you can specify `sources` multiple times.\n\n            This API sources data in a variety of ways. If you'd like to limit\n            availability data only to APIs from CVS and Rite Aid, for example,\n            you might set:\n\n            ```\n            ?sources=univaf-cvs-smart,univaf-rite-aid-api\n            ```\n\n            See [\"Data Sources\"](#section/Data-Sources) to list of source names.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: Location\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: \"#/components/schemas/LocationWithAvailability\"\n\n        \"422\":\n          description: bad input parameter\n  \"/api/edge/availability\":\n    get:\n      summary: List availability records\n      description: |\n        List the latest availability for each location + source combination.\n        Note this may list multiple results per location. (The `/locations`\n        endpoint lists combined availability that merges multiple sources for\n        each location.)\n\n        This is a paginated response. Use the `links.next` property to get the\n        URL for the next page of results, if any.\n      parameters:\n        - in: query\n          name: limit\n          description: maximum number of records to return\n          required: false\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n            maximum: 2000\n        - in: query\n          name: page_next\n          description: Indicates where to resume from in a paginated request.\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: List of availability recods\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AvailabilityPage\"\n\n        \"422\":\n          description: bad input parameter\n  \"/api/edge/update\":\n    post:\n      summary: Update availability\n      description: |\n        Adds/updates availability data for a given location and source. If the\n        location doesn’t exist, it will be created. Including the\n        `update_location=true` query parameter will cause existing locations to\n        be updated with any new data in the POST body.\n\n        The POST body should be a single Location + Availability record, similar\n        to what’s returned from `/api/edge/locations/{id}` (but without the\n        wrapper object that has the `data` property).\n\n        The `location.external_ids` field may be formatted as an object or as a\n        list of lists (regular or 'v2' external_id format).\n\n        Locations are looked up by `location.id` if present, or by any of the\n        entries in `location.external_ids`.\n      responses:\n        \"200\":\n          description: item updated\n        \"201\":\n          description: item created\n        \"422\":\n          description: invalid input\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LocationUpdate\"\n        description: Location and availability to update/add.\n  \"/smart-scheduling/$bulk-publish\":\n    get:\n      summary: \"SMART Scheduling Links\"\n      description: |\n        Provides location data according to the [SMART Scheduling Links standard](https://github.com/smart-on-fhir/smart-scheduling-links/specification.md)\n        and follows the [guidelines for Slot Aggregators](https://github.com/smart-on-fhir/smart-scheduling-links/blob/master/specification.md#slot-aggregators).\n\n        Some particulars worth noting:\n\n        - Locations use the `meta.lastUpdated` to denote when information *about\n          the location* was last changed, not when availability was (this\n          matches the FHIR standard). For availability update times, check\n          *schedules* for `meta.extension` entries where `url == \"http://hl7.org/fhir/StructureDefinition/lastSourceSync\"`.\n          See the [section on freshness in the specification](https://github.com/smart-on-fhir/smart-scheduling-links/blob/master/specification.md#indicate-data-freshness)\n          for details.\n\n        - Locations currently have a single schedule. If product and dose info\n          is known, all available products and doses will be listed as\n          extensions on that schedule, rather than separate schedules for each\n          combination. (We may switch to multiple schedules in the future.)\n\n        - All schedules include the `\"http://fhir-registry.smarthealthit.org/StructureDefinition/has-availability\"`\n          extension. If you only need to know whether there are *some*\n          appointments available and don’t need information at the date or slot\n          level, you can use this and not bother requesting the slots at all.\n\n        - Locations with unknown availability have schedules, but no slots.\n\n        - Some locations do not list slots when they are busy. We do our best to\n          represent both free and busy slots, but some providers only publish\n          the slots that are available, and we can’t get details on unavailable\n          slots.\n\n        - Some slots are individual slots, while others represent larger\n          timeframes (often a whole day). The granularity of information depends\n          on the data source.\n\n        - Not all information about provider locations is available through this\n          API. In particular, it does not show:\n            - Provider organization name (`provider` in the main API), e.g. CVS,\n              Hope Hostpital, etc.\n            - Location type (`location_type` in the main API), e.g. mass\n              vaccination site, clinic, pharmacy.\n            - Whether you have to sign up for a waitlist (`requires_waitlist`\n              in the main API).\n            - Miscellaneous extra data (`meta` in the main API).\n      responses:\n        \"200\":\n          description: SMART Scheduling Links manifest\ncomponents:\n  schemas:\n    CapacityRecord:\n      type: object\n      description: |\n        Represents how many appointments for a particular set of vaccine\n        products and dose types are available on a given date. There may be\n        muliple capacity records for a given date with different products.\n      properties:\n        date:\n          type: string\n          format: date\n          description: Date for which this capacity is valid.\n          example: \"2021-04-21\"\n        available:\n          type: string\n          enum: [\"YES\", \"NO\"]\n          description: |\n            Indicates whether appointments are currently available for booking\n            on this date.\n        available_count:\n          type: integer\n          format: int32\n          description: |\n            Total number of open appointment slots on this date. Not present if\n            not known.\n        unavailable_count:\n          type: integer\n          format: int32\n          description: |\n            Total number of non-open appointment slots on this date. Not\n            present if not known.\n        products:\n          type: array\n          items:\n            type: string\n          description: |\n            List of vaccine products available on this date. Not present if not\n            known. Current possible values include: `moderna`, `pfizer`,\n            `pfizer_age_5_11`, `pfizer_age_2_4`, `jj`.\n        dose:\n          type: string\n          description: |\n            Dose type appointments are available for. Not present if not known.\n            Current possible values: `all_doses`, `first_dose_only`,\n            `second_dose_only`.\n    SlotRecord:\n      type: object\n      description: |\n        Represents the most fine-grained information about appointments from a\n        particular source. This often represents single appointment slots, but\n        may represent more coarse-grained timeframes (e.g. a morning or\n        afternoon).\n      properties:\n        start:\n          type: string\n          format: date-time\n          description: Time at which this slot starts.\n          example: \"2021-04-21T09:00:00Z\"\n        end:\n          type: string\n          format: date-time\n          description: Time at which this slot ends.\n          example: \"2021-04-21T09:15:00Z\"\n        available:\n          type: string\n          enum: [\"YES\", \"NO\"]\n          description: |\n            Indicates whether this slot is available to be booked.\n        available_count:\n          type: integer\n          format: int32\n          description: |\n            Total number of open appointments in the timeframe this slot\n            represents. Not present if the unknown or the slot represents a\n            single appointment.\n        unavailable_count:\n          type: integer\n          format: int32\n          description: |\n            Total number of non-open appointments in the timeframe this slot\n            represents. Not present if the unknown or the slot represents a\n            single appointment.\n        products:\n          type: array\n          items:\n            type: string\n          description: |\n            List of vaccine products available for this slot. Not present if not\n            known. Current possible values include: `moderna`, `pfizer`,\n            `pfizer_age_5_11`, `pfizer_age_2_4`, `jj`.\n        dose:\n          type: string\n          description: |\n            Dose type available for this slot. Not present if not known.\n            Current possible values: `all_doses`, `first_dose_only`,\n            `second_dose_only`.\n    Availability:\n      type: object\n      required:\n        - checked_at\n        - available\n      properties:\n        location_id:\n          type: string\n          format: uuid\n          description: |\n            Location this availability applies to. Not present if the\n            availability is a property of a location object, e.g. in requests\n            to `/api/edge/locations`.\n          example: d290f1ee-6c54-4b01-90e6-d701748f0851\n        valid_at:\n          type: string\n          format: date-time\n          description: Time this data was last known to be valid.\n          example: \"2021-04-21T09:12:33.001Z\"\n        checked_at:\n          type: string\n          format: date-time\n          description: |\n            Time the source was last checked for this data. (When `source` is a\n            scraper, this and `valid_at` will usually be the same. When it is\n            an API or some other method that includes data about when it was\n            last accurate, `valid_at` reflects that time and `checked_at`\n            reflects the time that source was queried. For most applications,\n            you should monitor `valid_at` rather than `checked_at`.)\n          example: \"2021-04-21T09:12:33.001Z\"\n        changed_at:\n          type: string\n          format: date-time\n          description: |\n            The last time the availability actually changed. For example,\n            `checked_at` and `valid_at` should usually be only minutes old, but\n            `changed_at` could be hours old if people are not actively booking\n            appointments at this location.\n          example: \"2021-04-21T09:12:33.001Z\"\n        available:\n          type: string\n          enum: [\"YES\", \"NO\", \"UNKNOWN\"]\n          description: |\n            Indicates whether appointments are currently available for booking.\n        available_count:\n          type: integer\n          format: int32\n          description: |\n            Total number of open appointment slots. Not present if not known.\n        products:\n          type: array\n          items:\n            type: string\n          description: |\n            List of vaccine products available. Not present if not known.\n            Current possible values include: `moderna`, `pfizer`,\n            `pfizer_age_5_11`, `pfizer_age_2_4`, `jj`.\n        doses:\n          type: array\n          items:\n            type: string\n          description: |\n            List of dose types appointments are available for. Not present if\n            not known. Current possible values: `all_doses`, `first_dose_only`,\n            `second_dose_only`.\n        capacity:\n          type: array\n          items:\n            $ref: \"#/components/schemas/CapacityRecord\"\n          description: |\n            Day-by-day appointment availability. Not present if not known.\n        slots:\n          type: array\n          items:\n            $ref: \"#/components/schemas/SlotRecord\"\n          description: |\n            As fine-grained information about appointments as available from\n            the source. Not present if the same as `capacity`. This may\n            represent individual appointment slots or larger timeframes.\n        meta:\n          type: object\n          description: Any additional free-form data the source might provide.\n    AvailabilityRecord:\n      allOf:\n        - { \"$ref\": \"#/components/schemas/Availability\" }\n        - properties:\n            source:\n              type: string\n              description: Name of the API client or scraper that generated this data.\n          required:\n            - source\n    LocationAvailability:\n      allOf:\n        - { \"$ref\": \"#/components/schemas/Availability\" }\n        - properties:\n            sources:\n              type: array\n              items:\n                type: string\n              description: |\n                Name of the API clients or scrapers that supplied data used to\n                compile this availability object.\n          required:\n            - sources\n    Location:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        external_ids:\n          type: array\n          example: [[\"cvs\", \"abc\"], [\"vtrcks\", \"123\"]]\n          description: |\n            Identifiers this location is known by in other systems. This field is\n            represented by a list of lists where the first values of each sublist\n            name other systems, e.g. `cvs` (for CVS store numbers), `vtrcks`\n            (for VTrckS PINs), etc.; and the second values are the IDs in those\n            systems.\n        provider:\n          type: string\n        location_type:\n          type: string\n          enum: [\"PHARMACY\", \"CLINIC\", \"MASS_VAX\"]\n        name:\n          type: string\n        address_lines:\n          type: array\n          items:\n            type: string\n        city:\n          type: string\n        state:\n          type: string\n        postal_code:\n          type: string\n        county:\n          type: string\n        position:\n          type: object\n          properties:\n            longitude:\n              type: number\n              format: float\n            latitude:\n              type: number\n              format: float\n        info_phone:\n          type: string\n        info_url:\n          type: string\n        booking_phone:\n          type: string\n        booking_url:\n          type: string\n        description:\n          type: string\n        requires_waitlist:\n          type: boolean\n        meta:\n          type: object\n        created_at:\n          type: string\n          format: date-time\n        updated_at:\n          type: string\n          format: date-time\n    LocationWithAvailability:\n      allOf:\n        - { \"$ref\": \"#/components/schemas/Location\" }\n        - properties:\n            availability:\n              $ref: \"#/components/schemas/LocationAvailability\"\n    LocationUpdate:\n      allOf:\n        - { \"$ref\": \"#/components/schemas/Location\" }\n        - properties:\n            availability:\n              $ref: \"#/components/schemas/AvailabilityRecord\"\n    LocationsPage:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            next:\n              type: string\n              format: url\n              description: URL to the next page of results. May be relative URL.\n        data:\n          type: array\n          items:\n            $ref: \"#/components/schemas/LocationWithAvailability\"\n    AvailabilityPage:\n      type: object\n      properties:\n        links:\n          type: object\n          properties:\n            next:\n              type: string\n              format: url\n              description: URL to the next page of results. May be relative URL.\n        data:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AvailabilityRecord\"\n",
			"canonicalURL": "/github.com/usdigitalresponse/univaf@337fb37fdd93b94ad1ed4cd74789d7081c27aad5/-/blob/server/public/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/usdigitalresponse/univaf/blob/337fb37fdd93b94ad1ed4cd74789d7081c27aad5/server/public/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/edge/locations.ndjson\": get: responses: 200: contents: unsupported content types: [application/x-ndjson]",
	"NotImplemented": [
		"unsupported content types"
	]
}