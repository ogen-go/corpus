{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/redhat-developer/app-services-sdk-java"
		},
		"file": {
			"name": "service-accounts.yaml",
			"size": 0,
			"path": ".openapi/service-accounts.yaml",
			"byteSize": 7710,
			"content": "openapi: 3.0.1\ninfo:\n  title: Service Accounts API Documentation\n  description: This is the API documentation for Service Accounts\n  contact:\n    email: it-user-team-list@redhat.com\n  version: 5.0.19\nservers:\n  - url: https://sso.redhat.com/auth/realms/redhat-external\n    description: Production server\nsecurity:\n  - bearerAuth: []\npaths:\n  /apis/service_accounts/v1:\n    get:\n      tags:\n        - service_accounts\n      summary: List all service accounts\n      description: Returns a list of service accounts created by a user. User information\n        is obtained from the bearer token. The list is paginated with starting index\n        as 'first' and page size as 'max'.\n      operationId: getServiceAccounts\n      parameters:\n        - name: first\n          in: query\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n            default: 0\n        - name: max\n          in: query\n          schema:\n            maximum: 100\n            minimum: 1\n            type: integer\n            format: int32\n            default: 20\n        - name: clientId\n          in: query\n          schema:\n            maxItems: 10\n            minItems: 0\n            uniqueItems: true\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServiceAccountData'\n          links:\n            getNextPage:\n              operationId: getServiceAccounts\n              description: link to the next page of service accounts\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"401\":\n          $ref: '#/components/responses/401'\n    post:\n      tags:\n        - service_accounts\n      summary: Create service account\n      description: Create a service account. Created service account is associated\n        with the user defined in the bearer token.\n      operationId: createServiceAccount\n      requestBody:\n        description: '''name'' and ''description'' of the service account'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceAccountCreateRequestData'\n        required: true\n      responses:\n        \"201\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceAccountData'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"401\":\n          $ref: '#/components/responses/401'\n  /apis/service_accounts/v1/{id}:\n    get:\n      tags:\n        - service_accounts\n      summary: Get service account by id\n      description: Returns service account by id. Throws not found exception if the\n        service account is not found or the user does not have access to this service\n        account\n      operationId: getServiceAccount\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceAccountData'\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"401\":\n          $ref: '#/components/responses/401'\n    delete:\n      tags:\n        - service_accounts\n      summary: Delete service account by id\n      description: Delete service account by id. Throws not found exception if the\n        service account is not found or the user does not have access to this service\n        account\n      operationId: deleteServiceAccount\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json: {}\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"401\":\n          $ref: '#/components/responses/401'\n    patch:\n      tags:\n        - service_accounts\n      summary: Update service account\n      description: Update a service account by id.\n      operationId: updateServiceAccount\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: '''name'' and ''description'' of the service account'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceAccountRequestData'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceAccountData'\n        \"400\":\n          $ref: '#/components/responses/400'\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"401\":\n          $ref: '#/components/responses/401'\n  /apis/service_accounts/v1/{id}/resetSecret:\n    post:\n      tags:\n        - service_accounts\n      summary: Reset service account secret by id\n      description: Reset service account secret by id . Throws not found exception\n        if the service account is not found or the user does not have access to this\n        service account\n      operationId: resetServiceAccountSecret\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceAccountData'\n        \"404\":\n          $ref: '#/components/responses/404'\n        \"401\":\n          $ref: '#/components/responses/401'\ncomponents:\n  schemas:\n    Error:\n      required:\n        - error\n      type: object\n      properties:\n        error:\n          type: string\n          description: The cause of the Error.\n    ServiceAccountData:\n      type: object\n      properties:\n        id:\n          type: string\n        clientId:\n          type: string\n        secret:\n          type: string\n          description: Provided during creation and resetting of service account credentials.\n        name:\n          type: string\n        description:\n          type: string\n        createdBy:\n          type: string\n        createdAt:\n          type: integer\n          format: int64\n    ServiceAccountCreateRequestData:\n      required:\n        - description\n        - name\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n    ServiceAccountRequestData:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n  responses:\n    \"400\":\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    \"401\":\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    \"403\":\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    \"404\":\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    \"500\":\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      \n",
			"canonicalURL": "/github.com/redhat-developer/app-services-sdk-java@4515520baf91913fe2f588ffeb8af92e60a1667c/-/blob/.openapi/service-accounts.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/redhat-developer/app-services-sdk-java/blob/4515520baf91913fe2f588ffeb8af92e60a1667c/.openapi/service-accounts.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/apis/service_accounts/v1/{id}\": delete: responses: 200: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema"
	]
}