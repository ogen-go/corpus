{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/RailwayStations/RSAPI"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "src/main/resources/static/openapi.yaml",
			"byteSize": 46700,
			"content": "---\nopenapi: 3.0.1\ninfo:\n  title: RSAPI\n  description: 'Backend Service for https://www.railway-stations.org/. Sourcecode\n    available at: https://github.com/RailwayStations/RSAPI.'\n  license:\n    name: MIT\n    url: https://github.com/RailwayStations/RSAPI/blob/master/LICENSE.txt\n  version: \"20220424.1700\"\nservers:\n  - url: https://api.railway-stations.org/\ntags:\n  - name: bahnhofsfotos\n    description: Photos of railway stations\n    externalDocs:\n      description: Find out more\n      url: https://www.railway-stations.org\npaths:\n  /{country}/stations:\n    get:\n      summary: Finds railway stations by various query criteria\n      parameters:\n        - name: country\n          in: path\n          description: filter by country code\n          required: true\n          schema:\n            type: string\n        - name: hasPhoto\n          in: query\n          description: filter by photo availalbe/missing\n          schema:\n            type: boolean\n        - name: photographer\n          in: query\n          description: filter by nickname of a photographer\n          schema:\n            type: string\n        - name: maxDistance\n          in: query\n          description: filter by max distance from the coordinates given by lat and\n            lon\n          schema:\n            type: integer\n            format: int64\n        - name: lat\n          in: query\n          description: latitute of the coordinates to filter by max distance\n          schema:\n            type: number\n            format: double\n        - name: lon\n          in: query\n          description: longitude of the coordinates to filter by max distance\n          schema:\n            type: number\n            format: double\n        - name: active\n          in: query\n          description: filter on active/inactive stations\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/gpx+xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Station'\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: Country not found\n          content: {}\n  /{country}/stations.gpx:\n    get:\n      summary: Finds railway stations by various query criteria as GPX\n      parameters:\n        - name: country\n          in: path\n          description: filter by country code\n          required: true\n          schema:\n            type: string\n        - name: hasPhoto\n          in: query\n          description: filter by photo availalbe/missing\n          schema:\n            type: boolean\n        - name: photographer\n          in: query\n          description: filter by nickname of a photographer\n          schema:\n            type: string\n        - name: maxDistance\n          in: query\n          description: filter by max distance from the coordinates given by lat and\n            lon\n          schema:\n            type: integer\n            format: int64\n        - name: lat\n          in: query\n          description: latitute of the coordinates to filter by max distance\n          schema:\n            type: number\n            format: double\n        - name: lon\n          in: query\n          description: longitude of the coordinates to filter by max distance\n          schema:\n            type: number\n            format: double\n        - name: active\n          in: query\n          description: filter on active/inactive stations\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/gpx+xml:\n              schema:\n                type: string\n        404:\n          description: Country not found\n          content: {}\n  /stations:\n    get:\n      summary: Finds railway stations by various query criteria\n      parameters:\n        - name: country\n          in: query\n          description: filter by country code\n          schema:\n            type: array\n            items:\n              type: string\n        - name: hasPhoto\n          in: query\n          description: filter by photo availalbe/missing\n          schema:\n            type: boolean\n        - name: photographer\n          in: query\n          description: filter by nickname of a photographer\n          schema:\n            type: string\n        - name: maxDistance\n          in: query\n          description: filter by max distance from the coordinates given by lat and\n            lon\n          schema:\n            type: integer\n            format: int64\n        - name: lat\n          in: query\n          description: latitute of the coordinates to filter by max distance\n          schema:\n            type: number\n            format: double\n        - name: lon\n          in: query\n          description: longitude of the coordinates to filter by max distance\n          schema:\n            type: number\n            format: double\n        - name: active\n          in: query\n          description: filter on active/inactive stations\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/gpx+xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Station'\n            text/plain:\n              schema:\n                type: string\n  /stations.gpx:\n    get:\n      summary: Finds railway stations by various query criteria\n      parameters:\n        - name: country\n          in: query\n          description: filter by country code\n          schema:\n            type: array\n            items:\n              type: string\n        - name: hasPhoto\n          in: query\n          description: filter by photo availalbe/missing\n          schema:\n            type: boolean\n        - name: photographer\n          in: query\n          description: filter by nickname of a photographer\n          schema:\n            type: string\n        - name: maxDistance\n          in: query\n          description: filter by max distance from the coordinates given by lat and\n            lon\n          schema:\n            type: integer\n            format: int64\n        - name: lat\n          in: query\n          description: latitute of the coordinates to filter by max distance\n          schema:\n            type: number\n            format: double\n        - name: lon\n          in: query\n          description: longitude of the coordinates to filter by max distance\n          schema:\n            type: number\n            format: double\n        - name: active\n          in: query\n          description: filter on active/inactive stations\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/gpx+xml:\n              schema:\n                type: string\n  /{country}/stations/{id}:\n    get:\n      summary: Find a railway station by its ID\n      parameters:\n        - name: country\n          in: path\n          description: country code\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: id of the station\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Station'\n        404:\n          description: Station not found\n          content: {}\n  /recentPhotoImports:\n    get:\n      summary: List stations with photo uploads in the las 24h\n      parameters:\n        - name: sinceHours\n          in: query\n          description: defines the timeframe since when to look for recent photo uploads,\n            default is 10h\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Station'\n  /{country}/photographers:\n    get:\n      summary: List of all photographers of a given country with their number of photos\n        taken\n      parameters:\n        - name: country\n          in: path\n          description: filter by country code\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Photographers'\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: Country not found\n          content: {}\n  /{country}/photographers.txt:\n    get:\n      summary: List of all photographers of a given country with their number of photos\n        taken\n      parameters:\n        - name: country\n          in: path\n          description: filter by country code\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: Country not found\n          content: {}\n  /{country}/photographers.json:\n    get:\n      summary: List of all photographers of a given country with their number of photos\n        taken\n      parameters:\n        - name: country\n          in: path\n          description: filter by country code\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Photographers'\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: Country not found\n          content: {}\n  /photographers:\n    get:\n      summary: List of all photographers with their number of photos taken\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Photographers'\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n  /photographers.json:\n    get:\n      summary: List of all photographers with their number of photos taken\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Photographers'\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n  /photographers.txt:\n    get:\n      summary: List of all photographers with their number of photos taken\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n  /{country}/stats:\n    get:\n      summary: Statistic of photos with and without photos by country\n      parameters:\n        - name: country\n          in: path\n          description: filter by country code\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Statistic'\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: Country not found\n          content: {}\n  /{country}/stats.json:\n    get:\n      summary: Statistic of photos with and without photos by country\n      parameters:\n        - name: country\n          in: path\n          description: filter by country code\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Statistic'\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: Country not found\n          content: {}\n  /{country}/stats.txt:\n    get:\n      summary: Statistic of photos with and without photos by country\n      parameters:\n        - name: country\n          in: path\n          description: filter by country code\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: Country not found\n          content: {}\n  /stats:\n    get:\n      summary: Overall statistic of photos with and without photos\n      parameters:\n        - name: country\n          in: query\n          description: filter by country code\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Statistic'\n        404:\n          description: Country not found\n          content: {}\n  /stats.json:\n    get:\n      summary: Overall statistic of photos with and without photos\n      parameters:\n        - name: country\n          in: query\n          description: filter by country code\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Statistic'\n        404:\n          description: Country not found\n          content: {}\n  /stats.txt:\n    get:\n      summary: Overall statistic of photos with and without photos\n      parameters:\n        - name: country\n          in: query\n          description: filter by country code\n          schema:\n            type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: Country not found\n          content: {}\n  /countries:\n    get:\n      summary: List of all supported countries with their configuration\n      parameters:\n        - name: onlyActive\n          in: query\n          description: return only active countries? Defaults to true.\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Country'\n  /countries.json:\n    get:\n      summary: List of all supported countries with their configuration\n      parameters:\n        - name: onlyActive\n          in: query\n          description: return only active countries? Defaults to true.\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Country'\n  /photoUpload:\n    post:\n      summary: Upload a new Photo\n      parameters:\n        - name: Authorization\n          in: header\n          description: basic authorization\n          required: false\n          schema:\n            type: string\n        - name: Upload-Token\n          in: header\n          description: DEPRECATED, use basic authorization! Upload Token\n          required: false\n          schema:\n            type: string\n        - name: Email\n          in: header\n          description: DEPRECATED, use basic authorization! Email or name of the user\n          required: false\n          schema:\n            type: string\n        - name: Country\n          in: header\n          description: country code\n          schema:\n            type: string\n        - name: Station-Id\n          in: header\n          description: id of the railwaystation\n          schema:\n            type: string\n        - name: Content-Type\n          in: header\n          description: mime type of the image, \"image/png\" or \"image/jpeg\"\n          required: true\n          schema:\n            type: string\n        - name: Station-Title\n          in: header\n          description: name of the station, for upload of missing stations (needs to\n            be URL-encoded with UTF-8 charset)\n          schema:\n            type: string\n        - name: Latitude\n          in: header\n          description: latitude, for upload of missing stations\n          schema:\n            type: number\n            format: double\n        - name: Longitude\n          in: header\n          description: longitude, for upload of missing stations\n          schema:\n            type: number\n            format: double\n        - name: Comment\n          in: header\n          description: comment of the photographer to the reviewer (needs to be URL-encoded\n            with UTF-8 charset)\n          schema:\n            type: string\n        - name: Active\n          in: header\n          description: is this station active?\n          schema:\n            type: boolean\n      requestBody:\n        description: image\n        content:\n          image/jpeg:\n            schema:\n              type: string\n              format: byte\n          image/png:\n            schema:\n              type: string\n              format: byte\n        required: true\n      responses:\n        202:\n          description: upload successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InboxResponse'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InboxResponse'\n        401:\n          description: authorization failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InboxResponse'\n        403:\n          description: forbidden\n          content: {}\n        409:\n          description: photo already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InboxResponse'\n        413:\n          description: image too large (maximum 20 MB)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InboxResponse'\n      x-codegen-request-body-name: image\n  /reportProblem:\n    post:\n      summary: Report a for a Railway-Station\n      parameters:\n        - name: Authorization\n          in: header\n          description: basic authorization\n          schema:\n            type: string\n      requestBody:\n        description: The problem report\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/ProblemReport'\n        required: true\n      responses:\n        202:\n          description: report successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InboxResponse'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InboxResponse'\n        401:\n          description: authorization failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InboxResponse'\n        403:\n          description: forbidden\n          content: {}\n      x-codegen-request-body-name: problemReport\n  /userInbox:\n    post:\n      summary: Query the state of photo uploads of the authorized user\n      parameters:\n        - name: Authorization\n          in: header\n          description: basic authorization\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/InboxStateQueryRequest'\n        required: true\n      responses:\n        200:\n          description: array UploadStateQuery objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/InboxStateQueryResponse'\n      x-codegen-request-body-name: UploadStateQueries\n  /publicInbox:\n    get:\n      summary: Get the current public inbox, stations where photos have been uploaded\n      responses:\n        200:\n          description: array of public inbox objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PublicInboxEntry'\n  /adminInboxCount:\n    get:\n      summary: Count pending inbox items\n      responses:\n        200:\n          description: count of pending inbox items\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InboxCountResponse'\n  /nextZ:\n    get:\n      summary: Get next Z-StationId for missing stations\n      responses:\n        200:\n          description: next Z-StationId value\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NextZResponse'\n  /adminInbox:\n    get:\n      summary: Get the current inbox, photos and problem reports under review.\n      parameters:\n        - name: Authorization\n          in: header\n          description: basic authorization\n          schema:\n            type: string\n      responses:\n        200:\n          description: array of inbox objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/InboxEntry'\n        401:\n          description: not authorized\n          content: {}\n        403:\n          description: forbidden\n          content: {}\n    post:\n      summary: Import or reject an uploaded photo or a problem report from the inbox\n      parameters:\n        - name: Authorization\n          in: header\n          description: basic authorization\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/InboxCommand'\n        required: true\n      responses:\n        200:\n          description: command successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdminInboxCommandResponse'\n        400:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdminInboxCommandResponse'\n        401:\n          description: not authorized\n          content: {}\n        403:\n          description: forbidden\n          content: {}\n      x-codegen-request-body-name: UploadCommand\n  /registration:\n    post:\n      summary: Register for an account\n      requestBody:\n        description: Registration information\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterProfile'\n        required: true\n      responses:\n        202:\n          description: registration accepted\n          content: {}\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n        409:\n          description: conflict with existing name or email\n          content:\n            text/plain:\n              schema:\n                type: string\n        422:\n          description: unprocessable entity, Registration input document error\n          content: {}\n      x-codegen-request-body-name: registration\n  /emailVerification/{token}:\n    get:\n      summary: Verify eMail-Address with verification token\n      parameters:\n        - name: token\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: email successfully verified\n          content: {}\n        404:\n          description: token not found, verification failed\n          content: {}\n  /resendEmailVerification:\n    post:\n      summary: Sends a new eMail-Verification mail\n      parameters:\n        - name: Authorization\n          in: header\n          description: basic authorization with old password\n          schema:\n            type: string\n      responses:\n        200:\n          description: email successfully sent\n          content: {}\n  /resetPassword:\n    post:\n      summary: Requests a new password only\n      parameters:\n        - name: NameOrEmail\n          in: header\n          description: name or email of the user\n          required: true\n          schema:\n            type: string\n      responses:\n        202:\n          description: request accepted, email with new password will be sent\n          content: {}\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: User not found\n          content: {}\n  /newUploadToken:\n    post:\n      summary: Requests a new Upload-Token (now password) only\n      description: DEPRECATED, use reset password\n      parameters:\n        - name: Email\n          in: header\n          description: email or name of the user\n          required: true\n          schema:\n            type: string\n      responses:\n        202:\n          description: request accepted, email with new password (uploadToken) will\n            be sent\n          content: {}\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: User not found\n          content: {}\n  /changePassword:\n    post:\n      summary: Change user password\n      parameters:\n        - name: Authorization\n          in: header\n          description: basic authorization with old password\n          schema:\n            type: string\n        - name: New-Password\n          in: header\n          description: new password, deprecated use body message for proper encoding\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: ChangePassword\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChangePassword'\n        required: false\n      responses:\n        200:\n          description: password changed\n          content: {}\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: User not found\n          content: {}\n  /myProfile:\n    get:\n      summary: Get the users profile\n      parameters:\n        - name: Authorization\n          in: header\n          description: basic authorization\n          schema:\n            type: string\n          required: false\n        - name: Upload-Token\n          in: header\n          description: DEPRECATED, use basic authorization! Upload Token\n          required: false\n          schema:\n            type: string\n        - name: Email\n          in: header\n          description: DEPRECATED, use basic authorization! Email or name of the user\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Profile'\n        401:\n          description: authorization failed\n          content: {}\n        403:\n          description: forbidden\n          content: {}\n    post:\n      summary: Update the users profile. In case the email has been changed, only\n        the email is saved and a new password / Upload-Token is send.\n      parameters:\n        - name: Authorization\n          in: header\n          description: basic authorization\n          required: false\n          schema:\n            type: string\n        - name: Upload-Token\n          in: header\n          description: DEPRECATED, use basic authorization! Upload Token\n          required: false\n          schema:\n            type: string\n        - name: Email\n          in: header\n          description: DEPRECATED, use basic authorization! Email or name of the user\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: Userprofile\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateProfile'\n        required: true\n      responses:\n        200:\n          description: ok\n          content: {}\n        400:\n          description: Bad Request\n          content:\n            text/plain:\n              schema:\n                type: string\n        401:\n          description: authorization failed\n          content: {}\n        403:\n          description: forbidden\n          content: {}\n        409:\n          description: conflict with existing name or email\n          content:\n            text/plain:\n              schema:\n                type: string\n      x-codegen-request-body-name: profile\n  /fotos/{country}/{filename}:\n    get:\n      summary: downloads the given photo\n      parameters:\n        - name: country\n          in: path\n          description: country code\n          required: true\n          schema:\n            type: string\n        - name: filename\n          in: path\n          description: filename of the photo\n          required: true\n          schema:\n            type: string\n        - name: width\n          in: query\n          description: scale the image to the given width\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: ok\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n        404:\n          description: file not found\n          content: {}\n  /photos/{country}/{filename}:\n    get:\n      summary: downloads the given photo\n      parameters:\n        - name: country\n          in: path\n          description: country code\n          required: true\n          schema:\n            type: string\n        - name: filename\n          in: path\n          description: filename of the photo\n          required: true\n          schema:\n            type: string\n        - name: width\n          in: query\n          description: scale the image to the given width\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: ok\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n        404:\n          description: file not found\n          content: {}\n  /inbox/{filename}:\n    get:\n      summary: downloads the given photo from the inbox\n      parameters:\n        - name: filename\n          in: path\n          description: filename of the photo\n          required: true\n          schema:\n            type: string\n        - name: width\n          in: query\n          description: scale the image to the given width\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: ok\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n        404:\n          description: file not found\n          content: {}\n  /inbox/processed/{filename}:\n    get:\n      summary: downloads the given photo from the processed inbox\n      parameters:\n        - name: filename\n          in: path\n          description: filename of the photo\n          required: true\n          schema:\n            type: string\n        - name: width\n          in: query\n          description: scale the image to the given width\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: ok\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n        404:\n          description: file not found\n          content: {}\ncomponents:\n  schemas:\n    Station:\n      type: object\n      properties:\n        idStr:\n          type: string\n          description: Unique ID of the station per country\n        id:\n          type: integer\n          description: DEPRECATED! Unique (numeric) ID of the station per country\n          format: int64\n        country:\n          type: string\n          description: Two character country code\n        title:\n          type: string\n          description: Name of the station\n        photographer:\n          type: string\n          description: Nickname of the photographer\n        photographerUrl:\n          type: string\n          description: Link to the photographer\n        photoUrl:\n          type: string\n          description: URL of the photo\n        license:\n          type: string\n          description: License of the photo, clients need to link to an online version\n            of the license text\n        licenseUrl:\n          type: string\n          description: The URL of the license text. Clients should use this to link\n            to the online version of the license text\n        lat:\n          type: number\n          description: Latitude of the station\n          format: double\n        lon:\n          type: number\n          description: Longitute of the station\n          format: double\n        createdAt:\n          type: integer\n          description: Timestamp when the photo was created in the railway-stations\n            database (Milliseconds since 1.1.1970)\n          format: int64\n        DS100:\n          type: string\n          description: A short code of the station, depending on the country\n        active:\n          type: boolean\n        outdated:\n          type: boolean\n    Photographers:\n      type: object\n      description: JSON Object with photographers nickname as parameter and number\n        of photos as their value\n    Statistic:\n      type: object\n      properties:\n        total:\n          type: integer\n          format: int64\n        withPhoto:\n          type: integer\n          format: int64\n        withoutPhoto:\n          type: integer\n          format: int64\n        photographers:\n          type: integer\n          format: int64\n        countryCode:\n          type: string\n          nullable: true\n      description: Statistic of number of stations with and without photos\n    Country:\n      type: object\n      properties:\n        code:\n          type: string\n          description: Two letter country code\n        name:\n          type: string\n          description: Name of the country\n        email:\n          type: string\n          description: Email Address to send photos to\n        twitterTags:\n          type: string\n          description: Twitter Tags when sharing the photo on Twitter\n        timetableUrlTemplate:\n          type: string\n          description: URL template for the timetable, contains {title}, {id} and\n            {DS100} placeholders which need to be replaced\n        overrideLicense:\n          type: string\n          description: if a country needs a special license\n        active:\n          type: boolean\n          description: Is this an active country where we collect photos?\n        providerApps:\n          type: array\n          description: array with links to provider apps\n          items:\n            $ref: '#/components/schemas/ProviderApp'\n      description: Supported Country with its configuration\n    ProviderApp:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - android\n            - ios\n            - web\n        name:\n          type: string\n        url:\n          type: string\n      description: Provider App information\n    License:\n      type: string\n      enum:\n        - CC0\n        - CC0 1.0 Universell (CC0 1.0)\n        - CC4\n        - CC BY-SA 4.0\n    UpdateProfile:\n      type: object\n      properties:\n        nickname:\n          type: string\n        email:\n          type: string\n          format: email\n        license:\n          $ref: '#/components/schemas/License'\n        photoOwner:\n          type: boolean\n        link:\n          type: string\n        anonymous:\n          type: boolean\n        sendNotifications:\n          type: boolean\n      description: User profile information\n      required:\n        - nickname\n        - email\n        - license\n        - photoOwner\n    RegisterProfile:\n      type: object\n      properties:\n        nickname:\n          type: string\n        email:\n          type: string\n          format: email\n        license:\n          $ref: '#/components/schemas/License'\n        photoOwner:\n          type: boolean\n        link:\n          type: string\n        anonymous:\n          type: boolean\n        sendNotifications:\n          type: boolean\n        newPassword:\n          type: string\n      description: User profile information\n      required:\n        - nickname\n        - email\n        - license\n        - photoOwner\n    Profile:\n      type: object\n      properties:\n        nickname:\n          type: string\n        email:\n          type: string\n          format: email\n        license:\n          $ref: '#/components/schemas/License'\n        photoOwner:\n          type: boolean\n        link:\n          type: string\n        anonymous:\n          type: boolean\n        admin:\n          type: boolean\n        newPassword:\n          type: string\n        emailVerified:\n          type: boolean\n        sendNotifications:\n          type: boolean\n      description: User profile information\n      required:\n        - nickname\n        - license\n        - photoOwner\n    InboxResponse:\n      type: object\n      properties:\n        state:\n          type: string\n          enum:\n            - REVIEW\n            - LAT_LON_OUT_OF_RANGE\n            - NOT_ENOUGH_DATA\n            - UNSUPPORTED_CONTENT_TYPE\n            - PHOTO_TOO_LARGE\n            - CONFLICT\n            - UNAUTHORIZED\n            - ERROR\n        message:\n          type: string\n        id:\n          type: integer\n          format: int64\n        filename:\n          type: string\n          description: filename in inbox\n        inboxUrl:\n          type: string\n          description: url of the photo in the inbox\n        crc32:\n          description: CRC32 checksum of the uploaded photo\n          type: integer\n          format: int64\n      description: Response status of photo uploads and problem reports\n    InboxStateQueryRequest:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n      required:\n        - id\n    InboxStateQueryResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        countryCode:\n          type: string\n        stationId:\n          type: string\n        lat:\n          type: number\n          format: double\n        lon:\n          type: number\n          format: double\n        rejectedReason:\n          type: string\n        filename:\n          type: string\n          description: filename in inbox\n        inboxUrl:\n          type: string\n          description: url of the photo in the inbox\n        crc32:\n          description: CRC32 checksum of the uploaded photo\n          type: integer\n          format: int64\n        state:\n          type: string\n          enum:\n            - UNKNOWN\n            - REVIEW\n            - CONFLICT\n            - ACCEPTED\n            - REJECTED\n      description: Inbox state query\n      required:\n        - id\n        - state\n    PublicInboxEntry:\n      type: object\n      properties:\n        countryCode:\n          type: string\n        stationId:\n          type: string\n        title:\n          type: string\n        lat:\n          type: number\n          format: double\n        lon:\n          type: number\n          format: double\n      description: Represents an uploaded photo under review\n    InboxEntry:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        countryCode:\n          type: string\n        stationId:\n          type: string\n        title:\n          type: string\n        lat:\n          type: number\n          format: double\n        lon:\n          type: number\n          format: double\n        photographerNickname:\n          type: string\n        photographerEmail:\n          type: string\n        comment:\n          type: string\n        createdAt:\n          type: integer\n          format: int64\n        done:\n          type: boolean\n          description: true if this photo was already imported or rejected\n        filename:\n          type: string\n          description: name of the file in inbox\n        inboxUrl:\n          type: string\n          description: url of the photo in the inbox\n        hasPhoto:\n          type: boolean\n          description: this station has already a photo (conflict)\n        hasConflict:\n          type: boolean\n          description: conflict with another upload or existing photo\n        problemReportType:\n          type: string\n          enum:\n            - WRONG_LOCATION\n            - STATION_INACTIVE\n            - STATION_ACTIVE\n            - STATION_NONEXISTENT\n            - WRONG_NAME\n            - WRONG_PHOTO\n            - PHOTO_OUTDATED\n            - OTHER\n        isProcessed:\n          type: boolean\n          description: was this image process (e.g. pixelated)\n        active:\n          type: boolean\n          description: active flag provided by the user\n      description: Represents an uploaded photo with processing state\n    InboxCommand:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        countryCode:\n          type: string\n          description: country of a new station\n        stationId:\n          type: string\n          description: ID of a new station\n        rejectReason:\n          type: string\n          description: explanation of a rejection\n        DS100:\n          type: string\n          description: DS100 attribute of a new station\n        active:\n          type: boolean\n          description: active flag of a new station (default true)\n        ignoreConflict:\n          type: boolean\n          description: ignore a conflict\n        createStation:\n          type: boolean\n          description: create the station if it doesn't exist\n        command:\n          type: string\n          enum:\n            - IMPORT\n            - ACTIVATE_STATION\n            - DEACTIVATE_STATION\n            - DELETE_STATION\n            - DELETE_PHOTO\n            - MARK_SOLVED\n            - REJECT\n            - CHANGE_NAME\n            - UPDATE_LOCATION\n            - PHOTO_OUTDATED\n      description: command to import or reject an inbox entry\n    InboxCountResponse:\n      type: object\n      properties:\n        pendingInboxEntries:\n          type: integer\n          format: int64\n      description: counts the pending inbox entries\n    AdminInboxCommandResponse:\n      type: object\n      properties:\n        status:\n          type: integer\n          format: int32\n        message:\n          type: string\n      required:\n        - status\n        - message\n    NextZResponse:\n      type: object\n      properties:\n        nextZ:\n          type: string\n      required:\n        - nextZ\n    ProblemReport:\n      type: object\n      properties:\n        countryCode:\n          type: string\n        stationId:\n          type: string\n        comment:\n          type: string\n        type:\n          type: string\n          enum:\n            - WRONG_LOCATION\n            - STATION_ACTIVE\n            - STATION_INACTIVE\n            - STATION_NONEXISTENT\n            - WRONG_PHOTO\n            - PHOTO_OUTDATED\n            - OTHER\n            - WRONG_NAME\n        lat:\n          type: number\n          format: double\n        lon:\n          type: number\n          format: double\n      description: Represents a report of a problem with a station\n    ChangePassword:\n      type: object\n      properties:\n        newPassword:\n          type: string\n    GeneralErrorMessage:\n      type: object\n      properties:\n        timestamp:\n          type: integer\n          format: int64\n        status:\n          type: integer\n          format: int32\n        error:\n          type: string\n        message:\n          type: string\n        path:\n          type: string\n",
			"canonicalURL": "/github.com/RailwayStations/RSAPI@98687c43e3f5c7285a9ab1a345ab7f4b3053983e/-/blob/src/main/resources/static/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/RailwayStations/RSAPI/blob/98687c43e3f5c7285a9ab1a345ab7f4b3053983e/src/main/resources/static/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/myProfile\": post: responses: 400: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}