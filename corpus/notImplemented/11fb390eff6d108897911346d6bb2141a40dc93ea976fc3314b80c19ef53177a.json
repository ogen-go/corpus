{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenAPITools/openapi-generator"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "samples/server/petstore/rust-server/output/rust-server-test/api/openapi.yaml",
			"byteSize": 4782,
			"content": "openapi: 3.0.1\ninfo:\n  description: This spec is for testing rust-server-specific things\n  title: rust-server-test\n  version: 2.3.4\nservers:\n- url: /\npaths:\n  /dummy:\n    get:\n      operationId: dummyGet\n      responses:\n        \"200\":\n          content: {}\n          description: Success\n      summary: A dummy endpoint to make the spec valid.\n    put:\n      operationId: dummyPut\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/dummyPut_request'\n        required: true\n      responses:\n        \"200\":\n          content: {}\n          description: Success\n      x-codegen-request-body-name: nested_response\n  /html:\n    post:\n      operationId: htmlPost\n      requestBody:\n        content:\n          text/html:\n            schema:\n              type: string\n        required: true\n      responses:\n        \"200\":\n          content:\n            text/html:\n              schema:\n                type: string\n          description: Success\n      summary: Test HTML handling\n      x-codegen-request-body-name: body\n  /file_response:\n    get:\n      operationId: file_responseGet\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                format: binary\n                type: string\n          description: Success\n      summary: Get a file\n  /raw_json:\n    get:\n      operationId: raw_jsonGet\n      responses:\n        \"200\":\n          content:\n            '*/*':\n              schema:\n                type: object\n          description: Success\n      summary: Get an arbitrary JSON blob.\n  /solo-object:\n    post:\n      operationId: solo_objectPost\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        required: true\n      responses:\n        \"204\":\n          content: {}\n          description: OK\n      summary: Send an arbitrary JSON blob\n      x-codegen-request-body-name: value\n  /post-yaml:\n    post:\n      description: Test sending an arbitrary unsupported format - e.g. YAML\n      operationId: post_yaml\n      requestBody:\n        content:\n          application/yaml:\n            schema:\n              type: string\n        description: The YAML body to test\n        required: true\n      responses:\n        \"204\":\n          content: {}\n          description: OK\n      x-codegen-request-body-name: value\n  /get-structured-yaml:\n    get:\n      description: Test returning arbitrary structured YAML\n      operationId: getStructuredYaml\n      responses:\n        \"200\":\n          content:\n            application/yaml:\n              schema:\n                $ref: '#/components/schemas/get_yaml_response'\n          description: OK\n  /allOf:\n    get:\n      description: Test getting an object which uses allOf\n      operationId: AllOf_Get\n      responses:\n        \"200\":\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/allOfObject'\n          description: OK\ncomponents:\n  requestBodies:\n    nested_response:\n      content:\n        '*/*':\n          schema:\n            properties:\n              id:\n                type: string\n              password:\n                type: string\n            required:\n            - id\n            type: object\n      required: true\n  schemas:\n    additionalPropertiesObject:\n      additionalProperties:\n        type: string\n      description: An additionalPropertiesObject\n      example: foo\n      type: object\n    allOfObject:\n      allOf:\n      - $ref: '#/components/schemas/baseAllOf'\n      example:\n        sampleProperty: sampleProperty\n      properties:\n        sampleProperty:\n          type: string\n    baseAllOf:\n      properties:\n        sampleBasePropery:\n          type: string\n      type: object\n    aNullableContainer:\n      properties:\n        NullableThing:\n          nullable: true\n          type: string\n        RequiredNullableThing:\n          nullable: true\n          type: string\n      required:\n      - RequiredNullableThing\n      type: object\n    ObjectOfObjects:\n      description: An object of objects\n      properties:\n        inner:\n          $ref: '#/components/schemas/ObjectOfObjects_inner'\n      type: object\n    get_yaml_response:\n      description: structured response\n      properties:\n        value:\n          description: Inner string\n          type: string\n      type: object\n    dummyPut_request:\n      properties:\n        id:\n          type: string\n        password:\n          type: string\n      required:\n      - id\n      type: object\n    ObjectOfObjects_inner:\n      properties:\n        required_thing:\n          type: string\n        optional_thing:\n          type: integer\n      required:\n      - required_thing\n      type: object\nx-original-swagger-version: \"2.0\"\n\n",
			"canonicalURL": "/github.com/OpenAPITools/openapi-generator@3a2bbbb8501f7238dba0dc124234e9e0459cdd9e/-/blob/samples/server/petstore/rust-server/output/rust-server-test/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenAPITools/openapi-generator/blob/3a2bbbb8501f7238dba0dc124234e9e0459cdd9e/samples/server/petstore/rust-server/output/rust-server-test/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/html\": post: requestBody: contents: unsupported content types: [text/html]",
	"NotImplemented": [
		"unsupported content types"
	]
}