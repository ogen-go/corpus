{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ga4gh/gh-openapi-docs"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "test/test-spec/combined/openapi.yaml",
			"byteSize": 8596,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Example.com\n  termsOfService: 'https://example.com/terms/'\n  contact:\n    email: contact@example.com\n    url: 'http://example.com/contact'\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n  x-logo:\n    url: 'https://www.openapis.org/wp-content/uploads/sites/3/2018/02/OpenAPI_Logo_Pantone-1.png'\n  description: |\n    This is an **example** API to demonstrate features of OpenAPI specification\nexternalDocs:\n  description: Find out how to create Github repo for your OpenAPI spec.\n  url: 'https://github.com/Rebilly/generator-openapi-repo'\nservers:\n  - url: 'http://example.com/api/v1'\n  - url: 'https://example.com/api/v1'\ntags:\n  - name: Echo\n    description: Example echo operations\n  - name: User\n    description: Operations about user\n  - name: Introduction\n    description: \u003e\n      This specification is intended to to be a good starting point for\n      describing\n\n      your API in [OpenAPI/Swagger\n      format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md).\n\n\n      It also demonstrates features of\n      [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\n      tool and [ReDoc](https://github.com/Rebilly/ReDoc) documentation engine.\n      So beyond the standard OpenAPI syntax we use a few [vendor\n      extensions](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md).\n  - name: OpenAPI Specification\n    description: \u003e-\n      The goal of The OpenAPI Specification is to define a standard,\n      language-agnostic interface to REST APIs which allows both humans and\n      computers to discover and understand the capabilities of the service\n      without access to source code, documentation, or through network traffic\n      inspection. When properly defined via OpenAPI, a consumer can understand\n      and interact with the remote service with a minimal amount of\n      implementation logic. Similar to what interfaces have done for lower-level\n      programming, OpenAPI removes the guesswork in calling the service.\n  - name: Markdown Description\n    description: \u003e-\n      By using separate markdown documents and using `$ref` pointers to write\n      the `description` field for individual `tags` in the root specification\n      file, we can compose rich sections of text and arrange them in flexible\n      ways. For exmaple...\n\n\n      ```yaml\n\n      tags:\n        # 'Echo' and 'User' are the main paths in the spec\n        - name: Echo\n          description: Example echo operations\n        - name: User\n          description: Operations about user\n        # Introduction includes some backround that I'd like to include\n        # at the beginning of the docs\n        - name: Introduction\n          description:\n            $ref: ./tags/introduction.md\n        # This last section I'll include at the end in the appendix\n        - name: Markdown Descriptions\n          description:\n            $ref: ./tags/markdown_desc.md\n      # 'x-tagGroups' instructs redoc on how to arrange and order sections\n\n      x-tagGroups:\n        - name: Overview\n          tags:\n            - Introduction\n        - name: Operations\n          tags:\n            - Echo\n            - User\n        - name: Appendix\n          tags:\n            - Markdown Descriptions\n      ```\n\n\n      `markdown_desc.md` includes headers and content in standard syntax, Which\n      are inserted as markdown (and can be rendered as HTML) in the bundled\n      spec:\n\n\n      # Table Example\n\n\n      | Tables   |      Are      |  Cool |\n\n      |----------|:-------------:|------:|\n\n      | col 1 is |  left-aligned | $1600 |\n\n      | col 2 is |    centered   |   $12 |\n\n      | col 3 is | right-aligned |    $1 |\n\n\n      # Link Example\n\n\n      Learn more about working with markdown in the [GitHub\n      Guides](https://guides.github.com/features/mastering-markdown/).\nx-tagGroups:\n  - name: Overview\n    tags:\n      - Introduction\n  - name: Operations\n    tags:\n      - Echo\n      - User\n  - name: Appendix\n    tags:\n      - OpenAPI Specification\n      - Markdown Description\npaths:\n  '/users/{username}':\n    parameters:\n      - name: pretty_print\n        in: query\n        description: Pretty print response\n        schema:\n          type: boolean\n    get:\n      tags:\n        - User\n      summary: Get user by user name\n      description: |\n        Some description of the operation. \n        You can use `markdown` here.\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be fetched\n          required: true\n          schema:\n            type: string\n        - name: with_email\n          in: query\n          description: Filter users without email\n          schema:\n            type: boolean\n      security:\n        - main_auth:\n            - 'read:users'\n        - api_key: []\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              example:\n                username: user1\n                email: user@example.com\n        '403':\n          description: Forbidden\n        '404':\n          description: User not found\n    put:\n      tags:\n        - User\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be updated\n          required: true\n          schema:\n            type: string\n      security:\n        - main_auth:\n            - 'write:users'\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Updated user object\n        required: true\n  /echo:\n    post:\n      tags:\n        - Echo\n      summary: Echo test\n      description: Receive the exact message you've sent\n      operationId: echo\n      security:\n        - api_key: []\n        - basic_auth: []\n      responses:\n        '200':\n          description: OK\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              $ref: '#/components/headers/ExpiresAfter'\n          content:\n            application/json:\n              schema:\n                type: string\n              examples:\n                response:\n                  value: Hello world!\n            application/xml:\n              schema:\n                type: string\n            text/csv:\n              schema:\n                type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n              example: Hello world!\n          application/xml:\n            schema:\n              type: string\n              example: Hello world!\n        description: Echo payload\n        required: true\ncomponents:\n  headers:\n    ExpiresAfter:\n      description: date in UTC when token expires\n      schema:\n        type: string\n        format: date-time\n    Overview:\n      description: |\n        This is a file!\n  schemas:\n    Email:\n      description: User email address\n      type: string\n      format: test\n      example: john.smith@example.com\n    User:\n      type: object\n      properties:\n        username:\n          description: User supplied username\n          type: string\n          minLength: 4\n          example: John78\n        firstName:\n          description: User first name\n          type: string\n          minLength: 1\n          example: John\n        lastName:\n          description: User last name\n          type: string\n          minLength: 1\n          example: Smith\n        email:\n          $ref: '#/components/schemas/Email'\n  securitySchemes:\n    main_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: 'http://example.com/api/oauth/dialog'\n          scopes:\n            'read:users': read users info\n            'write:users': modify or remove users\n    api_key:\n      type: apiKey\n      in: header\n      name: api_key\n    basic_auth:\n      type: http\n      scheme: basic\n",
			"canonicalURL": "/github.com/ga4gh/gh-openapi-docs@9b5e08f5d9850ae244a8322beb328e764c6322f5/-/blob/test/test-spec/combined/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ga4gh/gh-openapi-docs/blob/9b5e08f5d9850ae244a8322beb328e764c6322f5/test/test-spec/combined/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/users/{username}\": get: security: security \"main_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}