{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/UWPCommunity/uwpcommunity-backend"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "src/api.yaml",
			"byteSize": 11447,
			"content": "openapi: 3.0.0\ninfo:\n  title: UWP Community API\n  description: API for the UWP community discord API.\n  version: 1.0.0\n\nservers:\n  - url: https://uwpcommunity-site-backend.herokuapp.com\n    description: Main (production) server\n  - url: http://localhost:5000\n    description: Local server\n\npaths:\n  /:\n    get:\n      description: Root path, redirects to homepage on github pages\n      responses:\n        302:\n          description: Redirect\n\n  /launch/participants:\n    get:\n      description: Returns the participant projects for a launch years\n      parameters:\n        - name: year\n          description: Year to get projects for.\n          in: query\n          required: true\n          schema:\n            type : integer\n            format: int64\n      responses:\n        422:\n          $ref: '#/components/responses/MalformedRequest'\n\n        200:\n          description: List of Projects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Project' \n                  \n  /projects/:\n    get:\n      description: Gets a list of projects, either for a user or across all users\n      parameters: \n        - name: accessToken\n          description: Access token to authenticate with Discord\n          in: query\n          schema:\n            type: string\n      responses:\n        500:\n          $ref: '#/components/responses/ServerError'\n        200:\n          description: List of Projects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/IProject'\n\n    post:\n      description: Creates a new project\n      parameters: \n        - name: accessToken\n          description: Access token to authenticate with Discord\n          in: query\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IProject'\n      responses:\n        200:\n          $ref: '#/components/responses/Success'\n        422:\n          $ref: '#/components/responses/MalformedRequest'\n        401:\n          $ref: '#/components/responses/InvalidToken'\n        500:\n          $ref: '#/components/responses/ServerError'\n\n    put:\n      description: Edits an existing project\n      parameters: \n        - name: accessToken\n          description: Access token to authenticate with Discord\n          in: query\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IProject'\n      responses:\n        200:\n          $ref: '#/components/responses/Success'\n        422:\n          $ref: '#/components/responses/MalformedRequest'\n        401:\n          $ref: '#/components/responses/InvalidToken'\n        500:\n          $ref: '#/components/responses/ServerError'\n    \n    delete:\n      description: Removes a project by title\n      parameters:\n        - name: accessToken\n          description: Access token to authenticate with the Discord api\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: appName\n          description: The app name to remove from the database\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          $ref: '#/components/responses/Success'\n        422:\n          $ref: '#/components/responses/MalformedRequest'\n        401:\n          $ref: '#/components/responses/InvalidToken'\n        500:\n          $ref: '#/components/responses/ServerError'\n\n  /signin/redirect/:\n    get:\n      description: Redirects the user to the community homepage on successful request\n      parameters:\n        - name: code\n          description: Discord authorization code.\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        422:\n          $ref: '#/components/responses/MalformedRequest'\n\n        302:\n          description: Redirects to homepage\n    \n  /signin/refresh/:\n    get:\n      description: Refreshes the discord authorization given a refresh token from the last authorization\n      parameters:\n        - name: refreshToken\n          description: Discord refresh token.\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        422:\n          $ref: '#/components/responses/MalformedRequest'\n        200:\n          description: Discord API response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiscordResponse'\n\n  /user/:\n    get:\n      description: Gets the currently logged in user\n      parameters: \n        - name: accessToken\n          description: Access token to authenticate with Discord\n          in: query\n          schema:\n            type: string\n      responses:\n        404:\n          $ref: '#/components/responses/UserNotFound'\n        422:\n          $ref: '#/components/responses/MalformedRequest'\n        500:\n          $ref: '#/components/responses/ServerError'\n        200:\n          description: Current user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n    post:\n      description: Creates a new user\n      parameters: \n        - name: accessToken\n          description: Access token to authenticate with Discord\n          in: query\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        200:\n          $ref: '#/components/responses/Success'\n        422:\n          $ref: '#/components/responses/MalformedRequest'\n        401:\n          $ref: '#/components/responses/InvalidToken'\n        500:\n          $ref: '#/components/responses/ServerError'\n\n    put:\n      description: Edits an existing user\n      parameters: \n        - name: accessToken\n          description: Access token to authenticate with Discord\n          in: query\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IProject'\n      responses:\n        200:\n          $ref: '#/components/responses/Success'\n        401:\n          $ref: '#/components/responses/InvalidToken'\n        404:\n          $ref: '#/components/responses/UserNotFound'\n        422:\n          $ref: '#/components/responses/MalformedRequest'\n        500:\n          $ref: '#/components/responses/ServerError'\n\n    delete:\n      description: Removes a user given their access token. This also removes *ALL* of their projects\n      parameters:\n        - name: accessToken\n          description: Access token of the user to delete\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          $ref: '#/components/responses/Success'\n        401:\n          $ref: '#/components/responses/InvalidToken'\n        404:\n          $ref: '#/components/responses/UserNotFound'\n        422:\n          $ref: '#/components/responses/MalformedRequest'\n        500:\n          $ref: '#/components/responses/ServerError'\n\ncomponents:\n  responses:\n    MalformedRequest:\n      description: Malformed request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    \n    InvalidToken:\n      description: Invalid Discord Token\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: Invalid accessToken\n            \n    Success:\n      description: Success Message\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: Success    \n            \n    ServerError:\n      description: Internal server error\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: \"Internal server error: error message\"\n    \n    UserNotFound:\n      description: 404 Error as the user didn't exist\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    \n  schemas:\n    Error:\n      required: \n        - \"error\"\n        - \"reason\"\n      properties: \n        error: \n          type: \"string\"\n          example: \"Malformed request\"\n        reason: \n          type: \"string\"\n          example: \"Query string not provided or malformed\"\n\n    Project:\n      required: \n        - \"id\"\n        - \"appName\"\n        - \"description\"\n        - \"isPrivate\"\n        - \"createdAt\"\n        - \"updatedAt\"\n        - \"downloadLink\"\n        - \"githubLink\"\n        - \"externalLink\"\n        - \"launchId\"\n        - \"userId\"\n        - \"launch\"\n        - \"user\"\n      properties: \n        id: \n          type: \"number\"\n        appName: \n          type: \"string\"\n        description: \n          type: \"string\"\n        isPrivate: \n          type: \"boolean\"\n        createdAt: \n          type: \"string\"\n        updatedAt: \n          type: \"string\"\n        downloadLink: \n          type: \"string\"\n        githubLink: \n          type: \"string\"\n        externalLink: \n          type: \"string\"\n        launchId: \n          type: \"number\"\n        userId: \n          type: \"number\"\n        launch: \n          required: \n            - \"id\"\n            - \"year\"\n            - \"createdAt\"\n            - \"updatedAt\"\n          properties: \n            id: \n              type: \"number\"\n            year: \n              type: \"number\"\n            createdAt: \n              type: \"string\"\n            updatedAt: \n              type: \"string\"\n          type: \"object\"\n        user: \n          required: \n            - \"id\"\n            - \"name\"\n            - \"email\"\n            - \"discordId\"\n            - \"createdAt\"\n            - \"updatedAt\"\n          properties: \n            id: \n              type: \"number\"\n            name: \n              type: \"string\"\n            email: \n              type: \"string\"\n            discordId: \n              type: \"string\"\n            createdAt: \n              type: \"string\"\n            updatedAt: \n              type: \"string\"\n          type: \"object\"\n\n    IProject:\n      required: \n        - \"appName\"\n        - \"description\"\n        - \"isPrivate\"\n      properties:\n        appName: \n          type: \"string\"\n        description: \n          type: \"string\"\n        isPrivate: \n          type: \"boolean\"\n        downloadLink: \n          type: \"string\"\n        githubLink: \n          type: \"string\"\n        externalLink: \n          type: \"string\"\n        launchId: \n          type: \"number\"\n\n    DiscordResponse:\n      properties:\n        access_token:\n          type: \"string\"\n        token_type:\n          type: \"string\"\n        expires_in:\n          type: \"number\"\n        refresh_token:\n          type: \"string\"\n        scope:\n          type: \"string\"\n\n    User:\n      required: \n        - \"name\"\n      properties: \n        id: \n          type: \"number\"\n        name: \n          type: \"string\"\n        email: \n          type: \"string\"\n        discordId: \n          type: \"string\"\n        createdAt: \n          type: \"string\"\n        updatedAt: \n          type: \"string\"\n",
			"canonicalURL": "/github.com/UWPCommunity/uwpcommunity-backend@e1480f96bca663cdfbc0a3df4a25458ff69fc021/-/blob/src/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/UWPCommunity/uwpcommunity-backend/blob/e1480f96bca663cdfbc0a3df4a25458ff69fc021/src/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/user/\": get: responses: 500: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}