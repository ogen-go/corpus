{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wso2/docs-is"
		},
		"file": {
			"name": "functionality.yaml",
			"size": 0,
			"path": "en/docs/apis/restapis/functionality.yaml",
			"byteSize": 9620,
			"content": "openapi: 3.0.0\ninfo:\n  description: This is the RESTful API for handling user functionality manangement in WSO2 Identity Server.\n  version: \"1.0.0\"\n  title: WSO2 Identity Server - User Functionality Management API\n  contact:\n    name: \"WSO2 Identity Server\"\n    url: \"https://wso2.com/identity-and-access-management\"\n    email: \"architecture@wso2.org\"\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n\ntags:\n  - name: User Functionality Management REST API\n    description: This REST API handles user functionality management. A functionality can be locked or unlocked for particular users via this API. \n\nsecurity:\n  - OAuth2: []\n  - BasicAuth: []\n\npaths:\n  /me/user-functionality/{function-id}:\n    get:\n      tags:\n        - user functionality management\n      summary: |\n        Get the lock status of a functionality for authenticated user\n      description: |\n        Get the status of a functionality for the authenticated user.\n\n        \u003cb\u003ePermission required:\u003c/b\u003e \u003cbr/\u003e\n          - none\n\n        \u003cb\u003eScope required:\u003c/b\u003e \u003cbr/\u003e\n          - internal_login\n\n      operationId: getLockStatusOfLoggedInUser\n      parameters:\n        - name: function-id\n          in: path\n          description: FunctionalityIdentifier.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LockStatusResponse'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - user functionality management\n      summary: Lock or Unlock a function for authenticated user\n      operationId: changeStatusOfLoggedInUser\n      description: |\n        This API is used to lock or unlock a function for the authenticated user.\n\n        \u003cb\u003ePermission required:\u003c/b\u003e \u003cbr/\u003e\n          - none\n\n        \u003cb\u003eScope required:\u003c/b\u003e \u003cbr/\u003e\n          - internal_login\n\n      parameters:\n        - name: function-id\n          in: path\n          description: FunctionalityIdentifier.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserStatusChangeRequest'\n            examples:\n              Lock:\n                value:\n                  action: LOCK\n              UnLock:\n                value:\n                  action: UNLOCK\n      responses:\n        200:\n          description: The function is successfully locked.\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  '/{user-id}/user-functionality/{function-id}':\n    get:\n      tags:\n        - user functionality management\n      summary: |\n        Get the lock status of a functionality for a user\n      description: |\n        Get the status of a functionality for a particular user.\n\n        \u003cb\u003ePermission required:\u003c/b\u003e \u003cbr/\u003e\n          - /permission/admin/manage/identity/identitymgt/view\n\n        \u003cb\u003eScope required:\u003c/b\u003e \u003cbr/\u003e\n          - internal_identity_mgt_view\n\n      operationId: getLockStatus\n      parameters:\n        - name: function-id\n          in: path\n          description: FunctionalityIdentifier.\n          required: true\n          schema:\n            type: string\n        - name: user-id\n          in: path\n          description: UserID.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LockStatusResponse'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - user functionality management\n      summary: Lock or Unlock a function for a user\n      operationId: changeStatus\n      description: |\n        This API is used to lock or unlock a function for a particular user.\n\n        \u003cb\u003ePermission required:\u003c/b\u003e \u003cbr/\u003e\n          - /permission/admin/manage/identity/identitymgt/update\n\n        \u003cb\u003eScope required:\u003c/b\u003e \u003cbr/\u003e\n          - internal_identity_mgt_update\n\n      parameters:\n        - name: function-id\n          in: path\n          description: FunctionalityIdentifier.\n          required: true\n          schema:\n            type: string\n        - name: user-id\n          in: path\n          description: UserID.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StatusChangeRequest'\n            examples:\n              Lock:\n                value:\n                  action: LOCK\n                  timeToLock: 1594987178\n                  functionalityLockReason: SecurityQuestionBasedBased\n                  functionalityLockReasonCode: MaxFailedAttempts\n              UnLock:\n                value:\n                  action: UNLOCK\n      responses:\n        200:\n          description: The function is successfully locked.\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    StatusChangeRequest:\n      type: object\n      required:\n        - action\n      properties:\n        action:\n          type: string\n          enum: [ LOCK , UNLOCK]\n          example: lock\n          description: LOCK/UNLOCK\n        timeToLock:\n          type: string\n          example: 1594987178\n          description: Time in millisecond\n        functionalityLockReason:\n          type: string\n          example: SecurityQuestionBasedBased\n        functionalityLockReasonCode:\n          type: string\n    LockStatusResponse:\n      type: object\n      properties:\n        lockStatus:\n          type: boolean\n          example: true\n          description: returns true if it is locked\n        unlockTime:\n          type: string\n          example: SecurityQuestionBasedBased\n        lockReasonCode:\n          type: string\n        lockReason:\n          type: string\n          example: SecurityQuestionBasedBased\n    UserStatusChangeRequest:\n      type: object\n      required:\n        - action\n      properties:\n        action:\n          type: string\n          enum: [ LOCK , UNLOCK]\n          example: lock\n          description: LOCK/UNLOCK\n        timeToLock:\n          type: string\n          example: 1594987178\n          description: Time in millisecond\n\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: string\n          example: \"AAA-00000\"\n        message:\n          type: string\n          example: \"Some Error Message\"\n        description:\n          type: string\n          example: \"Some Error Description\"\n        traceId:\n          type: string\n          example: \"e0fbcfeb-3617-43c4-8dd0-7b7d38e13047\"\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n    OAuth2:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: 'https://localhost:9443/oauth2/authorize'\n          tokenUrl: 'http://localhost:9763/oauth2/token'\n          scopes: {}\n\nservers:\n  - url: 'https://localhost:9443/t/{tenant-domain}/api/users/v1'\n    variables:\n      tenant-domain:\n        default: carbon.super\n        description: Tenant domain the API is invoked",
			"canonicalURL": "/github.com/wso2/docs-is@f2d50568ff23afffacf786beeec7725e7e41fd60/-/blob/en/docs/apis/restapis/functionality.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/wso2/docs-is/blob/f2d50568ff23afffacf786beeec7725e7e41fd60/en/docs/apis/restapis/functionality.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/me/user-functionality/{function-id}\": get: security: security \"OAuth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}