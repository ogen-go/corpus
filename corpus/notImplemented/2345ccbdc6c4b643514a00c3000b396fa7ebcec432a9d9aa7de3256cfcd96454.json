{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wso2/product-mi-tooling"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "monitoring-dashboard/components/org.wso2.ei.dashboard.core/src/main/resources/swagger.yaml",
			"byteSize": 48617,
			"content": "################################################################################\n#   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved\n#\n#   Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n################################################################################\n\nopenapi: 3.0.0\ninfo:\n  description: This is to retrieve details from the rest api to the UI.\n  version: \"1.0.0\"\n  title: Cluster Aware MI Dashboard\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: \"login\"\n    description: \"Login Management\"\n  - name: \"logout\"\n    description: \"Logout Management\"\n  - name: \"heartbeat\"\n    description: \"Heartbeat Management\"\n  - name: \"configs\"\n    description: \"Access dashboard configs\"\n  - name: \"groups\"\n    description: \"Access group list\"\n  - name: \"nodes\"\n    description: \"Access nodes details\"\n  - name: \"proxyServices\"\n    description: \"Access proxy services details\"\n  - name: \"endpoints\"\n    description: \"Access endpoints details\"\n  - name: \"inboundEndpoints\"\n    description: \"Access inbound endpoints details\"\n  - name: \"messageProcessors\"\n    description: \"Access message processors details\"\n  - name: \"messageStores\"\n    description: \"Access message stores details\"\n  - name: \"apis\"\n    description: \"Access APIs details\"\n  - name: \"templates\"\n    description: \"Access templates details\"\n  - name: \"sequences\"\n    description: \"Access sequences details\"\n  - name: \"tasks\"\n    description: \"Access tasks details\"\n  - name: \"localEntries\"\n    description: \"Access local entries details\"\n  - name: \"data-services\"\n    description: \"Access data services details\"\n  - name: \"datasources\"\n    description: \"Access datasources details\"\n  - name: \"connectors\"\n    description: \"Access connectors details\"\n  - name: \"carbonApplications\"\n    description: \"Access carbon applications details\"\n  - name: \"logFiles\"\n    description: \"Access log files details\"\n  - name: \"logConfigs\"\n    description: \"Access log configs details\"\n  - name: \"Users\"\n    description: \"Access users details\"\n  - name: \"Roles\"\n    description: \"Access roles details\"\n  - name: \"configuration\"\n    description: \"Access configurations\"\n\npaths:\n  /login:\n    post:\n      tags:\n        - \"login\"\n      summary: \"Receive logins to the dashboard\"\n      operationId: \"ReceiveLogin\"\n      requestBody:\n        $ref: '#/components/requestBodies/Login'\n      responses:\n        '200':\n          description: \"Login successful\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '401':\n          description: \"Unauthorized\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /logout:\n    get:\n      security:\n        - bearerAuth: []\n      tags:\n        - \"logout\"\n      summary: \"Receive logouts to the dashboard\"\n      operationId: \"ReceiveLogout\"\n      responses:\n        200:\n          description: \"Logout successful\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ack'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /heartbeat:\n    post:\n      tags:\n        - \"heartbeat\"\n      summary: \"Receive heartbeats from nodes\"\n      operationId: \"ReceiveNodeHeartbeat\"\n      requestBody:\n        $ref: '#/components/requestBodies/Heartbeat'\n      responses:\n        200:\n          description: \"Receive node heartbeats\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ack'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /configs/super-admin:\n    get:\n      tags:\n        - \"configs\"\n      summary: \"Get super admin username\"\n      operationId: \"getSuperAdmin\"\n      responses:\n        200:\n          description: \"The super admin details configured in dashboard configs\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuperAdminUser'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /groups:\n    get:\n      tags:\n        - \"groups\"\n      summary: \"Get set of groups\"\n      operationId: \"RetrieveGroups\"\n      responses:\n        200:\n          description: \"The list of groups registered to dashboard\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupList'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/nodes:\n    get:\n      tags:\n        - \"nodes\"\n      summary: \"Get set of nodes in the group\"\n      operationId: \"RetrieveNodesByGroupId\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"The list of nodes in group\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodeList'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/proxy-services:\n    get:\n      tags:\n        - \"proxyServices\"\n      summary: \"Get proxy services by node ids\"\n      operationId: \"getProxyServicesByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of proxy services deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      tags:\n        - \"proxyServices\"\n      summary: \"Update proxy service\"\n      operationId: \"updateProxyService\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/ArtifactUpdate'\n      responses:\n        200:\n          description: \"Proxy update status\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ack'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/endpoints:\n    get:\n      tags:\n        - \"endpoints\"\n      summary: \"Get endpoints by node ids\"\n      operationId: \"getEndpointsByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of endpoints deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      tags:\n        - \"endpoints\"\n      summary: \"Update endpoint\"\n      operationId: \"updateEndpoint\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/ArtifactUpdate'\n      responses:\n        200:\n          description: \"Endpoint update status\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ack'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/inbound-endpoints:\n    get:\n      tags:\n        - \"inboundEndpoints\"\n      summary: \"Get inbound endpoints by node ids\"\n      operationId: \"getInboundEpsByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of inbound endpoints deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      tags:\n        - \"inboundEndpoints\"\n      summary: \"Update inbound endpoint\"\n      operationId: \"updateInboundEp\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/ArtifactUpdate'\n      responses:\n        200:\n          description: \"Inbound endpoint update status\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ack'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/message-processors:\n    get:\n      tags:\n        - \"messageProcessors\"\n      summary: \"Get message processors by node ids\"\n      operationId: \"getMessageProcessorsByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of message processorss deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      tags:\n        - \"messageProcessors\"\n      summary: \"Update message processor\"\n      operationId: \"updateMessageProcessor\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/ArtifactUpdate'\n      responses:\n        200:\n          description: \"Message processor update status\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ack'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/message-stores:\n    get:\n      tags:\n        - \"messageStores\"\n      summary: \"Get message stores by node ids\"\n      operationId: \"getMessageStoresByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of message stores deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/apis:\n    get:\n      tags:\n        - \"apis\"\n      summary: \"Get APIs by node ids\"\n      operationId: \"getApisByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of APIs deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      tags:\n        - \"apis\"\n      summary: \"Update API\"\n      operationId: \"updateApi\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/ArtifactUpdate'\n      responses:\n        200:\n          description: \"API update status\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ack'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/templates:\n    get:\n      tags:\n        - \"templates\"\n      summary: \"Get templates by node ids\"\n      operationId: \"getTemplatesByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of templates deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/sequences:\n    get:\n      tags:\n        - \"sequences\"\n      summary: \"Get sequences by node ids\"\n      operationId: \"getSequencesByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of sequences deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      tags:\n        - \"sequences\"\n      summary: \"Update sequence\"\n      operationId: \"updateSequence\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/ArtifactUpdate'\n      responses:\n        200:\n          description: \"Sequence update status\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ack'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/tasks:\n    get:\n      tags:\n        - \"tasks\"\n      summary: \"Get tasks by node ids\"\n      operationId: \"getTasksByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of tasks deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/local-entries:\n    get:\n      tags:\n        - \"localEntries\"\n      summary: \"Get local entries by node ids\"\n      operationId: \"getLocalEntriesByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of local entries deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/nodes/{node-id}/local-entries/{local-entry}/value:\n    get:\n      tags:\n        - \"localEntries\"\n      summary: \"Get value of local entry\"\n      operationId: \"getLocalEntryValue\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"node-id\"\n          in: path\n          description: \"Node id\"\n          required: true\n          schema:\n            type: string\n        - name: \"local-entry\"\n          in: path\n          description: \"Local entry name\"\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"Value of the local entry\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LocalEntryValue'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/data-services:\n    get:\n      tags:\n        - \"data-services\"\n      summary: \"Get data-services by node ids\"\n      operationId: \"getDataServicesByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of data-services deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/datasources:\n    get:\n      tags:\n        - \"datasources\"\n      summary: \"Get datasources by node ids\"\n      operationId: \"getDatasourcesByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of datsources deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasourceList'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/connectors:\n    get:\n      tags:\n        - \"connectors\"\n      summary: \"Get connectors by node ids\"\n      operationId: \"getConnectorsByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of connectors deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/capps:\n    get:\n      tags:\n        - \"carbonApplications\"\n      summary: \"Get carbon applications by node ids\"\n      operationId: \"getCarbonApplicationsByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of carbon applications deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Artifacts'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/nodes/{node-id}/capps/{capp-name}/artifacts:\n    get:\n      tags:\n        - \"carbonApplications\"\n      summary: \"Get artifact list of carbon application by node id\"\n      operationId: \"getCarbonApplicationArtifactsByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"node-id\"\n          in: path\n          description: \"Node ID\"\n          required: true\n          schema:\n            type: string\n        - name: \"capp-name\"\n          in: path\n          description: \"Carbon application name\"\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"List of artifacts in carbon applications deployed in provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CAppArtifacts'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/logs:\n    get:\n      tags:\n        - \"logFiles\"\n      summary: \"Get log files by node ids\"\n      operationId: \"getLogFilesByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodes\"\n          in: query\n          description: \"ID/IDs of the nodes\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              default: all\n      responses:\n        200:\n          description: \"List of log files of provided nodes\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogList'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/nodes/{node-id}/logs/{file-name}:\n    get:\n      tags:\n        - \"logFiles\"\n      summary: \"Get log content\"\n      operationId: \"getLogContent\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"file-name\"\n          in: path\n          description: \"Log file name\"\n          required: true\n          schema:\n            type: string\n        - name: \"node-id\"\n          in: path\n          description: \"Node id of the file\"\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"Get log file content.\"\n          content:\n            text/plain:\n              schema:\n                type: string\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/log-configs/nodes/{node-id}:\n    get:\n      tags:\n        - \"logConfigs\"\n      summary: \"Get log configs by node id\"\n      operationId: \"getLogConfigsByNodeIds\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"node-id\"\n          in: path\n          description: \"NodeId\"\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"List of log configs in provided node id\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogConfigs'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      tags:\n        - \"logConfigs\"\n      summary: \"Update log level by nodeId\"\n      operationId: \"updateLogLevelByNodeId\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"node-id\"\n          in: path\n          description: \"NodeId\"\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateLogger'\n      responses:\n        200:\n          description: \"Logger update status\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessStatus'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/log-configs:\n    get:\n      tags:\n        - \"logConfigs\"\n      summary: \"Get log configs\"\n      operationId: \"getLogConfigs\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"List of log configs\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogConfigs'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - \"logConfigs\"\n      summary: \"Add logger\"\n      operationId: \"addLogger\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/AddLogger'\n      responses:\n        200:\n          description: \"Logger insert status\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessStatus'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      tags:\n        - \"logConfigs\"\n      summary: \"Update log level\"\n      operationId: \"updateLogLevel\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateLogger'\n      responses:\n        200:\n          description: \"Logger update status\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessStatus'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /groups/{group-id}/users:\n    get:\n      tags:\n        - \"Users\"\n      summary: \"Get users\"\n      operationId: \"getUsers\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID\"\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"List of users\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Users'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - \"Users\"\n      summary: \"Add user\"\n      operationId: \"addUser\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/AddUser'\n      responses:\n        200:\n          description: \"User insert status\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessStatus'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/users/{user-id}:\n    delete:\n      tags:\n        - \"Users\"\n      summary: \"Delete user\"\n      operationId: \"deleteUser\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID\"\n          required: true\n          schema:\n            type: string\n        - name: \"user-id\"\n          in: path\n          description: \"User ID\"\n          required: true\n          schema:\n            type: string\n        - name: \"domain\"\n          in: query\n          description: \"domain name\"\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"User deletion status\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessStatus'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/roles:\n    get:\n      tags:\n        - \"Roles\"\n      summary: \"Get roles\"\n      operationId: \"getRoles\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID\"\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"List of roles\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleList'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - \"Roles\"\n      summary: \"Add role\"\n      operationId: \"addRole\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/AddRole'\n      responses:\n        200:\n          description: \"Role insert status\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessStatus'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      tags:\n        - \"Roles\"\n      summary: \"Update role\"\n      operationId: \"updateRole\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID of the node\"\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/UpdateRole'\n      responses:\n        200:\n          description: \"Role update status\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessStatus'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /groups/{group-id}/roles/{role-name}:\n    delete:\n      tags:\n        - \"Roles\"\n      summary: \"Delete role\"\n      operationId: \"deleteRole\"\n      parameters:\n        - name: \"group-id\"\n          in: path\n          description: \"Group ID\"\n          required: true\n          schema:\n            type: string\n        - name: \"role-name\"\n          in: path\n          description: \"Role Name\"\n          required: true\n          schema:\n            type: string\n        - name: \"domain\"\n          in: query\n          description: \"domain name\"\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"Role deletion status\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessStatus'\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /configuration:\n    get:\n      tags:\n        - \"configuration\"\n      summary: \"Get configurations using management api\"\n      operationId: \"RetrieveConfiguration\"\n      parameters:\n        - name: \"groupId\"\n          in: query\n          description: \"Group id of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"nodeId\"\n          in: query\n          description: \"Node id of the node\"\n          required: true\n          schema:\n            type: string\n        - name: \"artifactType\"\n          in: query\n          description: \"Type of the artifact\"\n          required: true\n          schema:\n            type: string\n        - name: \"artifactName\"\n          in: query\n          description: \"Name of the artifact\"\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: \"The configuration of the relevant artifact\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Configuration'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\ncomponents:\n  schemas:\n    LoginRequest:\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n      example:\n        username: admin\n        password: admin\n    HeartbeatRequest:\n      type: object\n      properties:\n        product :\n          type: string\n        groupId:\n          type: string\n        nodeId:\n          type: string\n        interval:\n          type: integer\n        mgtApiUrl:\n          type: string\n        changeNotification:\n          type: object\n          properties:\n            deployedArtifacts:\n              type: array\n              items:\n                $ref: '#/components/schemas/UpdatedArtifact'\n            undeployedArtifacts:\n              type: array\n              items:\n                $ref: '#/components/schemas/UpdatedArtifact'\n            stateChangedArtifacts:\n              type: array\n              items:\n                $ref: '#/components/schemas/UpdatedArtifact'\n      example: {type: mi, groupId: mi_dev, nodeId: node_01, interval: 30, mgtApiUrl: https://10.100.0.64:9164/management/}\n\n    SuperAdminUser:\n      type: object\n      properties:\n        username:\n          type: string\n\n    UpdatedArtifact:\n      type: object\n      properties:\n        type:\n          type: string\n        name:\n          type: string\n        version:\n          type: string\n    Ack:\n      type: object\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n      example: {status: success, message: Successfully updated}\n\n    GroupList:\n      type: array\n      items:\n        type: string\n      example: [group_01, group_02]\n\n    NodeList:\n      type: array\n      items:\n        type: object\n        properties:\n          nodeId:\n            type: string\n            description: \"node id.\"\n          status:\n            type: string\n          details:\n            type: string\n            description: String contains role, upTime, serverName, serverVersion, miHome, javaHome, javaVersion, javaVendor, osName\n      example: [{ nodeId: node_01,\n                  details: {\\\"productVersion\\\":\\\"1.2.0\\\",\\\"osVersion\\\":\\\"10.15.7\\\",\\\"javaVersion\\\":\\\"1.8.0_191\\\"}\n                }]\n\n    ArtifactDetails:\n      type: object\n      properties:\n        nodeId:\n          type: string\n        details:\n          type: string\n\n    Artifacts:\n      type: array\n      items:\n        type: object\n        properties:\n          name:\n            type: string\n          nodes:\n            type: array\n            items:\n              $ref: '#/components/schemas/ArtifactDetails'\n    CAppArtifacts:\n      type: array\n      items:\n        type: object\n        properties:\n          name:\n            type: string\n          type:\n            type: string\n    ArtifactUpdateRequest:\n      type: object\n      properties:\n        artifactName:\n          type: string\n        nodeId:\n          type: string\n        type:\n          type: string\n        value:\n          type: boolean\n    DatasourceList:\n      type: array\n      items:\n        type: object\n        properties:\n          datasourceName:\n            type: string\n          nodes:\n            type: array\n            items:\n              type: object\n              properties:\n                nodeId:\n                  type: string\n                details:\n                  type: array\n                  description: Array contains type, status, description, datsource provider, database engine, driver, url, username etc\n                  items:\n                    $ref: '#/components/schemas/KeyValue'\n                configParameters:\n                  type: array\n                  description: Array contains default auto commit, default read only, test on borrow, test on return, test while idle etc.\n                  items:\n                    $ref: '#/components/schemas/KeyValue'\n    LogList:\n      type: array\n      items:\n        type: object\n        properties:\n          name:\n            type: string\n          nodes:\n            type: array\n            items:\n              $ref: '#/components/schemas/LogDetail'\n    LogDetail:\n      type: object\n      properties:\n        nodeId:\n          type: string\n        logSize:\n          type: string\n\n    LogConfigs:\n      type: array\n      items:\n        type: object\n        properties:\n          name:\n            type: string\n          componentName:\n            type: string\n          level:\n            type: string\n    LogConfigAddRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        loggerClass:\n          type: string\n        level:\n          type: string\n    LogConfigUpdateRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        level:\n          type: string\n    Users:\n      type: array\n      items:\n        type: object\n        properties:\n          userId:\n            type: string\n          details:\n            type: string\n    RoleList:\n      type: array\n      items:\n        type: object\n        properties:\n          roleName:\n            type: string\n          details:\n            type: string\n    AddUserRequest:\n      type: object\n      properties:\n        userId:\n          type: string\n        domain:\n          type: string\n        password:\n          type: string\n        isAdmin:\n          type: boolean\n    AddRoleRequest:\n      type: object\n      properties:\n        roleName:\n          type: string\n        domain:\n          type: string\n    UpdateRoleRequest:\n      type: object\n      properties:\n        userId:\n          type: string\n        removedRoles:\n          type: array\n          items:\n            type: string\n        addedRoles:\n          type: array\n          items:\n            type: string\n    KeyValue:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n    KeyValueAsArray:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: array\n          items:\n            type: string\n    Configuration:\n      type: object\n      properties:\n        configuration:\n          type: string\n    LocalEntryValue:\n      type: object\n      properties:\n        value:\n          type: string\n    SuccessStatus:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: \"Success status\"\n    Error:\n      type: object\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n      example:\n        {code: 500, message: Internal server error}\n    UnauthorizedError:\n      type: object\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n      example:\n        code: 401\n        message: Unauthorized\n    Token:\n      type: object\n      properties:\n        access_token:\n          type: string\n        expires_in:\n          type: integer\n      example:\n        access_token: 2YotnFZFEjr1zCsicMWpAA\n        expires_in: 3600\n  securitySchemes:\n    bearerAuth:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  requestBodies:\n    Login:\n      content:\n        application/x-www-form-urlencoded:\n          schema:\n            $ref: '#/components/schemas/LoginRequest'\n      description: \"The request body to login.\"\n    Heartbeat:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/HeartbeatRequest'\n      description: \"The request body to update proxy.\"\n\n    ArtifactUpdate:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ArtifactUpdateRequest'\n      description: \"The request body to update artifact.\"\n    AddLogger:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LogConfigAddRequest'\n      description: \"The request body to add logger.\"\n    UpdateLogger:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/LogConfigUpdateRequest'\n      description: \"The request body to add logger.\"\n    AddUser:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AddUserRequest'\n      description: \"The request body to add user.\"\n    AddRole:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AddRoleRequest'\n      description: \"The request body to add role.\"\n    UpdateRole:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UpdateRoleRequest'\n      description: \"The request body to update role.\"\nservers:\n  # Added by API Auto Mocking Plugin\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/a2294/MI_Dashboard/1.0.0\n",
			"canonicalURL": "/github.com/wso2/product-mi-tooling@cee6dbb8bd181f57c93703b8847e9df83f12cefd/-/blob/monitoring-dashboard/components/org.wso2.ei.dashboard.core/src/main/resources/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/wso2/product-mi-tooling/blob/cee6dbb8bd181f57c93703b8847e9df83f12cefd/monitoring-dashboard/components/org.wso2.ei.dashboard.core/src/main/resources/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/groups/{group-id}/nodes/{node-id}/logs/{file-name}\": get: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}