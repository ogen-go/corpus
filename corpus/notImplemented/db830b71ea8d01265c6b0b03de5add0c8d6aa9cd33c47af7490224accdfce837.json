{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openapi-library/OpenAPIValidators"
		},
		"file": {
			"name": "openapi3.yml",
			"size": 0,
			"path": "commonTestResources/exampleOpenApiFiles/valid/openapi3.yml",
			"byteSize": 6236,
			"content": "openapi: 3.0.0\ninfo:\n  title: Example OpenApi 3 spec\n  description: Has various paths with responses to use in testing\n  version: 0.1.0\npaths:\n  /responseBody/string:\n    get:\n      responses:\n        200:\n          description: Response body should be a string\n          content:\n            application/json:\n              schema:\n                type: string\n  /responseBody/boolean:\n    get:\n      responses:\n        200:\n          description: Response body should be a boolean\n          content:\n            application/json:\n              schema:\n                type: boolean\n  /responseBody/object/depthOver2:\n    get:\n      responses:\n        200:\n          description: Response body should be a nested object\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - a\n                properties:\n                  a:\n                    type: object\n                    required:\n                      - b\n                    properties:\n                      b:\n                        type: object\n                        required:\n                          - c\n                        properties:\n                          c:\n                            type: string\n  /responseBody/object/withMultipleProperties:\n    get:\n      responses:\n        200:\n          description: Response body should be an object with multiple string properties\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - property1\n                  - property2\n                properties:\n                  property1:\n                    type: string\n                  property2:\n                    type: string\n  /responseBody/referencesSchemaObject/simple:\n    get:\n      responses:\n        200:\n          description: Response body references a simple schema object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StringSchema'\n  /responseBody/empty:\n    get:\n      responses:\n        204:\n          description: No response body\n  /responseReferencesResponseDefinitionObject:\n    get:\n      responses:\n        200:\n          $ref: '#/components/responses/SimpleResponseDefinitionObject'\n  /multipleResponsesDefined:\n    get:\n      responses:\n        201:\n          description: Response body should be a string\n          content:\n            application/json:\n              schema:\n                type: string\n        202:\n          description: Response body should be an integer\n          content:\n            application/json:\n              schema:\n                type: integer\n        203:\n          description: No response body\n  /queryParams:\n    get:\n      responses:\n        204:\n          description: No response body\n  /pathParams/primitive/{stringParam}:\n    get:\n      parameters:\n        - in: path\n          name: stringParam\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: No response body\n  /pathParams/array/{arrayParam}:\n    get:\n      parameters:\n        - in: path\n          name: arrayParam\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        204:\n          description: No response body\n  /multiplePathParams/{param1}/{param2}:\n    get:\n      parameters:\n        - in: path\n          name: param1\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: param2\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: No response body\n  /pathAndQueryParams/{examplePathParam}:\n    get:\n      parameters:\n        - in: path\n          name: examplePathParam\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: No response body\n  /responseStatus:\n    get:\n      responses:\n        200:\n          description: No response body\n        204:\n          description: No response body\n  /HTTPMethod:\n    get:\n      responses:\n        204:\n          description: No response body\n    post:\n      responses:\n        204:\n          description: No response body\n  /header/application/json/and/responseBody/string:\n    get:\n      responses:\n        200:\n          description: Response header is application/json, and response body is a string\n          content:\n            application/json:\n              schema:\n                type: string\n  /header/application/json/and/responseBody/emptyObject:\n    get:\n      responses:\n        200:\n          description: Response header is application/json, and response body is an empty object. (Used to test that res.text is populated)\n          content:\n            application/json:\n              schema:\n                type: object\n  /header/application/json/and/responseBody/boolean:\n    get:\n      responses:\n        200:\n          description: Response header is application/json, and response body is a boolean.\n          content:\n            application/json:\n              schema:\n                type: boolean\n  /header/application/json/and/responseBody/nullable:\n    get:\n      responses:\n        200:\n          description: Response header is application/json, and response body is nullable.\n          content:\n            application/json:\n              schema:\n                type: object\n                nullable: true\n  /header/text/html:\n    get:\n      responses:\n        200:\n          description: Response header is text/html, and response body or text is a string\n          content:\n            text/html:\n              schema:\n                type: string\n  /no/content-type/header/and/no/response/body:\n    get:\n      responses:\n        204:\n          description: No content-type response header, and there is no response body\ncomponents:\n  schemas:\n    StringSchema:\n      type: string\n  responses:\n    SimpleResponseDefinitionObject:\n      description: Response body should be a string\n      content:\n        application/json:\n          schema:\n            type: string\n",
			"canonicalURL": "/github.com/openapi-library/OpenAPIValidators@9511b66efb9f03a923caffd86eb66ede015defc3/-/blob/commonTestResources/exampleOpenApiFiles/valid/openapi3.yml",
			"externalURLs": [
				{
					"url": "https://github.com/openapi-library/OpenAPIValidators/blob/9511b66efb9f03a923caffd86eb66ede015defc3/commonTestResources/exampleOpenApiFiles/valid/openapi3.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/header/text/html\": get: responses: 200: contents: unsupported content types: [text/html]",
	"NotImplemented": [
		"unsupported content types"
	]
}