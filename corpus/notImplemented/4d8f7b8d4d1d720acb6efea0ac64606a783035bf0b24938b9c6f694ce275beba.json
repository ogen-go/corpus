{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aixigo/PREvant"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "api/res/openapi.yml",
			"byteSize": 14262,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://github.com/aixigo/PREvant'\ninfo:\n  description: \u003e-\n    The PREvant RESTful API allows to see and manipulate the deployed apps that are ready for reviewing purposes.\n  version: 1.0.0\n  title: PREvant RESTful API\n  contact:\n    name: Marc Schreiber\n    email: marc.schreiber@aixigo.de\n  license:\n    name: MIT License\n    url: https://opensource.org/licenses/MIT\npaths:\n  /apps/:\n    get:\n      summary: List deployed review apps.\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  \"^[a-zA-Z0-9_-]\":\n                    $ref: '#/components/schemas/Service'\n        '500':\n          description: Server error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n  /apps/tickets/:\n    get:\n      summary: Provides ticket information to each review app\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  \"^[a-zA-Z0-9_-]\":\n                    $ref: '#/components/schemas/Ticket'\n        '204':\n          description: 'No ticket system configuration'\n        '500':\n          description: Internal server error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n  /apps/{appName}:\n    post:\n      summary: Start or update a new review app.\n      parameters:\n        - in: path\n          name: appName\n          allowEmptyValue: false\n          schema:\n            type: string\n          required: true\n          description: Name of review app to create\n        - in: query\n          name: replicateFrom\n          schema:\n            type: string\n            default: 'master'\n          description: The application name that will be used to replicate from.\n        - $ref: '#/components/parameters/preferAsync'\n      requestBody:\n        description: Information of review app to create\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ServiceConfiguration'\n      responses:\n        '200':\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Service'\n        '202':\n          description: \u003e-\n            Accepted. The deployment is being processed asynchronously. The current state of the action\n            can be polled at the url pointed to by the Location header.\n          headers:\n            Location:\n              description: The url of the queued task\n              schema:\n                type: string\n                format: url\n        '409':\n          description: The application is currently in deployment. A parallel deployment of two apps is not allowed.\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n        '500':\n          description: Server error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n    delete:\n      summary: Shutdown a review app\n      parameters:\n        - $ref: '#/components/parameters/appName'\n        - $ref: '#/components/parameters/preferAsync'\n      responses:\n        '200':\n          description: 'List of deleted containers'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Service'\n        '202':\n          description: \u003e-\n            Accepted. The shutdown is being processed asynchronously. The current state of the action\n            can be polled at the url pointed to by the Location header.\n          headers:\n            Location:\n              description: The url of the queued task\n              schema:\n                type: string\n                format: url\n        '404':\n          description: Cannot find app\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n        '500':\n          description: Server error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n  /apps/{appName}/states/{serviceName}/:\n    put:\n      summary: Changes the state of a service\n      parameters:\n        - $ref: '#/components/parameters/appName'\n        - $ref: '#/components/parameters/serviceName'\n      requestBody:\n        description: The new state of the service\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/State'\n      responses:\n        '202':\n          description: The state change has been accepted\n        '404':\n          description: Cannot find app or cannot find service.\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n        '500':\n          description: Server error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n  /apps/{appName}/logs/{serviceName}/:\n    get:\n      summary: Retrieves the logs from stdout/stderr of the specified container.\n      parameters:\n        - $ref: '#/components/parameters/appName'\n        - $ref: '#/components/parameters/serviceName'\n        - in: query\n          name: since\n          description: \u003e-\n            Date and time since when the logs have to retrieved. By default the logs from the beginning are crawled.\n          schema:\n            type: string\n            format: date-time\n          example: '2019-07-22T08:42:47-00:00'\n        - in: query\n          name: limit\n          description: The number of log lines to retrieve. If not present, 1000 lines will be retrieved.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: The available log statements\n          headers:\n            Link:\n              schema:\n                type: string\n              description: The links for pagination\n              example: \u003c/apps/master/logs/service-a/?limit=1000\u0026since=2019-07-22T08:42:47-00:00\u003e;rel=next\n          content:\n            text/plain:\n              schema:\n                type: string\n  /apps/{appName}/status-changes/{statusId}:\n    parameters:\n      - $ref: '#/components/parameters/appName'\n      - name: statusId\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n    get:\n      summary: Check if the given status change is still in progress\n      description: \u003e-\n        Can be used to poll the completion of a status change, such as deploying or stopping an app.\n      responses:\n        '202':\n          description: The status change is still running\n        '404':\n          description: The status change finished\n  /webhooks/:\n    post:\n      summary: Cleans up apps when webhook triggers this resource.\n      description: \u003e-\n        If a PR has been merged or declined, a webhook can trigger this resource in order to delete the\n        corresponding review app. Currently supported are webhooks of Bitbucket:\n\n        - [Merged](https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html#Eventpayload-Merged)\n\n        - [Declined](https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html#Eventpayload-Declined)\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BitbucketWebHookPayload'\n      responses:\n        '200':\n          description: 'List of deleted containers'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Service'\n        '404':\n          description: Cannot find app\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\n        '500':\n          description: Server error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/ProblemDetails'\ncomponents:\n  parameters:\n    appName:\n      in: path\n      name: appName\n      allowEmptyValue: false\n      schema:\n        type: string\n      required: true\n      description: Name of the application\n    serviceName:\n      in: path\n      name: serviceName\n      description: Name of the service\n      required: true\n      schema:\n        type: string\n    preferAsync:\n      in: header\n      name: Prefer\n      description: \u003e-\n        Whether the server should respond without waiting for completion\n        (see [RFC-7240](https://tools.ietf.org/html/rfc7240) for details)\n      required: false\n      example:\n        respond-async,wait=10\n      schema:\n        type: array\n        minItems: 1\n        maxItems: 2\n        uniqueItems: true\n        items:\n          oneOf:\n            - type: string\n              description: Respond before the operation is finished\n              pattern: ^respond-async$\n              example: respond-async\n            - type: string\n              description: Wait the specified amount of seconds for the operation to finish\n              pattern: ^wait=(\\d+)$\n              example: wait=20\n  schemas:\n    Service:\n      type: object\n      properties:\n        name:\n          type: string\n          example: mariadb\n        type:\n          type: string\n          enum:\n            - instance\n            - replica\n            - app-companion\n            - service-companion\n          example: instance\n        state:\n          $ref: '#/components/schemas/State'\n        version:\n          $ref: '#/components/schemas/Version'\n        url:\n          type: string\n          format: url\n        openApiUrl:\n          type: string\n          format: url\n          example: https://speca.io/speca/petstore-api\n          description: The URL pointing to the OpenAPI specification of the service\n      required:\n        - name\n        - type\n        - version\n    Version:\n      type: object\n      properties:\n        gitCommit:\n          type: string\n          description: The git commit SHA hash of the service.\n          example: '43de4c6edf3c7ed93cdf8983f1ea7d73115176cc'\n        dateModified:\n          type: string\n          format: date-time\n          description: The date and time when this service has been build.\n          example: '2018-11-13T20:20:39+00:00'\n        softwareVersion:\n          type: string\n          description: The human-readable version string, see [softwareVersion](https://schema.org/softwareVersion).\n          example: '1.2.3'\n    State:\n      type: object\n      properties:\n        status:\n          description: Indicate wether the service is running, paused, etc.\n          type: string\n          enum:\n            - running\n            - paused\n    ServiceConfiguration:\n      type: object\n      properties:\n        serviceName:\n          type: string\n          description: Name of the service to start\n          example: mariadb\n        image:\n          type: string\n          description: \u003e-\n            The docker image with `\u003crepo-name\u003e/\u003chub-user\u003e/\u003crepo-name\u003e:\u003ctag\u003e`. `\u003crepo-name\u003e`, `\u003chub-user\u003e` and `\u003ctag\u003e`\n            are optional values.\n          example: mariadb:10.3\n        env:\n          $ref: '#/components/schemas/EnvironmentConfiguration'\n        volumes:\n          type: object\n          description: \u003e-\n            Files to be created in the the container.\n            \u003cp\u003e\n            The keys of this object are the paths in the container and the values contain the actual file content.\n          example:\n            \"/etc/mysql/my.cnf\": |\n              [client-server]\n              # Uncomment these if you want to use a nonstandard connection to MariaDB\n              #socket=/tmp/mysql.sock\n              #port=3306\n      required:\n        - serviceName\n        - registry\n    EnvironmentConfiguration:\n      oneOf:\n        - type: object\n          description: Key value object of enviroment variables\n          example:\n            \"MYSQL_USER\": \"admin\"\n        - type: array\n          items:\n            type: string\n          description: Key value list of enviroment variables\n          example:\n            - MYSQL_USER=admin\n            - MYSQL_DATABASE=dbname\n    Ticket:\n      type: object\n      properties:\n        link:\n          type: string\n          format: uri\n          description: Link to the ticket in the ticket system.\n        summary:\n          type: string\n          description: Brief description of the ticket\n        status:\n          type: string\n          description: ticket status, for example, `closed`, `review`, …\n    BitbucketWebHookPayload:\n      type: object\n      description: Excerpt of Bitbucket's [event payload](https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html)\n      properties:\n        pullRequest:\n          type: object\n          properties:\n            title:\n              type: string\n              description: Title description the pull request.\n            fromRef:\n              type: object\n              properties:\n                displayId:\n                  type: string\n                  description: The branch name containing the ticket number `XXX-123`.\n                  example: 'feature/XXX-123-some-feature-branch'\n    ProblemDetails:\n      type: object\n      description: Defines a \"problem detail\" according to [RFC 7807](https://tools.ietf.org/html/rfc7807).\n      properties:\n        type:\n          type: string\n        status:\n          type: integer\n        title:\n          type: string\n        detail:\n          type: string",
			"canonicalURL": "/github.com/aixigo/PREvant@22e9582e7f4e63c78dc8c79870c2be89895c6cbb/-/blob/api/res/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/aixigo/PREvant/blob/22e9582e7f4e63c78dc8c79870c2be89895c6cbb/api/res/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/apps/\": get: responses: 500: contents: unsupported content types: [application/problem+json]",
	"NotImplemented": [
		"sum types with same names",
		"unsupported content types"
	]
}