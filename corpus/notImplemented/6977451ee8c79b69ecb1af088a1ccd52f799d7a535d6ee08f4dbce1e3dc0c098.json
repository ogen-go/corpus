{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenLiberty/open-liberty"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "dev/com.ibm.ws.rest.handler.validator_fat/test-applications/testOpenAPIApp/resources/META-INF/openapi.yaml",
			"byteSize": 40294,
			"content": "# *******************************************************************************\n# Copyright (c) 2019 IBM Corporation and others.\n# All rights reserved. This program and the accompanying materials\n# are made available under the terms of the Eclipse Public License v1.0\n# which accompanies this distribution, and is available at\n# http://www.eclipse.org/legal/epl-v10.html\n#\n# Contributors:\n#     IBM Corporation - initial API and implementation\n# *******************************************************************************\nopenapi: \"3.0.2\"\ninfo:\n  title: Config and Validation API\n  version: \"1.0\"\n  description: \"The Config REST endpoint retrieves information about configured elements and lists available REST API for each. The Validation REST endpoint tests the basic configuration of resources by attempting to perform a simple operation on them.\"\nservers:\n  - url: https://127.0.0.1:8020/ibm/api\npaths:\n  /config/:\n    get:\n      tags:\n      - Config\n      summary: \"Shows configuration of all elements\"\n      description: \"Retrieves configuration detail for instances of all configuration element types.\"\n      parameters:\n        - $ref: \"#/components/parameters/queryParams\"\n      responses:\n        200:\n          description: \"Configuration info retrieved\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/config.result\"\n  /config/{elementName}:\n    get:\n      tags:\n      - Config\n      summary: \"Shows configurations of the requested config element type\"\n      description: \"Retrieves configuration detail for instances of the requested type of configuration element.\"\n      parameters:\n        - name: elementName\n          in: path\n          description: \"**Configuration element name**. The type of configuration element, such as `dataSource` or `application`.\"\n          required: true\n          schema:\n            type: string\n            example: \"dataSource\"\n        - $ref: \"#/components/parameters/queryParams\"\n      responses:\n        200:\n          description: \"Configuration info retrieved\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/config.result\"\n  /config/{elementName}/{uid}:\n    get:\n      tags:\n      - Config\n      summary: \"Shows configuration of a single instance of the requested type\"\n      description: \"Retrieves configuration detail for a single configuration element, uniquely qualfied by its unique identifier.\"\n      parameters:\n        - name: elementName\n          in: path\n          description: \"**Configuration element name**. The type of configuration element, such as `dataSource` or `application`.\"\n          required: true\n          schema:\n            type: string\n            example: \"dataSource\"\n        - name: uid\n          in: path\n          description: \"**Unique identifier**. For an element configured at top level, this is the value of the `id` attribute, if present. Otherwise, it is a generated value, such as *dataSource[default-0]*.\"\n          required: true\n          schema:\n            type: string\n            example: \"DefaultDataSource\"\n          examples:\n            example-id:\n              summary: \"Top-level element with id\"\n              description: \"The uid of a top-level config element is the value of its `id` attribute, if present.\"\n              value: \"DefaultDataSource\"\n            example-no-id:\n              summary: \"Top-level element without id\"\n              description: \"The uid of a top-level config element without an `id` attribute is computed based on the order of appearance within server config, starting at 0.\"\n              value: \"jmsConnectionFactory[default-0]\"\n            example-nested:\n              summary: \"Nested element without id\"\n              description: \"This example shows a generated uid for the first connectionManager (index 0, lacking an id) that is nested under a dataSource element with id of DefaultDataSource.\"\n              value: \"dataSource[DefaultDataSource]/connectionManager[default-0]\"\n            example-nested-under-singleton:\n              summary: \"Nested element (without id) under singleton\"\n              description: \"This example shows a generated uid for the first dataSource (index 0, lacking an id) that is nested under the transaction element. The transaction element is a singleton and cannot have an id.\"\n              value: \"transaction/dataSource[default-0]\"\n            example-app-def:\n              summary: \"App-defined resource\"\n              description: \"The uid for application-defined resources, such as @DataSourceDefinition and @JMSConnectionFactoryDefinition, is computed based on the configured name and qualified by its scope. This example is for a @DataSourceDefinition in the MyApp application, in the MyWebModule module, with a name of java:module/env/jdbc/ds1\"\n              value: \"application[MyApp]/module[MyWebModule]/dataSource[java:module/env/jdbc/ds1]\"\n      responses:\n        200:\n          description: \"Configuration info retrieved\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/config.result\"\n  /validation/cloudantDatabase/:\n    get:\n      tags:\n      - Validation\n      summary: Validation of all Cloudant Database configurations\n      description: \"Retrieves the validation results for all cloudantDatabase configuration elements. Validation involves establishing a connection to the database and querying basic metadata information.\"\n      parameters:\n        - $ref: \"#/components/parameters/auth\"\n        - $ref: \"#/components/parameters/authAlias\"\n      responses:\n        200:\n          description: Validation results retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/validation.cloudantDatabase.result\"\n  /validation/cloudantDatabase/{uid}:\n    get:\n      tags:\n      - Validation\n      summary: Validation of a Cloudant Database configuration\n      description: \"Retrieves the validation result for the specified cloudantDatabase configuration element. Validation involves establishing a connection to the database and querying basic metadata information.\"\n      parameters:\n        - name: uid\n          in: path\n          description: \"**Unique identifier**. For a cloudantDatabase element configured at top level, this is the value of the `id` attribute, if present. Otherwise, it is a generated value, such as *cloudantDatabase[default-0]*.\"\n          required: true\n          schema:\n            type: string\n            example: \"MyCloudantDB\"\n          examples:\n            example-cloudantdb-id:\n              summary: \"Top-level cloudantDatabase element with id\"\n              description: \"In this case, the uid is the same as the id.\"\n              value: \"myConFactory\"\n            example-cloudantdb-no-id:\n              summary: \"Top-level cloudantDatabase element without id\"\n              description: \"A generated uid for top-level cloudantDatabase configuration element which lack an id is computed based on the order of appearance within server config, starting at 0.\"\n              value: \"cloudantDatabase[default-0]\"\n        - $ref: \"#/components/parameters/auth\"\n        - $ref: \"#/components/parameters/authAlias\"\n      responses:\n        200:\n          description: Validation result retrieved\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/validation.cloudantDatabase.result\"\n  /validation/connectionFactory/:\n    get:\n      tags:\n      - Validation\n      summary: Validation of all Connection Factories\n      description: \"Retrieves the validation results for all connection factories (apart from JMS, which uses different config elements). Validation involves establishing a connection to the backend, querying basic metadata information, and performing additional interface-specific operations. For JDBC connection factories, the `java.sql.Connection.isValid` operation is invoked. For CCI connection factories, the `javax.resource.cci.Connection.createInteraction` operation is invoked.\"\n      parameters:\n        - $ref: \"#/components/parameters/X-Validation-User\"\n        - $ref: \"#/components/parameters/X-Validation-Password\"\n        - $ref: \"#/components/parameters/auth\"\n        - $ref: \"#/components/parameters/authAlias\"\n        - $ref: \"#/components/parameters/loginConfig\"\n        - $ref: \"#/components/parameters/X-Login-Config-Props\"\n        - $ref: \"#/components/parameters/headerParamsURLEncoded\"\n      responses:\n        200:\n          description: Validation results retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/validation.connectionFactory.result\"\n  /validation/connectionFactory/{uid}:\n    get:\n      tags:\n      - Validation\n      summary: Validation of a Connection Factory\n      description: \"Retrieves the validation result for the specified connection factory. Validation involves establishing a connection to the backend, querying basic metadata information, and performing additional interface-specific operations. For JDBC connection factories, the `java.sql.Connection.isValid` operation is invoked. For CCI connection factories, the `javax.resource.cci.Connection.createInteraction` operation is invoked.\"\n      parameters:\n        - name: uid\n          in: path\n          description: \"**Unique identifier**. For a connection factory configured at top level, this is the value of the `id` attribute, if present. Otherwise, it is a generated value, such as *connectionFactory[default-0]*.\"\n          required: true\n          schema:\n            type: string\n            example: \"MyConFactory\"\n          examples:\n            example-cf-id:\n              summary: \"Top-level connection factory with id\"\n              description: \"In this case, the uid is the same as the id.\"\n              value: \"myConFactory\"\n            example-cf-no-id:\n              summary: \"Top-level connection factory without id\"\n              description: \"A generated uid for top-level connection factories which lack an id is computed based on the order of appearance within server config, starting at 0.\"\n              value: \"connectionFactory[default-0]\"\n            example-cf-app-def:\n              summary: \"App-defined connection factory\"\n              description: \"References a connection factory defined by @ConnectionFactoryDefinition within the MyApp application, with a name of java:app/env/eis/cf1\"\n              value: \"application[MyApp]/connectionFactory[java:app/env/eis/cf1]\"\n        - $ref: \"#/components/parameters/X-Validation-User\"\n        - $ref: \"#/components/parameters/X-Validation-Password\"\n        - $ref: \"#/components/parameters/auth\"\n        - $ref: \"#/components/parameters/authAlias\"\n        - $ref: \"#/components/parameters/loginConfig\"\n        - $ref: \"#/components/parameters/X-Login-Config-Props\"\n        - $ref: \"#/components/parameters/headerParamsURLEncoded\"\n      responses:\n        200:\n          description: Validation result retrieved\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/validation.connectionFactory.result\"\n  /validation/dataSource/:\n    get:\n      tags:\n      - Validation\n      summary: Validation of all Data Sources\n      description: \"Retrieves the validation results for all data sources. Validation involves establishing a connection to the database, querying basic metadata information, and performing the `java.sql.Connection.isValid` operation.\"\n      parameters:\n        - $ref: \"#/components/parameters/X-Validation-User\"\n        - $ref: \"#/components/parameters/X-Validation-Password\"\n        - $ref: \"#/components/parameters/auth\"\n        - $ref: \"#/components/parameters/authAlias\"\n        - $ref: \"#/components/parameters/loginConfig\"\n        - $ref: \"#/components/parameters/X-Login-Config-Props\"\n        - $ref: \"#/components/parameters/headerParamsURLEncoded\"\n      responses:\n        200:\n          description: Validation results retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/validation.dataSource.result\"\n  /validation/dataSource/{uid}:\n    get:\n      tags:\n      - Validation\n      summary: Validation of a Data Source\n      description: \"Retrieves the validation result for the specified data source. Validation involves establishing a connection to the database, querying basic metadata information, and performing the `java.sql.Connection.isValid` operation.\"\n      parameters:\n        - name: uid\n          in: path\n          description: \"**Unique identifier**. For a data source configured at top level, this is the value of the `id` attribute, if present. Otherwise, it is a generated value, such as *databaseStore[defaultDatabaseStore]/dataSource[default-0]*.\"\n          required: true\n          schema:\n            type: string\n            example: \"DefaultDataSource\"\n          examples:\n            example-ds-id:\n              summary: \"Top-level dataSource with id\"\n              description: \"The default data source is configured at top-level and has an id of DefaultDataSource.\"\n              value: \"DefaultDataSource\"\n            example-ds-no-id:\n              summary: \"Top-level dataSource without id\"\n              description: \"A generated uid for top-level data sources which lack an id is computed based on the order of appearance within server config, starting at 0.\"\n              value: \"dataSource[default-0]\"\n            example-ds-nested:\n              summary: \"Nested dataSource without id\"\n              description: \"References the first dataSource (index 0) that is nested under the databaseStore element with id of defaultDatabaseStore.\"\n              value: \"databaseStore[defaultDatabaseStore]/dataSource[default-0]\"\n            example-ds-nested-under-singleton:\n              summary: \"Nested dataSource (without id) under singleton\"\n              description: \"References the first dataSource (index 0) that is nested under the transaction element. The transaction element is a singleton and cannot have an id.\"\n              value: \"transaction/dataSource[default-0]\"\n            example-ds-app-def:\n              summary: \"App-defined data source\"\n              description: \"References a data source defined by @DataSourceDefinition within the MyApp application, in the MyWebModule module, with a name of java:module/env/jdbc/ds1\"\n              value: \"application[MyApp]/module[MyWebModule]/dataSource[java:module/env/jdbc/ds1]\"\n        - $ref: \"#/components/parameters/X-Validation-User\"\n        - $ref: \"#/components/parameters/X-Validation-Password\"\n        - $ref: \"#/components/parameters/auth\"\n        - $ref: \"#/components/parameters/authAlias\"\n        - $ref: \"#/components/parameters/loginConfig\"\n        - $ref: \"#/components/parameters/X-Login-Config-Props\"\n        - $ref: \"#/components/parameters/headerParamsURLEncoded\"\n      responses:\n        200:\n          description: Validation result retrieved\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/validation.dataSource.result\"\n  /validation/jmsConnectionFactory/:\n    get:\n      tags:\n      - Validation\n      summary: Validation of all basic JMS Connection Factories\n      description: \"Retrieves the validation results for all basic JMS connection factories (apart from QueueConnectionFactory and TopicConnectionFactory, which uses different config elements). Validation involves establishing a connection to the backend, querying basic metadata information, and creating \u0026 closing a session.\"\n      parameters:\n        - $ref: \"#/components/parameters/X-Validation-User\"\n        - $ref: \"#/components/parameters/X-Validation-Password\"\n        - $ref: \"#/components/parameters/auth\"\n        - $ref: \"#/components/parameters/authAlias\"\n        - $ref: \"#/components/parameters/loginConfig\"\n        - $ref: \"#/components/parameters/X-Login-Config-Props\"\n        - $ref: \"#/components/parameters/headerParamsURLEncoded\"\n      responses:\n        200:\n          description: Validation results retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/validation.jms.result\"\n  /validation/jmsConnectionFactory/{uid}:\n    get:\n      tags:\n      - Validation\n      summary: Validation of a basic JMS Connection Factory\n      description: \"Retrieves the validation result for the specified basic JMS connection factory. Validation involves establishing a connection to the backend, querying basic metadata information, and creating \u0026 closing a session.\"\n      parameters:\n        - name: uid\n          in: path\n          description: \"**Unique identifier**. For a JMS connection factory configured at top level, this is the value of the `id` attribute, if present. Otherwise, it is a generated value, such as *jmsConnectionFactory[default-0]*.\"\n          required: true\n          schema:\n            type: string\n            example: \"DefaultJMSConnectionFactory\"\n          examples:\n            example-jmscf-id:\n              summary: \"Top-level JMS connection factory with id\"\n              description: \"In this case, the uid is the same as the id.\"\n              value: \"DefaultJMSConnectionFactory\"\n            example-jmscf-no-id:\n              summary: \"Top-level JMS connection factory without id\"\n              description: \"A generated uid for top-level JMS connection factories which lack an id is computed based on the order of appearance within server config, starting at 0.\"\n              value: \"jmsConnectionFactory[default-0]\"\n            example-jmscf-app-def:\n              summary: \"App-defined JMS connection factory\"\n              description: \"References a JMS connection factory defined by @JMSConnectionFactoryDefinition within the MyApp application, with a name of java:app/env/jms/cf1\"\n              value: \"application[MyApp]/jmsConnectionFactory[java:app/env/jms/cf1]\"\n        - $ref: \"#/components/parameters/X-Validation-User\"\n        - $ref: \"#/components/parameters/X-Validation-Password\"\n        - $ref: \"#/components/parameters/auth\"\n        - $ref: \"#/components/parameters/authAlias\"\n        - $ref: \"#/components/parameters/loginConfig\"\n        - $ref: \"#/components/parameters/X-Login-Config-Props\"\n        - $ref: \"#/components/parameters/headerParamsURLEncoded\"\n      responses:\n        200:\n          description: Validation result retrieved\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/validation.jms.result\"\n  /validation/jmsQueueConnectionFactory/:\n    get:\n      tags:\n      - Validation\n      summary: Validation of all JMS Queue Connection Factories\n      description: \"Retrieves the validation results for all JMS queue connection factories. Validation involves establishing a connection to the backend, querying basic metadata information, and creating \u0026 closing a session.\"\n      parameters:\n        - $ref: \"#/components/parameters/X-Validation-User\"\n        - $ref: \"#/components/parameters/X-Validation-Password\"\n        - $ref: \"#/components/parameters/auth\"\n        - $ref: \"#/components/parameters/authAlias\"\n        - $ref: \"#/components/parameters/loginConfig\"\n        - $ref: \"#/components/parameters/X-Login-Config-Props\"\n        - $ref: \"#/components/parameters/headerParamsURLEncoded\"\n      responses:\n        200:\n          description: Validation results retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/validation.jms.result\"\n  /validation/jmsQueueConnectionFactory/{uid}:\n    get:\n      tags:\n      - Validation\n      summary: Validation of a JMS Queue Connection Factory\n      description: \"Retrieves the validation result for the specified JMS queue connection factory. Validation involves establishing a connection to the backend, querying basic metadata information, and creating \u0026 closing a session.\"\n      parameters:\n        - name: uid\n          in: path\n          description: \"**Unique identifier**. For a JMS queue connection factory configured at top level, this is the value of the `id` attribute, if present. Otherwise, it is a generated value, such as *jmsQueueConnectionFactory[default-0]*.\"\n          required: true\n          schema:\n            type: string\n            example: \"MyQueueConFactory\"\n          examples:\n            example-qcf-id:\n              summary: \"Top-level JMS queue connection factory with id\"\n              description: \"In this case, the uid is the same as the id.\"\n              value: \"myQueueConFactory\"\n            example-qcf-no-id:\n              summary: \"Top-level JMS queue connection factory without id\"\n              description: \"A generated uid for top-level JMS queue connection factories which lack an id is computed based on the order of appearance within server config, starting at 0.\"\n              value: \"jmsQueueConnectionFactory[default-0]\"\n            example-qcf-app-def:\n              summary: \"App-defined JMS queue connection factory\"\n              description: \"References a JMS queue connection factory defined by @JMSConnectionFactoryDefinition within the MyApp application, in the MyWebModule module, with a name of java:module/env/jms/qcf1\"\n              value: \"application[MyApp]/module[MyWebModule]/jmsQueueConnectionFactory[java:module/env/jms/qcf1]\"\n        - $ref: \"#/components/parameters/X-Validation-User\"\n        - $ref: \"#/components/parameters/X-Validation-Password\"\n        - $ref: \"#/components/parameters/auth\"\n        - $ref: \"#/components/parameters/authAlias\"\n        - $ref: \"#/components/parameters/loginConfig\"\n        - $ref: \"#/components/parameters/X-Login-Config-Props\"\n        - $ref: \"#/components/parameters/headerParamsURLEncoded\"\n      responses:\n        200:\n          description: Validation result retrieved\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/validation.jms.result\"\n  /validation/jmsTopicConnectionFactory/:\n    get:\n      tags:\n      - Validation\n      summary: Validation of all JMS Topic Connection Factories\n      description: \"Retrieves the validation results for all JMS topic connection factories. Validation involves establishing a connection to the backend, querying basic metadata information, and creating \u0026 closing a session.\"\n      parameters:\n        - $ref: \"#/components/parameters/X-Validation-User\"\n        - $ref: \"#/components/parameters/X-Validation-Password\"\n        - $ref: \"#/components/parameters/auth\"\n        - $ref: \"#/components/parameters/authAlias\"\n        - $ref: \"#/components/parameters/loginConfig\"\n        - $ref: \"#/components/parameters/X-Login-Config-Props\"\n        - $ref: \"#/components/parameters/headerParamsURLEncoded\"\n      responses:\n        200:\n          description: Validation results retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/validation.jms.result\"\n  /validation/jmsTopicConnectionFactory/{uid}:\n    get:\n      tags:\n      - Validation\n      summary: Validation of a JMS Topic Connection Factory\n      description: \"Retrieves the validation result for the specified JMS topic connection factory. Validation involves establishing a connection to the backend, querying basic metadata information, and creating \u0026 closing a session.\"\n      parameters:\n        - name: uid\n          in: path\n          description: \"**Unique identifier**. For a JMS topic connection factory configured at top level, this is the value of the `id` attribute, if present. Otherwise, it is a generated value, such as *jmsTopicConnectionFactory[default-0]*.\"\n          required: true\n          schema:\n            type: string\n            example: \"MyTopicConFactory\"\n          examples:\n            example-tcf-id:\n              summary: \"Top-level JMS topic connection factory with id\"\n              description: \"In this case, the uid is the same as the id.\"\n              value: \"myTopicConFactory\"\n            example-tcf-no-id:\n              summary: \"Top-level JMS topic connection factory without id\"\n              description: \"A generated uid for top-level JMS topic connection factories which lack an id is computed based on the order of appearance within server config, starting at 0.\"\n              value: \"jmsTopicConnectionFactory[default-0]\"\n            example-tcf-app-def:\n              summary: \"App-defined JMS topic connection factory\"\n              description: \"References a JMS topic connection factory defined by @JMSConnectionFactoryDefinition within the MyApp application, in the MyWebModule module, with a name of java:comp/env/jms/tcf1\"\n              value: \"application[MyApp]/module[MyWebModule]/jmsTopicConnectionFactory[java:copy/env/jms/tcf1]\"\n        - $ref: \"#/components/parameters/X-Validation-User\"\n        - $ref: \"#/components/parameters/X-Validation-Password\"\n        - $ref: \"#/components/parameters/auth\"\n        - $ref: \"#/components/parameters/authAlias\"\n        - $ref: \"#/components/parameters/loginConfig\"\n        - $ref: \"#/components/parameters/X-Login-Config-Props\"\n        - $ref: \"#/components/parameters/headerParamsURLEncoded\"\n      responses:\n        200:\n          description: Validation result retrieved\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/validation.jms.result\"\nsecurity:\n  - basicAuth: []\ncomponents:\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n  parameters:\n    queryParams:\n      name: queryParams\n      in: query\n      description: \"**Query Parameters**. Supply additional query parameters in JSON as key/value pairs. For example, the following parameters could be specified for an application-defined data source: *{ \\\"application\\\": \\\"MyApp\\\", \\\"jndiName\\\": \\\"java:app/env/jdbc/MyDataSource\\\" }*\"\n      schema:\n        type: object\n        additionalProperties:\n          type: string\n        example: {} # empty because the example is also used as a default value\n    X-Validation-User:\n      name: X-Validation-User\n      in: header\n      description: \"**User**. Supplies a user name when not using Container-managed authentication. All non-ASCII characters and other characters not allowed in a header must be URL encoded, in which case be sure to specify the *headerParamsURLEncoded* parameter.\"\n      schema:\n        type: string\n    X-Validation-Password:\n      name: X-Validation-Password\n      in: header\n      description: \"**Password**. Supplies a password when not using Container-managed authentication. All non-ASCII characters and other characters not allowed in a header must be URL encoded, in which case be sure to specify the *headerParamsURLEncoded* parameter.\"\n      schema:\n        type: string\n        format: password\n    auth:\n      name: auth\n      in: query\n      description: \"**Authentication**. Determines whether to use a resource reference with Application-managed or Container-managed authentication, or no resource reference.\"\n      schema:\n       type: string\n       enum:\n         - application\n         - container\n    authAlias:\n      name: authAlias\n      in: query\n      description: \"**Authentication Alias**. Supplies the `id` of an `authData` to use for Container-managed authentication.\"\n      schema:\n        type: string\n    loginConfig:\n      name: loginConfig\n      in: query\n      description: \"**Custom Login**. Supplies the `name` of a `jaasLoginContextEntry` to use for Container-managed authentication.\"\n      schema:\n        type: string\n    X-Login-Config-Props:\n      name: X-Login-Config-Props\n      in: header\n      description: \"**Login Config Properties**. Supply login config properties as name/value pairs. Each name/value pair is a list element, within which the name and value are delimited by the first `=` character. For example, *prop1=value1*. All non-ASCII characters and other characters not allowed in a header must be URL encoded, in which case be sure to specify the *headerParamsURLEncoded* parameter.\"\n      schema:\n        type: array\n        items:\n          type: string\n    headerParamsURLEncoded:\n      name: headerParamsURLEncoded\n      in: query\n      description: \"Enable this if you URL-encode values for header parameters, such as X-Validation-User, X-Validation-Password, or X-Login-Config-Props. URL encoding is necessary to supply values that include non-ASCII characters and other characters that are not allowed in a header.\"\n      schema:\n        type: boolean\n      example: false\n  schemas:\n    config.result:\n      type: object\n      properties:\n        configElementName:\n          description: \"config element name\"\n          type: string\n        uid:\n          description: \"unique identifier\"\n          type: string\n        id:\n          description: \"id of configuration element\"\n          type: string\n        jndiName:\n          description: \"jndiName of configuration element\"\n          type: string\n        api:\n          description: \"relative paths to available REST endpoints for this configuration element\"\n          type: array\n          items:\n            type: string\n      additionalProperties:\n        anyOf:\n          - type: boolean\n          - type: number\n          - type: string\n          - $ref: \"#/components/schemas/config.result\"\n          - type: object\n          - type: array\n            items:\n              $ref: \"#/components/schemas/config.result\"\n      required:\n        - configElementName\n      example:\n        configElementName: \"dataSource\"\n        uid: \"DefaultDataSource\"\n        id: \"DefaultDataSource\"\n        beginTranForResultSetScrollingAPIs: true\n        beginTranForVendorAPIs: true\n        connectionSharing: \"MatchOriginalRequest\"\n        containerAuthDataRef:\n          configElementName: \"containerAuthData\"\n          uid: \"dataSource[DefaultDataSource]/containerAuthData[default-0]\"\n          password: \"******\"\n          user: \"derbyuser1\"\n        enableConnectionCasting: false\n        jdbcDriverRef:\n          configElementName: \"jdbcDriver\"\n          uid: \"dataSource[DefaultDataSource]/jdbcDriver[default-0]\"\n          libraryRef:\n            configElementName: \"library\"\n            uid: \"Derby\"\n            id: \"Derby\"\n            apiTypeVisibility: \"spec,ibm-api,api,stable\"\n            fileRef:\n              - configElementName: \"file\"\n                uid: \"library[Derby]/file[default-0]\"\n                name: \"/Users/myself/drivers/derby/derby.jar\"\n        statementCacheSize: 10,\n        syncQueryTimeoutWithTransactionTimeout: false,\n        transactional: true,\n        properties.derby.embedded:\n          createDatabase: \"create\"\n          databaseName: \"memory:derbydb\"\n        api:\n          - \"/ibm/api/validation/dataSource/DefaultDataSource\"\n    validation.cloudantDatabase.result:\n      type: object\n      properties:\n        uid:\n          description: \"unique identifier\"\n          type: string\n        id:\n          description: \"id of cloudantDatabase\"\n          type: string\n        jndiName:\n          description: \"jndiName of cloudantDatabase\"\n          type: string\n        successful:\n          description: \"result of validation\"\n          type: boolean\n        info:\n          type: object\n          properties:\n            uri:\n              type: string\n            serverVersion:\n              type: string\n            vendorName:\n              type: string\n            vendorVersion:\n              type: string\n            vendorVariant:\n              type: string\n        failure:\n          $ref: \"#/components/schemas/cause\"\n      required:\n        - uid\n        - successful\n      example:\n        uid: \"myCloudantDB\"\n        id: \"myCloudantDB\"\n        jndiName: \"cloudant/db1\"\n        successful: true\n        info:\n          uri: \"http://myhost.rchland.ibm.com:5984/exampledb1\"\n          serverVersion: \"2.0.0\"\n          vendorName: \"IBM Cloudant\"\n          vendorVersion: \"1.1.0\"\n          vendorVariant: \"local\"\n    validation.connectionFactory.result:\n      type: object\n      properties:\n        uid:\n          description: \"unique identifier\"\n          type: string\n        id:\n          description: \"id of connectionFactory\"\n          type: string\n        jndiName:\n          description: \"jndiName of connectionFactory\"\n          type: string\n        successful:\n          description: \"result of validation\"\n          type: boolean\n        info:\n          anyOf:\n            - type: object\n              properties:\n                resourceAdapterName:\n                  type: string\n                resourceAdapterVersion:\n                  type: string\n                resourceAdapterVendor:\n                  type: string\n                resourceAdapterDescription:\n                  type: string\n                connectorSpecVersion:\n                  type: string\n                eisProductName:\n                  type: string\n                eisProductVersion:\n                  type: string\n                user:\n                  type: string\n            - $ref: \"#/components/schemas/info\"\n        failure:\n          $ref: \"#/components/schemas/cause\"\n      required:\n        - uid\n        - successful\n      example:\n        uid: \"myConnectionFactory\"\n        id: \"myConnectionFactory\"\n        jndiName: \"eis/conFactory1\"\n        successful: false\n        info:\n          resourceAdapterName: \"LibConnect Adapter\"\n          resourceAdapterVersion: \"104.153.185\"\n          resourceAdapterVendor: \"OpenLiberty\"\n          resourceAdapterDescription: \"This isn't a real resource adapter.\"\n          connectorSepcVersion: \"1.7\"\n          eisProductName: \"VeryFast Enterprise DB\"\n          eisProductVersion: \"44.117.125\"\n          user: \"dbuser1\"\n        failure:\n          errorCode: \"ERR_NOT_AUTHORIZED\"\n          class: \"javax.resource.spi.SecurityException\"\n          message: \"User has insufficient privileges to access the backend data store.\"\n          stack:\n            - \"org.example.lca.ConnectionImpl.createInteraction(ConnectionImpl.java:146)\"\n            - \"com.ibm.ws.rest.handler.validator.jca.ConnectionFactoryValidator.validateCCIConnectionFactory(ConnectionFactoryValidator.java:304)\"\n            - \"com.ibm.ws.rest.handler.validator.jca.ConnectionFactoryValidator.validate(ConnectionFactoryValidator.java:169)\"\n            - \"com.ibm.ws.rest.handler.validator.internal.ValidatorRestHandler.handleSingleInstance(ValidatorRestHandler:231)\"\n          cause:\n            class: \"javax.security.auth.login.LoginException\"\n            message: \"unauthorized\"\n            stack:\n              - \"org.example.lca.AuthHelper.verifyPrivileges(AuthHelper.java:82)\"\n              - \"org.example.lca.ConnectionImpl.authenticate(EFConnection.java:223)\"\n              - \"org.example.lca.ConnectionImpl.deferredLogin(EFConnection.java:385)\"\n    validation.dataSource.result:\n      type: object\n      properties:\n        uid:\n          description: \"unique identifier\"\n          type: string\n        id:\n          description: \"id of dataSource\"\n          type: string\n        jndiName:\n          description: \"jndiName of dataSource\"\n          type: string\n        successful:\n          description: \"result of validation\"\n          type: boolean\n        info:\n          $ref: \"#/components/schemas/info\"\n        failure:\n          $ref: \"#/components/schemas/cause\"\n      required:\n        - uid\n        - successful\n      example:\n        uid: \"myDataSource\"\n        id: \"myDataSource\"\n        jndiName: \"jdbc/ds1\"\n        successful: false\n        info:\n          databaseProductName: \"VeryFast Enterprise DB\"\n          databaseProductVersion: \"44.117.125\"\n          jdbcProductName: \"EvenFaster JDBC\"\n          jdbcProductVersion: \"52.165.173\"\n          catalog: \"exampledb\"\n          schema: \"MYSCHEMA\"\n          user: \"dbuser1\"\n        failure:\n          sqlState: \"08004\"\n          errorCode: \"9409\"\n          class: \"java.sql.SQLInvalidAuthorizationSpecException\"\n          message: \"User has insufficient privileges to access database.\"\n          stack:\n            - \"org.example.efjdbc.EFConnection.isValid(EFConnection.java:253)\"\n            - \"com.ibm.ws.rest.handler.validator.jdbc.DataSourceValidator(DataSourceValidator.java:129)\"\n            - \"com.ibm.ws.rest.handler.validator.internal.ValidatorRestHandler.handleSingleInstance(ValidatorRestHandler:231)\"\n          cause:\n            class: \"javax.security.auth.login.LoginException\"\n            message: \"unauthorized\"\n            stack:\n              - \"org.example.efjdbc.AuthHelper.verifyPrivileges(AuthHelper.java:82)\"\n              - \"org.example.efjdbc.EFConnection.authenticate(EFConnection.java:223)\"\n              - \"org.example.efjdbc.EFConnection.deferredLogin(EFConnection.java:385)\"\n    validation.jms.result:\n      type: object\n      properties:\n        uid:\n          description: \"unique identifier\"\n          type: string\n        id:\n          description: \"id of config element\"\n          type: string\n        jndiName:\n          description: \"jndiName of config element\"\n          type: string\n        successful:\n          description: \"result of validation\"\n          type: boolean\n        info:\n          type: object\n          properties:\n            jmsProviderName:\n              type: string\n            jmsProviderVersion:\n              type: string\n            jmsProviderSpecVersion:\n              type: string\n            clientID:\n              type: string\n        failure:\n          $ref: \"#/components/schemas/cause\"\n      required:\n        - uid\n        - successful\n      example:\n        uid: \"myJMS1\"\n        id: \"myJMS1\"\n        jndiName: \"jms/cf1\"\n        successful: false\n        info:\n          jmsProviderName: \"OpenL Messaging Provider\"\n          jmsProviderVersion: \"39.80.89\"\n          jmsProviderSpecVersion: \"2.0\"\n          clientID: \"MyClient\"\n        failure:\n          errorCode: \"ERR_UNAUTHORIZED\"\n          class: \"javax.jms.SecurityException\"\n          message: \"User lacks authority to send or receive messages.\"\n          stack:\n            - \"org.example.am.JMSConnectionImpl.createSession(JMSConnectionImpl.java:71)\"\n            - \"com.ibm.ws.rest.handler.validator.jms.JMSConnectionFactoryValidator.validate(JMSConnectionFactoryValidator.java:150)\"\n            - \"com.ibm.ws.rest.handler.validator.jca.ConnectionFactoryValidator.validate(ConnectionFactoryValidator.java:189)\"\n            - \"com.ibm.ws.rest.handler.validator.internal.ValidatorRestHandler.handleSingleInstance(ValidatorRestHandler:231)\"\n          cause:\n            class: \"javax.security.auth.login.LoginException\"\n            message: \"unauthorized\"\n            stack:\n              - \"org.example.lca.AuthHelper.verifyPrivileges(AuthHelper.java:82)\"\n              - \"org.example.lca.ConnectionImpl.authenticate(EFConnection.java:223)\"\n              - \"org.example.lca.ConnectionImpl.deferredLogin(EFConnection.java:385)\"\n    info:\n      type: object\n      properties:\n        databaseProductName:\n          type: string\n        databaseProductVersion:\n          type: string\n        jdbcDriverName:\n          type: string\n        jdbcDriverVersion:\n          type: string\n        catalog:\n          type: string\n        schema:\n          type: string\n        user:\n          type: string\n    cause:\n      type: object\n      properties:\n        sqlState:\n          type: string\n        errorCode:\n          type: string\n        class:\n          type: string\n        message:\n          type: string\n        stack:\n          type: array\n          items:\n            type: string\n        cause:\n          $ref: \"#/components/schemas/cause\"",
			"canonicalURL": "/github.com/OpenLiberty/open-liberty@cfd85465eb25f7adaf892d6ffe7814e504110dd1/-/blob/dev/com.ibm.ws.rest.handler.validator_fat/test-applications/testOpenAPIApp/resources/META-INF/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenLiberty/open-liberty/blob/cfd85465eb25f7adaf892d6ffe7814e504110dd1/dev/com.ibm.ws.rest.handler.validator_fat/test-applications/testOpenAPIApp/resources/META-INF/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/validation/connectionFactory/{uid}\": get: responses: 200: contents: application/json: generate schema: field info: anyOf: complex anyOf not implemented",
	"NotImplemented": [
		"complex anyOf",
		"object with additionalProperties"
	]
}