{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/xmidt-org/caduceus"
		},
		"file": {
			"name": "caduceus.yaml",
			"size": 0,
			"path": "docs/caduceus.yaml",
			"byteSize": 7991,
			"content": "openapi: 3.0.3\ninfo:\n  title: Caduceus API\n  description: 'Register webhooks and send events for webhook fanout'\n  version: 0.1.0\nexternalDocs:\n  description: Find more about XMiDT\n  url: https://xmidt.io/docs/introduction/overview/\nservers:\n  - url: https://caduceus.example.com\nsecurity:\n  - jwt_auth: [ ]\n  - basic_auth: [ ]\n\n\npaths:\n  /api/v3/notify:\n    post:\n      summary: Send event\n      description:\n        Send an event so it can be fanned out to all applicable webhooks.\n      requestBody:\n        content:\n          application/msgpack:\n            schema:\n              $ref: '#/components/schemas/Event'\n        required: true\n      responses:\n        202:\n          description: Event received.\n          content: { }\n        400:\n          $ref: '#/components/responses/400'\n        401:\n          $ref: '#/components/responses/401'\n        403:\n          $ref: '#/components/responses/403'\n        415:\n          $ref: '#/components/responses/415'\n        429:\n          $ref: '#/components/responses/429'\n        500:\n          $ref: '#/components/responses/500'\n        503:\n          $ref: '#/components/responses/503'\n\n  /hook:\n    post:\n      summary: Register webhook\n      description:\n        Create a webhook for receiving events.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Webhook'\n        required: true\n      responses:\n        200:\n          description: Webhook registered.\n          content: { }\n        400:\n          $ref: '#/components/responses/400'\n        401:\n          $ref: '#/components/responses/401'\n        403:\n          $ref: '#/components/responses/403'\n        429:\n          $ref: '#/components/responses/429'\n        500:\n          $ref: '#/components/responses/500'\n\n  \ncomponents:\n  schemas:\n    Event:\n      description: Event is the extension of wrp message.\n      externalDocs:\n        url: https://xmidt.io/docs/wrp/simple-messages/#simple-event-definition\n      type: object\n      required:\n       - msg_type\n       - source\n       - dest\n       - payload\n       - session_id\n      properties:\n        msg_type:\n          type: integer\n          description: The message type for the simple event. This value SHALL be 4.\n          example: 4\n        source:\n          type: string\n          description: The creator of the event.\n          example: \"dns:talaria.xmidt.example.com\"\n        dest:\n          type: string\n          description: The name of the target device of the event.\n          example: \"event:device-status/mac:ffffffffdae4/online\"\n        content_type:\n          type: string\n          description: The media type of the payload.\n          example: \"application/json\"\n        partner_ids:\n          type: array\n          items:\n            type: string\n          description: The list of partner ids the message is meant to target.\n          example: [\"example_partner\", \".*\"]\n        headers:\n          type: array\n          items:\n            type: string\n          description: The headers associated with the payload.\n        metadata:\n          type: object  # map[string]string\n          additionalProperties:\n            type: string\n          description: \n            The map of name/value pairs used by consumers of WRP messages for \n            filtering \u0026 other purposes.\n          example: {\"/boot-time\": \"1542834188\",\"/last-reconnect-reason\": \"spanish inquisition\" }\n        payload:\n          type: string\n          format: binary\n          description: The bin format packed data.\n        session_id:\n          type: string\n          description: A unique ID for the device's connection session with XMiDT.\n          example: \"1aaIkcz1cak0wXzIHsXkV8Uak1V\"\n    Webhook:\n      description: The information needed to register a webhook with XMiDT.\n      type: object\n      required:\n      - events\n      properties:\n        registered_from_address:\n          type: string\n          description: The subscription request origin HTTP Address.\n          example: https://listener.example.com/registerer\n        config:\n          type: object\n          description: Values related to event delivery.\n          properties:\n            url:\n              type: string\n              description: The HTTP URL to deliver messages to.\n              example: https://listener.example.com/event\n            content_type:\n              type: string\n              description: \n                The type of messages desired.  If \"application/msgpack\" is\n                specific, the full wrp is sent to the webhook.  If not, only the\n                payload is sent.\n              example: \"application/msgpack\"\n            secret:\n              type: string\n              description: The string value for the SHA1 HMAC.\n              example: \"abcdefghijklmn\"\n            alt_urls:\n              type: array\n              items:\n                type: string\n              description:\n                 The list of explicit URLs that should be round robin through on\n                 failure cases to the main URL.\n              example: []\n        failure_url:\n          type: string\n          description: \n            The URL used to notify subscribers when they've been cut off due to \n            event overflow.\n          example: https://failure-listener.example.com\n        events:\n          type: array\n          items:\n            type: string\n          description: \n            The list of [regular expressions](https://github.com/google/re2/wiki/Syntax)\n            to match an event type against.\n          example: [\".*\"]\n        matcher:\n          type: object\n          description: Contains values to match against the metadata.\n          properties:\n            device_id:\n              type: array\n              items:\n                type: string\n              description: \n                The list of [regular expressions](https://github.com/google/re2/wiki/Syntax)\n                to match device id type against.\n              example: [\".*\"]\n        duration:\n          type: string\n          description: How long the subscription lasts once added.\n          example: \"5m\"\n        until:\n          type: string\n          format: date-time\n          description: \n            The time this subscription expires in \n            [RFC3339](https://www.rfc-editor.org/rfc/rfc3339.html) format.\n          example: \"2021-08-16T07:33:35+00:00\"\n  responses:\n    400:\n      description: \n        Bad request. More information can be found in the [HTTP\n        RFC](https://tools.ietf.org/html/rfc7231#section-6.5.1).\n      content: { }\n    401:\n      description: \n        Unauthorized. More information can be found in the [HTTP\n        RFC](https://httpwg.org/specs/rfc7235.html#status.401).\n      content: { }\n    403:\n      description: \n        Forbidden. More information can be found in the [HTTP\n        RFC](https://httpwg.org/specs/rfc7231.html#status.403).\n      content: { }\n    415:\n      description: \n        Unsupported media type. More information can be found in the [HTTP\n        RFC](https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.13).\n      content: { }\n    429:\n      description: \n        Too many requests. More information can be found in the [HTTP\n        RFC](https://tools.ietf.org/html/rfc6585#section-4).\n      content: { }\n    500:\n      description: \n        An internal error occurred. More information can be found in the [HTTP\n        RFC](https://tools.ietf.org/html/rfc7231#section-6.6.1).\n      content: { }\n    503:\n      description: \n        Service unavailable. More information can be found in the [HTTP\n        RFC](https://datatracker.ietf.org/doc/html/rfc7231#section-6.6.4).\n      content: { }\n\n  securitySchemes:\n    jwt_auth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: Auth must be a JWT.\n    basic_auth:\n      type: http\n      scheme: basic\n      description: Auth must be a base64 encoded username and password.",
			"canonicalURL": "/github.com/xmidt-org/caduceus@1d77dc7f59f91d8581214ade7b0e6d64891f9b49/-/blob/docs/caduceus.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/xmidt-org/caduceus/blob/1d77dc7f59f91d8581214ade7b0e6d64891f9b49/docs/caduceus.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/v3/notify\": post: requestBody: contents: unsupported content types: [application/msgpack]",
	"NotImplemented": [
		"unsupported content types"
	]
}