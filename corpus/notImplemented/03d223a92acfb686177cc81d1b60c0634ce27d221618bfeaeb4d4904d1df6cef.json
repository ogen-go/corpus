{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "aucklandmuseum.com-2.0.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/aucklandmuseum.com-2.0.0-swagger.yaml",
			"byteSize": 9074,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    name: Auckland Museum API Team\n    url: http://www.aucklandmuseum.com\n  description: |\n    This is technical documentation for the Auckland Museum API\n  license:\n    name: Auckland Museum licence\n    url: http://www.aucklandmuseum.com\n  termsOfService: http://api.aucklandmuseum.com/terms/\n  title: Auckland Museum\n  version: 2.0.0\n  x-apisguru-categories:\n    - open_data\n  x-logo:\n    backgroundColor: \"#FFFFFF\"\n    url: https://twitter.com/aucklandmuseum/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: http://api.aucklandmuseum.com/apidoc\n      version: \"2.0\"\n  x-providerName: aucklandmuseum.com\ntags:\n  - description: media - images and documents\n    name: media\n  - description: information about subjects\n    name: subject\n  - description: search for interesting data\n    name: search\n  - description: sparql queries\n    name: sparql\npaths:\n  \"/id/media/{path}\":\n    get:\n      description: |\n        Gets `media` at a given path\n      operationId: get media\n      parameters:\n        - description: |\n            The media `identifier`\n          in: path\n          name: path\n          required: true\n          schema:\n            type: string\n        - description: |\n            The desired media `rendering`\n\n            Possible values:\n            * `original.jpg`\n            * `original.pdf`\n            * `thumbnail.jpg` (fixed with 70px)\n            * `standard.jpg` (fixed width 440px and height 440px)\n            * `preview.jpg` (fixed height 100px)\n          in: query\n          name: rendering\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: |\n            `media` found\n        \"404\":\n          description: |\n            `media` not found\n      summary: Retrieve media associated with Collections and Cenotaph subjects in\n        Auckland Museum\n      tags:\n        - media\n  \"/id/{identifier}\":\n    get:\n      description: \u003e\n        Gets information about a `subject` identified by the `identifier`.\n\n\n        The response format depends upon the `Accept` header.\n          - `text/html` - the default response type. Returned data can be easily viewed in any modern Internet Browser\n          - `application/ld+json` - the response will be in [JSON-LD](http://json-ld.org/)\n          - `application/json` - the response will be a simple JSON Object with keys (predicates) and values (objects).\n      operationId: get subject\n      parameters:\n        - description: |\n            The identifier path of the `subject` you're looking for\n          in: path\n          name: identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: |\n            `subject` found\n        \"404\":\n          description: |\n            `subject` not found\n      summary: Explore details about a given subject node\n      tags:\n        - subject\n  \"/search/{index}/{operation}\":\n    get:\n      description: \u003e\n        Use this endpoint to perform simple search queries for finding\n        information and subjects you may be interested in\n\n\n        Searches performed via this endpoint run against an [Elastic](www.elastic.co) server. This endpoint mirrors the Elastic search API documented [here](https://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-search.html)\n\n\n        Use the\n          - `collectionsonline` index to perform searches over other all\n        Collections data\n          - `cenotaph` index to perform searches over Cenotaph data\n      operationId: get search\n      parameters:\n        - description: |\n            search index name\n            Possible values:\n            * `collectionsonline`\n            * `cenotaph`\n          in: path\n          name: index\n          required: true\n          schema:\n            type: string\n        - description: One of the supported elasticsearch operations like `_search` or\n            `_suggest`\n          in: path\n          name: operation\n          required: true\n          schema:\n            type: string\n        - description: One of the supported elasticsearch query parameter values for key `q`\n          in: query\n          name: q\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: search results found\n        \"400\":\n          description: bad request\n        \"404\":\n          description: not found\n      summary: Perform simple search queries over Auckland Museum Collections and\n        Cenotaph data\n      tags:\n        - search\n    post:\n      description: \u003e\n        Searches performed via this endpoint run against an\n        [Elastic](www.elastic.co) server. This endpoint mirrors the Elastic\n        search API documented\n        [here](https://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-search.html)\n\n\n        Use the\n          - `collectionsonline` index to perform searches over other all Collections data\n          - `cenotaph` index to perform searches over Cenotaph data\n      operationId: post search\n      parameters:\n        - description: |\n            search index name\n            Possible values:\n            * `collectionsonline`\n            * `cenotaph`\n          in: path\n          name: index\n          required: true\n          schema:\n            type: string\n        - description: One of the supported elasticsearch operations like `_search` or\n            `_suggest`\n          in: path\n          name: operation\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              format: application/json\n              type: object\n        description: body\n      responses:\n        \"200\":\n          description: search results found\n        \"400\":\n          description: bad request\n        \"404\":\n          description: not found\n      summary: Perform complex search queries over Auckland Museum Collections and\n        Cenotaph data\n      tags:\n        - search\n  /sparql:\n    get:\n      description: \u003e\n        You can execute your [SPARQL](http://www.w3.org/TR/rdf-sparql-query/)\n        queries against this endpoint.\n\n\n        The sparql query should be provided as the value of the request parameter `query`.\n\n        Set the `Accept` header to `application/sparql-results+xml` to get results in XML. Set it to `application/sparql-results+json` to get results in JSON. \n\n\n        **Note:** This endpoints supports [JSON-P](http://json-p.org/). In order to get a JSON-P response, set the query parameter `callback` to your preferred callback function name. The default function name is `callback()`. When using JSON-P, there is no need to set the `Accept` header because the response will always be in `application/javascript`.\n      operationId: get sparql\n      parameters:\n        - description: sparql query\n          in: query\n          name: query\n          required: true\n          schema:\n            type: string\n        - description: The [JSON-P](http://json-p.org/) callback parameter\n          in: query\n          name: callback\n          required: false\n          schema:\n            type: string\n            default: callback\n        - description: Whether to get inferred results in the response\n          in: query\n          name: infer\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        \"200\":\n          description: success\n          content:\n            application/sparql-results+json:\n              schema:\n                title: json\n                type: object\n            application/sparql-results+xml:\n              schema:\n                title: json\n                type: object\n            application/javascript:\n              schema:\n                title: json\n                type: object\n      summary: Auckland Museum SPARQL endpoint\n      tags:\n        - sparql\n    post:\n      description: \u003e\n        You can execute your [SPARQL](http://www.w3.org/TR/rdf-sparql-query/)\n        queries against this endpoint.\n\n        The sparql query should be provided as the value of the request parameter `query`.\n\n        Set the `Accept` header to `application/sparql-results+xml` to get results in XML. Set it to `application/sparql-results+json` to get results in JSON. \n      operationId: post sparql\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                query:\n                  description: sparql query\n                  type: string\n                infer:\n                  description: Whether to get inferred results in the response\n                  type: boolean\n                  default: true\n              required:\n                - query\n      responses:\n        \"200\":\n          description: success\n      summary: Auckland Museum SPARQL endpoint\n      tags:\n        - sparql\nservers:\n  - url: http://api.aucklandmuseum.com\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/aucklandmuseum.com-2.0.0-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/aucklandmuseum.com-2.0.0-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/sparql\": get: responses: 200: contents: unsupported content types: [application/sparql-results+json, application/sparql-results+xml, application/javascript]",
	"NotImplemented": [
		"unsupported content types"
	]
}