{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/franeklubi/clubi"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 34689,
			"content": "openapi: 3.0.3\ninfo:\n  title: clubi\n  version: 1.0.2\n  contact:\n    email: franek@franeklubi.com\n    name: franeklubi\n    url: 'http://franeklubi.com'\n  license:\n    name: MIT License\n    url: 'https://github.com/franeklubi/clubi/blob/master/LICENSE'\nservers:\n  - url: 'https://clubi.franeklubi.com/api'\n    variables: {}\n    description: official clubi server\npaths:\n  /register:\n    summary: Register a new user\n    post:\n      security: []\n      summary: Exchange a new user info for auth token\n      operationId: register.POST\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                email:\n                  type: string\n                password:\n                  type: string\n                password_confirmation:\n                  type: string\n                  description: \u003e-\n                    Password confirmation field (should be identical to\n                    password)\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              examples:\n                success:\n                  value: |-\n                    {\n                        \"user\": {\n                            \"username\": \"franeklubi\",\n                            \"id\": 1\n                        },\n                        \"token\": \"1|YE0BqnqzzXA5rOHCuZ6Uu9CP7lVc8qrXcyoWxO1V\"\n                    }\n        '422':\n          description: Unprocessable Entity\n          content:\n            application/json:\n              examples:\n                no_data:\n                  value: |-\n                    {\n                        \"message\": \"The given data was invalid.\",\n                        \"errors\": {\n                            \"username\": [\n                                \"The username field is required.\"\n                            ],\n                            \"email\": [\n                                \"The email field is required.\"\n                            ],\n                            \"password\": [\n                                \"The password field is required.\"\n                            ]\n                        }\n                    }\n      tags:\n        - Account\n        - Public\n  /login:\n    summary: Login an existing user\n    post:\n      security: []\n      summary: Exchange an existing user's info for auth token\n      operationId: login.POST\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                password:\n                  type: string\n                device_name:\n                  type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              examples:\n                success:\n                  value: |-\n                    {\n                        \"user\": {\n                            \"id\": 1,\n                            \"is_admin\": \"0\",\n                            \"username\": \"franeklubi\"\n                        },\n                        \"token\": \"2|1YseBF2yz0wKhmzNaxZ2wnwPZhv7AYNeR4YB4TM0\"\n                    }\n        '422':\n          description: Unprocessable Entity\n          content:\n            application/json:\n              examples:\n                no_data:\n                  value: |-\n                    {\n                        \"message\": \"The given data was invalid.\",\n                        \"errors\": {\n                            \"email\": [\n                                \"The email field is required.\"\n                            ],\n                            \"password\": [\n                                \"The password field is required.\"\n                            ],\n                            \"device_name\": [\n                                \"The device name field is required.\"\n                            ]\n                        }\n                    }\n      tags:\n        - Account\n        - Public\n  '/profile/{username}':\n    summary: Get user's profile info\n    get:\n      security: []\n      summary: Get user with profile info\n      operationId: profile.GET\n      parameters:\n        - in: path\n          name: username\n          schema:\n            type: string\n          required: true\n          description: username\n      responses:\n        '200':\n          description: Successful profile fetch\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              examples:\n                success:\n                  value: |-\n                    {\n                        \"user\": {\n                            \"id\": 1,\n                            \"is_admin\": \"0\",\n                            \"username\": \"franeklubi\",\n                            \"profile\": {\n                                \"profile_picture\": \"/const_assets/default_profile_picture.png\",\n                                \"description\": \"example description\"\n                            }\n                        }\n                    }\n                wrong_or_empty_username:\n                  value: |-\n                    {\n                        \"user\": null\n                    }\n      tags:\n        - Public\n        - Account\n  /:\n    summary: Dashboard\n    get:\n      security: []\n      summary: Get random posts or paginated user's feed\n      description: \u003e-\n        Returns one page of random posts if not authenticated OR user's feed if\n        authenticated\n      operationId: root.GET\n      tags:\n        - Public\n        - Dashboard\n      responses:\n        '200':\n          description: \u003e-\n            Cached, random posts for unauthenticated user.\n\n            Make note of the `next_page_url` - now it is empty, but you can use\n            it as an indicator as to whether there are more posts to load - and\n            them load them using GET on that link.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  posts:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Post'\n                  next_page_url:\n                    type: string\n  /popular:\n    summary: Popular groups\n    get:\n      security: []\n      summary: Get an array of the most popular groups\n      operationId: popular.GET\n      responses:\n        '200':\n          description: Array of the most popular groups\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Group'\n      tags:\n        - Public\n        - Dashboard\n  /groups/search:\n    summary: Search for groups\n    get:\n      security: []\n      summary: Search for groups by provided query\n      description: \u003e-\n        If user's logged in, They can also search for private groups they'd\n        joined\n      operationId: groups.search.GET\n      parameters:\n        - in: query\n          name: query\n          schema:\n            type: string\n          description: Groups' name or unique string id\n      responses:\n        '200':\n          description: Array of found groups\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  groups:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Group'\n                  zero_warning:\n                    description: Appears when there are no groups returned\n                    type: string\n      tags:\n        - Public\n        - Groups\n  '/groups/{group_string_id}':\n    summary: Get group's info\n    parameters:\n      - in: path\n        name: group_string_id\n        description: Group's unique string id\n        schema:\n          type: string\n        required: true\n    get:\n      security: []\n      summary: Get group's info\n      operationId: groups.group.GET\n      responses:\n        '200':\n          description: Returns group's info\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  group:\n                    $ref: '#/components/schemas/Group'\n                  editable:\n                    type: boolean\n                  is_member:\n                    type: boolean\n      tags:\n        - Public\n        - Groups\n    delete:\n      summary: Delete the specified group\n      operationId: groups.group.DELETE\n      responses:\n        '200':\n          description: Returns the deleted group\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  group:\n                    $ref: '#/components/schemas/Group'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Groups\n    post:\n      summary: Update the specified group\n      operationId: groups.group.POST\n      requestBody:\n        $ref: '#/components/requestBodies/Group'\n      responses:\n        '200':\n          description: Returns the updated group\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  group:\n                    $ref: '#/components/schemas/Group'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '422':\n          $ref: '#/components/responses/UnprocessableEntityError'\n      tags:\n        - Auth\n        - Groups\n  '/groups/{group_string_id}/posts':\n    summary: Return paginated posts for a group\n    parameters:\n      - in: path\n        name: group_string_id\n        description: Group's unique string id\n        schema:\n          type: string\n        required: true\n    get:\n      security: []\n      summary: Get paginated posts for a group\n      operationId: groups.group.posts.GET\n      responses:\n        '200':\n          description: Returns group's posts\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pagination'\n      tags:\n        - Public\n        - Posts\n    post:\n      summary: Create a post\n      operationId: groups.group.posts.POST\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                content:\n                  type: string\n                picture:\n                  type: string\n                  format: binary\n      responses:\n        '200':\n          description: Returns created post\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n      tags:\n        - Auth\n        - Posts\n  '/groups/{group_string_id}/posts/{post_id}/comments':\n    summary: Retur paginated comments for a post\n    parameters:\n      - in: path\n        name: group_string_id\n        description: Group's unique string id\n        schema:\n          type: string\n        required: true\n      - in: path\n        name: post_id\n        description: Post's id\n        schema:\n          type: string\n        required: true\n    get:\n      security: []\n      summary: Get paginated comments for a post\n      operationId: groups.group.posts.post.comments.GET\n      responses:\n        '200':\n          description: Return posts's comments\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pagination'\n      tags:\n        - Public\n        - Comments\n    post:\n      summary: Create a comment on a specified post\n      operationId: groups.group.posts.post.comments.POST\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                content:\n                  type: string\n                picture:\n                  type: string\n                  format: binary\n      responses:\n        '200':\n          description: Return created comment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Comments\n  /notifications/:\n    summary: Return user's paginated notifications or delete them\n    get:\n      summary: Get user's notifications\n      operationId: notifications.GET\n      responses:\n        '200':\n          description: Return paginated user's notifications\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pagination'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Notifications\n    delete:\n      summary: Delete all user's notifications\n      operationId: notifications.DELETE\n      responses:\n        '200':\n          description: Delete all user's notifications\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  deleted_count:\n                    type: integer\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Notifications\n  /notifications/count:\n    summary: Return number of unread notifications or mark them as read\n    get:\n      summary: Get user's number of unread notifications\n      operationId: notifications.count.GET\n      responses:\n        '200':\n          description: Return number of unread notifications\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  count:\n                    type: integer\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Notifications\n    post:\n      summary: Mark all unread notifications as read\n      operationId: notifications.count.POST\n      responses:\n        '200':\n          description: Return number of unread notifications\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  updated:\n                    type: integer\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Notifications\n  '/notifications/{notification_id}':\n    summary: Remove specific notification\n    delete:\n      parameters:\n        - in: path\n          name: notification_id\n          description: Notification's id\n          schema:\n            type: integer\n          required: true\n      summary: Delete notification\n      operationId: notifications.notification.DELETE\n      responses:\n        '200':\n          description: Return deleted notification\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  notification:\n                    $ref: '#/components/schemas/Notification'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Notifications\n  /yourGroups:\n    summary: Return user-owned groups\n    get:\n      summary: Get user-owned groups\n      operationId: yourGroups.GET\n      responses:\n        '200':\n          description: Return user-owned groups\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  groups:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Group'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Dashboard\n  /joinedGroups:\n    summary: Return user-joined groups\n    get:\n      summary: Get user-joined groups\n      operationId: joinedGroups.GET\n      responses:\n        '200':\n          description: Return user-joined groups\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  groups:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Group'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Dashboard\n  /dashboard/posts:\n    summary: Return paginated posts from user's feed\n    get:\n      summary: Get paginated posts from user's feed\n      operationId: dashboard.posts.GET\n      responses:\n        '200':\n          description: Return paginated posts from user's feed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pagination'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Dashboard\n  /dashboard/invitations:\n    summary: Return user's group invitations\n    get:\n      summary: Get user's group invitations\n      operationId: dashboard.invitations.GET\n      responses:\n        '200':\n          description: Return user's group invitations\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  invitations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Invitation'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Dashboard\n  /settings/:\n    summary: Update user's info and profile\n    post:\n      summary: Post user's info and profile\n      operationId: settings.POST\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                description:\n                  type: string\n                profile_picture:\n                  type: string\n                  format: binary\n                remove_profile_picture:\n                  type: boolean\n              required:\n                - username\n      responses:\n        '200':\n          description: Update user's info and profile\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '422':\n          $ref: '#/components/responses/UnprocessableEntityError'\n      tags:\n        - Auth\n        - Settings\n  /groups:\n    summary: Create a group\n    post:\n      summary: Create a group\n      operationId: groups.POST\n      requestBody:\n        $ref: '#/components/requestBodies/Group'\n      responses:\n        '200':\n          description: Created group's unique string id\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  string_id:\n                    type: string\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '422':\n          $ref: '#/components/responses/UnprocessableEntityError'\n      tags:\n        - Auth\n        - Groups\n  '/groups/{group_string_id}/membership':\n    summary: Toggle user's membership to group\n    post:\n      summary: Toggle user's membership to group\n      operationId: groups.group.membership.POST\n      parameters:\n        - in: path\n          name: group_string_id\n          description: Group's unique string id\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Status after operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum:\n                      - joined\n                      - left\n      tags:\n        - Auth\n        - Groups\n  '/groups/{group_string_id}/posts/{post_id}':\n    summary: Delete post\n    parameters:\n      - in: path\n        name: group_string_id\n        description: Group's unique string id\n        schema:\n          type: string\n        required: true\n      - in: path\n        name: post_id\n        description: Post's id\n        schema:\n          type: integer\n        required: true\n    delete:\n      summary: Delete specified post\n      operationId: groups.group.posts.post.POST\n      responses:\n        '200':\n          description: Returns deleted post\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Posts\n  '/groups/{group_string_id}/posts/{post_id}/likes':\n    summary: Get likes or like post\n    parameters:\n      - in: path\n        name: group_string_id\n        description: Group's unique string id\n        schema:\n          type: string\n        required: true\n      - in: path\n        name: post_id\n        description: Post's id\n        schema:\n          type: integer\n        required: true\n    get:\n      summary: Get post's likes\n      operationId: groups.group.posts.post.likes.GET\n      responses:\n        '200':\n          description: Returns index of post's likes\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Like'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Posts\n    post:\n      summary: Toggle like on a given post\n      description: ''\n      operationId: groups.group.posts.post.likes.POST\n      responses:\n        '200':\n          description: Returns like object and state after the toggle\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  state:\n                    type: string\n                    enum:\n                      - liked\n                      - unliked\n                  like:\n                    $ref: '#/components/schemas/Like'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Posts\n  '/groups/{group_string_id}/posts/{post_id}/comments/{comment_id}':\n    summary: Delete the specified comment\n    parameters:\n      - in: path\n        name: group_string_id\n        description: Group's unique string id\n        schema:\n          type: string\n        required: true\n      - in: path\n        name: post_id\n        description: Post's id\n        schema:\n          type: integer\n        required: true\n      - in: path\n        name: comment_id\n        description: comment's id\n        schema:\n          type: integer\n        required: true\n    delete:\n      summary: Delete the specified comment\n      description: ''\n      operationId: groups.group.posts.post.comments.comment.DELETE\n      responses:\n        '200':\n          description: Return the deleted comment\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  comment:\n                    $ref: '#/components/schemas/Comment'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Comments\n  '/groups/{group_string_id}/posts/{post_id}/comments/{comment_id}/likes':\n    summary: Index or toggle liked status on the specified comment\n    parameters:\n      - in: path\n        name: group_string_id\n        description: Group's unique string id\n        schema:\n          type: string\n        required: true\n      - in: path\n        name: post_id\n        description: Post's id\n        schema:\n          type: integer\n        required: true\n      - in: path\n        name: comment_id\n        description: comment's id\n        schema:\n          type: integer\n        required: true\n    get:\n      summary: Index likes for comment\n      operationId: groups.group.posts.post.comments.comment.likes.GET\n      responses:\n        '200':\n          description: Return likes array for comment\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  likes:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Like'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Comments\n    post:\n      summary: Toggle liked status on the specified comment\n      operationId: groups.group.posts.post.comments.comment.likes.POST\n      responses:\n        '200':\n          description: \u003e-\n            Return liked status after the operation and the corresponding like\n            object\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  state:\n                    type: string\n                    enum:\n                      - liked\n                      - unliked\n                  like:\n                    $ref: '#/components/schemas/Like'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Comments\n  '/groups/{group_string_id}/invitations':\n    summary: Index group's invitations or make one\n    parameters:\n      - in: path\n        name: group_string_id\n        description: Group's unique string id\n        schema:\n          type: string\n        required: true\n    get:\n      summary: Return group's invitations\n      operationId: groups.group.invitations.GET\n      responses:\n        '200':\n          description: Return group's invitations\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  invitations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Invitation'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Invitations\n    post:\n      summary: Create an invitation\n      operationId: groups.group.invitations.POST\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n              required:\n                - username\n      responses:\n        '200':\n          description: Return the created invitation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  invitation:\n                    $ref: '#/components/schemas/Invitation'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '422':\n          $ref: '#/components/responses/UnprocessableEntityError'\n      tags:\n        - Auth\n        - Invitations\n  '/groups/{group_string_id}/invitations/{invitation_id}':\n    summary: Delete or admin-confirm an invitation\n    parameters:\n      - in: path\n        name: group_string_id\n        description: Group's unique string id\n        schema:\n          type: string\n        required: true\n      - in: path\n        name: invitation_id\n        description: Invitation's id\n        schema:\n          type: integer\n        required: true\n    delete:\n      summary: Delete an invitation\n      operationId: groups.group.invitations.invitation.DELETE\n      responses:\n        '200':\n          description: Return the deleted invitation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  invitation:\n                    $ref: '#/components/schemas/Invitation'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Invitations\n    post:\n      summary: Admin-confirm an invitation\n      description: \u003e-\n        When an invitation is made from inside of a private group by a user\n        without special priviliges, admin has to confirm it first. This endpoint\n        will only work for group's or site admin\n      operationId: groups.group.invitations.invitation.POST\n      responses:\n        '200':\n          description: Return confirmed invitation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  invitation:\n                    $ref: '#/components/schemas/Invitation'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n      tags:\n        - Auth\n        - Invitations\ncomponents:\n  requestBodies:\n    Group:\n      content:\n        multipart/form-data:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n              banner_picture:\n                type: string\n                format: binary\n              private:\n                type: boolean\n              remove_banner_picture:\n                type: boolean\n            required:\n              - name\n  responses:\n    UnauthorizedError:\n      description: Bearer token is missing or invalid\n    UnprocessableEntityError:\n      description: Unprocessable entity\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: opaque token\n  schemas:\n    Group:\n      type: object\n      properties:\n        id:\n          type: integer\n        created_at:\n          type: string\n        updated_at:\n          type: string\n        owner_id:\n          type: integer\n        name:\n          type: string\n        id_string:\n          description: unique string id\n          type: string\n        banner_picture:\n          description: relative url to banner picture\n          type: string\n        private:\n          type: boolean\n        user_count:\n          type: integer\n        post_count:\n          type: integer\n        owner:\n          description: 'OWNER MIGHT NOT BE LOADED, CHECK BEFORE USING'\n          type: object\n          properties:\n            id:\n              type: integer\n            is_admin:\n              type: boolean\n            usename:\n              type: string\n    Like:\n      type: object\n      properties:\n        id:\n          type: integer\n        user_id:\n          type: integer\n    Profile:\n      type: object\n      properties:\n        profile_picture:\n          description: relative url path to profile picture\n          type: string\n        description:\n          type: string\n    User:\n      type: object\n      description: \u003e-\n        PROFILE MIGHT NOT BE LOADED, CHECK IF THE PROFILE IS LOADED BEFORE\n        ACCESSING\n      properties:\n        id:\n          type: integer\n        is_admin:\n          type: boolean\n        username:\n          type: string\n        profile:\n          $ref: '#/components/schemas/Profile'\n    Post:\n      type: object\n      properties:\n        id:\n          type: integer\n        created_at:\n          type: string\n        updated_at:\n          type: string\n        user_id:\n          type: integer\n        group_id:\n          type: integer\n        content:\n          type: string\n        picture:\n          description: relative url path to picture if posted\n          type: string\n        user:\n          $ref: '#/components/schemas/User'\n        group:\n          $ref: '#/components/schemas/Group'\n        likes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Like'\n    Comment:\n      type: object\n      properties:\n        id:\n          type: integer\n        created_at:\n          type: string\n        updated_at:\n          type: string\n        post_id:\n          type: integer\n        user_id:\n          type: integer\n        content:\n          type: string\n        picture:\n          description: relative url of the image if posted\n          type: string\n        user:\n          $ref: '#/components/schemas/User'\n        likes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Like'\n    Pagination:\n      type: object\n      properties:\n        current_page:\n          type: integer\n        first_page_url:\n          type: string\n        from:\n          type: integer\n        next_page_url:\n          type: string\n        path:\n          type: string\n        per_page\":\n          type: string\n        prev_page_url:\n          type: string\n        to:\n          type: integer\n        data:\n          type: array\n          description: 'Depends on endpoint, will return either paginated posts or comments'\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/Post'\n              - $ref: '#/components/schemas/Comment'\n              - $ref: '#/components/schemas/Notification'\n    Notification:\n      type: object\n      properties:\n        id:\n          type: integer\n        created_at:\n          type: string\n        updated_at:\n          type: string\n        user_id:\n          type: integer\n        from_id:\n          description: Sender's id\n          type: integer\n        message:\n          type: string\n        link:\n          description: Link to follow if clicked\n          type: string\n        seen:\n          type: boolean\n    Invitation:\n      type: object\n      properties:\n        id:\n          type: integer\n        created_at:\n          type: string\n        updated_at:\n          type: string\n        from_id:\n          type: integer\n        group_id:\n          type: integer\n        user_id:\n          type: integer\n        admin_accepted:\n          type: boolean\n        user_accepted:\n          type: boolean\n        named_state:\n          description: You'd show this state in Your gui\n          type: string\n        group:\n          $ref: '#/components/schemas/Group'\ntags:\n  - name: Public\n    description: Paths accessible without authentication\n  - name: Auth\n    description: Paths accessible only after authentication\n  - name: Account\n    description: Paths pertaining to user's account\n  - name: Settings\n  - name: Dashboard\n  - name: Notifications\n  - name: Invitations\n  - name: Groups\n  - name: Posts\n  - name: Comments\nsecurity:\n  - bearerAuth: []\n",
			"canonicalURL": "/github.com/franeklubi/clubi@cd63c710cd36c379e162fd58800e9f2f8467e73a/-/blob/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/franeklubi/clubi/blob/cd63c710cd36c379e162fd58800e9f2f8467e73a/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/register\": post: responses: 200: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema"
	]
}