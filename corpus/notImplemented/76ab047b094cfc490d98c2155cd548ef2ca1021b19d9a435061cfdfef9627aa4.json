{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/heilaaks/snippy"
		},
		"file": {
			"name": "swagger-3.0.yml",
			"size": 0,
			"path": "snippy/data/server/openapi/swagger-3.0.yml",
			"byteSize": 47171,
			"content": "openapi: 3.0.1\ninfo:\n  title: Snippy - Software development notes\n  description: Snippy is a software development and maintenance notes manager. It\n    allows organizing and sharing examples and solutions from self hosted or shared\n    storage.\n  termsOfService: https://github.com/heilaaks/snippy\n  contact:\n    email: laaksonen.heikki.j@gmail.com\n  license:\n    name: GNU Affero General Public License v3.0 or later\n    url: https://github.com/heilaaks/snippy/blob/master/LICENSE\n  version: 0.11.0\nservers:\n- url: http://localhost:8080/api/snippy/rest\n- url: https://localhost:8080/api/snippy/rest\npaths:\n  /{category}:\n    get:\n      tags:\n      - content\n      summary: Search resource\n      parameters:\n      - name: category\n        in: path\n        description: |\n          # Brief\n\n          Resource category.\n        required: true\n        schema:\n          type: string\n          enum:\n          - snippets\n          - solutions\n          - references\n      - name: sall\n        in: query\n        description: |\n          # Brief\n\n          Search given keywords.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: stag\n        in: query\n        description: |\n          # Brief\n\n          Limit search to resources that have any of the given tags.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: sgrp\n        in: query\n        description: |\n          # Brief\n\n          Limit search to resources that are in any of the given groups.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: digest\n        in: query\n        description: |\n          # Brief\n\n          Limit search to resources that are have given digest.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: uuid\n        in: query\n        description: |\n          # Brief\n\n          Limit search to resources that are have given uuid.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: filter\n        in: query\n        description: |\n          # Brief\n\n          Filter search results with a regexp.\n        schema:\n          type: string\n          default: \".\"\n      - name: limit\n        in: query\n        description: |\n          # Brief\n\n          Limit resources in search result.\n        schema:\n          type: string\n          default: \"20\"\n      - name: fields\n        in: query\n        description: |\n          # Brief\n\n          Limit fields that are returned in result list.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n            enum:\n            - category\n            - data\n            - brief\n            - description\n            - name\n            - groups\n            - tags\n            - links\n            - source\n            - versions\n            - languages\n            - filename\n            - created\n            - updated\n            - uuid\n            - digest\n      - name: sort\n        in: query\n        description: |\n          # Brief\n\n          Sort based on defined field.\n        schema:\n          type: string\n          default: brief\n          enum:\n          - category\n          - data\n          - brief\n          - description\n          - name\n          - groups\n          - tags\n          - links\n          - source\n          - versions\n          - languages\n          - filename\n          - created\n          - updated\n          - uuid\n          - digest\n      - name: offset\n        in: query\n        description: |\n          # Brief\n\n          Offset from the beginning of the search results.\n        schema:\n          type: string\n          default: \"0\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseCollectionGet'\n        400:\n          description: Request not syntactically correct\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        404:\n          description: Resource not found\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        500:\n          description: Internal server error\n          content: {}\n    post:\n      tags:\n      - content\n      summary: Add new resource in defined category.\n      parameters:\n      - name: category\n        in: path\n        description: |\n          # Brief\n\n          Resource category.\n        required: true\n        schema:\n          type: string\n          enum:\n          - snippets\n          - solutions\n          - references\n      requestBody:\n        description: |\n          # Brief\n\n          Create or update existing resource.\n        content:\n          application/vnd.api+json; charset=UTF-8:\n            schema:\n              $ref: '#/components/schemas/requestResource'\n        required: true\n      responses:\n        201:\n          description: Resource created\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/responseCollectionPost'\n        400:\n          description: Request not syntactically correct\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        403:\n          description: Using client generated ID is not supported\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        500:\n          description: Internal server error\n          content: {}\n  /{category}/{id}:\n    get:\n      tags:\n      - content\n      summary: Search defined resource based on given identity.\n      parameters:\n      - name: category\n        in: path\n        description: |\n          # Brief\n\n          Resource category.\n        required: true\n        schema:\n          type: string\n          enum:\n          - snippets\n          - solutions\n          - references\n      - name: id\n        in: path\n        description: |\n          # Brief\n\n          Resource identity that can be either digest or UUID. Partial identities are allowed\n          but they may result multiple matching resources which is an error. The ``id`` path\n          parameter must uniquely identify the requested resource.\n\n          Even though the code supports digest and partial identities, it is recommended to\n          use full length UUID. The full length UUID remains the same for whole life time of\n          the resource. The digest will change when the resource attributes change.\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseResource'\n        400:\n          description: Request not syntactically correct\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        404:\n          description: Resource not found\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        500:\n          description: Internal server error\n          content: {}\n    put:\n      tags:\n      - content\n      summary: Update defined resource based on given identity.\n      parameters:\n      - name: category\n        in: path\n        description: |\n          # Brief\n\n          Resource category.\n        required: true\n        schema:\n          type: string\n          enum:\n          - snippets\n          - solutions\n          - references\n      - name: id\n        in: path\n        description: |\n          # Brief\n\n          Resource identity that can be either digest or UUID. Partial identities are allowed\n          but they may result multiple matching resources which is an error. The ``id`` path\n          parameter must uniquely identify the requested resource.\n\n          Even though the code supports digest and partial identities, it is recommended to\n          use full length UUID. The full length UUID remains the same for whole life time of\n          the resource. The digest will change when the resource attributes change.\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: |\n          # Brief\n\n          Create or update existing resource.\n        content:\n          application/vnd.api+json; charset=UTF-8:\n            schema:\n              $ref: '#/components/schemas/requestResource'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseResource'\n        400:\n          description: Request not syntactically correct\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        403:\n          description: Using client generated ID is not supported\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        404:\n          description: Resource not found\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        500:\n          description: Internal server error\n          content: {}\n    post:\n      tags:\n      - content\n      summary: Override POST with PUT, PATCH or DELETE\n      parameters:\n      - name: category\n        in: path\n        description: |\n          # Brief\n\n          Resource category.\n        required: true\n        schema:\n          type: string\n          enum:\n          - snippets\n          - solutions\n          - references\n      - name: id\n        in: path\n        description: |\n          # Brief\n\n          Resource identity that can be either digest or UUID. Partial identities are allowed\n          but they may result multiple matching resources which is an error. The ``id`` path\n          parameter must uniquely identify the requested resource.\n\n          Even though the code supports digest and partial identities, it is recommended to\n          use full length UUID. The full length UUID remains the same for whole life time of\n          the resource. The digest will change when the resource attributes change.\n        required: true\n        schema:\n          type: string\n      - name: X-HTTP-Method-Override\n        in: header\n        description: |\n          # Brief\n\n          Override POST method with PUT, PATCH or DELETE.\n        required: true\n        schema:\n          type: string\n          enum:\n          - PUT\n          - PATCH\n          - DELETE\n      requestBody:\n        description: |\n          # Brief\n\n          Create or update existing resource.\n        content:\n          application/vnd.api+json; charset=UTF-8:\n            schema:\n              $ref: '#/components/schemas/requestResource'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseResource'\n        204:\n          description: Resource deleted\n          content: {}\n        400:\n          description: Request not syntactically correct\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        403:\n          description: Using client generated ID is not supported\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        404:\n          description: Resource not found\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        500:\n          description: Internal server error\n          content: {}\n    delete:\n      tags:\n      - content\n      summary: Delete defined resource based on given identity.\n      parameters:\n      - name: category\n        in: path\n        description: |\n          # Brief\n\n          Resource category.\n        required: true\n        schema:\n          type: string\n          enum:\n          - snippets\n          - solutions\n          - references\n      - name: id\n        in: path\n        description: |\n          # Brief\n\n          Resource identity that can be either digest or UUID. Partial identities are allowed\n          but they may result multiple matching resources which is an error. The ``id`` path\n          parameter must uniquely identify the requested resource.\n\n          Even though the code supports digest and partial identities, it is recommended to\n          use full length UUID. The full length UUID remains the same for whole life time of\n          the resource. The digest will change when the resource attributes change.\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: Resource deleted\n          content: {}\n        400:\n          description: Request not syntactically correct\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        404:\n          description: Resource not found\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        409:\n          description: More than one resource found\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        500:\n          description: Internal server error\n          content: {}\n    patch:\n      tags:\n      - content\n      summary: Update defined resource based on given identity.\n      parameters:\n      - name: category\n        in: path\n        description: |\n          # Brief\n\n          Resource category.\n        required: true\n        schema:\n          type: string\n          enum:\n          - snippets\n          - solutions\n          - references\n      - name: id\n        in: path\n        description: |\n          # Brief\n\n          Resource identity that can be either digest or UUID. Partial identities are allowed\n          but they may result multiple matching resources which is an error. The ``id`` path\n          parameter must uniquely identify the requested resource.\n\n          Even though the code supports digest and partial identities, it is recommended to\n          use full length UUID. The full length UUID remains the same for whole life time of\n          the resource. The digest will change when the resource attributes change.\n        required: true\n        schema:\n          type: string\n      requestBody:\n        description: |\n          # Brief\n\n          Create or update existing resource.\n        content:\n          application/vnd.api+json; charset=UTF-8:\n            schema:\n              $ref: '#/components/schemas/requestResource'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseResource'\n        400:\n          description: Request not syntactically correct\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        403:\n          description: Using client generated ID is not supported\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        404:\n          description: Resource not found\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        500:\n          description: Internal server error\n          content: {}\n  /{category}{id}{field}:\n    get:\n      tags:\n      - content\n      summary: Get resource attribute.\n      parameters:\n      - name: category\n        in: path\n        description: |\n          # Brief\n\n          Resource category.\n        required: true\n        schema:\n          type: string\n          enum:\n          - snippets\n          - solutions\n          - references\n      - name: id\n        in: path\n        description: |\n          # Brief\n\n          Resource identity that can be either digest or UUID. Partial identities are allowed\n          but they may result multiple matching resources which is an error. The ``id`` path\n          parameter must uniquely identify the requested resource.\n\n          Even though the code supports digest and partial identities, it is recommended to\n          use full length UUID. The full length UUID remains the same for whole life time of\n          the resource. The digest will change when the resource attributes change.\n        required: true\n        schema:\n          type: string\n      - name: field\n        in: path\n        description: |\n          # Brief\n\n          Resource field.\n        required: true\n        schema:\n          type: string\n          enum:\n          - category\n          - data\n          - brief\n          - description\n          - name\n          - groups\n          - tags\n          - links\n          - source\n          - versions\n          - languages\n          - filename\n          - created\n          - updated\n          - uuid\n          - digest\n      - name: sall\n        in: query\n        description: |\n          # Brief\n\n          Search given keywords.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: stag\n        in: query\n        description: |\n          # Brief\n\n          Limit search to resources that have any of the given tags.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: sgrp\n        in: query\n        description: |\n          # Brief\n\n          Limit search to resources that are in any of the given groups.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: digest\n        in: query\n        description: |\n          # Brief\n\n          Limit search to resources that are have given digest.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: uuid\n        in: query\n        description: |\n          # Brief\n\n          Limit search to resources that are have given uuid.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: filter\n        in: query\n        description: |\n          # Brief\n\n          Filter search results with a regexp.\n        schema:\n          type: string\n          default: \".\"\n      - name: limit\n        in: query\n        description: |\n          # Brief\n\n          Limit resources in search result.\n        schema:\n          type: string\n          default: \"20\"\n      - name: fields\n        in: query\n        description: |\n          # Brief\n\n          Limit fields that are returned in result list.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n            enum:\n            - category\n            - data\n            - brief\n            - description\n            - name\n            - groups\n            - tags\n            - links\n            - source\n            - versions\n            - languages\n            - filename\n            - created\n            - updated\n            - uuid\n            - digest\n      - name: sort\n        in: query\n        description: |\n          # Brief\n\n          Sort based on defined field.\n        schema:\n          type: string\n          default: brief\n          enum:\n          - category\n          - data\n          - brief\n          - description\n          - name\n          - groups\n          - tags\n          - links\n          - source\n          - versions\n          - languages\n          - filename\n          - created\n          - updated\n          - uuid\n          - digest\n      - name: offset\n        in: query\n        description: |\n          # Brief\n\n          Offset from the beginning of the search results.\n        schema:\n          type: string\n          default: \"0\"\n      responses:\n        200:\n          description: OK\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseResource'\n        400:\n          description: Request not syntactically correct\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        404:\n          description: Resource not found\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        500:\n          description: Internal server error\n          content: {}\n  /tags:\n    get:\n      tags:\n      - fields\n      summary: Get unique tags.\n      parameters:\n      - name: scat\n        in: query\n        description: |\n          # Brief\n\n          Limit search to resources in defined categories.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n            enum:\n            - snippet\n            - solution\n            - reference\n      - name: sall\n        in: query\n        description: |\n          # Brief\n\n          Search given keywords.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: stag\n        in: query\n        description: |\n          # Brief\n\n          Limit search to resources that have any of the given tags.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: sgrp\n        in: query\n        description: |\n          # Brief\n\n          Limit search to resources that are in any of the given groups.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseTags'\n        400:\n          description: Request not syntactically correct\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        404:\n          description: Resource not found\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        500:\n          description: Internal server error\n          content: {}\n  /groups:\n    get:\n      tags:\n      - fields\n      summary: Get unique groups.\n      parameters:\n      - name: scat\n        in: query\n        description: |\n          # Brief\n\n          Limit search to resources in defined categories.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n            enum:\n            - snippet\n            - solution\n            - reference\n      - name: sall\n        in: query\n        description: |\n          # Brief\n\n          Search given keywords.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: stag\n        in: query\n        description: |\n          # Brief\n\n          Limit search to resources that have any of the given tags.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      - name: sgrp\n        in: query\n        description: |\n          # Brief\n\n          Limit search to resources that are in any of the given groups.\n        style: form\n        explode: false\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseGroups'\n        400:\n          description: Request not syntactically correct\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        404:\n          description: Resource not found\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseErrors'\n        500:\n          description: Internal server error\n          content: {}\n  /:\n    get:\n      tags:\n      - hello\n      summary: Get server hello.\n      responses:\n        200:\n          description: OK\n          content:\n            application/vnd.api+json; charset=UTF-8:\n              schema:\n                $ref: '#/components/schemas/responseHello'\ncomponents:\n  schemas:\n    attributeBrief:\n      type: string\n      description: |\n        # Brief\n\n        Optional brief description of the resource.\n      default: \"\"\n    requestResource:\n      required:\n      - data\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/requestData'\n    requestAttributes:\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/attributeData'\n        brief:\n          $ref: '#/components/schemas/attributeBrief'\n        description:\n          $ref: '#/components/schemas/attributeDescription'\n        name:\n          $ref: '#/components/schemas/attributeName'\n        groups:\n          $ref: '#/components/schemas/attributeGroups'\n        tags:\n          $ref: '#/components/schemas/attributeTags'\n        links:\n          $ref: '#/components/schemas/attributeLinks'\n        source:\n          $ref: '#/components/schemas/attributeSource'\n        versions:\n          $ref: '#/components/schemas/attributeVersions'\n        languages:\n          $ref: '#/components/schemas/attributeLanguages'\n        filename:\n          $ref: '#/components/schemas/attributeFilename'\n      description: |\n        # Brief\n\n        Resource `data` attributes for all API endoints HTTP requests.\n\n        Different resource categories require different attributes. Creating and updating resources have\n        different mandatory resource attribute requirements. For example `snippets` require `data` but\n        `references` require `links` attribute. PATCH and PUT can be send without `data` attribute for\n        `snippets`.\n\n        Because of these reasons, JSON schema definition does not define the required properties.\n    requestCollection:\n      required:\n      - data\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/requestData'\n    metaResponse:\n      required:\n      - count\n      - limit\n      - offset\n      - total\n      type: object\n      properties:\n        count:\n          type: string\n          description: Number of resources in the data object.\n        limit:\n          type: string\n          description: The search limit used in request.\n        offset:\n          type: string\n          description: The search offset used in request.\n        total:\n          type: string\n          description: Total number of search results without limit being applied.\n    attributeFilename:\n      type: string\n      description: |\n        # Brief\n\n        Optional filename. This attribute can be used for example to export the resource into file\n        which name is defined by this attribute-\n      default: \"\"\n    responseDataTags:\n      required:\n      - attributes\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n          - tags\n        attributes:\n          $ref: '#/components/schemas/responseAttributesTags'\n    paginationLinks:\n      required:\n      - first\n      - last\n      - self\n      type: object\n      properties:\n        self:\n          type: string\n          description: Pagination link to this page.\n          format: uri\n        first:\n          type: string\n          description: Pagination link to first page.\n          format: uri\n        next:\n          type: string\n          description: Pagination link to next page.\n          format: uri\n        prev:\n          type: string\n          description: Pagination link to previous page.\n          format: uri\n        last:\n          type: string\n          description: Pagination link to last page.\n          format: uri\n    responseAttributes:\n      type: object\n      properties:\n        category:\n          $ref: '#/components/schemas/attributeCategory'\n        data:\n          $ref: '#/components/schemas/attributeData'\n        brief:\n          $ref: '#/components/schemas/attributeBrief'\n        description:\n          $ref: '#/components/schemas/attributeDescription'\n        name:\n          $ref: '#/components/schemas/attributeName'\n        groups:\n          $ref: '#/components/schemas/attributeGroups'\n        tags:\n          $ref: '#/components/schemas/attributeTags'\n        links:\n          $ref: '#/components/schemas/attributeLinks'\n        source:\n          $ref: '#/components/schemas/attributeSource'\n        versions:\n          $ref: '#/components/schemas/attributeVersions'\n        languages:\n          $ref: '#/components/schemas/attributeLanguages'\n        filename:\n          $ref: '#/components/schemas/attributeFilename'\n        created:\n          $ref: '#/components/schemas/attributeCreated'\n        updated:\n          $ref: '#/components/schemas/attributeUpdated'\n        uuid:\n          $ref: '#/components/schemas/attributeUuid'\n        digest:\n          $ref: '#/components/schemas/attributeDigest'\n      description: |\n        # Brief\n\n        Resource `data` attributes for all content API endoints.\n\n        Different resource categories require different attributes. Creating and updating resources have\n        different mandatory resource attribute requirements. For example `snippets` require `data` but\n        `references` require `links` attribute. PATCH and PUT can be send without `data` attribute for\n        `snippets`.\n\n        Because of these reasons, JSON schema definition does not define the required properties.\n    attributeDescription:\n      type: string\n      description: |\n        # Brief\n\n        Optional long description of the resource.\n      default: \"\"\n    responseData:\n      required:\n      - attributes\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n          - snippet\n          - solution\n          - reference\n        id:\n          type: string\n        attributes:\n          $ref: '#/components/schemas/responseAttributes'\n    responseErrors:\n      required:\n      - errors\n      - meta\n      type: object\n      properties:\n        meta:\n          $ref: '#/components/schemas/metaInfo'\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/error'\n    responseAttributesGroups:\n      type: object\n      properties:\n        groups:\n          $ref: '#/components/schemas/attributeGroupsDictionary'\n      description: |\n        # Brief\n\n        Resource `data` attributes groups API endpont.\n    error:\n      required:\n      - module\n      - status\n      - statusString\n      - title\n      type: object\n      properties:\n        status:\n          type: string\n          description: HTTP status code.\n        statusString:\n          type: string\n          description: HTTP status as text string.\n        module:\n          type: string\n          description: Location of error.\n        title:\n          type: string\n          description: Message describing the error.\n    attributeCreated:\n      type: string\n      description: |\n        # Brief\n\n        Automatically generated UTC timestamp when the resource is created. The time is defined with\n        RFC 3339 profile of the ISO 8601 specification.\n    responseAttributesTags:\n      type: object\n      properties:\n        tags:\n          $ref: '#/components/schemas/attributeTagsDictionary'\n      description: |\n        # Brief\n\n        Resource `data` attributes tags API endpont.\n    attributeUuid:\n      type: string\n      description: |\n        # Brief\n\n        Automatically assigned UUID for the resource.\n    attributeName:\n      type: string\n      description: |\n        # Brief\n\n        Optional name for the resource.\n      default: \"\"\n    responseGroups:\n      required:\n      - data\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/responseDataGroups'\n    requestData:\n      required:\n      - attributes\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n          - snippet\n          - solution\n          - reference\n        attributes:\n          $ref: '#/components/schemas/requestAttributes'\n    attributeGroups:\n      type: array\n      description: |\n        # Brief\n\n        Optional list of groups to which the resource belongs.\n      items:\n        type: string\n    attributeGroupsDictionary:\n      type: object\n      additionalProperties:\n        type: integer\n      description: |\n        # Brief\n\n        Unique values for groups with count for each group value.\n      example:\n        python: 8\n        java: 1\n    attributeUpdated:\n      type: string\n      description: |\n        # Brief\n\n        Automatically generated UTC timestamp for the latest update. The time is defined with RFC 3339\n        profile of the ISO 8601 specification.\n    responseResource:\n      required:\n      - data\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/responseData'\n        link:\n          $ref: '#/components/schemas/resourceLink'\n    attributeTagsDictionary:\n      type: object\n      additionalProperties:\n        type: integer\n      description: |\n        # Brief\n\n        Unique values for tags with count for each tag value.\n      example:\n        linux: 10\n        docker: 4\n    responseDataGroups:\n      required:\n      - attributes\n      - type\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n          - groups\n        attributes:\n          $ref: '#/components/schemas/responseAttributesGroups'\n    attributeVersions:\n      type: array\n      description: |\n        # Brief\n\n        Optional list of versions related to the resource.\n      items:\n        type: string\n    attributeDigest:\n      type: string\n      description: |\n        # Brief\n\n        Automatically assigned message digest that uniquely identifies the resource.\n    responseCollectionGet:\n      required:\n      - data\n      - meta\n      type: object\n      properties:\n        meta:\n          $ref: '#/components/schemas/metaResponse'\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/responseData'\n        links:\n          $ref: '#/components/schemas/paginationLinks'\n    responseTags:\n      required:\n      - data\n      type: object\n      properties:\n        data:\n          $ref: '#/components/schemas/responseDataTags'\n    metaInfo:\n      required:\n      - docs\n      - homepage\n      - openapi\n      - version\n      type: object\n      properties:\n        docs:\n          type: string\n          description: Location of the public documentation.\n        homepage:\n          type: string\n          description: Server homepage.\n        openapi:\n          type: string\n          description: OpenAPI specification.\n        version:\n          type: string\n          description: Server version.\n    attributeCategory:\n      type: string\n      description: |\n        # Brief\n\n        Automatically assigned resource category.\n      enum:\n      - snippet\n      - solution\n      - reference\n    attributeTags:\n      type: array\n      description: |\n        # Brief\n\n        Optional list of tags.\n      items:\n        type: string\n    attributeLanguages:\n      type: array\n      description: |\n        # Brief\n\n        Optional list of languages related to the resource.\n      items:\n        type: string\n    attributeSource:\n      type: string\n      description: |\n        # Brief\n\n        Optional external source for the resource.\"\n      default: \"\"\n    responseCollectionPost:\n      required:\n      - data\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/responseData'\n    responseHello:\n      required:\n      - meta\n      type: object\n      properties:\n        meta:\n          $ref: '#/components/schemas/metaInfo'\n    attributeLinks:\n      type: array\n      description: |\n        # Brief\n\n        Optional list of links.\n      items:\n        type: string\n    resourceLink:\n      type: object\n      properties:\n        self:\n          type: string\n          description: Link pointing to resource.\n    pluginAttributes:\n      type: object\n      properties:\n        category:\n          $ref: '#/components/schemas/attributeCategory'\n        data:\n          $ref: '#/components/schemas/attributeData'\n        brief:\n          $ref: '#/components/schemas/attributeBrief'\n        description:\n          $ref: '#/components/schemas/attributeDescription'\n        name:\n          $ref: '#/components/schemas/attributeName'\n        groups:\n          $ref: '#/components/schemas/attributeGroups'\n        tags:\n          $ref: '#/components/schemas/attributeTags'\n        links:\n          $ref: '#/components/schemas/attributeLinks'\n        source:\n          $ref: '#/components/schemas/attributeSource'\n        versions:\n          $ref: '#/components/schemas/attributeVersions'\n        languages:\n          $ref: '#/components/schemas/attributeLanguages'\n        filename:\n          $ref: '#/components/schemas/attributeFilename'\n      description: |\n        # Brief\n\n        JSON schema validation for attributes read with external plugins like 'Snippy-tldr'.\n\n        Different resource categories require different attributes. For example `snippets` require `data`\n        but `references` require `links` attribute. Because of this, the JSON schema definition does not\n        define the required properties.\n    attributeData:\n      type: array\n      description: |\n        # Brief\n\n        Resource data attribute.\n      items:\n        type: string\n  responses:\n    200-collection:\n      description: OK\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/responseCollectionGet'\n    200-hello:\n      description: OK\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/responseHello'\n    201:\n      description: Resource created\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/responseCollectionPost'\n    200-groups:\n      description: OK\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/responseGroups'\n    400:\n      description: Request not syntactically correct\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/responseErrors'\n    200-resource:\n      description: OK\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/responseResource'\n    500:\n      description: Internal server error\n      content: {}\n    204:\n      description: Resource deleted\n      content: {}\n    403:\n      description: Using client generated ID is not supported\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/responseErrors'\n    404:\n      description: Resource not found\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/responseErrors'\n    200-tags:\n      description: OK\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/responseTags'\n    409:\n      description: More than one resource found\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/responseErrors'\n  parameters:\n    offset:\n      name: offset\n      in: query\n      description: |\n        # Brief\n\n        Offset from the beginning of the search results.\n      schema:\n        type: string\n        default: \"0\"\n    sgrp:\n      name: sgrp\n      in: query\n      description: |\n        # Brief\n\n        Limit search to resources that are in any of the given groups.\n      style: form\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n    sort:\n      name: sort\n      in: query\n      description: |\n        # Brief\n\n        Sort based on defined field.\n      schema:\n        type: string\n        default: brief\n        enum:\n        - category\n        - data\n        - brief\n        - description\n        - name\n        - groups\n        - tags\n        - links\n        - source\n        - versions\n        - languages\n        - filename\n        - created\n        - updated\n        - uuid\n        - digest\n    x-http-method-override:\n      name: X-HTTP-Method-Override\n      in: header\n      description: |\n        # Brief\n\n        Override POST method with PUT, PATCH or DELETE.\n      required: true\n      schema:\n        type: string\n        enum:\n        - PUT\n        - PATCH\n        - DELETE\n    uuid:\n      name: uuid\n      in: query\n      description: |\n        # Brief\n\n        Limit search to resources that are have given uuid.\n      style: form\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n      example:\n      - 27cd5827-b6ef-4067-b5ac-3ceac07dde9f\n      - 27cd5827-b6ef\n      - 27cd5827-b6ef,12c2dff8-4e23\n    filter:\n      name: filter\n      in: query\n      description: |\n        # Brief\n\n        Filter search results with a regexp.\n      schema:\n        type: string\n        default: \".\"\n    stag:\n      name: stag\n      in: query\n      description: |\n        # Brief\n\n        Limit search to resources that have any of the given tags.\n      style: form\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n      example:\n      - kafka\n      - kafka,elasticsearch\n    field:\n      name: field\n      in: path\n      description: |\n        # Brief\n\n        Resource field.\n      required: true\n      schema:\n        type: string\n        enum:\n        - category\n        - data\n        - brief\n        - description\n        - name\n        - groups\n        - tags\n        - links\n        - source\n        - versions\n        - languages\n        - filename\n        - created\n        - updated\n        - uuid\n        - digest\n      example: brief\n    scat:\n      name: scat\n      in: query\n      description: |\n        # Brief\n\n        Limit search to resources in defined categories.\n      style: form\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n          - snippet\n          - solution\n          - reference\n      example:\n      - snippet\n      - snippet,solution\n    digest:\n      name: digest\n      in: query\n      description: |\n        # Brief\n\n        Limit search to resources that are have given digest.\n      style: form\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n      example:\n      - 54e41e9b52a02b631b5c65a6a053fcbabc77ccd42b02c64fdfbc76efdb18e319\n      - 54e41e9b52a02b63\n      - 54e41e9b52a02b63,db712a82662d6932\n    limit:\n      name: limit\n      in: query\n      description: |\n        # Brief\n\n        Limit resources in search result.\n      schema:\n        type: string\n        default: \"20\"\n    id:\n      name: id\n      in: path\n      description: |\n        # Brief\n\n        Resource identity that can be either digest or UUID. Partial identities are allowed\n        but they may result multiple matching resources which is an error. The ``id`` path\n        parameter must uniquely identify the requested resource.\n\n        Even though the code supports digest and partial identities, it is recommended to\n        use full length UUID. The full length UUID remains the same for whole life time of\n        the resource. The digest will change when the resource attributes change.\n      required: true\n      schema:\n        type: string\n      example: 27cd5827-b6ef-4067-b5ac-3ceac07dde9f\n    sall:\n      name: sall\n      in: query\n      description: |\n        # Brief\n\n        Search given keywords.\n      style: form\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n      example:\n      - python\n      - python,docker\n    category:\n      name: category\n      in: path\n      description: |\n        # Brief\n\n        Resource category.\n      required: true\n      schema:\n        type: string\n        enum:\n        - snippets\n        - solutions\n        - references\n      example: snippets\n    fields:\n      name: fields\n      in: query\n      description: |\n        # Brief\n\n        Limit fields that are returned in result list.\n      style: form\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n          - category\n          - data\n          - brief\n          - description\n          - name\n          - groups\n          - tags\n          - links\n          - source\n          - versions\n          - languages\n          - filename\n          - created\n          - updated\n          - uuid\n          - digest\n  requestBodies:\n    requestResource:\n      description: |\n        # Brief\n\n        Create or update existing resource.\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/requestResource'\n      required: true\n    requestCollection:\n      description: |\n        # Brief\n\n        Create list of resources.\n      content:\n        '*/*':\n          schema:\n            $ref: '#/components/schemas/requestCollection'\n      required: true\n",
			"canonicalURL": "/github.com/heilaaks/snippy@904439ca1fc29edc06c48da66e7663e18e0aea99/-/blob/snippy/data/server/openapi/swagger-3.0.yml",
			"externalURLs": [
				{
					"url": "https://github.com/heilaaks/snippy/blob/904439ca1fc29edc06c48da66e7663e18e0aea99/snippy/data/server/openapi/swagger-3.0.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/{category}{id}{field}\": get: responses: 200: contents: unsupported content types: [application/vnd.api+json; charset=UTF-8]",
	"NotImplemented": [
		"unsupported content types"
	]
}