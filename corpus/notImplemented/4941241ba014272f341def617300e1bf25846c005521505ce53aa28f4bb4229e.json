{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "npm/api-spec-converter"
		},
		"file": {
			"name": "polls.json",
			"size": 0,
			"path": "test/output/openapi_3/polls.json",
			"byteSize": 8916,
			"content": "{\n  \"components\": {\n    \"schemas\": {\n      \"Choice\": {},\n      \"Polls_API_Root\": {},\n      \"Question\": {},\n      \"Questions_Collection\": {}\n    }\n  },\n  \"info\": {\n    \"description\": \"Polls is a simple API allowing consumers to view polls and vote in them. You can view this documentation over at [Apiary](http://docs.pollsapi.apiary.io).\",\n    \"title\": \"Polls\",\n    \"version\": \"\"\n  },\n  \"openapi\": \"3.0.0\",\n  \"paths\": {\n    \"/\": {\n      \"get\": {\n        \"description\": \"\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"examples\": {\n                  \"response\": {\n                    \"value\": {\n                      \"questions_url\": \"/questions\"\n                    }\n                  }\n                }\n              }\n            },\n            \"description\": \"OK\",\n            \"headers\": {}\n          }\n        },\n        \"summary\": \"Retrieve the Entry Point\",\n        \"tags\": []\n      }\n    },\n    \"/questions\": {\n      \"get\": {\n        \"description\": \"\",\n        \"parameters\": [\n          {\n            \"description\": \"The page of questions to return\",\n            \"example\": \"1\",\n            \"in\": \"query\",\n            \"name\": \"page\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"examples\": {\n                  \"response\": {\n                    \"value\": [\n                      {\n                        \"choices\": [\n                          {\n                            \"choice\": \"Swift\",\n                            \"url\": \"/questions/1/choices/1\",\n                            \"votes\": 2048\n                          },\n                          {\n                            \"choice\": \"Python\",\n                            \"url\": \"/questions/1/choices/2\",\n                            \"votes\": 1024\n                          },\n                          {\n                            \"choice\": \"Objective-C\",\n                            \"url\": \"/questions/1/choices/3\",\n                            \"votes\": 512\n                          },\n                          {\n                            \"choice\": \"Ruby\",\n                            \"url\": \"/questions/1/choices/4\",\n                            \"votes\": 256\n                          }\n                        ],\n                        \"published_at\": \"2014-11-11T08:40:51.620Z\",\n                        \"question\": \"Favourite programming language?\",\n                        \"url\": \"/questions/1\"\n                      }\n                    ]\n                  }\n                }\n              }\n            },\n            \"description\": \"OK\",\n            \"headers\": {}\n          }\n        },\n        \"summary\": \"List All Questions\",\n        \"tags\": [\n          \"Question\"\n        ]\n      },\n      \"post\": {\n        \"description\": \"You may create your own question using this action. It takes a JSON object containing a question and a collection of answers in the form of choices.\\n\\n+ question (string) - The question\\n\\n+ choices (array[string]) - A collection of choices.\",\n        \"parameters\": [\n          {\n            \"description\": \"The page of questions to return\",\n            \"example\": \"1\",\n            \"in\": \"query\",\n            \"name\": \"page\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"example\": {\n                  \"choices\": [\n                    \"Swift\",\n                    \"Python\",\n                    \"Objective-C\",\n                    \"Ruby\"\n                  ],\n                  \"question\": \"Favourite programming language?\"\n                },\n                \"properties\": {\n                  \"choices\": {\n                    \"items\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"question\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"content\": {\n              \"application/json\": {\n                \"examples\": {\n                  \"response\": {\n                    \"value\": {\n                      \"choices\": [\n                        {\n                          \"choice\": \"Swift\",\n                          \"url\": \"/questions/2/choices/1\",\n                          \"votes\": 0\n                        },\n                        {\n                          \"choice\": \"Python\",\n                          \"url\": \"/questions/2/choices/2\",\n                          \"votes\": 0\n                        },\n                        {\n                          \"choice\": \"Objective-C\",\n                          \"url\": \"/questions/2/choices/3\",\n                          \"votes\": 0\n                        },\n                        {\n                          \"choice\": \"Ruby\",\n                          \"url\": \"/questions/2/choices/4\",\n                          \"votes\": 0\n                        }\n                      ],\n                      \"published_at\": \"2014-11-11T08:40:51.620Z\",\n                      \"question\": \"Favourite programming language?\",\n                      \"url\": \"/questions/2\"\n                    }\n                  }\n                }\n              }\n            },\n            \"description\": \"Created\",\n            \"headers\": {}\n          }\n        },\n        \"summary\": \"Create a New Question\",\n        \"tags\": [\n          \"Question\"\n        ]\n      }\n    },\n    \"/questions/{question_id}\": {\n      \"get\": {\n        \"description\": \"\",\n        \"parameters\": [\n          {\n            \"description\": \"ID of the Question in form of an integer\",\n            \"example\": \"1\",\n            \"in\": \"path\",\n            \"name\": \"question_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"examples\": {\n                  \"response\": {\n                    \"value\": {\n                      \"choices\": [\n                        {\n                          \"choice\": \"Swift\",\n                          \"url\": \"/questions/1/choices/1\",\n                          \"votes\": 2048\n                        },\n                        {\n                          \"choice\": \"Python\",\n                          \"url\": \"/questions/1/choices/2\",\n                          \"votes\": 1024\n                        },\n                        {\n                          \"choice\": \"Objective-C\",\n                          \"url\": \"/questions/1/choices/3\",\n                          \"votes\": 512\n                        },\n                        {\n                          \"choice\": \"Ruby\",\n                          \"url\": \"/questions/1/choices/4\",\n                          \"votes\": 256\n                        }\n                      ],\n                      \"published_at\": \"2014-11-11T08:40:51.620Z\",\n                      \"question\": \"Favourite programming language?\",\n                      \"url\": \"/questions/1\"\n                    }\n                  }\n                }\n              }\n            },\n            \"description\": \"OK\",\n            \"headers\": {}\n          }\n        },\n        \"summary\": \"View a Questions Detail\",\n        \"tags\": [\n          \"Question\"\n        ]\n      }\n    },\n    \"/questions/{question_id}/choices/{choice_id}\": {\n      \"post\": {\n        \"description\": \"This action allows you to vote on a question's choice.\",\n        \"parameters\": [\n          {\n            \"description\": \"ID of the Question in form of an integer\",\n            \"example\": \"1\",\n            \"in\": \"path\",\n            \"name\": \"question_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          },\n          {\n            \"description\": \"ID of the Choice in form of an integer\",\n            \"example\": \"1\",\n            \"in\": \"path\",\n            \"name\": \"choice_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Created\",\n            \"headers\": {}\n          }\n        },\n        \"summary\": \"Vote on a Choice\",\n        \"tags\": [\n          \"Question\"\n        ]\n      }\n    }\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://polls.apiblueprint.org/\"\n    }\n  ],\n  \"tags\": [\n    {\n      \"description\": \"Resources related to questions in the API.\",\n      \"name\": \"Question\"\n    }\n  ]\n}\n",
			"canonicalURL": "/npm/api-spec-converter@c15292a823805817d82c5dee4b6a4c923a76d57a/-/blob/test/output/openapi_3/polls.json",
			"externalURLs": []
		}
	},
	"Error": "notImplemented: path \"/\": get: responses: 200: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema"
	]
}