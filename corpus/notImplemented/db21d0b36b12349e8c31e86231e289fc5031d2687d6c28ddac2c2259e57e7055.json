{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MasonEgger/digitalocean-classroom"
		},
		"file": {
			"name": "schema.yaml",
			"size": 0,
			"path": "swagger-docs/openapi/schema.yaml",
			"byteSize": 21656,
			"content": "openapi: 3.0.1\ninfo:\n  title: DigitalOcean Classroom API\n  description: API for using DigitalOcean Classroom, an infrastructure classroom management\n    tool\n  termsOfService: https://www.google.com/policies/terms/\n  contact:\n    email: mason@digitalocean.com\n  license:\n    name: Apache2\n  version: v1\nservers:\n- url: http://dev.zelgius.codes:8000/api/v1\nsecurity:\n- Basic: []\npaths:\n  /auth/check:\n    get:\n      tags:\n      - auth\n      description: Validate that your token is authenticated.\n      operationId: auth_check_list\n      responses:\n        200:\n          description: A message validating authentication\n          content: \n            applictaion/json:\n              schema:\n                type: object\n                properties:\n                  message: \n                    type: string\n                    description: message\n                    example: authenticated\n        401:\n          description: A message denying validation\n          content: \n            applictaion/json:\n              schema:\n                type: object\n                properties:\n                  detail: \n                    type: string\n                    description: message\n                    example: Invalid token.\n  /classes/:\n    get:\n      tags:\n      - classes\n      description: \"List all classes that user is associated with and their role regarding the class\"\n      operationId: classes_list\n      responses:\n        200:\n          description: A object containing keys student and teacher. Within each key is a list of classes in which the user has that role with said class.\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  classes:\n                    type: object\n                    properties:\n                      student:\n                        type: object\n                        properties:\n                          id:\n                            type: integer\n                            description: Class id\n                            example: 2\n                          name:\n                            type: string\n                            description: Class name\n                            example: Local Meetup\n                      teacher:\n                        type: object\n                        properties:\n                          id:\n                            type: integer\n                            description: Class id\n                            example: 1\n                          name:\n                            type: string\n                            description: Class name\n                            example: CS1428\n        404:\n          description: \"No classes found\"\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive error message\n                    example: No classes found\n                  status:\n                    type: integer\n                    description: HTTP success code\n                    example: 404\n  /classes/open:\n    get:\n      tags:\n      - classes\n      description: \"List all classes with open registration\"\n      operationId: classes_open_list\n      responses:\n        200:\n          description: A list of all class names and ids that are available to register for\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  classes:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: integer\n                          description: Class id\n                          example: 1\n                        name:\n                          type: string\n                          description: Class name\n                          example: Local Meetup\n        404:\n          description: \"No classes open for registration\"\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive error message\n                    example: No classes open for registration\n                  status:\n                    type: integer\n                    description: HTTP success code\n                    example: 404\n                   \n  /classes/{class_id}:\n    get:\n      tags:\n      - classes\n      description: \"Returns details about teacher and droplets of class with given class id, if the user is a student or teacher in the class\"\n      operationId: classes_read\n      parameters:\n      - name: class_id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"\"\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  name:\n                    type: string\n                    description: Class's name\n                    example: \"class_name\"\n                  droplet_image:\n                    type: string\n                    description: Droplet image\n                  droplet_size:\n                    type: string\n                    description: Droplet size\n                  droplet_region:\n                    type: string\n                    description: Droplet region\n                  droplet_limit:\n                    type: integer\n                    description: Droplet student limit\n                  teacher(s):\n                    type: array\n                    items:\n                      type: string\n                      example: \"Lastname, Firstname\"\n        404:\n          description: \"Class with id {class_id} does not exist\"\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive error message\n                    example: Class with id {class_id} does not exist\n                  status:\n                    type: integer\n                    description: HTTP error not found code\n                    example: 404\n  /classes/create:\n    post:\n      tags:\n      - classes\n      operationId: classes_create\n      responses:\n        200:\n          description: \"\"\n          content: {}\n  /classes/enroll:\n    post:\n      tags:\n      - classes\n      description: Enroll a student in a class. If a student object does not already exist this call will create one and add the student to the class. If a student object already exists it will add that object to the class.\n      operationId: classes_enroll\n      requestBody:\n        description: Provide a class_id and passcode to enroll in a class\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n            example:\n              class_id: string\n              passcode: string\n      responses:\n        200:\n          description: \"User was enrolled in class\"\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive message\n                    example: User was enrolled in class\n                  status:\n                    type: integer\n                    description: HTTP success code\n                    example: 200\n        400:\n          description: \"class_id must be numerical\"\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive error message\n                    example: class_id must be numerical\n                  status:\n                    type: integer\n                    description: HTTP success code\n                    example: 400\n        401:\n          description: \"User is already associate with this class. Could be already enrolled or the teacher of the class\"\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive error message\n                    example: User is already enrolled in this class\n                  status:\n                    type: integer\n                    description: HTTP success code\n                    example: 401\n        403:\n          description: \"Class is not configured to allow registration. If this error is seen then the class will need to be reconfigured.\"\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive error message\n                    example: Class n ot configured for registration\n                  status:\n                    type: integer\n                    description: HTTP success code\n                    example: 403\n        404:\n          description: \"Invalid class\"\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive error message\n                    example: Invalid class\n                  status:\n                    type: integer\n                    description: HTTP error code\n                    example: 404\n  /classes/enrolled:\n    get:\n      tags:\n      - classes\n      operationId: classes_enrolled\n      responses:\n        200:\n          description: \"Check enrollment in a class. User is a student and is enrolled.\"\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive message\n                    example: \"Student is enrolled.\"\n                  status:\n                    type: integer\n                    description: HTTP code\n                    example: 200\n        401:\n          description: \"User is not a student, or user is not enrolled\"\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive message\n                    example: \"User is not a student, therefore cannot be enrolled in a class\"\n                  status:\n                    type: integer\n                    description: HTTP code\n                    example: 401\n                    \n        404:\n          description: \"Class with id {class_id} does not exist\"\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive error message\n                    example: \"Class with id {class_id} does not exist\"\n                  status:\n                    type: integer\n                    description: HTTP error code\n                    example: 404\n  /droplets/assign/{droplet_id}/{user_id}/{class_id}:\n    get:\n      tags:\n      - droplets\n      description: Assign a droplet to a user\n      operationId: droplets_assign_read\n      parameters:\n      - name: class_id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: droplet_id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: user_id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"\"\n          content: {}\n  /droplets/create/{class_id}:\n    get:\n      tags:\n      - droplets\n      description: Create a droplet inside a specific class\n      operationId: droplets_create_read\n      parameters:\n      - name: class_id\n        in: path\n        required: true\n        schema:\n          type: integer\n        description: The ID of the Class to create the droplet in.\n      responses:\n        200:\n          description: \"Droplet(s) created\"\n          content: \n            application/json:\n              schema:\n                type: object\n                properties:\n                  droplet_count: \n                    type: integer\n                    description: The number of droplets created.\n                    example: 1\n                  droplets:\n                    type: array\n                    items: \n                      type: object\n                      properties:\n                        class:\n                          type: string\n                          description: Name of class the droplet was created in\n                        class_id:\n                          type: integer\n                          description: ID of the class the droplet was created in\n                        droplet_id:\n                          type: string\n                          description:  DigitalOcean ID of the Droplet\n                        initial_password:\n                          type: string\n                          description: Default password for the root user. Will need to be changed at first login.\n                        ip_addr:\n                          type: string\n                          description: IP Address of the droplet\n                        name:\n                          type: string\n                          description: Name of the Droplet as it will appear in the DigitalOcean dashboard\n                        owner:\n                          type: string\n                          description: Owner of the Droplet\n                        owner_email:\n                          type: string\n                          description: Email address of the owner of the Droplet\n                        owner_id:\n                          type: integer\n                          description: ID of the owner of the Droplet\n                  status:\n                    type: integer\n                    description: HTTP status code of request\n                    example: 200\n                    \n        403:\n          description: \"Max number of droplets reached\"\n          content: \n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive error message\n                    example: Max number of droplets reached\n                  status:\n                    type: integer\n                    description: HTTP status code of request\n                    example: 403\n        404:\n          description: \"Invalid class, User is not in class.\"\n          content: \n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive error message\n                    example: Invalid class\n                  status:\n                    type: integer\n                    description: HTTP status code of request\n                    example: 404\n        \n      \n  /droplets/delete/{droplet_id}:\n    get:\n      tags:\n      - droplets\n      operationId: droplets_delete_read\n      description: Delete a specific Droplet\n      parameters:\n      - name: droplet_id\n        in: path\n        required: true\n        schema:\n          type: integer\n        description: The DigitalOcean ID of the Droplet to delete\n      responses:\n        200:\n          description: \"Successfully deleted Droplet\"\n          content: \n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive error message\n                    example: Successfully deleted Droplet\n                  status:\n                    type: integer\n                    description: HTTP status code of request\n                    example: 200\n        403:\n          description: \"User does not own specified Droplet\"\n          content: \n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive error message\n                    example: Invalid droplet\n                  status:\n                    type: integer\n                    description: HTTP status code of request\n                    example: 404\n        404:\n          description: \"Invalid Droplet\"\n          content: \n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Descriptive error message\n                    example: Invalid droplet\n                  status:\n                    type: integer\n                    description: HTTP status code of request\n                    example: 404\n  /droplets/delete-all/:\n    get:\n      tags:\n      - droplets\n      description: Delete all droplets associated with your user\n      operationId: droplets_delete_all\n      responses:\n        200:\n          description: \"\"\n          content: {}\n  /droplets/power-control/{droplet_id}/{power_option}:\n    get:\n      tags:\n      - droplets\n      operationId: droplets_power-control_read\n      parameters:\n      - name: droplet_id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: power_option\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"\"\n          content: {}\n  /droplets/view:\n    get:\n      tags:\n      - droplets\n      operationId: droplets_view_list\n      responses:\n        200:\n          description: \"\"\n          content: {}\n  /droplets/view/{droplet_id}:\n    get:\n      tags:\n      - droplets\n      operationId: droplets_view_read\n      parameters:\n      - name: droplet_id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"\"\n          content: {}\n  /droplets/view-class-droplets/{class_id}:\n    get:\n      tags:\n      - droplets\n      operationId: droplets_view_class_droplets_read\n      parameters:\n      - name: class_id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"\"\n          content: {}\n  /droplets/class-droplet-count/{class_id}:\n    get:\n      tags:\n      - droplets\n      operationId: droplets_class_droplet_count_read\n      parameters:\n      - name: class_id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"\"\n          content: {}\n  /resources/:\n    get:\n      tags:\n      - resources\n      operationId: resources_list\n      responses:\n        200:\n          description: \"\"\n          content: {}\n  /users/view/{class_id}:\n    get:\n      tags:\n      - users\n      description: View users in class\n      operationId: users_view_read\n      parameters:\n      - name: class_id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: \"\"\n          content: {}\n  /users/obtain-auth-token:\n    post:\n      tags:\n      - users\n      description: Obtain API Token\n      operationId: users_obtain_auth_token\n      requestBody:\n        description: Provide username and password to obtain token\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n            example:\n              username: string\n              password: string\n      responses:\n        200:\n          description: \"API Token Returned\"\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n                    description: Descriptive error message\n                    example: API Token\n        400:\n          description: \"Unable to login with provided credentials\"\n          content:\n             application/json:\n              schema:\n                type: object\n                properties:\n                  non_field_errors:\n                    type: array\n                    items:\n                      type: string\n                      example: Unable to log in with provided credentials.\n                    description: Descriptive error message\n  /users/register/:\n    post:\n      tags:\n      - users\n      description: Register as a user and enroll in a class\n      operationId: users_register\n      responses:\n        200:\n          description: \"\"\n          content: {}\n\ncomponents:\n  securitySchemes:\n    Basic:\n      type: http\n      scheme: basic\n",
			"canonicalURL": "/github.com/MasonEgger/digitalocean-classroom@d4342d0f10ccae32a6b2883fd1b478a68af75740/-/blob/swagger-docs/openapi/schema.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/MasonEgger/digitalocean-classroom/blob/d4342d0f10ccae32a6b2883fd1b478a68af75740/swagger-docs/openapi/schema.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/auth/check\": get: responses: 200: contents: unsupported content types: [applictaion/json]",
	"NotImplemented": [
		"unsupported content types"
	]
}