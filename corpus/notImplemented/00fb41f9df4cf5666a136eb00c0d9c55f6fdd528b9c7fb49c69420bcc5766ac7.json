{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/gotomeeting/openapi.yml",
			"byteSize": 82960,
			"content": "openapi: 3.0.0\ninfo:\n  title: GoToMeeting REST API\n  description: |\n    This is a generated connector for [GoToMeeting API v1.0](https://developer.goto.com/GoToMeetingV1) OpenAPI specification.  \n    The GoToMeeting API provides the capability to organize meetings.\n  x-ballerina-init-description: |\n    The connector initialization requires setting the API credentials. \n    Create a [LogMeIn account](https://accounts.logme.in/registration.aspx) and obtain tokens by following [this guide](https://developer.goto.com/guides/HowTos/02_HOW_createClient/).\n  x-ballerina-display:\n    label: GoTo Meeting\n    iconPath: \"icon.png\"\n  version: 1.0.0\ntags:\n  - name: Organizers\n    description: Operations on organizers. Only available to users with the admin role.\n  - name: Meetings\n    description: Operations on meetings.\n  - name: Groups\n    description: Operations on groups. Only available to users with the admin role.\n\nsecurity:\n  - OAuth2: []\n  - Bearer: []\n\npaths:\n  /organizers:\n    post:\n      deprecated: true\n      tags:\n        - Organizers\n      operationId: createOrganizer\n      summary: 'Create organizer'\n      description: \u003e\n        \u003cbr\u003e\n        **DEPRECATED:** To 'Create organizer', please use ['Add users'](/admin/#operation/Add%20Users) from the GoTo Admin API.\n        \u003cbr\u003e\n        \u003cbr\u003e\n        Creates a new organizer and sends an email to the email address defined\n        in the request. This API call is only available to users with the admin\n        role. You may also pass 'G2W', 'G2T', 'OPENVOICE', 'G2ASEEIT',\n        'G2ARS' or 'G2ASD' as productType variables, creating organizers for\n        those products. A G2W or G2T organizer will also have access to G2M.\n        \u003cp\u003e\n          **Please note that your client requires the Admin Center scope\n          (identity:) to execute this API request.**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      requestBody:\n        $ref: '#/components/requestBodies/OrganizerReq'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrganizerShort'\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '409':\n          description: Conflict\n    get:\n      deprecated: true\n      tags:\n        - Organizers\n      operationId: getOrganizersAllOrByEmail\n      summary: 'Get organizer by email / Get all organizers'\n      description: \u003e\n        \u003cbr\u003e\n        **DEPRECATED:** To 'Get organizer by email / Get all organizers', please use ['Get users'](/admin/#operation/Get%20Users) from the GoTo Admin API.\n        \u003cbr\u003e\n        \u003cbr\u003e\n        Gets the individual organizer specified by the\n        organizer's email address. If an email address is not specified, all\n        organizers are returned. This API call is only available to users with\n        the admin role.\n        \u003cp\u003e\n          **Please note that your client requires the Admin Center scope\n          (identity:) to execute this API request.**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - name: email\n          in: query\n          description: The email address of the organizer\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Organizer'\n        '400':\n          description: Bad Request\n        '404':\n          description: Not Found\n    delete:\n      deprecated: true\n      tags:\n        - Organizers\n      operationId: deleteOrganizerByEmail\n      summary: 'Delete organizer by email'\n      description: \u003e\n        \u003cbr\u003e\n        **DEPRECATED:** To delete organizer, please use ['Delete user'](/admin/#operation/Delete%20User) from the GoTo Admin API.\n        \u003cbr\u003e\n        \u003cbr\u003e\n        Deletes the individual organizer specified by the email address.\n        This API call is only available to users with the admin role.\n        \u003cp\u003e\n          **Please note that your client requires the Admin Center scope\n          (identity:) to execute this API request.**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - name: email\n          in: query\n          description: The email address of the organizer\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: No Content\n        '400':\n          description: Bad Request\n  '/organizers/{organizerKey}':\n    get:\n      deprecated: true\n      tags:\n        - Organizers\n      operationId: getOrganizer\n      summary: 'Get organizer'\n      description: \u003e\n        \u003cbr\u003e\n        **DEPRECATED:** To 'Get organizer', please use ['Get users'](/admin/#operation/Get%20Users) from the GoTo Admin API.\n        \u003cbr\u003e\n        \u003cbr\u003e\n        Returns the individual organizer specified by the key. This API call is only\n        available to users with the admin role. Non-admin users can only make\n        this call for their own organizerKey.\n        \u003cp\u003e\n          **Please note that your client requires the Admin Center scope\n          (identity:) to execute this API request.**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - $ref: '#/components/parameters/organizerKey'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Organizer'\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n    delete:\n      deprecated: true\n      tags:\n        - Organizers\n      operationId: deleteOrganizer\n      summary: 'Delete organizer'\n      description: \u003e\n        \u003cbr\u003e\n        **DEPRECATED:** To 'Delete organizer', please use ['Delete user'](/admin/#operation/Delete%20User) from the GoTo Admin API.\n        \u003cbr\u003e\n        \u003cbr\u003e\n        Deletes the individual organizer specified by the organizer key. This\n        API call is only available to users with the admin role.\n        \u003cp\u003e\n          **Please note that your client requires the Admin Center scope\n          (identity:) to execute this API request.**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - $ref: '#/components/parameters/organizerKey'\n      responses:\n        '204':\n          description: No Content\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n    put:\n      deprecated: true\n      tags:\n        - Organizers\n      operationId: updateOrganizer\n      summary: 'Update organizer'\n      description: \u003e\n        \u003cbr\u003e\n        **DEPRECATED:** To 'Update organizer', please use ['Update user'](/admin/#operation/Update%20User) from the GoTo Admin API.\n        \u003cbr\u003e\n        \u003cbr\u003e\n        Updates the products of the specified organizer. To add a product\n        ('G2W', 'G2T', 'OPENVOICE', 'G2ASEEIT', 'G2ARS', 'G2ASD') for the\n        organizer, the call must be sent once for each product you want to add.\n        To remove all products for the organizer, set status to 'suspended'. The\n        call is limited to users with the admin role.\n        \u003cp\u003e\n          **Please note that your client requires the Admin Center scope\n          (identity:) to execute this API request.**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - $ref: '#/components/parameters/organizerKey'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrganizerStatus'\n        description: The organizer's status\n        required: true\n      responses:\n        '204':\n          description: No Content\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n  '/organizers/{organizerKey}/attendees':\n    get:\n      tags:\n        - Organizers\n      operationId: getAttendeesByOrganizer\n      summary: 'Get attendees by organizer'\n      description: Lists all attendees for all meetings within a specified date range for a\n        specified organizer. This API call is only available to users with the\n        admin role.\n        \u003cp\u003e\n        **If you want to execute this for other organizers your client requires the Admin Center scope\n        (identity:).**\u003cbr\u003e\n        How to create a client is described in a\n        [HowTo](/guides/HowTos/02_HOW_createClient),\n        but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - $ref: '#/components/parameters/organizerKey'\n        - name: startDate\n          in: query\n          description: A required start of date range in ISO8601 UTC format, e.g.\n            2015-07-01T22:00:00Z\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - name: endDate\n          in: query\n          description: A required end of date range in ISO8601 UTC format, e.g.\n            2015-07-01T23:00:00Z\n          required: true\n          schema:\n            type: string\n            format: date-time\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AttendeeByOrganizer'\n        '400':\n          description: Bad Request\n        '404':\n          description: Not Found\n  '/organizers/{organizerKey}/historicalMeetings':\n    get:\n      tags:\n        - Organizers\n      operationId: getHistoricalMeetingsByOrganizer\n      summary: 'Get historical meetings by organizer'\n      description: \u003e\n        Get historical meetings for the specified organizer that started within\n        the specified date/time range. Remark: Meetings which are still ongoing\n        at the time of the request are NOT contained in the result array.\n        \u003cp\u003e\n          **If you want to execute this for other organizers your client requires the Admin Center scope\n          (identity:).**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - $ref: '#/components/parameters/organizerKey'\n        - name: startDate\n          in: query\n          description: Required start of date range, in ISO8601 UTC format, e.g.\n            2015-07-01T22:00:00Z\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - name: endDate\n          in: query\n          description: Required end of date range, in ISO8601 UTC format, e.g.\n            2015-07-01T23:00:00Z\n          required: true\n          schema:\n            type: string\n            format: date-time\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/HistoricalMeeting'\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n  '/organizers/{organizerKey}/upcomingMeetings':\n    get:\n      tags:\n        - Organizers\n      operationId: getUpcomingMeetingsByOrganizer\n      summary: 'Get upcoming meetings by organizer'\n      description: \u003e\n        Get upcoming meetings for a specified organizer. This API call is only\n        available to users with the admin role.\n        \u003cp\u003e\n          **If you want to execute this for other organizers your client requires the Admin Center scope\n          (identity:).**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - $ref: '#/components/parameters/organizerKey'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UpcomingMeeting'\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n  '/organizers/{organizerKey}/meetings':\n    get:\n      deprecated: true\n      tags:\n        - Organizers\n      operationId: getMeetingsByOrganizer\n      summary: 'Get meetings by organizer'\n      description: \u003e\n        DEPRECATED: Please use the new API calls 'Get historical meetings by\n        organizer' and 'Get upcoming meetings by organizer'. Gets future\n        (scheduled) or past (history) meetings for a specified organizer.\n        Include 'history=true' and the past start and end dates in the URL to\n        retrieve past meetings. Enter 'scheduled=true' (without dates) to get\n        scheduled meetings.\n        \u003cp\u003e\n          **If you want to execute this for other organizers your client requires the Admin Center scope\n          (identity:).**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - $ref: '#/components/parameters/organizerKey'\n        - name: scheduled\n          in: query\n          description: When 'true', returns all future meetings. Date range is ignored. Mutually exclusive to 'history'.\n          schema:\n            type: boolean\n        - name: history\n          in: query\n          description: When 'true', returns all past meetings within date range. Mutually exclusive to 'scheduled'.\n          schema:\n            type: boolean\n        - name: startDate\n          in: query\n          description: If history is 'true', required start of date range, in ISO8601 UTC\n            format, e.g. 2015-07-01T22:00:00Z\n          schema:\n            type: string\n            format: date-time\n        - name: endDate\n          in: query\n          description: If history is 'true', required end of date range, in ISO8601 UTC\n            format, e.g. 2015-07-01T23:00:00Z\n          schema:\n            type: string\n            format: date-time\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MeetingByOrganizer'\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n  '/organizers/{organizerKey}/sessions/{sessionId}':\n    delete:\n      tags:\n        - Organizers\n      operationId: deleteSessionById\n      summary: 'Delete meeting session by session id'\n      description: \u003e\n        Use this call to clean up your data by deleting any specific session.\n        The sessionID(s) are included by meeting in the Get Historical Meetings\n        call. Each meeting held is at least one session. One meeting may be\n        multiple sessions if the organizer stopped and restarted the meeting for\n        any reason, such as their device of choice did not work. Recurring\n        meetings are at least one session per event. The call removes the\n        specified session(s) from LogMeIn's servers including the sessionID, the\n        attendee list, and any recordings. The meeting will still appear in your\n        organizer's Meeting History, but will have no associated sessions. NOTE:\n        The delete occurs at the session level because this provides the\n        greatest granular control. To delete for a specific meetingID, you would\n        need to accumualate all sessions for the meeting and apply the delete.\n        \u003cp\u003e\n          **If you want to execute this for other organizers your client requires the Admin Center scope\n          (identity:).**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - name: organizerKey\n          in: path\n          description: The organizer ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: sessionId\n          in: path\n          description: The session ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '204':\n          description: No Content\n        '404':\n          description: Not Found\n  '/organizers/{organizerKey}/sessions/{sessionId}/attendees':\n    delete:\n      tags:\n        - Organizers\n      operationId: deleteSessionAttendeesById\n      summary: 'Remove attendee list of a meeting session'\n      description: \u003e\n        Use this call to clean up your data by deleting the attendee list for a\n        specific session. The sessionID(s) and the number of attendees at each\n        session is included by meeting in the Get Historical Meetings call. Each\n        meeting held is at least one session. One meeting may be multiple\n        sessions if the organizer stopped and restarted the meeting for any\n        reason, such as their device of choice did not work. Recurring meetings\n        are at least one session per event. The call removes the attendee list\n        from the session from LogMeIn's servers. You can remove the entire\n        session data using the Delete Session call, or delete recordings of the\n        meeting using the Delete Session Recordings call. The meeting will still\n        appear in your organizer's Meeting History, but will have no associated\n        attendees. NOTE: The delete occurs at the session level because this\n        provides the greatest granular control. To delete for a specific\n        meetingID, you would need to accumulate all sessions for the meeting\n        and apply the delete.\n        \u003cp\u003e\n          **If you want to execute this for other organizers your client requires the Admin Center scope\n          (identity:).**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - name: organizerKey\n          in: path\n          description: The organizer ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: sessionId\n          in: path\n          description: The session ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '204':\n          description: No Content\n        '404':\n          description: Not Found\n  '/organizers/{organizerKey}/sessions/{sessionId}/recordings':\n    delete:\n      tags:\n        - Organizers\n      operationId: deleteSessionRecordingsById\n      summary: 'Delete recordings of a meeting session'\n      description: \u003e\n        Use this call to clean up your data by deleting recordings associated\n        with a specific session. The sessionID(s) are included by meeting in the\n        Get Historical Meetings call. The call removes any recordings associated\n        with the specified session from LogMeIn's servers. (Any session may have\n        multiple recordings if the feature was started and stopped multiple\n        times during the meeting.) You can remove the entire session data using\n        the Delete Session call, or delete attendee lists for the session using\n        the Delete Session Attendees call. The meeting will still appear in your\n        organizer's Meeting History, but will have no associated recordings for\n        the specified session. NOTE: The delete occurs at the session level\n        because this provides the greatest granular control. To delete for a\n        specific meetingID, you would need to accumualate all sessions for the\n        meeting and apply the delete.\n        \u003cp\u003e\n          **If you want to execute this for other organizers your client requires the Admin Center scope\n          (identity:).**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - name: organizerKey\n          in: path\n          description: The organizer ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: sessionId\n          in: path\n          description: The session ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '204':\n          description: No Content\n        '404':\n          description: Not Found\n  /groups:\n    get:\n      deprecated: true\n      tags:\n        - Groups\n      operationId: getGroups\n      summary: 'Get groups'\n      description: \u003e\n        \u003cbr\u003e\n        **DEPRECATED:** To 'Get groups', please use ['Get groups'](/admin/#operation/Get%20Groups) from the GoTo Admin API.\n        \u003cbr\u003e\n        \u003cbr\u003e\n        List all groups for an account. This API call is only available to users with the\n        admin role.\n        \u003cp\u003e\n          **Please note that your client requires the Admin Center scope\n          (identity:) to execute this API request.**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Group'\n        '403':\n          description: Forbidden\n  '/groups/{groupKey}/attendees':\n    get:\n      tags:\n        - Groups\n      operationId: getAttendeesByGroup\n      summary: 'Get attendees by group'\n      description: Returns all attendees for all meetings within specified date range held\n        by organizers within the specified group. This API call is only\n        available to users with the admin role. This API call can be used only\n        for groups with maximum 50 organizers.\n        \u003cp\u003e\n        **Please note that your client requires the Admin Center scope\n        (identity:) to execute this API request.**\u003cbr\u003e\n        How to create a client is described in a\n        [HowTo](/guides/HowTos/02_HOW_createClient),\n        but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - $ref: '#/components/parameters/groupKey'\n        - name: startDate\n          in: query\n          description: Start of date range, in ISO8601 UTC format, e.g. 2015-07-01T22:00:00Z\n          schema:\n            type: string\n            format: date-time\n        - name: endDate\n          in: query\n          description: End of date range, in ISO8601 UTC format, e.g. 2015-07-01T23:00:00Z\n          schema:\n            type: string\n            format: date-time\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AttendeeByGroup'\n        '400':\n          description: Bad Request\n  '/groups/{groupKey}/historicalMeetings':\n    get:\n      tags:\n        - Groups\n      operationId: getHistoricalMeetingsByGroup\n      summary: 'Get historical meetings by group'\n      description: \u003e\n        Get historical meetings for the specified group that started within the\n        specified date/time range. This API call is only available to users with\n        the admin role. This API call is restricted to groups with a maximum of\n        50 organizers. Remark: Meetings which are still ongoing at the time of\n        the request are NOT contained in the result array.\n        \u003cp\u003e\n          **Please note that your client requires the Admin Center scope\n          (identity:) to execute this API request.**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - $ref: '#/components/parameters/groupKey'\n        - name: startDate\n          in: query\n          description: Required start of date range, in ISO8601 UTC format, e.g.\n            2015-07-01T22:00:00Z\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - name: endDate\n          in: query\n          description: Required end of date range, in ISO8601 UTC format, e.g.\n            2015-07-01T23:00:00Z\n          required: true\n          schema:\n            type: string\n            format: date-time\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/HistoricalMeetingByGroup'\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n  '/groups/{groupKey}/upcomingMeetings':\n    get:\n      tags:\n        - Groups\n      operationId: getUpcomingMeetingsByGroup\n      summary: 'Get upcoming meetings by group'\n      description: Get upcoming meetings for a specified group. This API call is only\n        available to users with the admin role. This API call can be used only\n        for groups with maximum 50 organizers.\n        \u003cp\u003e\n        **Please note that your client requires the Admin Center scope\n        (identity:) to execute this API request.**\u003cbr\u003e\n        How to create a client is described in a\n        [HowTo](/guides/HowTos/02_HOW_createClient),\n        but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - $ref: '#/components/parameters/groupKey'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UpcomingMeetingByGroup'\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n  '/groups/{groupKey}/meetings':\n    get:\n      deprecated: true\n      tags:\n        - Groups\n      operationId: getMeetingsByGroup\n      summary: 'Get meetings by group'\n      description: \u003e\n        DEPRECATED: Please use the new API calls 'Get historical meetings by\n        group' and 'Get upcoming meetings by group'. Get meetings for a\n        specified group. Additional filters can be used to view only meetings\n        within a specified date range. This API call is only available to users\n        with the admin role.\n        \u003cp\u003e\n          **Please note that your client requires the Admin Center scope\n          (identity:) to execute this API request.**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - $ref: '#/components/parameters/groupKey'\n        - name: scheduled\n          in: query\n          description: When 'true', returns all future meetings. Date range is ignored. Mutually exclusive to 'history'.\n          schema:\n            type: boolean\n        - name: history\n          in: query\n          description: When 'true', returns all past meetings within date range. Mutually exclusive to 'scheduled'.\n          schema:\n            type: boolean\n        - name: startDate\n          in: query\n          description: If history=true, required start of date range, in ISO8601 UTC\n            format, e.g. 2015-07-01T22:00:00Z\n          schema:\n            type: string\n            format: date-time\n        - name: endDate\n          in: query\n          description: If history=true, required end of date range, in ISO8601 UTC format,\n            e.g. 2015-07-01T23:00:00Z\n          schema:\n            type: string\n            format: date-time\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/HistoryMeetingByGroup'\n        '400':\n          description: Bad Request\n  '/groups/{groupKey}/organizers':\n    post:\n      deprecated: true\n      tags:\n        - Groups\n      operationId: createOrganizerInGroup\n      summary: 'Create organizer in group'\n      description: \u003e\n        \u003cbr\u003e\n        **DEPRECATED:** To 'Create organizer in group', please use ['Add users'](/admin/#operation/Add%20Users) from the GoTo Admin API.\n        \u003cbr\u003e\n        \u003cbr\u003e\n        Creates a new organizer and sends an email to the email address\n        defined in the request. This API call is only available to users with the\n        admin role. You may also pass 'G2W', 'G2T', 'OPENVOICE', 'G2ASEEIT',\n        'G2ARS' or 'G2ASD' as productType variables, creating organizers for\n        those products. A G2W or G2T organizer will also have access to G2M.\n        \u003cp\u003e\n          **Please note that your client requires the Admin Center scope\n          (identity:) to execute this API request.**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - $ref: '#/components/parameters/groupKey'\n      requestBody:\n        $ref: '#/components/requestBodies/OrganizerReq'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrganizerShort'\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '409':\n          description: Conflict\n    get:\n      deprecated: true\n      tags:\n        - Groups\n      operationId: getOrganizersByGroup\n      summary: 'Get organizers by group'\n      description: \u003e\n        \u003cbr\u003e\n        **DEPRECATED:** To 'Get organizers by group', please use ['Get users'](/admin/#operation/Get%20Users) from the GoTo Admin API.\n        \u003cbr\u003e\n        \u003cbr\u003e\n        Returns all the organizers within a specific group. This API call is\n        only available to users with the admin role.\n        \u003cp\u003e\n          **Please note that your client requires the Admin Center scope\n          (identity:) to execute this API request.**\u003cbr\u003e\n          How to create a client is described in a\n          [HowTo](/guides/HowTos/02_HOW_createClient),\n          but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - $ref: '#/components/parameters/groupKey'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrganizerByGroup'\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n  /historicalMeetings:\n    get:\n      tags:\n        - Meetings\n      operationId: getHistoricalMeetings\n      summary: 'Get historical meetings'\n      description: \u003e\n        Get historical meetings for the currently authenticated organizer that\n        started within the specified date/time range. Remark: Meetings which are\n        still ongoing at the time of the request are NOT contained in the result\n        array.\n      parameters:\n        - name: startDate\n          in: query\n          description: Required start of date range, in ISO8601 UTC format, e.g.\n            2015-07-01T22:00:00Z\n          required: true\n          schema:\n            type: string\n            format: date-time\n        - name: endDate\n          in: query\n          description: Required end of date range, in ISO8601 UTC format, e.g.\n            2015-07-01T23:00:00Z\n          required: true\n          schema:\n            type: string\n            format: date-time\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/HistoricalMeeting'\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n  /upcomingMeetings:\n    get:\n      tags:\n        - Meetings\n      operationId: getUpcomingMeetings\n      summary: 'Get upcoming meetings'\n      description: Gets upcoming meetings for the current authenticated organizer.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UpcomingMeeting'\n        '403':\n          description: Forbidden\n  /meetings:\n    get:\n      deprecated: true\n      tags:\n        - Meetings\n      operationId: getMeetings\n      summary: 'Get meetings'\n      description: \u003e\n        DEPRECATED: Please use the new API calls 'Get historical meetings' and\n        'Get upcoming meetings'.  Gets historical meetings for the current\n        authenticated organizer. Requires date range for filtering results to\n        only meetings within specified dates. History searches will contain the\n        parameter 'meetingInstanceKey' which is used in conjunction with the\n        call 'Get Attendees by Meeting' to get attendee information for a past\n        meeting. Enter 'scheduled=true' (without dates) to get scheduled meetings.\n      parameters:\n        - name: scheduled\n          in: query\n          description: When 'true', returns all future meetings. Date range is ignored. Mutually exclusive to 'history'.\n          schema:\n            type: boolean\n        - name: history\n          in: query\n          description: When 'true', returns all past meetings within date range. Mutually exclusive to 'scheduled'.\n          schema:\n            type: boolean\n        - name: startDate\n          in: query\n          description: If history=true, required start of date range, in ISO8601 UTC\n            format, e.g. 2015-07-01T22:00:00Z\n          schema:\n            type: string\n            format: date-time\n        - name: endDate\n          in: query\n          description: If history=true, required end of date range, in ISO8601 UTC format,\n            e.g. 2015-07-01T23:00:00Z\n          schema:\n            type: string\n            format: date-time\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MeetingHistory'\n        '400':\n          description: Bad Request\n    post:\n      tags:\n        - Meetings\n      operationId: createMeeting\n      summary: 'Create meeting'\n      description: Create a new meeting based on the parameters specified.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MeetingReqCreate'\n        description: The meeting details\n        required: true\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MeetingCreated'\n        '400':\n          description: Bad Request\n  '/meetings/{meetingId}':\n    get:\n      tags:\n        - Meetings\n      operationId: getMeeting\n      summary: 'Get meeting'\n      description: Returns the meeting details for the specified meeting.\n      parameters:\n        - $ref: '#/components/parameters/meetingId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MeetingById'\n        '404':\n          description: Not Found\n    delete:\n      tags:\n        - Meetings\n      operationId: deleteMeeting\n      summary: 'Delete meeting'\n      description: Deletes the meeting identified by the meetingId.\n      parameters:\n        - $ref: '#/components/parameters/meetingId'\n      responses:\n        '204':\n          description: No Content\n        '400':\n          description: Bad Request\n        '404':\n          description: Not Found\n    put:\n      tags:\n        - Meetings\n      operationId: updateMeeting\n      summary: 'Update meeting'\n      description: Updates an existing meeting specified by meetingId.\n      parameters:\n        - $ref: '#/components/parameters/meetingId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MeetingReqUpdate'\n        description: The meeting details\n        required: true\n      responses:\n        '204':\n          description: No Content\n        '400':\n          description: Bad Request\n        '404':\n          description: Not Found\n  '/meetings/{meetingId}/start':\n    get:\n      tags:\n        - Meetings\n      operationId: startMeeting\n      summary: 'Start meeting'\n      description: Returns a host URL that can be used to start a meeting. When this URL is\n        opened in a web browser, the GoToMeeting client will be downloaded and\n        launched and the meeting will start. The end user is not required to\n        login to a client.\n      parameters:\n        - $ref: '#/components/parameters/meetingId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StartUrl'\n  '/meetings/{meetingId}/attendees':\n    get:\n      tags:\n        - Meetings\n      operationId: getAttendeesByMeetings\n      summary: 'Get attendees by meeting'\n      description: List all attendees for specified meetingId of historical meeting. The\n        historical meetings can be fetched using 'Get historical meetings', 'Get\n        historical meetings by organizer', and 'Get historical meetings by\n        group'. For users with the admin role this call returns attendees for\n        any meeting. For any other user the call will return attendees for\n        meetings on which the user is a valid organizer.\n        \u003cp\u003e\n        **Please note that your client requires the Admin Center scope\n        (identity:) to execute this API request.**\u003cbr\u003e\n        How to create a client is described in a\n        [HowTo](/guides/HowTos/02_HOW_createClient),\n        but you can also add the missing scope to an existing OAuth client.\n        \u003c/p\u003e\n      parameters:\n        - $ref: '#/components/parameters/meetingId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AttendeeByMeeting'\n        '404':\n          description: Not Found\nservers:\n  - url: https://api.getgo.com/G2M/rest\ncomponents:\n  securitySchemes:\n    OAuth2:\n      type: oauth2\n      description: \u003e\n        To use this API, you _must_ provide an OAuth Token that has been requested from LogMeIn’s OAuth service.\n        See https://goto-developer.logmeininc.com/how-get-access-token-and-organizer-key for documentation about how to use LogMeIn’s OAuth service.\n      flows:\n        password:\n          scopes: {}\n          tokenUrl: https://api.getgo.com/oauth/v2/token\n          refreshUrl: https://api.getgo.com/oauth/v2/token\n        authorizationCode:\n          scopes: {}\n          authorizationUrl: https://api.getgo.com/oauth/v2/authorize\n          tokenUrl: https://api.getgo.com/oauth/v2/token\n          refreshUrl: https://api.getgo.com/oauth/v2/token\n    Bearer:\n      type: http\n      scheme: bearer\n  parameters:\n    Authorization:\n      name: Authorization\n      in: header\n      description: Access token\n      required: true\n      schema:\n        type: string\n    groupKey:\n      name: groupKey\n      in: path\n      description: The key of the group\n      required: true\n      schema:\n        type: integer\n        format: int64\n    organizerKey:\n      name: organizerKey\n      in: path\n      description: The key of the organizer\n      required: true\n      schema:\n        type: integer\n        format: int64\n    meetingId:\n      name: meetingId\n      description: The meeting ID\n      in: path\n      required: true\n      schema:\n        type: integer\n        format: int64\n  requestBodies:\n    OrganizerReq:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/OrganizerReq'\n      description: The details of the organizer to be created\n      required: true\n  schemas:\n    Group:\n      description: Describes a collection of organizers categorized by department or job\n        function, for example. Can be a subgroup of a larger group.\n      required:\n        - groupkey\n        - groupName\n        - parentKey\n        - status\n        - numOrganizers\n      properties:\n        groupkey:\n          type: integer\n          format: int64\n          description: The key of this group\n        groupName:\n          type: string\n          description: The name of this group\n        parentKey:\n          type: integer\n          format: int64\n          description: The key of the parent group this group belongs to. Identical with\n            the groupkey if this group is not a subgroup\n        status:\n          $ref: '#/components/schemas/Status'\n        numOrganizers:\n          type: integer\n          format: int32\n          description: The number of organizers assigned to this group\n    AttendeeByGroup:\n      description: Describes an attendee of a meeting instance held by an organizer within\n        a specified group.\n      required:\n        - lastName\n        - groupName\n        - numAttendees\n        - attendeeName\n        - subject\n        - endTime\n        - conferenceCallInfo\n        - organizerkey\n        - startTime\n        - meetingInstanceKey\n        - duration\n        - joinTime\n        - email\n        - leaveTime\n        - attendeeEmail\n        - organizerKey\n        - meetingId\n        - meetingType\n        - firstName\n      properties:\n        lastName:\n          type: string\n          description: The surname of the meeting organizer\n        groupName:\n          type: string\n          description: The name of the group\n        numAttendees:\n          type: integer\n          format: int32\n          description: The number of attendees at the attended meeting instance\n        attendeeName:\n          type: string\n          description: The full name of the attendee\n        subject:\n          type: string\n          description: The subject of the attended meeting\n        endTime:\n          type: string\n          format: date-time\n          description: The time the meeting instance ended\n        conferenceCallInfo:\n          type: string\n          description: Audio options for the attended meeting\n        organizerkey:\n          type: integer\n          format: int64\n          description: The key of the meeting organizer. Field retained for backwards\n            compatibility reasons\n        startTime:\n          type: string\n          format: date-time\n          description: The time the meeting instance started\n        meetingInstanceKey:\n          type: integer\n          format: int64\n          description: The key of the attended meeting instance\n        duration:\n          type: integer\n          format: int32\n          description: The duration of attendance in minutes\n        joinTime:\n          type: string\n          format: date-time\n          description: The time the attendee joined the meeting instance\n        email:\n          type: string\n          description: The email address of the meeting organizer\n        leaveTime:\n          type: string\n          format: date-time\n          description: The time the attendee left the meeting instance\n        attendeeEmail:\n          type: string\n          description: The attendee's email address\n        organizerKey:\n          type: string\n          description: The key of the meeting organizer\n        meetingId:\n          type: string\n          description: The meeting ID\n        meetingType:\n          $ref: '#/components/schemas/MeetingType'\n        firstName:\n          type: string\n          description: The first name of the organizer of the attended meeting\n    HistoryMeetingByGroup:\n      description: Describes past meeting instance(s) held by an organizer within a\n        specified group.\n      required:\n        - lastName\n        - groupName\n        - numAttendees\n        - subject\n        - endTime\n        - conferenceCallInfo\n        - organizerkey\n        - startTime\n        - meetingInstanceKey\n        - duration\n        - email\n        - organizerKey\n        - meetingId\n        - meetingType\n        - firstName\n      properties:\n        lastName:\n          type: string\n          description: The surname of the meeting organizer\n        groupName:\n          type: string\n          description: The name of the group\n        numAttendees:\n          type: integer\n          format: int32\n          description: The number of attendees at this meeting instance\n        subject:\n          type: string\n          description: The subject of the meeting\n        endTime:\n          type: string\n          format: date-time\n          description: The time this meeting instance ended\n        conferenceCallInfo:\n          type: string\n          description: Audio options for the meeting\n        organizerkey:\n          type: integer\n          format: int64\n          description: The key of the meeting organizer. Field retained for backwards\n            compatibility reasons\n        startTime:\n          type: string\n          format: date-time\n          description: The time this meeting instance started\n        meetingInstanceKey:\n          type: integer\n          format: int64\n          description: The key of this meeting instance\n        duration:\n          type: string\n          description: The duration of this meeting instance in minutes\n        email:\n          type: string\n          description: The email address of the meeting organizer\n        organizerKey:\n          type: string\n          description: The key of the meeting organizer\n        meetingId:\n          type: string\n          description: The meeting ID\n        meetingType:\n          $ref: '#/components/schemas/MeetingType'\n        firstName:\n          type: string\n          description: The first name of the meeting organizer\n    ScheduledMeetingByGroup:\n      description: Describes a meeting scheduled by an organizer within a specified group.\n      required:\n        - organizerkey\n        - attendees\n        - lastName\n        - groupName\n        - passwordRequired\n        - email\n        - subject\n        - meetingId\n        - organizerKey\n        - meetingType\n        - firstName\n        - conferenceCallInfo\n      properties:\n        organizerkey:\n          type: integer\n          format: int64\n          description: The key of the meeting organizer. Field retained for backwards\n            compatibility reasons.\n        attendees:\n          type: string\n          description: Not in use.\n        lastName:\n          type: string\n          description: The surname of the meeting organizer.\n        groupName:\n          type: string\n          description: The name of the group.\n        passwordRequired:\n          type: boolean\n          description: Indicates whether a password is required to join the meeting.\n        email:\n          type: string\n          description: The email address of the meeting organizer.\n        subject:\n          type: string\n          description: The subject of the meeting.\n        meetingId:\n          type: string\n          description: The meeting ID.\n        organizerKey:\n          type: string\n          description: The key of the meeting organizer.\n        meetingType:\n          $ref: '#/components/schemas/MeetingType'\n        firstName:\n          type: string\n          description: The first name of the meeting organizer.\n        conferenceCallInfo:\n          type: string\n          description: Audio options for the meeting.\n    OrganizerReq:\n      description: Describes the information required to create an organizer, with or\n        without assigning a group.\n      required:\n        - organizerEmail\n        - firstName\n        - lastName\n        - productType\n      properties:\n        organizerEmail:\n          type: string\n          description: The email address of the organizer\n        firstName:\n          type: string\n          description: The first name of the organizer\n        lastName:\n          type: string\n          description: The surname of the organizer\n        productType:\n          $ref: '#/components/schemas/Product'\n    OrganizerShort:\n      description: Describes a newly created organizer.\n      required:\n        - key\n        - email\n      properties:\n        key:\n          type: integer\n          format: int64\n          description: The organizer's key\n        email:\n          type: string\n          description: The organizer's email address\n    OrganizerByGroup:\n      description: Describes an organizer within a specified group.\n      required:\n        - lastName\n        - groupId\n        - groupName\n        - status\n        - email\n        - organizerKey\n        - firstName\n        - products\n        - maxNumAttendeesAllowed\n      properties:\n        lastName:\n          type: string\n          description: The organizer's surname\n        groupId:\n          type: integer\n          format: int64\n          description: The key of the group\n        groupName:\n          type: string\n          description: The name of the group\n        status:\n          $ref: '#/components/schemas/Status'\n        email:\n          type: string\n          description: The organizer's email address\n        organizerKey:\n          type: integer\n          format: int64\n          description: The key of the organizer\n        firstName:\n          type: string\n          description: The organizer's first name\n        products:\n          type: array\n          description: Product list\n          items:\n            $ref: '#/components/schemas/Product'\n        maxNumAttendeesAllowed:\n          type: integer\n          format: int32\n          description: The maximum number of attendees allowed at sessions held by this\n            organizer\n    OrganizerStatus:\n      description: Describes the status of an organizer, i.e. whether they are able to host\n        meetings.\n      properties:\n        status:\n          type: string\n          description: The status of the organizer can be set to. Use 'suspended' to remove\n            all products. The formerly used status 'active' is now DEPRECATED\n            for this call. To activate the organizer please assign a product. In\n            this case do not pass this parameter\n          enum:\n            - suspended\n        productType:\n          $ref: '#/components/schemas/Product'\n    Organizer:\n      description: Describes an organizer.\n      required:\n        - lastName\n        - groupId\n        - groupName\n        - status\n        - email\n        - organizerKey\n        - firstName\n        - products\n        - maxNumAttendeesAllowed\n      properties:\n        lastName:\n          type: string\n          description: The organizer's surname\n        groupId:\n          type: integer\n          format: int64\n          description: The key of the group this organizer is assigned to\n        groupName:\n          type: string\n          description: The name of the group this organizer is assigned to\n        status:\n          $ref: '#/components/schemas/Status'\n        organizerKey:\n          type: integer\n          format: int64\n          description: The key of the organizer\n        email:\n          type: string\n          description: The organizer's email address\n        firstName:\n          type: string\n          description: The organizer's first name\n        products:\n          type: array\n          description: Product list\n          items:\n            $ref: '#/components/schemas/Product'\n        maxNumAttendeesAllowed:\n          type: integer\n          format: int32\n          description: The maximum number of attendees allowed at sessions hosted by this\n            organizer.\n    AttendeeByOrganizer:\n      description: Describes an attendee of a meeting instance held by a specified\n        organizer.\n      required:\n        - lastName\n        - groupName\n        - numAttendees\n        - attendeeName\n        - subject\n        - endTime\n        - conferenceCallInfo\n        - organizerkey\n        - startTime\n        - meetingInstanceKey\n        - duration\n        - newMeetingId\n        - email\n        - joinTime\n        - name\n        - leaveTime\n        - attendeeEmail\n        - meetingId\n        - meetingType\n        - firstName\n      properties:\n        lastName:\n          type: string\n          description: The surname of the meeting organizer\n        groupName:\n          type: string\n          description: The name of the group the organizer is assigned to\n        numAttendees:\n          type: integer\n          format: int32\n          description: The number of attendees at the attended meeting instance\n        attendeeName:\n          type: string\n          description: The full name of the attendee\n        subject:\n          type: string\n          description: The subject of the attended meeting\n        endTime:\n          type: string\n          format: date-time\n          description: The time the meeting instance ended\n        conferenceCallInfo:\n          type: string\n          description: Audio options for the attended meeting\n        organizerkey:\n          type: integer\n          format: int64\n          description: The key of the meeting organizer. Field retained for backwards\n            compatibility reasons\n        startTime:\n          type: string\n          format: date-time\n          description: The time the meeting instance started\n        meetingInstanceKey:\n          type: integer\n          format: int64\n          description: The key of the attended meeting instance\n        duration:\n          type: integer\n          format: int32\n          description: The duration of attendance in minutes\n        newMeetingId:\n          type: string\n          description: The formatted meeting ID\n        email:\n          type: string\n          description: The email address of the meeting organizer\n        joinTime:\n          type: string\n          format: date-time\n          description: The time the attendee joined the meeting instance\n        name:\n          type: string\n          description: The full name of the meeting organizer\n        leaveTime:\n          type: string\n          format: date-time\n          description: The time the attendee left the meeting instance\n        attendeeEmail:\n          type: string\n          description: The attendee's email address\n        meetingId:\n          type: integer\n          format: int64\n          description: The meeting ID\n        meetingType:\n          $ref: '#/components/schemas/MeetingType'\n        firstName:\n          type: string\n          description: The first name of the meeting organizer\n    MeetingByOrganizer:\n      description: Describes a meeting scheduled by a specified organizer\n      required:\n        - startTime\n        - createTime\n        - meetingid\n        - maxParticipants\n        - passwordRequired\n        - status\n        - subject\n        - meetingType\n        - endTime\n        - uniqueMeetingId\n        - conferenceCallInfo\n      properties:\n        startTime:\n          type: string\n          format: date-time\n          description: The starting time of the meeting\n        createTime:\n          type: string\n          format: date-time\n          description: DEPRECATED. Returns an empty string ''\n        meetingid:\n          type: integer\n          format: int64\n          description: The meeting ID\n        maxParticipants:\n          type: integer\n          format: int32\n          description: The maximum number of participants allowed at the meeting\n        passwordRequired:\n          type: boolean\n          description: Indicates whether a password is required to join the meeting\n        status:\n          $ref: '#/components/schemas/MeetingStatus'\n        subject:\n          type: string\n          description: The subject of the meeting\n        meetingType:\n          $ref: '#/components/schemas/MeetingType'\n        endTime:\n          type: string\n          format: date-time\n          description: The ending time of the meeting\n        uniqueMeetingId:\n          type: integer\n          format: int64\n          description: A unique ID for the meeting\n        conferenceCallInfo:\n          type: string\n          description: Audio options for the meeting\n    MeetingReqCreate:\n      description: Describes the information required to create a meeting.\n      required:\n        - subject\n        - starttime\n        - endtime\n        - passwordrequired\n        - conferencecallinfo\n        - timezonekey\n        - meetingtype\n      properties:\n        subject:\n          type: string\n          description: The subject of the meeting. 100 characters maximum. The characters\n            '\u003e' and '\u003c' have to be replaced with the corresponding html\n            character code (\u0026gt; for '\u003e' and \u0026lt; for\n            '\u003c')\n        starttime:\n          type: string\n          format: date-time\n          description: The starting time of the meeting. Required ISO8601 UTC string, e.g.\n            2015-07-01T22:00:00Z\n        endtime:\n          type: string\n          format: date-time\n          description: The ending time of the meeting. Required ISO8601 UTC string, e.g.\n            2015-07-01T23:00:00Z\n        passwordrequired:\n          type: boolean\n          description: Indicates whether a password is required to join the meeting.\n            Required parameter\n        conferencecallinfo:\n          type: string\n          description: \u003e\n            A required string. Can be one of the following options:\n            PSTN (PSTN only),\n            Free (PSTN and VoIP),\n            Hybrid, (PSTN and VoIP),\n            Private (you provide numbers and access code), or\n            VoIP (VoIP only).\n            You may also enter plain text for numbers and access codes with a limit of 255 characters\n        timezonekey:\n          type: string\n          description: DEPRECATED. Must be provided and set to empty string ''\n        meetingtype:\n          $ref: '#/components/schemas/MeetingType'\n        coorganizerKeys:\n          description: Co-organizer keys. Co-organizers can start the meeting on the\n            organizers behalf. Retrieve a list of valid organizers from the 'Get Users' call.\n          type: array\n          items:\n            type: string\n    MeetingReqUpdate:\n      description: Describes the information required to update a meeting.\n      required:\n        - subject\n        - starttime\n        - endtime\n        - passwordrequired\n        - conferencecallinfo\n        - timezonekey\n        - meetingtype\n      properties:\n        subject:\n          type: string\n          description: A description of the meeting. 100 characters maximum. The characters\n            '\u003e' and '\u003c' have to be replaced with the corresponding html\n            character code (\u0026gt; for '\u003e' and \u0026lt; for\n            '\u003c')\n        starttime:\n          type: string\n          format: date-time\n          description: The starting time of the meeting. A required ISO8601 UTC string,\n            e.g. 2015-07-01T22:00:00Z\n        endtime:\n          type: string\n          format: date-time\n          description: The ending time of the meeting. A required ISO8601 UTC string, e.g.\n            2015-07-01T22:00:00Z\n        passwordrequired:\n          type: boolean\n          description: Indicates whether a password is required to join the meeting.\n            Required parameter\n        conferencecallinfo:\n          type: string\n          description: \u003e\n            A required string. Can be one of the following options:\n            PSTN (PSTN only),\n            Free (PSTN and VoIP),\n            Hybrid, (PSTN and VoIP),\n            Private (you provide numbers and access code), or\n            VoIP (VoIP only).\n            You may also enter plain text for numbers and access codes with a limit of 255 characters\n        timezonekey:\n          type: string\n          description: DEPRECATED. Must be provided and set to empty string ''\n        meetingtype:\n          $ref: '#/components/schemas/MeetingType'\n        coorganizerKeys:\n          description: Co-organizer keys. Co-organizers can start the meeting on the\n            organizers behalf. Retrieve a list of valid organizers from the 'Get Users' call.\n          type: array\n          items:\n            type: string\n    MeetingById:\n      description: Describes a given meeting.\n      required:\n        - createTime\n        - passwordRequired\n        - status\n        - subject\n        - endTime\n        - conferenceCallInfo\n        - startTime\n        - duration\n        - maxParticipants\n        - meetingId\n        - meetingKey\n        - meetingType\n        - uniqueMeetingId\n      properties:\n        createTime:\n          type: string\n          format: date-time\n          description: DEPRECATED. Returns an empty string ''\n        passwordRequired:\n          type: boolean\n          description: Indicates whether a password is required to join the meeting\n        status:\n          $ref: '#/components/schemas/MeetingStatus'\n        subject:\n          type: string\n          description: The subject of the meeting\n        endTime:\n          type: string\n          format: date-time\n          description: The ending time of the meeting\n        conferenceCallInfo:\n          type: string\n          description: Audio options of the meeting\n        startTime:\n          type: string\n          format: date-time\n          description: The meeting starting time\n        duration:\n          type: integer\n          format: int32\n          description: The duration of the meeting in minutes\n        maxParticipants:\n          type: integer\n          format: int32\n          description: The maximum number of participants allowed at the meeting\n        meetingId:\n          type: integer\n          format: int64\n          description: The meeting ID\n        meetingKey:\n          type: integer\n          format: int64\n          description: The meeting ID. Field retained for backwards compatibility reasons\n        meetingType:\n          $ref: '#/components/schemas/MeetingType'\n        uniqueMeetingId:\n          type: integer\n          format: int64\n          description: The meeting ID. Field retained for backwards compatibility reasons\n        coorganizerKeys:\n          type: array\n          description: The co-organizer keys of users that also can host the meeting.\n          items:\n            type: string\n    MeetingScheduled:\n      description: Describes a scheduled meeting.\n      required:\n        - startTime\n        - createTime\n        - meetingid\n        - maxParticipants\n        - passwordRequired\n        - status\n        - subject\n        - meetingType\n        - endTime\n        - uniqueMeetingId\n        - conferenceCallInfo\n      properties:\n        startTime:\n          type: string\n          format: date-time\n          description: The starting time of the meeting.\n        createTime:\n          type: string\n          format: date-time\n          description: The time the meeting was created.\n        meetingid:\n          type: integer\n          format: int64\n          description: The meeting ID.\n        maxParticipants:\n          type: integer\n          format: int32\n          description: The maximum number of participants allowed at the meeting.\n        passwordRequired:\n          type: boolean\n          description: Indicates whether a password is required to join the meeting.\n        status:\n          $ref: '#/components/schemas/MeetingStatus'\n        subject:\n          type: string\n          description: The subject of the meeting.\n        meetingType:\n          $ref: '#/components/schemas/MeetingType'\n        endTime:\n          type: string\n          format: date-time\n          description: The ending time of the meeting.\n        uniqueMeetingId:\n          type: integer\n          format: int64\n          description: The meeting ID. Field retained for backwards compatibility reasons.\n        conferenceCallInfo:\n          type: string\n          description: Audio options for the meeting.\n        coorganizerKeys:\n          description: Co-organizer keys. Co-organizers can start the meeting on the\n            organizers behalf.\n          type: array\n          items:\n            type: string\n    MeetingHistory:\n      description: Describes a unique past meeting instance.\n      required:\n        - lastName\n        - groupName\n        - numAttendees\n        - passwordRequired\n        - status\n        - subject\n        - endTime\n        - date\n        - conferenceCallInfo\n        - startTime\n        - organizerkey\n        - meetingInstanceKey\n        - newOrganizerKey\n        - duration\n        - newMeetingId\n        - sessionId\n        - email\n        - meetingId\n        - organizerKey\n        - meetingKey\n        - meetingType\n        - firstName\n        - uniqueMeetingId\n      properties:\n        lastName:\n          type: string\n          description: The surname of the meeting organizer\n        groupName:\n          type: string\n          description: DEPRECATED. An empty string '' is returned\n        numAttendees:\n          type: integer\n          format: int32\n          description: The number of attendees at the meeting instance\n        passwordRequired:\n          type: boolean\n          description: DEPRECATED. An empty string '' is returned\n        status:\n          type: string\n          description: DEPRECATED. An empty string '' is returned\n        subject:\n          type: string\n          description: The subject of the meeting\n        endTime:\n          type: string\n          format: date-time\n          description: The time the meeting instance ended\n        date:\n          type: string\n          format: date-time\n          description: The time the meeting instance started. Field retained for backwards\n            compatibility reasons\n        conferenceCallInfo:\n          type: string\n          description: Audio options for the meeting\n        startTime:\n          type: string\n          format: date-time\n          description: The time the meeting instance started\n        organizerkey:\n          type: string\n          description: The key of the meeting organizer. Field retained for backwards\n            compatibility reasons\n        meetingInstanceKey:\n          type: integer\n          format: int64\n          description: The key of the unique meeting instance\n        newOrganizerKey:\n          type: string\n          description: The key of the meeting organizer. Field introduced for compatibility\n            reasons\n        duration:\n          type: integer\n          format: int32\n          description: The duration of the meeting session in minutes\n        newMeetingId:\n          type: string\n          description: Formatted meeting ID\n        sessionId:\n          type: integer\n          format: int64\n          description: The ID of the meeting session\n        email:\n          type: string\n          description: The meeting organizer's email address\n        meetingId:\n          type: integer\n          format: int64\n          description: The meeting ID\n        organizerKey:\n          type: string\n          description: The key of the meeting organizer\n        meetingKey:\n          type: integer\n          format: int64\n          description: The meeting ID. Field retained for backwards compatibility reasons\n        meetingType:\n          $ref: '#/components/schemas/MeetingType'\n        firstName:\n          type: string\n          description: The meeting organizer's first name\n        uniqueMeetingId:\n          type: integer\n          format: int64\n          description: The meeting ID. Field retained for backwards compatibility reasons\n        recording:\n          $ref: '#/components/schemas/MeetingRecording'\n    HistoricalMeeting:\n      description: Describes a historical meeting within specified dates.\n      required:\n        - startTime\n        - lastName\n        - duration\n        - numAttendees\n        - accountKey\n        - email\n        - sessionId\n        - subject\n        - locale\n        - organizerKey\n        - meetingId\n        - meetingType\n        - firstName\n        - endTime\n        - conferenceCallInfo\n      properties:\n        startTime:\n          type: string\n          format: date-time\n          description: The time the meeting instance started\n        lastName:\n          type: string\n          description: The surname of the meeting organizer\n        duration:\n          type: string\n          description: The duration of the meeting session in minutes\n        numAttendees:\n          type: string\n          description: The number of attendees at the meeting instance\n        accountKey:\n          type: string\n          description: The key of the company account\n        email:\n          type: string\n          description: The meeting organizer's email address\n        sessionId:\n          type: string\n          description: The ID of the meeting session\n        subject:\n          type: string\n          description: The subject of the meeting\n        locale:\n          type: string\n          description: The current language setting of the organizer in the web portal\n        organizerKey:\n          type: string\n          description: The key of the meeting organizer\n        meetingId:\n          type: string\n          description: The meeting ID\n        meetingType:\n          $ref: '#/components/schemas/MeetingType'\n        firstName:\n          type: string\n          description: The meeting organizer's first name\n        endTime:\n          type: string\n          format: date-time\n          description: The time the meeting instance ended\n        conferenceCallInfo:\n          type: string\n          description: Audio options for the meeting\n        recording:\n          $ref: '#/components/schemas/MeetingRecording'\n    HistoricalMeetingByGroup:\n      description: Describes a historical meeting within specified dates for a specified\n        group.\n      required:\n        - startTime\n        - lastName\n        - duration\n        - numAttendees\n        - accountKey\n        - email\n        - subject\n        - locale\n        - organizerKey\n        - meetingId\n        - meetingType\n        - firstName\n        - endTime\n        - groupName\n      properties:\n        startTime:\n          type: string\n          format: date-time\n          description: The time the meeting instance started\n        lastName:\n          type: string\n          description: The surname of the meeting organizer\n        duration:\n          type: string\n          description: The duration of the meeting session in minutes\n        numAttendees:\n          type: string\n          description: The number of attendees at the meeting instance\n        accountKey:\n          type: string\n          description: The key of the company account\n        email:\n          type: string\n          description: The meeting organizer's email address\n        subject:\n          type: string\n          description: The subject of the meeting\n        locale:\n          type: string\n          description: The current language setting of the organizer in the web portal\n        organizerKey:\n          type: string\n          description: The key of the meeting organizer\n        meetingId:\n          type: string\n          description: The meeting ID\n        meetingType:\n          $ref: '#/components/schemas/MeetingType'\n        firstName:\n          type: string\n          description: The meeting organizer's first name\n        endTime:\n          type: string\n          format: date-time\n          description: The time the meeting instance ended\n        groupName:\n          type: string\n          description: The name of the group\n    UpcomingMeeting:\n      description: Describes an upcoming meeting.\n      required:\n        - startTime\n        - lastName\n        - accountKey\n        - passwordRequired\n        - email\n        - status\n        - subject\n        - locale\n        - organizerKey\n        - meetingId\n        - meetingType\n        - firstName\n        - endTime\n        - conferenceCallInfo\n      properties:\n        startTime:\n          type: string\n          format: date-time\n          description: The time the meeting instance will start\n        lastName:\n          type: string\n          description: The surname of the meeting organizer\n        accountKey:\n          type: string\n          description: The key of the company account\n        passwordRequired:\n          type: boolean\n          description: Indicates whether a password is required to join the meeting or not\n        email:\n          type: string\n          description: The meeting organizer's email address\n        status:\n          $ref: '#/components/schemas/MeetingStatus'\n        subject:\n          type: string\n          description: The subject of the meeting\n        locale:\n          type: string\n          description: The current language setting of the organizer in the web portal\n        organizerKey:\n          type: string\n          description: The key of the meeting organizer\n        meetingId:\n          type: string\n          description: The meeting ID\n        meetingType:\n          $ref: '#/components/schemas/MeetingType'\n        firstName:\n          type: string\n          description: The meeting organizer's first name\n        endTime:\n          type: string\n          format: date-time\n          description: The time the meeting instance ended\n        conferenceCallInfo:\n          type: string\n          description: Audio options for the meeting\n    UpcomingMeetingByGroup:\n      description: Describes an upcoming meeting of a group.\n      required:\n        - startTime\n        - lastName\n        - accountKey\n        - passwordRequired\n        - email\n        - subject\n        - locale\n        - organizerKey\n        - meetingId\n        - meetingType\n        - firstName\n        - endTime\n        - groupName\n      properties:\n        startTime:\n          type: string\n          format: date-time\n          description: The time the meeting instance will start\n        lastName:\n          type: string\n          description: The surname of the meeting organizer\n        accountKey:\n          type: string\n          description: The key of the company account\n        passwordRequired:\n          type: boolean\n          description: Indicates whether a password is required to join the meeting or not\n        email:\n          type: string\n          description: The meeting organizer's email address\n        status:\n          $ref: '#/components/schemas/MeetingStatus'\n        subject:\n          type: string\n          description: The subject of the meeting\n        locale:\n          type: string\n          description: The current language setting of the organizer in the web portal\n        organizerKey:\n          type: string\n          description: The key of the meeting organizer\n        meetingId:\n          type: string\n          description: The meeting ID\n        meetingType:\n          $ref: '#/components/schemas/MeetingType'\n        firstName:\n          type: string\n          description: The meeting organizer's first name\n        endTime:\n          type: string\n          format: date-time\n          description: The time the meeting instance ended\n        groupName:\n          type: string\n          description: The name of the group the meeting belongs to\n    MeetingCreated:\n      description: Describes a newly created meeting.\n      required:\n        - joinURL\n        - meetingid\n        - maxParticipants\n        - uniqueMeetingId\n        - conferenceCallInfo\n      properties:\n        joinURL:\n          type: string\n          description: The URL the meeting participants will use to join the meeting\n        meetingid:\n          type: integer\n          format: int64\n          description: The meeting ID\n        maxParticipants:\n          type: integer\n          format: int32\n          description: The maximum number of participants allowed in the meeting\n        uniqueMeetingId:\n          type: integer\n          format: int64\n          description: The meeting ID. Field retained for backwards compatibility reasons\n        conferenceCallInfo:\n          type: string\n          description: Audio options for the meeting\n    StartUrl:\n      description: Host URL that can be used to start a meeting\n      required:\n        - hostURL\n      properties:\n        hostURL:\n          type: string\n          description: The host URL that can be used to start a meeting.\n    AttendeeByMeeting:\n      description: Describes an attendee of a specified meeting instance.\n      required:\n        - lastName\n        - groupName\n        - numAttendees\n        - attendeeName\n        - subject\n        - endTime\n        - conferenceCallInfo\n        - organizerkey\n        - startTime\n        - meetingInstanceKey\n        - duration\n        - email\n        - joinTime\n        - name\n        - leaveTime\n        - attendeeEmail\n        - meetingId\n        - meetingType\n        - firstName\n      properties:\n        lastName:\n          type: string\n          description: The surname of the meeting organizer\n        groupName:\n          type: string\n          description: DEPRECATED. Returns 'NA'\n        numAttendees:\n          type: integer\n          format: int32\n          description: The number of attendees at the meeting instance\n        attendeeName:\n          type: string\n          description: The attendee's full name\n        subject:\n          type: string\n          description: The subject of the meeting\n        endTime:\n          type: string\n          format: date-time\n          description: The ending time of the meeting instance\n        conferenceCallInfo:\n          type: string\n          description: Audio options for the meeting\n        organizerkey:\n          type: integer\n          format: int64\n          description: The key of the meeting organizer\n        startTime:\n          type: string\n          format: date-time\n          description: The starting time of the meeting instance\n        meetingInstanceKey:\n          type: integer\n          format: int64\n          description: The key of the unique meeting instance\n        duration:\n          type: integer\n          format: int32\n          description: The meeting duration in minutes\n        email:\n          type: string\n          description: The email address of the meeting organizer\n        joinTime:\n          type: string\n          format: date-time\n          description: The time the attendee joined the meeting instance\n        name:\n          type: string\n          description: The attendee's full name\n        leaveTime:\n          type: string\n          format: date-time\n          description: The time the attendee left the meeting instance\n        attendeeEmail:\n          type: string\n          description: The attendee's email address\n        meetingId:\n          type: integer\n          format: int64\n          description: The meeting ID\n        meetingType:\n          $ref: '#/components/schemas/MeetingType'\n        firstName:\n          type: string\n          description: The first name of the meeting organizer\n    MeetingRecording:\n      description: Information about the meeting recording.\n      properties:\n        recordingName:\n          type: string\n          description: Name of the recording\n        recordingId:\n          type: string\n          description: The recording ID\n        downloadUrl:\n          type: string\n          description: Url where the mp4 file of the recording can be downloaded\n        fileSize:\n          type: integer\n          format: int64\n          description: Size of the recording file in bytes\n        shareUrl:\n          type: string\n          description: Url that can be used to share the recording only or including\n            transcripts if present\n    Product:\n      description: Product type\n      type: string\n      enum:\n        - G2M\n        - G2W\n        - G2T\n        - OPENVOICE\n        - G2ASEEIT\n        - G2ARS\n        - G2ASD\n    MeetingType:\n      type: string\n      description: The meeting type\n      enum:\n        - immediate\n        - recurring\n        - scheduled\n    MeetingStatus:\n      type: string\n      description: The meeting status, i.e whether the meeting is running or not\n      enum:\n        - ACTIVE\n        - INACTIVE\n    Status:\n      type: string\n      description: The status of an organizer (or group), i.e. whether the organizer (or\n        the members of the group respectively) are able to host meetings\n      enum:\n        - active\n        - suspended",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/gotomeeting/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/gotomeeting/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/groups/{groupKey}/organizers\": get: security: security \"OAuth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}