{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/PacktPublishing/Building-Enterprise-JavaScript-Applications"
		},
		"file": {
			"name": "hobnob.yaml",
			"size": 0,
			"path": "Chapter17/hobnob-client/api/spec/openapi/hobnob.yaml",
			"byteSize": 10607,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Hobnob User Directory\n  version: \"1.0.0\"\n  contact:\n    name: Support\n    email: dan@danyll.com\nservers:\n  - url: http://localhost:8080/\n    description: Local Development Server\ntags:\n  - name: Authentication\n    description: Authentication-related endpoints\n  - name: Users\n    description: User-related endpoints\n  - name: Profile\n    description: Profile-related endpoints\ncomponents:\n  schemas:\n    Error:\n      properties:\n        message:\n          description: Error message\n          type: string\n    Profile:\n      title: User Profile\n      type: object\n      properties:\n        bio:\n          type: string\n        summary:\n          type: string\n        name:\n          type: object\n          properties:\n            first:\n              type: string\n            middle:\n              type: string\n            last:\n              type: string\n      additionalProperties: false\n    User:\n      title: User Schema\n      properties:\n        email:\n          type: string\n          format: email\n        digest:\n          type: string\n          pattern: ^\\\\$2[aby]?\\\\$\\\\d{1,2}\\\\$[.\\\\/A-Za-z0-9]{53}$\n        profile:\n          $ref: '#/components/schemas/Profile'\n      additionalProperties: false\n      required:\n        - email\n        - digest\n      example:\n        email: e@ma.il\n        digest: $2a$10$enCaroMp4gMvEmvCe4EuP.0d5FZ6yc0yUuSJ0pQTt4EO5MXvonUTm\n        profile:\n          bio: Daniel is a species of JavaScript developer that is commonly found in Hong Kong and London. Daniel's developer life started off with working in digital agencies in Hong Kong, working with languages such as PHP, C#.NET and JavaScript. Soon after, Daniel opened his own digital agency called Brew, which specialized in the Meteor framework.\n          summary: JavaScript Developer\n          name:\n            first: Daniel\n            last: Li\n    UserLimited:\n      title: Retrieve User Response Payload Schema\n      description: An User object with the digest field removed\n      properties:\n        email:\n          type: string\n          format: email\n        profile:\n          $ref: '#/components/schemas/Profile'\n      additionalProperties: false\n      required:\n        - email\n        - digest\n      example:\n        email: e@ma.il\n        profile:\n          bio: Daniel is a species of JavaScript developer that is commonly found in Hong Kong and London. Daniel's developer life started off with working in digital agencies in Hong Kong, working with languages such as PHP, C#.NET and JavaScript. Soon after, Daniel opened his own digital agency called Brew, which specialized in the Meteor framework.\n          summary: JavaScript Developer\n          name:\n            first: Daniel\n            last: Li\n  responses:\n    Success:\n      description: Success\n    Created:\n      description: Created\n      content:\n        text/plain:\n          schema:\n            type: string\n    LoginSuccess:\n      description: Logged In Successfully\n      content:\n        text/plain:\n          schema:\n            type: string\n    SaltRetrieved:\n      description: Salt Retrieved\n      content:\n        text/plain:\n          schema:\n            type: string\n    UserRetrieved:\n      description: User Retrieved\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UserLimited'\n    UsersRetrieved:\n      description: Users Retrieved from Search Operation\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/UserLimited'\n    ErrorBadRequest:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    ErrorUnauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    ErrorForbidden:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    ErrorNotFound:\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    ErrorUnsupportedMediaType:\n      description: Unsupported Media Type\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    ErrorInternalServer:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  securitySchemes:\n    token:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\npaths:\n  /login/:\n    post:\n      tags:\n        - Authentication\n      summary: Perform password-based authentication\n      description: Returns a JWT upon success\n      requestBody:\n        description: User Credentials\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n                  format: email\n                digest:\n                  type: string\n                  pattern: ^\\\\$2[aby]?\\\\$\\\\d{1,2}\\\\$[.\\\\/A-Za-z0-9]{53}$\n      responses:\n        '200':\n          $ref: '#/components/responses/LoginSuccess'\n        '400':\n          $ref: '#/components/responses/ErrorBadRequest'\n        '401':\n          $ref: '#/components/responses/ErrorUnauthorized'\n        '500':\n          $ref: '#/components/responses/ErrorInternalServer'\n  /salt/:\n    get:\n      tags:\n        - Authentication\n      summary: Returns the salt of an user based on the user's email\n      description: Even if there are no users with the specified email, this endpoint will still return with a salt. This is to prevent the API leaking information about which email addresses are used to register on the platform.\n      parameters:\n        - name: email\n          in: query\n          description: The email of user to retrieve the salt for\n          required: true\n          schema:\n            type: string\n            format: email\n      responses:\n        '200':\n          $ref: '#/components/responses/SaltRetrieved'\n        '400':\n          $ref: '#/components/responses/ErrorBadRequest'\n        '500':\n          $ref: '#/components/responses/ErrorInternalServer'\n  /users/:\n    get:\n      tags:\n        - Users\n      summary: Search for a User using query string\n      parameters:\n        - name: query\n          in: query\n          description: The term to query for\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/UsersRetrieved'\n        '400':\n          $ref: '#/components/responses/ErrorBadRequest'\n        '500':\n          $ref: '#/components/responses/ErrorInternalServer'\n    post:\n      tags:\n        - Users\n      summary: Creates a New User\n      requestBody:\n        description: The New User object\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        '201':\n          $ref: '#/components/responses/Created'\n        '400':\n          $ref: '#/components/responses/ErrorBadRequest'\n        '415':\n          $ref: '#/components/responses/ErrorUnsupportedMediaType'\n        '500':\n          $ref: '#/components/responses/ErrorInternalServer'\n  /users/{userId}:\n    get:\n      tags:\n        - Users\n      summary: Retrieves details of a single User\n      parameters:\n        - name: userId\n          in: path\n          description: ID of the User to retrieve\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/UserRetrieved'\n        '400':\n          $ref: '#/components/responses/ErrorBadRequest'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '500':\n          $ref: '#/components/responses/ErrorInternalServer'\n    delete:\n      tags:\n        - Users\n      summary: Deletes a User\n      security:\n        - token: []\n      parameters:\n        - name: userId\n          in: path\n          description: ID of the User to delete\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/UserRetrieved'\n        '400':\n          $ref: '#/components/responses/ErrorBadRequest'\n        '403':\n          $ref: '#/components/responses/ErrorForbidden'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '500':\n          $ref: '#/components/responses/ErrorInternalServer'\n  /users/{userId}/profile:\n    patch:\n      tags:\n        - Profile\n      summary: Update the Profile of the User\n      security:\n        - token: []\n      parameters:\n        - name: userId\n          in: path\n          description: ID of the User\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: An object representing the fields in the Profile to update\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Profile\"\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '400':\n          $ref: '#/components/responses/ErrorBadRequest'\n        '401':\n          $ref: '#/components/responses/ErrorUnauthorized'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '415':\n          $ref: '#/components/responses/ErrorUnsupportedMediaType'\n        '500':\n          $ref: '#/components/responses/ErrorInternalServer'\n    put:\n      tags:\n        - Profile\n      summary: Replaces the Profile of the User with a new Profile\n      security:\n        - token: []\n      parameters:\n        - name: userId\n          in: path\n          description: ID of the User\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The New Profile object\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Profile\"\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '400':\n          $ref: '#/components/responses/ErrorBadRequest'\n        '401':\n          $ref: '#/components/responses/ErrorUnauthorized'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '415':\n          $ref: '#/components/responses/ErrorUnsupportedMediaType'\n        '500':\n          $ref: '#/components/responses/ErrorInternalServer'",
			"canonicalURL": "/github.com/PacktPublishing/Building-Enterprise-JavaScript-Applications@c6dce542d5b991a65e6b403d3e198e11028a6791/-/blob/Chapter17/hobnob-client/api/spec/openapi/hobnob.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/PacktPublishing/Building-Enterprise-JavaScript-Applications/blob/c6dce542d5b991a65e6b403d3e198e11028a6791/Chapter17/hobnob-client/api/spec/openapi/hobnob.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/login/\": post: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}