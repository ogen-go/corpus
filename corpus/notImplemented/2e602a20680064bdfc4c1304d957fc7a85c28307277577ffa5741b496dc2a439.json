{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/MG-RAST/Shock"
		},
		"file": {
			"name": "shock-openapi.yaml",
			"size": 0,
			"path": "docs/API/shock-openapi.yaml",
			"byteSize": 21472,
			"content": "openapi: 3.0.0\nservers:\n  - url: shock.mg-rast.org\ninfo:\n  description: |\n  version: 1.0.0\n  title: Shock2 API specification\n  termsOfService: ''\ntags:\n  - name: node\n    description: Node resource\n  - name: node_acl\n    description: Node ACL subresource\n  - name: node_index\n    description: Node index subresource\ncomponents:\n schemas:\n   Node:\n     properties:\n       id:\n         type: string\n         description: unique identifier\n       file:\n         type: object\n         description:  name, size, checksum(s).\n       attributes:\n         type: object\n         description: arbitrary json. Queriable.\n       indexes:\n         type: string\n         description: A set of indexes to use\n       version:\n         type: string\n         description: a version stamp for this node\n   # Both properties are required\n     required:  \n      - id\npaths:\n  '/node':\n    get:\n      summary: list nodes\n      description: |\n        All attributes are queriable. For example if a node has in it's attributes `\"about\" : \"metagenome\"` the url \n        `/node/?query\u0026about=metagenome`\n        would return it and all other nodes with that attribute. Address of nested attributes like `\"metadata\": { \"env_biome\": \"ENVO:human-associated habitat\", ... } `is done via a dot notation \n        `/node/?query\u0026metadata.env_biome=ENVO:human-associated%20habitat`\n        Multiple attributes can be selected in a single query and are treated as AND operations\n        `/node/?query\u0026metadata.env_biome=ENVO:human-associated%20habitat\u0026about=metagenome`\n          \n        **Note:** all special characters like a space must be url encoded.\n        \n        **Search nodes by user metadata (field attributes)**\n        ```\n        # by attribute key value\n        curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node?query\u0026\u003ckey\u003e=\u003cvalue\u003e\n        \n        # by attribute key value, limit 10\n        curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node?query\u0026\u003ckey\u003e=\u003cvalue\u003e\u0026limit=10\n        \n        # by attribute key value, limit 10, offset 10\n        curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node?query\u0026\u003ckey\u003e=\u003cvalue\u003e\u0026limit=10\u0026offset=10\n        ```\n        \n        **Search nodes by node native fields**\n        ```\n        # by any key value (this allows querying of fields outside of attributes section)\n        curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node?querynode\u0026\u003ckey\u003e=\u003cvalue\u003e\n        \n        # by ACL's (enter users-ids or uuids as comma-separated list, this works for query or querynode)\n        curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node?querynode\u0026[ owner | read | write | delete ]=\u003cuser-ids_or_uuids\u003e\n        (note: resultant set is a subset of the nodes that are viewable to the authenticated user)\n        \n        # by public ACL's (returns nodes that have a public setting for the given ACL)\n        curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node?querynode\u0026[ public_owner | public_read | public_write | public_delete ]=1\n        ```\n        \n      parameters:\n      - in: query\n        name: query\n        schema:\n          type: boolean\n          example: true\n        required: false\n        \n      - in: query\n        name: limit\n        schema:\n          type: integer\n        required: false\n      - in: query\n        name: offset\n        schema:\n          type: integer\n        required: false\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              example:\n                resources:  [\"node\"]\n                url: \"http://localhost:7445/\"\n                documentation: \"http://localhost:7445/documentation.html\"\n                contact: \"admin@host.com\"\n                id: \"Shock\"\n                type: \"Shock\"\n        '200':\n          description: OK\n          content:\n            application/json:\n              example:\n                data: array of nodes\n                error: string or null error message\n                status: int, http status code\n                limit: limit\n                offset: offset\n                total_count: count\n      tags:\n        - node\n    post:\n      summary: create node / upload file\n      description: | \n        - optionally takes user/password via Basic Auth. If set only that user with have access to the node\n        - accepts multipart/form-data encoded \n        - to set attributes include file field named \"attributes\" containing a json file of attributes\n        - to set file include file field named \"upload\" containing any file **or** include field named \"path\" containing the file system path to the file accessible from the Shock server\n                      \n        `curl -X POST [ see Authentication ] [ -F \"attributes=@\u003cpath_to_json\u003e\" ( -F \"upload=@\u003cpath_to_data_file\u003e\" || -F \"path=\u003cpath_to_file\u003e\") ] http://\u003chost\u003e[:\u003cport\u003e]/node`\n        \n        **Examples for node creation**\n        ```\n        # without file or attributes\n        curl -X POST http://\u003chost\u003e[:\u003cport\u003e]/node\n        \n        # with attributes file\n        curl -X POST -F \"attributes=@\u003cpath_to_json_file\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node\n        \n        # with attributes string\n        curl -X PUT -F 'attributes_str={ \"id\": 10 }' http://\u003chost\u003e[:\u003cport\u003e]/node\n        \n        # with file, using multipart form\n        curl -X POST -F \"upload=@\u003cpath_to_data_file\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node\n        \n        # with file, without using multipart form (not recommended for use with curl!)\n        curl -X POST --data-binary @\u003cpath_to_data_file\u003e http://\u003chost\u003e[:\u003cport\u003e]/node\n            (note: This request format is not recommended for use with curl because curl will read the entire file into memory before sending it. Conversely, other programming languages and applications have the opposite issue, reading the entire file into memory for a form POST but not this POST format.)\n            (also note: Posting an empty file in this way will result in an empty node with no file rather than an empty node with an empty file)\n        \n        # setting location tag\n        curl -X POST -H 'Authorization: \u003csecret\u003e'  -H \"Content-Type: application/json\"  http://\u003chost\u003e[:\u003cport\u003e]/node/${id}/locations -d '{\"id\":\"Location1\" }'\n        (note: this sets a location id Location1 for the node ${id}; Locations are defined in the locations.yaml config file)\n\n        # example with optional requested boolean and requestedDate for node 96576d58-6e2d-4bf5-8edf-8224cf29291c\n        curl -X POST -H 'Authorization: \u003csecret\u003e'  -H \"Content-Type: application/json\"  \"localhost:7445/node/96576d58-6e2d-4bf5-8edf-8224cf29291c/locations/\" -d '{\"id\":\"test1\" ,  \"stored\": true, \"requestedDate\": \"2018-09-22T12:42:31+07:00\" }' ,  \"requested\": true, \"requestedDate\": \"2018-09-22T12:42:31+07:00\" }'\n        \n        # with gzip compressed file, to be uncompressed in node\n        curl -X POST -F \"gzip=@\u003cpath_to_data_file\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node\n\n        # with bzip2 compressed file, to be uncompressed in node\n        curl -X POST -F \"bzip2=@\u003cpath_to_data_file\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node\n\n        # create node by copying data file from another node (the original file will referenced, not copied), optionally specify copy_indexes=1 to additionally copy indexes from parent node\n        curl -X POST -F \"copy_data=\u003ccopy_node_id\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node\n\n        # create a \"subset\" node which is a node where the data source is composed of a subset of indices from a parent node\n        curl -X POST -F \"parent_node=\u003cparent_node_id\u003e\" -F \"parent_index=\u003cindex\u003e\" -F \"subset_indices=@\u003cpath_to_file\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node\n\n        # copying node from one shock server to another shock server, by default this copies data and attributes - add \u0026post_data=0 and/or \u0026post_attr=0 to the url to disable either\n        (note: if the destination shock server requires authentication, you must provide authentication in your GET request and the credentials will be passed along to the destination shock server.)\n        curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?download_post\u0026post_url=http://\u003cdestination_host\u003e[:\u003cdestination_port\u003e]/node\n        \n        # with file local to the shock server\n        curl -X POST -F \"path=\u003cpath_to_data_file\u003e\" -F \"action=\u003caction_type\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node\n        (note: The action_type is one of keep_file (node points to file path given), copy_file (file is copied to shock data directory), or move_file (file is moved to shock data directory).  The move_file action only works if user running Shock has permissions to move the file.)\n        \n        # create (empty) parts nodes for N parts (part uploads may be done in parallel and out of order)\n        # note: file_name is an optional parameter for files uploaded in parts. The file name will default to the node id if it is not set.\n        # use PUT to upload part\n        curl -X POST -F \"parts=N\" -F \"file_name=\u003cfile_name\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node\n          \n        # create (empty) parts nodes for unknown numer of parts (part uploads may be done in parallel and out of order)\n        curl -X POST -F \"parts=unknown\" -F \"file_name=\u003cfile_name\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node\n \n        # with compressed file in N parts (unknown or given), to be uncompressed in node when parts completed\n        curl -X POST -F \"parts=N\" -F \"compression=gzip\" http://\u003chost\u003e[:\u003cport\u003e]/node\n        curl -X POST -F \"parts=unknown\" -F \"compression=bzip2\" http://\u003chost\u003e[:\u003cport\u003e]/node\n        \n        # create multiple nodes from a node with an archive file, supports: zip, tar, tar.gz, tar.bz2\n        # if an attributes file is included it will be applied to all the created nodes\n        curl -X POST -F \"unpack_node=\u003carchive_node_id\u003e\" -F \"archive_format=\u003cformat\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node\n        \n        ```\n      parameters:\n      - in: query\n        name: attributes\n        description: \"specifies a file containing attributes in JSON format\"\n        schema:\n          type: string\n        required: false\n        example: \"attributes.json\"\n      - in: query\n        name: attributes_str\n        description: \"attributes in JSON format\"\n        schema:\n          type: string\n          example: '{\"project\" : \"human gut\", \"sample\": \"sample1\"}'\n        required: false\n      responses:\n        '200':\n          description: OK\n      tags:\n        - node\n    \n  '/node/{nodeId}':\n    get:\n      summary: view and download node\n      description: |\n        View node, download file (full or partial)\n\n        - optionally takes user/password via Basic Auth\n        - `?download` - complete file download\n        - `?download\u0026index=size\u0026part=1\\[\u0026part=2...\\]\\[chunksize=inbytes\\]` - download portion of the file via the size virtual index. Chunksize defaults to 1MB (1048576 bytes).\n        \n        \n        ```\n        # node information\n        curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e\n\n        # download file\n        curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?download\n        \n        # download file as data stream (not as a file attachment)\n        curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?download_raw\n        \n        # download first 1mb of file\n        curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?download\u0026index=size\u0026part=1\n        \n        # download first 10mb of file\n        curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?download\u0026index=size\u0026chunk_size=10485760\u0026part=1\n        \n        # download Nth 10mb of file\n        curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?download\u0026index=size\u0026chunk_size=10485760\u0026part=N\n            \n        # download portion of file given seek and length positions (in bytes)\n        #curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?download\u0026seek=\u003cseek\u003e\u0026length=\u003clength\u003e\n        #(note: exluding seek position defaults to an offset of zero bytes, exluding length position defaults to remainder of file being returned)\n        \n        # download fastq sequence file in fasta format\n        #curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?download\u0026filter=fq2fa\n        \n        # download sequence file (fasta or fastq) with anonymous unique header IDs\n        #curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?download\u0026filter=anonymize\n        \n        # download file in compressed format, works with all the above options\n        #curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?download\u0026compression=\u003czip|gzip\u003e\n        \n        # retrieve pre-authorized download url (returns 1-time use download url that does not require auth and is valid for 24 hours)\n        #curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?download_url\n        \n        # download multiple files in a single archive format (zip or tar), returns 1-time use download url for archive\n        # use download_url with a standard query\n        #curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node?query\u0026download_url\u0026archive=zip\u0026\u003ckey\u003e=\u003cvalue\u003e\n        # use download_url with a POST and list of node ids\n        #curl -X POST -F \"download_url=1\" -F \"archive_format=zip\" -F \"ids=\u003cnode_id_1\u003e,\u003cnode_id_2\u003e,\u003c...\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node\n        \n        # download entire bam file in human readable sam alignments\n        #curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?download\u0026index=bai\n\n        # download bam alignments overlapped with specified region (ref_id:start_pos-end_pos)\n        #curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?download\u0026index=bai\u0026region=chr1:1-20000\n        \n        # download bam alignments with selected arguments supported by \"samtools view\"\n        #curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?download\u0026index=bai\u0026head\u0026headonly\u0026count\u0026flag=[INT]\u0026lib=[STR]\u0026mapq=[INT]\u0026readgroup=[STR]\n        #(note: All the arguments are optional and can be used with or without the region, but the index=bai is required)\n        \n        ```\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n              example:\n                attributes: \n                created_on: '2014-06-16T11:08:17.955-05:00'\n                file:\n                  checksum: {}\n                  format: ''\n                  name: ''\n                  size: 0\n                  virtual: false\n                  virtual_parts: []\n                id: 130cadb5-9435-4bd9-be13-715ec40b2bb5\n                indexes:\n                  size:\n                    total_units: 100\n                    average_unit_size: 1048576\n                last_modified: '2014-06-16T11:25:16.535-05:00'\n                linkages: []\n                tags: []\n                type: basic\n                version: aabfee3e4291a649c00984451e1ff891\n      tags:\n        - node\n    parameters:\n      - in: path\n        name: nodeId\n        schema:\n          type: string\n        required: true\n      - in: query\n        name: download\n        schema:\n          type: string\n        required: false\n        description: download file\n    put:\n      summary: 'update node'\n      description: |\n        **Modify:** \n\n        - **Once the file of a node is set, it is immutable.**\n        - node attributes can be over-written\n        - accepts multipart/form-data encoded \n        - to set attributes include file field named \"attributes\" containing a json file of attributes\n        - to set file include file field named \"upload\" containing any file **or** include field named \"path\" containing the file system path to the file accessible from the Shock server\n        \n        \n         #upload parts into a part node (part node has to be created with a POST call)\n        curl -X PUT -F \"1=@\u003cfile_part_1\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e\n        curl -X PUT -F \"2=@\u003cfile_part_2\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e\n        \n        curl -X PUT -F \"N=@\u003cfile_part_N\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e\n        \n        # finalize parts node\n        curl -X PUT -F \"parts=close\" http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e\n        \n        ```\n        # update attributes\n        curl -X PUT -F \"attributes=@\u003cpath_to_json\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e\n        \n        # add file\n        curl -X PUT ( -F \"upload=@\u003cpath_to_data_file\u003e\" || -F \"path=\u003cpath_to_file\u003e\") http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e\n        \n        # change filename\n        curl -X PUT -F \"file_name=\u003cnew_file_name\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e\n        \n        # add / update expiration\n        curl -X PUT -F \"expiration=\u003c\\d+[MHD]\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e\n        \n        # remove expiration\n        curl -X PUT -F \"remove_expiration=true\" http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e\n        ```\n      operationId: ''\n      responses:\n        default:\n          description: Default error sample response\n      tags:\n        - node\n    delete:\n      summary: delete node\n      description: ''\n      operationId: ''\n      responses:\n        default:\n          description: Default error sample response\n      tags:\n        - node\n\n  '/node/{nodeId}/acl':\n    parameters:\n      - in: path\n        name: nodeId\n        schema:\n          type: string\n        required: true\n    get:\n      summary: view node acls of type\n      description: |\n        view all acls\n        \n        `curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e/acl/`\n        \n        view specific acls\n        \n        `curl -X GET http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e/acl/[ all | read | write | delete | owner ]`\n      operationId: ''\n      \n      responses:\n        default:\n          description: Default error sample response\n      tags:\n        - node_acl\n    put:\n      summary: 'modify node acls of type '\n      description: |\n        changing owner (chown)\n        \n        `curl -X PUT http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e/acl/owner?users=\u003cuser-id_or_uuid\u003e`\n        \n        adding user to acls\n        \n        `curl -X PUT http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e/acl/[ all | read | write | delete ]?users=\u003cuser-ids_or_uuids\u003e`\n      operationId: ''\n      responses:\n        default:\n          description: Default error sample response\n      tags:\n        - node_acl\n    delete:\n      summary: 'delete acls of type '\n      description: |\n        deleting user to acls\n        \n        `curl -X DELETE http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e/acl/[ all | read | write | delete ]?users=\u003cuser-ids_or_uuids\u003e`\n      responses:\n        default:\n          description: Default error sample response\n      tags:\n        - node_acl\n      \n  '/node/{nodeId}/acl/{type}':\n    parameters:\n      - in: path\n        name: nodeId\n        schema:\n          type: string\n        required: true\n      - in: path\n        name: type\n        schema:\n          type: string\n        required: true\n    get:\n      summary: view node acls of type\n      description: ''\n      operationId: ''\n      responses:\n        default:\n          description: Default error sample response\n      tags:\n        - node_acl\n    put:\n      summary: 'modify node acls of type '\n      description: ''\n      operationId: ''\n      parameters:\n        - in: path\n          name: nodeId\n          schema:\n            type: string\n          required: true\n      responses:\n        default:\n          description: Default error sample response\n      tags:\n        - node_acl\n  '/node/{nodeId}/index/{type}':\n   \n      \n##### returns\n    parameters:\n      - in: path\n        name: nodeId\n        schema:\n          type: string\n        required: true\n      - in: path\n        name: type\n        description: upload node index\n        schema:\n          type: string\n        required: true    \n    put:\n      summary: create node indexes\n      description: |\n        **Create index:**\n        \n        - Currently available index types include: size (virtual, does not require index creation), line, column (for tabbed files), chunkrecord and record (for sequence file types), bai (bam index), and subset (based on an existing index)\n        \n        Examples\n        ```\n        curl -X PUT [ see Authentication ] http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e/index/\u003ctype\u003e\n        curl -X PUT [ see Authentication ] http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e/index/column?number=\u003cint\u003e\n        curl -X PUT [ see Authentication ] -F \"index_name=\u003cstring\u003e\" -F \"parent_index=\u003ctype\u003e\" -F \"subset_indices=@\u003cpath_to_file\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e/index/subset\n        curl -X PUT [ see Authentication ] http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e?index=\u003ctype\u003e (deprecated)\n        ```\n        If an index already exists, you should receive an error message telling you that.  To overwrite the existing index, add the parameter `?force_rebuild=1` to your PUT request.\n        \n        To upload an index, query field `?upload` and form field `upload=` both have to be used.\n        \n        ```\n        curl -X PUT [ see Authentication ] -F \"upload=@\u003cpath_to_index_file\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e/index/\u003ctype\u003e?upload\n        curl -X PUT [ see Authentication ] -F \"upload=@\u003cpath_to_index_file\u003e\" http://\u003chost\u003e[:\u003cport\u003e]/node/\u003cnode_id\u003e/index/\u003ctype\u003e?upload\u0026indexFormat=\u003cstring\u003e\u0026avgUnitSize=\u003cint64\u003e\u0026totalUnits=\u003cint64\u003e\n        ```\n      operationId: ''\n      responses:\n        default:\n          description: Default error sample response\n      \n      tags:\n        - node_index\n    delete:\n      summary: delete node index\n      description: ''\n      parameters:\n        - in: query\n          name: users\n          description: delete \n          schema:\n            type: string\n          required: false\n      operationId: ''\n      responses:\n        default:\n          description: Default error sample response\n      tags:\n        - node_index\nsecurity: []\n",
			"canonicalURL": "/github.com/MG-RAST/Shock@8871e8b25e05ab9c8c37818bb05861bec80e1aed/-/blob/docs/API/shock-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/MG-RAST/Shock/blob/8871e8b25e05ab9c8c37818bb05861bec80e1aed/docs/API/shock-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/node\": get: responses: 200: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema"
	]
}