{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/launchany/align-define-design-examples"
		},
		"file": {
			"name": "Shopping-API-REST.oas3.yaml",
			"size": 0,
			"path": "bookstore/3a-design-rest/Shopping-API-REST.oas3.yaml",
			"byteSize": 20703,
			"content": "openapi: 3.0.0\r\ninfo:\r\n  title: Bookstore Shopping API - REST Example\r\n  description: |\r\n    Supports the shopping experience of an online bookstore, including browsing and searching for available books and shopping cart management.\r\n    \r\n    The Order Creation API is used to convert the shopping cart into an order that is prepared to accept shipping details, payment, and fulfillment tracking.\r\n    \r\n    The API includes the following shopping operations by capability:\r\n      \r\n    | Capability          | Operation                               |\r\n    |---------------------|-----------------------------------------|\r\n    | List Recent Books   | List Recent Books In Store              |\r\n    | List Recent Books   | Search for a book by topic or keyword   |\r\n    | List Recent Books   | View Book Details                       |  \r\n    | Place an Order      | Create Cart                             |\r\n    | Place an Order      | Add Book to Cart                        |\r\n    | Place an Order      | Remove Book from the Cart               |\r\n    | Place an Order      | Modify Book in Cart                     |\r\n    | Place an Order      | View Cart with Totals                   |\r\n    \r\n  contact: {}\r\n  version: '1.0'\r\nservers:\r\n- url: https://{defaultHost}\r\n  variables:\r\n    defaultHost:\r\n      default: www.example.com/shop\r\npaths:\r\n  /books:\r\n    get:\r\n      tags:\r\n      - Books\r\n      summary: Returns a paginated list of available books\r\n      description: \"Returns a paginated list of available books based on the search criteria provided. If no search criteria is provided, books are returned in alphabetical order. \\n\"\r\n      operationId: ListBooks\r\n      parameters:\r\n      - name: q\r\n        in: query\r\n        description: A query string to use for filtering books by title and description. If not provided, all available books will be listed. Note that the query argument 'q' is a common standard for general search queries\r\n        style: form\r\n        explode: true\r\n        schema:\r\n          type: string\r\n      - name: daysSinceBookReleased\r\n        in: query\r\n        description: A query string to use for filtering books released within the last number of days, e.g. 7 means in the last 7 days. The default value of null indicates no time filtering is applied. Maximum number of days to filter is 30 days since today\r\n        style: form\r\n        explode: true\r\n        schema:\r\n          type: integer\r\n          format: int32\r\n      - name: offset\r\n        in: query\r\n        description: A offset from which the list of books are retrieved, where an offset of 0 means the first page of results. Default is an offset of 0\r\n        style: form\r\n        explode: true\r\n        schema:\r\n          minimum: 0\r\n          type: integer\r\n          format: int32\r\n          default: 0\r\n      - name: limit\r\n        in: query\r\n        description: Number of records to be included in API call, defaulting to 25 records at a time if not provided\r\n        style: form\r\n        explode: true\r\n        schema:\r\n          maximum: 100\r\n          minimum: 1\r\n          type: integer\r\n          format: int32\r\n          default: 25\r\n      - name: Authorization\r\n        in: header\r\n        description: An OAuth 2.0 access token that authorizes your app to call this endpoint. For more information on how to obtain an access token, go to the \"Getting Access\" section.\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      - name: Client-Id\r\n        in: header\r\n        description: Client id consuming the api\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      - name: Content-Type\r\n        in: header\r\n        description: Content the client sends in request e.g. application/json.\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      - name: Client-Correlation-Id\r\n        in: header\r\n        description: It is an optional field that clients can provide to track traffic across different APIs. Clients who utilize this are responsible for generating the value, guaranteeing uniqueness, and providing it as a Header in every request.\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      responses:\r\n        200:\r\n          description: Success\r\n          headers: {}\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ListBooksResponse'\r\n        401:\r\n          description: Request failed, This is the response received when a request is made with invalid API credentials\r\n        403:\r\n          description: Request failed, This is the response received when a request is made with valid API credentials towards an API endpoint or resource you do not have access to.\r\n      deprecated: false\r\n  /books/{bookId}:\r\n    get:\r\n      tags:\r\n      - Books\r\n      summary: Retrieves the full details about a book\r\n      description: \"Retrieves the full details about a book by the provided bookId. Details provided include: title, ISBN, plain text description, and the list of authors \\n\"\r\n      operationId: ViewBookDetails\r\n      parameters:\r\n      - name: bookId\r\n        in: path\r\n        description: The book identifier to be retrieved\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      responses:\r\n        200:\r\n          description: Success\r\n          headers: {}\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/BookDetails'\r\n        401:\r\n          description: Request failed, This is the response received when a request is made with invalid API credentials\r\n        403:\r\n          description: Request failed, This is the response received when a request is made with valid API credentials towards an API endpoint or resource you do not have access to.\r\n        404:\r\n          description: Request failed, This is the response received when a request is made and there no data is found for the bookId path parameter.\r\n      deprecated: false\r\n  /carts/{cartId}:\r\n    get:\r\n      tags:\r\n      - Carts\r\n      summary: Retrieves the full details about a cart\r\n      description: |\r\n        Retrieves the full details about a cart by the provided identifier. Details provided include: the status of the cart, the list of books + quantities, and the total cost\r\n      operationId: ViewCartDetails\r\n      parameters:\r\n      - name: cartId\r\n        in: path\r\n        description: The cart identifier to be retrieved\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      responses:\r\n        200:\r\n          description: Success\r\n          headers: {}\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/CartDetails'\r\n        401:\r\n          description: Request failed, This is the response received when a request is made with invalid API credentials\r\n        403:\r\n          description: Request failed, This is the response received when a request is made with valid API credentials towards an API endpoint or resource you do not have access to.\r\n        404:\r\n          description: Request failed, This is the response received when a request is made and there no data is found for the path parameter.\r\n      deprecated: false\r\n  /carts:\r\n    post:\r\n      tags:\r\n      - Carts\r\n      summary: Creates a new cart with a single item to begin the shopping process\r\n      description: \"Creates a new cart with a single item to begin the shopping process. The workflow allows the customer to add a quantity of books to the cart as cart items. These items may be manipulated directly prior to creating an order, similar to any online shopping cart experience. Once ready, use the CreateOrder operation to convert the cart into an order and apply payment.\\n      \\n\"\r\n      operationId: CreateNewCart\r\n      parameters: []\r\n      requestBody:\r\n        description: ''\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/NewCart'\r\n        required: true\r\n      responses:\r\n        201:\r\n          description: Created\r\n          headers:\r\n            Location:\r\n              description: Specifies the URL of the newly created resource\r\n              content:\r\n                text/plain:\r\n                  schema:\r\n                    type: string\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/CartDetails'\r\n        400:\r\n          description: Request failed, refer to Common HTTP 400 Response Body for details\r\n        401:\r\n          description: Request failed, This is the response received when a request is made with invalid API credentials\r\n        403:\r\n          description: Request failed, This is the response received when a request is made with valid API credentials towards an API endpoint or resource you do not have access to.\r\n        500:\r\n          description: General server error, This is the response received when a request is made towards API but the API could not fulfill the request due to factors on the API side.\r\n      deprecated: false\r\n  /carts/{cartId}/items:\r\n    post:\r\n      tags:\r\n      - CartItems\r\n      summary: Adds a new Book to an existing Cart as a CartItem\r\n      description: \u003e\r\n        Adds a new Book to an existing Cart as a CartItem, which includes the quantity of books desired. Recalculates the cart total, and returns the updated cart details\r\n      operationId: AddBookToCart\r\n      parameters:\r\n      - name: cartId\r\n        in: path\r\n        description: The cart identifier to be retrieved\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      requestBody:\r\n        description: ''\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/NewCartItem'\r\n        required: false\r\n      responses:\r\n        201:\r\n          description: Created\r\n          headers:\r\n            Location:\r\n              description: Specifies the URL of the newly created resource\r\n              content:\r\n                text/plain:\r\n                  schema:\r\n                    type: string\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/CartDetails'\r\n        401:\r\n          description: Request failed, This is the response received when a request is made with invalid API credentials\r\n        403:\r\n          description: Request failed, This is the response received when a request is made with valid API credentials towards an API endpoint or resource you do not have access to.\r\n        404:\r\n          description: Request failed, This is the response received when a request is made and there no data is found for the path parameter.\r\n        409:\r\n          description: Request failed due to the cart being marked as archived once it has been converted to an order and no longer editable\r\n      deprecated: false\r\n  /carts/{cartId}/items/{cartItemId}:\r\n    patch:\r\n      tags:\r\n      - CartItems\r\n      summary: Modifies the quantity of a CartItem in an existing Cart\r\n      description: \u003e\r\n        Modifies the quantity of a CartItem in an existing Cart, recalculates the cart total, and returns the updated cart details.\r\n      operationId: ModifyBookInCart\r\n      parameters:\r\n      - name: cartId\r\n        in: path\r\n        description: The Cart identifier to be retrieved\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      - name: cartItemId\r\n        in: path\r\n        description: The CartItem identifier to be retrieved\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      requestBody:\r\n        description: ''\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/ModifyCartItem'\r\n        required: false\r\n      responses:\r\n        200:\r\n          description: Modified the cart item successfully. The updated cart is returned, including an updated cart total\r\n          headers: {}\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/CartDetails'\r\n        401:\r\n          description: Request failed, This is the response received when a request is made with invalid API credentials\r\n        403:\r\n          description: Request failed, This is the response received when a request is made with valid API credentials towards an API endpoint or resource you do not have access to.\r\n        404:\r\n          description: Request failed, This is the response received when a request is made and there no data is found for the path parameter.\r\n        409:\r\n          description: Request failed due to the cart being marked as archived once it has been converted to an order and no longer editable\r\n      deprecated: false\r\n    delete:\r\n      tags:\r\n      - CartItems\r\n      summary: Removes a CartItem from an existing Cart\r\n      description: \"Removes a CartItem from an existing Cart, recalculates the cart total, and returns the updated cart details. Please note that since the cart has been recalculated and returned, the response code for a successful deletion of the cart item is a 200 rather than the default of a 204 when there is no response payload. \\n\"\r\n      operationId: RemoveBookFromCart\r\n      parameters:\r\n      - name: cartId\r\n        in: path\r\n        description: The Cart identifier to be retrieved\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      - name: cartItemId\r\n        in: path\r\n        description: The CartItem identifier to be retrieved\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      responses:\r\n        200:\r\n          description: Deleted the cart item successfully\r\n          headers: {}\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/CartDetails'\r\n        401:\r\n          description: Request failed, This is the response received when a request is made with invalid API credentials\r\n        403:\r\n          description: Request failed, This is the response received when a request is made with valid API credentials towards an API endpoint or resource you do not have access to.\r\n        404:\r\n          description: Request failed, This is the response received when a request is made and there no data is found for the path parameter.\r\n        409:\r\n          description: Request failed due to the cart being marked as archived once it has been converted to an order and no longer editable\r\n      deprecated: false\r\ncomponents:\r\n  schemas:\r\n    ListBooksResponse:\r\n      title: ListBooksResponse\r\n      type: object\r\n      properties:\r\n        books:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/BookSummary'\r\n          description: ''\r\n      description: \"A list of book summaries as a result of a list or filter request. The following hypermedia links are offered:\\n  \\n  - next: (optional) indicates the next page of results is available\\n  - previous: (optional) indicates a previous page of results is available\\n  - self: a link to the current page of results\\n  - first: a link to the first page of results\\n  - last: a link to the last page of results\"\r\n    BookSummary:\r\n      title: BookSummary\r\n      type: object\r\n      properties:\r\n        bookId:\r\n          type: string\r\n          description: An internal identifier, separate from the ISBN, that identifies the book within the inventory\r\n        isbn:\r\n          type: string\r\n          description: The ISBN of the book\r\n        title:\r\n          type: string\r\n          description: The book title, e.g. A Practical Approach to API Design\r\n        authors:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/BookAuthor'\r\n          description: ''\r\n      description: \"Summarizes a book that is stocked by the book store. The following hypermedia links are offered:\\n  \\n  - bookDetails: link to fetch the book details\"\r\n    BookDetails:\r\n      title: BookDetails\r\n      type: object\r\n      properties:\r\n        bookId:\r\n          type: string\r\n          description: An internal identifier, separate from the ISBN, that identifies the book within the inventory\r\n        isbn:\r\n          type: string\r\n          description: The ISBN of the book\r\n        title:\r\n          type: string\r\n          description: The book title, e.g. A Practical Approach to API Design\r\n        description:\r\n          type: string\r\n          description: A description of the book in plain text format\r\n        authors:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/BookAuthor'\r\n          description: ''\r\n      description: \"Details about a book that is stocked by the book store. The following hypermedia links are offered:\\n  \\n  - self: link to fetch the book details\"\r\n    BookAuthor:\r\n      title: BookAuthor\r\n      type: object\r\n      properties:\r\n        authorId:\r\n          type: string\r\n          description: An internal identifier that references the author\r\n        fullName:\r\n          type: string\r\n          description: The full name of the author, e.g. D. Keith Casey\r\n      description: \"Represents a single author for a book. Since a book may have more than one author, books will contain an array of BookAuthors. The following hypermedia links are offered:\\n  \\n  - self: link to fetch the author details\"\r\n    CartItem:\r\n      title: CartItem\r\n      type: object\r\n      properties:\r\n        cartItemId:\r\n          type: string\r\n          description: An internal identifier for the cart item inside the cart\r\n        bookId:\r\n          type: string\r\n          description: The book that is being referenced within the order\r\n        title:\r\n          type: string\r\n          description: The book title, e.g. A Practical Approach to API Design\r\n        quantity:\r\n          minimum: 1\r\n          type: integer\r\n          description: The number of copies of the book requested\r\n          format: int32\r\n      description: \"Captures a book with the quantity desired in a cart. The following hypermedia links are offered:\\n  \\n  - self: link to fetch the cart item details\\n  - bookDetails: link to fetch the book details\"\r\n    NewCart:\r\n      title: NewCart\r\n      required:\r\n      - bookId\r\n      - quantity\r\n      type: object\r\n      properties:\r\n        bookId:\r\n          type: string\r\n          description: The book that is being added to the cart\r\n        quantity:\r\n          minimum: 1\r\n          type: integer\r\n          description: The number of copies of the book to be added to the cart\r\n          format: int32\r\n      description: Creates a new cart with the initial cart item added\r\n    NewCartItem:\r\n      title: NewCartItem\r\n      required:\r\n      - bookId\r\n      - quantity\r\n      type: object\r\n      properties:\r\n        bookId:\r\n          type: string\r\n          description: The book that is being added to the cart\r\n        quantity:\r\n          minimum: 1\r\n          type: integer\r\n          description: The number of copies of the book to be added to the cart\r\n          format: int32\r\n      description: Specifies a book and quantity to add to a cart\r\n    ModifyCartItem:\r\n      title: ModifyCartItem\r\n      required:\r\n      - quantity\r\n      type: object\r\n      properties:\r\n        quantity:\r\n          minimum: 1\r\n          type: integer\r\n          description: The number of copies of the book to adjust the cart item to\r\n          format: int32\r\n      description: Modifies an existing cart item's quantity\r\n    CartDetails:\r\n      title: CartDetails\r\n      type: object\r\n      properties:\r\n        cartId:\r\n          type: string\r\n          description: An internal identifier for the cart\r\n        items:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/CartItem'\r\n          description: ''\r\n        totalCostInCents:\r\n          minimum: 0\r\n          type: integer\r\n          description: The total cost of the cart\r\n          format: int32\r\n        cartStatus:\r\n          $ref: '#/components/schemas/CartStatus'\r\n      description: Contains the full list of books and quantities contained within the cart, along with the total cost of the cart\r\n    CartStatus:\r\n      title: CartStatus\r\n      enum:\r\n      - Active\r\n      - Converted\r\n      - Abandoned\r\n      type: string\r\n      description: The current status of the cart\r\n",
			"canonicalURL": "/github.com/launchany/align-define-design-examples@d5b7532ddd17704c7eb24c5f355d8d05f7896bb7/-/blob/bookstore/3a-design-rest/Shopping-API-REST.oas3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/launchany/align-define-design-examples/blob/d5b7532ddd17704c7eb24c5f355d8d05f7896bb7/bookstore/3a-design-rest/Shopping-API-REST.oas3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: \"Location\": \"text/plain\": parameter content encoding not implemented",
	"NotImplemented": [
		"parameter content encoding"
	]
}