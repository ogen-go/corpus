{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stackql/stackql-provider-registry"
		},
		"file": {
			"name": "blogger-v3.yaml",
			"size": 0,
			"path": "providers/src/googleapis.com/v0.1.2/services/blogger-v3.yaml",
			"byteSize": 78383,
			"content": "components:\n  parameters:\n    _.xgafv:\n      description: V1 error format.\n      in: query\n      name: $.xgafv\n      schema:\n        enum:\n        - '1'\n        - '2'\n        type: string\n    access_token:\n      description: OAuth access token.\n      in: query\n      name: access_token\n      schema:\n        type: string\n    alt:\n      description: Data format for response.\n      in: query\n      name: alt\n      schema:\n        enum:\n        - json\n        - media\n        - proto\n        type: string\n    callback:\n      description: JSONP\n      in: query\n      name: callback\n      schema:\n        type: string\n    fields:\n      description: Selector specifying which fields to include in a partial response.\n      in: query\n      name: fields\n      schema:\n        type: string\n    key:\n      description: API key. Your API key identifies your project and provides you\n        with API access, quota, and reports. Required unless you provide an OAuth\n        2.0 token.\n      in: query\n      name: key\n      schema:\n        type: string\n    oauth_token:\n      description: OAuth 2.0 token for the current user.\n      in: query\n      name: oauth_token\n      schema:\n        type: string\n    prettyPrint:\n      description: Returns response with indentations and line breaks.\n      in: query\n      name: prettyPrint\n      schema:\n        type: boolean\n    quotaUser:\n      description: Available to use for quota purposes for server-side applications.\n        Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n      in: query\n      name: quotaUser\n      schema:\n        type: string\n    uploadType:\n      description: Legacy upload protocol for media (e.g. \"media\", \"multipart\").\n      in: query\n      name: uploadType\n      schema:\n        type: string\n    upload_protocol:\n      description: Upload protocol for media (e.g. \"raw\", \"multipart\").\n      in: query\n      name: upload_protocol\n      schema:\n        type: string\n  schemas:\n    Blog:\n      properties:\n        customMetaData:\n          description: The JSON custom meta-data for the Blog.\n          type: string\n        description:\n          description: The description of this blog. This is displayed underneath\n            the title.\n          type: string\n        id:\n          description: The identifier for this resource.\n          type: string\n        kind:\n          description: The kind of this entry. Always blogger#blog.\n          type: string\n        locale:\n          description: The locale this Blog is set to.\n          properties:\n            country:\n              description: The country this blog's locale is set to.\n              type: string\n            language:\n              description: The language this blog is authored in.\n              type: string\n            variant:\n              description: The language variant this blog is authored in.\n              type: string\n          type: object\n        name:\n          description: The name of this blog. This is displayed as the title.\n          type: string\n        pages:\n          description: The container of pages in this blog.\n          properties:\n            selfLink:\n              description: The URL of the container for pages in this blog.\n              type: string\n            totalItems:\n              description: The count of pages in this blog.\n              format: int32\n              type: integer\n          type: object\n        posts:\n          description: The container of posts in this blog.\n          properties:\n            items:\n              description: The List of Posts for this Blog.\n              items:\n                $ref: '#/components/schemas/Post'\n              type: array\n            selfLink:\n              description: The URL of the container for posts in this blog.\n              type: string\n            totalItems:\n              description: The count of posts in this blog.\n              format: int32\n              type: integer\n          type: object\n        published:\n          description: RFC 3339 date-time when this blog was published.\n          type: string\n        selfLink:\n          description: The API REST URL to fetch this resource from.\n          type: string\n        status:\n          description: The status of the blog.\n          enum:\n          - LIVE\n          - DELETED\n          type: string\n        updated:\n          description: RFC 3339 date-time when this blog was last updated.\n          type: string\n        url:\n          description: The URL where this blog is published.\n          type: string\n      type: object\n    BlogList:\n      properties:\n        blogUserInfos:\n          description: Admin level list of blog per-user information.\n          items:\n            $ref: '#/components/schemas/BlogUserInfo'\n          type: array\n        items:\n          description: The list of Blogs this user has Authorship or Admin rights\n            over.\n          items:\n            $ref: '#/components/schemas/Blog'\n          type: array\n        kind:\n          description: The kind of this entity. Always blogger#blogList.\n          type: string\n      type: object\n    BlogPerUserInfo:\n      properties:\n        blogId:\n          description: ID of the Blog resource.\n          type: string\n        hasAdminAccess:\n          description: True if the user has Admin level access to the blog.\n          type: boolean\n        kind:\n          description: The kind of this entity. Always blogger#blogPerUserInfo.\n          type: string\n        photosAlbumKey:\n          description: The Photo Album Key for the user when adding photos to the\n            blog.\n          type: string\n        role:\n          description: Access permissions that the user has for the blog (ADMIN, AUTHOR,\n            or READER).\n          enum:\n          - VIEW_TYPE_UNSPECIFIED\n          - READER\n          - AUTHOR\n          - ADMIN\n          type: string\n        userId:\n          description: ID of the User.\n          type: string\n      type: object\n    BlogUserInfo:\n      properties:\n        blog:\n          $ref: '#/components/schemas/Blog'\n          description: The Blog resource.\n        blog_user_info:\n          $ref: '#/components/schemas/BlogPerUserInfo'\n          description: Information about a User for the Blog.\n        kind:\n          description: The kind of this entity. Always blogger#blogUserInfo.\n          type: string\n      type: object\n    Comment:\n      properties:\n        author:\n          description: The author of this Comment.\n          properties:\n            displayName:\n              description: The display name.\n              type: string\n            id:\n              description: The identifier of the creator.\n              type: string\n            image:\n              description: The creator's avatar.\n              properties:\n                url:\n                  description: The creator's avatar URL.\n                  type: string\n              type: object\n            url:\n              description: The URL of the creator's Profile page.\n              type: string\n          type: object\n        blog:\n          description: Data about the blog containing this comment.\n          properties:\n            id:\n              description: The identifier of the blog containing this comment.\n              type: string\n          type: object\n        content:\n          description: The actual content of the comment. May include HTML markup.\n          type: string\n        id:\n          description: The identifier for this resource.\n          type: string\n        inReplyTo:\n          description: Data about the comment this is in reply to.\n          properties:\n            id:\n              description: The identified of the parent of this comment.\n              type: string\n          type: object\n        kind:\n          description: The kind of this entry. Always blogger#comment.\n          type: string\n        post:\n          description: Data about the post containing this comment.\n          properties:\n            id:\n              description: The identifier of the post containing this comment.\n              type: string\n          type: object\n        published:\n          description: RFC 3339 date-time when this comment was published.\n          type: string\n        selfLink:\n          description: The API REST URL to fetch this resource from.\n          type: string\n        status:\n          description: The status of the comment (only populated for admin users).\n          enum:\n          - LIVE\n          - EMPTIED\n          - PENDING\n          - SPAM\n          type: string\n        updated:\n          description: RFC 3339 date-time when this comment was last updated.\n          type: string\n      type: object\n    CommentList:\n      properties:\n        etag:\n          description: Etag of the response.\n          type: string\n        items:\n          description: The List of Comments for a Post.\n          items:\n            $ref: '#/components/schemas/Comment'\n          type: array\n        kind:\n          description: The kind of this entry. Always blogger#commentList.\n          type: string\n        nextPageToken:\n          description: Pagination token to fetch the next page, if one exists.\n          type: string\n        prevPageToken:\n          description: Pagination token to fetch the previous page, if one exists.\n          type: string\n      type: object\n    Page:\n      properties:\n        author:\n          description: The author of this Page.\n          properties:\n            displayName:\n              description: The display name.\n              type: string\n            id:\n              description: The identifier of the creator.\n              type: string\n            image:\n              description: The creator's avatar.\n              properties:\n                url:\n                  description: The creator's avatar URL.\n                  type: string\n              type: object\n            url:\n              description: The URL of the creator's Profile page.\n              type: string\n          type: object\n        blog:\n          description: Data about the blog containing this Page.\n          properties:\n            id:\n              description: The identifier of the blog containing this page.\n              type: string\n          type: object\n        content:\n          description: The body content of this Page, in HTML.\n          type: string\n        etag:\n          description: Etag of the resource.\n          type: string\n        id:\n          description: The identifier for this resource.\n          type: string\n        kind:\n          description: The kind of this entity. Always blogger#page.\n          type: string\n        published:\n          description: RFC 3339 date-time when this Page was published.\n          type: string\n        selfLink:\n          description: The API REST URL to fetch this resource from.\n          type: string\n        status:\n          description: The status of the page for admin resources (either LIVE or\n            DRAFT).\n          enum:\n          - LIVE\n          - DRAFT\n          type: string\n        title:\n          description: The title of this entity. This is the name displayed in the\n            Admin user interface.\n          type: string\n        updated:\n          description: RFC 3339 date-time when this Page was last updated.\n          type: string\n        url:\n          description: The URL that this Page is displayed at.\n          type: string\n      type: object\n    PageList:\n      properties:\n        etag:\n          description: Etag of the response.\n          type: string\n        items:\n          description: The list of Pages for a Blog.\n          items:\n            $ref: '#/components/schemas/Page'\n          type: array\n        kind:\n          description: The kind of this entity. Always blogger#pageList.\n          type: string\n        nextPageToken:\n          description: Pagination token to fetch the next page, if one exists.\n          type: string\n      type: object\n    Pageviews:\n      properties:\n        blogId:\n          description: Blog Id.\n          type: string\n        counts:\n          description: The container of posts in this blog.\n          items:\n            properties:\n              count:\n                description: Count of page views for the given time range.\n                format: int64\n                type: string\n              timeRange:\n                description: Time range the given count applies to.\n                enum:\n                - ALL_TIME\n                - THIRTY_DAYS\n                - SEVEN_DAYS\n                type: string\n            type: object\n          type: array\n        kind:\n          description: The kind of this entry. Always blogger#page_views.\n          type: string\n      type: object\n    Post:\n      properties:\n        author:\n          description: The author of this Post.\n          properties:\n            displayName:\n              description: The display name.\n              type: string\n            id:\n              description: The identifier of the creator.\n              type: string\n            image:\n              description: The creator's avatar.\n              properties:\n                url:\n                  description: The creator's avatar URL.\n                  type: string\n              type: object\n            url:\n              description: The URL of the creator's Profile page.\n              type: string\n          type: object\n        blog:\n          description: Data about the blog containing this Post.\n          properties:\n            id:\n              description: The identifier of the Blog that contains this Post.\n              type: string\n          type: object\n        content:\n          description: The content of the Post. May contain HTML markup.\n          type: string\n        customMetaData:\n          description: The JSON meta-data for the Post.\n          type: string\n        etag:\n          description: Etag of the resource.\n          type: string\n        id:\n          description: The identifier of this Post.\n          type: string\n        images:\n          description: Display image for the Post.\n          items:\n            properties:\n              url:\n                type: string\n            type: object\n          type: array\n        kind:\n          description: The kind of this entity. Always blogger#post.\n          type: string\n        labels:\n          description: The list of labels this Post was tagged with.\n          items:\n            type: string\n          type: array\n        location:\n          description: The location for geotagged posts.\n          properties:\n            lat:\n              description: Location's latitude.\n              format: double\n              type: number\n            lng:\n              description: Location's longitude.\n              format: double\n              type: number\n            name:\n              description: Location name.\n              type: string\n            span:\n              description: Location's viewport span. Can be used when rendering a\n                map preview.\n              type: string\n          type: object\n        published:\n          description: RFC 3339 date-time when this Post was published.\n          type: string\n        readerComments:\n          description: Comment control and display setting for readers of this post.\n          enum:\n          - ALLOW\n          - DONT_ALLOW_SHOW_EXISTING\n          - DONT_ALLOW_HIDE_EXISTING\n          type: string\n        replies:\n          description: The container of comments on this Post.\n          properties:\n            items:\n              description: The List of Comments for this Post.\n              items:\n                $ref: '#/components/schemas/Comment'\n              type: array\n            selfLink:\n              description: The URL of the comments on this post.\n              type: string\n            totalItems:\n              description: The count of comments on this post.\n              format: int64\n              type: string\n          type: object\n        selfLink:\n          description: The API REST URL to fetch this resource from.\n          type: string\n        status:\n          description: Status of the post. Only set for admin-level requests.\n          enum:\n          - LIVE\n          - DRAFT\n          - SCHEDULED\n          type: string\n        title:\n          description: The title of the Post.\n          type: string\n        titleLink:\n          description: The title link URL, similar to atom's related link.\n          type: string\n        updated:\n          description: RFC 3339 date-time when this Post was last updated.\n          type: string\n        url:\n          description: The URL where this Post is displayed.\n          type: string\n      type: object\n    PostList:\n      properties:\n        etag:\n          description: Etag of the response.\n          type: string\n        items:\n          description: The list of Posts for this Blog.\n          items:\n            $ref: '#/components/schemas/Post'\n          type: array\n        kind:\n          description: The kind of this entity. Always blogger#postList.\n          type: string\n        nextPageToken:\n          description: Pagination token to fetch the next page, if one exists.\n          type: string\n        prevPageToken:\n          description: Pagination token to fetch the previous page, if one exists.\n          type: string\n      type: object\n    PostPerUserInfo:\n      properties:\n        blogId:\n          description: ID of the Blog that the post resource belongs to.\n          type: string\n        hasEditAccess:\n          description: True if the user has Author level access to the post.\n          type: boolean\n        kind:\n          description: The kind of this entity. Always blogger#postPerUserInfo.\n          type: string\n        postId:\n          description: ID of the Post resource.\n          type: string\n        userId:\n          description: ID of the User.\n          type: string\n      type: object\n    PostUserInfo:\n      properties:\n        kind:\n          description: The kind of this entity. Always blogger#postUserInfo.\n          type: string\n        post:\n          $ref: '#/components/schemas/Post'\n          description: The Post resource.\n        post_user_info:\n          $ref: '#/components/schemas/PostPerUserInfo'\n          description: Information about a User for the Post.\n      type: object\n    PostUserInfosList:\n      properties:\n        items:\n          description: The list of Posts with User information for the post, for this\n            Blog.\n          items:\n            $ref: '#/components/schemas/PostUserInfo'\n          type: array\n        kind:\n          description: The kind of this entity. Always blogger#postList.\n          type: string\n        nextPageToken:\n          description: Pagination token to fetch the next page, if one exists.\n          type: string\n      type: object\n    User:\n      properties:\n        about:\n          description: Profile summary information.\n          type: string\n        blogs:\n          description: The container of blogs for this user.\n          properties:\n            selfLink:\n              description: The URL of the Blogs for this user.\n              type: string\n          type: object\n        created:\n          description: The timestamp of when this profile was created, in seconds\n            since epoch.\n          type: string\n        displayName:\n          description: The display name.\n          type: string\n        id:\n          description: The identifier for this User.\n          type: string\n        kind:\n          description: The kind of this entity. Always blogger#user.\n          type: string\n        locale:\n          description: This user's locale\n          properties:\n            country:\n              description: The country this blog's locale is set to.\n              type: string\n            language:\n              description: The language this blog is authored in.\n              type: string\n            variant:\n              description: The language variant this blog is authored in.\n              type: string\n          type: object\n        selfLink:\n          description: The API REST URL to fetch this resource from.\n          type: string\n        url:\n          description: The user's profile page.\n          type: string\n      type: object\n  securitySchemes:\n    Oauth2:\n      description: Oauth 2.0 implicit authentication\n      flows:\n        implicit:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            https://www.googleapis.com/auth/blogger: Manage your Blogger account\n            https://www.googleapis.com/auth/blogger.readonly: View your Blogger account\n      type: oauth2\n    Oauth2c:\n      description: Oauth 2.0 authorizationCode authentication\n      flows:\n        authorizationCode:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            https://www.googleapis.com/auth/blogger: Manage your Blogger account\n            https://www.googleapis.com/auth/blogger.readonly: View your Blogger account\n          tokenUrl: https://accounts.google.com/o/oauth2/token\n      type: oauth2\n  x-stackQL-resources:\n    blogUserInfos:\n      id: google.blogger.blogUserInfos\n      methods:\n        get:\n          operation:\n            $ref: '#/paths/~1v3~1users~1{userId}~1blogs~1{blogId}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: blogUserInfos\n      title: blogUserInfos\n    blogs:\n      id: google.blogger.blogs\n      methods:\n        get:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        getByUrl:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1byurl/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        listByUser:\n          operation:\n            $ref: '#/paths/~1v3~1users~1{userId}~1blogs/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: blogs\n      title: blogs\n    comments:\n      id: google.blogger.comments\n      methods:\n        approve:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1comments~1{commentId}~1approve/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        delete:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1comments~1{commentId}/delete'\n          response:\n            openAPIDocKey: '200'\n        get:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1comments~1{commentId}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        list:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1comments/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        listByBlog:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1comments/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        markAsSpam:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1comments~1{commentId}~1spam/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        removeContent:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1comments~1{commentId}~1removecontent/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: comments\n      title: comments\n    pageViews:\n      id: google.blogger.pageViews\n      methods:\n        get:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pageviews/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: pageViews\n      title: pageViews\n    pages:\n      id: google.blogger.pages\n      methods:\n        delete:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages~1{pageId}/delete'\n          response:\n            openAPIDocKey: '200'\n        get:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages~1{pageId}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        insert:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages/post'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        list:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        patch:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages~1{pageId}/patch'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        publish:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages~1{pageId}~1publish/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        revert:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages~1{pageId}~1revert/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        update:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1pages~1{pageId}/put'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: pages\n      title: pages\n    postUserInfos:\n      id: google.blogger.postUserInfos\n      methods:\n        get:\n          operation:\n            $ref: '#/paths/~1v3~1users~1{userId}~1blogs~1{blogId}~1posts~1{postId}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        list:\n          operation:\n            $ref: '#/paths/~1v3~1users~1{userId}~1blogs~1{blogId}~1posts/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: postUserInfos\n      title: postUserInfos\n    posts:\n      id: google.blogger.posts\n      methods:\n        delete:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}/delete'\n          response:\n            openAPIDocKey: '200'\n        get:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        getByPath:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1bypath/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        insert:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts/post'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        list:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        patch:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}/patch'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        publish:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1publish/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        revert:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}~1revert/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        search:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1search/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        update:\n          operation:\n            $ref: '#/paths/~1v3~1blogs~1{blogId}~1posts~1{postId}/put'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: posts\n      title: posts\n    users:\n      id: google.blogger.users\n      methods:\n        get:\n          operation:\n            $ref: '#/paths/~1v3~1users~1{userId}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: users\n      title: users\nexternalDocs:\n  url: https://developers.google.com/blogger/docs/3.0/getting_started\ninfo:\n  contact:\n    name: Google\n    url: https://google.com\n    x-twitter: youtube\n  description: The Blogger API provides access to posts, comments and pages of a Blogger\n    blog.\n  license:\n    name: Creative Commons Attribution 3.0\n    url: http://creativecommons.org/licenses/by/3.0/\n  termsOfService: https://developers.google.com/terms/\n  title: Blogger API v3\n  version: v3\n  x-apisguru-categories:\n  - analytics\n  - media\n  x-logo:\n    url: https://api.apis.guru/v2/cache/logo/https_upload.wikimedia.org_wikipedia_commons_e_e1_YouTube_play_buttom_icon_%282013-2017%29.svg\n  x-origin:\n  - format: google\n    url: https://blogger.googleapis.com/$discovery/rest?version=v3\n    version: v1\n  x-providerName: googleapis.com\n  x-serviceName: blogger\nopenapi: 3.0.0\npaths:\n  /v3/blogs/byurl:\n    get:\n      description: Gets a blog by url.\n      operationId: blogger.blogs.getByUrl\n      parameters:\n      - in: query\n        name: url\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: view\n        schema:\n          enum:\n          - VIEW_TYPE_UNSPECIFIED\n          - READER\n          - AUTHOR\n          - ADMIN\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Blog'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - blogs\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n  /v3/blogs/{blogId}:\n    get:\n      description: Gets a blog by id.\n      operationId: blogger.blogs.get\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: maxPosts\n        schema:\n          type: integer\n      - in: query\n        name: view\n        schema:\n          enum:\n          - VIEW_TYPE_UNSPECIFIED\n          - READER\n          - AUTHOR\n          - ADMIN\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Blog'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - blogs\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n  /v3/blogs/{blogId}/comments:\n    get:\n      description: Lists comments by blog.\n      operationId: blogger.comments.listByBlog\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: endDate\n        schema:\n          type: string\n      - in: query\n        name: fetchBodies\n        schema:\n          type: boolean\n      - in: query\n        name: maxResults\n        schema:\n          type: integer\n      - in: query\n        name: pageToken\n        schema:\n          type: string\n      - in: query\n        name: startDate\n        schema:\n          type: string\n      - explode: true\n        in: query\n        name: status\n        schema:\n          items:\n            enum:\n            - LIVE\n            - EMPTIED\n            - PENDING\n            - SPAM\n            type: string\n          type: array\n        style: form\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CommentList'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - comments\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n  /v3/blogs/{blogId}/pages:\n    get:\n      description: Lists pages.\n      operationId: blogger.pages.list\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: fetchBodies\n        schema:\n          type: boolean\n      - in: query\n        name: maxResults\n        schema:\n          type: integer\n      - in: query\n        name: pageToken\n        schema:\n          type: string\n      - explode: true\n        in: query\n        name: status\n        schema:\n          items:\n            enum:\n            - LIVE\n            - DRAFT\n            type: string\n          type: array\n        style: form\n      - in: query\n        name: view\n        schema:\n          enum:\n          - VIEW_TYPE_UNSPECIFIED\n          - READER\n          - AUTHOR\n          - ADMIN\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PageList'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - pages\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: Inserts a page.\n      operationId: blogger.pages.insert\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: isDraft\n        schema:\n          type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Page'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - pages\n  /v3/blogs/{blogId}/pages/{pageId}:\n    delete:\n      description: Deletes a page by blog id and page id.\n      operationId: blogger.pages.delete\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: pageId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - pages\n    get:\n      description: Gets a page by blog id and page id.\n      operationId: blogger.pages.get\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: pageId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: view\n        schema:\n          enum:\n          - VIEW_TYPE_UNSPECIFIED\n          - READER\n          - AUTHOR\n          - ADMIN\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - pages\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    patch:\n      description: Patches a page.\n      operationId: blogger.pages.patch\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: pageId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: publish\n        schema:\n          type: boolean\n      - in: query\n        name: revert\n        schema:\n          type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Page'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - pages\n    put:\n      description: Updates a page by blog id and page id.\n      operationId: blogger.pages.update\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: pageId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: publish\n        schema:\n          type: boolean\n      - in: query\n        name: revert\n        schema:\n          type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Page'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - pages\n  /v3/blogs/{blogId}/pages/{pageId}/publish:\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: Publishes a page.\n      operationId: blogger.pages.publish\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: pageId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - pages\n  /v3/blogs/{blogId}/pages/{pageId}/revert:\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: Reverts a published or scheduled page to draft state.\n      operationId: blogger.pages.revert\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: pageId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - pages\n  /v3/blogs/{blogId}/pageviews:\n    get:\n      description: Gets page views by blog id.\n      operationId: blogger.pageViews.get\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - explode: true\n        in: query\n        name: range\n        schema:\n          items:\n            enum:\n            - all\n            - 30DAYS\n            - 7DAYS\n            type: string\n          type: array\n        style: form\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pageviews'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - pageViews\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n  /v3/blogs/{blogId}/posts:\n    get:\n      description: Lists posts.\n      operationId: blogger.posts.list\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: endDate\n        schema:\n          type: string\n      - in: query\n        name: fetchBodies\n        schema:\n          type: boolean\n      - in: query\n        name: fetchImages\n        schema:\n          type: boolean\n      - in: query\n        name: labels\n        schema:\n          type: string\n      - in: query\n        name: maxResults\n        schema:\n          type: integer\n      - in: query\n        name: orderBy\n        schema:\n          enum:\n          - ORDER_BY_UNSPECIFIED\n          - PUBLISHED\n          - UPDATED\n          type: string\n      - in: query\n        name: pageToken\n        schema:\n          type: string\n      - in: query\n        name: startDate\n        schema:\n          type: string\n      - explode: true\n        in: query\n        name: status\n        schema:\n          items:\n            enum:\n            - LIVE\n            - DRAFT\n            - SCHEDULED\n            type: string\n          type: array\n        style: form\n      - in: query\n        name: view\n        schema:\n          enum:\n          - VIEW_TYPE_UNSPECIFIED\n          - READER\n          - AUTHOR\n          - ADMIN\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostList'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - posts\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: Inserts a post.\n      operationId: blogger.posts.insert\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: fetchBody\n        schema:\n          type: boolean\n      - in: query\n        name: fetchImages\n        schema:\n          type: boolean\n      - in: query\n        name: isDraft\n        schema:\n          type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Post'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - posts\n  /v3/blogs/{blogId}/posts/bypath:\n    get:\n      description: Gets a post by path.\n      operationId: blogger.posts.getByPath\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: path\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: maxComments\n        schema:\n          type: integer\n      - in: query\n        name: view\n        schema:\n          enum:\n          - VIEW_TYPE_UNSPECIFIED\n          - READER\n          - AUTHOR\n          - ADMIN\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - posts\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n  /v3/blogs/{blogId}/posts/search:\n    get:\n      description: Searches for posts matching given query terms in the specified\n        blog.\n      operationId: blogger.posts.search\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: q\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: fetchBodies\n        schema:\n          type: boolean\n      - in: query\n        name: orderBy\n        schema:\n          enum:\n          - ORDER_BY_UNSPECIFIED\n          - PUBLISHED\n          - UPDATED\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostList'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - posts\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n  /v3/blogs/{blogId}/posts/{postId}:\n    delete:\n      description: Deletes a post by blog id and post id.\n      operationId: blogger.posts.delete\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: postId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - posts\n    get:\n      description: Gets a post by blog id and post id\n      operationId: blogger.posts.get\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: postId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: fetchBody\n        schema:\n          type: boolean\n      - in: query\n        name: fetchImages\n        schema:\n          type: boolean\n      - in: query\n        name: maxComments\n        schema:\n          type: integer\n      - in: query\n        name: view\n        schema:\n          enum:\n          - VIEW_TYPE_UNSPECIFIED\n          - READER\n          - AUTHOR\n          - ADMIN\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - posts\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    patch:\n      description: Patches a post.\n      operationId: blogger.posts.patch\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: postId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: fetchBody\n        schema:\n          type: boolean\n      - in: query\n        name: fetchImages\n        schema:\n          type: boolean\n      - in: query\n        name: maxComments\n        schema:\n          type: integer\n      - in: query\n        name: publish\n        schema:\n          type: boolean\n      - in: query\n        name: revert\n        schema:\n          type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Post'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - posts\n    put:\n      description: Updates a post by blog id and post id.\n      operationId: blogger.posts.update\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: postId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: fetchBody\n        schema:\n          type: boolean\n      - in: query\n        name: fetchImages\n        schema:\n          type: boolean\n      - in: query\n        name: maxComments\n        schema:\n          type: integer\n      - in: query\n        name: publish\n        schema:\n          type: boolean\n      - in: query\n        name: revert\n        schema:\n          type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Post'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - posts\n  /v3/blogs/{blogId}/posts/{postId}/comments:\n    get:\n      description: Lists comments.\n      operationId: blogger.comments.list\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: postId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: endDate\n        schema:\n          type: string\n      - in: query\n        name: fetchBodies\n        schema:\n          type: boolean\n      - in: query\n        name: maxResults\n        schema:\n          type: integer\n      - in: query\n        name: pageToken\n        schema:\n          type: string\n      - in: query\n        name: startDate\n        schema:\n          type: string\n      - in: query\n        name: status\n        schema:\n          enum:\n          - LIVE\n          - EMPTIED\n          - PENDING\n          - SPAM\n          type: string\n      - in: query\n        name: view\n        schema:\n          enum:\n          - VIEW_TYPE_UNSPECIFIED\n          - READER\n          - AUTHOR\n          - ADMIN\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CommentList'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - comments\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n  /v3/blogs/{blogId}/posts/{postId}/comments/{commentId}:\n    delete:\n      description: Deletes a comment by blog id, post id and comment id.\n      operationId: blogger.comments.delete\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: postId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: commentId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - comments\n    get:\n      description: Gets a comment by id.\n      operationId: blogger.comments.get\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: postId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: commentId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: view\n        schema:\n          enum:\n          - VIEW_TYPE_UNSPECIFIED\n          - READER\n          - AUTHOR\n          - ADMIN\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - comments\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n  /v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve:\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: Marks a comment as not spam by blog id, post id and comment id.\n      operationId: blogger.comments.approve\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: postId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: commentId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - comments\n  /v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent:\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: Removes the content of a comment by blog id, post id and comment\n        id.\n      operationId: blogger.comments.removeContent\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: postId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: commentId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - comments\n  /v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam:\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: Marks a comment as spam by blog id, post id and comment id.\n      operationId: blogger.comments.markAsSpam\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: postId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: commentId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - comments\n  /v3/blogs/{blogId}/posts/{postId}/publish:\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: Publishes a post.\n      operationId: blogger.posts.publish\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: postId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: publishDate\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - posts\n  /v3/blogs/{blogId}/posts/{postId}/revert:\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: Reverts a published or scheduled post to draft state.\n      operationId: blogger.posts.revert\n      parameters:\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: postId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      tags:\n      - posts\n  /v3/users/{userId}:\n    get:\n      description: Gets one user by user_id.\n      operationId: blogger.users.get\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - users\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n  /v3/users/{userId}/blogs:\n    get:\n      description: Lists blogs by user.\n      operationId: blogger.blogs.listByUser\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: fetchUserInfo\n        schema:\n          type: boolean\n      - explode: true\n        in: query\n        name: role\n        schema:\n          items:\n            enum:\n            - VIEW_TYPE_UNSPECIFIED\n            - READER\n            - AUTHOR\n            - ADMIN\n            type: string\n          type: array\n        style: form\n      - description: Default value of status is LIVE.\n        explode: true\n        in: query\n        name: status\n        schema:\n          items:\n            enum:\n            - LIVE\n            - DELETED\n            type: string\n          type: array\n        style: form\n      - in: query\n        name: view\n        schema:\n          enum:\n          - VIEW_TYPE_UNSPECIFIED\n          - READER\n          - AUTHOR\n          - ADMIN\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlogList'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - blogs\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n  /v3/users/{userId}/blogs/{blogId}:\n    get:\n      description: Gets one blog and user info pair by blog id and user id.\n      operationId: blogger.blogUserInfos.get\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: maxPosts\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlogUserInfo'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - blogUserInfos\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n  /v3/users/{userId}/blogs/{blogId}/posts:\n    get:\n      description: Lists post and user info pairs.\n      operationId: blogger.postUserInfos.list\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: endDate\n        schema:\n          type: string\n      - in: query\n        name: fetchBodies\n        schema:\n          type: boolean\n      - in: query\n        name: labels\n        schema:\n          type: string\n      - in: query\n        name: maxResults\n        schema:\n          type: integer\n      - in: query\n        name: orderBy\n        schema:\n          enum:\n          - ORDER_BY_UNSPECIFIED\n          - PUBLISHED\n          - UPDATED\n          type: string\n      - in: query\n        name: pageToken\n        schema:\n          type: string\n      - in: query\n        name: startDate\n        schema:\n          type: string\n      - explode: true\n        in: query\n        name: status\n        schema:\n          items:\n            enum:\n            - LIVE\n            - DRAFT\n            - SCHEDULED\n            type: string\n          type: array\n        style: form\n      - in: query\n        name: view\n        schema:\n          enum:\n          - VIEW_TYPE_UNSPECIFIED\n          - READER\n          - AUTHOR\n          - ADMIN\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostUserInfosList'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - postUserInfos\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n  /v3/users/{userId}/blogs/{blogId}/posts/{postId}:\n    get:\n      description: Gets one post and user info pair, by post_id and user_id.\n      operationId: blogger.postUserInfos.get\n      parameters:\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: blogId\n        required: true\n        schema:\n          type: string\n      - in: path\n        name: postId\n        required: true\n        schema:\n          type: string\n      - in: query\n        name: maxComments\n        schema:\n          type: integer\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PostUserInfo'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger\n      - Oauth2:\n        - https://www.googleapis.com/auth/blogger.readonly\n        Oauth2c:\n        - https://www.googleapis.com/auth/blogger.readonly\n      tags:\n      - postUserInfos\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\nservers:\n- url: https://blogger.googleapis.com/\ntags:\n- name: blogs\n- name: blogUserInfos\n- name: comments\n- name: pages\n- name: pageViews\n- name: posts\n- name: postUserInfos\n- name: users\n",
			"canonicalURL": "/github.com/stackql/stackql-provider-registry@7482bc9b2425a6491d640bf921a1dc9cf508f339/-/blob/providers/src/googleapis.com/v0.1.2/services/blogger-v3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stackql/stackql-provider-registry/blob/7482bc9b2425a6491d640bf921a1dc9cf508f339/providers/src/googleapis.com/v0.1.2/services/blogger-v3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v3/blogs/{blogId}/pages\": get: security: security \"Oauth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}