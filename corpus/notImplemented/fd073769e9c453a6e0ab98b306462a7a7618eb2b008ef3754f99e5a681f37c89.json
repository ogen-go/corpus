{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nordic-institute/X-Road-REST-UI"
		},
		"file": {
			"name": "openapi-definition.yaml",
			"size": 0,
			"path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml",
			"byteSize": 133855,
			"content": "---\nopenapi: 3.0.0\nservers:\n  - description: X-Road API Design\n    url: https://virtserver.swaggerhub.com/Gofore/X-Road/1.0.0\ninfo:\n  description: X-Road UI Based API\n  version: \"1.0.13\"\n  title: X-Road UI Based API\n  contact:\n    email: lauri.koutaniemi@gofore.com\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\ntags:\n  - name: security server\n    description: \u003cbr\u003eSecurity Server API design\n  - name: central server\n    description: \u003cbr\u003eCentral Server API design\npaths:\n  /backups:\n    get: # ok\n      tags:\n        - security server\n      summary: get security server backups\n      operationId: getBackups\n      description: Administrator views the backups for the security server.\n      responses:\n        '200':\n          description: list of security server backups\n          content:\n            application/json:\n              schema:\n                type: array\n                description: array of backup objects\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/Backup'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post: # ok\n      tags:\n        - security server\n      summary: add new backup for the security server\n      operationId: addBackup\n      description: Adds security server backup to the system\n      responses:\n        '201':\n          description: item created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Backup'\n        '202':\n          description: item accepted\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /backups/upload:\n    post: # ok\n      tags:\n        - security server\n      summary: upload new backup for the security server\n      operationId: uploadBackup\n      description: Uploads new security server backup to the system\n      requestBody:\n        description: backup to add\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: backup file\n      responses:\n        '201':\n          description: item created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Backup'\n        '202':\n          description: item accepted\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /backups/{filename}:\n    delete: # ok\n      tags:\n        - security server\n      summary: delete security server backup\n      operationId: deleteBackup\n      description: Administrator deletes the backup of the security server.\n      parameters:\n        - in: path\n          name: filename\n          description: filename of the backup\n          required: true\n          schema:\n            type: string\n            format: filename\n            minLength: 1\n            maxLength: 255\n      responses:\n        '204':\n          description: deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /backups/{filename}/restore:\n    put: # ok\n      tags:\n        - security server\n      summary: restore security server configuration from backup\n      operationId: restoreBackup\n      description: Administrator restores the security server configuration from backup.\n      parameters:\n        - in: path\n          name: filename\n          description: filename of the backup\n          required: true\n          schema:\n            type: string\n            format: filename\n            minLength: 1\n            maxLength: 255\n      responses:\n        '202':\n          description: item accepted\n        '204':\n          description: request was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /backups/{filename}/download:\n    get: # ok\n      tags:\n        - security server\n      summary: download security server backup\n      operationId: downloadBackup\n      description: Administrator downloads the backup of the security server.\n      parameters:\n        - in: path\n          name: filename\n          description: filename of the backup\n          required: true\n          schema:\n            type: string\n            format: filename\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: backup file downloaded\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n                description: backup file\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /certificates/{hash}:\n    get: # ok\n      tags:\n        - security server\n      summary: get certificate information\n      operationId: getCertificate\n      description: Administrator views certificate details.\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: certificate details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateDetails'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    delete: # ok\n      tags:\n        - security server\n      summary: delete certificate\n      operationId: deleteCertificate\n      description: Administrator deletes the certificate.\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '204':\n          description: deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /certificates/{hash}/activate:\n    put: # ok\n      tags:\n        - security server\n      summary: activate certificate\n      operationId: activateCertificate\n      description: Administrator activates selected certificate.\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '204':\n          description: request was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /certificates/{hash}/deactivate:\n    put: # ok\n      tags:\n        - security server\n      summary: deactivate certificate\n      operationId: deactivateCertificate\n      description: Administrator deactivates selected certificate.\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '204':\n          description: certificate was deactivated\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /certificates/{hash}/register:\n    put: # ok\n      tags:\n        - security server\n      summary: register certificate\n      operationId: registerCertificate\n      description: Administrator registers selected certificate.\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '204':\n          description: request was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /certificates/{hash}/unregister:\n    put: # ok\n      tags:\n        - security server\n      summary: unregister certificate\n      operationId: unregisterCertificate\n      description: Administrator unregisters selected certificate.\n      parameters:\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '204':\n          description: request was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /clients:\n    get: # ok\n      tags:\n        - security server\n      summary: find security server clients\n      operationId: findClients\n      description: Administrator views the clients of the security server.\n      parameters:\n        - in: query\n          name: name\n          description: pass an optional search string (name) for looking up clients\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: instance\n          description: pass an optional search string (instance) for looking up clients\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: member_class\n          description: pass an optional search string (member_class) for looking up clients\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: member_code\n          description: pass an optional search string (member_code) for looking up clients\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: subsystem_code\n          description: pass an optional search string (subsystem_code) for looking up clients\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: show_members\n          description: to include members for search results\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - in: query\n          name: internal_search\n          description: to search only clients inside security server\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        '200':\n          description: list of clients\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of client objects\n                items:\n                  $ref: '#/components/schemas/Client'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post: # ok\n      tags:\n        - security server\n      summary: add new client for the security server\n      operationId: addClient\n      description: Adds new client to the system\n      requestBody:\n        description: client to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClientAdd'\n      responses:\n        '201':\n          description: new client created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n        '400':\n          description: there are warnings or errors related to the service description\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/ErrorInfo'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /clients/{id}:\n    get: # ok\n      tags:\n        - security server\n      summary: get security server client information\n      operationId: getClient\n      description: Administrator views the client details of the security server.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: client object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    patch: # ok\n      tags:\n        - security server\n      summary: update security server client information\n      operationId: updateClient\n      description: Administrator updates the client information.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: ConnectionTypeWrapper\n              type: object\n              description: connection type\n              properties:\n                connection_type:\n                  $ref: '#/components/schemas/ConnectionType'\n      responses:\n        '200':\n          description: client modified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    delete: # ok\n      tags:\n        - security server\n      summary: delete security server client\n      operationId: deleteClient\n      description: Administrator deletes the client of the security server.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '204':\n          description: client deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /clients/{id}/local-groups:\n    get: # ok\n      tags:\n        - security server\n      summary: get local groups for the selected client\n      operationId: getClientGroups\n      description: Administrator views the local groups for the client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: list of local groups\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of local group objects\n                items:\n                  $ref: '#/components/schemas/LocalGroup'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post: # ok\n      tags:\n        - security server\n      summary: add new local group for the security server client\n      operationId: addClientGroup\n      description: Administrator adds a new local group for the client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      requestBody:\n        description: group to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LocalGroup'\n      responses:\n        '201':\n          description: local group created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LocalGroup'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /clients/{id}/register:\n    put: # ok\n      tags:\n        - security server\n      summary: register security server client\n      operationId: registerClient\n      description: Administrator registers client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '204':\n          description: client was registered\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /clients/{id}/service-clients:\n    get: # ok\n      tags:\n        - security server\n      summary: get service clients for the selected client\n      operationId: getClientServiceClients\n      description: Administrator views the service clients for the client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: list of service clients\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of service client objects\n                items:\n                  $ref: '#/components/schemas/ServiceClient'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post: # ok\n      tags:\n        - security server\n      summary: add new service client for the security server client\n      operationId: addClientServiceClient\n      description: Administrator adds a new service client for the client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: ServiceClientId\n              type: object\n              properties:\n                id:\n                  type: string\n                  format: text\n                  description: id of the service client\n                  minLength: 1\n                  maxLength: 1279\n      responses:\n        '201':\n          description: service client added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceClient'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /clients/{id}/sign-certificates:\n    get: # ok\n      tags:\n        - security server\n      summary: get security server client certificates information\n      operationId: getClientSignCertificates\n      description: Administrator views the certificates for the client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: list of certificates\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of certificate (details) objects\n                items:\n                  $ref: '#/components/schemas/TokenCertificate'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /clients/{id}/tls-certificates:\n    get: # ok\n      tags:\n        - security server\n      summary: get security server client TLS certificates information\n      operationId: getClientTlsCertificates\n      description: Administrator views the TLS certificates for the client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: list of tls certificates\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of certificate (details) objects\n                items:\n                  $ref: '#/components/schemas/CertificateDetails'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post: # ok\n      tags:\n        - security server\n      summary: add new certificate for the security server client\n      operationId: addClientTlsCertificate\n      description: Administrator adds a new certificate for the client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      requestBody:\n        description: certificate to add\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: certificate file\n      responses:\n        '201':\n          description: certificate added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateDetails'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /clients/{id}/tls-certificates/{hash}:\n    get: # ok\n      tags:\n        - security server\n      summary: get TLS certificate\n      operationId: getClientTlsCertificate\n      description: Administrator gets the TLS certificate for the selected client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: certificate details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateDetails'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    delete: # ok\n      tags:\n        - security server\n      summary: delete certificate\n      operationId: deleteClientTlsCertificate\n      description: Administrator deletes the certificate from selected client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n        - in: path\n          name: hash\n          description: SHA-1 hash of the certificate\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '204':\n          description: certificate deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /clients/{id}/unregister:\n    put: # ok\n      tags:\n        - security server\n      summary: unregister security server client\n      operationId: unregisterClient\n      description: Administrator unregisters client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '204':\n          description: unregister was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /clients/{id}/service-descriptions:\n    get: # ok\n      tags:\n        - security server\n      summary: get security server client service descriptions\n      operationId: getClientServiceDescriptions\n      description: Administrator views the service descriptions for the client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      responses:\n        '200':\n          description: list of service descriptions\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of service description objects\n                items:\n                  $ref: '#/components/schemas/ServiceDescription'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post: # ok\n      tags:\n        - security server\n      summary: add new service description for the security server client\n      operationId: addClientServiceDescription\n      description: Administrator adds a new service description for the client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceDescriptionAdd'\n      responses:\n        '201':\n          description: service description created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceDescription'\n        '400':\n          description: there are warnings or errors related to the service description\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/ErrorInfo'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /clients/{id}/subjects:\n    get: # ok\n      tags:\n        - security server\n      summary: find access right subjects\n      operationId: findSubjects\n      description: Administrator views the clients, globalgroups and localgroups of the security server as access right subjects\n      parameters:\n        - in: path\n          name: id\n          description: id of the client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n        - in: query\n          name: member_name_group_description\n          description: pass an optional search string (name) for looking up subjects - name of a member or description of a group\n          example: NIIS | Some group description\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: subject_type\n          description: pass an optional search string (subject_type) for looking up subjects\n          required: false\n          schema:\n            $ref: '#/components/schemas/SubjectType'\n        - in: query\n          name: instance\n          description: pass an optional search string (instance) for looking up subjects - full instance id should be used\n          example: GOV\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: member_class\n          description: pass an optional search string (member_class) for looking up subjects\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: member_group_code\n          description: pass an optional search string (member_group_code) for looking up subjects - member_code of a member or group_code of a group\n          example: 1234 | Example group code\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n        - in: query\n          name: subsystem_code\n          description: pass an optional search string (subsystem_code) for looking up subjects\n          example: Subsystem1\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 0\n            maxLength: 255\n      responses:\n        '200':\n          description: list of subjects\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of Subjects\n                items:\n                  $ref: '#/components/schemas/Subject'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /local-groups/{group_id}:\n    get: # ok\n      tags:\n        - security server\n      summary: get local group information\n      operationId: getGroup\n      description: Administrator views local group details.\n      parameters:\n        - in: path\n          name: group_id\n          description: id of the local group\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: group object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LocalGroup'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    put: # ok\n      tags:\n        - security server\n      summary: update local group information\n      operationId: updateGroup\n      description: Administrator updates the local group information.\n      parameters:\n        - in: path\n          name: group_id\n          description: id of the local group\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n        - in: query\n          name: description\n          description: local group description\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: local group modified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LocalGroup'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    delete: # ok\n      tags:\n        - security server\n      summary: delete local group\n      operationId: deleteGroup\n      description: Administrator deletes the local group.\n      parameters:\n        - in: path\n          name: group_id\n          description: id of the local group\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '204':\n          description: local group deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /local-groups/{group_id}/members:\n    post: # ok\n      tags:\n        - security server\n      summary: add new member for the local group\n      operationId: addGroupMember\n      description: Administrator adds a new member for the local group.\n      parameters:\n        - in: path\n          name: group_id\n          description: id of the local group\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Members'\n      responses:\n        '201':\n          description: new members added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Members'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /local-groups/{group_id}/members/delete:\n    post: # ok\n      tags:\n        - security server\n      summary: delete member from local group\n      operationId: deleteGroupMember\n      description: Administrator deletes the member from local group.\n      parameters:\n        - in: path\n          name: group_id\n          description: id of the local group\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Members'\n      responses:\n        '204':\n          description: members deleted\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /keys/{id}:\n    get: # ok\n      tags:\n        - security server\n      summary: get information for the selected key\n      operationId: getKey\n      description: Administrator views key details.\n      parameters:\n        - in: path\n          name: id\n          description: id of the key\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: key object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Key'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    put: # ok\n      tags:\n        - security server\n      summary: update key information\n      operationId: updateKey\n      description: Administrator updates the key information.\n      parameters:\n        - in: path\n          name: id\n          description: id of the key\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n        - in: query\n          name: name\n          description: friendly name of the key\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: key modified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Key'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    delete: # ok\n      tags:\n        - security server\n      summary: delete key\n      operationId: deleteKey\n      description: Administrator deletes the key.\n      parameters:\n        - in: path\n          name: id\n          description: id of the key\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '204':\n          description: key deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /keys/{id}/certificates:\n    post: # ok\n      tags:\n        - security server\n      summary: add new certificate for selected key\n      operationId: addCertificate\n      description: Adds certificate to the system\n      parameters:\n        - in: path\n          name: id\n          description: id of the key\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      requestBody:\n        description: certificate to add\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: certificate file\n      responses:\n        '201':\n          description: certificate created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateDetails'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /keys/{id}/generate-csr:\n    put: # ok\n      tags:\n        - security server\n      summary: generate csr for the selected key\n      operationId: genrerateCsr\n      description: Administrator generates csr for the key.\n      parameters:\n        - in: path\n          name: id\n          description: id of the key\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n        - in: query\n          name: key_usage\n          description: inteded usage for the key (signing or authentication)\n          required: false\n          schema:\n            $ref: '#/components/schemas/KeyUsageType'\n        - in: query\n          name: approved_ca\n          description: approved certification service\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n        - in: query\n          name: csr_format\n          description: format of the certificate signing request (PEM or DER)\n          required: false\n          schema:\n            $ref: '#/components/schemas/CsrFormat'\n        - in: query\n          name: member_id\n          description: security server client the certificate will be issued for (only for signing certificates)\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '201':\n          description: CSR created\n          content:\n            application/pkcs10:\n              schema:\n                type: string\n                format: binary\n                description: csr file\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /keys/{id}/delete-csr:\n    put: # ok\n      tags:\n        - security server\n      summary: delete csr from the selected key\n      operationId: deleteCsr\n      description: Administrator deletes csr from the key.\n      parameters:\n        - in: path\n          name: id\n          description: id of the key\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n        - in: query\n          name: csr_id\n          description: id of the csr\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '204':\n          description: csr deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /member-classes:\n    get: # ok\n      tags:\n        - security server\n      summary: get list of known member classes\n      operationId: getMemberClasses\n      description: Administrator lists member classes.\n      parameters:\n        - in: query\n          name: current_instance\n          description: if true, return member classes for this instance.\n            if false (default), return member classes for all instances\n          required: false\n          schema:\n            default: false\n            type: boolean\n      responses:\n        '200':\n          description: key object\n          content:\n            application/json:\n              schema:\n                type: array\n                description: array of member classes\n                uniqueItems: true\n                items:\n                  type: string\n                  format: text\n                  minLength: 1\n                  maxLength: 255\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /member-classes/{id}:\n    get: # ok\n      tags:\n        - security server\n      summary: get list of known member classes for a given instance\n      operationId: getMemberClassesForInstance\n      description: Administrator lists member classes for a given instance.\n      parameters:\n        - in: path\n          name: id\n          description: instance id\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: key object\n          content:\n            application/json:\n              schema:\n                type: array\n                description: array of member classes\n                uniqueItems: true\n                items:\n                  type: string\n                  format: text\n                  minLength: 1\n                  maxLength: 255\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /language:\n    put: # ok\n      tags:\n        - security server\n      summary: change language\n      operationId: language\n      description: Administrator changes the language for the UI.\n      parameters:\n        - in: path\n          name: code\n          description: code of the language (language code)\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 2\n            maxLength: 2\n      responses:\n        '200':\n          description: language changed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Language'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /user:\n    get: # ok\n      tags:\n        - security server\n      summary: get user data for the logged user\n      operationId: user\n      description: Administrator gets user data from backend.\n      responses:\n        '200':\n          description: user details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /security-servers/{id}:\n    get: # ok\n      tags:\n        - security server\n      summary: get security server information\n      operationId: getSecurityServer\n      description: SS administrator views the details of a security server.\n      parameters:\n        - in: path\n          name: id\n          description: id of the security server\n          required: true\n          schema:\n            type: string\n            format: text\n            description: \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e:\u003csecurity_server_code\u003e\n            example: FI:GOV:123:sserver1\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SecurityServer'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /services/{id}:\n    get: # ok\n      tags:\n        - security server\n      summary: get service\n      operationId: getService\n      description: Administrator views selected service.\n      parameters:\n        - in: path\n          name: id\n          description: id of the service\n          required: true\n          schema:\n            type: string\n            example: CS:ORG:Client:myService.v1\n            format: text\n            minLength: 1\n            maxLength: 1535\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    patch: # ok\n      tags:\n        - security server\n      summary: update service\n      operationId: updateService\n      description: Administrator updates the service.\n      parameters:\n        - in: path\n          name: id\n          description: id of the service\n          required: true\n          schema:\n            type: string\n            example: CS:ORG:Client:myService.v1\n            format: text\n            minLength: 1\n            maxLength: 1535\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceUpdate'\n      responses:\n        '200':\n          description: service modified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /services/{id}/access-rights:\n    get: # ok\n      tags:\n        - security server\n      summary: get access rights for the selected service\n      operationId: getServiceAccessRights\n      description: Administrator views service access rights.\n      parameters:\n        - in: path\n          name: id\n          description: id of the service\n          required: true\n          schema:\n            type: string\n            example: CS:ORG:Client:myService.v1\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: list of service client and access rights\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of service client objects\n                items:\n                  $ref: '#/components/schemas/ServiceClient'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post:\n      tags:\n        - security server\n      summary: add new access right for the selected service\n      operationId: addServiceAccessRight\n      description: Adds access right to the service\n      parameters:\n        - in: path\n          name: id\n          description: id of the service\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Subjects'\n      responses:\n        '201':\n          description: access rights added\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of added service client objects\n                items:\n                  $ref: '#/components/schemas/ServiceClient'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /services/{id}/access-rights/delete:\n    post: # ok\n      tags:\n        - security server\n      summary: remove access right\n      operationId: deleteServiceAccessRight\n      description: Administrator removes access right from selected service.\n      parameters:\n        - in: path\n          name: id\n          description: id of the service\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Subjects'\n      responses:\n        '204':\n          description: access right(s) deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /service-clients/{id}/access-rights:\n    get: # ok\n      tags:\n        - security server\n      summary: get access rights for the selected service client.\n      operationId: getServiceClientAccessRights\n      description: Administrator views service client's access rights.\n      parameters:\n        - in: path\n          name: id\n          description: id of the service client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1279\n      responses:\n        '200':\n          description: list of access rights\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of access right objects\n                items:\n                  $ref: '#/components/schemas/AccessRight'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post: # ok\n      tags:\n        - security server\n      summary: add new access right for selected service client\n      operationId: addServiceClientAccessRight\n      description: Adds access right to the service client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the service client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1279\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Subjects'\n      responses:\n        '201':\n          description: access right(s) added\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of added access right objects\n                items:\n                  $ref: '#/components/schemas/AccessRight'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /service-clients/{id}/access-rights/delete:\n    post: # ok\n      tags:\n        - security server\n      summary: remove access right\n      operationId: deleteServiceClientAccessRight\n      description: Administrator removes access right from selected service client.\n      parameters:\n        - in: path\n          name: id\n          description: id of the service client\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1279\n      requestBody:\n        description: list of access rights to be deleted\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Subjects'\n      responses:\n        '204':\n          description: access right(s) deleted\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /service-descriptions/{id}:\n    get: # ok\n      tags:\n        - security server\n      summary: get service description with provided id\n      operationId: getServiceDescription\n      description: Administrator views a service description with a certain id.\n      parameters:\n        - in: path\n          name: id\n          description: id of the service description\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: wanted service description\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceDescription'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    patch: # ok\n      tags:\n        - security server\n      summary: update url or service code for the selected service description\n      operationId: updateServiceDescription\n      description: Administrator updates the selected service description.\n      parameters:\n        - in: path\n          name: id\n          description: id of the service description\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ServiceDescriptionUpdate'\n      responses:\n        '200':\n          description: service description modified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceDescription'\n        '400':\n          description: there are warnings or errors related to the service description\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/ErrorInfo'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    delete: # ok\n      tags:\n        - security server\n      summary: delete service description\n      operationId: deleteServiceDescription\n      description: Administrator deletes the service description.\n      parameters:\n        - in: path\n          name: id\n          description: id of the service description\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '204':\n          description: service description deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /service-descriptions/{id}/disable:\n    put: # ok\n      tags:\n        - security server\n      summary: disable selected service description\n      operationId: disableServiceDescription\n      description: Administrator disables service description.\n      parameters:\n        - in: path\n          name: id\n          description: id of the service description\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              title: ServiceDescriptionDisabledNotice\n              type: object\n              properties:\n                disabled_notice:\n                  type: string\n                  format: text\n                  description: disabled service notice\n                  minLength: 0\n                  maxLength: 255\n      responses:\n        '204':\n          description: service description disabled\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /service-descriptions/{id}/enable:\n    put: # ok\n      tags:\n        - security server\n      summary: enable selected service description\n      operationId: enableServiceDescription\n      description: Administrator enables service description.\n      parameters:\n        - in: path\n          name: id\n          description: id of the service description\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '204':\n          description: service description enabled\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /service-descriptions/{id}/refresh:\n    put: # ok\n      tags:\n        - security server\n      summary: refresh selected service description\n      operationId: refreshServiceDescription\n      description: Administrator refreshes service description.\n      parameters:\n        - in: path\n          name: id\n          description: id of the service description\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: IgnoreWarnings\n              type: object\n              properties:\n                ignore_warnings:\n                  type: boolean\n                  default: false\n                  description: if true, any ignorable warnings are ignored. if false (or missing),\n                    any warnings cause request to fail\n      responses:\n        '200':\n          description: service description refreshed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceDescription'\n        '400':\n          description: there are warnings or errors related to the service description\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/ErrorInfo'\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /service-descriptions/{id}/services:\n    get: # ok\n      tags:\n        - security server\n      summary: get services for the selected service description\n      operationId: getServiceDescriptionServices\n      description: Administrator views the services for the selected service description.\n      parameters:\n        - in: path\n          name: id\n          description: id of the service description\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: list of services\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of service objects\n                items:\n                  $ref: '#/components/schemas/Service'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /system: # ok\n    get:\n      tags:\n        - security server\n      summary: get system information\n      operationId: getSystem\n      description: Administrator views the system information.\n      responses:\n        '200':\n          description: system information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/System'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /system/anchor:\n    get: # ok\n      tags:\n        - security server\n      summary: view the configuration anchor information\n      operationId: getAnchor\n      description: Administrator views the configuration anchor information.\n      responses:\n        '200':\n          description: anchor information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Anchor'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post: # ok\n      tags:\n        - security server\n      summary: upload a configuration anchor file\n      operationId: uploadAnchor\n      description: Administrator uploads configuration anchor file\n      requestBody:\n        description: configuration anchor\n        content:\n          application/xml:\n            schema:\n              type: string\n              format: ascii\n              description: configuration anchor file\n              minLength: 1\n              maxLength: 1000000\n      responses:\n        '201':\n          description: configuration anchor uploaded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Anchor'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /system/anchor/download:\n    get: # ok\n      tags:\n        - security server\n      summary: download configuration anchor information\n      operationId: downloadAnchor\n      description: Administrator downloads the configuration anchor information.\n      responses:\n        '200':\n          description: configuration anchor\n          content:\n            application/xml:\n              schema:\n                type: string\n                format: ascii\n                description: configuration anchor file\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /system/certificate:\n    get: # ok\n      tags:\n        - security server\n      summary: view the security server certificate information\n      operationId: getSystemCertificate\n      description: Administrator views the security server TLS certificate information.\n      responses:\n        '200':\n          description: certificate information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateDetails'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /system/certificate/export:\n    get: # ok\n      tags:\n        - security server\n      summary: download the security server certificate as gzip compressed tar archive\n      operationId: downloadSystemCertificate\n      description: Administrator downloads the security server TLS certificate.\n      responses:\n        '200':\n          description: information fetched successfully\n          content:\n            application/gzip:\n              schema:\n                type: string\n                format: binary\n                description: certificate file\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /system/certificate/generate-tls-key:\n    put: # ok\n      tags:\n        - security server\n      summary: generate new TLS key\n      operationId: generateSystemCertificateTlsKey\n      description: Administrator generates new tls key.\n      responses:\n        '204':\n          description: tls key generated\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /system/certificate/generate-csr:\n    put: # ok\n      tags:\n        - security server\n      summary: generate new certificate request\n      operationId: generateSystemCertificateRequest\n      description: Administrator generates new certificate request.\n      responses:\n        '204':\n          description: certificate request generated\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /system/certificate/import:\n    post: # ok\n      tags:\n        - security server\n      summary: import new internal TLS certificate.\n      operationId: importSystemCertificate\n      description: Administrator imports new internal TLS certificate\n      requestBody:\n        description: certificate to add\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: certificate file\n      responses:\n        '201':\n          description: tls certificate imported\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateDetails'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /system/timestamping-services:\n    get: # ok\n      tags:\n        - security server\n      summary: view the timestamping services\n      operationId: getTimestampingServices\n      description: Administrator views the timestamping services.\n      responses:\n        '200':\n          description: list of timestamping services\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of timestamping service objects\n                items:\n                  $ref: '#/components/schemas/TimestampingService'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    post: # ok\n      tags:\n        - security server\n      summary: add a timestamping service\n      operationId: addTimestampingService\n      description: Administrator selects new timestamping service\n      requestBody:\n        description: Timestamping service to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TimestampingService'\n      responses:\n        '201':\n          description: timestamping service created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TimestampingService'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /system/timestamping-services/{url}:\n    delete: # ok\n      tags:\n        - security server\n      summary: delete timestamping service\n      operationId: deleteTimestampingService\n      description: Administrator removes timestamping service.\n      parameters:\n        - in: path\n          name: url\n          description: url of the timestamping service\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '204':\n          description: timestamping service deletion was successful\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '500':\n          description: internal server error\n  /system/version:\n    get: # ok\n      tags:\n        - security server\n      summary: get information for the system version\n      operationId: systemVersion\n      description: Administrator views key details.\n      responses:\n        '200':\n          description: system version information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Version'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /tokens:\n    get: # ok\n      tags:\n        - security server\n      summary: get security server tokens\n      operationId: getTokens\n      description: Administrator views tokens of the security server.\n      responses:\n        '200':\n          description: list of tokens\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                description: array of token objects\n                items:\n                  $ref: '#/components/schemas/Token'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /tokens/{id}:\n    get: # ok\n      tags:\n        - security server\n      summary: get security server token information\n      operationId: getToken\n      description: Administrator views the token details of the security server.\n      parameters:\n        - in: path\n          name: id\n          description: id of the token\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: token object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n    put: # ok\n      tags:\n        - security server\n      summary: update security server token information\n      operationId: updateToken\n      description: Administrator updates the token information.\n      parameters:\n        - in: path\n          name: id\n          description: id of the token\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n        - in: query\n          name: name\n          description: friendly name of the token\n          required: false\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      responses:\n        '200':\n          description: token modified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /tokens/{id}/keys:\n    post: # ok\n      tags:\n        - security server\n      summary: add new key\n      operationId: addKey\n      description: Adds key for selected token.\n      parameters:\n        - in: path\n          name: id\n          description: id of the token\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 255\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: KeyLabel\n              type: object\n              properties:\n                label:\n                  type: string\n                  format: text\n                  description: label for the new key\n                  minLength: 1\n                  maxLength: 255\n              example:\n                label: My new key\n      responses:\n        '201':\n          description: key created for the token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Key'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '409':\n          description: an existing item already exists\n        '500':\n          description: internal server error\n  /tokens/{id}/login:\n    put: # ok\n      tags:\n        - security server\n      summary: login to token\n      operationId: loginToken\n      description: Login to token\n      parameters:\n        - in: path\n          name: id\n          description: id of the token\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: TokenPassword\n              type: object\n              properties:\n                password:\n                  type: string\n                  format: text\n                  description: password for logging in to the token\n                  minLength: 1\n              example:\n                password: sm3!!ycat\n      responses:\n        '200':\n          description: logged in\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /tokens/{id}/logout:\n    put: # ok\n      tags:\n        - security server\n      summary: logout from token\n      operationId: logoutToken\n      description: Administrator logs out from token.\n      parameters:\n        - in: path\n          name: id\n          description: id of the token\n          required: true\n          schema:\n            type: string\n            format: text\n            minLength: 1\n      responses:\n        '200':\n          description: logged out\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\n  /xroad-instances:\n    get: # ok\n      tags:\n        - security server\n      summary: get list of known xroad instance identifiers\n      operationId: getXroadInstances\n      description: Administrator lists xroad instance identifiers\n      responses:\n        '200':\n          description: xroad instance identifiers\n          content:\n            application/json:\n              schema:\n                type: array\n                description: array of xroad instance identifiers\n                uniqueItems: true\n                items:\n                  type: string\n                  format: text\n                  minLength: 1\n                  maxLength: 255\n        '400':\n          description: request was invalid\n        '401':\n          description: authentication credentials are missing\n        '403':\n          description: request has been refused\n        '404':\n          description: resource requested does not exists\n        '406':\n          description: request specified an invalid format\n        '500':\n          description: internal server error\ncomponents:\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: Authorization\n      description: X-Road-ApiKey token=\u003capi key\u003e\n      # https://github.com/nordic-institute/X-Road-REST-UI/blob/XRDDEV-237/doc/Manuals/ug-ss_x-road_6_security_server_user_guide.md#1911-creating-new-api-keys\n  schemas:\n    AccessRight: # ok\n      type: object\n      description: access right for clients and services\n      required:\n        - id\n        - client_id\n        - service_code\n        - service_title\n      properties:\n        id:\n          type: string\n          format: text\n          description: access right id\n          example: 123\n          minLength: 1\n          maxLength: 255\n          readOnly: true\n        client_id:\n          type: string\n          format: text\n          description: \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e:\u003csubsystem\u003e(optional)\n          example: FI:GOV:123:ABC\n          minLength: 1\n          maxLength: 255\n        service_code:\n          type: string\n          format: text\n          description: service code\n          example: clientDeletion\n          minLength: 1\n          maxLength: 255\n        service_title:\n          type: string\n          format: text\n          description: service title\n          example: client deletion\n          minLength: 1\n          maxLength: 255\n    Anchor: # ok\n      type: object\n      description: security server anchor\n      required:\n        - hash\n        - created_at\n      properties:\n        hash:\n          type: string\n          format: hash\n          description: anchor hash\n          example: 42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3:22:55:42:34:C3\n          minLength: 1\n          maxLength: 255\n        created_at:\n          type: string\n          format: date-time\n          description: anchor created at\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n    Backup: # ok\n      type: object\n      description: security server backup\n      required:\n        - filename\n        - created_at\n      properties:\n        filename:\n          type: string\n          format: filename\n          description: backup filename\n          example: configuration_backup_20181224.tar\n          minLength: 1\n          maxLength: 255\n        created_at:\n          type: string\n          format: date-time\n          description: backup created at\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n    TokenCertificateSigningRequest: # ok\n      type: object\n      description: CSR for certificate that is stored in a Token\n      required:\n        - id\n        - owner_id\n      properties:\n        id:\n          type: string\n          format: text\n          description: CSR id\n          example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF\n          readOnly: true\n        owner_id:\n          type: string\n          format: text\n          description: client id of the owner member, \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e\n          example: FI:GOV:123\n          minLength: 1\n          maxLength: 767\n          readOnly: true\n    TokenCertificate: # ok\n      type: object\n      description: certificate that is stored in a Token (auth or sign cert)\n      required:\n        - ocsp_status\n        - owner_id\n        - active\n        - saved_to_configuration\n        - certificate_details\n        - status\n      properties:\n        ocsp_status:\n          $ref: '#/components/schemas/CertificateOcspStatus'\n        owner_id:\n          type: string\n          format: text\n          description: client id of the owner member, \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e\n          example: FI:GOV:123\n          minLength: 1\n          maxLength: 767\n          readOnly: true\n        active:\n          type: boolean\n          description: if the certificate is active\n          example: true\n        saved_to_configuration:\n          type: boolean\n          description: if the certificate is saved to configuration\n          example: true\n        certificate_details:\n          $ref: '#/components/schemas/CertificateDetails'\n        status:\n          $ref: '#/components/schemas/CertificateStatus'\n    CertificateDetails: # ok\n      type: object\n      description: certificate details for any kind of certificate (TLS, auth, sign)\n      required:\n        - issuer_distinguished_name\n        - issuer_common_name\n        - subject_distinguished_name\n        - subject_common_name\n        - not_before\n        - not_after\n        - serial\n        - version\n        - signature_algorithm\n        - signature\n        - public_key_algorithm\n        - rsa_public_key_modulus\n        - rsa_public_key_exponent\n        - hash\n        - key_usages\n      properties:\n        issuer_distinguished_name:\n          type: string\n          format: text\n          description: certificate issuer distinguished name\n          example: issuer123\n          minLength: 1\n          maxLength: 255\n        issuer_common_name:\n          type: string\n          format: text\n          description: certificate issuer common name\n          example: domain.com\n          minLength: 1\n          maxLength: 255\n        subject_distinguished_name:\n          type: string\n          format: text\n          description: certificate subject distinguished name\n          example: subject123\n          minLength: 1\n          maxLength: 255\n        subject_common_name:\n          type: string\n          format: text\n          description: certificate subject common name\n          example: domain.com\n          minLength: 1\n          maxLength: 255\n        not_before:\n          type: string\n          format: date-time\n          description: certificate validity not before\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n        not_after:\n          type: string\n          format: date-time\n          description: certificate validity not after\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n        serial:\n          type: string\n          format: text\n          description: serial number\n          example: '123456789'\n          minLength: 1\n          maxLength: 255\n        version:\n          type: integer\n          format: int32\n          example: 3\n          description: version\n        signature_algorithm:\n          type: string\n          format: sha-256\n          description: certificate signature algorithm\n          example: sha256WithRSAEncryption\n          minLength: 1\n          maxLength: 255\n        signature:\n          type: string\n          format: text\n          description: hex encoded certificate signature\n          example: '30af2fdc1780...'\n          minLength: 1\n          maxLength: 255\n        public_key_algorithm:\n          type: string\n          format: sha-256\n          description: certificate public key algorithm\n          example: 'sha256WithRSAEncryption'\n          minLength: 1\n          maxLength: 255\n        rsa_public_key_modulus:\n          type: string\n          format: hex\n          description: hex encoded RSA public key modulus (if RSA key)\n          example: c44421d601...\n          minLength: 1\n          maxLength: 1000\n        rsa_public_key_exponent:\n          type: integer\n          format: int32\n          description: RSA public key exponent (if RSA key) as an integer\n          example: 65537\n        hash:\n          type: string\n          format: text\n          description: certificate SHA-1 hash\n          example: 1234567890ABCDEF\n          minLength: 1\n          maxLength: 255\n        key_usages:\n          type: array\n          description: certificate key usage array\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/KeyUsage'\n    CertificateAuthority: # ok\n      type: object\n      description: certificate authority\n      required:\n        - name\n        - response\n        - expires_at\n      properties:\n        name:\n          type: string\n          format: text\n          description: distinguished name\n          example: /C=FI/O=X-Road Test/OU=X-Road Test CA OU/CN=X-Road Test CA CN\n          minLength: 1\n          maxLength: 255\n        response:\n          type: string\n          format: text\n          description: certificate authority response\n          example: N/A\n          minLength: 1\n          maxLength: 1000\n        expires_at:\n          type: string\n          format: date-time\n          description: certificate authority expires at\n          example: '2099-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n    CertificateStatus: # ok\n      type: string\n      format: enum\n      description: certificate status\n      example: IN_USE\n      enum:\n        - SAVED\n        - REGISTRATION_IN_PROGRESS\n        - REGISTERED\n        - DELETION_IN_PROGRESS\n        - GLOBAL_ERROR\n    CertificateOcspStatus: # ok\n      type: string\n      format: enum\n      description: certificate status\n      example: IN_USE\n      enum:\n        - DISABLED\n        - EXPIRED\n        - OCSP_RESPONSE_UNKNOWN\n        - OCSP_RESPONSE_GOOD\n        - OCSP_RESPONSE_SUSPENDED\n        - OCSP_RESPONSE_REVOKED\n    Client: # ok\n      type: object\n      description: x-road client\n      required:\n        - member_class\n        - member_code\n        - subsystem_code\n      properties:\n        id:\n          type: string\n          format: text\n          description: \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e:\u003csubsystem\u003e(optional)\n          example: FI:GOV:123:ABC\n          minLength: 1\n          maxLength: 1023\n          readOnly: true\n        member_name:\n          type: string\n          format: text\n          description: member name\n          example: FI\n          minLength: 1\n          maxLength: 255\n        member_class:\n          type: string\n          format: text\n          description: member class\n          example: GOV\n          minLength: 1\n          maxLength: 255\n        member_code:\n          type: string\n          format: text\n          description: member code\n          example: 123\n          minLength: 1\n          maxLength: 255\n        subsystem_code:\n          type: string\n          format: text\n          description: subsystem code\n          example: ABC\n          minLength: 1\n          maxLength: 255\n        connection_type:\n          $ref: '#/components/schemas/ConnectionType'\n        status:\n          $ref: '#/components/schemas/ClientStatus'\n    ClientAdd: # ok\n      type: object\n      description: request to add client. Carries a Client and ignore warnings parameter\n      required:\n        - client\n      properties:\n        client:\n          $ref: '#/components/schemas/Client'\n        ignore_warnings:\n          type: boolean\n          default: false\n          description: if true, any ignorable warnings are ignored. if false (or missing),\n            any warnings cause request to fail\n    ClientStatus: # ok\n      type: string\n      format: enum\n      description: client status\n      example: REGISTERED\n      enum:\n        - REGISTERED\n        - SAVED\n        - GLOBAL_ERROR\n        - REGISTRATION_IN_PROGRESS\n        - DELETION_IN_PROGRESS\n    ConfigurationStatus: # ok\n      type: string\n      format: enum\n      description: configuration status\n      example: SUCCESS\n      enum:\n        - SUCCESS # Everything ok\n        - CONFCLIENT_STATUS_FAILED # Global configuration client status query failed\n        - ERROR_CODE_INTERNAL # Internal error occurred.\"\n        - ERROR_CODE_INVALID_SIGNATURE_VALUE # Invalid signature value.\"\n        - ERROR_CODE_EXPIRED_CONF # The downloaded global configuration has expired.\"\n        - ERROR_CODE_CANNOT_DOWNLOAD_CONF # Unable to download global configuration. Check network connection to global configuration provider.\"\n        - ERROR_CODE_MISSING_PRIVATE_PARAM # The downloaded global configuration did not contain private parameters\n    CodeWithMetadata:\n      type: object\n      description: object that contains a code identifier and possibly collection of\n        associated metadata. Used to relay error and warning information.\n      required:\n        - code\n      properties:\n        code:\n          type: string\n          format: text\n          description: identifier of the item (for example errorcode)\n          example: adding_services\n        metadata:\n          type: array\n          description: array containing metadata associated with the item. For example names of services\n            were attempted to add, but failed\n          uniqueItems: true\n          items:\n            type: string\n            format: text\n    ConnectionType: # ok\n      type: string\n      format: enum\n      description: connection type\n      example: HTTP\n      default: HTTP\n      enum:\n        - HTTP\n        - HTTPS\n        - HTTPS_NO_AUTH\n    CsrFormat: # ok\n      type: string\n      format: enum\n      description: csr format\n      example: PEM\n      default: PEM\n      enum:\n        - PEM\n        - DER\n    ErrorInfo:\n      type: object\n      description: object returned in error cases\n      required:\n        - status\n      properties:\n        status:\n          type: integer\n          format: int32\n          description: http status code\n          example: 400\n        error:\n          $ref: '#/components/schemas/CodeWithMetadata'\n        warnings:\n          type: array\n          description: warnings that could be ignored\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/CodeWithMetadata'\n    GlobalConfiguration: # ok\n      type: object\n      description: global configuration\n      required:\n        - status\n        - updated_at\n        - next_update_at\n      properties:\n        status:\n          $ref: '#/components/schemas/ConfigurationStatus'\n        updated_at:\n          type: string\n          format: date-time\n          description: last time updated\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n        next_update_at:\n          type: string\n          format: date-time\n          description: last time updated\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n    LocalGroup: # ok\n      type: object\n      description: group\n      required:\n        - code\n        - description\n      properties:\n        id:\n          type: string\n          format: text\n          description: unique identifier\n          example: 123\n          readOnly: true\n        code:\n          type: string\n          format: text\n          description: group code\n          example: groupcode\n          minLength: 1\n          maxLength: 255\n        description:\n          type: string\n          format: text\n          description: group description\n          example: description\n          minLength: 1\n          maxLength: 255\n        member_count:\n          type: integer\n          format: uint\n          description: member count\n          example: 10\n          minimum: 0\n          maximum: 1000000\n        updated_at:\n          type: string\n          format: date-time\n          description: last time updated\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n        members:\n          type: array\n          description: group members\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/GroupMember'\n    GroupMember: # ok\n      type: object\n      description: group member\n      required:\n        - id\n        - name\n        - created_at\n      properties:\n        id:\n          type: string\n          format: text\n          description: group member id\n          example: FI:GOV:123:SS1\n          minLength: 1\n          maxLength: 1023\n        name:\n          type: string\n          format: text\n          description: group member name\n          example: Member123\n          minLength: 1\n          maxLength: 255\n        created_at:\n          type: string\n          format: date-time\n          description: group member created at\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n    Key: # ok\n      type: object\n      description: key for the certificate\n      required:\n        - id\n        - name\n        - label\n        - certificates\n        - certificate_signing_requests\n        - usage\n      properties:\n        id:\n          type: string\n          format: text\n          description: key id\n          example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF\n          minLength: 1\n          maxLength: 40\n          readOnly: true\n        name:\n          type: string\n          format: text\n          description: key name\n          example: friendly name\n          minLength: 1\n          maxLength: 255\n        label:\n          type: string\n          format: text\n          description: key label\n          example: key label\n          minLength: 1\n          maxLength: 255\n        certificates:\n          type: array\n          description: list of certificates for the key\n          items:\n            $ref: '#/components/schemas/TokenCertificate'\n        certificate_signing_requests:\n          type: array\n          description: list of CSRs for the key\n          items:\n            $ref: '#/components/schemas/TokenCertificateSigningRequest'\n        usage:\n          $ref: '#/components/schemas/KeyUsageType'\n        available:\n          type: boolean\n          description: if the key is available\n          example: true\n        saved_to_configuration:\n          type: boolean\n          description: if the key is saved to configuration\n          example: true\n    KeyUsage: # ok\n      type: string\n      format: enum\n      description: certificate key usage\n      example: NON_REPUDIATION\n      enum:\n        - DIGITAL_SIGNATURE\n        - NON_REPUDIATION\n        - KEY_ENCIPHERMENT\n        - DATA_ENCIPHERMENT\n        - KEY_AGREEMENT\n        - KEY_CERT_SIGN\n        - CRL_SIGN\n        - ENCIPHER_ONLY\n        - DECIPHER_ONLY\n    KeyUsageType: # ok\n      type: string\n      format: enum\n      description: intended usage for the key\n      example: AUTHENTICATION\n      enum:\n        - AUTHENTICATION\n        - SIGNING\n    KeyValuePair: # ok\n      type: object\n      description: key-value pair of strings\n      required:\n        - key\n        - value\n      properties:\n        key:\n          type: string\n          description: key\n        value:\n          type: string\n          description: value\n    Language: # ok\n      type: object\n      description: language\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          format: text\n          description: language code\n          example: en\n          minLength: 2\n          maxLength: 2\n          readOnly: true\n    Members: # ok\n      type: object\n      description: request object containing an array of member ids\n      properties:\n        items:\n          type: array\n          description: array of members to be added\n          items:\n            type: string\n            format: text\n            minLength: 1\n            maxLength: 1023\n    OcspResponders: # ok\n      type: object\n      description: ocsp responce\n      required:\n        - url\n        - status\n        - updated_at\n        - next_update_at\n      properties:\n        url:\n          type: string\n          format: url\n          description: service url\n          example: https://domain.com/service\n          minLength: 1\n          maxLength: 255\n        status:\n          $ref: '#/components/schemas/OcspStatus'\n        updated_at:\n          type: string\n          format: date-time\n          description: last time updated\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n        next_update_at:\n          type: string\n          format: date-time\n          description: last time updated\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n    OcspStatus: # ok\n      type: string\n      format: enum\n      description: OCSP responder status\n      example: SUCCESS\n      enum:\n        - SUCCESS # Everything ok\n        - ERROR_CODE_OCSP_CONNECTION_ERROR # Unable to connect to the OCSP responder.\n        - ERROR_CODE_OCSP_FAILED # Unable to fetch response from the OCSP responder.\n        - ERROR_CODE_OCSP_RESPONSE_INVALID # Unable to parse the OCSP response.\n        - ERROR_CODE_OCSP_UNINITIALIZED # Status request not sent yet.\n    SecurityServer: # ok\n      type: object\n      description: security server information\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          format: text\n          description: \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e:\u003csecurity_server_code\u003e\n          example: FI:GOV:123:sserver1\n        instance_id:\n          type: string\n          format: text\n          description: xroad instance id\n          example: FI\n          minLength: 1\n          maxLength: 255\n        member_class:\n          type: string\n          format: text\n          description: member class\n          example: GOV\n          minLength: 1\n          maxLength: 255\n        member_code:\n          type: string\n          format: text\n          description: member code\n          example: 123\n          minLength: 1\n          maxLength: 255\n        server_code:\n          type: string\n          format: text\n          description: security server code\n          example: server123\n          minLength: 1\n          maxLength: 255\n    Service: # ok\n      type: object\n      description: service for the service description\n      required:\n        - id\n        - service_code\n        - url\n        - timeout\n      properties:\n        id:\n          type: string\n          format: text\n          description: encoded service id, including client id\n          example: CS:ORG:Client:myService.v1\n          minLength: 1\n          maxLength: 1535\n        service_code:\n          type: string\n          format: text\n          description: encoded service code and version\n          example: myService.v1\n          minLength: 1\n          maxLength: 511\n        timeout:\n          type: integer\n          format: uint\n          description: service time out value\n          example: 60\n          minimum: 0\n          maximum: 1000\n        ssl_auth:\n          type: boolean\n          description: service ssl auth\n          example: true\n        subjects_count:\n          type: integer\n          format: uint\n          description: count of acl subjects\n          example: 5\n          minimum: 0\n          maximum: 100000\n        url:\n          type: string\n          format: url\n          description: service url\n          example: https://domain.com/service\n          minLength: 1\n          maxLength: 255\n    ServiceUpdate: # ok\n      type: object\n      description: object for updating a service or all services within service description\n      required:\n        - service\n      properties:\n        service:\n          $ref: '#/components/schemas/Service'\n        url_all:\n          description: url is applied for all services\n          type: boolean\n          example: false\n          default: false\n        timeout_all:\n          description: timeout value is applied for all services\n          type: boolean\n          example: false\n          default: false\n        ssl_auth_all:\n          description: ssl authentication is applied for all services\n          type: boolean\n          example: false\n          default: false\n    ServiceClient: # ok\n      type: object\n      description: service client\n      required:\n        - subject\n        - rights_given_at\n        - access_rights\n      properties:\n        subject:\n          $ref: '#/components/schemas/Subject'\n        rights_given_at:\n          type: string\n          format: date-time\n          description: access right given at\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n        access_rights:\n          type: array\n          description: list of access rights - this will be null when requested via services/{id}/access-rights endpoint\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/AccessRight'\n    ServiceDescription: # ok\n      type: object\n      description: WSDL/REST service\n      required:\n        - id\n        - url\n        - type\n        - disabled\n        - disabled_notice\n        - refreshed_at\n        - services\n        - client_id\n      properties:\n        id:\n          type: string\n          description: unique identifier\n          example: 123\n        url:\n          type: string\n          format: url\n          description: service url\n          example: http://dev.xroad.rocks/services.wsdl\n          minLength: 1\n          maxLength: 255\n        type:\n          $ref: '#/components/schemas/ServiceType'\n        disabled:\n          type: boolean\n          description: service disabled\n          example: true\n        disabled_notice:\n          type: string\n          format: text\n          description: disabled notice\n          example: default_disabled_service_notice\n          minLength: 0\n          maxLength: 255\n        refreshed_at:\n          type: string\n          format: date-time\n          description: time for service refresh\n          example: \"2018-12-15T00:00:00.001Z\"\n          minLength: 24\n          maxLength: 24\n        services:\n          type: array\n          description: service description services\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/Service'\n        client_id:\n          type: string\n          format: text\n          description: \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e:\u003csubsystem\u003e(optional)\n          example: FI:GOV:123:ABC\n          minLength: 1\n          maxLength: 255\n    ServiceDescriptionAdd:\n      type: object\n      description: request object containing service description url, service code and type\n      required:\n        - url\n        - type\n      properties:\n        url:\n          type: string\n          format: text\n          description: path for the service description file\n          example: https://domain.com/service\n          minLength: 1\n          maxLength: 255\n        rest_service_code:\n          type: string\n          format: text\n          description: service code for REST service\n          example: exampleServiceCode\n          minLength: 1\n          maxLength: 255\n        ignore_warnings:\n          type: boolean\n          description: if true, any ignorable warnings are ignored. if false (or missing),\n            any warnings cause request to fail\n          default: false\n        type:\n          $ref: '#/components/schemas/ServiceType'\n    ServiceDescriptionUpdate:\n      type: object\n      description: request object for updating a service description url or service code\n      properties:\n        url:\n          type: string\n          format: text\n          description: path for the service description file\n          example: https://domain.com/service\n          minLength: 1\n          maxLength: 255\n        rest_service_code:\n          type: string\n          format: text\n          description: service code for REST service\n          example: exampleServiceCode\n          minLength: 1\n          maxLength: 255\n        ignore_warnings:\n          type: boolean\n          description: if true, any ignorable warnings are ignored. if false (or missing),\n            any warnings cause request to fail\n          default: false\n        type:\n          $ref: '#/components/schemas/ServiceType'\n    ServiceType: # ok\n      type: string\n      format: text\n      description: service type\n      example: WSDL\n      enum:\n        - WSDL\n        - REST\n    Subject: # ok\n      type: object\n      description: subject\n      required:\n        - id\n        - subject_type\n      properties:\n        id:\n          type: string\n          format: text\n          description: subject id - can be a subsystem id \u003cinstance_id\u003e:\u003cmember_class\u003e:\u003cmember_code\u003e:\u003csubsystem\u003e | globalgroup id \u003cinstance_id\u003e:\u003cgroup_code\u003e | localgroup resource id in number format \u003cid\u003e\n          example: DEV:ORG:1234:Subsystem | DEV:security-server-owners | 123\n          minLength: 1\n          maxLength: 1279\n        member_name_group_description:\n          type: string\n          format: text\n          description: name of the subject - can be the name of a member or the description of a group\n          example: Security server owners\n          readOnly: true\n          minLength: 1\n          maxLength: 255\n        local_group_code:\n          type: string\n          format: text\n          description: group code in case the object is a local group\n          example: My own Local group code\n          minLength: 1\n          maxLength: 255\n          readOnly: true\n        subject_type:\n          $ref: '#/components/schemas/SubjectType'\n    SubjectType: # ok\n      type: string\n      format: text\n      description: subject type\n      example: GLOBALGROUP\n      enum:\n        - GLOBALGROUP\n        - LOCALGROUP\n        - SUBSYSTEM\n    Subjects: # ok\n      type: object\n      description: object containing and array of subject ids\n      properties:\n        items:\n          type: array\n          uniqueItems: true\n          description: array of subject ids\n          items:\n            $ref: '#/components/schemas/Subject'\n    System: # ok\n      type: object\n      description: system parameters\n      required:\n        - anchor\n        - configuration\n        - timestamping_services\n        - ocsp_responders\n        - certificate_authorities\n        - tls_certificate\n        - version\n      properties:\n        anchor:\n          $ref: '#/components/schemas/Anchor'\n        configuration:\n          $ref: '#/components/schemas/GlobalConfiguration'\n        timestamping_services:\n          type: array\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/TimestampingService'\n        ocsp_responders:\n          $ref: '#/components/schemas/OcspResponders'\n        certificate_authorities:\n          type: array\n          description: system certificate authorities\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/CertificateAuthority'\n        tls_certificate:\n          $ref: '#/components/schemas/CertificateDetails'\n        version:\n          $ref: '#/components/schemas/Version'\n    TimestampingService: # ok\n      type: object\n      description: timestamping services\n      required:\n        - name\n        - url\n        - status\n        - message\n        - updated_at\n      properties:\n        name:\n          type: string\n          format: text\n          description: name of the time stamping service\n          example: X-Road Test TSA CN\n          minLength: 1\n          maxLength: 255\n        url:\n          type: string\n          format: url\n          description: url of the time stamping service\n          example: http://dev.xroad.rocks:123\n          minLength: 1\n          maxLength: 255\n        updated_at:\n          type: string\n          format: date-time\n          description: last time updated\n          example: '2018-12-15T00:00:00.001Z'\n          minLength: 24\n          maxLength: 24\n        message:\n          type: string\n          format: text\n          description: timestamping service message\n          example: ok\n          minLength: 1\n          maxLength: 255\n        status:\n          $ref: '#/components/schemas/TimestampingStatus'\n    TimestampingStatus: # ok\n      type: string\n      format: enum\n      description: timestamping status\n      example: SUCCESS\n      enum:\n        - SUCCESS # Everything ok\n        - ERROR_CODE_TIMESTAMP_REQUEST_TIMED_OUT # Connection to the timestamp server timed out. Check the network connection to the timestamp server.\n        - ERROR_CODE_MALFORMED_TIMESTAMP_SERVER_URL # Malformed timestamp server URL. Check the URL.\n        - ERROR_CODE_UNKNOWN # Unknown error code.\n        - ERROR_CODE_UNINITIALIZED # The configuration client is initializing.\n        - ERROR_CODE_TIMESTAMP_UNINITIALIZED # Connection ok, no timestamp request made yet.\n        - ERROR_CODE_CONNECTION_FAILED # Connection to configuration client failed. Ensure that xroad-confclient is running.\n    Token: # ok\n      type: object\n      description: token\n      required:\n        - id\n        - name\n        - type\n        - keys\n        - status\n        - logged_in\n        - available\n        - saved_to_configuration\n        - read_only\n      properties:\n        id:\n          type: string\n          format: text\n          description: token id\n          example: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF\n          minLength: 1\n          readOnly: true\n        name:\n          type: string\n          format: text\n          description: token name\n          example: softToken-0\n          minLength: 1\n          maxLength: 255\n        type:\n          $ref: '#/components/schemas/TokenType'\n        keys:\n          type: array\n          description: token keys\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/Key'\n        status:\n          $ref: '#/components/schemas/TokenStatus'\n        logged_in:\n          type: boolean\n          description: if the token has been logged in to\n          example: true\n        available:\n          type: boolean\n          description: if the token is available\n          example: true\n        saved_to_configuration:\n          type: boolean\n          description: if the token is saved to configuration\n          example: true\n        read_only:\n          type: boolean\n          description: if the token is read-only\n          example: true\n        serial_number:\n          type: string\n          format: text\n          description: serial number of the token\n          example: 12345\n        token_infos:\n          type: array\n          description: Contains label-value pairs of information\n          items:\n            $ref: '#/components/schemas/KeyValuePair'\n    TokenStatus: # ok\n      type: string\n      format: text\n      description: token type\n      example: OK\n      enum:\n        - OK # Normal operation status\n        - USER_PIN_LOCKED # Blocked\n        - USER_PIN_INCORRECT # Incorrect PIN was entered\n        - USER_PIN_INVALID # Invalid PIN\n        - USER_PIN_EXPIRED # PIN expired\n        - USER_PIN_COUNT_LOW # Only a few tries left\n        - USER_PIN_FINAL_TRY # Final try\n        - NOT_INITIALIZED # Not inited\n    TokenType: # ok\n      type: string\n      format: text\n      description: token type\n      example: SOFTWARE\n      enum:\n        - SOFTWARE\n        - HARDWARE\n    User: # ok\n      type: object\n      description: x-road user\n      required:\n        - username\n        - roles\n        - permissions\n      properties:\n        username:\n          type: string\n          format: text\n          description: user username\n          example: Guest\n          minLength: 1\n          maxLength: 255\n        roles:\n          type: array\n          description: user roles\n          uniqueItems: true\n          items:\n            type: string\n            format: text\n        permissions:\n          type: array\n          description: user permissions\n          uniqueItems: true\n          items:\n            type: string\n            format: text\n    Version: # ok\n      type: object\n      description: version information\n      required:\n        - info\n      properties:\n        info:\n          type: string\n          format: text\n          description: information about the security server\n          example: Security Server version 6.21.0-SNAPSHOT-20190411git32add470\n          minLength: 1\n          maxLength: 255\nsecurity:\n  - ApiKeyAuth: []\n",
			"canonicalURL": "/github.com/nordic-institute/X-Road-REST-UI@611e9bc006b47a348d7bacb8f677798c574c9b21/-/blob/src/proxy-ui-api/src/main/resources/openapi-definition.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nordic-institute/X-Road-REST-UI/blob/611e9bc006b47a348d7bacb8f677798c574c9b21/src/proxy-ui-api/src/main/resources/openapi-definition.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/services/{id}/access-rights/delete\": post: requestBody: contents: application/json: generate schema: field items: item: field subject_type: primitive: format \"text\": enum format not implemented",
	"NotImplemented": [
		"enum format",
		"unsupported content types"
	]
}