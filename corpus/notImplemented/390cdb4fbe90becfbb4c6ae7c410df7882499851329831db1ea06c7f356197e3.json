{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/microsoft/kiota"
		},
		"file": {
			"name": "ModelWithDerivedTypes.yaml",
			"size": 0,
			"path": "tests/Kiota.Builder.IntegrationTests/ModelWithDerivedTypes.yaml",
			"byteSize": 2649,
			"content": "ï»¿openapi: 3.0.0\ninfo:\n  title: \"Derived Types API\"\n  version: \"1.0.0\"\nservers:\n  - url: https://example.org/\npaths:\n  /fruits: # this method will not downcast to OpenAPI v2 because oneOf is not supported\n    get:\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n                # The code generator will need to be clever and instead of generating a fruitResponse class \n                # with a property for each of the properties, it needs to detect that apple and orange derive from fruit.\n                # It can then declare the requestExecutors as returning the base type.\n              schema:  \n                oneOf:\n                - $ref: \"#/components/schemas/fruit\"  # Allowing the base class allows enables evolvabilty\n                - $ref: \"#/components/schemas/apple\"\n                - $ref: \"#/components/schemas/orange\"\n  /fruitsWithDiscriminator: \n    get:\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:  \n                discriminator:\n                  propertyName: fruitType  # This only works if fruitType has the exact schema name\n                allOf:\n                  - $ref: \"#/components/schemas/fruit\"  # Allowing the base class allows enables evolvabilty\n  /fruitsWithDiscriminatorWithMapping: \n    get:\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:  \n                discriminator:\n                  propertyName: fruitType  \n                  mapping:          # If mapping doesn't exist, then fallback to base type'\n                    apple: '#/components/schemas/apple'\n                    orange: '#/components/schemas/orange'\n                allOf:\n                  - $ref: \"#/components/schemas/fruit\"  # Allowing the base class allows enables evolvabilty\n\ncomponents:\n  schemas:\n    fruit:\n      type: object\n      title: fruit  # required temporarily due to a bug in Kiota codemodel\n      properties:\n        name:\n          type: string\n        fruitType:\n          type: string\n    apple:\n      allOf: \n        - $ref: '#/components/schemas/fruit'\n      type: object\n      title: apple\n      properties:\n         edible:\n           type: boolean\n         fruitType:\n           x-const: apple  # the const keyword is only supported int OpenAPI 3.1\n    orange:\n      allOf: \n        - $ref: '#/components/schemas/fruit'\n      type: object\n      title: orange\n      properties:\n         seedless:\n           type: boolean\n         fruitType:\n           x-const: orange   \n           \n",
			"canonicalURL": "/github.com/microsoft/kiota@0ff6130c417b2c661eb748807bc8e1ee7dede80f/-/blob/tests/Kiota.Builder.IntegrationTests/ModelWithDerivedTypes.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/microsoft/kiota/blob/0ff6130c417b2c661eb748807bc8e1ee7dede80f/tests/Kiota.Builder.IntegrationTests/ModelWithDerivedTypes.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/fruits\": get: responses: 200: contents: application/json: generate schema: oneOf: collect variants: FruitsGetOK: sum types with same names not implemented",
	"NotImplemented": [
		"sum types with same names"
	]
}