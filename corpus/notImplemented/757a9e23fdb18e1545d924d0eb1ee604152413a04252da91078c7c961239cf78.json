{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ASCOMInitiative/ASCOMRemote"
		},
		"file": {
			"name": "AlpacaManagementAPI_v1.yaml",
			"size": 0,
			"path": "Swagger/AlpacaManagementAPI_v1.yaml",
			"byteSize": 15622,
			"content": "openapi: 3.0.2\n\nservers:\n  - description: Within the \"Try it out\" URLs, the device URL root is the trailing slash in \"/ascom/\".\n    url: https://private-d6fe6-ascom.apiary-mock.com/ascom\n\ninfo:\n  title: ASCOM Alpaca Management API\n    \n  version: \"v1\"\n  \n  description: \u003e\n    This API enables Alpaca devices to be managed.\n\n    ## Introduction\n\n    The overall Alpaca device mangement interface provides two access mechanisms: **browser** through paths prefixed with **\"/setup\"** and **REST/JSON** through paths prefixed with **\"/management\"**.\n    \n    \n    The browser and JSON methods also come in two styles: **\"Versioned\"** and **\"Unversioned\"**. \n    Unversioned paths are intended to be \"well known\" and not to change in future, whereas versioned paths can change should this ever be required.\n    \n    \n    The number of unversioned paths has been limited to two: a top level browser URL for overall device configuration and a JSON list of the  interface versions supported by the Alpaca device. All other paths are versioned.\n\n\n    ## URLs and Case Sensitivity\n\n    **Alpaca Management URLs** are all of the form **http(s)://host:port/path** where path is one of the method names below. e.g. for an Alpaca interface running on port 7843 of a device with IP address 192.168.1.89:\n    \n    * The main browser setup URL would be **http://192.168.1.89:7843/setup**\n        \n    * The JSON list of supported interface versions would be available through a GET to **http://192.168.1.89:7843/management/apiversions**\n        \n    * The JSON list of configured ASCOM devices  would be available through a GET to **http://192.168.1.89:7843/management/v1/configureddevices**\n    \n    \n\n    URLs are case sensitive and all elements must be in lower case. This means that both the device type and command name must always be in lower case. Parameter names are not case sensitive, so clients and drivers should be prepared for parameter names to be supplied and returned with any casing. Parameter values can be in mixed case as required.\n    \n    \n    ## Parameters and Returned values\n\n    For GET operations, parameters should be placed in the URL query string and for PUT operations they should be placed in the body of the message.\n\n\n    Responses, as described below, are returned in JSON format and always include a common set of values including the client's transaction number, \n    the server's transaction number together with any error message and error number.\n\n    If the transaction completes successfully, the ErrorMessage field will be an empty string and the ErrorNumber field will be zero.\n\n\n    ## HTTP Status Codes and ASCOM Error codes\n\n    The returned HTTP status code gives a high level view of whether the device understood the request and whether it attempted to process it.\n    \n    \n    Under most circumstances the returned status will be `200`, indicating that the request was correctly formatted and that it was passed to the device's handler to execute.\n    A `200` status does not necessarily mean that the operation completed as expected, without error, and you must always check the ErrorMessage and ErrorNumber fields to confirm\n    whether the returned result is valid. The `200` status simply means that the transaction was successfully managed by the device's transaction management layer.\n    \n    \n    An HTTP status code of `400` indicates that the management JSON command interpreter could not interpret the request e.g. an invalid device number or misspelt device type was supplied. Check the body of the response for a text error message.\n\n\n    In common with accepted Internet practice, an HTTP status code of `403` indicates that an invalid URL was sent to the /setup browser interface.\n\n\n    An HTTP status code of `500` indicates an unexpected error within the device from which it could not recover. Check the body of the response for a text error message.\n\n  \npaths:\n  '/setup':\n    get:\n      summary: Primary browser web page for the overall collection of devices\n      description: \u003e\n      \n        This is a single, well-known, API version-independent, browser interface that provides a consistent user experience and well known \"new user\" starting point for all Alpaca devices.\n        The web page must describe the overall device, including name, manufacturer and version number.  \n        \n        \n        This page must also enable the user to set cross cutting information that applies to the whole device such as the operating IP address and port number.  \n        \n        \n        This URL could also provide links to configuration pages of available devices, at the developer's discretion. \n      tags:\n        - HTML Browser User Interface\n      responses:\n        '200':\n          description: Alpaca device primary HTML page\n          content:\n            text/html:\n              schema:\n                type: string\n                description: HTML page with device information.\n        '500':\n          description: Server internal error so return an error message\n          content:\n            text/html:\n              schema:\n                type: string\n                description: HTML message describing the issue.\n                \n  '/setup/v1/{device_type}/{device_number}/setup':\n    get:\n      summary: Configuration web page for the specified device\n      description: \u003e\n        Web page user interface that enables device specific configuration to be set for each available device. This must be implemented, even if the response to the user is that the device is not configurable.\n\n\n        User relevance is increased by providing a unique configuration page for each device. This enables deep linking directly to the  device's individual configuration page and avoids displaying non-relevant information about other devices.\n      parameters:\n        - $ref: '#/components/parameters/device_type'\n        - $ref: '#/components/parameters/device_number'\n      tags:\n        - HTML Browser User Interface\n      responses:\n        '200':\n          description: Alpaca individual ASCOM device HTML configuration page. This must be implemented, even if the response to the user is that the device is not configurable.\n          content:\n            text/html:\n              schema:\n                type: string\n        '403':\n          description: 'The provided path specifies an unsupported device or method, return an error message to display in the browser'\n          content:\n            text/html:\n              schema:\n                type: string\n                description: HTML message describing the issue.\n        '500':\n          description: 'Server internal error so return an error message'\n          content:\n            text/html:\n              schema:\n                type: string\n                description: HTML message describing the issue.\n                \n  '/management/apiversions':\n    get:\n      summary: Supported Alpaca API versions\n      description: Returns an integer array of supported Alpaca API version numbers.\n      parameters:\n        - $ref: '#/components/parameters/ClientIDQuery'\n        - $ref: '#/components/parameters/ClientTransactionIDQuery'\n      tags:\n        - Management Interface (JSON)\n      responses:\n        '200':\n          description: integer array of supported Alpaca API version numbers.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IntArrayResponse'\n        '400':\n          description: 'Method or parameter value error, check error message'\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        '500':\n          description: 'Server internal error, check error message'\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n                \n  '/management/v1/description':\n    get:\n      summary: Summary information about this device as a whole\n      description: \u003e\n        Returns cross-cutting information that applies to all devices available at this URL:Port.\n      parameters:\n        - $ref: '#/components/parameters/ClientIDQuery'\n        - $ref: '#/components/parameters/ClientTransactionIDQuery'\n      tags:\n        - Management Interface (JSON)\n      responses:\n        '200':\n          description: Cross cutting information that applies to all devices served through this URL:Port.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DescriptionResponse'\n        '403':\n          description: 'The provided path specifies an unsupported device or method, return an error message to display in the browser'\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        '500':\n          description: 'Server internal error so return an error message'\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n                \n  '/management/v1/configureddevices':\n    get:\n      summary: Summary information about each available ASCOM device\n      description: \u003e\n        Returns an array of device description objects, providing unique information for each served device, enabling them to be accessed through the Alpaca Device API.\n      parameters:\n        - $ref: '#/components/parameters/ClientIDQuery'\n        - $ref: '#/components/parameters/ClientTransactionIDQuery'\n      tags:\n        - Management Interface (JSON)\n      responses:\n        '200':\n          description: Summary information about each available ASCOM device.\n          content:\n            application/json:\n              schema:\n                 $ref: '#/components/schemas/ConfiguredDevicesResponse'\n        '403':\n          description: 'The provided path specifies an unsupported device or method, return an error message to display in the browser'\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n        '500':\n          description: 'Server internal error so return an error message'\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n\ncomponents:\n  parameters:\n    device_type:\n      name: device_type\n      description: One of the recognised ASCOM device types e.g. telescope (must be lower case)\n      in: path\n      required: true\n      schema:\n        type: string\n        default: telescope\n        pattern: '^[a-z]*$'\n        \n    device_number:\n      name: device_number\n      description: Zero based device number as set on the server (0 to 4294967295)\n      in: path\n      required: true\n      schema:\n        type: integer\n        format: uint32\n        minimum: 0\n        maximum: 4294967295\n        \n    ClientIDQuery:\n      name: ClientID\n      description: Client's unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client.\n      in: query\n      required: false\n      schema:\n        type: integer\n        format: uint32\n        minimum: 0\n        maximum: 4294967295\n        \n    ClientTransactionIDQuery:\n      name: ClientTransactionID\n      description: Client's transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs.\n      in: query\n      required: false\n      schema:\n        type: integer\n        format: uint32\n        minimum: 0\n        maximum: 4294967295\n        \n  schemas:\n    ConfiguredDevicesResponse:\n      type: object\n      properties:\n        Value:\n          type: array\n          items:\n            type: object\n            properties:\n              DeviceName:\n                type: string\n                description: A short name for this device that a user would expect to see in a list of available devices.\n              DeviceType:\n                type: string\n                description: One of the supported ASCOM Devices types such as Telescope, Camera, Focuser etc.\n              DeviceNumber:\n                type: integer\n                format: uint32\n                minimum: 0\n                maximum: 4294967295\n                description: The device number that must be used to access this device through the Alpaca Device API.\n              UniqueID:\n                type: string\n                description: A string representation of a random value that uniquely identifies this ASCOM device; the random value should have a minimum of 48bits of randomness. Where possible a UUID / GUID should be used, but this is not mandatory.\n          description: Array of device configuration objects.\n        ClientTransactionID:\n          type: integer\n          format: uint32\n          minimum: 0\n          maximum: 4294967295\n          description: Client's transaction ID (0 to 4294967295), as supplied by the client in the command request.\n        ServerTransactionID:\n          type: integer\n          format: uint32\n          minimum: 0\n          maximum: 4294967295\n          description: Server's transaction ID (0 to 4294967295), should be unique for each client transaction so that log messages on the client can be associated with logs on the device.\n\n    DescriptionResponse:\n      type: object\n      properties:\n        Value:\n          type: object\n          properties:\n            ServerName:\n              type: string\n              description: The device or server's overall name.\n            Manufacturer:\n              type: string\n              description: The manufacturer's name.\n            ManufacturerVersion:\n              type: string\n              description: The device or server's version number.\n            Location:\n              type: string\n              description: The device or server's location.\n        ClientTransactionID:\n          type: integer\n          format: uint32\n          minimum: 0\n          maximum: 4294967295\n          description: Client's transaction ID (0 to 4294967295), as supplied by the client in the command request.\n        ServerTransactionID:\n          type: integer\n          format: uint32\n          minimum: 0\n          maximum: 4294967295\n          description: Server's transaction ID (0 to 4294967295), should be unique for each client transaction so that log messages on the client can be associated with logs on the device.\n\n    IntArrayResponse:\n      type: object\n      properties:\n        Value:\n          type: array\n          items:\n            type: integer\n            format: uint32\n            minimum: 1\n            maximum: 4294967295\n          description: Array of integer values.\n        ClientTransactionID:\n          type: integer\n          format: uint32\n          minimum: 0\n          maximum: 4294967295\n          description: Client's transaction ID (0 to 4294967295), as supplied by the client in the command request.\n        ServerTransactionID:\n          type: integer\n          format: uint32\n          minimum: 0\n          maximum: 4294967295\n          description: Server's transaction ID (0 to 4294967295), should be unique for each client transaction so that log messages on the client can be associated with logs on the device.\n\n    ErrorMessage:\n      type: string\n      description: Plain text message describing the issue.\n",
			"canonicalURL": "/github.com/ASCOMInitiative/ASCOMRemote@cf6d9876f63734fdddd19fa109af4c7b986a6533/-/blob/Swagger/AlpacaManagementAPI_v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ASCOMInitiative/ASCOMRemote/blob/cf6d9876f63734fdddd19fa109af4c7b986a6533/Swagger/AlpacaManagementAPI_v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/management/apiversions\": get: responses: 400: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}