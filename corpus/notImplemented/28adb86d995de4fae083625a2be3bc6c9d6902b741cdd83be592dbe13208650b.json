{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/NUWCDIVNPT/stig-manager"
		},
		"file": {
			"name": "stig-manager.yaml",
			"size": 0,
			"path": "api/source/specification/stig-manager.yaml",
			"byteSize": 148626,
			"content": "openapi: 3.0.1\ninfo:\n  title: STIG Manager API\n  description: An API for managing evaluations of Security Technical Implementation Guide (STIG) assessments.\n  contact:\n    name: Carl Smigielski\n    email: carl.a.smigielski@saic.com\n  version: 'v1'\nservers:\n  - url: 'http://localhost:64001/api'\npaths:\n  /assets:\n    parameters:\n      - $ref: '#/components/parameters/ElevateQuery'\n      - $ref: '#/components/parameters/AssetProjectionQuery'\n    get:\n      tags:\n        - Asset\n      summary: Return a list of Assets accessible to the requester\n      operationId: getAssets\n      parameters:\n        - $ref: '#/components/parameters/CollectionIdQuery'\n        - $ref: '#/components/parameters/LabelIdQuery'\n        - $ref: '#/components/parameters/NameQuery'\n        - $ref: '#/components/parameters/NameMatchQuery'\n        - $ref: '#/components/parameters/MetadataQuery'\n        - $ref: '#/components/parameters/BenchmarkIdQuery'\n      responses:\n        '200':\n          description: AssetProjected array response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AssetProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    post:\n      tags:\n        - Asset\n      summary: Create an Asset\n      operationId: createAsset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssetCreateOrReplace'\n      responses:\n        '201':\n          description: AssetProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AssetProjected'\n        '400':\n          description: Client Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientErrorDuplicateAsset'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/assets/{assetId}':\n    parameters:\n      - $ref: '#/components/parameters/ElevateQuery'\n      - $ref: '#/components/parameters/AssetIdPath'\n      - $ref: '#/components/parameters/AssetProjectionQuery'\n    get:\n      tags:\n        - Asset\n      summary: Return an Asset\n      operationId: getAsset\n      responses:\n        '200':\n          description: AssetProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AssetProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    patch:\n      tags:\n        - Asset\n      summary: Merge provided properties with an Asset\n      operationId: updateAsset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssetUpdate'\n      responses:\n        '200':\n          description: AssetProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AssetProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n    put:\n      tags:\n        - Asset\n      summary: Set all properties of an Asset\n      operationId: replaceAsset\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AssetCreateOrReplace'\n      responses:\n        '200':\n          description: AssetProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AssetProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n    delete:\n      tags:\n        - Asset\n      summary: Delete an Asset\n      operationId: deleteAsset\n      responses:\n        '200':\n          description: AssetProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AssetProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/assets/{assetId}/checklists':\n    parameters:\n      - $ref: '#/components/parameters/AssetIdPath'\n      - $ref: '#/components/parameters/BenchmarkIdArrayQuery'\n    get:\n      tags:\n        - Asset\n      summary: Return a multi-STIG CKL for an Asset and its mapped STIGs\n      operationId: getChecklistByAsset\n      responses:\n        '200':\n          description: Review response\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ChecklistCkl'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/assets/{assetId}/checklists/{benchmarkId}/{revisionStr}':\n    parameters:\n      - $ref: '#/components/parameters/AssetIdPath'\n      - $ref: '#/components/parameters/BenchmarkIdPath'\n      - $ref: '#/components/parameters/RevisionStrPath'\n    get:\n      tags:\n        - Asset\n      summary: Return JSON summary or a CKL file for an Asset and STIG\n      operationId: getChecklistByAssetStig\n      parameters:\n        - name: format\n          in: query\n          description: The format of the response. Default if missing is 'json'\n          schema:\n            type: string\n            default: json\n            enum:\n              - json\n              - ckl\n      responses:\n        '200':\n          description: A JSON array of Checklist summary items or a CKL\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ChecklistAssetStig'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ChecklistCkl'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  # '/assets/{assetId}/labels':\n  #   parameters:\n  #     - $ref: '#/components/parameters/AssetIdPath'\n  #   get:\n  #     tags:\n  #       - Asset\n  #     summary: Return the Labels for Asset\n  #     operationId: getAssetLabels\n  #     responses:\n  #       '200':\n  #         description: Labels response\n  #         content:\n  #           application/json:\n  #             schema:\n  #               type: array\n  #               items:\n  #                 $ref: '#/components/schemas/Label'\n  #       default:\n  #         description: unexpected error\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #     security:\n  #       - oauth:\n  #           - 'stig-manager:collection:read'\n  #   post:\n  #     tags:\n  #       - Asset\n  #     summary: Add labels to an Asset\n  #     operationId: addAssetLabels\n  #     requestBody:\n  #       required: true\n  #       content:\n  #         application/json:\n  #           schema:\n  #             type: array\n  #             items:\n  #               $ref: '#/components/schemas/LabelId'\n  #     responses:\n  #       '200':\n  #         description: Labels response\n  #         content:\n  #           application/json:\n  #             schema:\n  #               type: array\n  #               items:\n  #                 $ref: '#/components/schemas/Label'\n  #       default:\n  #         description: unexpected error\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #     security:\n  #       - oauth:\n  #           - 'stig-manager:collection'\n  #   put:\n  #     tags:\n  #       - Asset\n  #     summary: Removes any previous labels and sets the new labels for an Asset\n  #     operationId: replaceAssetLabels\n  #     requestBody:\n  #       required: true\n  #       content:\n  #         application/json:\n  #           schema:\n  #             type: array\n  #             items:\n  #               $ref: '#/components/schemas/LabelId'\n  #     responses:\n  #       '200':\n  #         description: Labels response\n  #         content:\n  #           application/json:\n  #             schema:\n  #               type: array\n  #               items:\n  #                 $ref: '#/components/schemas/Label'\n  #       default:\n  #         description: unexpected error\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #     security:\n  #       - oauth:\n  #           - 'stig-manager:collection'\n  #   delete:\n  #     tags:\n  #       - Asset\n  #     summary: Removes all labels from an Asset\n  #     operationId: deleteAssetLabels\n  #     responses:\n  #       '200':\n  #         description: Labels response\n  #         content:\n  #           application/json:\n  #             schema:\n  #               type: array\n  #               items:\n  #                 $ref: '#/components/schemas/Label'\n  #       default:\n  #         description: unexpected error\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #     security:\n  #       - oauth:\n  #           - 'stig-manager:collection'\n  # '/assets/{assetId}/labels/{labelId}':\n  #   parameters:\n  #     - $ref: '#/components/parameters/AssetIdPath'\n  #     - $ref: '#/components/parameters/LabelIdPath'\n  #   delete:\n  #     tags:\n  #       - Asset\n  #     summary: Remove a label from an Asset\n  #     operationId: deleteAssetLabelById\n  #     responses:\n  #       '200':\n  #         description: Labels response\n  #         content:\n  #           application/json:\n  #             schema:\n  #               type: array\n  #               items:\n  #                 $ref: '#/components/schemas/Label'\n  #       default:\n  #         description: unexpected error\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #     security:\n  #       - oauth:\n  #           - 'stig-manager:collection'\n  '/assets/{assetId}/metadata':\n    parameters:\n      - $ref: '#/components/parameters/AssetIdPath'\n    get:\n      tags:\n        - Asset\n      summary: Return the metadata for Asset\n      operationId: getAssetMetadata\n      responses:\n        '200':\n          description: Metadata response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    patch:\n      tags:\n        - Asset\n      summary: Merge the provided object to a Assetmetadata\n      operationId: patchAssetMetadata\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Metadata'\n      responses:\n        '200':\n          description: Metadata response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n    put:\n      tags:\n        - Asset\n      summary: Set a Asset metadata to the provided object\n      operationId: putAssetMetadata\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Metadata'\n      responses:\n        '200':\n          description: Metadata response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/assets/{assetId}/metadata/keys':\n    parameters:\n      - $ref: '#/components/parameters/AssetIdPath'\n    get:\n      tags:\n        - Asset\n      summary: Return the keys of the provided Asset's metadata\n      operationId: getAssetMetadataKeys\n      responses:\n        '200':\n          description: MetadataKeys response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataKey'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n  '/assets/{assetId}/metadata/keys/{key}':\n    parameters:\n      - $ref: '#/components/parameters/AssetIdPath'\n      - $ref: '#/components/parameters/MetadataKeyPath'\n    get:\n      tags:\n        - Asset\n      summary: Return the value of the provided Asset metadata key\n      operationId: getAssetMetadataValue\n      responses:\n        '200':\n          description: MetadataValue response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataValue'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    put:\n      tags:\n        - Asset\n      summary: Set the value of the provided Asset metadata key to the provided string\n      operationId: putAssetMetadataValue\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetadataValue'\n      responses:\n        '204':\n          description: Empty to avoid large response after putting key with large value\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n    delete:\n      tags:\n        - Asset\n      summary: Remove the provided Asset metadata key\n      operationId: deleteAssetMetadataKey\n      responses:\n        '204':\n          description: Empty to avoid large response after deleteing key with large value\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/assets/{assetId}/stigs':\n    parameters:\n      - $ref: '#/components/parameters/ElevateQuery'\n      - $ref: '#/components/parameters/AssetIdPath'\n    get:\n      tags:\n        - Asset\n      summary: Return an Asset's STIG assignments\n      operationId: getStigsByAsset\n      responses:\n        '200':\n          description: STIG array response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/STIG'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    # put:\n    #   tags:\n    #     - Asset\n    #   summary: UNIMPLEMENTED Set all the STIG assignments of an Asset\n    #   operationId: attachStigsToAsset\n    #   requestBody:\n    #     required: true\n    #     content:\n    #       application/json:\n    #         schema:\n    #           type: array\n    #           minItems: 1\n    #           items:\n    #             type: string\n    #   responses:\n    #     '200':\n    #       description: Asset response\n    #       content:\n    #         application/json:\n    #           schema:\n    #             $ref: '#/components/schemas/Asset'\n    #     default:\n    #       description: unexpected error\n    #       content:\n    #         application/json:\n    #           schema:\n    #             $ref: '#/components/schemas/Error'\n    #   security:\n    #     - oauth:\n    #         - 'stig-manager:collection'\n    delete:\n      tags:\n        - Asset\n      summary: Delete all STIG assignments to an Asset\n      operationId: removeStigsFromAsset\n      responses:\n        '200':\n          description: STIG array response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/STIG'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/assets/{assetId}/stigs/{benchmarkId}':\n    parameters:\n      - $ref: '#/components/parameters/ElevateQuery'\n      - $ref: '#/components/parameters/AssetIdPath'\n      - $ref: '#/components/parameters/BenchmarkIdPath'\n    put:\n      tags:\n        - Asset\n      summary: Assign a STIG to an Asset\n      operationId: attachStigToAsset\n      responses:\n        '200':\n          description: STIG array response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/STIG'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n    delete:\n      tags:\n        - Asset\n      summary: Delete a STIG assignment to an Asset\n      operationId: removeStigFromAsset\n      responses:\n        '200':\n          description: STIG array response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/STIG'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  /collections:\n    parameters:\n      - $ref: '#/components/parameters/ElevateQuery'\n      # - $ref: '#/components/parameters/CollectionsProjectionQuery'\n    get:\n      tags:\n        - Collection\n      summary: Return a list of Collections accessible to the requester\n      description: ''\n      operationId: getCollections\n      parameters:\n        - $ref: '#/components/parameters/NameQuery'\n        - $ref: '#/components/parameters/NameMatchQuery'\n        - $ref: '#/components/parameters/MetadataQuery'\n        - $ref: '#/components/parameters/CollectionsProjectionQuery'\n      responses:\n        '200':\n          description: CollectionsProjected response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CollectionsProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    post:\n      tags:\n        - Collection\n      summary: Create a Collection\n      description: ''\n      operationId: createCollection\n      parameters:\n        - $ref: '#/components/parameters/CollectionProjectionQuery'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CollectionCreateOrReplace'\n      responses:\n        '201':\n          description: CollectionProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionProjected'\n        '400':\n          description: Client Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientErrorDuplicateCollection'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/collections/{collectionId}':\n    parameters:\n      - $ref: '#/components/parameters/ElevateQuery'\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/CollectionProjectionQuery'\n    get:\n      tags:\n        - Collection\n      summary: Return a Collection\n      description: ''\n      operationId: getCollection\n      responses:\n        '200':\n          description: CollectionProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionProjected'\n        '204':\n          description: No Content\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    patch:\n      tags:\n        - Collection\n      summary: Merge provided properties with a Collection\n      description: ''\n      operationId: updateCollection\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CollectionUpdate'\n      responses:\n        '200':\n          description: CollectionProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n    put:\n      tags:\n        - Collection\n      summary: Set all properties of a Collection\n      operationId: replaceCollection\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CollectionCreateOrReplace'\n      responses:\n        '200':\n          description: CollectionProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n    delete:\n      tags:\n        - Collection\n      summary: Delete a Collection\n      operationId: deleteCollection\n      responses:\n        '200':\n          description: CollectionProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/collections/{collectionId}/checklists/{benchmarkId}/{revisionStr}':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/BenchmarkIdPath'\n      - $ref: '#/components/parameters/RevisionStrPath'\n    get:\n      tags:\n        - Collection\n      summary: Return the Checklist for the supplied Collection and STIG\n      operationId: getChecklistByCollectionStig\n      responses:\n        '200':\n          description: ChecklistCollectionStig response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ChecklistCollectionStig'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n  '/collections/{collectionId}/findings':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/FindingAggregatorQuery'\n      - name: acceptedOnly\n        in: query\n        schema:\n          type: boolean\n          default: false\n      - $ref: '#/components/parameters/BenchmarkIdQuery'\n      - $ref: '#/components/parameters/AssetIdQuery'\n      - $ref: '#/components/parameters/FindingProjectionQuery'\n    get:\n      tags:\n        - Collection\n      summary: Return the Findings for the specified Collection\n      operationId: getFindingsByCollection\n      responses:\n        '200':\n          description: CollectionFinding response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/FindingProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n  '/collections/{collectionId}/grants/{userId}/access':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/UserIdPath'\n    get:\n      tags:\n        - Collection\n      summary: Return an accessLevel = 1 User's access to the specified Collection. Request must be made by a User with accessLevel \u003e= 3 to the Collection.\n      operationId: getStigAssetsByCollectionUser\n      responses:\n        '200':\n          description: Collection STIGAssetProjected array response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StigAssetProjected'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    put:\n      tags:\n        - Collection\n      summary: Set an accessLevel = 1 User's access to the specified Collection. Request must be made by a User with accessLevel \u003e= 3 to the Collection.\n      operationId: setStigAssetsByCollectionUser\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/StigAsset'\n      responses:\n        '200':\n          description: StigAssetProjected array response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StigAssetProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/collections/{collectionId}/poam':\n    get:\n      tags:\n        - Collection\n      summary: Return a POAM-like spreadsheet for the specified Collection aggregated by groupId\n      operationId: getPoamByCollection\n      parameters:\n        - $ref: '#/components/parameters/CollectionIdPath'\n        - $ref: '#/components/parameters/PoamAggregatorQuery'\n        - name: acceptedOnly\n          in: query\n          schema:\n            type: boolean\n            default: false\n        - $ref: '#/components/parameters/BenchmarkIdQuery'\n        - $ref: '#/components/parameters/AssetIdQuery'\n        - name: date\n          description: Value for columns Scheduled Completion Date, Milestone With Completion Dates, Milestone Changes\n          in: query\n          schema:\n            type: string\n        - name: office\n          description: Value for column Office/Org\n          in: query\n          schema:\n            type: string\n          allowReserved: true\n        - name: status\n          description: Value for column Status\n          in: query\n          schema:\n            type: string\n      responses:\n        '200':\n          description: CollectionFinding response\n          content:\n            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:\n              schema:\n                type: string\n                format: binary\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n  '/collections/{collectionId}/reviews':\n    get:\n      tags:\n        - Review\n      summary: Return a list of Reviews accessible to the requester\n      description: ''\n      operationId: getReviewsByCollection\n      parameters:\n        - $ref: '#/components/parameters/CollectionIdPath'\n        - $ref: '#/components/parameters/ReviewRulesQuery'\n        - $ref: '#/components/parameters/ReviewResultQuery'\n        - $ref: '#/components/parameters/ReviewStatusQuery'\n        - $ref: '#/components/parameters/RuleIdQuery'\n        - $ref: '#/components/parameters/GroupIdQuery'\n        - $ref: '#/components/parameters/CciQuery'\n        - $ref: '#/components/parameters/UserIdQuery'\n        - $ref: '#/components/parameters/AssetIdQuery'\n        - $ref: '#/components/parameters/BenchmarkIdQuery'\n        - $ref: '#/components/parameters/MetadataQuery'\n        - $ref: '#/components/parameters/ReviewsProjectionQuery'\n      responses:\n        '200':\n          description: Review response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ReviewRead'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n  '/collections/{collectionId}/reviews/{assetId}':\n    get:\n      tags:\n        - Review\n      summary: Return a list of Reviews for an Asset\n      operationId: getReviewsByAsset\n      parameters:\n        - $ref: '#/components/parameters/CollectionIdPath'\n        - $ref: '#/components/parameters/AssetIdPath'\n        - $ref: '#/components/parameters/ReviewRulesQuery'\n        - $ref: '#/components/parameters/ReviewResultQuery'\n        - $ref: '#/components/parameters/ReviewStatusQuery'\n        - $ref: '#/components/parameters/BenchmarkIdQuery'\n        - $ref: '#/components/parameters/MetadataQuery'\n        - $ref: '#/components/parameters/ReviewsProjectionQuery'\n      responses:\n        '200':\n          description: ReviewAssetProjected response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ReviewAsset'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    post:\n      tags:\n        - Review\n      summary: Post one or more Reviews\n      description: |\n        The request body can contain a mix of new and updated Reviews. The overall request is validated as follows:\n        \n        - conformance with the OAS schema for `ReviewAssetWrite`\n        - the requesting user has been granted access to the collectionId\n        \n        For updated Reviews, a `null` value in either `detail` or `comment` indicates the original value will be retained. The absence of the property `status` indicates the orignal value will be retained.\n        \n        For new Reviews, a `null` value in either `detail` or `comment` indicates the corresponding value in the new Review should be `null`. The absence of the property `status` indicates the corresponding value in the new Review should be `status: { label: \"saved\", text: null }`.\n        \n        For all Reviews, a string value for the `status` property is internally normalized to `status: { label: \u003cstring\u003e, text: null }`\n        \n        Each new or updated Review is permitted or rejected as follows:\n        \n        - If the requesting user's collection grant is `restricted` AND the `ruleId` is not included in any version of any `benchmarkId` for which the requesting user been granted access, then reject the Review\n        - If the optional property `status` is absent or `status.label` has value `saved`, then permit the Review\n        - If the new or updated Review would not be submittable according to the Collection settings, then reject the Review\n        - If the value of `status.label` is `submitted`, then permit the Review.\n        - If the value of `status.label` is `accepted` or `rejected` AND the Collection settings allow Reviews to be Accepted or Rejected, then permit the Review.\n        - If `status.label` has value `accepted` or `rejected` AND the Collection settings prohibit Reviews from being Accepted or Rejected, then reject the Review.\n      operationId: postReviewsByAsset\n      parameters:\n        - $ref: '#/components/parameters/CollectionIdPath'\n        - $ref: '#/components/parameters/AssetIdPath'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ReviewAssetWrite'\n      responses:\n        '200':\n          description: ReviewPostResponse response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReviewPostResponse'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/collections/{collectionId}/reviews/{assetId}/{ruleId}':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/AssetIdPath'\n      - $ref: '#/components/parameters/RuleIdPath'\n      - $ref: '#/components/parameters/ReviewProjectionQuery'\n    get:\n      tags:\n        - Review\n      summary: Return the Review for an Asset and Rule\n      operationId: getReviewByAssetRule\n      responses:\n        '200':\n          description: ReviewAssetRuleRead response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReviewAssetRuleRead'\n        '204':\n          description: The requested resource has no content.            \n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    patch:\n      tags:\n        - Review\n      summary: Merge provided properties with a Review\n      description: 'Update the given properties of a Review, if it exists'\n      operationId: patchReviewByAssetRule\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReviewAssetRulePatch'\n      responses:\n        '200':\n          description: ReviewProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReviewAssetRuleRead'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n    put:\n      tags:\n        - Review\n      summary: Set all properties of a Review\n      description: Create a new Review or update all properties of an existing Review\n      operationId: putReviewByAssetRule\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReviewAssetRulePut'\n      responses:\n        '200':\n          description: ReviewProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReviewAssetRuleRead'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n    delete:\n      tags:\n        - Review\n      summary: Delete a Review\n      operationId: deleteReviewByAssetRule\n      parameters:\n        - $ref: '#/components/parameters/ElevateQuery'\n      responses:\n        '200':\n          description: ReviewProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReviewAssetRuleRead'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/collections/{collectionId}/reviews/{assetId}/{ruleId}/metadata':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/AssetIdPath'\n      - $ref: '#/components/parameters/RuleIdPath'\n    get:\n      tags:\n        - Review\n      summary: Return the metadata for Review\n      operationId: getReviewMetadata\n      responses:\n        '200':\n          description: Metadata response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    patch:\n      tags:\n        - Review\n      summary: Merge the provided object to a Review metadata\n      operationId: patchReviewMetadata\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Metadata'\n      responses:\n        '200':\n          description: Metadata response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n    put:\n      tags:\n        - Review\n      summary: Set a Review metadata to the provided object\n      operationId: putReviewMetadata\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Metadata'\n      responses:\n        '200':\n          description: Metadata response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/collections/{collectionId}/reviews/{assetId}/{ruleId}/metadata/keys':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/AssetIdPath'\n      - $ref: '#/components/parameters/RuleIdPath'\n    get:\n      tags:\n        - Review\n      summary: Return the keys of the provided Review's metadata\n      operationId: getReviewMetadataKeys\n      responses:\n        '200':\n          description: MetadataKeys response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataKey'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n  '/collections/{collectionId}/reviews/{assetId}/{ruleId}/metadata/keys/{key}':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/AssetIdPath'\n      - $ref: '#/components/parameters/RuleIdPath'\n      - $ref: '#/components/parameters/MetadataKeyPath'\n    get:\n      tags:\n        - Review\n      summary: Return the value of the provided Review metadata key\n      operationId: getReviewMetadataValue\n      responses:\n        '200':\n          description: MetadataValue response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataValue'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    put:\n      tags:\n        - Review\n      summary: Set the value of the provided Review metadata key to the provided string\n      operationId: putReviewMetadataValue\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetadataValue'\n      responses:\n        '204':\n          description: Empty to avoid large response after putting key with large value\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n    delete:\n      tags:\n        - Review\n      summary: Remove the provided Review metadata key\n      operationId: deleteReviewMetadataKey\n      responses:\n        '204':\n          description: Empty to avoid large response after deleteing key with large value\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/collections/{collectionId}/labels':\n    get:\n      tags:\n        - Collection\n      summary: Return labels of the specified Collection\n      operationId: getCollectionLabels\n      parameters:\n        - $ref: '#/components/parameters/CollectionIdPath'\n      responses:\n        200:\n          description: Labels response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Label'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    post:\n      tags:\n        - Collection\n      summary: Create a label in the specified Collection\n      operationId: createCollectionLabel\n      parameters:\n        - $ref: '#/components/parameters/CollectionIdPath'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelCreate'\n      responses:\n        201:\n          description: Label response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Label'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n  '/collections/{collectionId}/labels/{labelId}':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/LabelIdPath'\n    get:\n      tags:\n        - Collection\n      summary: Return the specified Label of the specified Collection\n      operationId: getCollectionLabelById\n      responses:\n        200:\n          description: Labels response\n          content:\n            application/json:\n              schema:\n                  $ref: '#/components/schemas/Label'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    patch:\n      tags:\n        - Collection\n      summary: Update an existing Label\n      operationId: patchCollectionLabelById\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LabelUpdate'\n      responses:\n        '200':\n          description: Label response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Label'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n    delete:\n      tags:\n        - Collection\n      summary: Delete a Label\n      operationId: deleteCollectionLabelById\n      responses:\n        '204':\n          description: No Content\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/collections/{collectionId}/labels/{labelId}/assets':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/LabelIdPath'\n    get:\n      tags:\n        - Collection\n        - Asset\n      summary: Return the Assets mapped to the Label\n      operationId: getAssetsByCollectionLabelId\n      responses:\n        '200':\n          description: Asset response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AssetBasic'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    put:\n      tags:\n        - Collection\n        - Asset\n      summary: Replace the Label's Asset mappings\n      operationId: putAssetsByCollectionLabelId\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/String255'\n      responses:\n        '200':\n          description: The Label's Asset mappings\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AssetBasic'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'          \n  '/collections/{collectionId}/metadata':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/ElevateQuery'\n    get:\n      tags:\n        - Collection\n      summary: Return the metadata for Collection\n      operationId: getCollectionMetadata\n      responses:\n        '200':\n          description: Metadata response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    patch:\n      tags:\n        - Collection\n      summary: Merge the provided object to a Collection metadata\n      operationId: patchCollectionMetadata\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Metadata'\n      responses:\n        '200':\n          description: Metadata response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n    put:\n      tags:\n        - Collection\n      summary: Set a Collection metadata to the provided object\n      operationId: putCollectionMetadata\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Metadata'\n      responses:\n        '200':\n          description: Metadata response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Metadata'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/collections/{collectionId}/metadata/keys':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/ElevateQuery'\n    get:\n      tags:\n        - Collection\n      summary: Return the keys of the provided Collection metadata\n      operationId: getCollectionMetadataKeys\n      responses:\n        '200':\n          description: MetadataKeys response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataKey'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n  '/collections/{collectionId}/metadata/keys/{key}':\n    parameters:\n      - $ref: '#/components/parameters/ElevateQuery'\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/MetadataKeyPath'\n    get:\n      tags:\n        - Collection\n      summary: Return the value of the provided Collection metadata key\n      operationId: getCollectionMetadataValue\n      responses:\n        '200':\n          description: MetadataValue response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataValue'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    put:\n      tags:\n        - Collection\n      summary: Set the value of the provided Collection metadata key to the provided string\n      operationId: putCollectionMetadataValue\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetadataValue'\n      responses:\n        '204':\n          description: Empty to avoid large response after putting key with large value\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n    delete:\n      tags:\n        - Collection\n      summary: Remove the provided Collection metadata key\n      operationId: deleteCollectionMetadataKey\n      responses:\n        '204':\n          description: Empty to avoid large response after deleteing key with large value\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  '/collections/{collectionId}/review-history':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n    get:\n      tags:\n        - Collection\n      summary: Return history records for the specified Collection that meet the specified criteria\n      operationId: getReviewHistoryByCollection\n      parameters: \n        - $ref: '#/components/parameters/StartDateQuery' # Lower bound (earliest date) of returned history entry timestamps\n        - $ref: '#/components/parameters/EndDateQuery'    # Upper bound (latest date) of returned history entry timestamps \n        - $ref: '#/components/parameters/AssetIdQuery'  # return review history entries for just the specified assetId, if provided.\n        - $ref: '#/components/parameters/RuleIdQuery'  # return review history entries for just the specified RuleId, if provided.        \n        - $ref: '#/components/parameters/ReviewStatusQuery' # return review history entries with the specified status\n      responses:\n        '200':\n          description: ReviewHistory response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ReviewHistoryAsset'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    delete:\n      tags:\n        - Collection\n      summary: Remove history records that meet specified criteria\n      operationId: deleteReviewHistoryByCollection\n      parameters: \n        - $ref: '#/components/parameters/RetentionDateQuery' # Review History Entries older than this date will be deleted.\n        - $ref: '#/components/parameters/AssetIdQuery'  # Apply operation to just the specified assetId, if provided.\n      responses:\n        '200':\n          description: Number of history records deleted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReviewHistoryDeleted'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'            \n  '/collections/{collectionId}/review-history/stats':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n    get:\n      tags:\n        - Collection\n      summary: Return history statistics for the specified Collection\n      operationId: getReviewHistoryStatsByCollection\n      parameters:\n        - $ref: '#/components/parameters/StartDateQuery' # Lower bound (earliest date) of returned history entry count\n        - $ref: '#/components/parameters/EndDateQuery'    # Upper bound (latest date) of returned history entry count\n        - $ref: '#/components/parameters/AssetIdQuery'  # return review history stats for just the specified assetId, if provided.\n        - $ref: '#/components/parameters/RuleIdQuery'  # return review history stats for just the specified RuleId, if provided.        \n        - $ref: '#/components/parameters/ReviewStatusQuery' # return review history stats with the specified status        \n        - $ref: '#/components/parameters/ReviewHistoryStatsProjectionQuery' \n      responses:\n        '200':\n          description: ReviewHistoryStats response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReviewHistoryStats'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'            \n  '/collections/{collectionId}/status':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/BenchmarkIdArrayQuery'\n      - $ref: '#/components/parameters/AssetIdArrayQuery'\n    get:\n      tags:\n        - Collection\n      summary: Return the status statistics for the specified Collection\n      operationId: getStatusByCollection\n      responses:\n        '200':\n          description: CollectionStatus response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CollectionStatus'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n  '/collections/{collectionId}/stigs':\n    parameters:\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/LabelIdQuery'\n    get:\n      tags:\n        - Collection\n      summary: Return the STIGs mapped in the specified Collection\n      operationId: getStigsByCollection\n      responses:\n        '200':\n          description: Collection STIGs array response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CollectionStig'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n  '/collections/{collectionId}/stigs/{benchmarkId}/assets':\n    parameters:\n      - $ref: '#/components/parameters/ElevateQuery'\n      - $ref: '#/components/parameters/CollectionIdPath'\n      - $ref: '#/components/parameters/BenchmarkIdPath'\n      - $ref: '#/components/parameters/StigAssetsProjectionQuery'\n    get:\n      tags:\n        - Asset\n        - Collection\n      summary: Get the Assets in a Collection attached to a STIG\n      description: ''\n      operationId: getAssetsByStig\n      parameters:\n        - $ref: '#/components/parameters/LabelIdQuery'\n      responses:\n        '200':\n          description: AssetBasicProjected response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AssetBasicProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection:read'\n    put:\n      tags:\n        - Asset\n        - Collection\n      summary: Set the Assets mapped to a STIG\n      description: ''\n      operationId: attachAssetsToStig\n      requestBody:\n        required: true\n        description: A list of assetIds from the specified Collection\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n      responses:\n        '200':\n          description: AssetBasicProjected response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AssetBasicProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:collection'\n  /op/appdata:\n    get:\n      tags:\n        - Operation\n      summary: Export application data\n      operationId: getAppData\n      parameters:\n        - $ref: '#/components/parameters/ElevateQuery'\n      responses:\n        '200':\n          description: Exported data\n          content:\n            application/json:\n              schema:\n                type: object\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - stig-manager:op:read\n    post:\n      tags:\n        - Operation\n      summary: Import and overwrite application data\n      operationId: replaceAppData\n      parameters:\n        - $ref: '#/components/parameters/ElevateQuery'\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                collections:\n                  type: string\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                importFile:\n                  type: string\n                  format: binary\n      responses:\n        '200':\n          description: Import successful\n          content:\n            application/json:\n              schema:\n                type: object\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - stig-manager:op\n  /op/configuration:\n    get:\n      tags:\n        - Operation\n      summary: Return API version and configuration information\n      operationId: getConfiguration\n      security: []\n      responses:\n        '200':\n          description: Configuration response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiConfiguration'\n  /op/definition:\n    get:\n      tags:\n        - Operation\n      summary: Return the API definition\n      operationId: getDefinition\n      security: []\n      parameters:\n        - $ref: '#/components/parameters/JsonPathQuery'\n      responses:\n        '200':\n          description: Definition response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiDefinition'\n  /op/details:\n    get:\n      tags:\n        - Operation\n      summary: Return deployment details\n      operationId: getDetails\n      parameters:\n        - $ref: '#/components/parameters/ElevateQuery'\n      responses:\n        '200':\n           description: Detail response\n           content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Detail'\n      security:\n        - oauth:\n            - stig-manager:op:read\n  /stigs:\n    get:\n      tags:\n        - STIG\n      summary: Return a list of available STIGs\n      operationId: getSTIGs\n      parameters:\n        - name: title\n          in: query\n          description: A string found anywhere in a STIG title\n          schema:\n            type: string\n      responses:\n        '200':\n          description: STIG response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/STIG'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig:read'\n    post:\n      tags:\n        - STIG\n      summary: Import a STIG or SCAP Benchmark\n      operationId: importBenchmark\n      requestBody:\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                importFile:\n                  type: string\n                  format: binary\n      responses:\n        '200':\n          description: The added STIG\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/STIGPostResponse'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig'\n  '/stigs/ccis/{cci}':\n    get:\n      tags:\n        - STIG\n      summary: Return data for the specified CCI\n      operationId: getCci\n      parameters:\n        - $ref: '#/components/parameters/CciProjectionQuery'\n        - name: cci\n          in: path\n          description: A path parameter that identifies a CCI\n          required: true\n          schema:\n            pattern: ^[0-9]{6}$\n            type: string\n      responses:\n        '200':\n          description: CCI response\n          content:\n            application/json:\n              schema:\n                  $ref: '#/components/schemas/Cci'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig:read'\n  '/stigs/rules/{ruleId}':\n    get:\n      tags:\n        - STIG\n      summary: Return the defintion and associated checks and fixes for the specified Rule\n      operationId: getRuleByRuleId\n      parameters:\n        - $ref: '#/components/parameters/RuleProjectionQuery'\n        - name: ruleId\n          in: path\n          description: A path parameter that identifies a Rule\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Rule response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RuleProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig:read'\n  '/stigs/scap-maps':\n    get:\n      tags:\n        - STIG\n      summary: Return a list of SCAP benchmarkIds mapped to Manual benchmarkIds\n      operationId: getScapMap\n      responses:\n        '200':\n          description: SCAP Map response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SCAPMap'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig:read'\n  '/stigs/{benchmarkId}':\n    get:\n      tags:\n        - STIG\n      summary: Return properties of the specified STIG\n      operationId: getStigById\n      parameters:\n        - name: benchmarkId\n          in: path\n          description: A path parameter that identifies a STIG\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: STIG response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/STIG'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig:read'\n    delete:\n      tags:\n        - STIG\n      summary: Deletes a STIG (*** and all revisions ***)\n      operationId: deleteStigById\n      parameters:\n        - name: benchmarkId\n          in: path\n          description: A path parameter that identifies a STIG\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The deleted STIG\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/STIG'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig'\n      x-rbac:\n        - admin\n  '/stigs/{benchmarkId}/revisions':\n    get:\n      tags:\n        - STIG\n      summary: Return a list of revisions for the specified STIG\n      operationId: getRevisionsByBenchmarkId\n      parameters:\n        - name: benchmarkId\n          in: path\n          description: A path parameter that identifies a STIG\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Revision response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Revision'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig:read'\n  '/stigs/{benchmarkId}/revisions/{revisionStr}':\n    get:\n      tags:\n        - STIG\n      summary: Return metadata for the specified revision of a STIG\n      operationId: getRevisionByString\n      parameters:\n        - name: benchmarkId\n          in: path\n          description: A path parameter that identifies a STIG\n          required: true\n          schema:\n            type: string\n        - name: revisionStr\n          in: path\n          description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]\n          required: true\n          schema:\n            pattern: ^(V\\d+R\\d+(\\.\\d+)?|latest)$\n            type: string\n      responses:\n        '200':\n          description: Revision response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Revision'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig:read'\n    delete:\n      tags:\n        - STIG\n      summary: Deletes the specified revision of a STIG\n      operationId: deleteRevisionByString\n      parameters:\n        - name: benchmarkId\n          in: path\n          description: A path parameter that identifies a STIG\n          required: true\n          schema:\n            type: string\n        - name: revisionStr\n          in: path\n          description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]\n          required: true\n          schema:\n            pattern: ^(V\\d+R\\d+(\\.\\d+)?)$\n            type: string\n      responses:\n        '200':\n          description: The deleted Revision\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Revision'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig'\n      x-rbac:\n        - admin\n  '/stigs/{benchmarkId}/revisions/{revisionStr}/ccis':\n    get:\n      tags:\n        - STIG\n      summary: Return a list of CCIs from a STIG revision\n      operationId: getCcisByRevision\n      parameters:\n        - name: benchmarkId\n          in: path\n          description: A path parameter that identifies a STIG\n          required: true\n          schema:\n            type: string\n        - name: revisionStr\n          in: path\n          description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]\n          required: true\n          schema:\n            pattern: ^(V\\d+R\\d+(\\.\\d+)?|latest)$\n            type: string\n      responses:\n        '200':\n          description: CCI response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CciListItem'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig:read'\n  '/stigs/{benchmarkId}/revisions/{revisionStr}/groups':\n    get:\n      tags:\n        - STIG\n      summary: Return the list of groups for the specified revision of a STIG.\n      operationId: getGroupsByRevision\n      parameters:\n        - $ref: '#/components/parameters/GroupProjectionQuery'\n        - name: benchmarkId\n          in: path\n          description: A path parameter that identifies a STIG\n          required: true\n          schema:\n            type: string\n        - name: revisionStr\n          in: path\n          description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]\n          required: true\n          schema:\n            pattern: ^(V\\d+R\\d+(\\.\\d+)?|latest)$\n            type: string\n      responses:\n        '200':\n          description: GroupProjected response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroupProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig:read'\n  '/stigs/{benchmarkId}/revisions/{revisionStr}/groups/{groupId}':\n    get:\n      tags:\n        - STIG\n      summary: Return the rules, checks and fixes for a Group from a specified revision of a STIG.\n      description: None\n      operationId: getGroupByRevision\n      parameters:\n        - $ref: '#/components/parameters/GroupProjectionQuery'\n        - name: benchmarkId\n          in: path\n          description: A path parameter that identifies a STIG\n          required: true\n          schema:\n            type: string\n        - name: revisionStr\n          in: path\n          description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]\n          required: true\n          schema:\n            pattern: ^(V\\d+R\\d+(\\.\\d+)?|latest)$\n            type: string\n        - name: groupId\n          in: path\n          description: A path parameter that identifies a Group\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Group response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig:read'\n  '/stigs/{benchmarkId}/revisions/{revisionStr}/rules':\n    get:\n      tags:\n        - STIG\n      summary: Return rule data for the specified revision of a STIG.\n      operationId: getRulesByRevision\n      parameters:\n        - $ref: '#/components/parameters/RuleProjectionQuery'\n        - name: benchmarkId\n          in: path\n          description: A path parameter that identifies a STIG\n          required: true\n          schema:\n            type: string\n        - name: revisionStr\n          in: path\n          description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]\n          required: true\n          schema:\n            pattern: ^(V\\d+R\\d+(\\.\\d+)?|latest)$\n            type: string\n      responses:\n        '200':\n          description: Rule response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RuleProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig:read'\n  '/stigs/{benchmarkId}/revisions/{revisionStr}/rules/{ruleId}':\n    get:\n      tags:\n        - STIG\n      summary: Return rule data for the specified Rule in a revision of a STIG.\n      operationId: getRuleByRevision\n      parameters:\n        - $ref: '#/components/parameters/RuleProjectionQuery'\n        - name: benchmarkId\n          in: path\n          description: A path parameter that identifies a STIG\n          required: true\n          schema:\n            type: string\n        - name: revisionStr\n          in: path\n          description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]\n          required: true\n          schema:\n            pattern: ^(V\\d+R\\d+(\\.\\d+)?|latest)$\n            type: string\n        - name: ruleId\n          in: path\n          description: A path parameter that identifies a Rule\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: RuleProjected response\n          content:\n            application/json:\n              schema:\n                  $ref: '#/components/schemas/RuleProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:stig:read'\n  /user:\n    get:\n      tags:\n        - User\n      summary: Return the requester's user information\n      operationId: getUserObject\n      responses:\n        '200':\n          description: User response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:user:read'\n  /users:\n    parameters:\n      - $ref: '#/components/parameters/ElevateQuery'\n      - $ref: '#/components/parameters/UserProjectionQuery'\n    get:\n      tags:\n        - User\n      summary: Return a list of Users accessible to the requester\n      operationId: getUsers\n      parameters:\n      - $ref: '#/components/parameters/UsernameQuery'\n      - $ref: '#/components/parameters/UsernameMatchQuery'\n      responses:\n        '200':\n          description: UserProjected array response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:user:read'\n    post:\n      tags:\n        - User\n      summary: Create a User\n      operationId: createUser\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserCreateOrReplace'\n      responses:\n        '201':\n          description: UserProjected response\n          content:\n            application/json:\n              schema:\n                  $ref: '#/components/schemas/UserProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:user'\n  '/users/{userId}':\n    parameters:\n      - $ref: '#/components/parameters/ElevateQuery'\n      - $ref: '#/components/parameters/UserProjectionQuery'\n      - $ref: '#/components/parameters/UserIdPath'\n    get:\n      tags:\n        - User\n      summary: Return a User\n      operationId: getUserByUserId\n      responses:\n        '200':\n          description: UserProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:user:read'\n    patch:\n      tags:\n        - User\n      summary: Merge provided properties with a User\n      operationId: updateUser\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserUpdate'\n      responses:\n        '200':\n          description: UserProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:user'\n    put:\n      tags:\n        - User\n      summary: Set all properties of a User\n      operationId: replaceUser\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserCreateOrReplace'\n      responses:\n        '200':\n          description: UserProjected response\n          content:\n            application/json:\n              schema:\n                  $ref: '#/components/schemas/UserProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:user'\n    delete:\n      tags:\n        - User\n      summary: Delete a User\n      operationId: deleteUser\n      responses:\n        '200':\n          description: UserProjected response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserProjected'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n        - oauth:\n            - 'stig-manager:user'\ncomponents:\n  schemas:\n    AccessLevel:\n      type: integer\n      minimum: 1\n      maximum: 3\n    ApiConfiguration:\n      type: object\n      additionalProperties: false\n      properties:\n        classification:\n          type: string\n          enum:\n            - NONE\n            - U\n            - FOUO\n            - CUI\n            - C\n            - S\n            - TS\n            - SCI\n        commit:\n          type: object\n          properties:\n            branch:\n              type: string\n            sha:\n              type: string\n            tag:\n              type: string\n            describe:\n              type: string\n        version:\n          type: string\n    ApiDefinition:\n      oneOf:\n        - type: object\n        - type: array\n    Asset:\n      type: object\n      required:\n        - assetId\n        - name\n        - fqdn\n        - collection\n        - description\n        - ip\n        - mac\n        - noncomputing\n        # - metadata\n      additionalProperties: false\n      properties:\n        assetId:\n          readOnly: true\n          type: string\n        name:\n          type: string\n          nullable: false\n          maxLength: 255\n        fqdn:\n          type: string\n          nullable: true\n          maxLength: 255\n        collection:\n          $ref: '#/components/schemas/CollectionBasic'\n        description:\n          type: string\n          nullable: true\n          maxLength: 255\n        ip:\n          type: string\n          nullable: true\n          maxLength: 255\n        labelIds:\n          type: array\n          items:\n            $ref: '#/components/schemas/LabelId'\n        mac:\n          type: string\n          nullable: true\n          maxLength: 255\n        noncomputing:\n          type: boolean\n        metadata:\n          $ref: '#/components/schemas/Metadata'  \n    AssetBasic:\n      type: object\n      required:\n        - assetId\n        - name\n      additionalProperties: false\n      properties:\n        assetId:\n          type: string\n        name:\n          type: string\n    AssetBasicProjected:\n      type: object\n      required:\n        - assetId\n        - name\n      additionalProperties: false\n      properties:\n        assetId:\n          type: string\n        name:\n          type: string\n        collectionId:\n          type: string  #This is redundant except when in response to a request that changed an Asset's collection. \n        assetLabelIds:\n          type: array\n          items:\n            $ref: '#/components/schemas/LabelId'          \n        restrictedUserAccess:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserBasic'\n    AssetCreateOrReplace:\n      type: object\n      required:\n        - name\n        - collectionId\n        - description\n        - ip\n        - noncomputing\n        - metadata\n        - stigs\n      additionalProperties: false\n      properties:\n        name:\n          type: string\n          nullable: false\n          maxLength: 255\n        fqdn:\n          type: string\n          nullable: true\n          maxLength: 255\n        collectionId:\n          description: The collectionId mapped to this Asset\n          type: string\n        description:\n          type: string\n          nullable: true\n          maxLength: 255\n        ip:\n          type: string\n          nullable: true\n          maxLength: 255\n        labelIds:\n          type: array\n          items:\n            $ref: '#/components/schemas/LabelId'\n        mac:\n          type: string\n          nullable: true\n          maxLength: 255\n        noncomputing:\n          type: boolean\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        stigs:\n          description: The benchmarkIds mapped to this Asset\n          type: array\n          items:\n            type: string\n    AssetForCollection:\n      type: object\n      additionalProperties: false\n      properties:\n        assetId:\n          type: string\n        name:\n          type: string\n    AssetProjected:\n      type: object\n      required:\n        - assetId\n        - name\n        - fqdn\n        - collection\n        - description\n        - ip\n        - mac\n        - noncomputing\n        - labelIds\n      additionalProperties: false\n      properties:\n        assetId:\n          readOnly: true\n          type: string\n        name:\n          type: string\n          nullable: false\n          maxLength: 255\n        fqdn:\n          type: string\n          nullable: true\n          maxLength: 255\n        collection:\n          $ref: '#/components/schemas/CollectionBasic'\n        description:\n          type: string\n          nullable: true\n          maxLength: 255\n        ip:\n          type: string\n          nullable: true\n          maxLength: 255\n        labelIds:\n          type: array\n          items:\n            $ref: '#/components/schemas/LabelId'\n        mac:\n          type: string\n          nullable: true\n          maxLength: 255\n        noncomputing:\n          type: boolean\n        metadata:\n          $ref: '#/components/schemas/Metadata'    \n        statusStats:\n          type: object\n          additionalProperties: false\n          properties:\n            stigCount:\n              type: integer\n            stigAssignedCount:\n              type: integer\n            ruleCount:\n              type: integer\n              nullable: true\n            acceptedCount:\n              type: integer\n              nullable: true\n            rejectedCount:\n              type: integer\n              nullable: true\n            submittedCount:\n              type: integer\n              nullable: true\n            savedCount:\n              type: integer\n              nullable: true\n            minTs:\n              type: string\n              format: date-time\n              nullable: true\n            maxTs:\n              type: string\n              format: date-time\n              nullable: true\n        stigs:\n          type: array\n          description: The benchmarkIds mapped to this Asset\n          items:\n            $ref: '#/components/schemas/STIG'\n        stigGrants:\n          type: array\n          items:\n            $ref: '#/components/schemas/StigGrantProjected'          \n    AssetUpdate:\n      additionalProperties: false\n      properties:\n        name:\n          type: string\n          nullable: false\n          maxLength: 255\n        fqdn:\n          type: string\n          nullable: true\n          maxLength: 255\n        collectionId:\n          description: The collectionId mapped to this Asset\n          type: string\n        description:\n          type: string\n          nullable: true\n          maxLength: 255\n        ip:\n          type: string\n          nullable: true\n          maxLength: 255\n        labelIds:\n          type: array\n          items:\n            $ref: '#/components/schemas/LabelId'\n        mac:\n          type: string\n          nullable: true\n          maxLength: 255\n        noncomputing:\n          type: boolean\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        stigs:\n          description: The benchmarkIds mapped to this Asset\n          type: array\n          items:\n            type: string\n    BenchmarkId:\n        type: string           \n    Cci:\n      type: object\n      additionalProperties: false\n      properties:\n        cci:\n          type: string\n        status:\n          type: string\n        publishdate:\n          type: string\n          format: date-time\n        contributor:\n          type: string\n        type:\n          type: string\n        definition:\n          type: string\n        emassAp:\n          $ref: '#/components/schemas/EmassAp'\n        references:\n          type: array\n          items:\n            $ref: '#/components/schemas/CciReferenceItem'\n        stigs:\n          type: array\n          items:\n            $ref: '#/components/schemas/RevisionBasic'\n    CciBasic:\n      type: object\n      additionalProperties: false\n      properties:\n        cci:\n          type: string\n        apAcronym:\n          type: string\n        definition:\n          type: string\n    CciListItem:\n      type: object\n      additionalProperties: false\n      properties:\n        cci:\n          type: string\n        type:\n          type: string\n        references:\n          type: array\n          items:\n            $ref: '#/components/schemas/CciReferenceItem'\n    CciReferenceItem:\n      type: object\n      additionalProperties: false\n      properties:\n        creator:\n          type: string\n        title:\n          type: string\n        version:\n          type: string\n        location:\n          type: string\n        indexDisa:\n          type: string\n        textRefNist:\n          type: string\n        parentControl:\n          type: string\n    CciReferenceRev4:\n      type: object\n      additionalProperties: false\n      properties:\n        indexDisa:\n          type: string\n        textRefNist:\n          type: string\n        parentControl:\n          type: string\n    Check:\n      type: object\n      additionalProperties: false\n      properties:\n        checkId:\n          type: string\n        content:\n          type: string\n    ChecklistAssetStig:\n      type: object\n      additionalProperties: false  \n      properties:\n        assetId:\n          type: string\n        ruleId:\n          type: string\n        ruleTitle:\n          type: string\n        groupId:\n          type: string\n        groupTitle:\n          type: string\n        severity:\n          $ref: '#/components/schemas/RuleSeverity'\n        result:\n          $ref: '#/components/schemas/ChecklistResult'\n        resultEngine:\n          $ref: '#/components/schemas/ResultEngine'\n        autoResult:\n          type: boolean\n        autoCheckAvailable:\n          type: boolean\n        status:\n          $ref: '#/components/schemas/ChecklistStatus'\n    ChecklistCkl:\n      type: object\n      description: The CKL format generated and read by DISA STIG VIewer\n      xml:\n        name: CHECKLIST\n      additionalProperties: false\n      properties:\n        ASSET:\n          type: object\n          additionalProperties: false\n          properties:\n            ASSET_TYPE:\n              type: string\n            HOST_NAME:\n              type: string\n            HOST_IP:\n              type: string\n            HOST_MAC:\n              type: string\n            HOST_GUID:\n              type: string\n            HOST_FQDN:\n              type: string\n            TECH_AREA:\n              type: string\n            TARGET_KEY:\n              type: string\n        STIGS:\n          type: object\n          additionalProperties: false\n          properties:\n            iSTIG:\n              type: array\n              items:\n                type: object\n                properties:\n                  STIG_INFO:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        SI_DATA:\n                          type: object\n                          properties:\n                            SID_NAME:\n                              type: string\n                            SID_DATA:\n                              type: string\n                  VULN:\n                    type: array\n                    items:\n                      type: object\n                      additionalProperties: false\n                      properties:\n                        STIG_DATA:\n                          type: array\n                          items:\n                            type: object\n                            properties:\n                              VULN_ATTRIBUTE:\n                                type: string\n                              ATTRIBUTE_DATA:\n                                type: string\n                        STATUS:\n                          type: string\n                          enum:\n                            - Open\n                            - NotAFinding\n                            - Not_Applicable\n                            - Not_Reviewed\n                        FINDING_DETAILS:\n                          type: string\n                        COMMENTS:\n                          type: string\n                        SEVERITY_OVERRIDE:\n                          type: string\n                        SEVERITY_JUSTIFICATION:\n                          type: string\n    ChecklistCollectionStig:\n      type: object\n      additionalProperties: false\n      properties:\n        ruleId:\n          type: string\n        ruleTitle:\n          type: string\n        groupId:\n          type: string\n        groupTitle:\n          type: string\n        severity:\n          $ref: '#/components/schemas/RuleSeverity'\n        autoCheckAvailable:\n          type: boolean\n        counts:\n          type: object\n          additionalProperties: false\n          properties:\n            results:\n              type: object\n              properties:\n                pass:\n                  type: integer\n                fail:\n                  type: integer\n                notapplicable:\n                  type: integer\n                notchecked:\n                  type: integer\n            statuses:\n              type: object\n              additionalProperties: false\n              properties:\n                saved:\n                  type: integer\n                submitted:\n                  type: integer\n                accepted:\n                  type: integer\n                rejected:\n                  type: integer\n    ChecklistResult:\n      description: The Review result\n      type: string\n      nullable: true\n      enum:\n        - fail\n        - pass\n        - notapplicable\n        - notchecked\n        - unknown\n        - error\n        - notselected\n        - informational\n        - fixed\n        - null\n    ChecklistStatus:\n      type: string\n      nullable: true\n      enum:\n        - saved\n        - submitted\n        - accepted\n        - rejected\n        - null\n    ClientErrorDuplicateAsset:\n      type: object\n      additionalProperties: false\n      properties:\n        code:\n          type: integer\n          enum:\n            - 400\n        message:\n          type: string\n          enum:\n            - 'Duplicate name'\n        data:\n          $ref: '#/components/schemas/Asset'\n    ClientErrorDuplicateCollection:\n      type: object\n      additionalProperties: false\n      properties:\n        code:\n          type: integer\n          enum:\n            - 400\n        message:\n          type: string\n          enum:\n            - 'Duplicate name'\n        data:\n          $ref: '#/components/schemas/Collection'\n    Collection:\n      type: object\n      required:\n        - collectionId\n        - name\n        - description\n        - settings\n        - metadata\n        - created   \n      additionalProperties: false\n      properties:\n        collectionId:\n          readOnly: true\n          type: string\n          nullable: false\n        name:\n          type: string\n        description:\n          type: string\n          nullable: true\n        settings:\n          $ref: '#/components/schemas/CollectionSettings'\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        created:\n          type: string\n          format: date-time    \n    CollectionBasic:\n      type: object\n      additionalProperties: false\n      properties:\n        collectionId:\n          type: string\n        name:\n          type: string\n    CollectionCreateOrReplace:\n      type: object\n      required:\n        - name\n        - settings\n        - metadata\n        - grants\n      additionalProperties: false\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n          nullable: true\n        settings:\n          $ref: '#/components/schemas/CollectionSettings'\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        grants:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserGrant'\n        labels:\n          type: array\n          items:\n            $ref: '#/components/schemas/LabelCreate'\n    CollectionFieldEnabledAlways:\n      type: object\n      additionalProperties: false\n      required:\n        - enabled\n        - required\n      properties:\n        enabled:\n          type: string\n          enum:\n            - always\n        required:\n          type: string\n          enum:\n            - always\n            - findings\n            - optional\n    CollectionFieldEnabledFindings:\n      type: object\n      additionalProperties: false\n      required:\n        - enabled\n        - required\n      properties:\n        enabled:\n          type: string\n          enum:\n            - findings\n        required:\n          type: string\n          enum:\n            - findings\n            - optional\n    CollectionFieldSetting:\n      type: object\n      oneOf:\n        - $ref: '#/components/schemas/CollectionFieldEnabledAlways'\n        - $ref: '#/components/schemas/CollectionFieldEnabledFindings'\n      example:   # Sample object\n        enabled: 'always'\n        required: 'findings'\n    CollectionFieldSettings:\n      type: object\n      additionalProperties: false\n      required:\n        - detail\n        - comment\n      properties:\n        detail:\n          $ref: '#/components/schemas/CollectionFieldSetting'\n        comment:\n          $ref: '#/components/schemas/CollectionFieldSetting'\n    CollectionGrant:\n      type: object\n      required:\n        - collectionId\n        - accessLevel\n      additionalProperties: false\n      properties:\n        collectionId:\n          type: string\n        accessLevel:\n          type: integer\n    CollectionGrantProjected:\n      type: object\n      additionalProperties: false\n      properties:\n        collection:\n          type: object\n          properties:\n            collectionId:\n              type: string\n            name:\n              type: string\n        accessLevel:\n          type: integer\n    CollectionProjected:\n      type: object\n      required:\n        - collectionId\n        - name\n        - description\n        - settings\n        - metadata\n      additionalProperties: false\n      properties:\n        collectionId:\n          readOnly: true\n          type: string\n          nullable: false\n        name:\n          type: string\n        description:\n          type: string\n          nullable: true\n        settings:\n          $ref: '#/components/schemas/CollectionSettings'\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        assets:\n          type: array\n          items:\n            $ref: '#/components/schemas/AssetForCollection'\n        stigs:\n          type: array\n          items:\n            $ref: '#/components/schemas/STIG'\n        grants:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserGrantProjected'     \n        owners:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        labels:\n          type: array\n          items:\n            $ref: '#/components/schemas/Label'\n        statistics:\n          $ref: '#/components/schemas/CollectionStatistics'\n    CollectionsProjected:\n      type: object\n      required:\n        - collectionId\n        - name\n        - description\n        - settings\n        - metadata\n      additionalProperties: false\n      properties:\n        collectionId:\n          readOnly: true\n          type: string\n          nullable: false\n        name:\n          type: string\n        description:\n          type: string\n          nullable: true\n        settings:\n          $ref: '#/components/schemas/CollectionSettings'\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        owners:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        labels:\n          type: array\n          items:\n            $ref: '#/components/schemas/Label'\n        statistics:\n          $ref: '#/components/schemas/CollectionStatistics'\n    CollectionSettings:\n      type: object\n      additionalProperties: false\n      required:\n        - fields\n        - status\n      properties:\n        fields:\n          $ref: '#/components/schemas/CollectionFieldSettings'\n        status:\n          $ref: '#/components/schemas/CollectionStatusSettings'\n    CollectionStatistics:\n      type: object\n      required:\n        - created\n        - assetCount\n        - grantCount\n        - checklistCount\n      additionalProperties: false\n      properties:\n        created:\n          $ref: '#/components/schemas/StringDateTime'\n        assetCount:\n          type: integer     \n        grantCount:\n          type: integer     \n        checklistCount:\n          type: integer                  \n    CollectionStatus:\n      type: object\n      additionalProperties: false\n      properties:\n        assetId:\n          type: string\n        assetName:\n          type: string\n        assetLabelIds:\n          type: array\n          items:\n            $ref: '#/components/schemas/LabelId'          \n        benchmarkId:\n          type: string\n        minTs:\n          type: string\n          format: date-time\n          nullable: true\n        maxTs:\n          type: string\n          format: date-time\n          nullable: true\n        rules:\n          $ref: '#/components/schemas/CollectionStatusCount'\n        findings:\n          type: object\n          properties:\n            low:\n              type: integer\n            medium:\n              type: integer\n            high:\n              type: integer\n        status:\n          type: object\n          properties:\n            saved:\n              $ref: '#/components/schemas/CollectionStatusCount'\n            submitted:\n              $ref: '#/components/schemas/CollectionStatusCount'\n            rejected:\n              $ref: '#/components/schemas/CollectionStatusCount'\n            accepted:\n              $ref: '#/components/schemas/CollectionStatusCount'\n    CollectionStatusCount:\n      type: object\n      additionalProperties: false\n      properties:\n        total:\n          type: integer\n        auto:\n          type: integer\n    CollectionStatusSettings:\n      type: object\n      additionalProperties: false\n      required:\n        - canAccept\n        - minAcceptGrant\n        - resetCriteria\n      properties:\n        canAccept:\n          type: boolean\n        minAcceptGrant:\n          type: integer\n          minimum: 2\n          maximum: 4\n          example: 2\n        resetCriteria:\n          type: string\n          enum:\n            - any\n            - result\n          example: 'result'\n    CollectionStig:\n      type: object\n      additionalProperties: false\n      properties:\n        benchmarkId:\n          type: string\n        title:\n          type: string\n        lastRevisionStr:\n          type: string\n        lastRevisionDate:\n          type: string\n          format: date\n          nullable: true\n        ruleCount:\n          type: integer\n        assetCount:\n          type: integer\n        acceptedCount:\n          type: integer\n        rejectedCount:\n          type: integer\n        submittedCount:\n          type: integer\n        savedCount:\n          type: integer\n        minTs:\n          type: string\n          format: date-time\n          nullable: true\n        maxTs:\n          type: string\n          format: date-time\n          nullable: true\n    CollectionUpdate:\n      type: object\n      additionalProperties: false\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n          nullable: true\n        settings:\n          $ref: '#/components/schemas/CollectionSettings'\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        grants:\n          type: array\n          items:\n            type: object\n            properties:\n              userId:\n                type: string\n              accessLevel:\n                type: integer\n    Date:\n      type: string\n      format: date\n      # pattern: '^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[0-1])$'        \n    Detail:\n      type: object\n      properties:\n        dbInfo:\n          $ref: '#/components/schemas/DetailMySqlInfo'\n        assetStig:\n          type: array\n          items:\n            $ref: '#/components/schemas/DetailAssetStig'\n    DetailAssetStig:\n      type: object\n      additionalProperties: false\n      properties:\n        collectionId:\n          $ref: '#/components/schemas/StringUuid'\n        assetCnt:\n          type: integer\n        range01to05:\n          type: integer\n        range06to10:\n          type: integer\n        range11to15:\n          type: integer\n        range16plus:\n          type: integer\n    DetailMySqlInfo:\n      type: object\n      properties:\n        tables:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/DetailMySqlTableInfo'\n    DetailMySqlTableInfo:\n      type: object\n      additionalProperties: false\n      properties:\n        tableName:\n          type: string\n        tableRows:\n          type: integer\n          nullable: true\n        tableCollation:\n          type: string\n          nullable: true\n        avgRowLength:\n          type: integer\n          nullable: true\n        dataLength:\n          type: integer\n          nullable: true\n        maxDataLength:\n          type: integer\n          nullable: true\n        indexLength:\n          type: integer\n          nullable: true\n        autoIncrement:\n          type: integer\n          nullable: true\n        createTime:\n          $ref: '#/components/schemas/StringDateTimeNullable'\n        updateTime:\n          $ref: '#/components/schemas/StringDateTimeNullable'\n    EmassAp:\n      type: object\n      nullable: true\n      additionalProperties: false\n      properties:\n        apAcronym:\n          type: string\n        implementation:\n          type: string\n        assessmentProcedure:\n          type: string\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n        detail:\n          type: string          \n    FindingProjected:\n      type: object\n      additionalProperties: false\n      properties:\n        assetCount:\n          type: integer\n        ruleId:\n          type: string      \n        groupId:\n          type: string\n        cci:\n          type: string\n        title:\n          type: string\n        definition:\n          type: string              \n        apAcronym:\n          type: string          \n        severity:\n          $ref: '#/components/schemas/RuleSeverity'\n        assets:\n          type: array\n          items:\n            $ref: '#/components/schemas/AssetBasic'\n        ccis:\n          type: array\n          items:\n            $ref: '#/components/schemas/CciBasic'            \n        groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupProjected'\n        rules:\n          type: array\n          items:\n            $ref: '#/components/schemas/RuleAbbr'      \n        stigs:\n          type: array\n          items:\n            $ref: '#/components/schemas/BenchmarkId'                              \n    Fix:\n      type: object\n      additionalProperties: false\n      properties:\n        fixId:\n          type: string\n        text:\n          type: string\n    GroupProjected:\n      type: object\n      additionalProperties: false\n      properties:\n        groupId:\n          type: string\n        title:\n          type: string\n        severity:\n          type: string          \n        rules:\n            type: array\n            items:\n              $ref: '#/components/schemas/RuleAbbr'\n    Label:\n      type: object\n      additionalProperties: false\n      required:\n        - name\n        - description\n        - color\n        - labelId\n        - uses\n      properties:\n        labelId:\n          $ref: '#/components/schemas/LabelId'\n        name:\n          $ref: '#/components/schemas/LabelName'\n        description:\n          $ref: '#/components/schemas/String255Nullable'\n        color:\n          $ref: '#/components/schemas/StringHexColor'\n        uses:\n          type: integer\n    LabelCreate:\n      type: object\n      additionalProperties: false\n      required:\n        - name\n        - description\n        - color\n      properties:\n        name:\n          $ref: '#/components/schemas/LabelName'\n        description:\n          $ref: '#/components/schemas/String255Nullable'\n        color:\n          $ref: '#/components/schemas/StringHexColor'\n    LabelId:\n      $ref: '#/components/schemas/StringUuid'\n    LabelName:\n      type: string\n      minLength: 1\n      maxLength: 16\n    LabelUpdate:\n      type: object\n      additionalProperties: false\n      properties:\n        name:\n          $ref: '#/components/schemas/LabelName'\n        description:\n          $ref: '#/components/schemas/String255Nullable'\n        color:\n          $ref: '#/components/schemas/StringHexColor'\n    Metadata:\n      type: object\n      additionalProperties:\n        type: string\n    MetadataKey:\n      type: string\n    MetadataValue:\n      type: string\n    ResultEngine:\n      type: object\n      nullable: true\n      additionalProperties: false\n      properties:\n        type:\n          $ref: '#/components/schemas/ResultEngineType'\n        product:\n          $ref: '#/components/schemas/String255'\n        version:\n          $ref: '#/components/schemas/String255'\n        time:\n          $ref: '#/components/schemas/StringDateTime'\n        checkContent:\n          $ref: '#/components/schemas/ResultEngineCheckContent'\n        overrides:\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/ResultEngineOverride'\n      required:\n        - product\n        - type\n    ResultEngineCheckContent:\n      type: object\n      additionalProperties: false\n      nullable: true\n      properties:\n        location:\n          $ref: '#/components/schemas/String255'\n        component:\n          $ref: '#/components/schemas/String255'\n      required:\n        - location\n    ResultEngineOverride:\n      type: object\n      additionalProperties: false\n      properties:\n        authority:\n          $ref: '#/components/schemas/String255'\n        oldResult:\n          $ref: '#/components/schemas/ReviewResult'\n        newResult:\n          $ref: '#/components/schemas/ReviewResult'\n        remark:\n          $ref: '#/components/schemas/String255'\n        time:\n          $ref: '#/components/schemas/StringDateTime'\n      required:\n        - authority\n        - oldResult\n        - newResult\n    ResultEngineType:\n      type: string\n      enum:\n        - scap\n        - script\n        - other\n    ReviewAsset:\n      type: object\n      required:\n        - ruleId\n        - result\n        - detail\n        - comment\n        - status\n        - userId\n        - username\n        - ts\n        - touchTs\n      properties:\n        ruleId:\n          $ref: '#/components/schemas/String255'\n        result:\n          $ref: '#/components/schemas/ReviewResult'\n        resultEngine:\n          $ref: '#/components/schemas/ResultEngine'\n        detail:\n          $ref: '#/components/schemas/StringMaxNullable'\n        comment:\n          $ref: '#/components/schemas/StringMaxNullable'\n        autoResult:\n          type: boolean\n        status:\n          $ref: '#/components/schemas/ReviewStatusRead'\n        userId:\n          $ref: '#/components/schemas/StringUuid'\n        username:\n          $ref: '#/components/schemas/String255'\n        ts:\n          $ref: '#/components/schemas/StringDateTime'\n        touchTs:\n          $ref: '#/components/schemas/StringDateTime'\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        history:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReviewHistory'\n        stigs:\n          type: array\n          items:\n            type: string\n        rule:\n          $ref: '#/components/schemas/RuleAbbr'\n    ReviewAssetRulePatch:\n      type: object\n      additionalProperties: false\n      properties:\n        result:\n          $ref: '#/components/schemas/ReviewResult'\n        detail:\n          $ref: '#/components/schemas/StringMax'\n        comment:\n          $ref: '#/components/schemas/StringMax'\n        autoResult:\n          type: boolean\n        resultEngine:\n          $ref: '#/components/schemas/ResultEngine'\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        status:\n          $ref: '#/components/schemas/ReviewStatusWrite'\n    ReviewAssetRulePut:\n      type: object\n      required:\n        - result\n        - detail\n        - comment\n      additionalProperties: false\n      properties:\n        result:\n          $ref: '#/components/schemas/ReviewResult'\n        resultEngine:\n          $ref: '#/components/schemas/ResultEngine'\n        detail:\n          $ref: '#/components/schemas/StringMaxNullable'\n        comment:\n          $ref: '#/components/schemas/StringMaxNullable'\n        autoResult:\n          type: boolean\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        status:\n          $ref: '#/components/schemas/ReviewStatusWrite'\n    ReviewAssetRuleRead:\n      type: object\n      required:\n        - result\n        - detail\n        - comment\n        - userId\n        - username\n        - ts\n        - status\n        - touchTs\n      properties:\n        result:\n          $ref: '#/components/schemas/ReviewResult'\n        resultEngine:\n          $ref: '#/components/schemas/ResultEngine'\n        detail:\n          $ref: '#/components/schemas/StringMaxNullable'\n        comment:\n          $ref: '#/components/schemas/StringMaxNullable'\n        autoResult:\n          type: boolean\n        userId:\n          $ref: '#/components/schemas/StringUuid'\n        username:\n          $ref: '#/components/schemas/String255'\n        ts:\n          $ref: '#/components/schemas/StringDateTime'\n        touchTs:\n          $ref: '#/components/schemas/StringDateTime'\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        status:\n          $ref: '#/components/schemas/ReviewStatusRead'\n        history:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReviewHistory'\n        stigs:\n          type: array\n          items:\n            type: string\n        rule:\n          $ref: '#/components/schemas/RuleAbbr'\n    ReviewAssetWrite:\n      type: object\n      required:\n        - ruleId\n        - result\n        - detail\n        - comment\n      additionalProperties: false\n      properties:\n        ruleId:\n          $ref: '#/components/schemas/String255'\n        result:\n          $ref: '#/components/schemas/ReviewResult'\n        resultEngine:\n          $ref: '#/components/schemas/ResultEngine'\n        detail:\n          $ref: '#/components/schemas/StringMaxNullable'\n        comment:\n          $ref: '#/components/schemas/StringMaxNullable'\n        autoResult:\n          type: boolean\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        status:\n          $ref: '#/components/schemas/ReviewStatusWrite'\n    ReviewHistory:\n      type: object\n      required:\n        - result\n        - detail\n        - comment\n        - status\n        - userId\n        - username\n        - ts\n        - touchTs\n      additionalProperties: false\n      properties:\n        result:\n          $ref: '#/components/schemas/ReviewResult'\n        resultEngine:\n          $ref: '#/components/schemas/ResultEngine'\n        detail:\n          $ref: '#/components/schemas/StringMaxNullable'\n        comment:\n          $ref: '#/components/schemas/StringMaxNullable'\n        autoResult:\n          type: boolean\n        status:\n          $ref: '#/components/schemas/ReviewStatusRead'\n        userId:\n          $ref: '#/components/schemas/StringUuid'\n        username:\n          $ref: '#/components/schemas/String255'\n        ts:\n          $ref: '#/components/schemas/StringDateTime'\n        touchTs:\n          $ref: '#/components/schemas/StringDateTime'\n    ReviewHistoryAsset:\n      type: object\n      required:\n        - assetId\n        - reviewHistories\n      additionalProperties: false\n      properties:\n        assetId:\n          $ref: '#/components/schemas/String255'\n        reviewHistories: \n          type: array\n          items:\n            $ref: '#/components/schemas/ReviewHistoryRule'\n    ReviewHistoryRule:\n      type: object\n      required:\n        - ruleId\n        - history\n      additionalProperties: false\n      properties:\n        ruleId:\n          $ref: '#/components/schemas/String255'       \n        history:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReviewHistory'\n\n    ReviewHistoryDeleted:     \n      type: object\n      required:\n        - HistoryEntriesDeleted\n      additionalProperties: false\n      properties:\n        HistoryEntriesDeleted: \n          type: integer   \n    ReviewHistoryStats:\n      type: object\n      required:\n        - collectionHistoryEntryCount\n        - oldestHistoryEntryDate\n      additionalProperties: false\n      properties:\n        collectionHistoryEntryCount: \n          type: integer\n        oldestHistoryEntryDate: \n          $ref: '#/components/schemas/StringDateTime'\n        assetHistoryEntryCounts:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReviewHistoryStatsAsset'\n    ReviewHistoryStatsAsset:\n      type: object\n      required: \n        - assetId\n        - historyEntryCount\n        - oldestHistoryEntry\n      additionalProperties: false\n      properties:\n        assetId:\n          $ref: '#/components/schemas/String255'\n        historyEntryCount:\n          type: integer\n        oldestHistoryEntry:\n          type: string\n          nullable: true\n    ReviewResult:\n      type: string\n      enum:\n        - fail\n        - pass\n        - notapplicable\n        - notchecked\n        - unknown\n        - error\n        - notselected\n        - informational\n        - fixed\n    ReviewStatusLabel:\n      type: string\n      enum:\n        - saved\n        - submitted\n        - accepted\n        - rejected\n    ReviewStatusLabelRestricted:\n      type: string\n      enum:\n        - saved\n        - submitted\n    ReviewStatusWrite:\n      oneOf:\n        - $ref: '#/components/schemas/ReviewStatusLabel'\n        - type: object\n          required:\n            - label\n            - text\n          additionalProperties: false\n          properties:\n            label:\n              $ref: '#/components/schemas/ReviewStatusLabel'\n            text:\n              $ref: '#/components/schemas/String255Nullable'\n    ReviewStatusRestrictedWrite:\n      oneOf:\n        - $ref: '#/components/schemas/ReviewStatusLabelRestricted'\n        - type: object\n          required:\n            - label\n            - text\n          additionalProperties: false\n          properties:\n            label:\n              $ref: '#/components/schemas/ReviewStatusLabelRestricted'\n            text:\n              $ref: '#/components/schemas/String255Nullable'\n    ReviewStatusRead:\n      type: object\n      required:\n        - label\n        - text\n        - user\n        - ts\n      additionalProperties: false\n      properties:\n        label:\n          $ref: '#/components/schemas/ReviewStatusLabel'\n        text:\n          $ref: '#/components/schemas/StringMaxNullable'\n        user:\n          $ref: '#/components/schemas/UserBasic'\n        ts:\n          $ref: '#/components/schemas/StringDateTime'\n    ReviewPostResponse:\n      type: object\n      required:\n        - rejected\n        - affected\n      additionalProperties: false\n      properties:\n        rejected:\n          type: array\n          items:\n            type: object\n            properties:\n              ruleId:\n                $ref: '#/components/schemas/String255'\n              reason:\n                $ref: '#/components/schemas/String255'\n        affected:\n          type: object\n          properties:\n            updated:\n              type: number\n            inserted:\n              type: number\n    ReviewRead:\n      type: object\n      required:\n        - assetId\n        - assetName\n        - ruleId\n        - result\n        - detail\n        - comment\n        - userId\n        - username\n        - ts\n        - touchTs\n        - status\n      additionalProperties: false\n      properties:\n        assetId:\n          $ref: '#/components/schemas/StringUuid'\n        assetName:\n          $ref: '#/components/schemas/String255'\n        assetLabelIds:\n          type: array\n          items:\n            $ref: '#/components/schemas/LabelId'              \n        ruleId:\n          $ref: '#/components/schemas/String255'\n        result:\n          $ref: '#/components/schemas/ReviewResult'\n        resultEngine:\n          $ref: '#/components/schemas/ResultEngine'\n        detail:\n          $ref: '#/components/schemas/StringMaxNullable'\n        comment:\n          $ref: '#/components/schemas/StringMaxNullable'\n        autoResult:\n          type: boolean\n        userId:\n          $ref: '#/components/schemas/StringUuid'\n        username:\n          $ref: '#/components/schemas/String255'\n        ts:\n          $ref: '#/components/schemas/StringDateTime'\n        touchTs:\n          $ref: '#/components/schemas/StringDateTime'\n        metadata:\n          $ref: '#/components/schemas/Metadata'\n        status:\n          $ref: '#/components/schemas/ReviewStatusRead'\n        stigs:\n          type: array\n          items:\n            type: string\n        rule:\n          $ref: '#/components/schemas/RuleAbbr'\n    Revision:\n      type: object\n      required:\n        - benchmarkId\n        - revisionStr\n        - version\n        - release\n        - benchmarkDate\n        - status\n        - statusDate\n        - description\n      additionalProperties: false\n      properties:\n        benchmarkId:\n          type: string\n        revisionStr:\n          type: string\n        version:\n          type: string\n        release:\n          type: string\n        benchmarkDate:\n          type: string\n          format: date\n          nullable: true\n        status:\n          type: string\n          nullable: true\n        statusDate:\n          type: string\n          format: date\n        description:\n          type: string\n    RevisionBasic:\n      type: object\n      required:\n        - benchmarkId\n        - revisionStr      \n      additionalProperties: false\n      properties:\n        benchmarkId:\n          type: string\n        revisionStr:\n          type: string\n    RuleAbbr:\n      type: object\n      required:\n        - ruleId\n        - version\n        - title\n        - severity      \n      additionalProperties: false\n      properties:\n        ruleId:\n          type: string\n        version:\n          type: string\n        title:\n          type: string\n        severity:\n          type: string\n    RuleProjected:\n      type: object\n      required:\n        - ruleId\n        - version\n        - title\n        - severity\n        - groupId\n        - groupTitle\n      additionalProperties: false\n      properties:\n        ruleId:\n          type: string\n        version:\n          type: string\n        title:\n          type: string\n        severity:\n          type: string\n        groupId:\n          type: string\n        groupTitle:\n          type: string\n        detail:\n          type: object\n          additionalProperties: false \n          properties:\n            weight:\n              type: string\n            vulnDiscussion:\n              type: string\n            falsePositives:\n              type: string\n              nullable: true\n            falseNegatives:\n              type: string\n              nullable: true\n            documentable:\n              type: string\n            mitigations:\n              type: string\n              nullable: true\n            severityOverrideGuidance:\n              type: string\n              nullable: true\n            potentialImpacts:\n              type: string\n              nullable: true\n            thirdPartyTools:\n              type: string\n              nullable: true\n            mitigationControl:\n              type: string\n              nullable: true\n            responsibility:\n              type: string   \n              nullable: true           \n        ccis:\n          type: array\n          items:\n            $ref: '#/components/schemas/CciBasic'\n        checks:\n          type: array\n          items:\n            $ref: '#/components/schemas/Check'\n        fixes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Fix'\n    RuleSeverity:\n      type: string\n      enum:\n        - high\n        - medium\n        - low\n    SCAPMap:\n      type: object\n      additionalProperties: false\n      properties:\n        scapBenchmarkId:\n          type: string\n        benchmarkId:\n          type: string\n    STIG:\n      type: object\n      required:\n        - benchmarkId\n        - title\n        - lastRevisionStr\n        - lastRevisionDate\n        - ruleCount\n      additionalProperties: false\n      properties:\n        benchmarkId:\n          type: string\n        title:\n          type: string\n        status:\n          type: string\n          nullable: true\n        lastRevisionStr:\n          type: string\n        lastRevisionDate:\n          type: string\n          format: date\n          nullable: true\n        ruleCount:\n          type: integer\n        autoCount:\n          type: integer\n        revisionStrs:\n          type: array\n          items:\n           type: string\n           pattern: ^V\\d+R\\d+(\\.\\d+)?$     \n    STIGPostResponse:\n      type: object\n    StigAsset:\n      type: object\n      required:\n        - benchmarkId\n        - assetId\n      additionalProperties: false\n      properties:\n        benchmarkId:\n          type: string\n        assetId:\n          type: string\n    StigAssetProjected:\n      type: object\n      required:\n        - benchmarkId\n        - asset\n      additionalProperties: false\n      properties:\n        benchmarkId:\n          type: string\n        asset:\n          $ref: '#/components/schemas/AssetBasic'\n    StigGrantProjected:\n      type: object\n      required:\n        - benchmarkId\n        - users\n      additionalProperties: false\n      properties:\n        benchmarkId:\n          type: string\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserBasic'\n    STIGs:\n      description: List of STIG\n      type: array\n      items:\n        $ref: '#/components/schemas/STIG'\n    String255:\n      type: string\n      maxLength: 255\n    String255Nullable:\n      type: string\n      maxLength: 255\n      nullable: true\n    StringDateTime:\n      type: string\n      format: date-time\n    StringDateTimeNullable:\n      type: string\n      format: date-time\n      nullable: true\n    StringHexColor:\n      type: string\n      pattern: \"^[a-fA-F0-9]{6}$\"\n      example: \"aa33cc\"\n    StringMax:\n      type: string\n      maxLength: 16777215\n    StringMaxNullable:\n      type: string\n      maxLength: 16777215\n      nullable: true\n    StringUuid:\n      type: string\n      maxLength: 36\n    StringUuidReadOnly:\n      type: string\n      maxLength: 36\n      readOnly: true\n    StringUuidNullable:\n      type: string\n      maxLength: 36\n      nullable: true\n    User:\n      type: object\n      required:\n        - userId\n        - username\n        - displayName\n        - email  \n      additionalProperties: false\n      properties:\n        userId:\n          type: string\n          readOnly: true\n        username:\n          type: string\n        displayName:\n          type: string\n          nullable: true\n        email:\n          type: string\n          nullable: true\n    UserProjected:\n      type: object\n      required:\n        - userId\n        - username\n        - displayName\n        - email  \n      additionalProperties: false\n      properties:\n        userId:\n          type: string\n          readOnly: true\n        username:\n          type: string\n        displayName:\n          type: string\n          nullable: true\n        email:\n          type: string\n          nullable: true\n        privileges: \n            $ref: '#/components/schemas/UserPrivileges'\n        collectionGrants:\n          type: array\n          items:\n            $ref: '#/components/schemas/CollectionGrantProjected'\n        statistics:\n          $ref: '#/components/schemas/UserStatistics'          \n    UserBasic:\n      type: object\n      required: \n        - userId\n        - username\n      additionalProperties: false\n      properties:\n        userId:\n          type: string\n          readOnly: true\n        username:\n          type: string\n    UserCreateOrReplace:\n      required:\n        - username\n        - collectionGrants\n      type: object\n      additionalProperties: false\n      properties:\n        username:\n          type: string\n        collectionGrants:\n          type: array\n          items:\n            $ref: '#/components/schemas/CollectionGrant'\n    UserGrant:\n      type: object\n      required:\n        - userId\n        - accessLevel\n      additionalProperties: false\n      properties:\n        userId:\n          type: string\n        accessLevel:\n          type: integer\n          minimum: 1\n          maximum: 4\n    UserGrantProjected:\n      type: object\n      required:\n        - user          \n        - accessLevel\n      additionalProperties: false\n      properties:\n        user:\n          type: object\n          properties:\n            userId:\n              type: string\n            username:\n              type: string\n          required:\n            - userId\n            - username\n        accessLevel:\n          type: integer\n          minimum: 1\n          maximum: 4\n    UserPrivileges: \n      type: object\n      additionalProperties: false\n      properties:\n        canCreateCollection:\n          type: boolean\n        canAdmin:\n          type: boolean          \n    UserStatistics:\n      type: object\n      required: \n        - created\n        - collectionGrantCount\n        - lastAccess\n        - lastClaims\n      additionalProperties: false\n      properties:\n        created:\n          type: string\n          format: date-time\n        collectionGrantCount:\n          type: integer\n        lastAccess:\n          type: integer\n          nullable: true\n        lastClaims:\n          type: object\n    UserUpdate:\n      type: object\n      additionalProperties: false\n      properties:\n        username:\n          type: string\n        collectionGrants:\n          type: array\n          items:\n            $ref: '#/components/schemas/CollectionGrant'\n  parameters:\n    AssetIdArrayQuery:\n      name: assetId\n      in: query\n      description: A query parameter that identifies an Asset\n      schema:\n        type: array\n        items:\n          type: string\n    AssetIdPath:\n      name: assetId\n      in: path\n      description: A path parameter that identifies an Asset\n      required: true\n      schema:\n        type: string\n    AssetIdQuery:\n      name: assetId\n      in: query\n      description: A query parameter that identifies an Asset\n      schema:\n        type: string\n    AssetProjectionQuery:\n      name: projection\n      in: query\n      description: Additional properties to include in the response.\n      style: form\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - statusStats\n            - stigs\n            - stigGrants\n    BenchmarkIdArrayQuery:\n      name: benchmarkId\n      in: query\n      description: A query parameter that identifies a STIG\n      schema:\n        type: array\n        items:\n          type: string\n    BenchmarkIdPath:\n      name: benchmarkId\n      in: path\n      description: A path parameter that identifies a STIG\n      required: true\n      schema:\n        type: string\n    BenchmarkIdQuery:\n      name: benchmarkId\n      in: query\n      description: A query parameter that identifies a STIG\n      schema:\n        type: string\n    CciPath:\n      name: cci\n      in: path\n      description: A path parameter that identifies a CCI\n      required: true\n      schema:\n        type: string\n    CciProjectionQuery:\n      name: projection\n      in: query\n      description: Additional properties to include in the response.\n      style: form\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - emassAp\n            - stigs\n            - references\n    CciQuery:\n      name: cci\n      in: query\n      description: A query parameter that identifies a CCI\n      schema:\n        type: string\n    ChecklistProjectionQuery:\n      name: projection\n      in: query\n      description: Optional properties to return. Selecting \"checks\" or \"fixes\" will also select \"fullrules\"\n      style: form\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - cci\n            - fullrules\n            - checks\n            - fixes\n    CollectionIdPath:\n      name: collectionId\n      in: path\n      description: A path parameter that identifies a Collection\n      required: true\n      schema:\n        type: string\n    CollectionIdQuery:\n      name: collectionId\n      required: true\n      in: query\n      description: A query parameter that identifies a Collection\n      schema:\n        type: string\n    CollectionProjectionQuery:\n      name: projection\n      in: query\n      description: Additional properties to include in the response.\n      style: form\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - assets\n            - grants\n            - owners\n            - statistics\n            - stigs\n            - labels\n    CollectionsProjectionQuery:\n      name: projection\n      in: query\n      description: Additional properties to include in the response.\n      style: form\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - owners\n            - statistics\n            - labels\n    EndDateQuery:\n      name: endDate\n      in: query\n      description: History entries with a timestamp after the specified end date.\n      schema:\n        $ref: '#/components/schemas/Date'\n    ElevateQuery:\n      name: elevate\n      in: query\n      description: Elevate the user context for this request if user is permitted (canAdmin)\n      schema:\n        type: boolean\n    FindingAggregatorQuery:\n      name: aggregator\n      required: true\n      in: query\n      description: Aggregate the findings on this property\n      schema:\n        type: string\n        enum:\n          - ruleId\n          - groupId\n          - cci\n    FindingProjectionQuery:\n      name: projection\n      in: query\n      description: Optional properties to return\n      style: form\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - assets\n            - groups\n            - rules\n            - stigs\n            - ccis\n    GroupIdPath:\n      name: groupId\n      in: path\n      description: A path parameter that identifies a Group\n      required: true\n      schema:\n        type: string\n    GroupIdQuery:\n      name: groupId\n      in: query\n      description: A query parameter that identifies a Group\n      schema:\n        type: string\n    GroupProjectionQuery:\n      name: projection\n      in: query\n      description: Additional properties to include in the response.\n      style: form\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - rules\n    JsonPathQuery:\n      name: jsonpath\n      in: query\n      description: A JSONPath expression\n      schema:\n        type: string\n        maxLength: 255\n    LabelIdPath:\n      name: labelId\n      in: path\n      required: true\n      description: A path parameter that specifies a Label\n      schema:\n        $ref: '#/components/schemas/LabelId'\n    LabelIdQuery:\n      name: labelId\n      in: query\n      description: A query parameter that specifies a Label\n      schema:\n        type: array\n        items:\n          $ref: '#/components/schemas/LabelId'\n    MetadataKeyPath:\n      name: key\n      in: path\n      required: true\n      description: A path parameter that specifies a metadata key\n      schema:\n        pattern: '^([\\w\\.]+)$'\n        type: string\n    MetadataQuery:\n      name: metadata\n      in: query\n      description: A query parameter that specifies metadata key:value pairs to select matching Objects\n      schema:\n        type: array\n        items:\n          pattern: '^([\\w\\.]+\\:.*?)$'\n          type: string\n    NameQuery:\n      name: name\n      in: query\n      description: Matches against the name according to the `name-match` parameter\n      schema:\n        type: string\n    NameMatchQuery:\n      name: name-match\n      in: query\n      description: How to match against the `name` parameter\n      schema:\n        type: string\n        default: exact\n        enum:\n          - exact\n          - startsWith\n          - endsWith\n          - contains\n    PoamAggregatorQuery:\n      name: aggregator\n      required: true\n      in: query\n      description: Aggregate the findings on this property\n      schema:\n        type: string\n        enum:\n          - ruleId\n          - groupId\n    RetentionDateQuery:\n      name: retentionDate\n      in: query\n      description: Delete history entries with a timestamp earlier than the specified retention date.\n      required: true\n      schema:\n        $ref: '#/components/schemas/Date'\n    ReviewProjectionQuery:\n      name: projection\n      in: query\n      description: Additional properties to include in the response.\n      style: form\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - metadata\n            - rule\n            - stigs\n            - history\n    ReviewHistoryStatsProjectionQuery:\n      name: projection\n      in: query\n      description: Return review history statistics with the specified level of granularity.\n      style: form\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - asset\n    ReviewsProjectionQuery:\n      name: projection\n      in: query\n      description: Additional properties to include in the response.\n      style: form\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - metadata\n            - rule\n            - stigs\n    ReviewResultQuery:\n      name: result\n      in: query\n      schema:\n        $ref: '#/components/schemas/ReviewResult'\n    ReviewRulesQuery:\n      name: rules\n      in: query\n      schema:\n        type: string\n        default: current-mapped\n        enum:\n          - all\n          - current\n          - current-mapped\n          - not-current\n          - not-current-mapped\n    ReviewStatusQuery:\n      name: status\n      in: query\n      schema:\n        $ref: '#/components/schemas/ReviewStatusLabel'\n    RevisionStrPath:\n      name: revisionStr\n      in: path\n      description: A path parameter that identifies a STIG revision [V{version_num}R{release_num} | 'latest' ]\n      required: true\n      schema:\n        pattern: ^(V\\d+R\\d+(\\.\\d+)?|latest)$\n        type: string\n    RevisionStrQuery:\n      name: revisionStr\n      in: query\n      description: Selects Reviews mapped to a Revision [ V{version_num}R{release_num} |'latest' ]; requires benchmarkId\n      schema:\n        pattern: ^(V\\d+R\\d+(\\.\\d+)?|latest)$\n        type: string\n    RuleIdPath:\n      name: ruleId\n      in: path\n      description: A path parameter that identifies a Rule\n      required: true\n      schema:\n        type: string\n    RuleIdQuery:\n      name: ruleId\n      in: query\n      description: Selects Reviews of a Rule\n      schema:\n        type: string\n    RuleProjectionQuery:\n      name: projection\n      in: query\n      description: Additional properties to include in the response.\n      style: form\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - detail\n            - ccis\n            - checks\n            - fixes\n    StartDateQuery:\n      name: startDate\n      in: query\n      description: History entries with a timestamp before the specified start date.\n      schema:\n        $ref: '#/components/schemas/Date'            \n    StigAssetsProjectionQuery:\n      name: projection\n      in: query\n      description: Additional properties to include in the response.\n      style: form\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - restrictedUserAccess\n    UserAccessLevelQuery:\n      name: accessLevel\n      in: query\n      schema:\n        $ref: '#/components/schemas/AccessLevel'\n    UserIdPath:\n      name: userId\n      in: path\n      description: A path parameter that identifies a User\n      required: true\n      schema:\n        type: string\n    UserIdQuery:\n      name: userId\n      in: query\n      description: A path parameter that identifies a User\n      schema:\n        type: string\n    UsernameQuery:\n      name: username\n      in: query\n      description: Matches against the username according to the `username-match` parameter\n      schema:\n        type: string\n    UsernameMatchQuery:\n      name: username-match\n      in: query\n      description: How to match against the `username` parameter\n      schema:\n        type: string\n        default: exact\n        enum:\n          - exact\n          - startsWith\n          - endsWith\n          - contains\n    UserProjectionQuery:\n      name: projection\n      in: query\n      description: Additional properties to include in the response.\n      style: form\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - collectionGrants\n            - statistics\n  responses:\n    Forbidden:\n      description: The requesting User does not have access rights to the content\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  securitySchemes:\n    oauth:\n      type: openIdConnect\n      openIdConnectUrl: http://localhost:8080/auth/realms/stigman/.well-known/openid-configuration\n# supported oauth scopes:\n# - stig-manager\n# - 'stig-manager:op'\n# - 'stig-manager:op:read'\n# - 'stig-manager:stig'\n# - 'stig-manager:stig:read'\n# - 'stig-manager:collection'\n# - 'stig-manager:collection:read'\n# - 'stig-manager:user'\n# - 'stig-manager:user:read'",
			"canonicalURL": "/github.com/NUWCDIVNPT/stig-manager@34b2993584e6ed1b12699d8f4139bf9b9bf395d4/-/blob/api/source/specification/stig-manager.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/NUWCDIVNPT/stig-manager/blob/34b2993584e6ed1b12699d8f4139bf9b9bf395d4/api/source/specification/stig-manager.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/assets/{assetId}/metadata/keys\": get: security: security \"oauth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"discriminator inference",
		"oauth2 security",
		"unsupported content types"
	]
}