{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stackql/stackql-provider-registry"
		},
		"file": {
			"name": "licensing-v1.yaml",
			"size": 0,
			"path": "providers/src/googleapis.com/v0.1.1/services/licensing-v1.yaml",
			"byteSize": 23125,
			"content": "components:\n  parameters:\n    _.xgafv:\n      description: V1 error format.\n      in: query\n      name: $.xgafv\n      schema:\n        enum:\n        - '1'\n        - '2'\n        type: string\n    access_token:\n      description: OAuth access token.\n      in: query\n      name: access_token\n      schema:\n        type: string\n    alt:\n      description: Data format for response.\n      in: query\n      name: alt\n      schema:\n        enum:\n        - json\n        - media\n        - proto\n        type: string\n    callback:\n      description: JSONP\n      in: query\n      name: callback\n      schema:\n        type: string\n    fields:\n      description: Selector specifying which fields to include in a partial response.\n      in: query\n      name: fields\n      schema:\n        type: string\n    key:\n      description: API key. Your API key identifies your project and provides you\n        with API access, quota, and reports. Required unless you provide an OAuth\n        2.0 token.\n      in: query\n      name: key\n      schema:\n        type: string\n    oauth_token:\n      description: OAuth 2.0 token for the current user.\n      in: query\n      name: oauth_token\n      schema:\n        type: string\n    prettyPrint:\n      description: Returns response with indentations and line breaks.\n      in: query\n      name: prettyPrint\n      schema:\n        type: boolean\n    quotaUser:\n      description: Available to use for quota purposes for server-side applications.\n        Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n      in: query\n      name: quotaUser\n      schema:\n        type: string\n    uploadType:\n      description: Legacy upload protocol for media (e.g. \"media\", \"multipart\").\n      in: query\n      name: uploadType\n      schema:\n        type: string\n    upload_protocol:\n      description: Upload protocol for media (e.g. \"raw\", \"multipart\").\n      in: query\n      name: upload_protocol\n      schema:\n        type: string\n  schemas:\n    Empty:\n      description: 'A generic empty message that you can re-use to avoid defining\n        duplicated empty messages in your APIs. A typical example is to use it as\n        the request or the response type of an API method. For instance: service Foo\n        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON\n        representation for `Empty` is empty JSON object `{}`.'\n      properties: {}\n      type: object\n    LicenseAssignment:\n      description: Representation of a license assignment.\n      properties:\n        etags:\n          description: ETag of the resource.\n          type: string\n        kind:\n          default: licensing#licenseAssignment\n          description: Identifies the resource as a LicenseAssignment, which is `licensing#licenseAssignment`.\n          type: string\n        productId:\n          description: A product's unique identifier. For more information about products\n            in this version of the API, see Product and SKU IDs.\n          type: string\n        productName:\n          description: Display Name of the product.\n          type: string\n        selfLink:\n          description: Link to this page.\n          type: string\n        skuId:\n          description: A product SKU's unique identifier. For more information about\n            available SKUs in this version of the API, see Products and SKUs.\n          type: string\n        skuName:\n          description: Display Name of the sku of the product.\n          type: string\n        userId:\n          description: The user's current primary email address. If the user's email\n            address changes, use the new email address in your API requests. Since\n            a `userId` is subject to change, do not use a `userId` value as a key\n            for persistent data. This key could break if the current user's email\n            address changes. If the `userId` is suspended, the license status changes.\n          type: string\n      type: object\n    LicenseAssignmentInsert:\n      description: Representation of a license assignment.\n      properties:\n        userId:\n          description: Email id of the user\n          type: string\n      type: object\n    LicenseAssignmentList:\n      properties:\n        etag:\n          description: ETag of the resource.\n          type: string\n        items:\n          description: The LicenseAssignments in this page of results.\n          items:\n            $ref: '#/components/schemas/LicenseAssignment'\n          type: array\n        kind:\n          default: licensing#licenseAssignmentList\n          description: Identifies the resource as a collection of LicenseAssignments.\n          type: string\n        nextPageToken:\n          description: The token that you must submit in a subsequent request to retrieve\n            additional license results matching your query parameters. The `maxResults`\n            query string is related to the `nextPageToken` since `maxResults` determines\n            how many entries are returned on each next page.\n          type: string\n      type: object\n  securitySchemes:\n    Oauth2:\n      description: Oauth 2.0 implicit authentication\n      flows:\n        implicit:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            https://www.googleapis.com/auth/apps.licensing: View and manage G Suite\n              licenses for your domain\n      type: oauth2\n    Oauth2c:\n      description: Oauth 2.0 authorizationCode authentication\n      flows:\n        authorizationCode:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            https://www.googleapis.com/auth/apps.licensing: View and manage G Suite\n              licenses for your domain\n          tokenUrl: https://accounts.google.com/o/oauth2/token\n      type: oauth2\n  x-stackQL-resources:\n    licenseAssignments:\n      id: google.licensing.licenseAssignments\n      methods:\n        delete:\n          operation:\n            $ref: '#/paths/~1apps~1licensing~1v1~1product~1{productId}~1sku~1{skuId}~1user~1{userId}/delete'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        get:\n          operation:\n            $ref: '#/paths/~1apps~1licensing~1v1~1product~1{productId}~1sku~1{skuId}~1user~1{userId}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        insert:\n          operation:\n            $ref: '#/paths/~1apps~1licensing~1v1~1product~1{productId}~1sku~1{skuId}~1user/post'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        listForProduct:\n          operation:\n            $ref: '#/paths/~1apps~1licensing~1v1~1product~1{productId}~1users/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        listForProductAndSku:\n          operation:\n            $ref: '#/paths/~1apps~1licensing~1v1~1product~1{productId}~1sku~1{skuId}~1users/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        patch:\n          operation:\n            $ref: '#/paths/~1apps~1licensing~1v1~1product~1{productId}~1sku~1{skuId}~1user~1{userId}/patch'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        update:\n          operation:\n            $ref: '#/paths/~1apps~1licensing~1v1~1product~1{productId}~1sku~1{skuId}~1user~1{userId}/put'\n          request:\n            mediaType: application/json\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: licenseAssignments\n      title: licenseAssignments\nexternalDocs:\n  url: https://developers.google.com/admin-sdk/licensing/\ninfo:\n  contact:\n    name: Google\n    url: https://google.com\n    x-twitter: youtube\n  description: The Google Enterprise License Manager API's allows you to license apps\n    for all the users of a domain managed by you.\n  license:\n    name: Creative Commons Attribution 3.0\n    url: http://creativecommons.org/licenses/by/3.0/\n  termsOfService: https://developers.google.com/terms/\n  title: Enterprise License Manager API\n  version: v1\n  x-apiClientRegistration:\n    url: https://console.developers.google.com\n  x-apisguru-categories:\n  - analytics\n  - media\n  x-logo:\n    url: https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png\n  x-origin:\n  - format: google\n    url: https://licensing.googleapis.com/$discovery/rest?version=v1\n    version: v1\n  x-providerName: googleapis.com\n  x-serviceName: licensing\nopenapi: 3.0.0\npaths:\n  /apps/licensing/v1/product/{productId}/sku/{skuId}/user:\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: Assign a license.\n      operationId: licensing.licenseAssignments.insert\n      parameters:\n      - description: A product's unique identifier. For more information about products\n          in this version of the API, see Products and SKUs.\n        in: path\n        name: productId\n        required: true\n        schema:\n          type: string\n      - description: A product SKU's unique identifier. For more information about\n          available SKUs in this version of the API, see Products and SKUs.\n        in: path\n        name: skuId\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LicenseAssignmentInsert'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LicenseAssignment'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/apps.licensing\n        Oauth2c:\n        - https://www.googleapis.com/auth/apps.licensing\n      tags:\n      - licenseAssignments\n  /apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}:\n    delete:\n      description: Revoke a license.\n      operationId: licensing.licenseAssignments.delete\n      parameters:\n      - description: A product's unique identifier. For more information about products\n          in this version of the API, see Products and SKUs.\n        in: path\n        name: productId\n        required: true\n        schema:\n          type: string\n      - description: A product SKU's unique identifier. For more information about\n          available SKUs in this version of the API, see Products and SKUs.\n        in: path\n        name: skuId\n        required: true\n        schema:\n          type: string\n      - description: The user's current primary email address. If the user's email\n          address changes, use the new email address in your API requests. Since a\n          `userId` is subject to change, do not use a `userId` value as a key for\n          persistent data. This key could break if the current user's email address\n          changes. If the `userId` is suspended, the license status changes.\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Empty'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/apps.licensing\n        Oauth2c:\n        - https://www.googleapis.com/auth/apps.licensing\n      tags:\n      - licenseAssignments\n    get:\n      description: Get a specific user's license by product SKU.\n      operationId: licensing.licenseAssignments.get\n      parameters:\n      - description: A product's unique identifier. For more information about products\n          in this version of the API, see Products and SKUs.\n        in: path\n        name: productId\n        required: true\n        schema:\n          type: string\n      - description: A product SKU's unique identifier. For more information about\n          available SKUs in this version of the API, see Products and SKUs.\n        in: path\n        name: skuId\n        required: true\n        schema:\n          type: string\n      - description: The user's current primary email address. If the user's email\n          address changes, use the new email address in your API requests. Since a\n          `userId` is subject to change, do not use a `userId` value as a key for\n          persistent data. This key could break if the current user's email address\n          changes. If the `userId` is suspended, the license status changes.\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LicenseAssignment'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/apps.licensing\n        Oauth2c:\n        - https://www.googleapis.com/auth/apps.licensing\n      tags:\n      - licenseAssignments\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    patch:\n      description: Reassign a user's product SKU with a different SKU in the same\n        product. This method supports patch semantics.\n      operationId: licensing.licenseAssignments.patch\n      parameters:\n      - description: A product's unique identifier. For more information about products\n          in this version of the API, see Products and SKUs.\n        in: path\n        name: productId\n        required: true\n        schema:\n          type: string\n      - description: A product SKU's unique identifier. For more information about\n          available SKUs in this version of the API, see Products and SKUs.\n        in: path\n        name: skuId\n        required: true\n        schema:\n          type: string\n      - description: The user's current primary email address. If the user's email\n          address changes, use the new email address in your API requests. Since a\n          `userId` is subject to change, do not use a `userId` value as a key for\n          persistent data. This key could break if the current user's email address\n          changes. If the `userId` is suspended, the license status changes.\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LicenseAssignment'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LicenseAssignment'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/apps.licensing\n        Oauth2c:\n        - https://www.googleapis.com/auth/apps.licensing\n      tags:\n      - licenseAssignments\n    put:\n      description: Reassign a user's product SKU with a different SKU in the same\n        product.\n      operationId: licensing.licenseAssignments.update\n      parameters:\n      - description: A product's unique identifier. For more information about products\n          in this version of the API, see Products and SKUs.\n        in: path\n        name: productId\n        required: true\n        schema:\n          type: string\n      - description: A product SKU's unique identifier. For more information about\n          available SKUs in this version of the API, see Products and SKUs.\n        in: path\n        name: skuId\n        required: true\n        schema:\n          type: string\n      - description: The user's current primary email address. If the user's email\n          address changes, use the new email address in your API requests. Since a\n          `userId` is subject to change, do not use a `userId` value as a key for\n          persistent data. This key could break if the current user's email address\n          changes. If the `userId` is suspended, the license status changes.\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LicenseAssignment'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LicenseAssignment'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/apps.licensing\n        Oauth2c:\n        - https://www.googleapis.com/auth/apps.licensing\n      tags:\n      - licenseAssignments\n  /apps/licensing/v1/product/{productId}/sku/{skuId}/users:\n    get:\n      description: List all users assigned licenses for a specific product SKU.\n      operationId: licensing.licenseAssignments.listForProductAndSku\n      parameters:\n      - description: A product's unique identifier. For more information about products\n          in this version of the API, see Products and SKUs.\n        in: path\n        name: productId\n        required: true\n        schema:\n          type: string\n      - description: A product SKU's unique identifier. For more information about\n          available SKUs in this version of the API, see Products and SKUs.\n        in: path\n        name: skuId\n        required: true\n        schema:\n          type: string\n      - description: Customer's `customerId`. A previous version of this API accepted\n          the primary domain name as a value for this field. If the customer is suspended,\n          the server returns an error.\n        in: query\n        name: customerId\n        required: true\n        schema:\n          type: string\n      - description: The `maxResults` query string determines how many entries are\n          returned on each page of a large response. This is an optional parameter.\n          The value must be a positive number.\n        in: query\n        name: maxResults\n        schema:\n          maximum: 1000\n          minimum: 1\n          type: integer\n      - description: Token to fetch the next page of data. The `maxResults` query\n          string is related to the `pageToken` since `maxResults` determines how many\n          entries are returned on each page. This is an optional query string. If\n          not specified, the server returns the first page.\n        in: query\n        name: pageToken\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LicenseAssignmentList'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/apps.licensing\n        Oauth2c:\n        - https://www.googleapis.com/auth/apps.licensing\n      tags:\n      - licenseAssignments\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n  /apps/licensing/v1/product/{productId}/users:\n    get:\n      description: List all users assigned licenses for a specific product SKU.\n      operationId: licensing.licenseAssignments.listForProduct\n      parameters:\n      - description: A product's unique identifier. For more information about products\n          in this version of the API, see Products and SKUs.\n        in: path\n        name: productId\n        required: true\n        schema:\n          type: string\n      - description: Customer's `customerId`. A previous version of this API accepted\n          the primary domain name as a value for this field. If the customer is suspended,\n          the server returns an error.\n        in: query\n        name: customerId\n        required: true\n        schema:\n          type: string\n      - description: The `maxResults` query string determines how many entries are\n          returned on each page of a large response. This is an optional parameter.\n          The value must be a positive number.\n        in: query\n        name: maxResults\n        schema:\n          maximum: 1000\n          minimum: 1\n          type: integer\n      - description: Token to fetch the next page of data. The `maxResults` query\n          string is related to the `pageToken` since `maxResults` determines how many\n          entries are returned on each page. This is an optional query string. If\n          not specified, the server returns the first page.\n        in: query\n        name: pageToken\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LicenseAssignmentList'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/apps.licensing\n        Oauth2c:\n        - https://www.googleapis.com/auth/apps.licensing\n      tags:\n      - licenseAssignments\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\nservers:\n- url: https://licensing.googleapis.com/\ntags:\n- name: licenseAssignments\n",
			"canonicalURL": "/github.com/stackql/stackql-provider-registry@7482bc9b2425a6491d640bf921a1dc9cf508f339/-/blob/providers/src/googleapis.com/v0.1.1/services/licensing-v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stackql/stackql-provider-registry/blob/7482bc9b2425a6491d640bf921a1dc9cf508f339/providers/src/googleapis.com/v0.1.1/services/licensing-v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/apps/licensing/v1/product/{productId}/sku/{skuId}/user\": post: security: security \"Oauth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}