{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/networknt/openapi-parser"
		},
		"file": {
			"name": "circular.yaml",
			"size": 0,
			"path": "src/test/resources/models/circular.yaml",
			"byteSize": 10844,
			"content": "openapi: 3.0.0\ninfo:\n  version: 2.7.0\n  title: Lexikon Service\n  description: foo\n\nservers:\n  - url: /v2\n    description: The current Lexikon Service instance\n\ncomponents:\n\n  securitySchemes:\n    lexikon_auth:\n      type: oauth2\n      description: This API uses OAuth 2 with the client credential grant flow.\n      flows:\n        clientCredentials:\n          tokenUrl: 'https://localhost:6882/token'\n          scopes:\n            'read:server.info': Read server info\n            'read:person': Read People\n            'read:team': Read Teams\n\n  schemas:\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n          format: int32\n\n    List:\n      description: A list of results\n      type: object\n      properties:\n        info:\n          type: object\n          properties:\n            page:\n              type: integer\n              format: int32\n              minimum: 1\n            page_size:\n              type: integer\n              format: int32\n              minimum: 1\n              maximum: 500\n            count:\n              type: integer\n              format: int64\n            total_count:\n              type: integer\n              format: int64\n            total_pages:\n              type: integer\n              format: int64\n\n    StringList:\n      allOf:\n        - $ref: '#/components/schemas/List'\n        - type: object\n          description: A list of strings\n          properties:\n            results:\n              type: array\n              items:\n                type: string\n\n    #\n    # Person Entity\n    #\n    PersonList:\n      allOf:\n        - $ref: '#/components/schemas/List'\n        - type: object\n          description: A list of Persons\n          properties:\n            results:\n              type: array\n              items:\n                $ref: '#/components/schemas/Person'\n\n    Person:\n      required:\n        - id\n        - gid\n        - username\n        - name\n        - email\n        - is_active\n      properties:\n        id:\n          type: integer\n          format: int64\n        gid:\n          type: string\n        username:\n          type: string\n        name:\n          type: string\n        email:\n          type: string\n        slack:\n          type: string\n        is_active:\n          type: boolean\n        n_queries:\n          type: integer\n          format: int64\n        n_tables_queried:\n          type: integer\n          format: int64\n        n_tables_owned:\n          type: integer\n          format: int64\n        last_query_date:\n          type: string\n          format: 'date-time'\n\n        memberships:\n          type: array\n          items:\n            $ref: '#/components/schemas/TeamMember'\n\n    #\n    # Team Entity\n    #\n    TeamList:\n      allOf:\n        - $ref: '#/components/schemas/List'\n        - type: object\n          description: A list of Teams\n          properties:\n            results:\n              type: array\n              items:\n                $ref: '#/components/schemas/Team'\n\n    Team:\n      required:\n        - id\n        - gid\n        - name\n        - email\n        - is_active\n      properties:\n        id:\n          type: integer\n          format: int64\n        gid:\n          type: string\n        name:\n          type: string\n        email:\n          type: string\n        slack:\n          type: string\n        n_queries:\n          type: integer\n          format: int64\n        n_tables_queried:\n          type: integer\n          format: int64\n        n_tables_owned:\n          type: integer\n          format: int64\n        n_team_members:\n          type: integer\n          format: int64\n        last_query_date:\n          type: string\n          format: 'date-time'\n\n        members:\n          type: array\n          items:\n            $ref: '#/components/schemas/TeamMember'\n\n    #\n    # Relations objects\n    #\n\n    TeamMember:\n      required:\n        - team_id\n        - person_id\n      properties:\n        team_id:\n          type: integer\n          format: int64\n        team:\n          $ref: '#/components/schemas/Team'\n        person_id:\n          type: integer\n          format: int64\n        person:\n          $ref: '#/components/schemas/Person'\n        role:\n          type: string\n\npaths:\n  '/health':\n    get:\n      responses:\n        '200':\n          description: successful operation\n      parameters: []\n\n  '/server/info':\n    get:\n      security:\n        - lexikon_auth:\n          - 'read:server.info'\n      responses:\n        '200':\n          description: successful operation\n      parameters: []\n\n  '/spec.html':\n    get:\n      summary: Lexikon Service API Documentation.\n      responses:\n        '200':\n          description: OK\n          content:\n            text/html:\n              schema:\n                type: object\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/spec.yaml':\n    get:\n      summary: The OpenAPI Spec in YAML format.\n      responses:\n        '200':\n          description: OK\n          content:\n            text/yaml:\n              schema:\n                type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/spec.json':\n    get:\n      summary: The OpenAPI Spec in JSON format.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  '/person':\n    get:\n      summary: List all Persons\n      operationId: listPersons\n      tags:\n        - person\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      security:\n        - lexikon_auth:\n            - 'read:person'\n      responses:\n        '200':\n          description: An paged array of Persons\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PersonList'\n              example:\n                - id: 1\n                  gid: '47c76cf0-1415-4232-a2b7-e705bc07435b'\n                  username: 'jd'\n                  name: 'Jon Doe'\n                  email: 'jd@spotify.com'\n                  slack: 'jd'\n                  is_active: true\n                - id: 2\n                  gid: 'eead9528-afac-11e8-84ff-784f436131ec'\n                  username: 'jsmith'\n                  name: 'Jane Smith'\n                  email: 'jsmith@spotify.com'\n                  slack: 'jsmith'\n                  is_active: true\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  '/person/{id}':\n    get:\n      summary: Info for a specific Person\n      operationId: showPersonById\n      tags:\n        - person\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the Person to retrieve\n          schema:\n            type: string\n      security:\n        - lexikon_auth:\n            - 'read:person'\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Person'\n              example:\n                id: 1\n                gid: '47c76cf0-1415-4232-a2b7-e705bc07435b'\n                username: 'jd'\n                name: 'Jon Doe'\n                email: 'jd@spotify.com'\n                slack: 'jd'\n                is_active: true\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  '/team':\n    get:\n      summary: List all Teams\n      operationId: listTeams\n      tags:\n        - team\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      security:\n        - lexikon_auth:\n            - 'read:team'\n      responses:\n        '200':\n          description: An paged array of Teams\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeamList'\n              example:\n                - id: 1\n                  gid: '47c76cf0-1415-4232-a2b7-e705bc07435b'\n                  name: 'some-squad'\n                  email: 'jome-squad@spotify.com'\n                  slack: 'some-squad'\n                  is_active: true\n                - id: 2\n                  gid: 'eead9528-afac-11e8-84ff-784f436131ec'\n                  name: 'another-squad'\n                  email: 'another-squad@spotify.com'\n                  slack: 'another-squad'\n                  is_active: true\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  '/team/{id}':\n    get:\n      summary: Info for a specific Team\n      operationId: showTeamById\n      tags:\n        - team\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the Team to retrieve\n          schema:\n            type: string\n      security:\n        - lexikon_auth:\n            - 'read:team'\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Team'\n              example:\n                id: 1\n                gid: '47c76cf0-1415-4232-a2b7-e705bc07435b'\n                name: 'some-squad'\n                email: 'jome-squad@spotify.com'\n                slack: 'some-squad'\n                is_active: true\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n",
			"canonicalURL": "/github.com/networknt/openapi-parser@4a3b0829c40ed70e96071bd6cf0e8133e5fe3a22/-/blob/src/test/resources/models/circular.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/networknt/openapi-parser/blob/4a3b0829c40ed70e96071bd6cf0e8133e5fe3a22/src/test/resources/models/circular.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/person\": get: security: security \"lexikon_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security",
		"unsupported content types"
	]
}