{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/zendesk.support/openapi.yaml",
			"byteSize": 21497,
			"content": "openapi: 3.0.1\ninfo:\n  title: Zendesk Support API\n  description: \u003e\n    This is a generated connector for [Zendesk Support API v2](https://developer.zendesk.com/api-reference/) OpenAPI specification.\n    \n    Zendesk Support is a simple system for tracking, prioritizing and solving customer support tickets.\n  version: \"v2\"\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials.\n\n    Create an [Zendesk account](https://www.zendesk.com/) and obtain tokens by following [this guide](https://developer.zendesk.com/api-reference/ticketing/introduction/#security-and-authentication).\n  x-ballerina-display:\n    label: Zendesk Support\n    iconPath: \"icon.png\"\npaths:\n  /api/v2/users.json:\n    get:\n      summary: List Users.\n      operationId: listUsers\n      responses:\n        200:\n          description: Returns list of users available\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Users'\n    post:\n      summary: Create User.\n      operationId: createUser\n      requestBody:\n        description: The information for create user request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUserInfo'\n        required: true\n      responses:\n        200:\n          description: Returns detail of user created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /api/v2/search.json:\n    get:\n      summary: Search Users.\n      operationId: searchUsers\n      parameters:\n        - name: query\n          in: query\n          description: Query\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns users matching the searchable string\n          content:\n            application/json: {}\n  /api/v2/users/{user_id}.json:\n    get:\n      summary: Get User By Id.\n      operationId: getUserById\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: User Id\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns user belong to the user id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    delete:\n      summary: Delete User By Id.\n      operationId: deleteUserById\n      parameters:\n        - name: user_id\n          in: path\n          required: true\n          description: User Id\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns detail of user deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /api/v2/tickets.json:\n    get:\n      summary: List Tickets.\n      operationId: listTickets\n      responses:\n        200:\n          description: Returns list of tickets available\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tickets'\n    post:\n      summary: Create Ticket.\n      operationId: createTicket\n      requestBody:\n        description: The information for create ticket request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateTicketInfo'\n        required: true\n      responses:\n        200:\n          description: Returns detail of created ticket\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ticket'\n  /api/v2/tickets/{ticket_id}:\n    put:\n      summary: Update Ticket.\n      operationId: updateTicket\n      parameters:\n        - name: ticket_id\n          in: path\n          required: true\n          description: Ticket Id\n          schema:\n            type: string\n      requestBody:\n        description: The information for update ticket request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateTicketInfo'\n        required: true\n      responses:\n        200:\n          description: Returns deatil of updated ticket by ticket id\n          content:\n            application/json: {}\n  /api/v2/organizations.json:\n    post:\n      summary: Create Organization.\n      operationId: createOrganization\n      requestBody:\n        description: The information for create organization request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateOrganizationInfo'\n        required: true\n      responses:\n        200:\n          description: Organization created\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/Organization'\n        422:\n          description: Unprocessable Entity\n          content:\n              application/json: {}\ncomponents:\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n  schemas:\n    CreateTicketInfo:\n      description: The information for create ticket request\n      type: object\n      properties:\n        ticket:\n          type: object\n          $ref: '#/components/schemas/TicketInfo'\n    TicketInfo:\n      type: object\n      description: The ticket information to create\n      properties:\n        via_followup_source_id:\n          type: integer\n          description: via_followup_source_id\n        subject:\n          type: string\n          description: subject\n        priority:\n          type: string\n          description: Priority of ticket. Allowed values are \"urgent\", \"high\", \"normal\", or \"low\"\n        comment:\n          type: object\n          $ref: '#/components/schemas/Comment'\n    CreateUserInfo:\n      description: The information for create user request\n      type: object\n      properties:\n        user:\n          type: object\n          $ref: '#/components/schemas/UserInfo'\n    UserInfo:\n      description: The user information to create\n      type: object\n      properties:\n        custom_role_id:\n          type: string\n          description: A custom role if the user is an agent on the Enterprise plan or above\n        email:\n          type: string\n          description: The user's primary email address\n        name:\n          type: string\n          description: The user's name\n        organization:\n          type: object\n          description: The user's organization information\n          $ref: '#/components/schemas/OrganizationInfo'\n        role:\n          type: string\n          description: The user's role. Possible values are \"end-user\", \"agent\", or \"admin\"\n    OrganizationInfo:\n      description: The organization information to create\n      type: object\n      properties:\n        name:\n          type: string\n          description: organization name\n    UpdateTicketInfo:\n      description: The information for create ticket request\n      type: object\n      properties:\n        ticket:\n          type: object\n          $ref: '#/components/schemas/TicketInfoUpdate'\n    TicketInfoUpdate:\n      description: The information for create ticket request\n      type: object\n      properties:\n        ticket:\n          type: object\n          properties:\n            subject:\n              type: string\n              description: subject\n            priority:\n              type: string\n              description: Priority of ticket. Allowed values are \"urgent\", \"high\", \"normal\", or \"low\"\n            comment:\n              type: object\n              $ref: '#/components/schemas/Comment'\n    Comment:\n      description: Ticket comments represent the conversation between requesters, collaborators, and agents\n      type: object\n      properties:\n        author_id:\n          type: integer\n          description: author_id\n        body:\n          type: string\n          description: body\n        html_body:\n          type: string\n          description: html_body\n        public:\n          type: boolean\n          description: public\n    Ticket:\n      type: object\n      properties:\n        allow_attachments:\n          type: boolean\n          description: Permission for agents to add add attachments to a comment. Defaults to true\n          nullable: true\n        allow_channelback:\n          type: boolean\n          description: Is false if channelback is disabled, true otherwise. Only applicable for channels framework ticket\n          nullable: true\n        assignee_id:\n          type: integer\n          description: The agent currently assigned to the ticket\n          nullable: true\n        brand_id:\n          type: integer\n          description: Enterprise only. The id of the brand this ticket is associated with\n          nullable: true\n        created_at:\n          type: string\n          description: When this ticket record was created\n          nullable: true\n        description:\n          type: string\n          description: Read-only first comment on the ticket. When creating a ticket, use comment to set the description\n          nullable: true\n        due_at:\n          type: string\n          description: If this is a ticket of type \"task\" it has a due date. Due date format uses ISO 8601 format\n          nullable: true\n        external_id:\n          type: string\n          description: An id you can use to link Zendesk Support tickets to local records\n          nullable: true\n        forum_topic_id:\n          type: integer\n          description: The topic in the Zendesk Web portal this ticket originated from, if any. The Web portal is deprecated\n          nullable: true\n        group_id:\n          type: integer\n          description: The group this ticket is assigned to\n          nullable: true\n        has_incidents:\n          type: boolean\n          description: Is true if a ticket is a problem type and has one or more incidents linked to it. Otherwise, the value is false.\n          nullable: true\n        id:\n          type: integer\n          description: Automatically assigned when the ticket is created\n          nullable: true\n        is_public:\n          type: boolean\n          description: Is true if any comments are public, false otherwise\n          nullable: true\n        organization_id:\n          type: integer\n          description: The organization of the requester. You can only specify the ID of an organization associated with the requester \n          nullable: true\n        priority:\n          type: string\n          description: The urgency with which the ticket should be addressed. Allowed values are \"urgent\", \"high\", \"normal\", or \"low\"\n          nullable: true\n        problem_id:\n          type: integer\n          description: For tickets of type \"incident\", the ID of the problem the incident is linked to\n          nullable: true\n        raw_subject:\n          type: string\n          description: The dynamic content placeholder, if present, or the \"subject\" value\n          nullable: true\n        recipient:\n          type: string\n          description: The original recipient e-mail address of the ticket\n          nullable: true\n        requester_id:\n          type: integer\n          description: The user who requested this ticket\n          nullable: true\n        status:\n          type: string\n          description: The state of the ticket. Allowed values are \"new\", \"open\", \"pending\", \"hold\", \"solved\", or \"closed\"The state of the ticket. Allowed values are \"new\", \"open\", \"pending\", \"hold\", \"solved\", or \"closed\".\n          nullable: true\n        subject:\n          type: string\n          description: The value of the subject field for this ticket\n          nullable: true\n        submitter_id:\n          type: integer\n          description: The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket\n          nullable: true\n        ticket_form_id:\n          type: integer\n          description: Enterprise only. The id of the ticket form to render for the ticket\n        type:\n          type: string\n          description: The type of this ticket. Allowed values are \"problem\", \"incident\", \"question\", or \"task\"\tThe type of this ticket. Allowed values are \"problem\", \"incident\", \"question\", or \"task\".\n          nullable: true\n        updated_at:\n          type: string\n          description: When this record last got updated\n          nullable: true\n        url:\n          type: string\n          description: The API url of this ticket\n          nullable: true\n        via_followup_source_id:\n          type: integer\n          description: The id of a closed ticket when creating a follow-up ticket\n          nullable: true\n    Tickets:\n      type: object\n      properties:\n        tickets:\n          type: array\n          items:\n            $ref: '#/components/schemas/Ticket'\n        next_page:\n          type: integer\n          description: next_page\n          nullable: true\n        previous_page:\n          type: integer\n          description: previous_page\n          nullable: true\n        count:\n          type: integer\n          description: count\n    Organization:\n      type: object\n      properties:\n        url:\n          type: string\n          description: The API url of this organization\n        id:\n          type: integer\n          description: Automatically assigned id when the organization is created\n        name:\n          type: string\n          description: A unique name for the organization\n        shared_tickets:\n          type: boolean\n          description: End users in this organization are able to see each other's tickets\n        shared_comments:\n          type: boolean\n          description: End users in this organization are able to see each other's comments on tickets\n        external_id:\n          type: string\n          description: A unique external id to associate organizations to an external record\n          nullable: true\n        created_at:\n          type: string\n          description: The time the organization was created\n        updated_at:\n          type: string\n          description: The time the organization was updated\n        domain_names:\n          type: array\n          items: \n            type: string\n          description: An array of domain names associated with this organization\n        details:\n          type: string\n          description: Any details obout the organization, such as the address\n          nullable: true\n        notes:\n          type: string\n          description: Any notes you have about the organization\n          nullable: true\n        group_id:\n          type: integer\n          description: New tickets from users in this organization are automatically put in this group\n          nullable: true\n        tags:\n          type: array\n          items: \n            type: string\n          description: The tags of the organization\n        organization_fields:\n          type: object\n          description: organization_fields\n    CreateOrganizationInfo:\n      description: The information for create organization request\n      type: object\n      properties:\n        organization:\n          type: object\n          $ref: '#/components/schemas/OrganizationInfo'\n    User:\n      type: object\n      properties:\n        active:\n          type: boolean\n          description: False if the user has been deleted\n          nullable: true\n        alias:\n          type: string\n          description: An alias displayed to end users\n          nullable: true\n        chat_only:\n          type: boolean\n          description: Whether or not the user is a chat-only agent\n          nullable: true\n        created_at:\n          type: string\n          description: The time the user was created\n          nullable: true\n        custom_role_id:\n          type: integer\n          description: A custom role if the user is an agent on the Enterprise plan or above\n          nullable: true\n        default_group_id:\n          type: integer\n          description: The id of the user's default group\n          nullable: true\n        details:\n          type: string\n          description: Any details you want to store about the user, such as an address\n          nullable: true\n        email:\n          type: string\n          description: The user's primary email address\n          nullable: true\n        external_id:\n          type: string\n          description: A unique identifier from another system. The API treats the id as case insensitive. Example - \"ian1\" and \"Ian1\" are the same user\n          nullable: true\n        iana_time_zone:\n          type: string\n          description: The time zone for the user\n          nullable: true\n        id:\n          type: integer\n          description: Automatically assigned  id when the user is created\n          nullable: true\n        last_login_at:\n          type: string\n          description: The last time the user signed in to Zendesk Support\n          nullable: true\n        locale:\n          type: string\n          description: The user's locale. A BCP-47 compliant tag for the locale. If both \"locale\" and \"locale_id\" are present on create or update, \"locale_id\" is ignored and only \"locale\" is used.\n          nullable: true\n        locale_id:\n          type: integer\n          description: The user's language identifier\n          nullable: true\n        moderator:\n          type: boolean\n          description: Designates whether the user has forum moderation capabilities\n          nullable: true\n        name:\n          type: string\n          description: The user's name\n          nullable: true\n        notes:\n          type: string\n          description: Any notes you want to store about the user\n          nullable: true\n        only_private_comments:\n          type: boolean\n          description: true if the user can only create private comments\n          nullable: true\n        organization_id:\n          type: integer\n          description: The id of the user's organization. If the user has more than one organization memberships, the id of the user's default organization\n          nullable: true\n        phone:\n          type: string\n          description: The user's primary phone number\n          nullable: true\n        report_csv:\n          type: boolean\n          description: Whether or not the user can access the CSV report on the Search tab of the Reporting page in the Support admin interface\n          nullable: true\n        restricted_agent:\n          type: boolean\n          description: If the agent has any restrictions; false for admins and unrestricted agents, true for other agents\n        role:\n          type: string\n          description: The user's role. Possible values are \"end-user\", \"agent\", or \"admin\"\n          nullable: true\n        role_type:\n          type: integer\n          description: The user's role id. 0 for custom agents, 1 for light agent, 2 for chat agent, 3 for chat agent added to the Support account as a contributor (Chat Phase 4), and 5 for billing admins\n          nullable: true\n        shared:\n          type: boolean\n          description: If the user is shared from a different Zendesk Support instance. Ticket sharing accounts only\n          nullable: true\n        shared_agent:\n          type: boolean\n          description: If the user is a shared agent from a different Zendesk Support instance. Ticket sharing accounts only\n          nullable: true\n        shared_phone_number:\n          type: boolean\n          description: Whether the phone number is shared or not\n          nullable: true\n        signature:\n          type: string\n          description: The user's signature. Only agents and admins can have signatures\n          nullable: true\n        suspended:\n          type: boolean\n          description: If the agent is suspended. Tickets from suspended users are also suspended, and these users cannot sign in to the end user portal\n          nullable: true\n        ticket_restriction:\n          type: string\n          description: Specifies which tickets the user has access to. Possible values are - \"organization\", \"groups\", \"assigned\", \"requested\", null\n          nullable: true\n        time_zone:\n          type: string\n          description: The user's time zone\n          nullable: true\n        two_factor_auth_enabled:\n          type: boolean\n          description: If two factor authentication is enabled\n          nullable: true\n        updated_at:\n          type: string\n          description: The time the user was last updated\n          nullable: true\n        url:\n          type: string\n          description: The user's API url\n          nullable: true\n        verified:\n          type: boolean\n          description: Any of the user's identities is verified\n          nullable: true\n    Users:\n      type: object\n      properties:\n          users:\n            type: array\n            items:\n              properties:\n                id:\n                  type: integer\n                  description: id\n                url:\n                  type: string\n                  description: url\n                name:\n                  type: string\n                  description: name\n                email:\n                  type: string\n                  description: email\n          next_page:\n            type: integer\n            description: next_page\n            nullable: true\n          previous_page:\n            type: integer\n            description: previous_page\n            nullable: true\n          count:\n            type: integer\n            description: count\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/zendesk.support/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/zendesk.support/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/v2/organizations.json\": post: responses: 422: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema"
	]
}