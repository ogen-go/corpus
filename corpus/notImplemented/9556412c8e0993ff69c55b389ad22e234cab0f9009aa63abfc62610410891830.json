{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/jmix-framework/jmix"
		},
		"file": {
			"name": "rest-openapi.yaml",
			"size": 0,
			"path": "jmix-rest/rest/src/main/resources/io/jmix/rest/rest-openapi.yaml",
			"byteSize": 57049,
			"content": "openapi: 3.0.1\ninfo:\n  title: Jmix Generic REST API\n  description: |2\n\n    ## Overview\n\n    Jmix Generic REST API provides the following functionality:\n\n    * Entities CRUD operations\n    * Execution of predefined JPQL queries\n    * Execution of exposed service methods\n    * Getting metadata (entities, fetch plans, enumerations, datatypes)\n    * Getting localized messages\n    * Getting current user permissions (roles, access to entities and attributes, specific policies)\n    * Getting attributes of the current user\n    * Working with files\n\n    The REST API is available at the `/rest/` URL, e.g. `http://localhost:8080/rest/entities/Order`\n\n    ## Authentication\n\n    ### Authentication using the OAuth2 protocol\n\n    Jmix REST API uses an OAuth2 resource owner password credentials grant to protect the endpoints (https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).\n\n    Before accessing a protected resource, a user must get an authentication token. The token can be obtained at the `/oauth/token` URL.\n\n    The `/oauth/token` endpoint is protected with the basic authentication. The request must contain the `Authorization` header for basic\n    authentication with REST API client credentials. Please note that client credentials are not the same as the user credentials.\n    Client means an application that uses the REST API. The default client credentials are defined by the following\n    application properties: `jmix.security.oauth2.clientId` and `jmix.security.oauth2.clientSecret`. User credentials must be passed in the request body.\n    The request format must be `application/x-www-form-urlencoded`.\n\n    See the `/oauth/token` endpoint documentation for more details.\n\n    The obtained token must be provided with all subsequent requests in the `Authorization` header of the `Bearer` type, e.g.:\n\n    ```\n    GET /rest/entities/Order\n         Host: example.com\n         Authorization: Bearer 2YotnFZFEjr1zCsicMWpAA\n    ```\n\n    Access token can also be provided in the request URL using the `access_token` parameter. This may be useful when you, for example, need to build\n    a link for downloading a file, like this: `http://localhost:8080/rest/files?fileRef=fs://2021/03/12/2266c97c-cf23-c202-481d-04d972e185b4.jpg?name=cat-via-direct-request.jpg?access_token=acefdad0-d728-4279-aae3-6b42620f7ef9`.\n\n    ### Anonymous access\n\n    If the request to a protected resource doesn't contain the `Authentication` header then the user will be authenticated with the anonymous session.\n    By default, anonymous access is forbidden. To enable it for a specific URL, add the URL pattern to the `jmix.rest.anonymous-url-patterns` application property.\n    Read more about the anonymous sessions in the Jmix documentation.\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: \"1.2\"\nservers:\n  - url: /rest\nsecurity:\n  - oauth2:\n      - rest-api\ntags:\n  - name: OAuth\n    description: Working with authentication tokens\n  - name: Entities\n    description: CRUD operations with entities\n  - name: Queries\n    description: Executing predefined JPQL queries\n  - name: Services\n    description: Invoking exposed service methods\n  - name: Files\n    description: Working with files\n  - name: Permissions\n    description: Current user permissions\n  - name: Metadata\n    description: Entities metadata\n  - name: Messages\n    description: Localized messages\n  - name: UserInfo\n    description: Current user information\n  - name: Documentation\n    description: OpenAPI documentation\npaths:\n  /oauth/token:\n    post:\n      tags:\n        - OAuth\n      summary: Get an authentication token\n      description: |\n        Gets an authentication token.\n\n        The endpoint is protected with the basic authentication. The request must contain an `Authorization`\n        header for basic authentication with REST API client credentials. Please note that client credentials \n        are not the same as the user credentials. Client means an application that uses the REST API.\n        The default client credentials are defined by the following application properties: `jmix.rest.client.id` and `jmix.rest.client.secret`.\n        User credentials must be passed in the request body. The request format must be `application/x-www-form-urlencoded`.\n\n        To disable refresh tokens for the client, set `password,external` value to the\n        `jmix.security.oauth2.client-authorized-grant-types` application property.\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                grant_type:\n                  type: string\n                  description: OAuth grant type. Should be set to \"password\"\n                  default: password\n                username:\n                  type: string\n                  description: Jmix user login\n                  default: admin\n                password:\n                  type: string\n                  description: Jmix user password\n                  default: admin\n      responses:\n        200:\n          description: Successfully authenticated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/token'\n        400:\n          description: Authentication failed, e.g. because of invalid username\n            or password\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/oauthError'\n        401:\n          description: Basic authentcation failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/oauthError'\n      security:\n        - tokenEndpointBasic: []\n  /oauth/revoke:\n    post:\n      tags:\n        - OAuth\n      summary: Revoke an authentication token\n      description: |\n        Revokes an authentication token. The endpoint is protected with the basic authentication. The request must\n        contain an `Authorization` header for basic authentication with REST API client credentials. See the `/oauth/token`\n        endpoint documentation for more details.\n        When the refresh token is revoked, the correspondig access token is also revoked.\n        When the access token is revoked, the correspondding refresh token is also revoked.\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                token:\n                  type: string\n                  description: The token to be revoked.\n                token_type_hint:\n                  type: string\n                  description: |\n                    A hint about the type of the token submitted for revocation. May be access_token or refresh_token.\n                    The parameter is optional.\n      responses:\n        200:\n          description: Success\n          content: {}\n      security:\n        - tokenEndpointBasic: []\n  /entities/{entityName}:\n    get:\n      tags:\n        - Entities\n      summary: Get a list of entities\n      description: |\n        Gets a list of entities\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n        - name: fetchPlan\n          in: query\n          description: Name of the fetch plan which is used for loading the entity\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: Number of extracted entities\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: Position of the first result to retrieve\n          schema:\n            type: string\n        - name: sort\n          in: query\n          description: |\n            Name of the field to be sorted by. If the name is preceeding by the '+' character, then\n            the sort order is ascending, if by the '-' character then descending. If there is no special\n            character before the property name, then ascending sort will be used.\n          schema:\n            type: string\n        - name: returnNulls\n          in: query\n          description: Specifies whether null fields will be written to the result JSON\n          schema:\n            type: boolean\n        - name: returnCount\n          in: query\n          description: Specifies whether the total count of entities should be returned\n            in the 'X-Total-Count' header\n          schema:\n            type: boolean\n        - name: dynamicAttributes\n          in: query\n          description: Specifies whether entity dynamic attributes should be returned\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: Success. The list of entities is returned in the response body.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/entityFull'\n        403:\n          description: Forbidden. The user doesn't have permissions to read the entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: Not found. MetaClass for the entity with the given name not\n            found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n    post:\n      tags:\n        - Entities\n      summary: Create new entity\n      description: |\n        Creates new entity. The method expects a JSON with entity object in the request body. The entity object\n        may contain references to other entities. These references are processed according to the following rules:\n\n        * If the entity property is annotated with @Composition in the entity java class, then it will be saved with the\n        main entity\n        * Otherwise a referenced entity with the given id will be searched. If it is found then the saved entity will\n        have a reference to it. Otherwise, a response with code 400 will be returned.\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: |\n          A JSON object with the entity\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/entity'\n        required: false\n      responses:\n        201:\n          description: Entity created. The created entity is returned in the response\n            body.\n          headers:\n            location:\n              description: A URL the created object can be accessed with\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/entityFull'\n        400:\n          description: Bad request. For example, the entity may have a reference to\n            the non-existing entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: Forbidden. The user doesn't have permissions to create the\n            entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: Not found. MetaClass for the entity with the given name not\n            found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      x-codegen-request-body-name: entityJson\n  /entities/{entityName}/{entityId}:\n    get:\n      tags:\n        - Entities\n      summary: Get a single entity by id\n      description: |\n        Gets a single entity by identifier\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n        - name: entityId\n          in: path\n          description: Entity identifier\n          required: true\n          schema:\n            type: string\n        - name: fetchPlan\n          in: query\n          description: Name of the fetch plan which is used for loading the entity\n          schema:\n            type: string\n        - name: returnNulls\n          in: query\n          description: Specifies whether null fields will be written to the result JSON\n          schema:\n            type: boolean\n        - name: dynamicAttributes\n          in: query\n          description: Specifies whether entity dynamic attributes should be returned\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: Success. The entity is returned in the response body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/entityFull'\n        403:\n          description: Forbidden. The user doesn't have permissions to read the entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: |\n            MetaClass not found or entity with the five identifier not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n    put:\n      tags:\n        - Entities\n      summary: Update the entity\n      description: |\n        Updates the entity. Only fields that are passed in the JSON object (the request body) are updated.\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n        - name: entityId\n          in: path\n          description: Entity identifier\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: JSON object with the entity\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/entity'\n        required: false\n      responses:\n        200:\n          description: Success. The updated entity is returned in the response body.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/entityFull'\n        403:\n          description: Forbidden. The user doesn't have permissions to update the\n            entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: |\n            MetaClass not found or entity with the given identifier not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      x-codegen-request-body-name: entityJson\n    delete:\n      tags:\n        - Entities\n      summary: Delete the entity\n      description: Deletes the entity\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n        - name: entityId\n          in: path\n          description: Entity identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success. Entity was deleted.\n          content: {}\n        403:\n          description: Forbidden. The user doesn't have permissions to delete the\n            entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: |\n            MetaClass not found or entity with the given identifier not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /entities/{entityName}/search:\n    get:\n      tags:\n        - Entities\n      summary: Find entities by filter conditions\n      description: |2\n\n        Finds entities by filter conditions. The filter is defined by JSON object that is passed as in URL parameter.\n\n        Filter JSON example:\n\n        ```json\n        {\n            \"conditions\": [\n                {\n                    \"group\": \"OR\",\n                    \"conditions\": [\n                        {\n                            \"property\": \"stringField\",\n                            \"operator\": \"startsWith\",\n                            \"value\": \"ABC\"\n                        },\n                        {\n                            \"property\": \"relatedEntity.intField\",\n                            \"operator\": \"\u003e\",\n                            \"value\": 100\n                        }\n                    ]\n                },\n                {\n                    \"property\": \"booleanField\",\n                    \"operator\": \"=\",\n                    \"value\": true\n                }\n            ]\n        }\n        ```\n\n        Filter supports OR and AND grouping. All conditions in the root \"conditions\" field are automatically added to the AND group.\n\n        Conditions for properties that are references to other entities must have values with string representation of\n        entitiy primary key.\n\n        If the operator is \"in\" or \"notIn\" then the value should be a JSON array.\n\n        ```\n        {\n            \"conditions\": [\n                {\n                    \"property\": \"linkedEntityField\",\n                    \"operator\": \"=\",\n                    \"value\": \"2de6a78f-7bef-89a7-eb5e-b725582f23af\"\n                },\n                {\n                  \"property\": \"intField\",\n                  \"operator\": \"in\",\n                  \"value\": [100, 200, 300]\n                }\n            ]\n        }\n        ```\n\n        Supported operators:\n\n        * =\n        * \u0026lt;\u0026gt;\n        * \u0026lt;\n        * \u0026lt;=\n        * \u0026gt;\n        * \u0026gt;=\n        * startsWith\n        * endsWith\n        * contains\n        * notEmpty\n        * in\n        * notIn\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n        - name: filter\n          in: query\n          description: JSON with filter definition\n          schema:\n            type: string\n        - name: fetchPlan\n          in: query\n          description: Name of the fetch plan which is used for loading the entity\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: Number of extracted entities\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: Position of the first result to retrieve\n          schema:\n            type: string\n        - name: sort\n          in: query\n          description: |\n            Name of the field to be sorted by. If the name is preceeding by the '+' character, then\n            the sort order is ascending, if by the '-' character then descending. If there is no special\n            character before the property name, then ascending sort will be used.\n          schema:\n            type: string\n        - name: returnNulls\n          in: query\n          description: Specifies whether null fields will be written to the result JSON\n          schema:\n            type: boolean\n        - name: returnCount\n          in: query\n          description: Specifies whether the total count of entities should be returned\n            in the 'X-Total-Count' header\n          schema:\n            type: boolean\n        - name: dynamicAttributes\n          in: query\n          description: Specifies whether entity dynamic attributes should be returned\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: Success. Entities that conforms filter conditions are returned\n            in the response body.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/entityFull'\n        400:\n          description: Bad request. For example, the condition value cannot be parsed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: Forbidden. The user doesn't have permissions to read the entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: Not found. MetaClass for the entity with the given name not\n            found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n    post:\n      tags:\n        - Entities\n      summary: Find entities by filter conditions\n      description: |2\n\n        Finds entities by filter conditions. Works like the corresponding GET method, but filter definition and all request parameters are\n        passed in the request body as JSON object. All possible parameters (\"fetchPlan\", \"sort\", \"returnNulls\", etc.) are the same as in the\n        GET version of the `/search` operation.\n\n        Request body example:\n\n        ```json\n        {\n            \"filter\": {\n              \"conditions\": [\n                  {\n                      \"group\": \"OR\",\n                      \"conditions\": [\n                          {\n                              \"property\": \"stringField\",\n                              \"operator\": \"startsWith\",\n                              \"value\": \"ABC\"\n                          },\n                          {\n                              \"property\": \"relatedEntity.intField\",\n                              \"operator\": \"\u003e\",\n                              \"value\": 100\n                          }\n                      ]\n                  },\n                  {\n                      \"property\": \"booleanField\",\n                      \"operator\": \"=\",\n                      \"value\": true\n                  }\n              ]\n            },\n            \"fetchPlan\": \"someFetchPlanName\",\n            \"returnCount\": true\n        }\n        ```\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success. Entities that conforms filter conditions are returned\n            in the response body.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/entityFull'\n        400:\n          description: Bad request. For example, the condition value cannot be parsed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        403:\n          description: Forbidden. The user doesn't have permissions to read the entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: Not found. MetaClass for the entity with the given name not\n            found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /queries/{entityName}:\n    get:\n      tags:\n        - Queries\n      summary: Get a list of queries\n      description: |\n        Gets a list of predefined queries for the entity\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/predefinedQuery'\n        403:\n          description: Forbidden. The user doesn't have permissions to read the entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: |\n            MetaClass not found.\n          content: {}\n  /queries/{entityName}/{queryName}:\n    get:\n      tags:\n        - Queries\n      summary: Execute a query\n      description: |\n        Executes a predefined query. Query parameters values must be defined in the request parameters with the same name.\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n        - name: queryName\n          in: path\n          description: Query name\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: Number of extracted entities\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: Position of the first result to retrieve\n          schema:\n            type: string\n        - name: fetchPlan\n          in: query\n          description: |\n            Name of the fetch plan which is used for loading the entity. Specify this parameter if you want to extract entities with the fetch plan\n            other than it is defined in the REST queries configuration file.\n          schema:\n            type: string\n        - name: returnNulls\n          in: query\n          description: Specifies whether null fields will be written to the result JSON\n          schema:\n            type: boolean\n        - name: returnCount\n          in: query\n          description: Specifies whether the total count of entities should be returned\n            in the 'X-Total-Count' header\n          schema:\n            type: boolean\n        - name: dynamicAttributes\n          in: query\n          description: Specifies whether entity dynamic attributes should be returned\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: Success. A list of entities is returned in the response body.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/entityFull'\n        403:\n          description: Forbidden. The user doesn't have permissions to read the entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: |\n            MetaClass not found or query with the given name not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n    post:\n      tags:\n        - Queries\n      summary: Execute a query\n      description: |\n        Executes a predefined query. Query parameters must be passed in the request body as JSON map.\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n        - name: queryName\n          in: path\n          description: Query name\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: Number of extracted entities\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: Position of the first result to retrieve\n          schema:\n            type: string\n        - name: fetchPlan\n          in: query\n          description: |\n            Name of the fetch plan which is used for loading the entity. Specify this parameter if you want to extract entities with the fetch plan\n            other than it is defined in the REST queries configuration file.\n          schema:\n            type: string\n        - name: returnNulls\n          in: query\n          description: Specifies whether null fields will be written to the result JSON\n          schema:\n            type: boolean\n        - name: returnCount\n          in: query\n          description: Specifies whether the total count of entities should be returned\n            in the 'X-Total-Count' header\n          schema:\n            type: boolean\n        - name: dynamicAttributes\n          in: query\n          description: Specifies whether entity dynamic attributes should be returned\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: Success. A list of entitie is returned in the response body.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/entityFull'\n        403:\n          description: Forbidden. The user doesn't have permissions to read the entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: |\n            MetaClass not found or query with the given name not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /queries/{entityName}/{queryName}/count:\n    get:\n      tags:\n        - Queries\n      summary: Return a number of entities in query result\n      description: |\n        Returns a number of entities that matches the query. You can use the `all` keyword for the `queryNameParam`\n        to get the number of all available entities.\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n        - name: queryName\n          in: path\n          description: Query name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: Count\n                type: integer\n        403:\n          description: Forbidden. The user doesn't have permissions to read the entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: |\n            MetaClass not found or query with the given name not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n    post:\n      tags:\n        - Queries\n      summary: Return a number of entities in query result\n      description: |\n        Returns a number of entities that matches the query. You can use the `all` keyword for the `queryNameParam`\n        to get the number of all available entities.\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n        - name: queryName\n          in: path\n          description: Query name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: Count\n                type: integer\n        403:\n          description: Forbidden. The user doesn't have permissions to read the entity.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        404:\n          description: |\n            MetaClass not found or query with the given name not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /services/{serviceName}:\n    get:\n      tags:\n        - Services\n      summary: Get a list of available service methods\n      description: |\n        Returns a list of available service methods\n      parameters:\n        - name: serviceName\n          in: path\n          description: Service name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/serviceInfo'\n        403:\n          description: Forbidden. The user doesn't have permissions to invoke the\n            service method.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /services/{serviceName}/{methodName}:\n    get:\n      tags:\n        - Services\n      summary: Execute service method\n      description: |\n        Executes the service method. This request expects query parameters with the names defined in services configuration\n        on the middleware.\n      parameters:\n        - name: serviceName\n          in: path\n          description: Service name\n          required: true\n          schema:\n            type: string\n        - name: methodName\n          in: path\n          description: Method name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: |\n            Returns the result of the method execution. It can be of simple datatype\n            as well as JSON that represents an entity or entities collection.\n          content:\n            application/json:\n              schema:\n                type: string\n        204:\n          description: |\n            No content. This status is returned when the service method was executed successfully but returns null or\n            is of void type.\n          content: {}\n        403:\n          description: Forbidden. The user doesn't have permissions to invoke the\n            service method.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n    post:\n      tags:\n        - Services\n      summary: Execute service method\n      description: |\n        Executes a method of the service\n      parameters:\n        - name: serviceName\n          in: path\n          description: Service name\n          required: true\n          schema:\n            type: string\n        - name: methodName\n          in: path\n          description: Method name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: |\n          JSON object that contains fields with parameter values. Parameter names are defined in services configuration\n          on the middleware. An entity, entities collection or POJO can be passed as a parameter.\n          If the parameter is entities collection then each entity in the passed JSON array must include the '_entityName'\n          field with the meta class name as a value.\n        content:\n          application/json:\n            schema:\n              type: string\n        required: true\n      responses:\n        200:\n          description: |\n            Returns the result of the method execution. It can be of simple datatype\n            as well as JSON that represents an entity, entities collection or POJO.\n          content: {}\n        204:\n          description: |\n            No content. This status is returned when the service method was executed successfully but returns null or\n            is of void type.\n          content: {}\n        403:\n          description: Forbidden. The user doesn't have permissions to invoke the\n            service method.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      x-codegen-request-body-name: paramsObject\n  /files:\n    post:\n      tags:\n        - Files\n      summary: Upload a file\n      description: |\n        Uploads a file. The method behavior may be different depending of the 'Content-Type' header value.\n\n        If the header value is 'multipart/form-data' then file contents must be put to the part called 'file'.\n\n        If the 'Content-Type' header has some other value then file contents must be passed in the request body.\n        The 'Content-Length' header will be used for FileDescriptor 'size' field value.\n\n        File upload may be disabled for the security role using the `jmix.restApi.fileUpload.enabled` specific permission.\n      parameters:\n        - name: name\n          in: query\n          description: |\n            The file name. If this parameter is missing then a FileDescriptor id will be used as a file name. In case of\n            `multipart\\form-data` request a file name may be taken from the `filename` attribute of the `Content-Disposition`\n            header.\n          schema:\n            type: string\n      responses:\n        201:\n          description: |\n            File uploaded. FileDescriptor information is returned in the response body.\n          headers:\n            location:\n              description: A URL the uploaded file can be downloaded with\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/fileInfo'\n  /files/{id}:\n    get:\n      tags:\n        - Files\n      summary: Download the file\n      description: Downloads the file\n      parameters:\n        - name: id\n          in: path\n          description: |\n            FileDescriptor identifier\n          required: true\n          schema:\n            type: string\n        - name: attachment\n          in: query\n          description: |\n            If set to 'true' then the 'Content-Disposition' header of the response will be set to 'attachment'. 'inline' value\n            will be used otherwise.\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: Successfully downloaded. The file contents is returned in the\n            response body.\n          content: {}\n        404:\n          description: File with the given ID not found\n          content: {}\n  /metadata/entities:\n    get:\n      tags:\n        - Metadata\n      summary: Get all entities metadata\n      description: Gets all entities metadata\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/entityMetadata'\n  /metadata/entities/{entityName}:\n    get:\n      tags:\n        - Metadata\n      summary: Get entity metadata\n      description: Gets entity metadata\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/entityMetadata'\n        404:\n          description: |\n            MetaClass not found or query with the given name not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /metadata/entities/{entityName}/fetchPlans:\n    get:\n      tags:\n        - Metadata\n      summary: Get all fetch plans for the entity\n      description: Gets all fetch plans for the entity\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/fetchPlanInfo'\n        404:\n          description: |\n            MetaClass not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /metadata/entities/{entityName}/fetchPlans/{fetchPlanName}:\n    get:\n      tags:\n        - Metadata\n      summary: Get the fetch plan\n      description: Gets the fetch plan\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n        - name: fetchPlanName\n          in: path\n          description: Fetch plan name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/fetchPlanInfo'\n        404:\n          description: |\n            MetaClass not found or fetch plan with the given name not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /metadata/enums:\n    get:\n      tags:\n        - Metadata\n      summary: Get all enums metadata\n      description: Gets all enums metadata\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/enumMetadata'\n  /metadata/enums/{enumName}:\n    get:\n      tags:\n        - Metadata\n      summary: Get enum metadata\n      description: Gets enum metadata\n      parameters:\n        - name: enumName\n          in: path\n          description: Enum name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/enumMetadata'\n        404:\n          description: |\n            Enum not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /metadata/datatypes:\n    get:\n      tags:\n        - Metadata\n      summary: Get datatypes information\n      description: Gets datatypes information\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/datatype'\n  /messages/entities:\n    get:\n      tags:\n        - Messages\n      summary: Get localized messages for all entities and their attributes\n      description: |\n        Method gets localized messages for all entities and their attributes. It returns a JSON object that represents\n        a map of localized messages. The key is entity or entity property name, the value is localized message.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n  /messages/entities/{entityName}:\n    get:\n      tags:\n        - Messages\n      summary: Get localized messages for entity and its attributes\n      description: |\n        Method gets localized messages for entity and its attributes. It returns a JSON object that represents\n        a map of localized messages. The key is entity or entity property name, the value is localized message.\n      parameters:\n        - name: entityName\n          in: path\n          description: Entity name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n        404:\n          description: |\n            MetaClass not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /messages/enums:\n    get:\n      tags:\n        - Messages\n      summary: Get localized messages for all enums and their valus\n      description: |\n        Method gets localized messages for all enums and their valus. It returns a JSON object that represents\n        a map of localized messages. The key is enum or its value, the value is localized message.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n  /messages/enums/{enumName}:\n    get:\n      tags:\n        - Messages\n      summary: Get localized messages for enum and its values\n      description: |\n        Method gets localized messages for enum and its values. It returns a JSON object that represents\n        a map of localized messages. The key is enum or its value, the value is localized message.\n      parameters:\n        - name: enumName\n          in: path\n          description: Full enum class name (including package)\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n        404:\n          description: |\n            MetaClass not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /permissions:\n    get:\n      tags:\n        - Permissions\n      summary: Get an information about current user security permissions\n      description: |\n        Returns an object that contains lists of current user authorites (i.e. roles),\n        permissions on CRUD operations with entities, entity attributes, specific permissions\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n  /userInfo:\n    get:\n      tags:\n        - UserInfo\n      summary: Get the current user information\n      description: Gets the current user information\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/userInfo'\n  /docs/openapi.{format}:\n    get:\n      tags:\n        - Documentation\n      summary: Get the REST API swagger documentation\n      description: Gets the swagger documentation in the JSON or YAML formats\n      parameters:\n        - name: format\n          in: path\n          description: swagger format (json or yaml)\n          required: true\n          schema:\n            type: string\n            default: yaml\n      responses:\n        200:\n          description: Success\n          content: {}\ncomponents:\n  schemas:\n    oauthError:\n      type: object\n      properties:\n        error:\n          type: string\n          description: Error message\n        error_description:\n          type: string\n          description: Detailed error description\n    error:\n      type: object\n      properties:\n        error:\n          type: string\n          description: Error message\n        details:\n          type: string\n          description: Detailed error description\n    token:\n      type: object\n      properties:\n        access_token:\n          type: string\n          example: ead2bcb0-6fed-42ec-8a8f-c3196d038d8b\n        token_type:\n          type: string\n          example: password\n        refresh_token:\n          type: string\n          example: fd00550e-5bb0-41b6-89d6-57bbfb6732a1\n        expires_in:\n          type: string\n          example: \"3600\"\n        scope:\n          type: string\n          example: rest-api\n    entity:\n      type: object\n      properties:\n        id:\n          type: string\n          example: 4d8ef1d4-90b6-c075-8bfd-79181ff889ef\n        otherEntityFields:\n          type: string\n          example: There must be a set of entity fields instead of this one here\n    entityFull:\n      required:\n        - _entityName\n        - id\n      type: object\n      properties:\n        id:\n          type: string\n          example: 4d8ef1d4-90b6-c075-8bfd-79181ff889ef\n        _entityName:\n          type: string\n          description: Entity name\n          example: sec$User\n        _instanceName:\n          type: string\n          description: Entity instance name. This value must be used for displaying\n            the entity in list.\n          example: Smith [smith]\n        otherEntityFields:\n          type: string\n          description: There must be a set of entity fields instead of this one here.\n          example: There must be a set of entity fields instead of this one here\n    predefinedQuery:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Query name\n          example: usersByLastName\n        jpql:\n          type: string\n          description: JPQL query\n          example: select u from sec$User u where u.lastName = :lastName\n        entityName:\n          type: string\n          description: Entity name\n          example: sec$User\n        fetchPlanName:\n          type: string\n          description: Fetch plan name\n          example: user.edit\n        params:\n          type: object\n          properties:\n            name:\n              type: string\n              description: Parameter name\n              example: lastName\n            type:\n              type: string\n              description: Parameter type. The fully qualified java class name or\n                primitive type name is returned here.\n              example: java.lang.String\n          description: Collection of query parameters\n    serviceInfo:\n      type: object\n      properties:\n        name:\n          type: string\n          example: app_MyService\n        methods:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n                description: Method argument name.\n                example: doSomething\n              type:\n                type: string\n                description: Method argument type. A fully qualified java class name\n                  is returned here.\n                example: java.lang.String\n    permissionEntityItem:\n      type: object\n      properties:\n        target:\n          type: string\n          example: app$Order:create\n        value:\n          type: integer\n          example: 1\n    permissionAttributeItem:\n      type: object\n      properties:\n        target:\n          type: string\n          example: app$Order:number\n        value:\n          type: integer\n          example: 1\n    permission:\n      type: object\n      properties:\n        entities:\n          type: array\n          items:\n            $ref: '#/components/schemas/permissionAttributeItem'\n        entityAttributes:\n          type: array\n          items:\n            $ref: '#/components/schemas/permissionEntityItem'\n    entityMetadata:\n      type: object\n      properties:\n        entityName:\n          type: string\n          example: ref$Driver\n        ancestor:\n          type: string\n          example: sys$StandardEntity\n        properties:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n                example: name\n              attributeType:\n                type: string\n                enum:\n                  - DATATYPE\n                  - ENUM\n                  - ASSOCIATION\n                  - COMPOSITION\n              type:\n                type: string\n                description: |\n                  For a simple datatype there will be a datatype name here (string, int, decimal, boolean, date, dateTime, etc.)\n                  You can find all simple datatype names in the source code of the Datatypes class in the systemDatatypeNames property.\n                  If the property is the link to the entity then an entity name will be placed to this field, e.g. ref$Colour\n                example: string\n              cardinality:\n                type: string\n                enum:\n                  - NONE\n                  - ONE_TO_ONE\n                  - MANY_TO_ONE\n                  - ONE_TO_MANY\n                  - MANY_TO_MANY\n              mandatory:\n                type: boolean\n              readOnly:\n                type: boolean\n              persistent:\n                type: boolean\n    enumMetadata:\n      type: object\n      properties:\n        name:\n          type: string\n          example: com.company.app.core.entity.DriverStatus\n        values:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n                example: ACTIVE\n              id:\n                type: string\n                description: enum id - the value that is stored in the database\n                example: \"10\"\n              caption:\n                type: string\n                description: localized enum value\n                example: Active\n    datatype:\n      type: object\n      properties:\n        name:\n          type: string\n          example: decimal\n        otherFields:\n          type: string\n          description: All other fields that are defined in the `datatypes.xml` file,\n            e.g. format, decimalSeparator, etc.\n          example: all other fields that are defined in the `datatypes.xml` file,\n            e.g. format, decimalSeparator, etc.\n    userInfo:\n      type: object\n      properties:\n        username:\n          type: string\n        locale:\n          type: string\n          example: en_US\n        attributes:\n          type: object\n          example:\n            id: 232678a5-bb0b-4a7d-9132-18bbe79e013a\n            username: admin\n            firstName: Bob\n            lastName: Martin\n            email: bob.martin@test.com\n            active: true\n          description: All user local attributes in case of user implements the UserDetails, except attributes annotated as @Secret.\n    fileInfo:\n      type: object\n      properties:\n        id:\n          type: string\n          example: c994111a-cdfa-9695-95fc-bbbb63a504a7\n        name:\n          type: string\n          example: sample-file.docx\n        size:\n          type: number\n          example: 105396.0\n    fetchPlanInfo:\n      type: object\n      properties:\n        name:\n          type: string\n          example: user.edit\n        entity:\n          type: string\n          example: sec$User\n        properties:\n          type: array\n          description: |\n            The array of properties may be of mixed type. If some property is a reference to another entity then\n            a nested fetch plan object will be returned instead of the string with the property name.\n          example:\n            - firstName\n            - lastName\n            - login\n          items:\n            type: string\n  responses:\n    metaClassNotFoundResponse:\n      description: Not found. MetaClass for the entity with the given name not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n  parameters:\n    entityNameParam:\n      name: entityName\n      in: path\n      description: Entity name\n      required: true\n      schema:\n        type: string\n    entityIdParam:\n      name: entityId\n      in: path\n      description: Entity identifier\n      required: true\n      schema:\n        type: string\n    queryNameParam:\n      name: queryName\n      in: path\n      description: Query name\n      required: true\n      schema:\n        type: string\n    serviceNameParam:\n      name: serviceName\n      in: path\n      description: Service name\n      required: true\n      schema:\n        type: string\n    methodNameParam:\n      name: methodName\n      in: path\n      description: Method name\n      required: true\n      schema:\n        type: string\n    entityFetchPlanParam:\n      name: fetchPlan\n      in: query\n      description: Name of the fetch plan which is used for loading the entity\n      schema:\n        type: string\n    returnNullsParam:\n      name: returnNulls\n      in: query\n      description: Specifies whether null fields will be written to the result JSON\n      schema:\n        type: boolean\n    returnCountParam:\n      name: returnCount\n      in: query\n      description: Specifies whether the total count of entities should be returned\n        in the 'X-Total-Count' header\n      schema:\n        type: boolean\n    dynamicAttributesParam:\n      name: dynamicAttributes\n      in: query\n      description: Specifies whether entity dynamic attributes should be returned\n      schema:\n        type: boolean\n  requestBodies:\n    entityJsonParam:\n      description: JSON object with the entity\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/entity'\n      required: false\n  securitySchemes:\n    oauth2:\n      type: oauth2\n      flows:\n        password:\n          tokenUrl: http://localhost:8080/rest/oauth/token\n          scopes:\n            rest-api: use REST API\n    tokenEndpointBasic:\n      type: http\n      scheme: basic\n",
			"canonicalURL": "/github.com/jmix-framework/jmix@e56dc5ea54cf1fcecd191eddada369bf6df714bd/-/blob/jmix-rest/rest/src/main/resources/io/jmix/rest/rest-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/jmix-framework/jmix/blob/e56dc5ea54cf1fcecd191eddada369bf6df714bd/jmix-rest/rest/src/main/resources/io/jmix/rest/rest-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/docs/openapi.{format}\": get: security: security \"oauth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}