{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/scionproto/scion"
		},
		"file": {
			"name": "router.gen.yml",
			"size": 0,
			"path": "spec/router.gen.yml",
			"byteSize": 10385,
			"content": "# GENERATED FILE DO NOT EDIT\nopenapi: 3.0.2\ninfo:\n  description: API for the SCION Router\n  title: Router Service API\n  version: 0.0.1\nservers:\n  - url: http://{host}:{port}/api/v1\n    variables:\n      host:\n        default: localhost\n      port:\n        default: '30442'\ntags:\n  - name: interface\n    description: Everything related to SCION interfaces.\n  - name: common\n    description: Common API exposed by SCION services.\npaths:\n  /info:\n    get:\n      tags:\n        - common\n      summary: Basic information page about the control service process.\n      operationId: get-info\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            text/plain:\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /log/level:\n    get:\n      tags:\n        - common\n      summary: Get logging level\n      operationId: get-log-level\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogLevel'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n    put:\n      tags:\n        - common\n      summary: Set logging level\n      operationId: set-log-level\n      requestBody:\n        description: Logging Level\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LogLevel'\n        required: true\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogLevel'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /config:\n    get:\n      tags:\n        - common\n      summary: Prints the TOML configuration file.\n      operationId: get-config\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            text/plain:\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/BadRequest'\n  /interfaces:\n    get:\n      tags:\n        - interface\n      summary: List the SCION interfaces\n      description: List the SCION interfaces that are configured on the router.\n      operationId: get-interfaces\n      responses:\n        '200':\n          description: List of SCION interfaces.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InterfacesResponse'\n        '400':\n          description: Invalid request.\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Problem'\ncomponents:\n  schemas:\n    StandardError:\n      type: object\n      properties:\n        error:\n          type: string\n          description: Error message\n      required:\n        - error\n    LogLevel:\n      type: object\n      properties:\n        level:\n          type: string\n          example: info\n          description: Logging level\n          enum:\n            - debug\n            - info\n            - error\n      required:\n        - level\n    IsdAs:\n      title: ISD-AS Identifier\n      type: string\n      pattern: ^\\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\\d+$\n      example: 1-ff00:0:110\n    InterfaceNeighbor:\n      title: Neighboring SCION interface endpoint of the link.\n      type: object\n      required:\n        - isd_as\n        - address\n      properties:\n        isd_as:\n          $ref: '#/components/schemas/IsdAs'\n        address:\n          description: UDP/IP underlay address of the SCION Interface.\n          type: string\n          example: 192.168.2.2:31000\n    ScionMTU:\n      description: \u003e-\n        The maximum transmission unit in bytes for SCION packets. This\n        represents the protocol data unit (PDU) of the SCION layer and is\n        usually calculated as maximum Ethernet payload - IP Header - UDP Header.\n      type: integer\n      example: 1472\n    BFD:\n      title: Bidirectional Forwarding Detection configuration of an interface.\n      type: object\n      required:\n        - desired_minimum_tx_interval\n        - detection_multiplier\n        - enabled\n        - required_minimum_receive\n      properties:\n        desired_minimum_tx_interval:\n          description: \u003e-\n            The minimum interval between transmission of BFD control packets\n            that the operator desires. This value is advertised to the peer,\n            however the actual interval used is specified by taking the maximum\n            of desired-minimum-tx-interval and the value of the remote\n            required-minimum-receive interval value.\n          type: string\n          example: 200ms\n        detection_multiplier:\n          description: \u003e-\n            The number of packets that must be missed to declare this session as\n            down. The detection interval for the BFD session is calculated by\n            multiplying the value of the negotiated transmission interval by\n            this value.\n          type: integer\n          example: 3\n        enabled:\n          description: \u003e-\n            Indication of whether BFD is enabled and configured on this\n            interface.\n          type: boolean\n          example: true\n        required_minimum_receive:\n          description: \u003e-\n            The minimum interval between received BFD control packets that this\n            system should support. This value is advertised to the remote peer\n            to indicate the maximum frequency (i.e., minimum inter-packet\n            interval) between BFD control packets that is acceptable to the\n            local system.\n          type: string\n          example: 200ms\n    LinkState:\n      type: string\n      example: UP\n      enum:\n        - UP\n        - DOWN\n    LinkRelationship:\n      type: string\n      example: CHILD\n      enum:\n        - CORE\n        - CHILD\n        - PARENT\n        - PEER\n    Interface:\n      title: SCION Interface on the router\n      type: object\n      required:\n        - interface_id\n        - neighbor\n        - scion_mtu\n        - bfd\n        - state\n        - relationship\n        - internal_interface\n      properties:\n        interface_id:\n          description: SCION interface identifier.\n          type: integer\n          example: 3\n        neighbor:\n          $ref: '#/components/schemas/InterfaceNeighbor'\n        scion_mtu:\n          $ref: '#/components/schemas/ScionMTU'\n        bfd:\n          $ref: '#/components/schemas/BFD'\n        state:\n          $ref: '#/components/schemas/LinkState'\n        relationship:\n          $ref: '#/components/schemas/LinkRelationship'\n        internal_interface:\n          description: The address of internal SCION interface of the router.\n          type: string\n          example: 192.168.2.2:31000\n    SiblingNeighbor:\n      title: Neighboring SCION interface endpoint of the link.\n      type: object\n      required:\n        - isd_as\n      properties:\n        isd_as:\n          $ref: '#/components/schemas/IsdAs'\n    SiblingInterface:\n      title: Sibling Interfaces\n      type: object\n      required:\n        - interface_id\n        - internal_interface\n        - neighbor\n        - scion_mtu\n        - relationship\n        - state\n      properties:\n        interface_id:\n          description: SCION interface identifier.\n          type: integer\n          example: 3\n        internal_interface:\n          description: Internal address of the local router.\n          type: string\n          example: 192.168.2.2:31000\n        neighbor:\n          $ref: '#/components/schemas/SiblingNeighbor'\n        scion_mtu:\n          $ref: '#/components/schemas/ScionMTU'\n        relationship:\n          $ref: '#/components/schemas/LinkRelationship'\n        state:\n          $ref: '#/components/schemas/LinkState'\n    InterfacesResponse:\n      title: Response listing local and sibling interfaces\n      type: object\n      properties:\n        interfaces:\n          type: array\n          items:\n            $ref: '#/components/schemas/Interface'\n        sibling_interfaces:\n          type: array\n          items:\n            $ref: '#/components/schemas/SiblingInterface'\n    Problem:\n      type: object\n      required:\n        - status\n        - title\n      properties:\n        type:\n          type: string\n          format: uri-reference\n          description: \u003e-\n            A URI reference that uniquely identifies the problem type only in\n            the context of the provided API. Opposed to the specification in\n            RFC-7807, it is neither recommended to be dereferencable and point\n            to a human-readable documentation nor globally unique for the\n            problem type.\n          default: about:blank\n          example: /problem/connection-error\n        title:\n          type: string\n          description: \u003e-\n            A short summary of the problem type. Written in English and readable\n            for engineers, usually not suited for non technical stakeholders and\n            not localized.\n          example: Service Unavailable\n        status:\n          type: integer\n          description: \u003e-\n            The HTTP status code generated by the origin server for this\n            occurrence of the problem.\n          minimum: 100\n          maximum: 599\n          example: 503\n        detail:\n          type: string\n          description: \u003e-\n            A human readable explanation specific to this occurrence of the\n            problem that is helpful to locate the problem and give advice on how\n            to proceed. Written in English and readable for engineers, usually\n            not suited for non technical stakeholders and not localized.\n          example: Connection to database timed out\n        instance:\n          type: string\n          format: uri-reference\n          description: \u003e-\n            A URI reference that identifies the specific occurrence of the\n            problem, e.g. by adding a fragment identifier or sub-path to the\n            problem type. May be used to locate the root of this problem in the\n            source code.\n          example: /problem/connection-error#token-info-read-timed-out\n  responses:\n    BadRequest:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/StandardError'\n",
			"canonicalURL": "/github.com/scionproto/scion@93f69bdb1527af31965c1bc312abba21091bfc80/-/blob/spec/router.gen.yml",
			"externalURLs": [
				{
					"url": "https://github.com/scionproto/scion/blob/93f69bdb1527af31965c1bc312abba21091bfc80/spec/router.gen.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/config\": get: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}