{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stackql/stackql-provider-registry"
		},
		"file": {
			"name": "oauth2-v2.yaml",
			"size": 0,
			"path": "providers/src/googleapis.com/v0.1.1/services/oauth2-v2.yaml",
			"byteSize": 9233,
			"content": "components:\n  parameters:\n    alt:\n      description: Data format for the response.\n      in: query\n      name: alt\n      schema:\n        enum:\n        - json\n        type: string\n    fields:\n      description: Selector specifying which fields to include in a partial response.\n      in: query\n      name: fields\n      schema:\n        type: string\n    key:\n      description: API key. Your API key identifies your project and provides you\n        with API access, quota, and reports. Required unless you provide an OAuth\n        2.0 token.\n      in: query\n      name: key\n      schema:\n        type: string\n    oauth_token:\n      description: OAuth 2.0 token for the current user.\n      in: query\n      name: oauth_token\n      schema:\n        type: string\n    prettyPrint:\n      description: Returns response with indentations and line breaks.\n      in: query\n      name: prettyPrint\n      schema:\n        type: boolean\n    quotaUser:\n      description: An opaque string that represents a user for quota purposes. Must\n        not exceed 40 characters.\n      in: query\n      name: quotaUser\n      schema:\n        type: string\n    userIp:\n      description: Deprecated. Please use quotaUser instead.\n      in: query\n      name: userIp\n      schema:\n        type: string\n  schemas:\n    Tokeninfo:\n      properties:\n        audience:\n          description: Who is the intended audience for this token. In general the\n            same as issued_to.\n          type: string\n        email:\n          description: The email address of the user. Present only if the email scope\n            is present in the request.\n          type: string\n        expires_in:\n          description: The expiry time of the token, as number of seconds left until\n            expiry.\n          format: int32\n          type: integer\n        issued_to:\n          description: To whom was the token issued to. In general the same as audience.\n          type: string\n        scope:\n          description: The space separated list of scopes granted to this token.\n          type: string\n        user_id:\n          description: The obfuscated user id.\n          type: string\n        verified_email:\n          description: Boolean flag which is true if the email address is verified.\n            Present only if the email scope is present in the request.\n          type: boolean\n      type: object\n    Userinfo:\n      properties:\n        email:\n          description: The user's email address.\n          type: string\n        family_name:\n          description: The user's last name.\n          type: string\n        gender:\n          description: The user's gender.\n          type: string\n        given_name:\n          description: The user's first name.\n          type: string\n        hd:\n          description: The hosted domain e.g. example.com if the user is Google apps\n            user.\n          type: string\n        id:\n          description: The obfuscated ID of the user.\n          type: string\n        link:\n          description: URL of the profile page.\n          type: string\n        locale:\n          description: The user's preferred locale.\n          type: string\n        name:\n          description: The user's full name.\n          type: string\n        picture:\n          description: URL of the user's picture image.\n          type: string\n        verified_email:\n          default: true\n          description: Boolean flag which is true if the email address is verified.\n            Always verified because we only return the user's primary email address.\n          type: boolean\n      type: object\n  securitySchemes:\n    Oauth2:\n      description: Oauth 2.0 implicit authentication\n      flows:\n        implicit:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            https://www.googleapis.com/auth/userinfo.email: View your email address\n            https://www.googleapis.com/auth/userinfo.profile: See your personal info,\n              including any personal info you've made publicly available\n            openid: Associate you with your personal info on Google\n      type: oauth2\n    Oauth2c:\n      description: Oauth 2.0 authorizationCode authentication\n      flows:\n        authorizationCode:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            https://www.googleapis.com/auth/userinfo.email: View your email address\n            https://www.googleapis.com/auth/userinfo.profile: See your personal info,\n              including any personal info you've made publicly available\n            openid: Associate you with your personal info on Google\n          tokenUrl: https://accounts.google.com/o/oauth2/token\n      type: oauth2\n  x-stackQL-resources:\n    userinfo:\n      id: google.oauth2.userinfo\n      methods:\n        get:\n          operation:\n            $ref: '#/paths/~1oauth2~1v2~1userinfo/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: userinfo\n      title: userinfo\n    userinfo.v2.me:\n      id: google.oauth2.userinfo.v2.me\n      methods:\n        get:\n          operation:\n            $ref: '#/paths/~1userinfo~1v2~1me/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      name: userinfo.v2.me\n      title: userinfo.v2.me\nexternalDocs:\n  url: https://developers.google.com/identity/protocols/oauth2/\ninfo:\n  contact:\n    name: Google\n    url: https://google.com\n    x-twitter: youtube\n  description: Obtains end-user authorization grants for use with other Google APIs.\n  license:\n    name: Creative Commons Attribution 3.0\n    url: http://creativecommons.org/licenses/by/3.0/\n  termsOfService: https://developers.google.com/terms/\n  title: Google OAuth2 API\n  version: v2\n  x-apiClientRegistration:\n    url: https://console.developers.google.com\n  x-apisguru-categories:\n  - analytics\n  - media\n  x-logo:\n    url: https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png\n  x-origin:\n  - converter:\n      url: https://github.com/mermade/oas-kit\n      version: 7.0.4\n    format: google\n    url: https://www.googleapis.com/discovery/v1/apis/oauth2/v2/rest\n    version: v1\n  x-preferred: true\n  x-providerName: googleapis.com\n  x-serviceName: oauth2\nopenapi: 3.0.0\npaths:\n  /oauth2/v2/tokeninfo:\n    parameters:\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/userIp'\n    post:\n      operationId: oauth2.tokeninfo\n      parameters:\n      - in: query\n        name: access_token\n        schema:\n          type: string\n      - in: query\n        name: id_token\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tokeninfo'\n          description: Successful response\n  /oauth2/v2/userinfo:\n    get:\n      operationId: oauth2.userinfo.get\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Userinfo'\n          description: Successful response\n      security:\n      - Oauth2:\n        - openid\n        Oauth2c:\n        - openid\n      - Oauth2:\n        - https://www.googleapis.com/auth/userinfo.email\n        Oauth2c:\n        - https://www.googleapis.com/auth/userinfo.email\n      - Oauth2:\n        - https://www.googleapis.com/auth/userinfo.profile\n        Oauth2c:\n        - https://www.googleapis.com/auth/userinfo.profile\n      tags:\n      - userinfo\n    parameters:\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/userIp'\n  /userinfo/v2/me:\n    get:\n      operationId: oauth2.userinfo.v2.me.get\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Userinfo'\n          description: Successful response\n      security:\n      - Oauth2:\n        - openid\n        Oauth2c:\n        - openid\n      - Oauth2:\n        - https://www.googleapis.com/auth/userinfo.email\n        Oauth2c:\n        - https://www.googleapis.com/auth/userinfo.email\n      - Oauth2:\n        - https://www.googleapis.com/auth/userinfo.profile\n        Oauth2c:\n        - https://www.googleapis.com/auth/userinfo.profile\n      tags:\n      - userinfo\n    parameters:\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/userIp'\nservers:\n- url: https://www.googleapis.com/\ntags:\n- name: userinfo\n",
			"canonicalURL": "/github.com/stackql/stackql-provider-registry@7482bc9b2425a6491d640bf921a1dc9cf508f339/-/blob/providers/src/googleapis.com/v0.1.1/services/oauth2-v2.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stackql/stackql-provider-registry/blob/7482bc9b2425a6491d640bf921a1dc9cf508f339/providers/src/googleapis.com/v0.1.1/services/oauth2-v2.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/oauth2/v2/userinfo\": get: security: security \"Oauth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}