{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/influxdata/openapi"
		},
		"file": {
			"name": "notebooksd.yml",
			"size": 0,
			"path": "contracts/svc/notebooksd.yml",
			"byteSize": 14491,
			"content": "openapi: 3.0.0\ninfo:\n  title: notebooksd\n  version: 1.0.0\nservers:\n  - url: /\npaths:\n  /notebooks:\n    get:\n      summary: get all Notebook records in org\n      operationId: getAllNotebooks\n      tags:\n        - Notebooks\n      parameters:\n        - name: orgID\n          in: query\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: returns all Notebook records in org\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Notebooks'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n    post:\n      summary: creates a Notebook\n      operationId: createNotebook\n      tags:\n        - Notebooks\n      requestBody:\n        $ref: '#/components/requestBodies/NotebookParams'\n      responses:\n        '200':\n          description: Notebook created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Notebook'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/notebooks/{notebookID}/versions/{id}':\n    get:\n      summary: get version by the notebook ID and the version ID\n      operationId: getNotebooksVersionById\n      tags:\n        - Notebooks\n        - Versions\n      parameters:\n        - name: notebookID\n          in: path\n          schema:\n            type: string\n          required: true\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: returns the Notebook record\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotebookVersion'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/notebooks/{id}/versions':\n    get:\n      summary: get notebook version by the notebook ID\n      operationId: getNotebookVersions\n      tags:\n        - Notebooks\n        - Versions\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: returns the Notebook record\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VersionHistories'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n    post:\n      summary: create a published notebook version for a notebook by its ID\n      operationId: publishNotebookVersion\n      tags:\n        - Notebooks\n        - Version\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/NoContent'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '404':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/notebooks/{id}/clone':\n    post:\n      summary: create a cloned notebook version for a notebook by its ID\n      operationId: cloneNotebook\n      tags:\n        - Notebooks\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      requestBody:\n        description: orgiD\n        content:\n          application/json:\n            schema:\n              properties:\n                orgID:\n                  type: string\n      responses:\n        '200':\n          description: returns the Notebook version\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Notebook'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '404':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/notebooks/{id}':\n    get:\n      summary: get single Notebook by its ID\n      operationId: getNotebook\n      tags:\n        - Notebooks\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: returns the Notebook record\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Notebook'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n    delete:\n      summary: deletes a single Notebook by its ID\n      operationId: deleteNotebook\n      tags:\n        - Notebooks\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '404':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n    put:\n      summary: update a single Notebook by its ID\n      operationId: putNotebook\n      tags:\n        - Notebooks\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      requestBody:\n        $ref: '#/components/requestBodies/NotebookParams'\n      responses:\n        '200':\n          description: returns the Notebook record\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Notebook'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n    patch:\n      summary: update a single Notebook by its ID\n      operationId: patchNotebook\n      tags:\n        - Notebooks\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      requestBody:\n        $ref: '#/components/requestBodies/NotebookParams'\n      responses:\n        '200':\n          description: returns the Notebook record\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Notebook'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  /notebooks/share:\n    get:\n      summary: get all Share records in org\n      operationId: getAllShares\n      tags:\n        - Share\n      parameters:\n        - name: orgID\n          in: query\n          schema:\n            type: string\n          required: true\n        - name: notebookID\n          in: query\n          schema:\n            type: string\n          required: false\n      responses:\n        '200':\n          description: returns all Share records in org\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Shares'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n    post:\n      summary: creates a Share\n      operationId: createShare\n      tags:\n        - Share\n      requestBody:\n        $ref: '#/components/requestBodies/ShareParams'\n      responses:\n        '200':\n          description: Share created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Share'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/notebooks/share/{id}':\n    delete:\n      summary: deletes a single Share by its ID\n      operationId: deleteShare\n      tags:\n        - Share\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '204':\n          $ref: '#/components/responses/ServerError'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '404':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/api/share/{id}/query/{pipeID}':\n    get:\n      summary: run the pipe's query and return the result\n      operationId: queryPipe\n      tags:\n        - Unauthenticated\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n        - name: pipeID\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: returns result from the pipe's query\n          content:\n            text/csv:\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\n  '/api/share/{id}':\n    get:\n      summary: get a notebook by an accessID\n      operationId: getSharedNotebook\n      tags:\n        - Unauthenticated\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: returns the shared Notebook record\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Notebook'\n        '400':\n          $ref: '#/components/responses/ServerError'\n        '401':\n          $ref: '#/components/responses/ServerError'\n        '500':\n          $ref: '#/components/responses/ServerError'\ncomponents:\n  requestBodies:\n    NotebookParams:\n      description: Notebook record\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/NotebookParams'\n    ShareParams:\n      description: Share record\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ShareParams'\n  schemas:\n    NotebookParams:\n      properties:\n        name:\n          type: string\n        orgID:\n          type: string\n        spec:\n          type: object\n    Notebook:\n      properties:\n        id:\n          type: string\n        isDirty:\n          type: boolean\n          description: flag set to determine whether a notebook has been published or not?\n        name:\n          type: string\n        orgID:\n          type: string\n        spec:\n          type: object\n        createdAt:\n          type: string\n          format: date-time\n        createdBy:\n          type: string\n        updatedAt:\n          type: string\n          format: date-time\n    NotebookVersion:\n      properties:\n        notebookVersion:\n          $ref: '#/components/schemas/Notebook'\n    NotebookArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/Notebook'\n    Notebooks:\n      properties:\n        flows:\n          type: array\n          items:\n            $ref: '#/components/schemas/Notebook'\n    ShareParams:\n      properties:\n        notebookID:\n          type: string\n        orgID:\n          type: string\n        region:\n          type: string\n    Share:\n      properties:\n        id:\n          type: string\n        orgID:\n          type: string\n        notebookID:\n          type: string\n        accessID:\n          type: string\n        region:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n    Shares:\n      type: array\n      items:\n        $ref: '#/components/schemas/Share'\n    VersionHistory:\n      properties:\n        id:\n          type: string\n          description: the ID of the published version\n        publishedAt:\n          type: string\n          format: date-time\n          description: the time the data was published\n        publishedBy:\n          type: string\n          description: the name of the person that published the notebook\n      required:\n        - id\n        - publishedAt\n        - publishedBy\n    VersionHistories:\n      type: array\n      items:\n        $ref: '#/components/schemas/VersionHistory'\n    Error:\n      properties:\n        code:\n          description: code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - internal error\n            - not found\n            - conflict\n            - invalid\n            - unprocessable entity\n            - empty value\n            - unavailable\n            - forbidden\n            - too many requests\n            - unauthorized\n            - method not allowed\n            - request too large\n            - unsupported media type\n        message:\n          readOnly: true\n          description: Human-readable message.\n          type: string\n        op:\n          readOnly: true\n          description: Describes the logical code operation when the error occurred. Useful for debugging.\n          type: string\n        err:\n          readOnly: true\n          description: Stack of errors that occurred during processing of the request. Useful for debugging.\n          type: string\n      required:\n        - code\n  responses:\n    NoContent:\n      description: No content\n    ServerError:\n      description: Non 2XX error response from server.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n",
			"canonicalURL": "/github.com/influxdata/openapi@a57b04ad0d88b646a1a04bd90a03477ca945fc3b/-/blob/contracts/svc/notebooksd.yml",
			"externalURLs": [
				{
					"url": "https://github.com/influxdata/openapi/blob/a57b04ad0d88b646a1a04bd90a03477ca945fc3b/contracts/svc/notebooksd.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/share/{id}/query/{pipeID}\": get: responses: 200: contents: unsupported content types: [text/csv]",
	"NotImplemented": [
		"unsupported content types"
	]
}