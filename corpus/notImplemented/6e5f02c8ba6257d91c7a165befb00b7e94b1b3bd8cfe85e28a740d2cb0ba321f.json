{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "googleapis.com-firebaseremoteconfig-v1-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/googleapis.com-firebaseremoteconfig-v1-swagger.yaml",
			"byteSize": 13855,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    name: Google\n    url: https://google.com\n  description: Firebase Remote Config API allows the 3P clients to manage Remote Config\n    conditions and parameters for Firebase applications.\n  license:\n    name: Creative Commons Attribution 3.0\n    url: http://creativecommons.org/licenses/by/3.0/\n  termsOfService: https://developers.google.com/terms/\n  title: Firebase Remote Config\n  version: v1\n  x-apiClientRegistration:\n    url: https://console.developers.google.com\n  x-apisguru-categories:\n    - backend\n  x-logo:\n    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\n  x-origin:\n    - converter:\n        url: https://github.com/lucybot/api-spec-converter\n        version: 2.6.0\n      format: google\n      url: https://firebaseremoteconfig.googleapis.com/$discovery/rest?version=v1\n      version: v1\n  x-preferred: true\n  x-providerName: googleapis.com\n  x-serviceName: firebaseremoteconfig\nexternalDocs:\n  url: https://firebase.google.com/docs/remote-config/\ntags:\n  - name: projects\npaths:\n  \"/v1/{project}/remoteConfig\":\n    get:\n      description: |-\n        Get the latest version Remote Configuration for a project.\n        Returns the RemoteConfig as the payload, and also the eTag as a\n        response header.\n      operationId: firebaseremoteconfig.projects.getRemoteConfig\n      parameters:\n        - description: |-\n            The GMP project identifier. Required.\n            See note at the beginning of this file regarding project ids.\n          in: path\n          name: project\n          required: true\n          x-reservedExpansion: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/RemoteConfig\"\n      tags:\n        - projects\n    parameters:\n      - $ref: \"#/components/parameters/_.xgafv\"\n      - $ref: \"#/components/parameters/access_token\"\n      - $ref: \"#/components/parameters/alt\"\n      - $ref: \"#/components/parameters/bearer_token\"\n      - $ref: \"#/components/parameters/callback\"\n      - $ref: \"#/components/parameters/fields\"\n      - $ref: \"#/components/parameters/key\"\n      - $ref: \"#/components/parameters/oauth_token\"\n      - $ref: \"#/components/parameters/pp\"\n      - $ref: \"#/components/parameters/prettyPrint\"\n      - $ref: \"#/components/parameters/quotaUser\"\n      - $ref: \"#/components/parameters/uploadType\"\n      - $ref: \"#/components/parameters/upload_protocol\"\n    put:\n      description: \u003e-\n        Update a RemoteConfig. We treat this as an always-existing\n\n        resource (when it is not found in our data store, we treat it as version\n\n        0, a template with zero conditions and zero parameters). Hence there are\n\n        no Create or Delete operations. Returns the updated template when\n\n        successful (and the updated eTag as a response header), or an error if\n\n        things go wrong.\n\n        Possible error messages:\n\n        * VALIDATION_ERROR (HTTP status 400) with additional details if the\n\n        template being passed in can not be validated.\n\n        * AUTHENTICATION_ERROR (HTTP status 401) if the request can not be\n\n        authenticate (e.g. no access token, or invalid access token).\n\n        * AUTHORIZATION_ERROR (HTTP status 403) if the request can not be\n\n        authorized (e.g. the user has no access to the specified project id).\n\n        * VERSION_MISMATCH (HTTP status 412) when trying to update when the\n\n        expected eTag (passed in via the \"If-match\" header) is not specified, or\n\n        is specified but does does not match the current eTag.\n\n        * Internal error (HTTP status 500) for Database problems or other internal\n\n        errors.\n      operationId: firebaseremoteconfig.projects.updateRemoteConfig\n      parameters:\n        - description: |-\n            The GMP project identifier. Required.\n            See note at the beginning of this file regarding project ids.\n          in: path\n          name: project\n          required: true\n          x-reservedExpansion: true\n          schema:\n            type: string\n        - description: \u003e-\n            Optional. Defaults to \u003ccode\u003efalse\u003c/code\u003e (UpdateRemoteConfig call\n            should\n\n            update the backend if there are no validation/interal errors). May be set\n\n            to \u003ccode\u003etrue\u003c/code\u003e to indicate that, should no validation errors occur,\n\n            the call should return a \"200 OK\" instead of performing the update. Note\n\n            that other error messages (500 Internal Error, 412 Version Mismatch, etc)\n\n            may still result after flipping to \u003ccode\u003efalse\u003c/code\u003e, even if getting a\n\n            \"200 OK\" when calling with \u003ccode\u003etrue\u003c/code\u003e.\n          in: query\n          name: validateOnly\n          schema:\n            type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RemoteConfig\"\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/RemoteConfig\"\n      tags:\n        - projects\nservers:\n  - url: https://firebaseremoteconfig.googleapis.com/\ncomponents:\n  parameters:\n    access_token:\n      description: OAuth access token.\n      in: query\n      name: access_token\n      schema:\n        type: string\n    alt:\n      description: Data format for response.\n      in: query\n      name: alt\n      schema:\n        type: string\n        enum:\n          - json\n          - media\n          - proto\n        default: json\n    bearer_token:\n      description: OAuth bearer token.\n      in: query\n      name: bearer_token\n      schema:\n        type: string\n    callback:\n      description: JSONP\n      in: query\n      name: callback\n      schema:\n        type: string\n    fields:\n      description: Selector specifying which fields to include in a partial response.\n      in: query\n      name: fields\n      schema:\n        type: string\n    key:\n      description: API key. Your API key identifies your project and provides you with API\n        access, quota, and reports. Required unless you provide an OAuth 2.0\n        token.\n      in: query\n      name: key\n      schema:\n        type: string\n    oauth_token:\n      description: OAuth 2.0 token for the current user.\n      in: query\n      name: oauth_token\n      schema:\n        type: string\n    pp:\n      description: Pretty-print response.\n      in: query\n      name: pp\n      schema:\n        type: boolean\n        default: true\n    prettyPrint:\n      description: Returns response with indentations and line breaks.\n      in: query\n      name: prettyPrint\n      schema:\n        type: boolean\n        default: true\n    quotaUser:\n      description: Available to use for quota purposes for server-side applications. Can be\n        any arbitrary string assigned to a user, but should not exceed 40\n        characters.\n      in: query\n      name: quotaUser\n      schema:\n        type: string\n    uploadType:\n      description: Legacy upload protocol for media (e.g. \"media\", \"multipart\").\n      in: query\n      name: uploadType\n      schema:\n        type: string\n    upload_protocol:\n      description: Upload protocol for media (e.g. \"raw\", \"multipart\").\n      in: query\n      name: upload_protocol\n      schema:\n        type: string\n    _.xgafv:\n      description: V1 error format.\n      in: query\n      name: $.xgafv\n      schema:\n        type: string\n        enum:\n          - \"1\"\n          - \"2\"\n  schemas:\n    RemoteConfig:\n      description: \u003e-\n        *\n\n        The RemoteConfig consists of a list of conditions (which can be\n\n        thought of as named \"if\" statements) and a map of parameters (parameter key\n\n        to a structure containing an optional default value, as well as a optional\n\n        submap of (condition name to value when that condition is true).\n      properties:\n        conditions:\n          description: \u003e-\n            The list of named conditions. The order *does* affect the semantics.\n\n            The condition_name values of these entries must be unique.\n\n\n            The resolved value of a config parameter P is determined as follow:\n\n            * Let Y be the set of values from the submap of P that refer to conditions\n              that evaluate to \u003ccode\u003etrue\u003c/code\u003e.\n            * If Y is non empty, the value is taken from the specific submap in Y whose\n              condition_name is the earliest in this condition list.\n            * Else, if P has a default value option (condition_name is empty) then\n              the value is taken from that option.\n            * Else, parameter P has no value and is omitted from the config result.\n\n\n            Example: parameter key \"p1\", default value \"v1\", submap specified as\n\n            {\"c1\": v2, \"c2\": v3} where \"c1\" and \"c2\" are names of conditions in the\n\n            condition list (where \"c1\" in this example appears before \"c2\").  The\n\n            value of p1 would be v2 as long as c1 is true.  Otherwise, if c2 is true,\n\n            p1 would evaluate to v3, and if c1 and c2 are both false, p1 would evaluate\n\n            to v1.  If no default value was specified, and c1 and c2 were both false,\n\n            no value for p1 would be generated.\n          items:\n            $ref: \"#/components/schemas/RemoteConfigCondition\"\n          type: array\n        parameters:\n          additionalProperties:\n            $ref: \"#/components/schemas/RemoteConfigParameter\"\n          description: \u003e-\n            Map of parameter keys to their optional default values and optional\n            submap\n\n            of (condition name : value). Order doesn't affect semantics, and so is\n\n            sorted by the server. The 'key' values of the params must be unique.\n          type: object\n      type: object\n    RemoteConfigCondition:\n      description: \u003e-\n        A single RemoteConfig Condition.  A list of these (because order\n        matters) are\n\n        part of a single RemoteConfig template.\n      properties:\n        description:\n          description: \u003e-\n            DO NOT USE. Implementation removed and will not be added unless\n            requested.\n\n            A description for this Condition. Length must be less than or equal to\n\n            100 characters (or more precisely, unicode code points, which is defined in\n\n            java/com/google/wireless/android/config/ConstsExporter.java).\n\n            A description may contain any Unicode characters\n          type: string\n        expression:\n          description: Required.\n          type: string\n        name:\n          description: |-\n            Required.\n            A non empty and unique name of this condition.\n          type: string\n        tagColor:\n          description: \u003e-\n            Optional.\n\n            The display (tag) color of this condition. This serves as part of a tag\n\n            (in the future, we may add tag text as well as tag color, but that is not\n\n            yet implemented in the UI).\n\n            This value has no affect on the semantics of the delivered config and it\n\n            is ignored by the backend, except for passing it through write/read\n\n            requests.\n\n            Not having this value or having the \"CONDITION_DISPLAY_COLOR_UNSPECIFIED\"\n\n            value (0) have the same meaning:  Let the UI choose any valid color when\n\n            displaying the condition.\n          enum:\n            - CONDITION_DISPLAY_COLOR_UNSPECIFIED\n            - BLUE\n            - BROWN\n            - CYAN\n            - DEEP_ORANGE\n            - GREEN\n            - INDIGO\n            - LIME\n            - ORANGE\n            - PINK\n            - PURPLE\n            - TEAL\n          type: string\n      type: object\n    RemoteConfigParameter:\n      description: \u003e-\n        While default_value and conditional_values are each optional, at least\n        one of\n\n        the two is required - otherwise, the parameter is meaningless (and an\n\n        exception will be thrown by the validation logic).\n      properties:\n        conditionalValues:\n          additionalProperties:\n            $ref: \"#/components/schemas/RemoteConfigParameterValue\"\n          description: \u003e-\n            Optional - a map of (condition_name, value). The condition_name of\n            the\n\n            highest priority (the one listed first in the conditions array) determines\n\n            the value of this parameter.\n          type: object\n        defaultValue:\n          $ref: \"#/components/schemas/RemoteConfigParameterValue\"\n        description:\n          description: \u003e-\n            Optional.\n\n            A description for this Parameter. Length must be less than or equal to\n\n            100 characters (or more precisely, unicode code points, which is defined in\n\n            java/com/google/wireless/android/config/ConstsExporter.java).\n\n            A description may contain any Unicode characters\n          type: string\n      type: object\n    RemoteConfigParameterValue:\n      description: \u003e-\n        A RemoteConfigParameter's \"value\" (either the default value, or the\n        value\n\n        associated with a condition name) is either a string, or the\n\n        \"use_in_app_default\" indicator (which means to leave out the parameter from\n\n        the returned \u003ckey, value\u003e map that is the output of the parameter fetch).\n\n        We represent the \"use_in_app_default\" as a bool, but (when using the boolean\n\n        instead of the string) it should always be \u003ccode\u003etrue\u003c/code\u003e.\n      properties:\n        useInAppDefault:\n          description: if true, omit the parameter from the map of fetched parameter values\n          type: boolean\n        value:\n          description: the string to set the parameter to\n          type: string\n      type: object\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/googleapis.com-firebaseremoteconfig-v1-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/googleapis.com-firebaseremoteconfig-v1-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1/{project}/remoteConfig\": get: responses: 200: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}