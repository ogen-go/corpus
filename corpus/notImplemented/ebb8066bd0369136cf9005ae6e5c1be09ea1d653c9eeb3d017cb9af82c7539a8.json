{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stackql/stackql-provider-registry"
		},
		"file": {
			"name": "cloudbuild-v1beta1.yaml",
			"size": 0,
			"path": "providers/src/googleapis.com/v0.1.2/services/cloudbuild-v1beta1.yaml",
			"byteSize": 71845,
			"content": "components:\n  parameters:\n    _.xgafv:\n      description: V1 error format.\n      in: query\n      name: $.xgafv\n      schema:\n        enum:\n        - '1'\n        - '2'\n        type: string\n    access_token:\n      description: OAuth access token.\n      in: query\n      name: access_token\n      schema:\n        type: string\n    alt:\n      description: Data format for response.\n      in: query\n      name: alt\n      schema:\n        enum:\n        - json\n        - media\n        - proto\n        type: string\n    callback:\n      description: JSONP\n      in: query\n      name: callback\n      schema:\n        type: string\n    fields:\n      description: Selector specifying which fields to include in a partial response.\n      in: query\n      name: fields\n      schema:\n        type: string\n    key:\n      description: API key. Your API key identifies your project and provides you\n        with API access, quota, and reports. Required unless you provide an OAuth\n        2.0 token.\n      in: query\n      name: key\n      schema:\n        type: string\n    oauth_token:\n      description: OAuth 2.0 token for the current user.\n      in: query\n      name: oauth_token\n      schema:\n        type: string\n    prettyPrint:\n      description: Returns response with indentations and line breaks.\n      in: query\n      name: prettyPrint\n      schema:\n        type: boolean\n    quotaUser:\n      description: Available to use for quota purposes for server-side applications.\n        Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n      in: query\n      name: quotaUser\n      schema:\n        type: string\n    uploadType:\n      description: Legacy upload protocol for media (e.g. \"media\", \"multipart\").\n      in: query\n      name: uploadType\n      schema:\n        type: string\n    upload_protocol:\n      description: Upload protocol for media (e.g. \"raw\", \"multipart\").\n      in: query\n      name: upload_protocol\n      schema:\n        type: string\n  schemas:\n    ApprovalConfig:\n      description: ApprovalConfig describes configuration for manual approval of a\n        build.\n      properties:\n        approvalRequired:\n          description: Whether or not approval is needed. If this is set on a build,\n            it will become pending when created, and will need to be explicitly approved\n            to start.\n          type: boolean\n      type: object\n    ApprovalResult:\n      description: ApprovalResult describes the decision and associated metadata of\n        a manual approval of a build.\n      properties:\n        approvalTime:\n          description: Output only. The time when the approval decision was made.\n          format: google-datetime\n          readOnly: true\n          type: string\n        approverAccount:\n          description: Output only. Email of the user that called the ApproveBuild\n            API to approve or reject a build at the time that the API was called.\n          readOnly: true\n          type: string\n        comment:\n          description: Optional. An optional comment for this manual approval result.\n          type: string\n        decision:\n          description: Required. The decision of this manual approval.\n          enum:\n          - DECISION_UNSPECIFIED\n          - APPROVED\n          - REJECTED\n          type: string\n        url:\n          description: Optional. An optional URL tied to this manual approval result.\n            This field is essentially the same as comment, except that it will be\n            rendered by the UI differently. An example use case is a link to an external\n            job that approved this Build.\n          type: string\n      type: object\n    ArtifactObjects:\n      description: Files in the workspace to upload to Cloud Storage upon successful\n        completion of all build steps.\n      properties:\n        location:\n          description: Cloud Storage bucket and optional object path, in the form\n            \"gs://bucket/path/to/somewhere/\". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).\n            Files in the workspace matching any path pattern will be uploaded to Cloud\n            Storage with this location as a prefix.\n          type: string\n        paths:\n          description: Path globs used to match files in the build's workspace.\n          items:\n            type: string\n          type: array\n        timing:\n          $ref: '#/components/schemas/TimeSpan'\n          description: Output only. Stores timing information for pushing all artifact\n            objects.\n          readOnly: true\n      type: object\n    ArtifactResult:\n      description: An artifact that was uploaded during a build. This is a single\n        record in the artifact manifest JSON file.\n      properties:\n        fileHash:\n          description: The file hash of the artifact.\n          items:\n            $ref: '#/components/schemas/FileHashes'\n          type: array\n        location:\n          description: The path of an artifact in a Google Cloud Storage bucket, with\n            the generation number. For example, `gs://mybucket/path/to/output.jar#generation`.\n          type: string\n      type: object\n    Artifacts:\n      description: Artifacts produced by a build that should be uploaded upon successful\n        completion of all build steps.\n      properties:\n        images:\n          description: A list of images to be pushed upon the successful completion\n            of all build steps. The images will be pushed using the builder service\n            account's credentials. The digests of the pushed images will be stored\n            in the Build resource's results field. If any of the images fail to be\n            pushed, the build is marked FAILURE.\n          items:\n            type: string\n          type: array\n        objects:\n          $ref: '#/components/schemas/ArtifactObjects'\n          description: A list of objects to be uploaded to Cloud Storage upon successful\n            completion of all build steps. Files in the workspace matching specified\n            paths globs will be uploaded to the specified Cloud Storage location using\n            the builder service account's credentials. The location and generation\n            of the uploaded objects will be stored in the Build resource's results\n            field. If any objects fail to be pushed, the build is marked FAILURE.\n      type: object\n    Build:\n      description: 'A build resource in the Cloud Build API. At a high level, a `Build`\n        describes where to find source code, how to build it (for example, the builder\n        image to run on the source), and where to store the built artifacts. Fields\n        can include the following variables, which will be expanded when the build\n        is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER:\n        the project number of the build. - $LOCATION: the location/region of the build.\n        - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository\n        name specified by RepoSource. - $BRANCH_NAME: the branch name specified by\n        RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID\n        or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the\n        specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID\n        or $COMMIT_SHA.'\n      properties:\n        approval:\n          $ref: '#/components/schemas/BuildApproval'\n          description: Output only. Describes this build's approval configuration,\n            status, and result.\n          readOnly: true\n        artifacts:\n          $ref: '#/components/schemas/Artifacts'\n          description: Artifacts produced by the build that should be uploaded upon\n            successful completion of all build steps.\n        availableSecrets:\n          $ref: '#/components/schemas/Secrets'\n          description: Secrets and secret environment variables.\n        buildTriggerId:\n          description: Output only. The ID of the `BuildTrigger` that triggered this\n            build, if it was triggered automatically.\n          readOnly: true\n          type: string\n        createTime:\n          description: Output only. Time at which the request to create the build\n            was received.\n          format: google-datetime\n          readOnly: true\n          type: string\n        failureInfo:\n          $ref: '#/components/schemas/FailureInfo'\n          description: Output only. Contains information about the build when status=FAILURE.\n          readOnly: true\n        finishTime:\n          description: Output only. Time at which execution of the build was finished.\n            The difference between finish_time and start_time is the duration of the\n            build's execution.\n          format: google-datetime\n          readOnly: true\n          type: string\n        id:\n          description: Output only. Unique identifier of the build.\n          readOnly: true\n          type: string\n        images:\n          description: A list of images to be pushed upon the successful completion\n            of all build steps. The images are pushed using the builder service account's\n            credentials. The digests of the pushed images will be stored in the `Build`\n            resource's results field. If any of the images fail to be pushed, the\n            build status is marked `FAILURE`.\n          items:\n            type: string\n          type: array\n        logUrl:\n          description: Output only. URL to logs for this build in Google Cloud Console.\n          readOnly: true\n          type: string\n        logsBucket:\n          description: Google Cloud Storage bucket where logs should be written (see\n            [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).\n            Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.\n          type: string\n        name:\n          description: 'Output only. The ''Build'' name with format: `projects/{project}/locations/{location}/builds/{build}`,\n            where {build} is a unique identifier generated by the service.'\n          readOnly: true\n          type: string\n        options:\n          $ref: '#/components/schemas/BuildOptions'\n          description: Special options for this build.\n        projectId:\n          description: Output only. ID of the project.\n          readOnly: true\n          type: string\n        queueTtl:\n          description: TTL in queue for this build. If provided and the build is enqueued\n            longer than this value, the build will expire and the build status will\n            be `EXPIRED`. The TTL starts ticking from create_time.\n          format: google-duration\n          type: string\n        results:\n          $ref: '#/components/schemas/Results'\n          description: Output only. Results of the build.\n          readOnly: true\n        secrets:\n          description: 'Secrets to decrypt using Cloud Key Management Service. Note:\n            Secret Manager is the recommended technique for managing sensitive data\n            with Cloud Build. Use `available_secrets` to configure builds to access\n            secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets'\n          items:\n            $ref: '#/components/schemas/Secret'\n          type: array\n        serviceAccount:\n          description: 'IAM service account whose credentials will be used at build\n            runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.\n            ACCOUNT can be email address or uniqueId of the service account. '\n          type: string\n        source:\n          $ref: '#/components/schemas/Source'\n          description: The location of the source files to build.\n        sourceProvenance:\n          $ref: '#/components/schemas/SourceProvenance'\n          description: Output only. A permanent fixed identifier for source.\n          readOnly: true\n        startTime:\n          description: Output only. Time at which execution of the build was started.\n          format: google-datetime\n          readOnly: true\n          type: string\n        status:\n          description: Output only. Status of the build.\n          enum:\n          - STATUS_UNKNOWN\n          - PENDING\n          - QUEUED\n          - WORKING\n          - SUCCESS\n          - FAILURE\n          - INTERNAL_ERROR\n          - TIMEOUT\n          - CANCELLED\n          - EXPIRED\n          readOnly: true\n          type: string\n        statusDetail:\n          description: Output only. Customer-readable message about the current status.\n          readOnly: true\n          type: string\n        steps:\n          description: Required. The operations to be performed on the workspace.\n          items:\n            $ref: '#/components/schemas/BuildStep'\n          type: array\n        substitutions:\n          additionalProperties:\n            type: string\n          description: Substitutions data for `Build` resource.\n          type: object\n        tags:\n          description: Tags for annotation of a `Build`. These are not docker tags.\n          items:\n            type: string\n          type: array\n        timeout:\n          description: Amount of time that this build should be allowed to run, to\n            second granularity. If this amount of time elapses, work on the build\n            will cease and the build status will be `TIMEOUT`. `timeout` starts ticking\n            from `startTime`. Default time is ten minutes.\n          format: google-duration\n          type: string\n        timing:\n          additionalProperties:\n            $ref: '#/components/schemas/TimeSpan'\n          description: 'Output only. Stores timing information for phases of the build.\n            Valid keys are: * BUILD: time to execute all build steps. * PUSH: time\n            to push all specified images. * FETCHSOURCE: time to fetch source. * SETUPBUILD:\n            time to set up build. If the build does not specify source or images,\n            these keys will not be included.'\n          readOnly: true\n          type: object\n        warnings:\n          description: Output only. Non-fatal problems encountered during the execution\n            of the build.\n          items:\n            $ref: '#/components/schemas/Warning'\n          readOnly: true\n          type: array\n      type: object\n    BuildApproval:\n      description: BuildApproval describes a build's approval configuration, state,\n        and result.\n      properties:\n        config:\n          $ref: '#/components/schemas/ApprovalConfig'\n          description: Output only. Configuration for manual approval of this build.\n          readOnly: true\n        result:\n          $ref: '#/components/schemas/ApprovalResult'\n          description: Output only. Result of manual approval for this Build.\n          readOnly: true\n        state:\n          description: Output only. The state of this build's approval.\n          enum:\n          - STATE_UNSPECIFIED\n          - PENDING\n          - APPROVED\n          - REJECTED\n          - CANCELLED\n          readOnly: true\n          type: string\n      type: object\n    BuildOperationMetadata:\n      description: Metadata for build operations.\n      properties:\n        build:\n          $ref: '#/components/schemas/Build'\n          description: The build that the operation is tracking.\n      type: object\n    BuildOptions:\n      description: Optional arguments to enable specific features of builds.\n      properties:\n        diskSizeGb:\n          description: Requested disk size for the VM that runs the build. Note that\n            this is *NOT* \"disk free\"; some of the space will be used by the operating\n            system and build utilities. Also note that this is the minimum disk size\n            that will be allocated for the build -- the build may run with a larger\n            disk than requested. At present, the maximum disk size is 1000GB; builds\n            that request more than the maximum are rejected with an error.\n          format: int64\n          type: string\n        dynamicSubstitutions:\n          description: 'Option to specify whether or not to apply bash style string\n            operations to the substitutions. NOTE: this is always enabled for triggered\n            builds and cannot be overridden in the build configuration file.'\n          type: boolean\n        env:\n          description: A list of global environment variable definitions that will\n            exist for all build steps in this build. If a variable is defined in both\n            globally and in a build step, the variable will use the build step value.\n            The elements are of the form \"KEY=VALUE\" for the environment variable\n            \"KEY\" being given the value \"VALUE\".\n          items:\n            type: string\n          type: array\n        logStreamingOption:\n          description: Option to define build log streaming behavior to Google Cloud\n            Storage.\n          enum:\n          - STREAM_DEFAULT\n          - STREAM_ON\n          - STREAM_OFF\n          type: string\n        logging:\n          description: Option to specify the logging mode, which determines if and\n            where build logs are stored.\n          enum:\n          - LOGGING_UNSPECIFIED\n          - LEGACY\n          - GCS_ONLY\n          - STACKDRIVER_ONLY\n          - CLOUD_LOGGING_ONLY\n          - NONE\n          type: string\n        machineType:\n          description: Compute Engine machine type on which to run the build.\n          enum:\n          - UNSPECIFIED\n          - N1_HIGHCPU_8\n          - N1_HIGHCPU_32\n          - E2_HIGHCPU_8\n          - E2_HIGHCPU_32\n          type: string\n        pool:\n          $ref: '#/components/schemas/PoolOption'\n          description: Optional. Specification for execution on a `WorkerPool`. See\n            [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)\n            for more information.\n        requestedVerifyOption:\n          description: Requested verifiability options.\n          enum:\n          - NOT_VERIFIED\n          - VERIFIED\n          type: string\n        secretEnv:\n          description: A list of global environment variables, which are encrypted\n            using a Cloud Key Management Service crypto key. These values must be\n            specified in the build's `Secret`. These variables will be available to\n            all build steps in this build.\n          items:\n            type: string\n          type: array\n        sourceProvenanceHash:\n          description: Requested hash for SourceProvenance.\n          items:\n            enum:\n            - NONE\n            - SHA256\n            - MD5\n            type: string\n          type: array\n        substitutionOption:\n          description: 'Option to specify behavior when there is an error in the substitution\n            checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and\n            cannot be overridden in the build configuration file.'\n          enum:\n          - MUST_MATCH\n          - ALLOW_LOOSE\n          type: string\n        volumes:\n          description: Global list of volumes to mount for ALL build steps Each volume\n            is created as an empty volume prior to starting the build process. Upon\n            completion of the build, volumes and their contents are discarded. Global\n            volume names and paths cannot conflict with the volumes defined a build\n            step. Using a global volume in a build with only one step is not valid\n            as it is indicative of a build request with an incorrect configuration.\n          items:\n            $ref: '#/components/schemas/Volume'\n          type: array\n        workerPool:\n          description: This field deprecated; please use `pool.name` instead.\n          type: string\n      type: object\n    BuildStep:\n      description: A step in the build pipeline.\n      properties:\n        args:\n          description: A list of arguments that will be presented to the step when\n            it is started. If the image used to run the step's container has an entrypoint,\n            the `args` are used as arguments to that entrypoint. If the image does\n            not define an entrypoint, the first element in args is used as the entrypoint,\n            and the remainder will be used as arguments.\n          items:\n            type: string\n          type: array\n        dir:\n          description: Working directory to use when running this step's container.\n            If this value is a relative path, it is relative to the build's working\n            directory. If this value is absolute, it may be outside the build's working\n            directory, in which case the contents of the path may not be persisted\n            across build step executions, unless a `volume` for that path is specified.\n            If the build specifies a `RepoSource` with `dir` and a step with a `dir`,\n            which specifies an absolute path, the `RepoSource` `dir` is ignored for\n            the step's execution.\n          type: string\n        entrypoint:\n          description: Entrypoint to be used instead of the build step image's default\n            entrypoint. If unset, the image's default entrypoint is used.\n          type: string\n        env:\n          description: A list of environment variable definitions to be used when\n            running a step. The elements are of the form \"KEY=VALUE\" for the environment\n            variable \"KEY\" being given the value \"VALUE\".\n          items:\n            type: string\n          type: array\n        id:\n          description: Unique identifier for this build step, used in `wait_for` to\n            reference this build step as a dependency.\n          type: string\n        name:\n          description: Required. The name of the container image that will run this\n            particular build step. If the image is available in the host's Docker\n            daemon's cache, it will be run directly. If not, the host will attempt\n            to pull the image first, using the builder service account's credentials\n            if necessary. The Docker daemon's cache will already have the latest versions\n            of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).\n            The Docker daemon will also have cached many of the layers for some popular\n            images, like \"ubuntu\", \"debian\", but they will be refreshed at the time\n            you attempt to use them. If you built an image in a previous build step,\n            it will be stored in the host's Docker daemon's cache and is available\n            to use as the name for a later build step.\n          type: string\n        pullTiming:\n          $ref: '#/components/schemas/TimeSpan'\n          description: Output only. Stores timing information for pulling this build\n            step's builder image only.\n          readOnly: true\n        script:\n          description: A shell script to be executed in the step. When script is provided,\n            the user cannot specify the entrypoint or args.\n          type: string\n        secretEnv:\n          description: A list of environment variables which are encrypted using a\n            Cloud Key Management Service crypto key. These values must be specified\n            in the build's `Secret`.\n          items:\n            type: string\n          type: array\n        status:\n          description: Output only. Status of the build step. At this time, build\n            step status is only updated on build completion; step status is not updated\n            in real-time as the build progresses.\n          enum:\n          - STATUS_UNKNOWN\n          - PENDING\n          - QUEUED\n          - WORKING\n          - SUCCESS\n          - FAILURE\n          - INTERNAL_ERROR\n          - TIMEOUT\n          - CANCELLED\n          - EXPIRED\n          readOnly: true\n          type: string\n        timeout:\n          description: Time limit for executing this build step. If not defined, the\n            step has no time limit and will be allowed to continue to run until either\n            it completes or the build itself times out.\n          format: google-duration\n          type: string\n        timing:\n          $ref: '#/components/schemas/TimeSpan'\n          description: Output only. Stores timing information for executing this build\n            step.\n          readOnly: true\n        volumes:\n          description: List of volumes to mount into the build step. Each volume is\n            created as an empty volume prior to execution of the build step. Upon\n            completion of the build, volumes and their contents are discarded. Using\n            a named volume in only one step is not valid as it is indicative of a\n            build request with an incorrect configuration.\n          items:\n            $ref: '#/components/schemas/Volume'\n          type: array\n        waitFor:\n          description: The ID(s) of the step(s) that this build step depends on. This\n            build step will not start until all the build steps in `wait_for` have\n            completed successfully. If `wait_for` is empty, this build step will start\n            when all previous build steps in the `Build.Steps` list have completed\n            successfully.\n          items:\n            type: string\n          type: array\n      type: object\n    BuiltImage:\n      description: An image built by the pipeline.\n      properties:\n        digest:\n          description: Docker Registry 2.0 digest.\n          type: string\n        name:\n          description: Name used to push the container image to Google Container Registry,\n            as presented to `docker push`.\n          type: string\n        pushTiming:\n          $ref: '#/components/schemas/TimeSpan'\n          description: Output only. Stores timing information for pushing the specified\n            image.\n          readOnly: true\n      type: object\n    CancelOperationRequest:\n      description: The request message for Operations.CancelOperation.\n      properties: {}\n      type: object\n    CreateGitHubEnterpriseConfigOperationMetadata:\n      description: Metadata for `CreateGithubEnterpriseConfig` operation.\n      properties:\n        completeTime:\n          description: Time the operation was completed.\n          format: google-datetime\n          type: string\n        createTime:\n          description: Time the operation was created.\n          format: google-datetime\n          type: string\n        githubEnterpriseConfig:\n          description: 'The resource name of the GitHubEnterprise to be created. Format:\n            `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.'\n          type: string\n      type: object\n    CreateWorkerPoolOperationMetadata:\n      description: Metadata for the `CreateWorkerPool` operation.\n      properties:\n        completeTime:\n          description: Time the operation was completed.\n          format: google-datetime\n          type: string\n        createTime:\n          description: Time the operation was created.\n          format: google-datetime\n          type: string\n        workerPool:\n          description: 'The resource name of the `WorkerPool` to create. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.'\n          type: string\n      type: object\n    DeleteGitHubEnterpriseConfigOperationMetadata:\n      description: Metadata for `DeleteGitHubEnterpriseConfig` operation.\n      properties:\n        completeTime:\n          description: Time the operation was completed.\n          format: google-datetime\n          type: string\n        createTime:\n          description: Time the operation was created.\n          format: google-datetime\n          type: string\n        githubEnterpriseConfig:\n          description: 'The resource name of the GitHubEnterprise to be deleted. Format:\n            `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.'\n          type: string\n      type: object\n    DeleteWorkerPoolOperationMetadata:\n      description: Metadata for the `DeleteWorkerPool` operation.\n      properties:\n        completeTime:\n          description: Time the operation was completed.\n          format: google-datetime\n          type: string\n        createTime:\n          description: Time the operation was created.\n          format: google-datetime\n          type: string\n        workerPool:\n          description: 'The resource name of the `WorkerPool` being deleted. Format:\n            `projects/{project}/locations/{location}/workerPools/{worker_pool}`.'\n          type: string\n      type: object\n    Empty:\n      description: 'A generic empty message that you can re-use to avoid defining\n        duplicated empty messages in your APIs. A typical example is to use it as\n        the request or the response type of an API method. For instance: service Foo\n        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON\n        representation for `Empty` is empty JSON object `{}`.'\n      properties: {}\n      type: object\n    FailureInfo:\n      description: A fatal problem encountered during the execution of the build.\n      properties:\n        detail:\n          description: Explains the failure issue in more detail using hard-coded\n            text.\n          type: string\n        type:\n          description: The name of the failure.\n          enum:\n          - FAILURE_TYPE_UNSPECIFIED\n          - PUSH_FAILED\n          - PUSH_IMAGE_NOT_FOUND\n          - PUSH_NOT_AUTHORIZED\n          - LOGGING_FAILURE\n          - USER_BUILD_STEP\n          - FETCH_SOURCE_FAILED\n          type: string\n      type: object\n    FileHashes:\n      description: Container message for hashes of byte content of files, used in\n        SourceProvenance messages to verify integrity of source input to the build.\n      properties:\n        fileHash:\n          description: Collection of file hashes.\n          items:\n            $ref: '#/components/schemas/Hash'\n          type: array\n      type: object\n    GoogleDevtoolsCloudbuildV2OperationMetadata:\n      description: Represents the metadata of the long-running operation.\n      properties:\n        apiVersion:\n          description: Output only. API version used to start the operation.\n          readOnly: true\n          type: string\n        createTime:\n          description: Output only. The time the operation was created.\n          format: google-datetime\n          readOnly: true\n          type: string\n        endTime:\n          description: Output only. The time the operation finished running.\n          format: google-datetime\n          readOnly: true\n          type: string\n        requestedCancellation:\n          description: Output only. Identifies whether the user has requested cancellation\n            of the operation. Operations that have successfully been cancelled have\n            Operation.error value with a google.rpc.Status.code of 1, corresponding\n            to `Code.CANCELLED`.\n          readOnly: true\n          type: boolean\n        statusMessage:\n          description: Output only. Human-readable status of the operation, if any.\n          readOnly: true\n          type: string\n        target:\n          description: Output only. Server-defined resource path for the target of\n            the operation.\n          readOnly: true\n          type: string\n        verb:\n          description: Output only. Name of the verb executed by the operation.\n          readOnly: true\n          type: string\n      type: object\n    HTTPDelivery:\n      description: HTTPDelivery is the delivery configuration for an HTTP notification.\n      properties:\n        uri:\n          description: The URI to which JSON-containing HTTP POST requests should\n            be sent.\n          type: string\n      type: object\n    Hash:\n      description: Container message for hash values.\n      properties:\n        type:\n          description: The type of hash that was performed.\n          enum:\n          - NONE\n          - SHA256\n          - MD5\n          type: string\n        value:\n          description: The hash value.\n          format: byte\n          type: string\n      type: object\n    InlineSecret:\n      description: Pairs a set of secret environment variables mapped to encrypted\n        values with the Cloud KMS key to use to decrypt the value.\n      properties:\n        envMap:\n          additionalProperties:\n            format: byte\n            type: string\n          description: Map of environment variable name to its encrypted value. Secret\n            environment variables must be unique across all of a build's secrets,\n            and must be used by at least one build step. Values can be at most 64\n            KB in size. There can be at most 100 secret values across all of a build's\n            secrets.\n          type: object\n        kmsKeyName:\n          description: 'Resource name of Cloud KMS crypto key to decrypt the encrypted\n            value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*'\n          type: string\n      type: object\n    ListWorkerPoolsResponse:\n      description: Response containing existing `WorkerPools`.\n      properties:\n        workerPools:\n          description: '`WorkerPools` for the specified project.'\n          items:\n            $ref: '#/components/schemas/WorkerPool'\n          type: array\n      type: object\n    NetworkConfig:\n      description: Network describes the network configuration for a `WorkerPool`.\n      properties:\n        peeredNetwork:\n          description: Required. Immutable. The network definition that the workers\n            are peered to. If this section is left empty, the workers will be peered\n            to `WorkerPool.project_id` on the service producer network. Must be in\n            the format `projects/{project}/global/networks/{network}`, where `{project}`\n            is a project number, such as `12345`, and `{network}` is the name of a\n            VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/cloud-build/docs/custom-workers/set-up-custom-worker-pool-environment#understanding_the_network_configuration_options)\n          type: string\n      type: object\n    Notification:\n      description: Notification is the container which holds the data that is relevant\n        to this particular notification.\n      properties:\n        filter:\n          description: The filter string to use for notification filtering. Currently,\n            this is assumed to be a CEL program. See https://opensource.google/projects/cel\n            for more.\n          type: string\n        httpDelivery:\n          $ref: '#/components/schemas/HTTPDelivery'\n          description: Configuration for HTTP delivery.\n        slackDelivery:\n          $ref: '#/components/schemas/SlackDelivery'\n          description: Configuration for Slack delivery.\n        smtpDelivery:\n          $ref: '#/components/schemas/SMTPDelivery'\n          description: Configuration for SMTP (email) delivery.\n        structDelivery:\n          additionalProperties:\n            description: Properties of the object.\n          description: Escape hatch for users to supply custom delivery configs.\n          type: object\n      type: object\n    NotifierConfig:\n      description: NotifierConfig is the top-level configuration message.\n      properties:\n        apiVersion:\n          description: The API version of this configuration format.\n          type: string\n        kind:\n          description: The type of notifier to use (e.g. SMTPNotifier).\n          type: string\n        metadata:\n          $ref: '#/components/schemas/NotifierMetadata'\n          description: Metadata for referring to/handling/deploying this notifier.\n        spec:\n          $ref: '#/components/schemas/NotifierSpec'\n          description: The actual configuration for this notifier.\n      type: object\n    NotifierMetadata:\n      description: NotifierMetadata contains the data which can be used to reference\n        or describe this notifier.\n      properties:\n        name:\n          description: 'The human-readable and user-given name for the notifier. For\n            example: \"repo-merge-email-notifier\".'\n          type: string\n        notifier:\n          description: 'The string representing the name and version of notifier to\n            deploy. Expected to be of the form of \"/:\". For example: \"gcr.io/my-project/notifiers/smtp:1.2.34\".'\n          type: string\n      type: object\n    NotifierSecret:\n      description: NotifierSecret is the container that maps a secret name (reference)\n        to its Google Cloud Secret Manager resource path.\n      properties:\n        name:\n          description: Name is the local name of the secret, such as the verbatim\n            string \"my-smtp-password\".\n          type: string\n        value:\n          description: 'Value is interpreted to be a resource path for fetching the\n            actual (versioned) secret data for this secret. For example, this would\n            be a Google Cloud Secret Manager secret version resource path like: \"projects/my-project/secrets/my-secret/versions/latest\".'\n          type: string\n      type: object\n    NotifierSecretRef:\n      description: NotifierSecretRef contains the reference to a secret stored in\n        the corresponding NotifierSpec.\n      properties:\n        secretRef:\n          description: The value of `secret_ref` should be a `name` that is registered\n            in a `Secret` in the `secrets` list of the `Spec`.\n          type: string\n      type: object\n    NotifierSpec:\n      description: NotifierSpec is the configuration container for notifications.\n      properties:\n        notification:\n          $ref: '#/components/schemas/Notification'\n          description: The configuration of this particular notifier.\n        secrets:\n          description: Configurations for secret resources used by this particular\n            notifier.\n          items:\n            $ref: '#/components/schemas/NotifierSecret'\n          type: array\n      type: object\n    Operation:\n      description: This resource represents a long-running operation that is the result\n        of a network API call.\n      properties:\n        done:\n          description: If the value is `false`, it means the operation is still in\n            progress. If `true`, the operation is completed, and either `error` or\n            `response` is available.\n          type: boolean\n        error:\n          $ref: '#/components/schemas/Status'\n          description: The error result of the operation in case of failure or cancellation.\n        metadata:\n          additionalProperties:\n            description: Properties of the object. Contains field @type with type\n              URL.\n          description: Service-specific metadata associated with the operation. It\n            typically contains progress information and common metadata such as create\n            time. Some services might not provide such metadata. Any method that returns\n            a long-running operation should document the metadata type, if any.\n          type: object\n        name:\n          description: The server-assigned name, which is only unique within the same\n            service that originally returns it. If you use the default HTTP mapping,\n            the `name` should be a resource name ending with `operations/{unique_id}`.\n          type: string\n        response:\n          additionalProperties:\n            description: Properties of the object. Contains field @type with type\n              URL.\n          description: The normal response of the operation in case of success. If\n            the original method returns no data on success, such as `Delete`, the\n            response is `google.protobuf.Empty`. If the original method is standard\n            `Get`/`Create`/`Update`, the response should be the resource. For other\n            methods, the response should have the type `XxxResponse`, where `Xxx`\n            is the original method name. For example, if the original method name\n            is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.\n          type: object\n      type: object\n    OperationMetadata:\n      description: Represents the metadata of the long-running operation.\n      properties:\n        apiVersion:\n          description: Output only. API version used to start the operation.\n          readOnly: true\n          type: string\n        cancelRequested:\n          description: Output only. Identifies whether the user has requested cancellation\n            of the operation. Operations that have been cancelled successfully have\n            Operation.error value with a google.rpc.Status.code of 1, corresponding\n            to `Code.CANCELLED`.\n          readOnly: true\n          type: boolean\n        createTime:\n          description: Output only. The time the operation was created.\n          format: google-datetime\n          readOnly: true\n          type: string\n        endTime:\n          description: Output only. The time the operation finished running.\n          format: google-datetime\n          readOnly: true\n          type: string\n        statusDetail:\n          description: Output only. Human-readable status of the operation, if any.\n          readOnly: true\n          type: string\n        target:\n          description: Output only. Server-defined resource path for the target of\n            the operation.\n          readOnly: true\n          type: string\n        verb:\n          description: Output only. Name of the verb executed by the operation.\n          readOnly: true\n          type: string\n      type: object\n    PoolOption:\n      description: Details about how a build should be executed on a `WorkerPool`.\n        See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)\n        for more information.\n      properties:\n        name:\n          description: The `WorkerPool` resource to execute the build on. You must\n            have `cloudbuild.workerpools.use` on the project hosting the WorkerPool.\n            Format projects/{project}/locations/{location}/workerPools/{workerPoolId}\n          type: string\n      type: object\n    ProcessAppManifestCallbackOperationMetadata:\n      description: Metadata for `ProcessAppManifestCallback` operation.\n      properties:\n        completeTime:\n          description: Time the operation was completed.\n          format: google-datetime\n          type: string\n        createTime:\n          description: Time the operation was created.\n          format: google-datetime\n          type: string\n        githubEnterpriseConfig:\n          description: 'The resource name of the GitHubEnterprise to be created. Format:\n            `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.'\n          type: string\n      type: object\n    RepoSource:\n      description: Location of the source in a Google Cloud Source Repository.\n      properties:\n        branchName:\n          description: Regex matching branches to build. The syntax of the regular\n            expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax\n          type: string\n        commitSha:\n          description: Explicit commit SHA to build.\n          type: string\n        dir:\n          description: Directory, relative to the source root, in which to run the\n            build. This must be a relative path. If a step's `dir` is specified and\n            is an absolute path, this value is ignored for that step's execution.\n          type: string\n        invertRegex:\n          description: Only trigger a build if the revision regex does NOT match the\n            revision regex.\n          type: boolean\n        projectId:\n          description: ID of the project that owns the Cloud Source Repository. If\n            omitted, the project ID requesting the build is assumed.\n          type: string\n        repoName:\n          description: Name of the Cloud Source Repository.\n          type: string\n        substitutions:\n          additionalProperties:\n            type: string\n          description: Substitutions to use in a triggered build. Should only be used\n            with RunBuildTrigger\n          type: object\n        tagName:\n          description: Regex matching tags to build. The syntax of the regular expressions\n            accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax\n          type: string\n      type: object\n    Results:\n      description: Artifacts created by the build pipeline.\n      properties:\n        artifactManifest:\n          description: Path to the artifact manifest. Only populated when artifacts\n            are uploaded.\n          type: string\n        artifactTiming:\n          $ref: '#/components/schemas/TimeSpan'\n          description: Time to push all non-container artifacts.\n        buildStepImages:\n          description: List of build step digests, in the order corresponding to build\n            step indices.\n          items:\n            type: string\n          type: array\n        buildStepOutputs:\n          description: List of build step outputs, produced by builder images, in\n            the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders)\n            can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the\n            first 4KB of data is stored.\n          items:\n            format: byte\n            type: string\n          type: array\n        images:\n          description: Container images that were built as a part of the build.\n          items:\n            $ref: '#/components/schemas/BuiltImage'\n          type: array\n        numArtifacts:\n          description: Number of artifacts uploaded. Only populated when artifacts\n            are uploaded.\n          format: int64\n          type: string\n      type: object\n    SMTPDelivery:\n      description: SMTPDelivery is the delivery configuration for an SMTP (email)\n        notification.\n      properties:\n        fromAddress:\n          description: This is the SMTP account/email that appears in the `From:`\n            of the email. If empty, it is assumed to be sender.\n          type: string\n        password:\n          $ref: '#/components/schemas/NotifierSecretRef'\n          description: The SMTP sender's password.\n        port:\n          description: The SMTP port of the server.\n          type: string\n        recipientAddresses:\n          description: This is the list of addresses to which we send the email (i.e.\n            in the `To:` of the email).\n          items:\n            type: string\n          type: array\n        senderAddress:\n          description: This is the SMTP account/email that is used to send the message.\n          type: string\n        server:\n          description: The address of the SMTP server.\n          type: string\n      type: object\n    Secret:\n      description: 'Pairs a set of secret environment variables containing encrypted\n        values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName`\n        with `available_secrets` instead of using `kmsKeyName` with `secret`. For\n        instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.'\n      properties:\n        kmsKeyName:\n          description: Cloud KMS key name to use to decrypt these envs.\n          type: string\n        secretEnv:\n          additionalProperties:\n            format: byte\n            type: string\n          description: Map of environment variable name to its encrypted value. Secret\n            environment variables must be unique across all of a build's secrets,\n            and must be used by at least one build step. Values can be at most 64\n            KB in size. There can be at most 100 secret values across all of a build's\n            secrets.\n          type: object\n      type: object\n    SecretManagerSecret:\n      description: Pairs a secret environment variable with a SecretVersion in Secret\n        Manager.\n      properties:\n        env:\n          description: Environment variable name to associate with the secret. Secret\n            environment variables must be unique across all of a build's secrets,\n            and must be used by at least one build step.\n          type: string\n        versionName:\n          description: 'Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*'\n          type: string\n      type: object\n    Secrets:\n      description: Secrets and secret environment variables.\n      properties:\n        inline:\n          description: Secrets encrypted with KMS key and the associated secret environment\n            variable.\n          items:\n            $ref: '#/components/schemas/InlineSecret'\n          type: array\n        secretManager:\n          description: Secrets in Secret Manager and associated secret environment\n            variable.\n          items:\n            $ref: '#/components/schemas/SecretManagerSecret'\n          type: array\n      type: object\n    SlackDelivery:\n      description: 'SlackDelivery is the delivery configuration for delivering Slack\n        messages via webhooks. See Slack webhook documentation at: https://api.slack.com/messaging/webhooks.'\n      properties:\n        webhookUri:\n          $ref: '#/components/schemas/NotifierSecretRef'\n          description: The secret reference for the Slack webhook URI for sending\n            messages to a channel.\n      type: object\n    Source:\n      description: Location of the source in a supported storage service.\n      properties:\n        repoSource:\n          $ref: '#/components/schemas/RepoSource'\n          description: If provided, get the source from this location in a Cloud Source\n            Repository.\n        storageSource:\n          $ref: '#/components/schemas/StorageSource'\n          description: If provided, get the source from this location in Google Cloud\n            Storage.\n        storageSourceManifest:\n          $ref: '#/components/schemas/StorageSourceManifest'\n          description: If provided, get the source from this manifest in Google Cloud\n            Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).\n      type: object\n    SourceProvenance:\n      description: Provenance of the source. Ways to find the original source, or\n        verify that some source was used for this build.\n      properties:\n        fileHashes:\n          additionalProperties:\n            $ref: '#/components/schemas/FileHashes'\n          description: Output only. Hash(es) of the build source, which can be used\n            to verify that the original source integrity was maintained in the build.\n            Note that `FileHashes` will only be populated if `BuildOptions` has requested\n            a `SourceProvenanceHash`. The keys to this map are file paths used as\n            build source and the values contain the hash values for those files. If\n            the build source came in a single package such as a gzipped tarfile (`.tar.gz`),\n            the `FileHash` will be for the single path to that file.\n          readOnly: true\n          type: object\n        resolvedRepoSource:\n          $ref: '#/components/schemas/RepoSource'\n          description: A copy of the build's `source.repo_source`, if exists, with\n            any revisions resolved.\n        resolvedStorageSource:\n          $ref: '#/components/schemas/StorageSource'\n          description: A copy of the build's `source.storage_source`, if exists, with\n            any generations resolved.\n        resolvedStorageSourceManifest:\n          $ref: '#/components/schemas/StorageSourceManifest'\n          description: A copy of the build's `source.storage_source_manifest`, if\n            exists, with any revisions resolved. This feature is in Preview.\n      type: object\n    Status:\n      description: 'The `Status` type defines a logical error model that is suitable\n        for different programming environments, including REST APIs and RPC APIs.\n        It is used by [gRPC](https://github.com/grpc). Each `Status` message contains\n        three pieces of data: error code, error message, and error details. You can\n        find out more about this error model and how to work with it in the [API Design\n        Guide](https://cloud.google.com/apis/design/errors).'\n      properties:\n        code:\n          description: The status code, which should be an enum value of google.rpc.Code.\n          format: int32\n          type: integer\n        details:\n          description: A list of messages that carry the error details. There is a\n            common set of message types for APIs to use.\n          items:\n            additionalProperties:\n              description: Properties of the object. Contains field @type with type\n                URL.\n            type: object\n          type: array\n        message:\n          description: A developer-facing error message, which should be in English.\n            Any user-facing error message should be localized and sent in the google.rpc.Status.details\n            field, or localized by the client.\n          type: string\n      type: object\n    StorageSource:\n      description: Location of the source in an archive file in Google Cloud Storage.\n      properties:\n        bucket:\n          description: Google Cloud Storage bucket containing the source (see [Bucket\n            Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).\n          type: string\n        generation:\n          description: Google Cloud Storage generation for the object. If the generation\n            is omitted, the latest generation will be used.\n          format: int64\n          type: string\n        object:\n          description: Google Cloud Storage object containing the source. This object\n            must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing\n            source to build.\n          type: string\n      type: object\n    StorageSourceManifest:\n      description: Location of the source manifest in Google Cloud Storage. This feature\n        is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).\n      properties:\n        bucket:\n          description: Google Cloud Storage bucket containing the source manifest\n            (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).\n          type: string\n        generation:\n          description: Google Cloud Storage generation for the object. If the generation\n            is omitted, the latest generation will be used.\n          format: int64\n          type: string\n        object:\n          description: Google Cloud Storage object containing the source manifest.\n            This object must be a JSON file.\n          type: string\n      type: object\n    TimeSpan:\n      description: Start and end times for a build execution phase.\n      properties:\n        endTime:\n          description: End of time span.\n          format: google-datetime\n          type: string\n        startTime:\n          description: Start of time span.\n          format: google-datetime\n          type: string\n      type: object\n    UpdateGitHubEnterpriseConfigOperationMetadata:\n      description: Metadata for `UpdateGitHubEnterpriseConfig` operation.\n      properties:\n        completeTime:\n          description: Time the operation was completed.\n          format: google-datetime\n          type: string\n        createTime:\n          description: Time the operation was created.\n          format: google-datetime\n          type: string\n        githubEnterpriseConfig:\n          description: 'The resource name of the GitHubEnterprise to be updated. Format:\n            `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.'\n          type: string\n      type: object\n    UpdateWorkerPoolOperationMetadata:\n      description: Metadata for the `UpdateWorkerPool` operation.\n      properties:\n        completeTime:\n          description: Time the operation was completed.\n          format: google-datetime\n          type: string\n        createTime:\n          description: Time the operation was created.\n          format: google-datetime\n          type: string\n        workerPool:\n          description: 'The resource name of the `WorkerPool` being updated. Format:\n            `projects/{project}/locations/{location}/workerPools/{worker_pool}`.'\n          type: string\n      type: object\n    Volume:\n      description: Volume describes a Docker container volume which is mounted into\n        build steps in order to persist files across build step execution.\n      properties:\n        name:\n          description: Name of the volume to mount. Volume names must be unique per\n            build step and must be valid names for Docker volumes. Each named volume\n            must be used by at least two build steps.\n          type: string\n        path:\n          description: Path at which to mount the volume. Paths must be absolute and\n            cannot conflict with other volume paths on the same build step or with\n            certain reserved volume paths.\n          type: string\n      type: object\n    Warning:\n      description: A non-fatal problem encountered during the execution of the build.\n      properties:\n        priority:\n          description: The priority for this warning.\n          enum:\n          - PRIORITY_UNSPECIFIED\n          - INFO\n          - WARNING\n          - ALERT\n          type: string\n        text:\n          description: Explanation of the warning generated.\n          type: string\n      type: object\n    WorkerConfig:\n      description: Defines the configuration to be used for creating workers in the\n        pool.\n      properties:\n        diskSizeGb:\n          description: Size of the disk attached to the worker, in GB. See [Worker\n            pool config file](https://cloud.google.com/cloud-build/docs/custom-workers/worker-pool-config-file).\n            Specify a value of up to 1000. If `0` is specified, Cloud Build will use\n            a standard disk size.\n          format: int64\n          type: string\n        machineType:\n          description: Machine type of a worker, such as `n1-standard-1`. See [Worker\n            pool config file](https://cloud.google.com/cloud-build/docs/custom-workers/worker-pool-config-file).\n            If left blank, Cloud Build will use `n1-standard-1`.\n          type: string\n        noExternalIp:\n          description: If true, workers are created without any public address, which\n            prevents network egress to public IPs.\n          type: boolean\n      type: object\n    WorkerPool:\n      description: Configuration for a `WorkerPool` to run the builds. Workers provide\n        a build environment where Cloud Build runs your builds. Cloud Build owns and\n        maintains a pool of workers for general use. By default, when you submit a\n        build, Cloud Build uses one of the workers from this pool. Builds that run\n        in the default worker pool have access to the public internet. If your build\n        needs access to resources on a private network, create and use a `WorkerPool`\n        to run your builds. Custom `WorkerPool`s give your builds access to any single\n        VPC network that you administer, including any on-prem resources connected\n        to that VPC network. For an overview of custom worker pools, see [Custom workers\n        overview](https://cloud.google.com/cloud-build/docs/custom-workers/custom-workers-overview).\n      properties:\n        createTime:\n          description: Output only. Time at which the request to create the `WorkerPool`\n            was received.\n          format: google-datetime\n          readOnly: true\n          type: string\n        deleteTime:\n          description: Output only. Time at which the request to delete the `WorkerPool`\n            was received.\n          format: google-datetime\n          readOnly: true\n          type: string\n        name:\n          description: Output only. The resource name of the `WorkerPool`, with format\n            `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The\n            value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool`\n            request and the value of `{location}` is determined by the endpoint accessed.\n          readOnly: true\n          type: string\n        networkConfig:\n          $ref: '#/components/schemas/NetworkConfig'\n          description: Network configuration for the `WorkerPool`.\n        state:\n          description: Output only. `WorkerPool` state.\n          enum:\n          - STATE_UNSPECIFIED\n          - CREATING\n          - RUNNING\n          - DELETING\n          - DELETED\n          readOnly: true\n          type: string\n        updateTime:\n          description: Output only. Time at which the request to update the `WorkerPool`\n            was received.\n          format: google-datetime\n          readOnly: true\n          type: string\n        workerConfig:\n          $ref: '#/components/schemas/WorkerConfig'\n          description: Worker configuration for the `WorkerPool`.\n      type: object\n  securitySchemes:\n    Oauth2:\n      description: Oauth 2.0 implicit authentication\n      flows:\n        implicit:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            https://www.googleapis.com/auth/cloud-platform: See, edit, configure,\n              and delete your Google Cloud data and see the email address for your\n              Google Account.\n      type: oauth2\n    Oauth2c:\n      description: Oauth 2.0 authorizationCode authentication\n      flows:\n        authorizationCode:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            https://www.googleapis.com/auth/cloud-platform: See, edit, configure,\n              and delete your Google Cloud data and see the email address for your\n              Google Account.\n          tokenUrl: https://accounts.google.com/o/oauth2/token\n      type: oauth2\n  x-stackQL-resources: {}\nexternalDocs:\n  url: https://cloud.google.com/cloud-build/docs/\ninfo:\n  contact:\n    name: Google\n    url: https://google.com\n    x-twitter: youtube\n  description: Creates and manages builds on Google Cloud Platform.\n  license:\n    name: Creative Commons Attribution 3.0\n    url: http://creativecommons.org/licenses/by/3.0/\n  termsOfService: https://developers.google.com/terms/\n  title: Cloud Build API\n  version: v1beta1\n  x-apiClientRegistration:\n    url: https://console.developers.google.com\n  x-apisguru-categories:\n  - analytics\n  - media\n  x-logo:\n    url: https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png\n  x-origin:\n  - format: openapi\n    url: https://cloudbuild.googleapis.com/$discovery/rest?version=v1beta1\n    version: '3.0'\n  x-preferred: false\n  x-providerName: googleapis.com\n  x-serviceName: cloudbuild\nopenapi: 3.0.0\npaths:\n  /v1beta1/{name}:\n    delete:\n      description: 'Deletes a `WorkerPool`. NOTE: As of now, this method returns an\n        `Operation` that is always complete.'\n      operationId: cloudbuild.projects.locations.workerPools.delete\n      parameters:\n      - description: 'Required. The name of the `WorkerPool` to delete. Format: `projects/{project}/locations/{workerPool}/workerPools/{workerPool}`.'\n        in: path\n        name: name\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Operation'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/cloud-platform\n        Oauth2c:\n        - https://www.googleapis.com/auth/cloud-platform\n      tags:\n      - projects\n    get:\n      description: Returns details of a `WorkerPool`.\n      operationId: cloudbuild.projects.locations.workerPools.get\n      parameters:\n      - description: 'Required. The name of the `WorkerPool` to retrieve. Format:\n          `projects/{project}/locations/{location}/workerPools/{workerPool}`.'\n        in: path\n        name: name\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkerPool'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/cloud-platform\n        Oauth2c:\n        - https://www.googleapis.com/auth/cloud-platform\n      tags:\n      - projects\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    patch:\n      description: 'Updates a `WorkerPool`. NOTE: As of now, this method returns an\n        `Operation` that is always complete.'\n      operationId: cloudbuild.projects.locations.workerPools.patch\n      parameters:\n      - description: Output only. The resource name of the `WorkerPool`, with format\n          `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The\n          value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool`\n          request and the value of `{location}` is determined by the endpoint accessed.\n        in: path\n        name: name\n        required: true\n        schema:\n          type: string\n      - description: A mask specifying which fields in `WorkerPool` to update.\n        in: query\n        name: updateMask\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WorkerPool'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Operation'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/cloud-platform\n        Oauth2c:\n        - https://www.googleapis.com/auth/cloud-platform\n      tags:\n      - projects\n  /v1beta1/{name}:cancel:\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: Starts asynchronous cancellation on a long-running operation. The\n        server makes a best effort to cancel the operation, but success is not guaranteed.\n        If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.\n        Clients can use Operations.GetOperation or other methods to check whether\n        the cancellation succeeded or whether the operation completed despite cancellation.\n        On successful cancellation, the operation is not deleted; instead, it becomes\n        an operation with an Operation.error value with a google.rpc.Status.code of\n        1, corresponding to `Code.CANCELLED`.\n      operationId: cloudbuild.projects.locations.operations.cancel\n      parameters:\n      - description: The name of the operation resource to be cancelled.\n        in: path\n        name: name\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CancelOperationRequest'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Empty'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/cloud-platform\n        Oauth2c:\n        - https://www.googleapis.com/auth/cloud-platform\n      tags:\n      - projects\n  /v1beta1/{parent}/workerPools:\n    get:\n      description: Lists `WorkerPool`s in the given project.\n      operationId: cloudbuild.projects.locations.workerPools.list\n      parameters:\n      - description: 'Required. The parent of the collection of `WorkerPools`. Format:\n          `projects/{project}/locations/location`.'\n        in: path\n        name: parent\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListWorkerPoolsResponse'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/cloud-platform\n        Oauth2c:\n        - https://www.googleapis.com/auth/cloud-platform\n      tags:\n      - projects\n    parameters:\n    - $ref: '#/components/parameters/_.xgafv'\n    - $ref: '#/components/parameters/access_token'\n    - $ref: '#/components/parameters/alt'\n    - $ref: '#/components/parameters/callback'\n    - $ref: '#/components/parameters/fields'\n    - $ref: '#/components/parameters/key'\n    - $ref: '#/components/parameters/oauth_token'\n    - $ref: '#/components/parameters/prettyPrint'\n    - $ref: '#/components/parameters/quotaUser'\n    - $ref: '#/components/parameters/upload_protocol'\n    - $ref: '#/components/parameters/uploadType'\n    post:\n      description: 'Creates a `WorkerPool` to run the builds, and returns the new\n        worker pool. NOTE: As of now, this method returns an `Operation` that is always\n        complete.'\n      operationId: cloudbuild.projects.locations.workerPools.create\n      parameters:\n      - description: 'Required. The parent resource where this worker pool will be\n          created. Format: `projects/{project}/locations/{location}`.'\n        in: path\n        name: parent\n        required: true\n        schema:\n          type: string\n      - description: Required. Immutable. The ID to use for the `WorkerPool`, which\n          will become the final component of the resource name. This value should\n          be 1-63 characters, and valid characters are /a-z-/.\n        in: query\n        name: workerPoolId\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WorkerPool'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Operation'\n          description: Successful response\n      security:\n      - Oauth2:\n        - https://www.googleapis.com/auth/cloud-platform\n        Oauth2c:\n        - https://www.googleapis.com/auth/cloud-platform\n      tags:\n      - projects\nservers:\n- url: https://cloudbuild.googleapis.com/\nsource:\n  url: {}\ntags:\n- name: projects\n",
			"canonicalURL": "/github.com/stackql/stackql-provider-registry@7482bc9b2425a6491d640bf921a1dc9cf508f339/-/blob/providers/src/googleapis.com/v0.1.2/services/cloudbuild-v1beta1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stackql/stackql-provider-registry/blob/7482bc9b2425a6491d640bf921a1dc9cf508f339/providers/src/googleapis.com/v0.1.2/services/cloudbuild-v1beta1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1beta1/{name}\": get: security: security \"Oauth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}