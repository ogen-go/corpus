{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/a-qxin/Omlet"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "backend/swagger.yaml",
			"byteSize": 23013,
			"content": "openapi: 3.0.0\ninfo:\n  title: Node.js Sign-up and Verification API\n  description: Node.js + MongoDB - API with email sign-up, verification, authentication and forgot password\n  version: 1.0.0\n\nservers:\n  - url: http://localhost:4000\n    description: Local development server\n\npaths:\n  /accounts/authenticate:\n    post:\n      summary: Authenticate account credentials and return a JWT token and a cookie with a refresh token\n      description: Accounts must be verified before authenticating.\n      operationId: authenticate\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  example: \"jason@example.com\"\n                password:\n                  type: string\n                  example: \"pass123\"\n              required:\n                - email\n                - password\n      responses:\n        \"200\":\n          description: Account details, a JWT access token and a refresh token cookie\n          headers:\n            Set-Cookie:\n              description: \"`refreshToken`\"\n              schema:\n                type: string\n                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    example: \"5eb12e197e06a76ccdefc121\"\n                  title:\n                    type: string\n                    example: \"Mr\"\n                  firstName:\n                    type: string\n                    example: \"Jason\"\n                  lastName:\n                    type: string\n                    example: \"Watmore\"\n                  email:\n                    type: string\n                    example: \"jason@example.com\"\n                  role:\n                    type: string\n                    example: \"Admin\"\n                  created:\n                    type: string\n                    example: \"2020-05-05T09:12:57.848Z\"\n                  isVerified:\n                    type: boolean\n                    example: true\n                  jwtToken:\n                    type: string\n                    example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y\"\n        \"400\":\n          description: The email or password is incorrect\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Email or password is incorrect\"\n  /accounts/refresh-token:\n    post:\n      summary: Use a refresh token to generate a new JWT token and a new refresh token\n      description: The refresh token is sent and returned via cookies.\n      operationId: refreshToken\n      parameters:\n        - in: cookie\n          name: refreshToken\n          description: The `refreshToken` cookie\n          schema:\n            type: string\n            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550\n      responses:\n        \"200\":\n          description: Account details, a JWT access token and a new refresh token cookie\n          headers:\n            Set-Cookie:\n              description: \"`refreshToken`\"\n              schema:\n                type: string\n                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    example: \"5eb12e197e06a76ccdefc121\"\n                  title:\n                    type: string\n                    example: \"Mr\"\n                  firstName:\n                    type: string\n                    example: \"Jason\"\n                  lastName:\n                    type: string\n                    example: \"Watmore\"\n                  email:\n                    type: string\n                    example: \"jason@example.com\"\n                  role:\n                    type: string\n                    example: \"Admin\"\n                  created:\n                    type: string\n                    example: \"2020-05-05T09:12:57.848Z\"\n                  isVerified:\n                    type: boolean\n                    example: true\n                  jwtToken:\n                    type: string\n                    example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y\"\n        \"400\":\n          description: The refresh token is invalid, revoked or expired\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Invalid token\"\n  /accounts/revoke-token:\n    post:\n      summary: Revoke a refresh token\n      description: Admin users can revoke the tokens of any account, regular users can only revoke their own tokens.\n      operationId: revokeToken\n      security:\n        - bearerAuth: []\n      parameters:\n        - in: cookie\n          name: refreshToken\n          description: The refresh token can be sent in a cookie or the post body, if both are sent the token in the body is used.\n          schema:\n            type: string\n            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                  example: \"51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550\"\n      responses:\n        \"200\":\n          description: The refresh token was successfully revoked\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Token revoked\"\n        \"400\":\n          description: The refresh token is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Invalid token\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n  /accounts/register:\n    post:\n      summary: Register a new user account and send a verification email\n      description: The first account registered in the system is assigned the `Admin` role, other accounts are assigned the `User` role.\n      operationId: register\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  example: \"Mr\"\n                firstName:\n                  type: string\n                  example: \"Jason\"\n                lastName:\n                  type: string\n                  example: \"Watmore\"\n                email:\n                  type: string\n                  example: \"jason@example.com\"\n                password:\n                  type: string\n                  example: \"pass123\"\n                confirmPassword:\n                  type: string\n                  example: \"pass123\"\n                acceptTerms:\n                  type: boolean\n              required:\n                - title\n                - firstName\n                - lastName\n                - email\n                - password\n                - confirmPassword\n                - acceptTerms\n      responses:\n        \"200\":\n          description: The registration request was successful and a verification email has been sent to the specified email address\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Registration successful, please check your email for verification instructions\"\n  /accounts/verify-email:\n    post:\n      summary: Verify a new account with a verification token received by email after registration\n      operationId: verifyEmail\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                  example: \"3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f\"\n              required:\n                - token\n      responses:\n        \"200\":\n          description: Verification was successful so you can now login to the account\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Verification successful, you can now login\"\n        \"400\":\n          description: Verification failed due to an invalid token\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Verification failed\"\n  /accounts/forgot-password:\n    post:\n      summary: Submit email address to reset the password on an account\n      operationId: forgotPassword\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  example: \"jason@example.com\"\n              required:\n                - email\n      responses:\n        \"200\":\n          description: The request was received and an email has been sent to the specified address with password reset instructions (if the email address is associated with an account)\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Please check your email for password reset instructions\"\n  /accounts/validate-reset-token:\n    post:\n      summary: Validate the reset password token received by email after submitting to the /accounts/forgot-password route\n      operationId: validateResetToken\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                  example: \"3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f\"\n              required:\n                - token\n      responses:\n        \"200\":\n          description: Token is valid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Token is valid\"\n        \"400\":\n          description: Token is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Invalid token\"\n  /accounts/reset-password:\n    post:\n      summary: Reset the password for an account\n      operationId: resetPassword\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                  example: \"3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f\"\n                password:\n                  type: string\n                  example: \"newPass123\"\n                confirmPassword:\n                  type: string\n                  example: \"newPass123\"\n              required:\n                - token\n                - password\n                - confirmPassword\n      responses:\n        \"200\":\n          description: Password reset was successful so you can now login to the account with the new password\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Password reset successful, you can now login\"\n        \"400\":\n          description: Password reset failed due to an invalid token\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Invalid token\"\n  /accounts:\n    get:\n      summary: Get a list of all accounts\n      description: Restricted to admin users.\n      operationId: getAllAccounts\n      security:\n        - bearerAuth: []\n      responses:\n        \"200\":\n          description: An array of all accounts\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      example: \"5eb12e197e06a76ccdefc121\"\n                    title:\n                      type: string\n                      example: \"Mr\"\n                    firstName:\n                      type: string\n                      example: \"Jason\"\n                    lastName:\n                      type: string\n                      example: \"Watmore\"\n                    email:\n                      type: string\n                      example: \"jason@example.com\"\n                    role:\n                      type: string\n                      example: \"Admin\"\n                    created:\n                      type: string\n                      example: \"2020-05-05T09:12:57.848Z\"\n                    updated:\n                      type: string\n                      example: \"2020-05-08T03:11:21.553Z\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n    post:\n      summary: Create a new account\n      description: Restricted to admin users.\n      operationId: createAccount\n      security:\n        - bearerAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  example: \"Mr\"\n                firstName:\n                  type: string\n                  example: \"Jason\"\n                lastName:\n                  type: string\n                  example: \"Watmore\"\n                email:\n                  type: string\n                  example: \"jason@example.com\"\n                password:\n                  type: string\n                  example: \"pass123\"\n                confirmPassword:\n                  type: string\n                  example: \"pass123\"\n                role:\n                  type: string\n                  enum: [Admin, User]\n              required:\n                - title\n                - firstName\n                - lastName\n                - email\n                - password\n                - confirmPassword\n                - role\n      responses:\n        \"200\":\n          description: Account created successfully, verification is not required for accounts created with this endpoint. The details of the new account are returned.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    example: \"5eb12e197e06a76ccdefc121\"\n                  title:\n                    type: string\n                    example: \"Mr\"\n                  firstName:\n                    type: string\n                    example: \"Jason\"\n                  lastName:\n                    type: string\n                    example: \"Watmore\"\n                  email:\n                    type: string\n                    example: \"jason@example.com\"\n                  role:\n                    type: string\n                    example: \"Admin\"\n                  created:\n                    type: string\n                    example: \"2020-05-05T09:12:57.848Z\"\n        \"400\":\n          description: Email is already registered\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Email 'jason@example.com' is already registered\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n  /accounts/{id}:\n    parameters:\n      - in: path\n        name: id\n        description: Account id\n        required: true\n        example: \"5eb12e197e06a76ccdefc121\"\n        schema:\n          type: string\n    get:\n      summary: Get a single account by id\n      description: Admin users can access any account, regular users are restricted to their own account.\n      operationId: getAccountById\n      security:\n        - bearerAuth: []\n      responses:\n        \"200\":\n          description: Details of the specified account\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    example: \"5eb12e197e06a76ccdefc121\"\n                  title:\n                    type: string\n                    example: \"Mr\"\n                  firstName:\n                    type: string\n                    example: \"Jason\"\n                  lastName:\n                    type: string\n                    example: \"Watmore\"\n                  email:\n                    type: string\n                    example: \"jason@example.com\"\n                  role:\n                    type: string\n                    example: \"Admin\"\n                  created:\n                    type: string\n                    example: \"2020-05-05T09:12:57.848Z\"\n                  updated:\n                    type: string\n                    example: \"2020-05-08T03:11:21.553Z\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n    put:\n      summary: Update an account\n      description: Admin users can update any account including role, regular users are restricted to their own account and cannot update role.\n      operationId: updateAccount\n      security:\n        - bearerAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  example: \"Mr\"\n                firstName:\n                  type: string\n                  example: \"Jason\"\n                lastName:\n                  type: string\n                  example: \"Watmore\"\n                email:\n                  type: string\n                  example: \"jason@example.com\"\n                password:\n                  type: string\n                  example: \"pass123\"\n                confirmPassword:\n                  type: string\n                  example: \"pass123\"\n                role:\n                  type: string\n                  enum: [Admin, User]\n      responses:\n        \"200\":\n          description: Account updated successfully. The details of the updated account are returned.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    example: \"5eb12e197e06a76ccdefc121\"\n                  title:\n                    type: string\n                    example: \"Mr\"\n                  firstName:\n                    type: string\n                    example: \"Jason\"\n                  lastName:\n                    type: string\n                    example: \"Watmore\"\n                  email:\n                    type: string\n                    example: \"jason@example.com\"\n                  role:\n                    type: string\n                    example: \"Admin\"\n                  created:\n                    type: string\n                    example: \"2020-05-05T09:12:57.848Z\"\n                  updated:\n                    type: string\n                    example: \"2020-05-08T03:11:21.553Z\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n    delete:\n      summary: Delete an account\n      description: Admin users can delete any account, regular users are restricted to their own account.\n      operationId: deleteAccount\n      security:\n        - bearerAuth: []\n      responses:\n        \"200\":\n          description: Account deleted successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: \"Account deleted successfully\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"401\":\n          $ref: \"#/components/responses/UnauthorizedError\"\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  responses:\n    UnauthorizedError:\n      description: Access token is missing or invalid, or the user does not have access to perform the action\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                example: \"Unauthorized\"\n    NotFoundError:\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                example: \"Not Found\"",
			"canonicalURL": "/github.com/a-qxin/Omlet@ffdd6517f11cbc40387e36abc7b5303061183ab0/-/blob/backend/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/a-qxin/Omlet/blob/ffdd6517f11cbc40387e36abc7b5303061183ab0/backend/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: cookie params not implemented",
	"NotImplemented": [
		"cookie params"
	]
}