{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/schemathesis/web-api-fuzzing-project"
		},
		"file": {
			"name": "schema.yaml",
			"size": 0,
			"path": "src/wafp/targets/catalog/otto_parser/schema.yaml",
			"byteSize": 3819,
			"content": "---\nopenapi: 3.0.3\ninfo:\n  title: Otto Parser Service\n  description: |\n    This specification describes the Otto Parser service which is responsible\n    for ingesting Otto Pipeline syntax (typically .otto files) and outputs\n    the internal Otto intermediate representation.\n  version: '1.0.0'\n  contact:\n    name: R Tyler Croy\n    email: 'rtyler@brokenco.de'\n    x-twitter: agentdero\n  license:\n    name: 'GNU AGPL 3.0'\n    url: 'https://www.gnu.org/licenses/agpl-3.0.en.html'\nexternalDocs:\n  description: 'Find out more about Otto'\n  url: 'https://github.com/rtyler/otto'\nservers:\n  - url: 'http://localhost:7672'\n    description: 'Local dev server'\npaths:\n  '/health':\n    get:\n      operationId: GetHealth\n      description: |\n        The health endpoint helps indicate whether the service is healthy or not.\n        Any non-200 response is unhealthy.\n      responses:\n        '200':\n          description: 'A successful healthcheck'\n          content:\n            'application/json': {}\n\n  '/v1/parse':\n    post:\n      operationId: ParsePipeline\n      description: |\n        The primary interface for the parser service which takes an uploaded Otto\n        Pipeline string and will attempt to parse the pipeline into an intermediate\n        representation which other parts of Otto can work with.\n      requestBody:\n        description: 'A string payload in the Otto Pipeline syntax'\n        required: true\n        content:\n          'text/plain':\n            schema:\n              type: string\n            examples:\n              success:\n                summary: 'Simple Pipeline'\n                value: |\n                  pipeline {\n                        stage {\n                            name = 'Build'\n                            steps {\n                                sh 'ls'\n                            }\n                        }\n                    }\n\n      responses:\n        '200':\n          description: 'Successfully parsed'\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ParsePipelineResponse'\n        '400':\n          description: 'Failed to parse the pipeline for some reason'\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ParsePipelineFailure'\n        '422':\n          description: 'Unprocessable data, usually non-UTF-6 encoded'\n\ncomponents:\n  schemas:\n    ParsePipelineResponse:\n      description: |\n        This response is passed on a successful parse of the provided pipeline\n      type: object\n      required:\n        - uuid\n        - batches\n      properties:\n        uuid:\n          type: string\n          format: uuid\n        contexts:\n          type: array\n        steps:\n          type: array\n      example:\n        summary: 'A simplistic Pipeline'\n        value:\n          uuid: '9edc4483-a78a-480f-8e06-2726db1ddf24'\n          batches:\n            - mode: Linear\n              contexts:\n                - uuid: '8109f601-12e8-4621-96c6-11baff409d93'\n                  properties:\n                    name: 'Build'\n                  steps:\n                    - uuid: '6193b9b1-c6be-4c18-9bb8-1aeead5e7d14'\n                      context: '8109f601-12e8-4621-96c6-11baff409d93'\n                      symbol: 'sh'\n                      parameters:\n                        - 'ls'\n\n    ParsePipelineFailure:\n      type: object\n      example:\n      required:\n        - variant\n        - line\n        - column\n      properties:\n        variant:\n          description: 'Parser error variant'\n          type: string\n        line:\n          description: 'The line within the input stream where the error was detected.'\n          type: number\n        column:\n          description: 'The column within the line of the error.'\n          type: number\n",
			"canonicalURL": "/github.com/schemathesis/web-api-fuzzing-project@a46cad32c97d081ac3d7187809ad663683a888d2/-/blob/src/wafp/targets/catalog/otto_parser/schema.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/schemathesis/web-api-fuzzing-project/blob/a46cad32c97d081ac3d7187809ad663683a888d2/src/wafp/targets/catalog/otto_parser/schema.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1/parse\": post: requestBody: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"empty schema",
		"unsupported content types"
	]
}