{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ProtocolONE/auth1.protocol.one"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "spec/openapi.yaml",
			"byteSize": 27691,
			"content": "openapi: 3.0.0\r\nservers:\r\n# Added by API Auto Mocking Plugin\r\n- description: SwaggerHub API Auto Mocking\r\n  url: https://virtserver.swaggerhub.com/ProtocolOne/Authentication/1.0.0\r\n- url: 'https://auth-one.protocol.one'\r\ninfo:\r\n  description: The Authentication API enables you to manage all aspects of user identity when you use Auth-One. It offers endpoints so your users can log in, sign up, log out, access APIs, and more.\r\n  version: 1.0.0\r\n  title: ProtocolOne Authentication API\r\n  termsOfService: ''\r\n  contact:\r\n    email: vadim.sabirov@protocol.one\r\n    name: Vadim Sabirov\r\n    url: 'https://protocol.one'\r\ntags:\r\n- name: Signup\r\n  description: Create a new user\r\n- name: Login\r\n  description: 'Authenticate user by login and password or by external providers'\r\n- name: Logout\r\n  description: Use this endpoint to logout a user\r\n- name: Passwordless\r\n  description: One-Time Code sent through email or SMS, every time the user logs in\r\n- name: Change Password\r\n  description: Send message to change password\r\n- name: Get User Info\r\n  description: Get user information by Access Token\r\n- name: Multi-Factor Authentication\r\n  description: Management multifactor authentication the Multi-Factor Authentication\r\n- name: JWT Token\r\n  description: JWT user's token\r\npaths:\r\n  /logout:\r\n    get:\r\n      tags:\r\n      - Logout\r\n      summary: 'Clears all single sign-on cookies set by Auth-One for the user'\r\n      description: \u003e-\r\n        Redirecting the user to this URL clears all single sign-on cookies set\r\n        by Auth-One for the user.\u003cbr\u003e\u003cbr\u003eThe Auth-One logout endpoint logs you out\r\n        from Auth-One and, optionally, from your identity provider. It does not log\r\n        you out of your application! This is something that you must implement\r\n        on your side. You need to log out the user from your application by\r\n        clearing their session.\r\n      operationId: logout\r\n      parameters:\r\n      - name: redirect_uri\r\n        in: query\r\n        description: \u003e-\r\n          URL to redirect the user after the logout.\u003cbr\u003e\u003cbr\u003eTo redirect a user\r\n          after logout, add a `redirect_uri` querystring parameter with the\r\n          target URL as the value. We suggest that you encode the target URL\r\n          being passed in.\u003cbr\u003e\u003cbr\u003eYou will need to add the non-encoded\r\n          `redirect_uri` URL as an Allowed Logout URLs in the application\r\n          settings.\r\n        required: true\r\n        schema:\r\n          type: integer\r\n          format: int64\r\n        allowEmptyValue: false\r\n      - name: client_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: \u003e-\r\n          The `client_id` of your application.\u003cbr\u003e\u003cbr\u003eIf the `client_id`\r\n          parameter is included, the returnTo URL must be listed in the\r\n          Allowed Logout URLs set at the application level (see Setting\r\n          Allowed Logout URLs at the App Level)\u003cbr\u003e\u003cbr\u003eIf the `client_id`\r\n          parameter is NOT included, the `returnTo` URL must be listed in the\r\n          Allowed Logout URLs set at the tenant level (see Setting Allowed\r\n          Logout URLs at the Space Level)\r\n      responses:\r\n        '302':\r\n          description: \u003e-\r\n            Redirect to the URL defined in the parameter `redirect_uri`.\r\n            If URL is not specified or not allowed user will be redirect to\r\n            login page. Adds to the request the parameter `auth_one_ott` with\r\n            the value of a one-time token. Allows it to receive a one-time user\r\n            Access Token value. For example:\r\n            `https://YOUR_DOMAIN/page?auth_one_ott=zcv987z...987dre987zxc`\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      security:\r\n      - CookieAuth: []\r\n    description: \u003e-\r\n      The Auth-One logout endpoint logs you out from Auth-One and, optionally, from\r\n      your identity provider. It does not log you out of your application! This\r\n      is something that you must implement on your side. You need to log out the\r\n      user from your application by clearing their session.\r\n  /userinfo:\r\n    get:\r\n      tags:\r\n      - Get User Info\r\n      summary: 'Get user info by Access Token'\r\n      description: 'Given the Access Token obtained during login, this endpoint returns a user''s profile.'\r\n      parameters:\r\n      - name: access_token\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The `Access Token` obtained during login'\r\n      operationId: userInfo\r\n      responses:\r\n        '200':\r\n          description: 'Return user info.'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/User'\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '403':\r\n          description: Forbidden\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      security:\r\n      - BearerAuth: []\r\n  /token/refresh:\r\n    get:\r\n      tags:\r\n      - JWT Token\r\n      summary: 'Get new user Access Token by Refresh Token'\r\n      description: ''\r\n      parameters:\r\n      - name: client_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The `client_id` of your application'\r\n      - name: token\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'Refresh token'\r\n      operationId: tokenRefresh\r\n      responses:\r\n        '200':\r\n          description: 'User Access Tokens.'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/AuthToken'\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      security:\r\n      - BearerAuth: []\r\n  /dbconnections/change_password:\r\n    post:\r\n      tags:\r\n      - Change Password\r\n      summary: 'Send verification code for the change password'\r\n      description: 'Given a user''s `email` address and a `connection`, Auth-One will send a verification code to the email address.'\r\n      parameters:\r\n      - name: client_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The `client_id` of your application'\r\n      - name: connection\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The name of the database connection configured to your client'\r\n      - name: email\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The user''s email address'\r\n      operationId: changePasswordStart\r\n      responses:\r\n        '200':\r\n          description: Return One-Time Token for verification method\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/OneTimeToken'\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      security: []\r\n  /dbconnections/change_password/verify:\r\n    post:\r\n      tags:\r\n      - Change Password\r\n      summary: 'Verify change password code'\r\n      description: ''\r\n      parameters:\r\n      - name: client_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The `client_id` of your application'\r\n      - name: connection\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The name of the database connection configured to your client'\r\n      - name: verification_code\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'Verification code from email'\r\n      - name: token\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'One-Time Token'\r\n      - name: password\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The new password'\r\n      operationId: changePasswordVerify\r\n      responses:\r\n        '200':\r\n          description: 'User Access Token'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/AuthToken'\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      security: []\r\n  /signup:\r\n    post:\r\n      tags:\r\n      - Signup\r\n      summary: 'Create a new user using database connection'\r\n      parameters:\r\n      - name: client_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The `client_id` of your application'\r\n      - name: connection\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The name of the database connection configured to your client'\r\n      - name: email\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The user''s email address'\r\n      - name: password\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The user''s desired password'\r\n      - name: redirect_uri\r\n        in: query\r\n        required: false\r\n        schema:\r\n          type: string\r\n        description: 'If the parameter is set, then in case of successful authentication the redirection to the specified address will be made. Parameter `auth_one_ott` will be added to the address where value will be a disposable token on which it is possible to receive authentication tokens using server inquiry on API (see the /login/ott method).'\r\n      operationId: signup\r\n      responses:\r\n        '200':\r\n          description: 'User Access Token or URL with one-time auth token'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                oneOf:\r\n                  - $ref: '#/components/schemas/AuthToken'\r\n                  - $ref: '#/components/schemas/AuthRedirectUrl'\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      security: []\r\n  /login:\r\n    post:\r\n      tags:\r\n      - Login\r\n      summary: 'Authenticate by login and password'\r\n      description: 'Use this endpoint to authenticate a user with database connection.'\r\n      parameters:\r\n      - name: client_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The `client_id` of your application'\r\n      - name: connection\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The name of the connection configured to your application'\r\n      - name: email\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The user''s email address'\r\n      - name: password\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The user''s desired password'\r\n      - name: captcha\r\n        in: query\r\n        required: false\r\n        schema:\r\n          type: string\r\n        description: 'Captcha'\r\n      - name: redirect_uri\r\n        in: query\r\n        required: false\r\n        schema:\r\n          type: string\r\n        description: 'If the parameter is set, then in case of successful authentication the redirection to the specified address will be made. Parameter `auth_one_ott` will be added to the address where value will be a disposable token on which it is possible to receive authentication tokens using server inquiry on API (see the /login/ott method).'\r\n      operationId: login\r\n      responses:\r\n        '200':\r\n          description: 'User Access Token or URL with one-time auth token'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                oneOf:\r\n                  - $ref: '#/components/schemas/AuthToken'\r\n                  - $ref: '#/components/schemas/AuthRedirectUrl'\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n        '403':\r\n          description: 'MFA required. The `error` will be the value `mfa_required` and the `error_message` will be contains token.'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      security: []\r\n  /login/ott:\r\n    get:\r\n      tags:\r\n        - JWT Token\r\n      summary: 'Get user Access Token by One-Time Token'\r\n      description: ''\r\n      parameters:\r\n        - name: client_id\r\n          in: query\r\n          required: true\r\n          schema:\r\n            type: string\r\n          description: 'The `client_id` of your application'\r\n        - name: token\r\n          in: query\r\n          required: true\r\n          schema:\r\n            type: string\r\n          description: 'One-Time Token (for example, the parameter `auth_one_ott` passed during authentication with redirect)'\r\n      operationId: loginOTT\r\n      responses:\r\n        '200':\r\n          description: 'User Access Tokens'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/AuthToken'\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      security: []\r\n  /authorize:\r\n    get:\r\n      tags:\r\n      - Login\r\n      summary: 'Authenticate by social provider'\r\n      description: 'Use this endpoint to authenticate a user with a social. It will return a 302 redirect to the social provider specified in connection. The `redirect_uri` value must be specified as a valid callback URL under your Application''s Settings.\u003cbr\u003e\u003cbr\u003eYou can use a special endpoint for `redirect_uri` if you want to get the Access Token of a user via JS PostMessage or WebSocket. See more on \u003ca href=\"#/Login/authorizeResult\"\u003eauthorizeResult\u003c/a\u003e page'\r\n      parameters:\r\n      - name: client_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The `client_id` of your application'\r\n      - name: connection\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The name of a social identity provider configured to your application, for example `google-oauth2` or `facebook`'\r\n      - name: redirect_uri\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The URL to which will redirect the browser after authorization has been granted by the user'\r\n      - name: state\r\n        in: query\r\n        required: false\r\n        schema:\r\n          type: string\r\n        description: 'An opaque value the applications adds to the initial request that the authorization server includes when redirecting the back to the application. This value must be used by the application to prevent CSRF attacks.'\r\n      - name: ADDITIONAL_PARAMETERS\r\n        in: query\r\n        required: false\r\n        schema:\r\n          type: string\r\n        description: 'Append any additional parameter to the end of your request, and it will be sent to the provider. For example, access_type=offline (for Google Refresh Tokens) , display=popup (for Windows Live popup mode)'\r\n      operationId: authorize\r\n      responses:\r\n        '301':\r\n          description: \u003e-\r\n            Redirect to destination URI with One-Time Token. Adds to the request\r\n            the parameter `auth_one_ott` with the value of a one-time token.\r\n            Allows it to receive a one-time user Access Token value. For example:\r\n            `https://YOUR_DOMAIN/page?auth_one_ott=zcv987z...987dre987zxc`\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      security: []\r\n  /authorize/link:\r\n    get:\r\n      tags:\r\n      - Login\r\n      summary: 'Create a social authentication link with the authenticator by password (if found) or unlink'\r\n      description: 'Link social account to password account'\r\n      parameters:\r\n      - name: client_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The `client_id` of your application'\r\n      - name: code\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The ont-time token from social auth result'\r\n      - name: action\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'Set `link` if you want to link accounts or `new` to create a new account'\r\n      - name: password\r\n        in: query\r\n        required: false\r\n        schema:\r\n          type: string\r\n        description: 'Password from account with password authenticator'\r\n      - name: access_token\r\n        in: query\r\n        required: false\r\n        schema:\r\n          type: string\r\n        description: 'Authentication token, if MFA was connected to the main account'\r\n      responses:\r\n        '200':\r\n          description: Bad Request\r\n          content:\r\n            plain/text:\r\n              schema:\r\n                type: string\r\n                example: pong\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      operationId: authorizeResult\r\n      security: []\r\n  /passwordless/start:\r\n    post:\r\n      tags:\r\n      - Passwordless\r\n      summary: 'Send a verification code using email or sms'\r\n      description: ''\r\n      parameters:\r\n      - name: client_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The `client_id` of your application'\r\n      - name: connection\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: \u003e-\r\n          How to send the code to the user. Use `email` to send the\r\n          code using email, or `sms` to use SMS\r\n      operationId: passwordlessStart\r\n      responses:\r\n        '200':\r\n          description: 'Return One-Time Token for verification method'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/OneTimeToken'\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      security: []\r\n  /passwordless/verify:\r\n    post:\r\n      tags:\r\n      - Passwordless\r\n      summary: 'Verify passwordless authentication code'\r\n      parameters:\r\n      - name: client_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The `client_id` of your application'\r\n      - name: connection\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: \u003e-\r\n          How to send the code to the user. Use `email` to send the\r\n          code using email, or `sms` to use SMS\r\n      - name: verification_code\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'Verification code from sms or email (One-Time Code)'\r\n      - name: token\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'One-Time Token'\r\n      operationId: passwordlessVerify\r\n      responses:\r\n        '200':\r\n          description: 'User Access Token'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/AuthToken'\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      security: []\r\n  /mfa/challenge:\r\n    post:\r\n      tags:\r\n      - Multi-Factor Authentication\r\n      summary: 'Set a MFA challenge types'\r\n      description: 'Request a challenge based on the challenge types supported by the application and user.'\r\n      parameters:\r\n      - name: client_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The `client_id` of your application'\r\n      - name: provider_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The identifier MFA configured to your application'\r\n      - name: mfa_token\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'MFA token from authenticate response'\r\n      - name: code\r\n        in: query\r\n        required: false\r\n        schema:\r\n          type: string\r\n        description: 'Code from MFA authenticator'\r\n      operationId: mfaChallenge\r\n      responses:\r\n        '200':\r\n          description: 'Get user Access Token'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/AuthToken'\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      security: []\r\n  /mfa/verify:\r\n    post:\r\n      tags:\r\n      - Multi-Factor Authentication\r\n      summary: 'Authenticate a user with MFA'\r\n      description: 'Use this endpoint to authenticate a user with MFA.'\r\n      parameters:\r\n      - name: client_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The `client_id` of your application'\r\n      - name: provider_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The identifier MFA configured to your application'\r\n      - name: mfa_token\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'MFA token from authenticate response'\r\n      - name: code\r\n        in: query\r\n        required: false\r\n        schema:\r\n          type: integer\r\n        description: 'OTP, OOB or Recovery code'\r\n      operationId: mfaVerify\r\n      responses:\r\n        '200':\r\n          description: 'Get user Access Token'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/AuthToken'\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      security: []\r\n  /mfa/add:\r\n    post:\r\n      tags:\r\n      - Multi-Factor Authentication\r\n      summary: 'Add authenticator to the user'\r\n      description: ''\r\n      parameters:\r\n      - name: client_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The `client_id` of your application'\r\n      - name: provider_id\r\n        in: query\r\n        required: true\r\n        schema:\r\n          type: string\r\n        description: 'The identifier MFA configured to your application'\r\n      - name: code\r\n        in: query\r\n        required: false\r\n        schema:\r\n          type: string\r\n        description: 'Verification code from the MFA authenticator'\r\n      - name: phone_number\r\n        in: query\r\n        required: false\r\n        schema:\r\n          type: string\r\n        description: 'The phone number to use for SMS. Required if `oob_channel` includes `sms`'\r\n      operationId: mfaAdd\r\n      responses:\r\n        '200':\r\n          description: 'Get added MFA settings'\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/MfaAuthenticator'\r\n        '400':\r\n          description: Bad Request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Error'\r\n      security:\r\n      - BearerAuth: []\r\ncomponents:\r\n  schemas:\r\n    Error:\r\n      type: object\r\n      properties:\r\n        error:\r\n          type: string\r\n          example: bad_request\r\n          description: 'Error code (for example: `mfa_request` for the MFA scenario or `password` for form field)'\r\n        error_message:\r\n          type: string\r\n          example: The connection was not found\r\n          description: 'Text of error or value for specific property (e.g. MFA one-time token value)'\r\n    User:\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: string\r\n          example: b62klDf0HeiJdNMv8K263nfE\r\n        email:\r\n          type: string\r\n          example: test@test.com\r\n        email_verified:\r\n          type: boolean\r\n          example: false\r\n        created_at:\r\n          type: string\r\n          example: \"2016-11-02T15:05:21.311Z\"\r\n        updated_at:\r\n          type: string\r\n          example: \"2016-12-05T15:15:40.545Z\"\r\n    AuthToken:\r\n      type: object\r\n      properties:\r\n        access_token:\r\n          type: string\r\n          example: oDnPKc1a...vWE36Lh\r\n          description: JWT token\r\n        expires_in:\r\n          type: integer\r\n          format: int32\r\n          example: 3600\r\n          description: UNIX timestamp\r\n        id_token:\r\n          type: string\r\n          description: Refresh token\r\n          example: oDnPKc1a...vWE36Lh\r\n    AuthRedirectUrl:\r\n      type: object\r\n      properties:\r\n        redirect_url:\r\n          type: string\r\n          example: https://127.0.0.1/members/?auth_one_ott=oDnPKc1a...vWE36Lh\r\n          description: URL to redirect a user with a one-time authentication token\r\n    OneTimeCode:\r\n      type: object\r\n      description: 'One-Time Code'\r\n      properties:\r\n        token:\r\n          type: integer\r\n          example: 123456\r\n    OneTimeToken:\r\n      type: object\r\n      description: 'One-Time Token'\r\n      properties:\r\n        token:\r\n          type: string\r\n          example: oDnPKc1a...vWE36Lh\r\n    MfaAuthenticator:\r\n      type: object\r\n      properties:\r\n        secret:\r\n          type: string\r\n          example: oDnPKc1a...vWE36Lh\r\n          description: Use for OTP authentificator\r\n        oob_channel:\r\n          type: string\r\n          example: sms\r\n          description: Use for OBB authentificator. Must be `sms` or `auth1`\r\n        barcode_uri:\r\n          type: string\r\n          example: otpauth://...\r\n        authenticator_type:\r\n          type: string\r\n          description: '`otp` or `oob`'\r\n          example: otp\r\n        recovery_codes:\r\n          type: array\r\n          items:\r\n            type: string\r\n          example: [\"ABCDEFGDRFK75ABYR7PH8TJA\"]\r\n  requestBodies: {}\r\n  securitySchemes:\r\n    CookieAuth:\r\n      type: apiKey\r\n      in: cookie\r\n      name: X-AUTH-ONE-TOKEN-{CLIENT_ID}\r\n    BearerAuth:\r\n      type: http\r\n      scheme: bearer\r\n      bearerFormat: JWT\r\n  links: {}\r\n  callbacks: {}\r\nsecurity:\r\n- CookieAuth: []\r\n- BearerAuth: []",
			"canonicalURL": "/github.com/ProtocolONE/auth1.protocol.one@dfaa8e5319e0381b54a958af94c71b3697c54b1f/-/blob/spec/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ProtocolONE/auth1.protocol.one/blob/dfaa8e5319e0381b54a958af94c71b3697c54b1f/spec/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/logout\": get: security: security \"CookieAuth\" (index 0): cookie security not implemented",
	"NotImplemented": [
		"cookie security",
		"unsupported content types"
	]
}