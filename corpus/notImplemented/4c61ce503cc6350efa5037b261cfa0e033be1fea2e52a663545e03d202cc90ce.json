{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Breeding-Insight/bi-api"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 184274,
			"content": "#\n# See the NOTICE file distributed with this work for additional information\n# regarding copyright ownership.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nopenapi: 3.0.2\ninfo:\n  title: Breeding Insight API\n  description: API documentation for Breeding Insight\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: np398@cornell.edu\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\nexternalDocs:\n  description: Find out more about Breeding Insight\n  url: http://www.breedinginsight.org\nservers:\n  - url: http://localhost:8081/v1\ntags:\n  - name: users\n    description: User Management\n  - name: programs\n    description: Program Management\n  - name: roles\n    description: Role Information\n  - name: traits\n    description: Trait Management\n  - name: uploads\n    description: Upload Management\npaths:\n  /users:\n    get:\n      tags:\n        - users\n      summary: Get list of all users in the system.\n      description: Get list of all users\n      operationId: getUsers\n      parameters:\n        - in: query\n          description: Field to sort the results by.\n          name: sortField\n          required: false\n          schema:\n            type: string\n            enum: [name, email, orcid, systemRoles, programs, active, createdAt, updatedAt, createdByUserId, updatedByUserId]\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortOrder'\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/usersResponse'\n              examples:\n                arrayOfUsers:\n                  $ref: '#/components/examples/arrayOfUsers'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n    post:\n      tags:\n        - users\n      summary: Create user\n      description: Create a new user.\n      operationId: createUser\n      requestBody:\n        description: User information to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/newUserRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/usersResponse_1'\n              example:\n                metadata:\n                  datafiles: []\n                  pagination:\n                    currentPage: 1\n                    pageSize: 1\n                    totalCount: 1\n                    totalPages: 1\n                  status: []\n                result:\n                  id: d4f23375-0033-4d16-a62f-072e3a9198fa\n                  orcid: null\n                  name: Bob Smith\n                  email: bob@bob.com\n                  active: true\n                  systemRoles: [\n                    {\n                      id: \"d4f23375-0033-4d16-a62f-072e3a9198fa\",\n                      domain: \"admin\"\n                    }\n                  ]\n                  programRoles: []\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Email already exists\n  /users/search:\n    post:\n      tags:\n        - users\n      parameters:\n        - in: query\n          description: Field to sort the results by.\n          name: sortField\n          required: false\n          schema:\n            type: string\n            enum: [name, email, orcid, systemRoles, programs, active, createdAt, updatedAt, createdByUserId, updatedByUserId]\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortOrder'\n      summary: Search users\n      description: Search users using filters\n      operationId: searchUsers\n      requestBody:\n        description: Search request\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                filter:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      field:\n                        type: string\n                        enum: [name, email, orcid, systemRoles, programs, active, createdAt, updatedAt, createdByUserId, updatedByUserId]\n                      value:\n                        type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/usersResponse'\n              examples:\n                arrayOfUsers:\n                  $ref: '#/components/examples/arrayOfUsers'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n  /users/{id}:\n    get:\n      tags:\n        - users\n      summary: Get user information\n      description: Get a specific user\n      operationId: getUserById\n      parameters:\n        - name: id\n          in: path\n          description: The id of the user information that needs to be fetched.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/usersResponse_1'\n              example:\n                metadata:\n                  datafiles: []\n                  pagination:\n                    currentPage: 1\n                    pageSize: 1\n                    totalCount: 1\n                    totalPages: 1\n                  status: []\n                result:\n                  id: d4f23375-0033-4d16-a62f-072e3a9198fa\n                  orcid: 1111-2222-3333-4444\n                  name: Bob Smith\n                  email: bob@bob.com\n                  active: true\n                  systemRoles: [\n                    {\n                      id: \"d4f23375-0033-4d16-a62f-072e3a9198fa\",\n                      domain: \"admin\"\n                    }\n                  ]\n                  programRoles: [\n                    {\n                      active: false,\n                      roles: [\n                        {\n                          id: 20be0724-9451-46d5-a628-10fcb4a380e7,\n                          domain: member\n                        }\n                      ],\n                      program: {\n                        id: c57225a8-6649-44e3-b2ec-7c0f84a31a11,\n                        name: Test Program1,\n                        abbreviation: test1,\n                        objective: To test all the things\n                      }\n                    }\n                  ]\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n    put:\n      tags:\n        - users\n      summary: Update user information\n      description: Update user information with specified data.\n      operationId: updateUser\n      parameters:\n        - name: id\n          in: path\n          description: id of user to be updated\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      requestBody:\n        description: Updated user object\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/newUserRequest'\n            example:\n              name: Bob Smith\n              email: bob@bob.com\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              example:\n                metadata:\n                  datafiles: []\n                  pagination:\n                    currentPage: 1\n                    pageSize: 1\n                    totalCount: 1\n                    totalPages: 1\n                  status: []\n                result:\n                  id: d4f23375-0033-4d16-a62f-072e3a9198fa\n                  orcid: 1111-2222-3333-4444\n                  name: Bob Smith\n                  email: bob@bob.com\n                  active: true\n                  systemRoles: [\n                    {\n                      id: \"d4f23375-0033-4d16-a62f-072e3a9198fa\",\n                      domain: \"admin\"\n                    }\n                  ]\n                  programRoles: [\n                    {\n                      active: true,\n                      roles: [\n                        {\n                          id: 20be0724-9451-46d5-a628-10fcb4a380e7,\n                          domain: member\n                        }\n                      ],\n                      program: {\n                        id: 37935efa-4c0f-4269-8669-f78d21b26f04,\n                        name: Test Program,\n                        abbreviation: test,\n                        objective: To test things\n                      }\n                    }\n                  ]\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n        \"409\":\n          description: Conflict - Email Already Exists\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Email already exists\n    delete:\n      tags:\n        - users\n      summary: Deactivate user\n      description: Deactivate User\n      operationId: deleteUser\n      parameters:\n        - name: id\n          in: path\n          description: id of user to be deleted\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n        \"422\":\n          description: Unprocessable Entity\n          content:\n            application/json:\n              schema:\n                type: string\n\n  /users/{id}/roles:\n    put:\n      tags:\n        - users\n      summary: Update user system roles\n      description: Update user system roles\n      operationId: updateUserRoles\n      parameters:\n        - name: id\n          in: path\n          description: id of user to be updated\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      requestBody:\n        description: Updated system roles\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/updateSystemRolesRequest'\n            example:\n              systemRoles: [\n                {\n                  id: \"d4f23375-0033-4d16-a62f-072e3a9198fa\",\n                  domain: \"admin\"\n                }\n              ]\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              example:\n                metadata:\n                  datafiles: []\n                  pagination:\n                    currentPage: 1\n                    pageSize: 1\n                    totalCount: 1\n                    totalPages: 1\n                  status: []\n                result:\n                  id: d4f23375-0033-4d16-a62f-072e3a9198fa\n                  orcid: 1111-2222-3333-4444\n                  name: Bob Smith\n                  email: bob@bob.com\n                  active: true\n                  systemRoles: [\n                    {\n                      id: \"d4f23375-0033-4d16-a62f-072e3a9198fa\",\n                      domain: \"admin\"\n                    }\n                  ]\n                  programRoles: []\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n  /users/{userId}/resend-email:\n    put:\n      tags:\n        - users\n      summary: Resend account activation email to user\n      description: Resend account activation email to user\n      parameters:\n        - name: userId\n          in: path\n          description: The id of the user to send the email to.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n  /programs:\n    get:\n      tags:\n        - programs\n      summary: Get list of all programs in the system.\n      description: Get list of all programs\n      parameters:\n        - in: query\n          description: Field to sort the results by.\n          name: sortField\n          required: false\n          schema:\n            type: string\n            enum: [name, key, abbreviation, objective, documentationUrl, active, createdAt, updatedAt, speciesId, speciesName, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName, brapiUrl, numUsers]\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortOrder'\n      operationId: getPrograms\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/programsResponseResult'\n              examples:\n                programExample1:\n                  $ref: '#/components/examples/arrayOfPrograms'\n\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n\n    post:\n      tags:\n        - programs\n      summary: Create program\n      description: Create a new program.\n      operationId: createProgram\n      requestBody:\n        description: Program information to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/updateProgramRequest'\n            examples:\n              createProgramRequest:\n                $ref: '#/components/examples/updateProgramRequestExample'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/programsResponseSingle'\n              examples:\n                singleProgram:\n                  $ref: '#/components/examples/singleProgram'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Email already exists\n  /programs/{id}:\n    get:\n      tags:\n        - programs\n      summary: Get program information\n      description: Get a specific program\n      operationId: getProgramById\n      parameters:\n        - name: id\n          in: path\n          description: The id of the program information that needs to be fetched.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/programsResponseSingle'\n              examples:\n                singleProgram:\n                  $ref: '#/components/examples/singleProgram'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n    put:\n      tags:\n        - programs\n      summary: Update program information\n      description: Update program information with specified data.\n      operationId: updateProgram\n      parameters:\n        - name: id\n          in: path\n          description: id of program to be updated\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      requestBody:\n        description: Updated program object\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/updateProgramRequest'\n            examples:\n              updateProgramRequestExample:\n                $ref: '#/components/examples/updateProgramRequestExample'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              examples:\n                singleProgram:\n                  $ref: '#/components/examples/singleProgram'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n        \"409\":\n          description: Conflict - Email Already Exists\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Email already exists\n  /programs/archive/{id}:\n    delete:\n      tags:\n        - programs\n      summary: Archive program\n      description: Archives the indicated program\n      operationId: deleteProgram\n      parameters:\n        - name: id\n          in: path\n          description: id of program to be archived\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n  /programs/search:\n    post:\n      tags:\n        - programs\n      parameters:\n        - in: query\n          description: Field to sort the results by.\n          name: sortField\n          required: false\n          schema:\n            type: string\n            enum: [name, key, abbreviation, objective, documentationUrl, active, brapiUrl, numUsers, createdAt, updatedAt, speciesId, speciesName, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName]\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortOrder'\n      summary: Search programs\n      description: Search programs using filters\n      operationId: searchPrograms\n      requestBody:\n        description: Search request\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                filter:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      field:\n                        type: string\n                        enum: [name, key, abbreviation, objective, documentationUrl, active, brapiUrl, numUsers, createdAt, updatedAt, speciesId, speciesName, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName]\n                      value:\n                        type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/programsResponseResult'\n              examples:\n                programExample1:\n                  $ref: '#/components/examples/arrayOfPrograms'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n  /programs/{id}/users:\n    get:\n      tags:\n        - programs\n      parameters:\n        - name: id\n          in: path\n          description: The id of the program information that needs to be fetched.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - in: query\n          description: Field to sort the results by.\n          name: sortField\n          required: false\n          schema:\n            type: string\n            enum: [name, email, roles, active, createdAt, updatedAt, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName]\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortOrder'\n      summary: Get list of all users in the specified program\n      description: Get list of all users in program\n      operationId: getProgramUsers\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/programUserResponseResult'\n              examples:\n                programUserExample1:\n                  $ref: '#/components/examples/arrayOfProgramUsers'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n    post:\n      tags:\n        - programs\n      parameters:\n        - name: id\n          in: path\n          description: The id of the program information that needs to be fetched.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      summary: Create a user in specified program\n      description: Add user to program if they exist in the system, otherwise create new user and add\n      operationId: createProgramUser\n      requestBody:\n        description: User information to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/newProgramUserRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/programUserResponse'\n              examples:\n                programUserExample2:\n                  $ref: '#/components/examples/singleProgramUser'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Email already exists\n  /programs/{id}/users/search:\n    post:\n      tags:\n        - programs\n      parameters:\n        - name: id\n          in: path\n          description: The id of the program information that needs to be fetched.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - in: query\n          description: Field to sort the results by.\n          name: sortField\n          required: false\n          schema:\n            type: string\n            enum: [name, email, roles, active, createdAt, updatedAt, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName]\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortOrder'\n      summary: Search program users\n      description: Search program users using filters\n      operationId: searchProgramusers\n      requestBody:\n        description: Search request\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                filter:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      field:\n                        type: string\n                        enum: [name, abbreviation, slope, createdAt, updatedAt, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName]\n                      value:\n                        type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/programUserResponseResult'\n              examples:\n                programUserExample1:\n                  $ref: '#/components/examples/arrayOfProgramUsers'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        \"404\":\n          $ref: '#/components/responses/404NotFound'\n  /programs/{id}/users/{userId}:\n    get:\n      tags:\n        - programs\n      parameters:\n        - name: id\n          in: path\n          description: The id of the program information that needs to be fetched.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: userId\n          in: path\n          description: The id of the user information that needs to be fetched.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      summary: Get specified user in the specified program\n      description: Get user in the program\n      operationId: getProgramUser\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/programUserResponse'\n              examples:\n                singleProgramUser:\n                  $ref: '#/components/examples/singleProgramUser'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n    put:\n      tags:\n        - programs\n      parameters:\n        - name: id\n          in: path\n          description: The id of the program information that needs to be updated.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: userId\n          in: path\n          description: The id of the user information that needs to be updated.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      summary: Update specified user in the specified program\n      description: Update user in the program\n      operationId: putProgramUser\n      requestBody:\n        description: Program user information to update\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/newProgramUserRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/programUserResponse'\n              examples:\n                singleProgramUser:\n                  $ref: '#/components/examples/singleProgramUser'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n    delete:\n      tags:\n        - programs\n      parameters:\n        - name: id\n          in: path\n          description: The id of the program\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: userId\n          in: path\n          description: The id of the user\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      summary: Deactivates the user in the specified program\n      description: Deactivates the user in the specified program\n      operationId: deleteProgramUser\n      responses:\n        \"200\":\n          description: OK\n\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n\n  /programs/{id}/locations:\n    get:\n      tags:\n        - programs\n      parameters:\n        - name: id\n          in: path\n          description: The id of the program\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - in: query\n          description: Field to sort the results by.\n          name: sortField\n          required: false\n          schema:\n            type: string\n            enum: [name, abbreviation, slope, createdAt, updatedAt, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName]\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortOrder'\n      summary: Get list of all locations in the specified program\n      description: Get list of all locations in program\n      operationId: getProgramLocations\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/locationsResponse'\n              examples:\n                locationsExample1:\n                  $ref: '#/components/examples/arrayOfLocations'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n    post:\n      tags:\n        - programs\n      parameters:\n        - name: id\n          in: path\n          description: The id of the program\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      summary: Create a location in specified program\n      description: Add location to the program\n      operationId: createProgramLocation\n      requestBody:\n        description: Location information to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/newProgramLocationRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/locationsResponseResult'\n              example:\n                metadata:\n                  datafiles: []\n                  pagination:\n                    currentPage: 1\n                    pageSize: 1\n                    totalCount: 1\n                    totalPages: 1\n                  status: []\n                result:\n                  id:  d2263532-1fa3-49a6-9a66-957f313c8ed2\n                  country_name:  United States of America\n                  country_alpha_2_code:  US\n                  country_alpha_3_code: USA\n                  environment_type:  field\n                  accessibility: public\n                  topography:  valley\n                  name: Nick's Field\n                  abbreviation:  NF\n                  coordinates: {\n                    \"geometry\": {\n                      \"coordinates\": [\n                          -76.506042,\n                          42.417373,\n                          123\n                      ],\n                      \"type\": \"Point\"\n                    },\n                    \"type\": \"Feature\"\n                  }\n                  coordinate_uncertainty:  0\n                  coordinate_description:  Northwest corner of field\n                  slope: 1\n                  exposure: none\n                  documentation_url: http://www.nick.com\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Email already exists\n  /programs/{id}/locations/search:\n    post:\n      tags:\n        - programs\n      parameters:\n        - name: id\n          in: path\n          description: The id of the program\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - in: query\n          description: Field to sort the results by.\n          name: sortField\n          required: false\n          schema:\n            type: string\n            enum: [name, abbreviation, slope, createdAt, updatedAt, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName]\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortOrder'\n      summary: Search programs\n      description: Search programs using filters\n      operationId: searchProgramLocations\n      requestBody:\n        description: Search request\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                filter:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      field:\n                        type: string\n                        enum: [name, abbreviation, slope, createdAt, updatedAt, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName]\n                      value:\n                        type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/locationsResponse'\n              examples:\n                locationsExample1:\n                  $ref: '#/components/examples/arrayOfLocations'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        \"404\":\n          $ref: '#/components/responses/404NotFound'\n\n  /programs/{id}/locations/{locationId}:\n    get:\n      tags:\n        - programs\n      parameters:\n        - name: id\n          in: path\n          description: The id of the program\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: locationId\n          in: path\n          description: The id of the location\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      summary: Get specified location in the specified program\n      description: Get location in the program\n      operationId: getProgramLocation\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/locationsResponseSingle'\n              examples:\n                locationsExample1:\n                  $ref: '#/components/examples/singleLocation'\n\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n    put:\n      tags:\n        - programs\n      parameters:\n        - name: id\n          in: path\n          description: The id of the program information that needs to be updated.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: locationId\n          in: path\n          description: The id of the location\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      summary: Update specified location in the specified program\n      description: Update location in the program\n      operationId: putLocation\n      requestBody:\n        description: Program location information to update\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/newProgramLocationRequest'\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/locationsResponseSingle'\n              examples:\n                singleProgramLocation:\n                  $ref: '#/components/examples/singleLocation'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n    delete:\n      tags:\n        - programs\n      parameters:\n        - name: id\n          in: path\n          description: The id of the program\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: locationId\n          in: path\n          description: The id of the location\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      summary: Remove location from the specified program\n      description: Remove location from the specified program\n      operationId: deleteProgramLocation\n      responses:\n        \"200\":\n          description: OK\n\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n  /programs/roles:\n    get:\n      tags:\n        - roles\n      summary: Get list of all roles in the system.\n      description: Get list of all roles\n      operationId: getRoles\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/rolesResponse'\n              examples:\n                arrayOfRoles:\n                  $ref: '#/components/examples/arrayOfRoles'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n  /programs/roles/{id}:\n    get:\n      tags:\n        - roles\n      summary: Get role information\n      description: Get a specific role\n      operationId: getRoleById\n      parameters:\n        - name: id\n          in: path\n          description: The id of the role information that needs to be fetched.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/rolesResponseSingle'\n              examples:\n                singleRole:\n                  $ref: '#/components/examples/singleRole'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n  /roles:\n    get:\n      tags:\n        - roles\n      summary: Get list of all system roles in the system.\n      description: Get list of all system roles\n      operationId: getSystemRoles\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/rolesResponse'\n              examples:\n                arrayOfRoles:\n                  $ref: '#/components/examples/arrayOfSystemRoles'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n  /roles/{id}:\n    get:\n      tags:\n        - roles\n      summary: Get system role information\n      description: Get a specific system role\n      operationId: getSystemRoleById\n      parameters:\n        - name: id\n          in: path\n          description: The id of the system role information that needs to be fetched.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/rolesResponseSingle'\n              examples:\n                singleSystemRole:\n                  $ref: '#/components/examples/singleSystemRole'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n  /programs/{programId}/traits:\n    get:\n      tags:\n        - traits\n      summary: Get all traits in a given program\n      description: Get all traits in a given program\n      operationId: getTraits\n      parameters:\n        - name: programId\n          in: path\n          description: Id of program to get traits for\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: full\n          in: query\n          description: True = get detailed properties of traits. False = get only base properties of trait.\n          required: false\n          explode: false\n          schema:\n            type: boolean\n        - in: query\n          description: Field to sort the results by.\n          name: sortField\n          required: false\n          schema:\n            type: string\n            enum: [name, abbreviations, mainAbbreviation, synonyms, level, status, methodDescription, methodClass, methodFormula, scaleName, scaleClass, scaleDecimalPlaces, scaleLowerLimit, scaleUpperLimit, scaleCategories, createdAt, updatedAt, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName]\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortOrder'\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/multipleTraitsResponse'\n              examples:\n                multipleTraitsResponse:\n                  $ref: '#/components/examples/arrayOfTraits'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n    post:\n      tags:\n        - traits\n      summary: Create a list of traits\n      description: Create a list of traits in a given program\n      operationId: postTraits\n      parameters:\n        - name: programId\n          in: path\n          description: Id of program to get traits for\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      requestBody:\n        description: New trait object\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/arrayOfNewTraits'\n            example:\n              - traitName: \"Test Trait\"\n                traitClass: \"morphological\"\n                attribute: \"height\"\n                defaultValue: \"defaultValue\"\n                mainAbbreviation: \"t1\"\n                abbreviations: [\"t1\",\"t2\"]\n                synonyms: [\"stalk height\"]\n                programObservationLevel:\n                  name: \"Plant\"\n                method:\n                  methodClass: \"Counting\"\n                  description: \"A test method\"\n                  formula: \"a^2+b^2=c^2\"\n                scale:\n                  scaleName: \"Test Scale\"\n                  dataType: \"Numerical\"\n                  decimalPlaces: 3\n                  validValueMax: 9999\n                  validValueMin: 1\n                  categories:\n                    - label: \"test1\"\n                      value: \"value1\"\n                    - label: \"test2\"\n                      value: \"value2\"\n                tags: [\"favorites\", \"leaf length\"]\n                fullName: \"Test Trait Full Name\"\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/multipleTraitsResponse'\n              examples:\n                multipleTraitsResponse:\n                  $ref: '#/components/examples/arrayOfTraits'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n        \"422\":\n          description: Multi-error UnprocessableEntity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/validatorErrorResponse\"\n              example:\n                rowErrors:\n                  - rowIndex: 1\n                    errors:\n                      - field: \"programObservationLevel\"\n                        errorMessage: \"Missing trait name\"\n                        httpStatus: \"UNPROCESSABLE_ENTITY\"\n                        httpStatusCode: 422\n                      - field: \"abbreviations\"\n                        errorMessage: \"Abbreviations already exist\"\n                        httpStatus: \"CONFLICT\"\n                        httpStatusCode: 409\n                      - field: \"scale.dataType\"\n                        errorMessage: \"Missing scale data type\"\n                        httpStatus: \"UNPROCESSABLE_ENTITY\"\n                        httpStatusCode: 422\n                      - field: \"scale.categories\"\n                        errorMessage: \"Scale categories contain errors\"\n                        httpStatus: \"UNPROCESSABLE_ENTITY\"\n                        httpStatusCode: 422\n                        rowErrors:\n                          - rowIndex: 0\n                            errors:\n                              - field: \"scale.categories.label\"\n                                errorMessage: \"Missing value\"\n                                httpStatus: \"UNPROCESSABLE_ENTITY\"\n                                httpStatusCode: 422\n                              - field: \"scale.categories.value\"\n                                errorMessage: \"Missing value\"\n                                httpStatus: \"UNPROCESSABLE_ENTITY\"\n                                httpStatusCode: 422\n    put:\n      tags:\n        - traits\n      summary: Edit a list of traits\n      description: Edit a list of traits in a given program\n      operationId: putTraits\n      parameters:\n        - name: programId\n          in: path\n          description: Id of program to get traits for\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      requestBody:\n        description: Edited trait object\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/arrayOfEditedTraits'\n            example:\n              - traitId: \"8b2ed0b3-f0bf-4942-8992-4bb5a9876c3a\"\n                traitName: \"Test Trait\"\n                traitClass: \"morphological\"\n                attribute: \"height\"\n                defaultValue: \"defaultValue\"\n                mainAbbreviation: \"t1\"\n                abbreviations: [\"t1\",\"t2\"]\n                synonyms: [\"stalk height\"]\n                programObservationLevel:\n                  name: \"Plant\"\n                method:\n                  methodClass: \"Counting\"\n                  description: \"A test method\"\n                  formula: \"a^2+b^2=c^2\"\n                scale:\n                  scaleName: \"Test Scale\"\n                  dataType: \"Numerical\"\n                  decimalPlaces: 3\n                  validValueMax: 9999\n                  validValueMin: 1\n                  categories:\n                    - label: \"test1\"\n                      value: \"value1\"\n                    - label: \"test2\"\n                      value: \"value2\"\n                tags: [\"favorites\", \"leaf length\"]\n                fullName: \"Test Trait Full Name\"\n        required: true\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/multipleTraitsResponse'\n              examples:\n                multipleTraitsResponse:\n                  $ref: '#/components/examples/arrayOfTraits'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n        \"405\":\n          description: Method Not Allowed\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Trait has associated observations and cannot be updated\n        \"422\":\n          description: Multi-error UnprocessableEntity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/validatorErrorResponse\"\n              example:\n                rowErrors:\n                  - rowIndex: 1\n                    errors:\n                      - field: \"programObservationLevel\"\n                        errorMessage: \"Missing trait name\"\n                        httpStatus: \"UNPROCESSABLE_ENTITY\"\n                        httpStatusCode: 422\n                      - field: \"abbreviations\"\n                        errorMessage: \"Abbreviations already exist\"\n                        httpStatus: \"CONFLICT\"\n                        httpStatusCode: 409\n                      - field: \"scale.dataType\"\n                        errorMessage: \"Missing scale data type\"\n                        httpStatus: \"UNPROCESSABLE_ENTITY\"\n                        httpStatusCode: 422\n                      - field: \"scale.categories\"\n                        errorMessage: \"Scale categories contain errors\"\n                        httpStatus: \"UNPROCESSABLE_ENTITY\"\n                        httpStatusCode: 422\n                        rowErrors:\n                          - rowIndex: 0\n                            errors:\n                              - field: \"scale.categories.label\"\n                                errorMessage: \"Missing value\"\n                                httpStatus: \"UNPROCESSABLE_ENTITY\"\n                                httpStatusCode: 422\n                              - field: \"scale.categories.value\"\n                                errorMessage: \"Missing value\"\n                                httpStatus: \"UNPROCESSABLE_ENTITY\"\n                                httpStatusCode: 422\n  /programs/{programId}/traits/{traitId}/archive:\n    put:\n      tags:\n        - traits\n      summary: Archive/Restore a trait\n      description: Archive/Restore a trait in a given program\n      operationId: archiveTraits\n      parameters:\n        - name: programId\n          in: path\n          description: Id of program to get traits for\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: traitId\n          in: path\n          description: Id of trait to activate/inactivate\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: active\n          in: query\n          description: Boolean indicate whether to archive/restore trait. Set to false for archiving if not specified.\n          required: false\n          explode: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/singleTraitResponse'\n              examples:\n                singleTraitResponse:\n                  $ref: '#/components/examples/singleTrait'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n  /programs/{programId}/traits/search:\n    post:\n      tags:\n        - traits\n      parameters:\n        - name: programId\n          in: path\n          description: Id of program to get traits for\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - in: query\n          description: Field to sort the results by.\n          name: sortField\n          required: false\n          schema:\n            type: string\n            enum: [name, abbreviations, mainAbbreviation, synonyms, level, status, methodDescription, methodClass, methodFormula, scaleName, scaleClass, scaleDecimalPlaces, scaleLowerLimit, scaleUpperLimit, scaleCategories, createdAt, updatedAt, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName]\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortOrder'\n      summary: Search traits\n      description: Search traits using filters\n      operationId: searchTraits\n      requestBody:\n        description: Search request\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                filter:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      field:\n                        type: string\n                        enum: [name, abbreviations, mainAbbreviation, synonyms, level, status, methodDescription, methodClass, methodFormula, scaleName, scaleClass, scaleDecimalPlaces, scaleLowerLimit, scaleUpperLimit, scaleCategories, createdAt, updatedAt, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName]\n                      value:\n                        type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/multipleTraitsResponse'\n              examples:\n                multipleTraitsResponse:\n                  $ref: '#/components/examples/arrayOfTraits'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        \"404\":\n          $ref: '#/components/responses/404NotFound'\n  /programs/{programId}/traits/{traitId}:\n    get:\n      tags:\n        - traits\n      summary: Get a single trait by traitId\n      description: Gets a single trait with full level of detail\n      operationId: getTrait\n      parameters:\n        - name: programId\n          in: path\n          description: Id of program to get trait in\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: traitId\n          in: path\n          description: Id of trait to get trait for\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/singleTraitResponse'\n              examples:\n                singleTraitResponse:\n                  $ref: '#/components/examples/singleTrait'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n  /programs/{programId}/traits/{traitId}/editable:\n    get:\n      tags:\n        - traits\n      summary: Check if a trait is editable\n      description: If observations are associated with trait, it is not editable\n      operationId: getTraitEditable\n      parameters:\n        - name: programId\n          in: path\n          description: Id of program to get trait in\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: traitId\n          in: path\n          description: Id of trait to get trait for\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/traitEditableResponse'\n              examples:\n                traitEditableResponse:\n                  $ref: '#/components/examples/editable'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n  /programs/{programId}/traits/tags:\n    get:\n      tags:\n        - traits\n      parameters:\n        - name: programId\n          in: path\n          description: The id of the program\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      summary: Get all tags used for traits in a program\n      description: Get all tags used for traits in a program\n      operationId: getTraitTags\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tagsResponse'\n              examples:\n                tagsResponse:\n                  $ref: '#/components/examples/tagsResponse'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        \"404\":\n          $ref: '#/components/responses/404NotFound'\n  /programs/{programId}/observation-levels:\n    get:\n      tags:\n        - observation levels\n      parameters:\n        - name: programId\n          in: path\n          description: The id of the program\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      summary: Get all observation levels in the program\n      description: Get all observation levels in the program\n      operationId: getObservationLevels\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/observationLevelResponse'\n              examples:\n                observationLevelsResponse:\n                  $ref: '#/components/examples/observationLevelResponse'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        \"404\":\n          $ref: '#/components/responses/404NotFound'\n  /programs/{programId}/trait-upload:\n    put:\n      tags:\n        - uploads\n      parameters:\n        - name: programId\n          in: path\n          description: The id of the program\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      summary: Upload the trait csv/xls/xlsx file data\n      description: Upload trait file data for the user making the request in the indicated program. Only one trait upload at a time can exist per user per program.\n      operationId: putTraitUpload\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n            encoding:\n              file:\n                contentType: text/csv, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/traitUploadResponse'\n              examples:\n                traitUploadResponse:\n                  $ref: '#/components/examples/traitUploadData'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n        \"422\":\n          description: Multi-error UnprocessableEntity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/validatorErrorResponse\"\n              example:\n                rowErrors:\n                  - rowIndex: 2\n                    errors:\n                      - column: \"Trait level\"\n                        errorMessage: \"Missing trait name\"\n                        httpStatus: \"UNPROCESSABLE_ENTITY\"\n                        httpStatusCode: 422\n                      - column: \"Trait abbreviations\"\n                        errorMessage: \"Abbreviations already exist\"\n                        httpStatus: \"CONFLICT\"\n                        httpStatusCode: 409\n                      - column: \"Scale class\"\n                        errorMessage: \"Missing scale class\"\n                        httpStatus: \"UNPROCESSABLE_ENTITY\"\n                        httpStatusCode: 422\n    get:\n      tags:\n        - uploads\n      summary: Get the trait upload data\n      description: Gets the trait upload data for the specified program and requesting user\n      operationId: getTraitUpload\n      parameters:\n        - name: programId\n          in: path\n          description: Id of program to get trait upload in\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - in: query\n          description: Field to sort the results by.\n          name: sortField\n          required: false\n          schema:\n            type: string\n            enum: [name, abbreviations, mainAbbreviation, synonyms, level, status, methodDescription, methodClass, methodFormula, scaleName, scaleClass, scaleDecimalPlaces, scaleLowerLimit, scaleUpperLimit, scaleCategories, createdAt, updatedAt, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName]\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortOrder'\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/traitUploadResponse'\n              examples:\n                traitUploadResponse:\n                  $ref: '#/components/examples/traitUploadData'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n    delete:\n      tags:\n        - uploads\n      parameters:\n        - name: programId\n          in: path\n          description: Id of program to delete trait upload from\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      summary: Delete trait upload\n      description: Delete trait upload for the specified program and requesting user\n      operationId: deleteTraitUpload\n      responses:\n        \"200\":\n          description: OK\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n  /programs/{programId}/trait-upload/search:\n    post:\n      tags:\n        - uploads\n      parameters:\n        - name: programId\n          in: path\n          description: Id of program to get trait upload for\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - in: query\n          description: Field to sort the results by.\n          name: sortField\n          required: false\n          schema:\n            type: string\n            enum: [name, abbreviations, mainAbbreviation, synonyms, level, status, methodDescription, methodClass, methodFormula, scaleName, scaleClass, scaleDecimalPlaces, scaleLowerLimit, scaleUpperLimit, scaleCategories, createdAt, updatedAt, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName]\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/pageSize'\n        - $ref: '#/components/parameters/sortOrder'\n      summary: Search trait upload\n      description: Search trait upload using filters\n      operationId: searchTraitUpload\n      requestBody:\n        description: Search request\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                filter:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      field:\n                        type: string\n                        enum: [name, abbreviations, mainAbbreviation, synonyms, level, status, methodDescription, methodClass, methodFormula, scaleName, scaleClass, scaleDecimalPlaces, scaleLowerLimit, scaleUpperLimit, scaleCategories, createdAt, updatedAt, createdByUserId, createdByUserName, updatedByUserId, updatedByUserName]\n                      value:\n                        type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/traitUploadResponse'\n              examples:\n                traitUploadResponse:\n                  $ref: '#/components/examples/traitUploadData'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        \"404\":\n          $ref: '#/components/responses/404NotFound'\n  /programs/{programId}/trait-upload/{traitUploadId}:\n    post:\n      tags:\n        - uploads\n      parameters:\n        - name: programId\n          in: path\n          description: Id of program to get trait upload for\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: traitUploadId\n          in: path\n          description: Id of the trait upload to save\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      summary: Confirm and save existing trait upload as traits\n      description: Confirm and save existing trait upload as traits\n      operationId: postTraitUpload\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/multipleTraitsResponse'\n              examples:\n                multipleTraitsResponse:\n                  $ref: '#/components/examples/arrayOfTraits'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '422':\n          description: Multi-error UnprocessableEntity\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/validatorErrorResponse\"\n              example:\n                rowErrors:\n                  - rowIndex: 0\n                    errors:\n                      - column: \"Trait level\"\n                        errorMessage: \"Missing trait name\"\n                        httpStatus: \"UNPROCESSABLE_ENTITY\"\n                        httpStatusCode: 422\n                      - column: \"Trait abbreviations\"\n                        errorMessage: \"Abbreviations already exist\"\n                        httpStatus: \"CONFLICT\"\n                        httpStatusCode: 409\n                      - column: \"Scale class\"\n                        errorMessage: \"Missing scale class\"\n                        httpStatus: \"UNPROCESSABLE_ENTITY\"\n                        httpStatusCode: 422\n  /health:\n    get:\n      tags:\n        - server management\n      summary: checks if the server is up and able to be contacted\n      description: checks if the server is up and able to be contacted\n      operationId: health\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              example:\n                status: \"UP\"\n  /api-token:\n    get:\n      tags:\n        - token management\n      parameters:\n        - in: query\n          name: returnUrl\n          schema:\n            type: string\n          description: return url to redirect to\n      summary: Get api token\n      description: Get api token for user making the request\n      operationId: token\n      responses:\n        \"303\":\n          description: Redirect\n  /server-info:\n    get:\n      tags:\n        - server management\n      summary: return the server information about the running instance\n      description: return the server information, including the version of bi-api, and a link to to the release/commit of that version\n      operationId: getServerInfo\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              example:\n                versionName: 0.1.0,\n                versionInfo: https://github.com/Breeding-Insight/bi-api/releases/tag/v0.1.0\n  /countries:\n    get:\n      tags:\n        - countries\n      summary: Get list of all countries in the system.\n      description: Get list of all countries\n      operationId: getCountries\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/countriesResponse'\n              examples:\n                arrayOfCountries:\n                  $ref: '#/components/examples/arrayOfCountries'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n  /countries/{id}:\n    get:\n      tags:\n        - countries\n      summary: Get country information\n      description: Get a specific country\n      operationId: getCountryById\n      parameters:\n        - name: id\n          in: path\n          description: The id of the country information that needs to be fetched.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/countriesResponseSingle'\n              examples:\n                singleCountry:\n                  $ref: '#/components/examples/singleCountry'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n  /topography-options:\n    get:\n      tags:\n        - topography options\n      summary: Get list of all topography options in the system.\n      description: Get list of all topography options\n      operationId: getTopographyOptions\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/topographiesResponse'\n              examples:\n                arrayOfTopographies:\n                  $ref: '#/components/examples/arrayOfTopographyOptions'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n  /topography-options/{id}:\n    get:\n      tags:\n        - topography options\n      summary: Get topography option information\n      description: Get a specific topography option\n      operationId: getTopographyOptionById\n      parameters:\n        - name: id\n          in: path\n          description: The id of the topography option information that needs to be fetched.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/topographyOptionsResponseSingle'\n              examples:\n                singleTopography:\n                  $ref: '#/components/examples/singleTopographyOption'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n  /accessibility-options:\n    get:\n      tags:\n        - accessibility options\n      summary: Get list of all accessibility options in the system.\n      description: Get list of all accessibility options\n      operationId: getAccessibilityOptions\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/accessibilityOptionsResponse'\n              examples:\n                arrayOfAccessibilities:\n                  $ref: '#/components/examples/arrayOfAccessibilityOptions'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n  /accessibility-options/{id}:\n    get:\n      tags:\n        - accessibility options\n      summary: Get accessibility option information\n      description: Get a specific accessibility option\n      operationId: getAccessibilityOptionById\n      parameters:\n        - name: id\n          in: path\n          description: The id of the accessibility option information that needs to be fetched.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/accessibilityOptionsResponseSingle'\n              examples:\n                singleAccessibility:\n                  $ref: '#/components/examples/singleAccessibilityOption'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\n  /environment-data-types:\n    get:\n      tags:\n        - environment data types\n      summary: Get list of all environment data types in the system.\n      description: Get list of all environment data types\n      operationId: getEnvironmentDataTypes\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/environmentDataTypesResponse'\n              examples:\n                arrayOfEnvironmentDataTypes:\n                  $ref: '#/components/examples/arrayOfEnvironmentDataTypes'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n  /environment-data-types/{id}:\n    get:\n      tags:\n        - environmentDataTypes\n      summary: Get environment data type information\n      description: Get a specific environment data type\n      operationId: getEnvironmentDataTypeById\n      parameters:\n        - name: id\n          in: path\n          description: The id of the environment data type information that needs to be fetched.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/environmentDataTypesResponseSingle'\n              examples:\n                singleEnvironmentDataType:\n                  $ref: '#/components/examples/singleEnvironmentDataType'\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n              example: |-\n                ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n                ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n                ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n        \"401\":\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n                token\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - User does not have permission\n                to perform this action\n        \"404\":\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                type: string\n              example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is\n                not found\ncomponents:\n  schemas:\n    metadata:\n      type: object\n      properties:\n        datafiles:\n          type: array\n          description: The datafiles key contains a list of file paths, which can\n            be relative or complete URLs. These files contain additional information\n            related to the returned object and can be retrieved by a subsequent call.\n            The empty list should be returned if no additional data files are present.\n          items:\n            type: string\n\n        pagination:\n          $ref: '#/components/schemas/metadata_pagination'\n        status:\n          type: array\n          description: The status field contains a list of informational status messages\n            from the server. If no status is reported, an empty list should be returned.\n            See Error Reporting for more information.\n          items:\n            $ref: '#/components/schemas/status'\n    status:\n      required:\n        - message\n        - messageType\n      type: object\n      properties:\n        message:\n          type: string\n          description: A short message concerning the status of this request/response\n        messageType:\n          type: string\n          description: The logging level for the attached message\n          enum:\n            - DEBUG\n            - ERROR\n            - WARNING\n            - INFO\n    user:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        orcid:\n          type: string\n        name:\n          type: string\n        email:\n          type: string\n        active:\n          type: boolean\n        systemRoles:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            domain:\n              type: string\n        programRoles:\n          type: object\n          properties:\n            active:\n              type: boolean\n            roles:\n              type: array\n              items:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    format: uuid\n                  domain:\n                    type: string\n            program:\n              type: object\n              properties:\n                id:\n                  type: string\n                  format: uuid\n                name:\n                  type: string\n                abbreviation:\n                  type: string\n                objective:\n                  type: string\n    country:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n        alpha2Code:\n          type: string\n        alpha3Code:\n          type: string\n    topographyOption:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n    accessibilityOption:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n    environmentDataType:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n    role:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        domain:\n          type: string\n    systemRole:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        domain:\n          type: string\n    programUser:\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/user'\n        roles:\n          type: array\n          description: Array of roles\n          items:\n            $ref: '#/components/schemas/role'\n        program:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n            abbreviation:\n              type: string\n            objective:\n              type: string\n    program:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n        key:\n          type: string\n        abbreviation:\n          type: string\n        objective:\n          type: string\n        documentation_url:\n          type: string\n        active:\n          type: boolean\n        brapiUrl:\n          type: string\n        numUsers:\n          type: integer\n        createdAt:\n          type: string\n          format: datetime\n        updatedAt:\n          type: string\n          format: datetime\n        species:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            commonName:\n              type: string\n        createdByUser:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n        updatedByUser:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n    location:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        country:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n            alpha2Code:\n              type: string\n            alpha3Code:\n              type: string\n        environmentType:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n        accessibility:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n        topography:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n        name:\n          type: string\n        abbreviation:\n          type: string\n        coordinates:\n          $ref: '#/components/schemas/geoJSON'\n        coordinateUncertainty:\n          type: number\n        coordinateDescription:\n          type: string\n        slope:\n          type: number\n        exposure:\n          type: string\n        documentationUrl:\n          type: string\n        createdAt:\n          type: string\n          format: datetime\n        updatedAt:\n          type: string\n          format: datetime\n        createdByUser:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n        updatedByUser:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n    geoJSON:\n      description: 'One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n        Copied from RFC 7946 Section 3.1.1\n        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\n        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.'\n      properties:\n        geometry:\n          description: A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.\n          discriminator:\n            mapping:\n              Point: '#/components/schemas/pointGeometry'\n              Polygon: '#/components/schemas/polygonGeometry'\n            propertyName: type\n          example:\n            coordinates:\n              - -76.506042\n              - 42.417373\n              - 123\n            type: Point\n          oneOf:\n            - $ref: '#/components/schemas/pointGeometry'\n            - $ref: '#/components/schemas/polygonGeometry'\n          title: GeoJSON Geometry\n          type: object\n        type:\n          default: Feature\n          description: The literal string \"Feature\"\n          example: Feature\n          type: string\n      title: GeoJSON\n      type: object\n    pointGeometry:\n      description: 'Copied from RFC 7946 Section 3.1.1\n        A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\n        easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.'\n      properties:\n        coordinates:\n          $ref: '#/components/schemas/position'\n        type:\n          default: Point\n          description: The literal string \"Point\"\n          example: Point\n          type: string\n      type: object\n    polygon:\n      description: An array of linear rings\n      example:\n        - - - -77.456654\n            - 42.241133\n            - 494\n          - - -75.414133\n            - 41.508282\n            - 571\n          - - -76.506042\n            - 42.417373\n            - 123\n          - - -77.456654\n            - 42.241133\n            - 346\n      items:\n        $ref: '#/components/schemas/linearRing'\n      type: array\n    polygonGeometry:\n      description: \"An array of Linear Rings. Each Linear Ring is an array of Points. \\n\\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.\"\n      properties:\n        coordinates:\n          $ref: '#/components/schemas/polygon'\n        type:\n          default: Polygon\n          description: The literal string \"Polygon\"\n          example: Polygon\n          type: string\n      type: object\n    position:\n      description: A single position\n      example:\n        - -76.506042\n        - 42.417373\n        - 123\n      items:\n        type: number\n      minItems: 2\n      type: array\n    linearRing:\n      description: An array of at least four positions where the first equals the last\n      example:\n        - - -77.456654\n          - 42.241133\n          - 494\n        - - -75.414133\n          - 41.508282\n          - 571\n        - - -76.506042\n          - 42.417373\n          - 123\n        - - -77.456654\n          - 42.241133\n          - 346\n      items:\n        $ref: '#/components/schemas/position'\n      minItems: 4\n      type: array\n    newUserRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: name of this user\n        email:\n          type: string\n          description: email address of this user\n        systemRoles:\n          type: array\n          description: Array of system role objects\n          items:\n            $ref: '#/components/schemas/systemRole'\n    newProgramUserRequest:\n      type: object\n      properties:\n        user:\n          type: object\n          properties:\n            id:\n              type: string\n              description: Id of user to assign to program\n            name:\n              type: string\n              description: Name of the user\n            email:\n              type: string\n              description: Email address of this user\n          required:\n            - id\n        roles:\n          type: array\n          description: Array of roles\n          items:\n            $ref: '#/components/schemas/role'\n      required:\n        - user\n        - roles\n    updateSystemRolesRequest:\n      type: object\n      properties:\n        systemRoles:\n          type: array\n          description: Array of system role objects\n          items:\n            $ref: '#/components/schemas/systemRole'\n    newProgramLocationRequest:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        country:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n            alpha2Code:\n              type: string\n            alpha3Code:\n              type: string\n        environmentType:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n        accessibility:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n        topography:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n        name:\n          type: string\n        abbreviation:\n          type: string\n        coordinates:\n          $ref: '#/components/schemas/geoJSON'\n        coordinateUncertainty:\n          type: number\n        coordinateDescription:\n          type: string\n        slope:\n          type: number\n        exposure:\n          type: string\n        documentationUrl:\n          type: string\n    usersResponse:\n      title: usersResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/usersResponse_result'\n    locationsResponse:\n      title: locationsResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/locationsResponseResult'\n    locationsResponseSingle:\n      title: locationsResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/location'\n    updateProgramRequest:\n      type: object\n      properties:\n        species:\n          type: object\n          properties:\n            id:\n              type: string\n              description: Id of species to assign to program\n            commonName:\n              type: string\n              description: Name of species\n          required:\n            - id\n        name:\n          type: string\n          description: name of program\n        abbreviation:\n          type: string\n          description: abbreviation for program name\n        objective:\n          type: string\n          description: program objective\n        documetation_url:\n          type: string\n          description: program documentation url\n        brapiUrl:\n          type: string\n          description: url of brapi service to store data at\n      required:\n        - species\n        - name\n    countriesResponse:\n      title: countriesResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/countriesResponseResult'\n    countriesResponseResult:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: array\n          description: Array of countries\n          items:\n            $ref: '#/components/schemas/country'\n    countriesResponseSingle:\n      title: countriesResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/country'\n    topographiesResponse:\n      title: topographiesResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/topographiesResponseResult'\n    topographiesResponseResult:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: array\n          description: Array of topographies\n          items:\n            $ref: '#/components/schemas/topographyOption'\n    topographiesResponseSingle:\n      title: topographiesResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/topographyOption'\n    accessibilitiesResponse:\n      title: accessibilitiesResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/accessibilitiesResponseResult'\n    accessibilitiesResponseResult:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: array\n          description: Array of accessibilities\n          items:\n            $ref: '#/components/schemas/accessibilityOption'\n    accessibilitiesResponseSingle:\n      title: accessibilitiesResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/accessibilityOption'\n    environmentTypesResponse:\n      title: environmentTypesResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/environmentTypesResponseResult'\n    environmentTypesResponseResult:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: array\n          description: Array of environemnt types\n          items:\n            $ref: '#/components/schemas/environmentDataType'\n    environmentTypesResponseSingle:\n      title: environmentTypesResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/location'\n    topographyOptionsResponseResult:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: array\n          description: Array of topographies\n          items:\n            $ref: '#/components/schemas/topographyOption'\n    topographyOptionsResponseSingle:\n      title: topographyOptionsResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/topographyOption'\n    accessibilityOptionsResponse:\n      title: accessibilityOptionsResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/accessibilityOptionsResponseResult'\n    accessibilityOptionsResponseResult:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: array\n          description: Array of accessibility options\n          items:\n            $ref: '#/components/schemas/accessibilityOption'\n    accessibilityOptionsResponseSingle:\n      title: accessibilityOptionsResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/accessibilityOption'\n    environmentDataTypesResponse:\n      title: environmentDataTypesResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/environmentDataTypesResponseResult'\n    environmentDataTypesResponseResult:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: array\n          description: Array of environemnt data types\n          items:\n            $ref: '#/components/schemas/environmentDataType'\n    environmentDataTypesResponseSingle:\n      title: environmentDataTypesResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/environmentDataType'\n    rolesResponse:\n      title: rolesResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/rolesResponseResult'\n    rolesResponseResult:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: array\n          description: Array of roles\n          items:\n            $ref: '#/components/schemas/role'\n    rolesResponseSingle:\n      title: rolesResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/role'\n    programsResponse:\n      title: programsResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/programsResponseResult'\n    programsResponseSingle:\n      title: programsResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/program'\n    programUserResponse:\n      title: programUserResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/programUser'\n\n    usersResponse_1:\n      title: usersResponse\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/user'\n    metadata_pagination:\n      type: object\n      properties:\n        currentPage:\n          type: integer\n        pageSize:\n          type: integer\n        totalCount:\n          type: integer\n        totalPages:\n          type: integer\n      description: The pagination object is applicable only when the payload contains\n        a \"data\" key. It describes the pagination of the data contained in the \"data\"\n        array, as a way to identify which subset of data is being returned. Pages\n        are zero indexed, so the first page will be page 0 (zero).\n    usersResponse_result:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: array\n          description: Array of users\n          items:\n            $ref: '#/components/schemas/user'\n    programUserResponseResult:\n      type: object\n      properties:\n        data:\n          type: array\n          description: Array of program users\n          items:\n            $ref: '#/components/schemas/programUser'\n    locationsResponseResult:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: array\n          description: Array of locations\n          items:\n            $ref: '#/components/schemas/location'\n    programsResponseResult:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: array\n          description: Array of programs\n          items:\n            $ref: '#/components/schemas/program'\n    multipleTraitsResponse:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: array\n          description: Array of traits\n          items:\n            $ref: '#/components/schemas/trait'\n    singleTraitResponse:\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/trait'\n    traitEditableResponse:\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/editable'\n    editable:\n      type: object\n      properties:\n        editable:\n          type: boolean\n          description: Indicate if trait is editable\n    trait:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: System id of the trait\n        traitName:\n          type: string\n          description: Trait display name\n        active:\n          type: boolean\n          description: Trait active status\n        createdAt:\n          type: string\n          format: datetime\n        updatedAt:\n          type: string\n          format: datetime\n        createdByUser:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n        updatedByUser:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n        traitClass:\n          type: string\n          example: \"morphological\"\n        attribute:\n          type: string\n          description: Attribute the trait is describing\n          example: height\n        defaultValue:\n          type: string\n          description: Default value of the trait\n        mainAbbreviation:\n          type: string\n        abbreviations:\n          type: array\n          items:\n            type: string\n        synonyms:\n          type: array\n          items:\n            type: string\n        programObservationLevel:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n              description: System id of the observation level\n            name:\n              type: string\n              description: Name of the observation level\n        method:\n          type: object\n          properties:\n            methodClass:\n              type: string\n            description:\n              type: string\n            formula:\n              type: string\n        scale:\n          type: object\n          properties:\n            scaleName:\n              type: string\n            dataType:\n              type: string\n            decimalPlaces:\n              type: integer\n            categories:\n              type: array\n              items:\n                type: object\n                properties:\n                  label:\n                    type: string\n                  value:\n                    type: string\n            validValueMax:\n              type: integer\n            validValueMin:\n              type: integer\n        tags:\n          type: array\n          items:\n            type: string\n        fullName:\n          type: string\n          description: Full trait display name\n    traitUploadResponse:\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          $ref: '#/components/schemas/traitUpload'\n    traitUpload:\n      type: object\n      properties:\n        type:\n          type: string\n          description: Type of upload\n        data:\n          type: object\n          properties:\n            traitName:\n              type: string\n              description: Trait display name\n            active:\n              type: boolean\n              description: Trait active status\n            programObservationLevel:\n              type: object\n              properties:\n                id:\n                  type: string\n                  format: uuid\n                  description: System id of the observation level\n                name:\n                  type: string\n                  description: Name of the observation level\n                active:\n                  type: boolean\n                createdAt:\n                  type: string\n                  format: datetime\n                updatedAt:\n                  type: string\n                  format: datetime\n            method:\n              type: object\n              properties:\n                methodClass:\n                  type: string\n                description:\n                  type: string\n                formula:\n                  type: string\n            scale:\n              type: object\n              properties:\n                scaleName:\n                  type: string\n                dataType:\n                  type: string\n                decimalPlaces:\n                  type: integer\n                categories:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      label:\n                        type: string\n                      value:\n                        type: string\n                validValueMax:\n                  type: integer\n                validValueMin:\n                  type: integer\n            mainAbbreviation:\n              type: string\n            abbreviations:\n              type: array\n              items:\n                type: string\n            synonyms:\n              type: array\n              items:\n                type: string\n            tags:\n              type: array\n              items:\n                type: string\n            fullName:\n              type: string\n              description: Full trait display name\n        createdAt:\n          type: string\n          format: datetime\n        updatedAt:\n          type: string\n          format: datetime\n        user:\n          $ref: '#/components/schemas/user'\n        program:\n          $ref: '#/components/schemas/program'\n        createdByUser:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n        updatedByUser:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n    arrayOfNewTraits:\n      type: array\n      items:\n        $ref: '#/components/schemas/newTrait'\n    newTrait:\n      type: object\n      properties:\n        traitName:\n          type: string\n          description: Trait display name\n        traitClass:\n          type: string\n          example: \"morphological\"\n        attribute:\n          type: string\n          description: Attribute the trait is describing\n          example: height\n        defaultValue:\n          type: string\n          description: Default value of the trait\n        mainAbbreviation:\n          type: string\n        abbreviations:\n          type: array\n          items:\n            type: string\n        synonyms:\n          type: array\n          items:\n            type: string\n        programObservationLevel:\n          type: object\n          properties:\n            name:\n              type: string\n              description: Name of the observation level\n        method:\n          type: object\n          properties:\n            methodClass:\n              type: string\n            description:\n              type: string\n              format: UUID\n            formula:\n              type: string\n              format: UUID\n        scale:\n          type: object\n          properties:\n            scaleName:\n              type: string\n              format: datetime\n            dataType:\n              type: string\n              format: datetime\n            decimalPlaces:\n              type: integer\n            categories:\n              type: array\n              items:\n                type: object\n                properties:\n                  label:\n                    type: string\n                  value:\n                    type: string\n            validValueMax:\n              type: integer\n            validValueMin:\n              type: integer\n        tags:\n          type: array\n          items:\n            type: string\n        fullName:\n          type: string\n          description: Full trait display name\n    arrayOfEditedTraits:\n      type: array\n      items:\n        $ref: '#/components/schemas/editedTrait'\n    editedTrait:\n      type: object\n      required:\n        - traitId\n      properties:\n        traitId:\n          type: string\n          format: uuid\n          description: ID of the trait to edit\n        traitName:\n          type: string\n          description: Trait display name\n        traitClass:\n          type: string\n          example: \"morphological\"\n        attribute:\n          type: string\n          description: Attribute the trait is describing\n          example: height\n        defaultValue:\n          type: string\n          description: Default value of the trait\n        mainAbbreviation:\n          type: string\n        abbreviations:\n          type: array\n          items:\n            type: string\n        synonyms:\n          type: array\n          items:\n            type: string\n        programObservationLevel:\n          type: object\n          properties:\n            name:\n              type: string\n              description: Name of the observation level\n        method:\n          type: object\n          properties:\n            methodClass:\n              type: string\n            description:\n              type: string\n              format: UUID\n            formula:\n              type: string\n              format: UUID\n        scale:\n          type: object\n          properties:\n            scaleName:\n              type: string\n              format: datetime\n            dataType:\n              type: string\n              format: datetime\n            decimalPlaces:\n              type: integer\n            categories:\n              type: array\n              items:\n                type: object\n                properties:\n                  label:\n                    type: string\n                  value:\n                    type: string\n            validValueMax:\n              type: integer\n            validValueMin:\n              type: integer\n        tags:\n          type: array\n          items:\n            type: string\n        fullName:\n          type: string\n          description: Full trait display name\n    validatorErrorResponse:\n      type: object\n      properties:\n        rowErrors:\n          type: array\n          items:\n            type: object\n            properties:\n              rowIndex:\n                type: integer\n                description: \"Row number in the uploaded file for the trait with errors.\"\n              errors:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    field:\n                      type: string\n                      description: \"Field name that is the source of the error\"\n                    errorMessage:\n                      type: string\n                      description: \"A description fo the error\"\n                    httpStatus:\n                      type: string\n                      description: \"Text representation fo the error code\"\n                    httpStatusCode:\n                      type: integer\n                      description: \"Http error code\"\n                    rowErrors:\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          errors:\n                            type: array\n                            items:\n                              type: object\n                              properties:\n                                field:\n                                  type: string\n                                  description: \"Field name that is the source of the error\"\n                                errorMessage:\n                                  type: string\n                                  description: \"A description fo the error\"\n                                httpStatus:\n                                  type: string\n                                  description: \"Text representation fo the error code\"\n                                httpStatusCode:\n                                  type: integer\n                                  description: \"Http error code\"\n    observationLevelResponse:\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          type: object\n          properties:\n            data:\n              type: array\n              items:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    format: uuid\n                  name:\n                    type: string\n                  createdAt:\n                    type: string\n                    format: datetime\n                  updatedAt:\n                    type: string\n                    format: datetime\n    tagsResponse:\n      required:\n        - metadata\n        - result\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/metadata'\n        result:\n          type: object\n          properties:\n            data:\n              type: array\n              items:\n                type: string\n  responses:\n    \"400BadRequest\":\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            type: string\n          example: |-\n            ERROR - 2018-10-08T20:15:11Z - Malformed JSON Request Object\n            ERROR - 2018-10-08T20:15:11Z - Invalid query parameter\n            ERROR - 2018-10-08T20:15:11Z - Required parameter is missing\n    \"401Unauthorized\":\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            type: string\n          example: ERROR - 2018-10-08T20:15:11Z - Missing or expired authorization\n            token\n    \"403Forbidden\":\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            type: string\n          example: ERROR - 2018-10-08T20:15:11Z - User does not have permission to\n            perform this action\n    \"404NotFound\":\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            type: string\n          example: ERROR - 2018-10-08T20:15:11Z - The requested object DbId is not\n            found\n  securitySchemes:\n    orcid_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://sandbox.orcid.org/oauth/authorize\n          scopes:\n            write:bi: modify\n            read:bi: read\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n  examples:\n    arrayOfPrograms:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 2\n            totalPages: 1\n          status: []\n        result:\n          data:\n            - id: b2263532-1fa3-49a6-9a66-957f313c8ed6\n              name: Bob Smith's Breeding Program\n              key: BSBP\n              abbreviation: BSBP\n              objective: To breed the best grapes in the world\n              documentationUrl: http://www.bobsbestbreeding.com\n              active: true\n              createdAt: \"2020-03-09T09:57:35-04:00\"\n              updatedAt: \"2020-03-09T09:59:25-04:00\"\n              species:\n                id: b3764582-e1ac-4c5c-85c4-b76bae0a18d2\n                commonName: \"Grape\"\n              brapiUrl: http://www.brapi.com\n              numUsers: 1\n              createdByUser:\n                id: e024a9be-98bf-4802-bec0-16bdf7343888\n                name: Bob Smith\n              updatedByUser:\n                id: c2d6c5c3-4064-4afe-abd6-0af90fbf2243\n                name: Stacy Stacktrace\n            - id: e2263532-1fa3-49a6-9a66-957f313c8ed3\n              name: Franks's Salmon\n              abbreviation: FS\n              objective: To breed the best salmon in the world\n              documentation_url: http://www.franks.com\n              active: true\n              brapiUrl: http://www.brapiserver.com\n              numUsers: 2\n              createdAt: \"2020-03-09T09:57:35-04:00\"\n              updatedAt: \"2020-03-09T09:59:25-04:00\"\n              species:\n                id: 239b9ce5-bf72-412e-a456-42ecb2a621ec\n                commonName: Salmon\n              createdByUser:\n                id: e024a9be-98bf-4802-bec0-16bdf7343888\n                name: Bob Smith\n              updatedByUser:\n                id: c2d6c5c3-4064-4afe-abd6-0af90fbf2243\n                name: Stacy Stacktrace\n    singleProgram:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 1\n            totalPages: 1\n          status: []\n        result:\n          id: b2263532-1fa3-49a6-9a66-957f313c8ed6\n          name: Bob Smith's Breeding Program\n          key: BSBP\n          abbreviation: BSBP\n          objective: To breed the best grapes in the world\n          documentationUrl: http://www.bobsbestbreeding.com\n          active: true\n          brapiUrl: http://www.brapiserver.com\n          numUsers: 2\n          createdAt: \"2020-03-09T09:57:35-04:00\"\n          updatedAt: \"2020-03-09T09:59:25-04:00\"\n          species:\n            id: b3764582-e1ac-4c5c-85c4-b76bae0a18d2\n            commonName: \"Grape\"\n          createdByUser:\n            id: e024a9be-98bf-4802-bec0-16bdf7343888\n            name: Bob Smith\n          updatedByUser:\n            id: c2d6c5c3-4064-4afe-abd6-0af90fbf2243\n            name: Stacy Stacktrace\n    updateProgramRequestExample:\n      value:\n        species:\n          id: f4f23375-0033-4d16-a62f-072e3a9198fs\n          commonName: \"Sweetpotato\"\n        name: Tim's program\n        abbreviation: TP\n        objective: To breed some good stuff\n        documentationUrl: http://www.timsgoodstuff.com\n        brapiUrl: http://www.brapi.org\n    arrayOfProgramUsers:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 2\n            totalPages: 1\n          status: []\n        result:\n          data:\n            - createdAt: \"2020-03-09T09:57:35-04:00\"\n              updatedAt: \"2020-03-09T09:57:35-04:00\"\n              createdByUser:\n                id: e024a9be-98bf-4802-bec0-16bdf7343888\n                name: Bob Smith\n                email: bob@bob.com\n              updatedByUser:\n                id: c2d6c5c3-4064-4afe-abd6-0af90fbf2243\n                name: Stacy Stacktrace\n                email: stacy@stacy.com\n              user:\n                id: b2263532-1fa3-49a6-9a66-957f313c8ed6\n                name: Bob Smith\n                email: bob.smith@mail.com\n              roles:\n                - id: e2d6c5c3-4064-4afe-abd6-0af90fbf2245\n                  domain: Breeder\n              program:\n                id: 37935efa-4c0f-4269-8669-f78d21b26f04\n                name: Test Program\n                abbreviation: test,\n                objective: To test things\n            - createdAt: \"2020-02-09T09:57:35-04:00\"\n              updatedAt: \"2020-02-09T09:57:35-04:00\"\n              createdByUser:\n                id: e024a9be-98bf-4802-bec0-16bdf7343888\n                name: Fred Smith\n                email: fred@smith.com\n              updatedByUser:\n                id: c2d6c5c3-4064-4afe-abd6-0af90fbf2243\n                name: Joe Dirt\n                email: joe@dirt.com\n              user:\n                id: b2263532-1fa3-49a6-9a66-957f313c8ed6\n                name: Tim Smith\n                email: tim.smith@mail.com\n              roles:\n                - id: e2d6c5c3-4064-4afe-abd6-0af90fbf2245\n                  domain: Breeder'\n              program:\n                id: 37935efa-4c0f-4269-8669-f78d21b26f04\n                name: Test Program\n                abbreviation: test,\n                objective: To test things\n    singleProgramUser:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 1\n            totalPages: 1\n          status: []\n        result:\n          createdAt: \"2020-01-09T09:57:35-04:00\"\n          updatedAt: \"2020-01-09T09:57:35-04:00\"\n          createdByUser:\n            id: d024a9be-98bf-4802-bec0-16bdf7343888\n            name: Mark Smith\n            email: mark@smith.com\n          updatedByUser:\n            id: 2d6c5c3-4064-4afe-abd6-0af90fbf2243\n            name: Stacy Stacktrace\n            email: stacy@stacy.com\n          user:\n            id: b2263532-1fa3-49a6-9a66-957f313c8ed6\n            name: Bob Smith\n            email: bob.smith@mail.com\n          roles:\n            - id: e2d6c5c3-4064-4afe-abd6-0af90fbf2245\n              domain: Field Manager\n          program:\n            id: 37935efa-4c0f-4269-8669-f78d21b26f04\n            name: Test Program\n            abbreviation: test,\n            objective: To test things\n    arrayOfCountries:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 2\n            totalPages: 1\n          status: []\n        result:\n          data:\n            - id: 75a9e07f-1f00-45ff-a7e9-17eeddd35122\n              name: United States of America\n              alpha2Code: US\n              alpha3Code: USA\n            - id: 8f6018d9-054e-45a2-bcfa-3f31940431d0\n              name: United Kingdom of Great Britain and Northern Ireland\n              alpha2Code: GB\n              alpha3Code: GBR\n    singleCountry:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 0\n            pageSize: 1\n            totalCount: 1\n            totalPages: 1\n          status: []\n        result:\n          id: 75a9e07f-1f00-45ff-a7e9-17eeddd35122\n          name: United States of America\n          alpha2Code: US\n          alpha3Code: USA\n    arrayOfTopographyOptions:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 2\n            totalPages: 1\n          status: []\n        result:\n          data:\n            - id: 60a5b049-064c-4550-b5cd-2a7394724bdc\n              name: plateau\n            - id: 8cc0390e-e490-443a-948b-e2fde4a7627e\n              name: cirque\n    singleTopographyOption:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 1\n            totalPages: 1\n          status: []\n        result:\n          id: 60a5b049-064c-4550-b5cd-2a7394724bdc\n          name: plateau\n    arrayOfAccessibilityOptions:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 2\n            totalPages: 1\n          status: []\n        result:\n          data:\n            - id: 1eab0b9d-400f-4e85-97cb-9071ab95c6a4\n              name: private\n            - id: 59f6652d-ec2e-4db0-b748-02302656ec1c\n              name: public\n    singleAccessibilityOption:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 1\n            totalPages: 1\n          status: []\n        result:\n          id: 1eab0b9d-400f-4e85-97cb-9071ab95c6a4\n          name: private\n    arrayOfEnvironmentDataTypes:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 2\n            totalPages: 1\n          status: []\n        result:\n          data:\n            - id: bda2c118-fe26-4776-a106-e3cf2a0c7b59\n              name: forest\n            - id: aa887f61-a831-4663-9d12-7368c1961590\n              name: field\n    singleEnvironmentDataType:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 1\n            totalPages: 1\n          status: []\n        result:\n          id: bda2c118-fe26-4776-a106-e3cf2a0c7b59\n          name: forest\n    arrayOfRoles:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 2\n            totalPages: 1\n          status: []\n        result:\n          data:\n            - id: e2d6c5c3-4064-4afe-abd6-0af90fbf2245\n              domain: Breeder\n            - id: a2d6c5c3-4064-4afe-abd6-0af90fbf2245\n              domain: Member\n    arrayOfSystemRoles:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 2\n            totalPages: 1\n          status: []\n        result:\n          data:\n            - id: e2d6c5c3-4064-4afe-abd6-0af90fbf2245\n              domain: admin\n            - id: a2d6c5c3-4064-4afe-abd6-0af90fbf2245\n              domain: user\n    singleRole:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 1\n            totalPages: 1\n          status: []\n        result:\n          id: e2d6c5c3-4064-4afe-abd6-0af90fbf2245\n          domain: Field Manager\n    singleSystemRole:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 1\n            totalPages: 1\n          status: []\n        result:\n          id: e2d6c5c3-4064-4afe-abd6-0af90fbf2245\n          domain: admin\n    arrayOfLocations:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 2\n            totalPages: 1\n          status: []\n        result:\n          data:\n            - createdAt: \"2020-03-09T09:57:35-04:00\"\n              updatedAt: \"2020-03-09T09:57:35-04:00\"\n              createdByUser:\n                id: e024a9be-98bf-4802-bec0-16bdf7343888\n                name: Bob Smith\n                email: bob@bob.com\n              updatedByUser:\n                id: e024a9be-98bf-4802-bec0-16bdf7343888\n                name: Bob Smith\n                email: bob@bob.com\n              id: d2263532-1fa3-49a6-9a66-957f313c8ed2\n              country:\n                name: United States of America\n                alpha2Code: US\n                alpha3Code: USA\n              environmentType:\n                id: d2263532-1fa3-49a6-9a66-957f313c8ed3\n                name: field\n              accessibility:\n                id: d2263532-1fa3-49a6-9a66-957f313c8ed4\n                name: public\n              topography:\n                id: d2263532-1fa3-49a6-9a66-957f313c8ed6\n                name: valley\n              name: Nick's Field\n              abbreviation:  NF\n              coordinates: {\n                \"geometry\": {\n                  \"coordinates\": [\n                      -76.506042,\n                      42.417373,\n                      123\n                  ],\n                  \"type\": \"Point\"\n                },\n                \"type\": \"Feature\"\n              }\n              coordinateUncertainty:  0\n              coordinateDescription:  Northwest corner of field\n              slope: 1\n              exposure: none\n              documentationUrl: http://www.nick.com\n            - createdAt: \"2020-03-09T09:59:35-04:00\"\n              updatedAt: \"2020-03-09T09:59:35-04:00\"\n              createdByUser:\n                id: e024a9be-98bf-4802-bec0-16bdf7343888\n                name: Bob Smith\n                email: bob@bob.com\n              updatedByUser:\n                id: e024a9be-98bf-4802-bec0-16bdf7343888\n                name: Bob Smith\n                email: bob@bob.com\n              id: e2263532-1fa3-49a6-9a66-957f313c8ed2\n              country:\n                name: United States of America\n                alpha2Code: US\n                alpha3Code: USA\n              environmentType:\n                id: d2263532-1fa3-49a6-9a66-957f313c8ed3\n                name: field\n              accessibility:\n                id: d2263532-1fa3-49a6-9a66-957f313c8ed4\n                name: public\n              topography:\n                id: d2263532-1fa3-49a6-9a66-957f313c8ed6\n                name: valley\n              name: Nick's Field\n              abbreviation:  NF\n              coordinates: {\n                \"geometry\": {\n                  \"coordinates\": [\n                      -76.506042,\n                      42.417374,\n                      123\n                  ],\n                  \"type\": \"Point\"\n                },\n                \"type\": \"Feature\"\n              }\n              coordinateUncertainty:  0\n              coordinateDescription:  Northeast corner of field\n              slope: 1\n              exposure: none\n              documentationUrl: http://www.nick.com\n    singleLocation:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 1\n            totalPages: 1\n          status: []\n        result:\n          createdAt: \"2020-03-09T09:59:35-04:00\"\n          updatedAt: \"2020-03-09T09:59:35-04:00\"\n          createdByUser:\n            id: e024a9be-98bf-4802-bec0-16bdf7343888\n            name: Bob Smith\n            email: bob@bob.com\n          updatedByUser:\n            id: e024a9be-98bf-4802-bec0-16bdf7343888\n            name: Bob Smith\n            email: bob@bob.com\n          id: e2263532-1fa3-49a6-9a66-957f313c8ed2\n          country:\n            name: United States of America\n            alpha2Code: US\n            alpha3Code: USA\n          environmentType:\n            id: d2263532-1fa3-49a6-9a66-957f313c8ed3\n            name: field\n          accessibility:\n            id: d2263532-1fa3-49a6-9a66-957f313c8ed4\n            name: public\n          topography:\n            id: d2263532-1fa3-49a6-9a66-957f313c8ed6\n            name: valley\n          name: Nick's Field\n          abbreviation:  NF\n          coordinates: {\n            \"geometry\": {\n              \"coordinates\": [\n                  -76.506042,\n                  42.417374,\n                  123\n              ],\n              \"type\": \"Point\"\n            },\n            \"type\": \"Feature\"\n          }\n          coordinateUncertainty:  0\n          coordinateDescription:  Northeast corner of field\n          slope: 1\n          exposure: none\n          documentationUrl: http://www.nick.com\n    arrayOfTraits:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 1\n            totalPages: 1\n          status: []\n        result:\n          data:\n            [\n              {\n                id: \"00385063-01c8-4afc-a684-3c84b90b2de9\",\n                traitName: \"Test Trait\",\n                active: true,\n                createdAt: \"2020-06-04T11:05:48-04:00\",\n                updatedAt: \"2020-06-04T11:05:48-04:00\",\n                traitClass: \"morphological\",\n                attribute: \"height\",\n                defaultValue: \"defaultValue\",\n                entity: \"stalk\",\n                mainAbbreviation: \"t1\",\n                abbreviations: [\"t1\",\"t2\"],\n                synonyms: [\"stalk height\"],\n                programObservationLevel:\n                  {\n                    id: \"71421c6a-19d4-4d82-858b-e3f70a9c7a02\",\n                    name: \"Plant\",\n                    active: true,\n                    createdAt: \"2020-06-04T11:05:48-04:00\",\n                    updatedAt: \"2020-06-04T11:05:48-04:00\",\n                  },\n                method:\n                  {\n                    methodClass: \"Counting\"\n                  },\n                scale:\n                  {\n                    scaleName: \"Test Scale\",\n                    dataType: \"TEXT\",\n                    decimalPlaces: 3,\n                    categories:\n                      [\n                        {\n                          label: \"test1\",\n                          value: \"value1\"\n                        },\n                        {\n                          label: \"test2\",\n                          value: \"value2\"\n                        }\n                      ]\n                  },\n                programOntology:\n                  {\n                    id: \"a9712526-85ca-4a47-afe6-974ce4abf6a9\",\n                    programId: \"c9caac57-3dcb-442b-b3e9-e01281fbf8bd\",\n                    createdAt: \"2020-06-04T11:05:48-04:00\",\n                    updatedAt: \"2020-06-04T11:05:48-04:00\"\n                  },\n                createdByUser:\n                  {\n                    name: \"Tester\",\n                    active: true\n                  },\n                updatedByUser:\n                  {\n                    name: \"Tester\",\n                    active: true\n                  },\n                tags: [\"leaf trait\", \"favorites\"],\n                fullName: \"Test Trait Full Name\"\n              }\n            ]\n    singleTrait:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 1\n            totalPages: 1\n          status: []\n        result:\n          {\n            id: \"00385063-01c8-4afc-a684-3c84b90b2de9\",\n            traitName: \"Test Trait\",\n            active: true,\n            createdAt: \"2020-06-04T11:05:48-04:00\",\n            updatedAt: \"2020-06-04T11:05:48-04:00\",\n            traitClass: \"morphological\",\n            attribute: \"height\",\n            defaultValue: \"defaultValue\",\n            entity: \"stalk\",\n            mainAbbreviation: \"t1\",\n            abbreviations: [\"t1\",\"t2\"],\n            synonyms: [\"stalk height\"],\n            programObservationLevel:\n              {\n                id: \"71421c6a-19d4-4d82-858b-e3f70a9c7a02\",\n                name: \"Plant\",\n                active: true,\n                createdAt: \"2020-06-04T11:05:48-04:00\",\n                updatedAt: \"2020-06-04T11:05:48-04:00\",\n              },\n            method:\n              {\n                methodClass: \"Counting\"\n              },\n            scale:\n              {\n                scaleName: \"Test Scale\",\n                dataType: \"TEXT\",\n                decimalPlaces: 3,\n                categories:\n                  [\n                    {\n                      label: \"test1\",\n                      value: \"value1\"\n                    },\n                    {\n                      label: \"test2\",\n                      value: \"value2\"\n                    }\n                  ]\n              },\n            programOntology:\n              {\n                id: \"a9712526-85ca-4a47-afe6-974ce4abf6a9\",\n                programId: \"c9caac57-3dcb-442b-b3e9-e01281fbf8bd\",\n                createdAt: \"2020-06-04T11:05:48-04:00\",\n                updatedAt: \"2020-06-04T11:05:48-04:00\"\n              },\n            createdByUser:\n              {\n                name: \"Tester\",\n                active: true\n              },\n            updatedByUser:\n              {\n                name: \"Tester\",\n                active: true\n              },\n            tags: [\"leaf trait\", \"favorites\"],\n            fullName: \"Test Trait Full Name\"\n          }\n    editable:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 1\n            totalPages: 1\n          status: []\n        result:\n          {\n            editable: true\n          }\n    traitUploadData:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 1\n            totalPages: 1\n          status: []\n        result:\n          type: \"TRAIT\"\n          data:\n            [\n              {\n                traitName: \"Test Trait\",\n                active: true,\n                programObservationLevel:\n                  {\n                    name: \"Plant\",\n                  },\n                method:\n                  {\n                    methodClass: \"Estimation\",\n                    description: \"Observed severity of Powdery Mildew on leaves\",\n                    formula: \"a^2 + b^2 = c^2\"\n                  },\n                scale:\n                  {\n                    scaleName: \"1-4 Parlier field response score\",\n                    dataType: \"ORDINAL\",\n                    decimalPlaces: 2,\n                    categories:\n                      [\n                        {\n                          label: \"test1\",\n                          value: \"value1\"\n                        },\n                        {\n                          label: \"test2\",\n                          value: \"value2\"\n                        }\n                      ]\n                  },\n                description: \"A trait\",\n                mainAbbreviation: \"t1\",\n                abbreviations: [\"t1\",\"t2\"],\n                synonyms: [\"stalk height\"],\n                tags: [ \"leaf trait\", \"favorites\" ],\n                fullName: \"Test Trait Full Name\",\n              }\n            ]\n          program:\n            {\n              id: \"20e1a888-050a-4f89-8fec-ffaa55289c1b\",\n              name: \"Nick's Microgreens\",\n              active: true,\n              createdAt: \"2020-06-24T11:36:01-04:00\",\n              updatedAt: \"2020-06-24T11:36:01-04:00\"\n            }\n          user:\n            {\n              id: \"285ebacc-3940-416b-8ffe-5bb5d8a843f3\",\n              orcid: \"0000-0000-0000-0000\",\n              name: \"Nick Palladino\",\n              email: \"n@n.com\",\n              active: true,\n              systemRoles: []\n            }\n          createdByUser:\n            {\n              name: \"Tester\",\n              active: true\n            }\n          updatedByUser:\n            {\n              name: \"Tester\",\n              active: true\n            }\n    arrayOfUsers:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 2\n            totalPages: 1\n          status: []\n        result:\n          data:\n            - id: b2263532-1fa3-49a6-9a66-957f313c8ed6\n              orcid: 1234-4312-4352-6314\n              name: Bob Smith\n              email: bob.smith@mail.com\n              active: true\n              systemRoles: [\n                {\n                  id: \"d4f23375-0033-4d16-a62f-072e3a9198fa\",\n                  domain: \"admin\"\n                }\n              ]\n              programRoles: [\n                {\n                  active: false,\n                  roles: [\n                    {\n                      id: 20be0724-9451-46d5-a628-10fcb4a380e7,\n                      domain: member\n                    }\n                  ],\n                  program: {\n                    id: c57225a8-6649-44e3-b2ec-7c0f84a31a11,\n                    name: Test Program1,\n                    abbreviation: test1,\n                    objective: To test all the things\n                  }\n                },\n                {\n                  active: true,\n                  roles: [\n                    {\n                      id: 20be0724-9451-46d5-a628-10fcb4a380e7,\n                      domain: member\n                    }\n                  ],\n                  program: {\n                    id: 37935efa-4c0f-4269-8669-f78d21b26f04,\n                    name: Test Program,\n                    abbreviation: test,\n                    objective: To test things\n                  }\n                }\n              ]\n            - id: a2263532-1fa3-29a6-3a66-557f313c8ed6\n              orcid: 1234-4312-4352-6314\n              name: Fred Brown\n              email: null\n              active: true\n              systemRoles: []\n              programRoles: []\n    observationLevelResponse:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 2\n            totalPages: 1\n          status: []\n        result:\n          data:\n            - id: a2263532-1fa3-29a6-3a66-557f313c8ed6\n              name: Plant\n              createdAt: \"2020-06-04T11:05:48-04:00\"\n              updatedAt: \"2020-06-04T11:05:48-04:00\"\n            - id: 37935efa-4c0f-4269-8669-f78d21b26f04\n              name: Plot\n              createdAt: \"2020-06-04T11:05:48-04:00\"\n              updatedAt: \"2020-06-04T11:05:48-04:00\"\n    tagsResponse:\n      value:\n        metadata:\n          datafiles: []\n          pagination:\n            currentPage: 1\n            pageSize: 1\n            totalCount: 3\n            totalPages: 1\n          status: []\n        result:\n          data:\n            - \"favorites\"\n            - \"leaf trait\"\n            - \"stem trait\"\n  parameters:\n    page:\n      description: 'Used to request a specific page of data to be returned.\n        The page indexing starts at 1 (the first page is ''page''= 1). Default is `1`.'\n      example: 1\n      in: query\n      name: page\n      required: false\n      schema:\n        type: integer\n    pageSize:\n      description: The size of the pages to be returned. Default is to show all results.\n      example: 1000\n      in: query\n      name: pageSize\n      required: false\n      schema:\n        type: integer\n    sortOrder:\n      description: Order in which to sort the results. Default is ascending order.\n      example: ASC\n      in: query\n      name: sortOrder\n      required: false\n      schema:\n        type: string",
			"canonicalURL": "/github.com/Breeding-Insight/bi-api@a0afb7049e5ba3607840e7d0627a5750c4921840/-/blob/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Breeding-Insight/bi-api/blob/a0afb7049e5ba3607840e7d0627a5750c4921840/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/users/{id}\": put: responses: 200: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema",
		"parameter content-type"
	]
}