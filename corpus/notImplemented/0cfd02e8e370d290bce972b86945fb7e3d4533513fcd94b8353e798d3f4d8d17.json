{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/jmprathab/MyHome"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "api/src/main/resources/public/swagger/api.yaml",
			"byteSize": 36625,
			"content": "openapi: 3.0.2\nservers:\n  - url: http://localhost:8080/\ninfo:\n  description: This is a OpenApi specification for MyHome backend service.\n  version: 2.0.0\n  title: Swagger MyHome - OpenAPI 3.0\ntags:\n  - name: Authentication\n  - name: Users\n  - name: Documents\n  - name: Communities\n  - name: Amenities\n  - name: Houses\n  - name: Payments\n  - name: Members\npaths:\n  /auth/login:\n    post:\n      tags:\n        - Authentication\n      description: Login user to system\n      operationId: login\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoginRequest'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/LoginRequest'\n      responses:\n        '200':\n          description: Login successful\n\n  /users/password:\n    post:\n      tags:\n        - Users\n      description: Request reset password or reset password\n      parameters:\n        - in: query\n          name: action\n          required: true\n          schema:\n            type: string\n            enum: [ FORGOT, RESET ]\n          description: Acton with user password (forgot or reset)\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ForgotPasswordRequest'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/ForgotPasswordRequest'\n      responses:\n        '200':\n          description: If password reset\n        '400':\n          description: If wrong password reset token\n  /amenities/{amenityId}:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Amenities\n      description: Get details about the amenity\n      operationId: getAmenityDetails\n      parameters:\n        - in: path\n          name: amenityId\n          required: true\n          schema:\n            type: string\n          description: Id of the amenity to get details\n      responses:\n        '200':\n          description: If details found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetAmenityDetailsResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/GetAmenityDetailsResponse'\n        '404':\n          description: If params are invalid\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Amenities\n      description: Remove amenity\n      operationId: deleteAmenity\n      parameters:\n        - in: path\n          name: amenityId\n          required: true\n          schema:\n            type: string\n      responses:\n        '204':\n          description: If amenity deleted\n        '404':\n          description: If params are invalid\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Amenities\n      description: Update an amenity\n      operationId: updateAmenity\n      parameters:\n        - in: path\n          name: amenityId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: UpdateAmenityRequest update amenity\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateAmenityRequest'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/UpdateAmenityRequest'\n      responses:\n        '204':\n          description: If updated successfully\n        '400':\n          description: If amenity is not found\n  /communities/{communityId}/amenities:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Amenities\n      description: Get all amenities of community\n      operationId: listAllAmenities\n      parameters:\n        - in: path\n          name: communityId\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns list of amenities\n          content:\n            application/json:\n              schema:\n                type: array\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/GetAmenityDetailsResponse'\n            application/xml:\n              schema:\n                type: array\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/GetAmenityDetailsResponse'\n        '404':\n          description: If params are invalid\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Amenities\n      description: Adds amenity to community\n      operationId: addAmenityToCommunity\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddAmenityRequest'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/AddAmenityRequest'\n      parameters:\n        - in: path\n          name: communityId\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: If amenity add successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddAmenityResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/AddAmenityResponse'\n        '404':\n          description: If community not found\n  /users:\n    post:\n      tags:\n        - Users\n      description: Create a new user\n      operationId: signUp\n      requestBody:\n        description: CreateUserRequest aggregate fields\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUserRequest'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/CreateUserRequest'\n      responses:\n        '201':\n          description: If user created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateUserResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/CreateUserResponse'\n        '409':\n          description: If user already exists\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Users\n      description: Lists all users\n      operationId: listAllUsers\n      parameters:\n        - in: query\n          name: pageable\n          required: false\n          schema:\n            $ref: '#/components/schemas/Pageable'\n      responses:\n        '200':\n          description: Returns list of users\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetUserDetailsResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/GetUserDetailsResponse'\n  /users/{userId}:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Users\n      description: Get details of a user given userId\n      operationId: getUserDetails\n      parameters:\n        - in: path\n          name: userId\n          schema:\n            type: string\n          required: true\n          description: ID of the user to get\n      responses:\n        '200':\n          description: If userId is valid. Response body has the details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetUserDetailsResponseUser'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/GetUserDetailsResponseUser'\n        '404':\n          description: If userId is invalid\n  /users/{userId}/email-confirm/{emailConfirmToken}:\n    get:\n      tags:\n        - Users\n      description: Confirm user email\n      operationId: confirmEmail\n      parameters:\n        - in: path\n          name: userId\n          schema:\n            type: string\n          required: true\n          description: Id of the user for confirm email\n        - in: path\n          name: emailConfirmToken\n          schema:\n            type: string\n          required: true\n          description: Tocken from user email\n      responses:\n        '200':\n          description: Email was successfully confirmed\n        '400':\n          description: Email confirmation error\n  /users/{userId}/email-confirm-resend:\n    get:\n      tags:\n        - Users\n      description: \"Resend email confirm mail\"\n      operationId: resendConfirmEmailMail\n      parameters:\n        - in: path\n          name: userId\n          schema:\n            type: string\n          required: true\n          description: ID of the user for resend confirm email\n      responses:\n        '200':\n          description: Email was successfully send\n        '400':\n          description: Email send error\n  /users/{userId}/housemates:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Users\n      description: Lists all members from all houses of a user\n      operationId: listAllHousemates\n      parameters:\n        - in: path\n          name: userId\n          schema:\n            type: string\n          required: true\n          description: ID of the user for which to find housemates\n        - in: query\n          name: pageable\n          required: false\n          schema:\n            $ref: '#/components/schemas/Pageable'\n      responses:\n        '200':\n          description: Returns list of all members from all houses of the specified user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListHouseMembersResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ListHouseMembersResponse'\n  /members/{memberId}/documents:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Documents\n      description: Returns house member's documents\n      operationId: getHouseMemberDocument\n      parameters:\n        - in: path\n          name: memberId\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: If document present\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: byte\n        '404':\n          description: If params are invalid\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Documents\n      description: Add house member's documents\n      operationId: uploadHouseMemberDocument\n      parameters:\n        - in: path\n          name: memberId\n          schema:\n            type: string\n          required: true\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                memberDocument:\n                  type: string\n                  format: binary\n      responses:\n        '204':\n          description: If document saved\n        '409':\n          description: If document save error\n        '413':\n          description: If document file too large\n        '404':\n          description: If params are invalid\n    put:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Documents\n      description: Update house member's documents\n      operationId: updateHouseMemberDocument\n      parameters:\n        - in: path\n          name: memberId\n          schema:\n            type: string\n          required: true\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                memberDocument:\n                  type: string\n                  format: binary\n      responses:\n        '204':\n          description: If document updated\n        '409':\n          description: If document update error\n        '413':\n          description: If document file too large\n        '404':\n          description: If params are invalid\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Documents\n      description: Delete house member's documents\n      operationId: deleteHouseMemberDocument\n      parameters:\n        - in: path\n          name: memberId\n          schema:\n            type: string\n          required: true\n      responses:\n        '204':\n          description: If document deleted\n        '404':\n          description: If params are invalid\n  /communities:\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Communities\n      description: Create a new community\n      operationId: createCommunity\n      requestBody:\n        description: CreateCommunityRequest aggregate fields\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateCommunityRequest'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/CreateCommunityRequest'\n      responses:\n        '201':\n          description: If community was created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateCommunityResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/CreateCommunityResponse'\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Communities\n      description: List all communities which are registered\n      operationId: listAllCommunity\n      parameters:\n        - in: query\n          name: pageable\n          required: false\n          schema:\n            $ref: '#/components/schemas/Pageable'\n      responses:\n        '200':\n          description: Returns list of communities\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetCommunityDetailsResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/GetCommunityDetailsResponse'\n  /communities/{communityId}:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Communities\n      description: Get details about the community given a community id\n      operationId: listCommunityDetails\n      parameters:\n        - in: path\n          name: communityId\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: If community exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetCommunityDetailsResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/GetCommunityDetailsResponse'\n        '404':\n          description: If params are invalid\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Communities\n      description: Deletion community with given community id\n      operationId: deleteCommunity\n      parameters:\n        - in: path\n          name: communityId\n          schema:\n            type: string\n          required: true\n      responses:\n        '204':\n          description: If community was removed\n        '404':\n          description: If params are invalid\n  /communities/{communityId}/admins:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Communities\n      description: List all admins of the community given a community id\n      operationId: listCommunityAdmins\n      parameters:\n        - in: path\n          name: communityId\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: pageable\n          required: false\n          schema:\n            $ref: '#/components/schemas/Pageable'\n      responses:\n        '200':\n          description: If community exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListCommunityAdminsResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ListCommunityAdminsResponse'\n        '404':\n          description: If params are invalid\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Communities\n      description: Add a new admin to the community given a community id\n      operationId: addCommunityAdmins\n      parameters:\n        - in: path\n          name: communityId\n          schema:\n            type: string\n          required: true\n      requestBody:\n        description: AddCommunityAdminRequest aggregate fields\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddCommunityAdminRequest'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/AddCommunityAdminRequest'\n      responses:\n        '204':\n          description: If admins were created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddCommunityAdminResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/AddCommunityAdminResponse'\n        '404':\n          description: If params are invalid\n  /communities/{communityId}/admins/{adminId}:\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Communities\n      description: Remove of admin associated with a community\n      operationId: removeAdminFromCommunity\n      parameters:\n        - in: path\n          name: communityId\n          schema:\n            type: string\n          required: true\n        - in: path\n          name: adminId\n          schema:\n            type: string\n          required: true\n      responses:\n        '204':\n          description: If admin was removed\n        '404':\n          description: If params are invalid\n  /communities/{communityId}/houses:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Communities\n      description: List all houses of the community given a community id\n      operationId: listCommunityHouses\n      parameters:\n        - in: path\n          name: communityId\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: pageable\n          required: false\n          schema:\n            $ref: '#/components/schemas/Pageable'\n      responses:\n        '200':\n          description: If community exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetHouseDetailsResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/GetHouseDetailsResponse'\n        '404':\n          description: If params are invalid\n    post:\n      tags:\n        - Communities\n      description: Add a new house to the community given a community id\n      operationId: addCommunityHouses\n      parameters:\n        - in: path\n          name: communityId\n          schema:\n            type: string\n          required: true\n      requestBody:\n        description: AddCommunityHouseRequest aggregate fields\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddCommunityHouseRequest'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/AddCommunityHouseRequest'\n      responses:\n        '204':\n          description: If houses were added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddCommunityHouseResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/AddCommunityHouseResponse'\n        '400':\n          description: If params are invalid\n  /communities/{communityId}/houses/{houseId}:\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Communities\n      description: Remove of house from the community given a community id and a house id\n      operationId: removeCommunityHouse\n      parameters:\n        - in: path\n          name: communityId\n          schema:\n            type: string\n          required: true\n        - in: path\n          name: houseId\n          schema:\n            type: string\n          required: true\n      responses:\n        '204':\n          description: If house was removed\n        '400':\n          description: If params are invalid\n  /houses:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Houses\n      description: List all houses of the community given a community id\n      operationId: listAllHouses\n      parameters:\n        - in: query\n          name: pageable\n          required: false\n          schema:\n            $ref: '#/components/schemas/Pageable'\n      responses:\n        '200':\n          description: If community exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetHouseDetailsResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/GetHouseDetailsResponse'\n  /houses/{houseId}:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Houses\n      description: Get house detail by a given ID\n      operationId: getHouseDetails\n      parameters:\n        - in: path\n          name: houseId\n          schema:\n            type: string\n          required: true\n          description: ID of the house to get\n      responses:\n        '200':\n          description: If house present\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetHouseDetailsResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/GetHouseDetailsResponse'\n        '404':\n          description: If params are invalid\n  /houses/{houseId}/members:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Houses\n      description: List all members of the house given a house id\n      operationId: listAllMembersOfHouse\n      parameters:\n        - in: path\n          name: houseId\n          schema:\n            type: string\n          required: true\n        - in: query\n          name: pageable\n          required: false\n          schema:\n            $ref: '#/components/schemas/Pageable'\n      responses:\n        '200':\n          description: If house present\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListHouseMembersResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ListHouseMembersResponse'\n        '404':\n          description: If params are invalid\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Houses\n      description: Add new members to the house given a house id. Responds with member id which were added\n      operationId: addHouseMembers\n      parameters:\n        - in: path\n          name: houseId\n          schema:\n            type: string\n          required: true\n      requestBody:\n        description: AddHouseMemberRequest aggregate fields\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddHouseMemberRequest'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/AddHouseMemberRequest'\n      responses:\n        '201':\n          description: If members were added to house\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddHouseMemberResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/AddHouseMemberResponse'\n        '404':\n          description: If parameters are invalid\n  /houses/{houseId}/members/{memberId}:\n    delete:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Houses\n      description: Deletion of member associated with a house\n      operationId: deleteHouseMember\n      parameters:\n        - in: path\n          name: houseId\n          schema:\n            type: string\n          required: true\n        - in: path\n          name: memberId\n          schema:\n            type: string\n          required: true\n      responses:\n        '204':\n          description: If house member was removed from house\n        '400':\n          description: If params are invalid\n\n  /payments:\n    post:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Payments\n      description: Schedule a new payment\n      operationId: schedulePayment\n      requestBody:\n        description: CreateUserRequest aggregate fields\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SchedulePaymentRequest'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/SchedulePaymentRequest'\n      responses:\n        '201':\n          description: If schedule payment is created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchedulePaymentResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/SchedulePaymentResponse'\n  /payments/{paymentId}:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Payments\n      description: Get details about a payment with the given payment id\n      operationId: listPaymentDetails\n      parameters:\n        - in: path\n          name: paymentId\n          schema:\n            type: string\n          required: true\n          description: Payment ID\n      responses:\n        '200':\n          description: If payment is valid. Response body has the details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchedulePaymentResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/SchedulePaymentResponse'\n        '404':\n          description: If paymentId is invalid\n  /members/{memberId}/payments:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Payments\n      description: Get all payments for the specified member\n      operationId: listAllMemberPayments\n      parameters:\n        - in: path\n          name: memberId\n          schema:\n            type: string\n          required: true\n          description: Member Id to use for getting all payments\n      responses:\n        '200':\n          description: If memberId is valid. Response body has the details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListMemberPaymentsResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ListMemberPaymentsResponse'\n        '404':\n          description: If memberId is invalid\n  /communities/{communityId}/admins/{adminId}/payments:\n    get:\n      security:\n        - bearerAuth: [ ]\n      tags:\n        - Payments\n      description: Get all payments scheduled by the specified admin\n      operationId: listAllAdminScheduledPayments\n      parameters:\n        - in: path\n          name: communityId\n          schema:\n            type: string\n          required: true\n          description: The id of community\n        - in: path\n          name: adminId\n          schema:\n            type: string\n          required: true\n          description: The id of admin\n        - in: query\n          name: pageable\n          required: false\n          schema:\n            $ref: '#/components/schemas/Pageable'\n      responses:\n        '200':\n          description: If communityId and adminId are valid. Response body has the details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListAdminPaymentsResponse'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ListAdminPaymentsResponse'\n        '404':\n          description: If communityId or adminId are invalid\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    ForgotPasswordRequest:\n      type: object\n      properties:\n        email:\n          type: string\n        token:\n          type: string\n        newPassword:\n          type: string\n    GetAmenityDetailsResponse:\n      type: object\n      properties:\n        amenityId:\n          type: string\n        description:\n          type: string\n    UpdateAmenityRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        price:\n          type: integer\n          format: int64\n        communityId:\n          type: string\n    AmenityDto:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        amenityId:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        price:\n          type: number\n        communityId:\n          type: string\n    AddAmenityRequest:\n      type: object\n      properties:\n        amenities:\n          type: array\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/AmenityDto'\n    AddAmenityResponse:\n      type: object\n      properties:\n        amenities:\n          type: array\n          items:\n            $ref: '#/components/schemas/AmenityDto'\n    CreateUserRequest:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        email:\n          type: string\n          format: email\n        password:\n          type: string\n          minLength: 8\n          maxLength: 80\n    CreateUserResponse:\n      type: object\n      properties:\n        userId:\n          type: string\n        name:\n          type: string\n        email:\n          type: string\n    GetUserDetailsResponse:\n      type: object\n      required:\n        - users\n      properties:\n        users:\n          type: array\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/GetUserDetailsResponseUser'\n    GetUserDetailsResponseUser:\n      type: object\n      properties:\n        userId:\n          type: string\n        name:\n          type: string\n        email:\n          type: string\n        communityIds:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n    Pageable:\n      description: Pageable query parameters\n      type: object\n      properties:\n        page:\n          type: integer\n        size:\n          type: integer\n    PageInfo:\n      description: Page info\n      type: object\n      properties:\n        currentPage:\n          type: integer\n        pageLimit:\n          type: integer\n        totalPages:\n          type: integer\n        totalElements:\n          type: integer\n          format: int64\n\n    CreateCommunityRequest:\n      type: object\n      required:\n        - name\n        - district\n      properties:\n        name:\n          type: string\n        district:\n          type: string\n    CreateCommunityResponse:\n      type: object\n      required:\n        - communityId\n      properties:\n        communityId:\n          type: string\n    GetCommunityDetailsResponse:\n      type: object\n      required:\n        - communities\n      properties:\n        communities:\n          type: array\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/GetCommunityDetailsResponseCommunity'\n    GetCommunityDetailsResponseCommunity:\n      type: object\n      properties:\n        communityId:\n          type: string\n        name:\n          type: string\n        district:\n          type: string\n    ListCommunityAdminsResponse:\n      type: object\n      required:\n        - admins\n      properties:\n        admins:\n          type: array\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/ListCommunityAdminsResponseCommunityAdmin'\n    ListCommunityAdminsResponseCommunityAdmin:\n      type: object\n      properties:\n        adminId:\n          type: string\n    AddCommunityAdminRequest:\n      type: object\n      required:\n        - admins\n      properties:\n        admins:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n    AddCommunityAdminResponse:\n      type: object\n      required:\n        - admins\n      properties:\n        admins:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n    GetHouseDetailsResponse:\n      type: object\n      required:\n        - houses\n      properties:\n        houses:\n          type: array\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/GetHouseDetailsResponseCommunityHouse'\n    GetHouseDetailsResponseCommunityHouse:\n      type: object\n      properties:\n        houseId:\n          type: string\n        name:\n          type: string\n    AddCommunityHouseRequest:\n      type: object\n      required:\n        - houses\n      properties:\n        houses:\n          type: array\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/CommunityHouseName'\n    CommunityHouseName:\n      type: object\n      properties:\n        name:\n          type: string\n    AddCommunityHouseResponse:\n      type: object\n      required:\n        - houses\n      properties:\n        houses:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n    HouseMember:\n      type: object\n      required:\n        - memberId\n        - name\n      properties:\n        memberId:\n          type: string\n        name:\n          type: string\n    ListHouseMembersResponse:\n      type: object\n      required:\n        - members\n      properties:\n        members:\n          type: array\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/HouseMember'\n    HouseMemberDto:\n      type: object\n      required:\n        - memberId\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        memberId:\n          type: string\n        name:\n          type: string\n    AddHouseMemberRequest:\n      type: object\n      required:\n        - members\n      properties:\n        members:\n          type: array\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/HouseMemberDto'\n    AddHouseMemberResponse:\n      type: object\n      required:\n        - members\n      properties:\n        members:\n          type: array\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/HouseMember'\n    SchedulePaymentRequest:\n      type: object\n      required:\n        - description\n      properties:\n        type:\n          type: string\n        description:\n          type: string\n          minLength: 5\n          maxLength: 300\n        recurring:\n          type: boolean\n        charge:\n          type: number\n        dueDate:\n          type: string\n        adminId:\n          type: string\n        memberId:\n          type: string\n    SchedulePaymentResponse:\n      type: object\n      properties:\n        paymentId:\n          type: string\n        charge:\n          type: number\n        type:\n          type: string\n        description:\n          type: string\n        recurring:\n          type: boolean\n        dueDate:\n          type: string\n        adminId:\n          type: string\n        memberId:\n          type: string\n    MemberPayment:\n      type: object\n      properties:\n        memberId:\n          type: string\n        paymentId:\n          type: string\n        charge:\n          type: number\n        dueDate:\n          type: string\n    ListMemberPaymentsResponse:\n      type: object\n      properties:\n        payments:\n          type: array\n          items:\n            $ref: '#/components/schemas/MemberPayment'\n          uniqueItems: true\n    AdminPayment:\n      type: object\n      properties:\n        adminId:\n          type: string\n        paymentId:\n          type: string\n        charge:\n          type: number\n        dueDate:\n          type: string\n    ListAdminPaymentsResponse:\n      type: object\n      properties:\n        payments:\n          type: array\n          items:\n            $ref: '#/components/schemas/AdminPayment'\n          uniqueItems: true\n        pageInfo:\n          $ref: '#/components/schemas/PageInfo'\n    LoginRequest:\n      type: object\n      properties:\n        email:\n          type: string\n        password:\n          type: string",
			"canonicalURL": "/github.com/jmprathab/MyHome@c123298cca0f583728136bb75510c4830ac7702e/-/blob/api/src/main/resources/public/swagger/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/jmprathab/MyHome/blob/c123298cca0f583728136bb75510c4830ac7702e/api/src/main/resources/public/swagger/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/members/{memberId}/documents\": get: responses: 200: contents: unsupported content types: [image/jpeg]",
	"NotImplemented": [
		"unsupported content types"
	]
}