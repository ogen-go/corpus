{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/department-of-veterans-affairs/va.gov-team"
		},
		"file": {
			"name": "DRAFT-checkin-apis-spec.yml",
			"size": 0,
			"path": "products/health-care/checkin/engineering/DRAFT-checkin-apis-spec.yml",
			"byteSize": 12909,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: \"DRAFT Check In APIs\"\n  description: |\n    While this document is in a draft state, it is intended to facilitate communication between teams.\n\n    This collection of endpoints make up the VSIP APIs fronted by the VSIP API Gateway.\n\n    ***PLEASE NOTE***: These APIs are currently in the `discovery` phase, meaning\n    it is highly likely that they will change significantly before the beta version\n    is released.\n\n    Please refer to the [roadmap (forthcoming)]() know when to expect a more stable\n    version of these endpoints.\n  version: \"1.0.0\"\nservers:\n  - url: http://localhost:3000\npaths:\n  # Questions:\n  ## 1. Does the API need to provide a way to manage the queue (at first)? E.g. Does a nurse need a way to re-order the list of patients waiting on the 'nurse' phase?\n  ##    Or can they just do things \"out of order\"? E.g. 3 patients, A B C, ordered and waiting on nurse. A \u0026 B are not ready, so nurse needs to call C. Can the nurse\n  ##    just call C and move them on to the next phase? Or does the nurse need to take the extra step of re-ordering (C = 1, A = 2, B = 3) the patients, and then calling them?\n  ## 2. Is there a 1-1 mapping between Clinic and workflow? Can a clinic have more than 1 workflow?\n  /i-am-here:\n    get:\n      tags:\n        - \"vetext\"\n      summary: \"Gets a list of veterans who are ready to come in\"\n      description: \"\"\n      operationId: \"imh\"\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  /come-in:\n    post:\n      tags:\n        - \"vetext\"\n      summary: \"Notify the patient that they can enter the building\"\n      description: \"\"\n      operationId: \"comeIn\"\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  /pre-checkins:\n    get:\n      tags:\n        - \"precheckin\"\n      summary: \"Gets a list of pre-checkin items\"\n      description: \"\"\n      operationId: \"precheckin\"\n      parameters:\n        - in: query\n          name: is-complete\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  /workflows/{id}:\n    get:\n      tags:\n        - \"workflows\"\n      summary: \"Gets a workflow\"\n      description: \"Returns a workflow with states\"\n      operationId: \"get-workflow\"\n      parameters:\n        - in: path\n          required: true\n          name: id\n          schema:\n            type: string\n        - in: query\n          required: false\n          name: status\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: number\n                  name:\n                    type: string\n                  states:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        name:\n                          type: string\n\n        \"404\":\n          description: \"Not Found\"\n    post:\n      tags:\n        - \"workflows\"\n      summary: \"Creates a workflow\"\n      description: \"\"\n      operationId: \"post-workflow\"\n      parameters:\n        - in: path\n          required: true\n          name: id\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  type: string\n                states:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  /workflows/{workflowId}/patients:\n    get:\n      tags:\n        - \"workflows\"\n      summary: \"Gets patients in a workflow\"\n      description: \"Returns a list of patients in a workflow\"\n      operationId: \"getWorkflowPatients\"\n      parameters:\n        - in: path\n          required: true\n          name: workflowId\n          schema:\n            type: string\n        # Will likely need some query params to filter here\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                properties:\n                  patients:\n                    type: array\n                    items:\n                      properties:\n                        id:\n                          type: number\n                        name:\n                          type: string\n                        workflowState:\n                          type: string\n        \"404\":\n          description: \"Not Found\"\n    post:\n      tags:\n        - \"workflows\"\n      summary: \"Adds a patient to a workflow\"\n      description: \"\"\n      operationId: \"addPatient\"\n      parameters:\n        - in: path\n          required: true\n          name: workflowId\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                patientId:\n                  type: string\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n\n  # need a way for someone to find a workflow to setup for kiosk/workstation\n  # if we use a clinics route here, it's easy (organizationally) to CRUD workflows for clinics\n  /clinics/{sta3n}/workflows:\n    get:\n      tags:\n        - \"clinics\"\n      summary: \"Gets list of clinic workflows for station/division\"\n      description: \"shows all patient in workflow and their status\"\n      operationId: \"getWorkflowsForStation\"\n      parameters:\n        - in: path\n          required: true\n          name: sta3n\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  /clinics/{sta3n}/patients:\n    get:\n      tags:\n        - \"clinics\"\n      summary: \"find patients\"\n      description: \"\"\n      operationId: \"patientQuery\"\n      parameters:\n        - in: path\n          required: true\n          name: sta3n\n          schema:\n            type: string\n        - in: path\n          required: true\n          name: patientId\n          description: \"patient ICN\"\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  /workflows/{id}/actions/change-status:\n    put:\n      tags:\n        - \"workflows\"\n        - \"actions\"\n      summary: \"change status of patient in workflow\"\n      description: \"\"\n      operationId: \"setStatusForPatient\"\n      parameters:\n        - in: path\n          required: true\n          name: id\n          schema:\n            type: string\n      requestBody:\n        description: \"The status to move to and patient information\"\n        content:\n          application/json:\n            schema:\n              properties:\n                patientId:\n                  type: string\n                  example: \"abc123\"\n                newStatus:\n                  type: string\n                  example: \"withNurse\"\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  /workflows/{id}/actions/clear:\n    delete:\n      tags:\n        - \"workflows\"\n        - \"actions\"\n      summary: \"clear all patients from workflow\"\n      description: \"\"\n      operationId: \"workflowClear\"\n      parameters:\n        - in: path\n          required: true\n          name: id\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  # is this finding a patient in a workflow, or finding a patient in a clinic?\n  # or both?\n  /workflows/{workflowId}/patients/{patientId}:\n    get:\n      tags:\n        - \"workflows\"\n      summary: \"find a patient in a workflow\"\n      description: \"\"\n      operationId: getWorkflowPatient\n      parameters:\n        - in: path\n          required: true\n          name: workflowId\n          schema:\n            type: string\n        - in: path\n          required: true\n          name: patientId\n          description: \"patient ICN\"\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  # consider an \"actions\" route for grouping actions \u0026 easy audit logging\n  /insurance:\n    get:\n      tags:\n        - \"insurance\"\n      summary: \"Retrieve patient insurance information\"\n      description: \"\"\n      operationId: \"getPatientInsurance\"\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n    put:\n      tags:\n        - \"insurance\"\n      summary: \"Modify patient insurance information\"\n      description: \"\"\n      operationId: \"updatePatientInsurance\"\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n    post:\n      tags:\n        - \"insurance\"\n      summary: \"Add patient insurance information\"\n      description: \"\"\n      operationId: \"addPatientInsurance\"\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  /demographics:\n    get:\n      tags:\n        - \"demographics\"\n      summary: \"Retrieve patient demographics\"\n      description: \"\"\n      operationId: \"getPatientDemographics\"\n      parameters:\n        - in: path\n          required: true\n          name: patient-id\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n    # This was a POST in the ppt. Makes more sense to\n    # use PUT or PATCH here, unless pat demos are created\n    # on update for history tracking purposes\n    put:\n      tags:\n        - \"demographics\"\n      summary: \"Update patient demographics\"\n      description: \"\"\n      operationId: \"updatePatientDemographics\"\n      parameters:\n        - in: path\n          required: true\n          name: patient-id\n          schema:\n            type: string\n      requestBody:\n        description: \"The demographic information to update\"\n        content:\n          application/json:\n            schema:\n              properties:\n                placeholder:\n                  type: string\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  /medications:\n    get:\n      tags:\n        - \"medications\"\n      summary: \"Retrieves patient medications\"\n      description: \"\"\n      operationId: \"getMedications\"\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  /medications/{med-id}:\n    post:\n      tags:\n        - \"medications\"\n      summary: \"Create a refill order\"\n      description: \"\"\n      operationId: \"??\"\n      parameters:\n        - in: path\n          required: true\n          name: med-id\n          schema:\n            type: string\n      requestBody:\n        description: \"The medication information\"\n        content:\n          application/json:\n            schema:\n              properties:\n                placeholder:\n                  type: string\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  /appointments:\n    get:\n      tags:\n        - \"appointments\"\n      summary: \"Retrieves a list of appointments\"\n      description: \"\"\n      operationId: \"getAppointments\"\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  /appointments/{appt-id}:\n    get:\n      tags:\n        - \"appointments\"\n      summary: \"Retrieves a single appointment\"\n      description: \"\"\n      operationId: \"getSingleAppt\"\n      parameters:\n        - in: path\n          required: true\n          name: appt-id\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n  /appointments/{appt-id}/checkin:\n    post:\n      tags:\n        - \"appointments\"\n      summary: \"Check a patient in\"\n      description: \"\"\n      operationId: \"checkinPatient\"\n      parameters:\n        - in: path\n          required: true\n          name: appt-id\n          schema:\n            type: string\n      requestBody:\n        description: \"The appt check in information\"\n        content:\n          application/json:\n            schema:\n              properties:\n                placeholder:\n                  type: string\n      responses:\n        \"200\":\n          description: \"OK\"\n        \"404\":\n          description: \"Not Found\"\n",
			"canonicalURL": "/github.com/department-of-veterans-affairs/va.gov-team@54bf9c6bb3b1dc48709806df52883a675651037d/-/blob/products/health-care/checkin/engineering/DRAFT-checkin-apis-spec.yml",
			"externalURLs": [
				{
					"url": "https://github.com/department-of-veterans-affairs/va.gov-team/blob/54bf9c6bb3b1dc48709806df52883a675651037d/products/health-care/checkin/engineering/DRAFT-checkin-apis-spec.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/medications/{med-id}\": post: operation name: can't generate valid name: [  ]: crypticName not implemented",
	"NotImplemented": [
		"crypticName"
	]
}