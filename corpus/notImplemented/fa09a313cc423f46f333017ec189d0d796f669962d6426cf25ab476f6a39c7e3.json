{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/osbuild/image-builder"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "internal/v1/api.yaml",
			"byteSize": 19308,
			"content": "---\nopenapi: 3.0.1\ninfo:\n  version: \"1.0\"\n  title: Image-builder service\n  description: Service that relays image build requests\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n\nservers:\n  - url: \"/api/image-builder/v1\"\n  - url: \"/api/image-builder/v1.0\"\n\npaths:\n  /version:\n    get:\n      summary: get the service version\n      description: \"get the service version\"\n      operationId: getVersion\n      responses:\n        '200':\n          description: a service version\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Version'\n  /ready:\n    get:\n      summary: return the readiness\n      operationId: getReadiness\n      responses:\n        '200':\n          description: readiness\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Readiness'\n  /openapi.json:\n    get:\n      summary: get the openapi json specification\n      operationId: getOpenapiJson\n      tags:\n        - meta\n      responses:\n        '200':\n          description: returns this document\n  /distributions:\n    get:\n      summary: get the available distributions\n      operationId: getDistributions\n      responses:\n        '200':\n          description: a list of available distributions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DistributionsResponse'\n  /architectures/{distribution}:\n    get:\n      summary: get the architectures and their image types available for a given distribution\n      parameters:\n        - in: path\n          name: distribution\n          schema:\n            type: string\n          required: true\n          description: distribution for which to look up available architectures\n          example: 'rhel-84'\n      operationId: getArchitectures\n      responses:\n        '200':\n          description: a list of available architectures and their associated image types\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Architectures'\n  /composes:\n    get:\n      summary: get a collection of previous compose requests for the logged in user\n      parameters:\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            default: 100\n            minimum: 1\n          description: max amount of composes, default 100\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            default: 0\n            minimum: 0\n          description: composes page offset, default 0\n      responses:\n        '200':\n          description: a list of composes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComposesResponse'\n  /composes/{composeId}:\n    get:\n      summary: get status of an image compose\n      parameters:\n        - in: path\n          name: composeId\n          schema:\n            type: string\n          required: true\n          description: Id of compose status to get\n      description: \"status of an image compose\"\n      operationId: getComposeStatus\n      responses:\n        '200':\n          description: compose status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComposeStatus'\n  /composes/{composeId}/metadata:\n    get:\n      summary: get metadata of an image compose\n      parameters:\n        - in: path\n          name: composeId\n          schema:\n            type: string\n          required: true\n          description: Id of compose metadata to get\n      description: \"metadata for an image compose\"\n      operationId: getComposeMetadata\n      responses:\n        '200':\n          description: compose metadata\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComposeMetadata'\n  /compose:\n    post:\n      summary: compose image\n      description: \"compose image\"\n      operationId: composeImage\n      requestBody:\n        required: true\n        description: details of image to be composed\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ComposeRequest\"\n      responses:\n        '201':\n          description: compose has started\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComposeResponse'\n        '400':\n          description: the compose request is malformed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPErrorList'\n  /packages:\n    get:\n      parameters:\n        - in: query\n          name: distribution\n          required: true\n          schema:\n            $ref: '#/components/schemas/Distributions'\n          description: distribution to look up packages for\n        - in: query\n          name: architecture\n          required: true\n          schema:\n            type: string\n            enum: ['x86_64']\n          description: architecture to look up packages for\n        - in: query\n          name: search\n          required: true\n          schema:\n            type: string\n          description: packages to look for\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            default: 100\n            minimum: 1\n          description: max amount of packages, default 100\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            default: 0\n            minimum: 0\n          description: packages page offset, default 0\n      responses:\n        '200':\n          description: a list of packages\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PackagesResponse'\n\ncomponents:\n  schemas:\n    HTTPError:\n      required:\n        - title\n        - detail\n      properties:\n        title:\n          type: string\n        detail:\n          type: string\n    HTTPErrorList:\n      required:\n        - errors\n      properties:\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/HTTPError'\n    Version:\n      required:\n        - version\n      properties:\n        version:\n          type: string\n    Readiness:\n      type: object\n      required:\n        - readiness\n      properties:\n        readiness:\n          type: string\n    DistributionsResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/DistributionItem'\n    DistributionItem:\n      type: object\n      required:\n        - name\n        - description\n      properties:\n        description:\n          type: string\n          example: 'Red Hat Enterprise Linux (RHEL) 8.4'\n        name:\n          type: string\n          example: 'rhel-84'\n    Architectures:\n      type: array\n      items:\n        $ref: '#/components/schemas/ArchitectureItem'\n    ArchitectureItem:\n      type: object\n      required:\n        - arch\n        - image_types\n      properties:\n        arch:\n          type: string\n          example: 'x86_64'\n        image_types:\n          type: array\n          items:\n            type: string\n            example: 'qcow2'\n    ComposeStatus:\n      required:\n        - image_status\n      properties:\n        image_status:\n          $ref: '#/components/schemas/ImageStatus'\n    ImageStatus:\n      required:\n       - status\n      properties:\n        status:\n          type: string\n          enum: ['success', 'failure', 'pending', 'building', 'uploading', 'registering']\n          example: 'success'\n        upload_status:\n          $ref: '#/components/schemas/UploadStatus'\n        error:\n          $ref: '#/components/schemas/ComposeStatusError'\n    ComposeStatusError:\n      required:\n       - id\n       - reason\n      properties:\n        id:\n          type: integer\n        reason:\n          type: string\n        details: {}\n    UploadStatus:\n      required:\n        - status\n        - type\n        - options\n      properties:\n        status:\n          type: string\n          enum: ['success', 'failure', 'pending', 'running']\n        type:\n          $ref: '#/components/schemas/UploadTypes'\n        options:\n          oneOf:\n            - $ref: '#/components/schemas/AWSUploadStatus'\n            - $ref: '#/components/schemas/AWSS3UploadStatus'\n            - $ref: '#/components/schemas/GCPUploadStatus'\n            - $ref: '#/components/schemas/AzureUploadStatus'\n    AWSUploadStatus:\n      type: object\n      required:\n        - ami\n        - region\n      properties:\n        ami:\n          type: string\n          example: 'ami-0c830793775595d4b'\n        region:\n          type: string\n          example: 'eu-west-1'\n    AWSS3UploadStatus:\n      type: object\n      required:\n        - url\n      properties:\n        url:\n          type: string\n    GCPUploadStatus:\n      type: object\n      required:\n        - project_id\n        - image_name\n      properties:\n        project_id:\n          type: string\n          example: 'ascendant-braid-303513'\n        image_name:\n          type: string\n          example: 'my-image'\n    AzureUploadStatus:\n      type: object\n      required:\n        - image_name\n      properties:\n        image_name:\n          type: string\n          example: 'my-image'\n    ComposeRequest:\n      type: object\n      required:\n        - distribution\n        - image_requests\n      properties:\n        distribution:\n          $ref: '#/components/schemas/Distributions'\n        image_name:\n          type: string\n          example: \"MyImageName\"\n          maxLength: 100\n        image_requests:\n          type: array\n          minItems: 1\n          maxItems: 1\n          items:\n            $ref: '#/components/schemas/ImageRequest'\n          uniqueItems: true\n          description: |\n            Array of exactly one image request. Having more image requests in one compose is currently not supported.\n        customizations:\n            $ref: '#/components/schemas/Customizations'\n    Distributions:\n      type: string\n      enum:\n        - rhel-84\n        - rhel-85\n        - rhel-86\n        - rhel-90\n        - centos-8\n        - centos-9\n    ImageRequest:\n      required:\n        - architecture\n        - image_type\n        - upload_request\n      properties:\n        architecture:\n          type: string\n          enum:\n            - x86_64\n          description: |\n            CPU architecture of the image, only x86_64 is currently supported.\n        image_type:\n          $ref: '#/components/schemas/ImageTypes'\n        upload_request:\n          $ref: '#/components/schemas/UploadRequest'\n        ostree:\n          $ref: '#/components/schemas/OSTree'\n    ImageTypes:\n      type: string\n      enum:\n        - aws\n        - azure\n        - edge-commit\n        - edge-container\n        - edge-installer\n        - gcp\n        - guest-image\n        - image-installer\n        - vsphere\n        # backwards compatible aliases\n        - ami  # == aws\n        - rhel-edge-commit  # == edge-commit\n        - rhel-edge-installer  # == edge-installer\n        - vhd  # == azure\n    ComposesResponse:\n      required:\n        - meta\n        - links\n        - data\n      properties:\n        meta:\n          type: object\n          required:\n            - count\n          properties:\n            count:\n              type: integer\n        links:\n          type: object\n          required:\n            - first\n            - last\n          properties:\n            first:\n              type: string\n              example: \"/api/image-builder/v1/composes?limit=10\u0026offset=0\"\n            last:\n              type: string\n              example: \"/api/image-builder/v1/composes?limit=10\u0026offset=10\"\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/ComposesResponseItem'\n    ComposesResponseItem:\n      required:\n        - id\n        - request\n        - created_at\n      properties:\n        id:\n          type: string\n        request: {}\n        created_at:\n          type: string\n        image_name:\n          type: string\n    ComposeResponse:\n      required:\n        - id\n      properties:\n        id:\n          type: string\n    UploadRequest:\n      type: object\n      required:\n        - type\n        - options\n      properties:\n        type:\n          $ref: '#/components/schemas/UploadTypes'\n        options:\n          anyOf:\n            - $ref: '#/components/schemas/AWSUploadRequestOptions'\n            - $ref: '#/components/schemas/AWSS3UploadRequestOptions'\n            - $ref: '#/components/schemas/GCPUploadRequestOptions'\n            - $ref: '#/components/schemas/AzureUploadRequestOptions'\n    UploadTypes:\n      type: string\n      enum: ['aws', 'gcp', 'azure', 'aws.s3']\n    AWSUploadRequestOptions:\n      type: object\n      required:\n        - share_with_accounts\n      properties:\n        share_with_accounts:\n          type: array\n          example: ['123456789012']\n          items:\n            type: string\n          uniqueItems: true\n    AWSS3UploadRequestOptions:\n      type: object\n    GCPUploadRequestOptions:\n      type: object\n      required:\n        - share_with_accounts\n      properties:\n        share_with_accounts:\n          type: array\n          example: [\n            'user:alice@example.com',\n            'serviceAccount:my-other-app@appspot.gserviceaccount.com',\n            'group:admins@example.com',\n            'domain:example.com'\n            ]\n          description: |\n            List of valid Google accounts to share the imported Compute Node image with.\n            Each string must contain a specifier of the account type. Valid formats are:\n              - 'user:{emailid}': An email address that represents a specific\n                Google account. For example, 'alice@example.com'.\n              - 'serviceAccount:{emailid}': An email address that represents a\n                service account. For example, 'my-other-app@appspot.gserviceaccount.com'.\n              - 'group:{emailid}': An email address that represents a Google group.\n                For example, 'admins@example.com'.\n              - 'domain:{domain}': The G Suite domain (primary) that represents all\n                the users of that domain. For example, 'google.com' or 'example.com'.\n                If not specified, the imported Compute Node image is not shared with any\n                account.\n          items:\n            type: string\n          uniqueItems: true\n    AzureUploadRequestOptions:\n      type: object\n      required:\n        - tenant_id\n        - subscription_id\n        - resource_group\n      properties:\n        tenant_id:\n          type: string\n          example: '5c7ef5b6-1c3f-4da0-a622-0b060239d7d7'\n          description: |\n            ID of the tenant where the image should be uploaded. This link explains how\n            to find it in the Azure Portal:\n            https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant\n        subscription_id:\n          type: string\n          example: '4e5d8b2c-ab24-4413-90c5-612306e809e2'\n          description: |\n            ID of subscription where the image should be uploaded.\n        resource_group:\n          type: string\n          example: 'ToucanResourceGroup'\n          description: |\n            Name of the resource group where the image should be uploaded.\n    Customizations:\n      type: object\n      properties:\n        subscription:\n          $ref: '#/components/schemas/Subscription'\n        packages:\n          type: array\n          example: ['postgresql']\n          items:\n            type: string\n        payload_repositories:\n          type: array\n          items:\n            $ref: '#/components/schemas/Repository'\n        filesystem:\n          type: array\n          items:\n            $ref: '#/components/schemas/Filesystem'\n    Filesystem:\n      type: object\n      required:\n        - mountpoint\n        - min_size\n      properties:\n        mountpoint:\n          type: string\n          example: '/var'\n        min_size:\n          x-go-type: uint64\n          example: 1024\n    Subscription:\n      type: object\n      required:\n        - organization\n        - activation-key\n        - server-url\n        - base-url\n        - insights\n      properties:\n        organization:\n          type: integer\n          example: 2040324\n        activation-key:\n          type: string\n          format: password\n          example: 'my-secret-key'\n        server-url:\n          type: string\n          example: 'subscription.rhsm.redhat.com'\n        base-url:\n          type: string\n          example: http://cdn.redhat.com/\n        insights:\n          type: boolean\n          example: true\n    OSTree:\n      type: object\n      properties:\n        url:\n          type: string\n        ref:\n          type: string\n          example: 'rhel/8/x86_64/edge'\n    PackagesResponse:\n      type: object\n      required:\n        - meta\n        - links\n        - data\n      properties:\n        meta:\n          type: object\n          required:\n            - count\n          properties:\n            count:\n              type: integer\n        links:\n          type: object\n          required:\n            - first\n            - last\n          properties:\n            first:\n              type: string\n              example: \"/api/image-builder/v1/packages?limit=10\u0026offset=0\u0026distribution....\"\n            last:\n              type: string\n              example: \"/api/image-builder/v1/packages?limit=10\u0026offset=10\u0026distribution....\"\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/Package'\n    Package:\n      required:\n        - name\n        - summary\n      properties:\n        name:\n          type: string\n        summary:\n          type: string\n    ComposeMetadata:\n      type: object\n      properties:\n        packages:\n          type: array\n          items:\n            $ref: '#/components/schemas/PackageMetadata'\n          description: 'Package list including NEVRA'\n        ostree_commit:\n          type: string\n          description: 'ID (hash) of the built commit'\n    PackageMetadata:\n      required:\n        - type\n        - name\n        - version\n        - release\n        - arch\n        - sigmd5\n      properties:\n        type:\n          type: string\n        name:\n          type: string\n        version:\n          type: string\n        release:\n          type: string\n        epoch:\n          type: string\n        arch:\n          type: string\n        sigmd5:\n          type: string\n        signature:\n          type: string\n    Repository:\n      type: object\n      required:\n        - rhsm\n      properties:\n        rhsm:\n          type: boolean\n        baseurl:\n          type: string\n          format: uri\n          example: 'https://cdn.redhat.com/content/dist/rhel8/8/x86_64/baseos/os/'\n        mirrorlist:\n          type: string\n          format: uri\n          example: 'http://mirrorlist.centos.org/?release=8-stream\u0026arch=aarch64\u0026repo=BaseOS'\n        metalink:\n          type: string\n          format: uri\n          example: 'https://mirrors.fedoraproject.org/metalink?repo=fedora-32\u0026arch=x86_64'\n        gpgkey:\n          type: string\n        check_gpg:\n          type: boolean\n        ignore_ssl:\n          type: boolean\n",
			"canonicalURL": "/github.com/osbuild/image-builder@99a38d1deadce0240d1d1e2e97a0e76acc552445/-/blob/internal/v1/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/osbuild/image-builder/blob/99a38d1deadce0240d1d1e2e97a0e76acc552445/internal/v1/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/compose\": post: requestBody: contents: application/json: generate schema: field image_requests: item: field upload_request: field options: anyOf: complex anyOf not implemented",
	"NotImplemented": [
		"complex anyOf"
	]
}