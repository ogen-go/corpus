{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cayleygraph/cayley"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "docs/api/swagger.yml",
			"byteSize": 16684,
			"content": "openapi: \"3.0.0\"\ninfo:\n  description: \"\"\n  version: \"2.1.0\"\n  title: \"Cayley API\"\n  license:\n    name: \"Apache 2.0\"\n    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\nservers:\n  - url: \"http://{host}:{port}\"\n    variables:\n      \"host\":\n        default: \"localhost\"\n      \"port\":\n        default: \"64210\"\ntags:\n  - name: \"data\"\n    description: \"Reading and writing data\"\n  - name: \"queries\"\n    description: \"Querying the graph\"\npaths:\n  /api/v2/formats:\n    get:\n      tags:\n        - \"data\"\n      summary: \"Returns a list of supported data formats\"\n      description: \"\"\n      operationId: \"listFormats\"\n      responses:\n        200:\n          description: \"success\"\n          content:\n            \"application/json\":\n              schema:\n                type: \"object\"\n                properties:\n                  id:\n                    description: \"unique name of the format\"\n                    type: \"string\"\n                  read:\n                    description: \"format is supported for loading quads\"\n                    type: \"boolean\"\n                  write:\n                    description: \"format is supported for exporting quads\"\n                    type: \"boolean\"\n                  nodes:\n                    description: \"format can be used to describe nodes\"\n                    type: \"boolean\"\n                  ext:\n                    description: \"typical file extensions for this format\"\n                    type: \"array\"\n                    items:\n                      type: \"string\"\n                  mime:\n                    description: \"typical content types for this format\"\n                    type: \"array\"\n                    items:\n                      type: \"string\"\n                  binary:\n                    description: \"format uses binary encoding\"\n                    type: \"boolean\"\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /api/v2/read:\n    get:\n      tags:\n        - \"data\"\n      summary: \"Reads all quads from the database\"\n      description: \"\"\n      operationId: \"readQuads\"\n      parameters:\n        - name: \"format\"\n          in: \"query\"\n          description: \"Data encoder to use for response. Overrides Accept header.\"\n          required: false\n          schema:\n            type: \"string\"\n            enum:\n              - \"nquads\"\n              - \"jsonld\"\n              - \"json\"\n              - \"json-stream\"\n              - \"pquads\"\n              - \"graphviz\"\n              - \"gml\"\n              - \"graphml\"\n            default: \"nquads\"\n        - name: \"sub\"\n          in: \"query\"\n          description: \"Subjects to filter quads by\"\n          required: false\n          schema:\n            type: \"string\"\n        - name: \"pred\"\n          in: \"query\"\n          description: \"Predicates to filter quads by\"\n          required: false\n          schema:\n            type: \"string\"\n        - name: \"obj\"\n          in: \"query\"\n          description: \"Objects to filter quads by\"\n          required: false\n          schema:\n            type: \"string\"\n        - name: \"label\"\n          in: \"query\"\n          description: \"Labels to filter quads by\"\n          required: false\n          schema:\n            type: \"string\"\n        - name: \"iri\"\n          in: \"query\"\n          description: \"IRI format to use\"\n          required: false\n          schema:\n            type: \"string\"\n            enum: [\"short\", \"full\"]\n      responses:\n        200:\n          description: \"read successful\"\n          content:\n            \"application/n-quads\":\n              schema:\n                $ref: \"#/components/schemas/NQuads\"\n            \"application/ld+json\":\n              schema:\n                $ref: \"#/components/schemas/JSONLD\"\n            \"application/json\":\n              schema:\n                $ref: \"#/components/schemas/JsonQuads\"\n            \"application/x-json-stream\":\n              schema:\n                $ref: \"#/components/schemas/JsonQuadsStream\"\n            \"application/x-protobuf\":\n              schema:\n                $ref: \"#/components/schemas/PQuads\"\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /api/v2/write:\n    post:\n      tags:\n        - \"data\"\n      summary: \"Writes quads to the database\"\n      description: \"\"\n      operationId: \"writeQuads\"\n      requestBody:\n        description: \"File in one of formats specified in Content-Type.\"\n        required: true\n        content:\n          \"application/n-quads\":\n            schema:\n              $ref: \"#/components/schemas/NQuads\"\n          \"application/ld+json\":\n            schema:\n              $ref: \"#/components/schemas/JSONLD\"\n          \"application/json\":\n            schema:\n              $ref: \"#/components/schemas/JsonQuads\"\n          \"application/x-json-stream\":\n            schema:\n              $ref: \"#/components/schemas/JsonQuadsStream\"\n          \"application/x-protobuf\":\n            schema:\n              $ref: \"#/components/schemas/PQuads\"\n      parameters:\n        - name: \"format\"\n          in: \"query\"\n          description: \"Data decoder to use for request. Overrides Content-Type.\"\n          required: false\n          schema:\n            type: \"string\"\n      responses:\n        200:\n          description: \"write successful\"\n          content:\n            application/json:\n              schema:\n                type: \"object\"\n                properties:\n                  result:\n                    type: \"string\"\n                    description: \"legacy success message\"\n                  count:\n                    type: \"integer\"\n                    description: \"number of quads received\"\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /api/v2/node/delete:\n    post:\n      tags:\n        - \"data\"\n      summary: \"Removes a node add all associated quads\"\n      description: \"\"\n      operationId: \"deleteNode\"\n      requestBody:\n        description: \"File in one of formats specified in Content-Type.\"\n        required: true\n        content:\n          \"application/n-quads\":\n            schema:\n              $ref: \"#/components/schemas/NQuadsNode\"\n          \"application/json\":\n            schema:\n              $ref: \"#/components/schemas/JsonNode\"\n          \"application/x-protobuf\":\n            schema:\n              $ref: \"#/components/schemas/PNode\"\n      parameters:\n        - name: \"format\"\n          in: \"query\"\n          description: \"Data decoder to use for request. Overrides Content-Type.\"\n          required: false\n          schema:\n            type: \"string\"\n      responses:\n        200:\n          description: \"delete successful\"\n          content:\n            application/json:\n              schema:\n                type: \"object\"\n                properties:\n                  result:\n                    type: \"string\"\n                    description: \"legacy success message\"\n                  count:\n                    type: \"integer\"\n                    description: \"number of nodes deleted\"\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /api/v2/delete:\n    post:\n      tags:\n        - \"data\"\n      summary: \"Delete quads from the database\"\n      description: \"\"\n      operationId: \"deleteQuads\"\n      requestBody:\n        description: \"File in one of formats specified in Content-Type.\"\n        required: true\n        content:\n          \"application/n-quads\":\n            schema:\n              $ref: \"#/components/schemas/NQuads\"\n          \"application/ld+json\":\n            schema:\n              $ref: \"#/components/schemas/JSONLD\"\n          \"application/json\":\n            schema:\n              $ref: \"#/components/schemas/JsonQuads\"\n          \"application/x-json-stream\":\n            schema:\n              $ref: \"#/components/schemas/JsonQuadsStream\"\n          \"application/x-protobuf\":\n            schema:\n              $ref: \"#/components/schemas/PQuads\"\n      parameters:\n        - name: \"format\"\n          in: \"query\"\n          description: \"Data decoder to use for request. Overrides Content-Type.\"\n          required: false\n          schema:\n            type: \"string\"\n      responses:\n        200:\n          description: \"write successful\"\n          content:\n            application/json:\n              schema:\n                type: \"object\"\n                properties:\n                  result:\n                    type: \"string\"\n                    description: \"legacy success message\"\n                  count:\n                    type: \"integer\"\n                    description: \"number of quads received\"\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /api/v2/query:\n    get:\n      tags:\n        - \"queries\"\n      summary: \"Query the graph\"\n      description: \"\"\n      operationId: \"query-get\"\n      parameters:\n        - name: \"lang\"\n          in: \"query\"\n          description: \"Query language to use\"\n          required: true\n          schema:\n            type: \"string\"\n            enum:\n              - \"gizmo\"\n              - \"graphql\"\n              - \"mql\"\n              - \"sexp\"\n        - name: \"qu\"\n          in: \"query\"\n          description: \"Query text\"\n          required: true\n          schema:\n            type: \"string\"\n      responses:\n        200:\n          description: \"query succesful\"\n          content:\n            \"application/json\":\n              schema:\n                $ref: \"#/components/schemas/QueryResult\"\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - \"queries\"\n      summary: \"Query the graph\"\n      description: \"\"\n      operationId: \"query\"\n      parameters:\n        - name: \"lang\"\n          in: \"query\"\n          description: \"Query language to use\"\n          required: true\n          schema:\n            type: \"string\"\n            enum:\n              - \"gizmo\"\n              - \"graphql\"\n              - \"mql\"\n              - \"sexp\"\n      requestBody:\n        description: \"Query text\"\n        required: true\n        content:\n          \"*/*\":\n            schema:\n              type: \"string\"\n            examples:\n              gizmo:\n                summary: \"Gizmo: first 10 nodes\"\n                value: \"g.V().getLimit(10)\"\n              graphql:\n                summary: \"GraphQL: first 10 nodes\"\n                value: \"{\\n  nodes(first: 10){\\n    id\\n  }\\n}\"\n      responses:\n        200:\n          description: \"query succesful\"\n          content:\n            \"application/json\":\n              schema:\n                $ref: \"#/components/schemas/QueryResult\"\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /api/v2/namespace-rules:\n    get:\n      tags:\n        - \"data\"\n      summary: \"Reads all namespace rules from the database\"\n      description: \"\"\n      operationId: \"getNamespaceRules\"\n      responses:\n        200:\n          description: \"Success\"\n          content:\n            \"application/json\":\n              schema:\n                type: \"array\"\n                items:\n                  type: \"object\"\n                  properties:\n                    prefix:\n                      description: \"Prefix of the namespace\"\n                      type: \"string\"\n                    namespace:\n                      description: \"The namespace prefixed\"\n                      type: \"string\"\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      tags:\n        - \"data\"\n      summary: \"Registers new namespace rule to the database\"\n      description: \"\"\n      operationId: \"registerNamespaceRule\"\n      responses:\n        201:\n          description: \"Success\"\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /gephi/gs:\n    get:\n      tags:\n        - \"queries\"\n      summary: \"Gephi GraphStream endpoint\"\n      description: \"\"\n      operationId: \"gephiGraphStream\"\n      parameters:\n        - name: \"mode\"\n          in: \"query\"\n          description: \"Streamer mode\"\n          required: false\n          schema:\n            type: \"string\"\n            enum:\n              - \"raw\"\n              - \"nodes\"\n            default: \"raw\"\n        - name: \"limit\"\n          in: \"query\"\n          description: \"Limit the number of nodes or quads\"\n          required: false\n          schema:\n            type: \"integer\"\n        - name: \"sub\"\n          in: \"query\"\n          description: \"Subjects to filter quads by\"\n          required: false\n          schema:\n            type: \"string\"\n        - name: \"pred\"\n          in: \"query\"\n          description: \"Predicates to filter quads by\"\n          required: false\n          schema:\n            type: \"string\"\n        - name: \"obj\"\n          in: \"query\"\n          description: \"Objects to filter quads by\"\n          required: false\n          schema:\n            type: \"string\"\n        - name: \"label\"\n          in: \"query\"\n          description: \"Labels to filter quads by\"\n          required: false\n          schema:\n            type: \"string\"\n      responses:\n        200:\n          description: \"success\"\n          content:\n            \"application/stream+json\":\n              schema:\n                type: \"string\"\n                format: \"binary\"\n                description: \"stream of JSON objects\"\n        default:\n          description: \"Unexpected error\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  schemas:\n    QueryResult:\n      type: object\n      properties:\n        result:\n          type: array\n          nullable: true\n          items:\n            type: object\n    NQuads:\n      type: \"string\"\n      format: \"binary\"\n      example: |\n        \u003calice\u003e \u003cfollows\u003e \u003cbob\u003e .\n        \u003cbob\u003e \u003cfollows\u003e \u003cfred\u003e .\n        \u003cbob\u003e \u003cstatus\u003e \"cool_person\" .\n        \u003ccharlie\u003e \u003cfollows\u003e \u003cbob\u003e .\n        \u003ccharlie\u003e \u003cfollows\u003e \u003cdani\u003e .\n        \u003cdani\u003e \u003cfollows\u003e \u003cbob\u003e .\n        \u003cdani\u003e \u003cfollows\u003e \u003cgreg\u003e .\n        \u003cdani\u003e \u003cstatus\u003e \"cool_person\" .\n        \u003cemily\u003e \u003cfollows\u003e \u003cfred\u003e .\n        \u003cfred\u003e \u003cfollows\u003e \u003cgreg\u003e .\n        \u003cgreg\u003e \u003cstatus\u003e \"cool_person\" .\n        \u003cpredicates\u003e \u003care\u003e \u003cfollows\u003e .\n        \u003cpredicates\u003e \u003care\u003e \u003cstatus\u003e .\n        \u003cemily\u003e \u003cstatus\u003e \"smart_person\" \u003csmart_graph\u003e .\n        \u003cgreg\u003e \u003cstatus\u003e \"smart_person\" \u003csmart_graph\u003e .\n    NQuadsNode:\n      type: \"string\"\n      format: \"binary\"\n      example: \"\u003calice\u003e\"\n    JSONLD:\n      type: \"string\"\n      format: \"binary\"\n      example:\n        {\n          \"@context\": \"http://schema.org/\",\n          \"@type\": \"Person\",\n          \"name\": \"Jane Doe\",\n          \"jobTitle\": \"Professor\",\n          \"telephone\": \"(425) 123-4567\",\n          \"url\": \"http://www.janedoe.com\",\n        }\n      externalDocs:\n        url: \"https://json-ld.org\"\n    JsonQuad:\n      type: \"object\"\n      properties:\n        subject:\n          type: \"string\"\n        predicate:\n          type: \"string\"\n        object:\n          type: \"string\"\n        label:\n          type: \"string\"\n    JsonQuads:\n      type: \"array\"\n      items:\n        type: \"object\"\n        properties:\n          subject:\n            type: \"string\"\n          predicate:\n            type: \"string\"\n          object:\n            type: \"string\"\n          label:\n            type: \"string\"\n    JsonNode:\n      type: \"string\"\n    JsonQuadsStream:\n      type: \"string\"\n      format: \"binary\"\n      description: \"stream of JsonQuad objects\"\n    PQuads:\n      type: \"string\"\n      format: \"binary\"\n      description: \"Cayley-specific binary encoding of quads based on protobuf\"\n    PNode:\n      type: \"string\"\n      format: \"binary\"\n      description: \"Cayley-specific binary encoding of node value based on protobuf\"\n    Error:\n      type: \"object\"\n      properties:\n        error:\n          type: \"string\"\n          description: \"error message\"\n",
			"canonicalURL": "/github.com/cayleygraph/cayley@275a7428fb10fdb4d1167f09a7120898239903dd/-/blob/docs/api/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/cayleygraph/cayley/blob/275a7428fb10fdb4d1167f09a7120898239903dd/docs/api/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/v2/query\": post: requestBody: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}