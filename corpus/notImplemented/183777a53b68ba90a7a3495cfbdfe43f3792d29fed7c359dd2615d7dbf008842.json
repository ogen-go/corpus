{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hack-with-admin-ch/HackZurich2021"
		},
		"file": {
			"name": "spec.yaml",
			"size": 0,
			"path": "api/spec.yaml",
			"byteSize": 5589,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: Valuenet Inference API\n  version: 1.0.0\n\nservers:\n  - url: https://inference.hackzurich2021.hack-with-admin.ch\n    description: FOITT instance\n  - url: https://valuenet.cloudlab.zhaw.ch\n    description: ZHAW instance\n\ncomponents:\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-KEY\n\nsecurity:\n  - ApiKeyAuth: []\n\npaths:\n  /api/question/{database}:\n    put:\n      summary: Convert a question to a SQL query and get its result\n      description: Optional extended description in CommonMark or HTML.\n      parameters:\n        - in: path\n          name: database\n          schema:\n            type: string\n          required: true\n          description: Database name\n          example: hack_zurich\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                question:\n                  type: string\n                  description: Question\n                # beam_size:\n                #   type: number\n            examples:\n              wetzikon:\n                summary: Get the share of electric cars in 2016 for the city of Wetzikon\n                value:\n                  question: \"What is the share of electric cars in 2016 for Wetzikon?\"\n                  # beam_size: 2\n\n      responses:\n        '200':    # status code\n          description: A JSON array of user names\n          content:\n            application/json:\n              schema: \n                type: object\n                properties:\n                  beams:\n                    type: array\n                    items:\n                      type: array\n                      items: {}\n                  potential_values_found_in_db:\n                    type: array\n                    items:\n                      type: string\n                  question:\n                    type: string\n                  question_tokenized:\n                    type: array\n                    items:\n                      type: string\n                  result:\n                    type: array\n                    items:\n                      type: array\n                      items:\n                        type: string\n                  sem_ql:\n                    type: string\n                  sql:\n                    type: string\n              examples:\n                wetzikon:\n                  summary: Get the share of electric cars in 2016 for the city of Wetzikon\n                  value:\n                    beams:\n                      - \n                        - \"SELECT T1.share_electric_cars FROM share_electric_cars AS T1 JOIN spatialunit AS T2 ON T1.spatialunit_id = T2.spatialunit_id WHERE T2.name = 'Wetzikon' and T1.year = 2016       \"\n                        - 7.843193054199219\n                    potential_values_found_in_db:\n                      - \"2016\"\n                      - Wetzikon\n                    question: \"What is the share of electric cars in 2016 for Wetzikon?\"\n                    question_tokenized:\n                      - \"What\"\n                      - \"is\"\n                      - \"the\"\n                      - \"share\"\n                      - \"of\"\n                      - \"electric\"\n                      - \"cars\"\n                      - \"in\"\n                      - \"2016\"\n                      - \"for\"\n                      - \"Wetzikon\"\n                      - \"?\"\n                    result:\n                      - \n                        - \"0.3\"\n                    sem_sql: \"Root1(3) Root(3) Sel(0) N(0) A(0) C(28) T(11) Filter(0) Filter(2) A(0) C(12) T(1) V(1) Filter(2) A(0) C(18) T(11) V(0)\"\n                    sql: \"SELECT T1.share_electric_cars FROM share_electric_cars AS T1 JOIN spatialunit AS T2 ON T1.spatialunit_id = T2.spatialunit_id WHERE T2.name = 'Wetzikon' and T1.year = 2016       \"\n\n        '403':\n          description: 'Invalid API key'\n          content:\n            text/html:\n              schema:\n                type: string\n              examples:\n                invalid_key:\n                  summary: The API key is invalid\n                  value: |\n                    \u003c!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"\u003e\n                    \u003ctitle\u003e403 Forbidden\u003c/title\u003e\n                    \u003ch1\u003eForbidden\u003c/h1\u003e\n                    \u003cp\u003ePlease provide a valid API Key\u003c/p\u003e\n\n        '400':\n          description: 'Invalid HTTP request (usually missing or wrong parameters)'\n          content:\n            text/html:\n              schema:\n                type: string\n              examples:\n                missing_question:\n                  summary: \"Question key is missing in the request body\"\n                  value: |\n                    \u003c!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"\u003e\n                    \u003ctitle\u003e400 Bad Request\u003c/title\u003e\n                    \u003ch1\u003eBad Request\u003c/h1\u003e\n                    \u003cp\u003ePlease specify a question, e.g. POST { question: 'Whats the question?' }\u003c/p\u003e\n\n        '405':\n          description: 'Invalid HTTP request (wrong HTTP verb used)'\n          content:\n            text/html:\n              schema:\n                type: string\n              examples:\n                wrong_http_verb:\n                  summary: \"POST instead of PUT\"\n                  value: |\n                    \u003c!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"\u003e\n                    \u003ctitle\u003e405 Method Not Allowed\u003c/title\u003e\n                    \u003ch1\u003eMethod Not Allowed\u003c/h1\u003e\n                    \u003cp\u003eThe method is not allowed for the requested URL.\u003c/p\u003e\n",
			"canonicalURL": "/github.com/hack-with-admin-ch/HackZurich2021@bc22d32cde01d420dccf972e660e4ab0f058124c/-/blob/api/spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/hack-with-admin-ch/HackZurich2021/blob/bc22d32cde01d420dccf972e660e4ab0f058124c/api/spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/question/{database}\": put: responses: 400: contents: unsupported content types: [text/html]",
	"NotImplemented": [
		"unsupported content types"
	]
}