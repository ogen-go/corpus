{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Sciebo-RDS/Sciebo-RDS"
		},
		"file": {
			"name": "use-case_port.yml",
			"size": 0,
			"path": "RDS/layer2_use_cases/port/use-case_port.yml",
			"byteSize": 15706,
			"content": "openapi: 3.0.0\ninfo:\n  title: Token Storage\n  version: '1.0'\n  contact:\n    name: Peter Heiss\n    email: peter.heiss@uni-muenster.de\n  description: 'This file describes a service, which takes oauth2 flow for rds. This is a extra layer for the central service.'\nservers:\n  - url: 'http://layer2-port/port-service'\npaths:\n  /redirect:\n    get:\n      summary: Redirect the user to the specified uri\n      tags: []\n      responses:\n        '302':\n          description: Found\n      description: |-\n        This endpoint takes all tokens to send it to the central-service to save them there and redirects user to `/authorization-success` or `/authorization-cancel`, if anything is wrong with the given data.\n\n        please specify this endpoint when asked for a redirect-uri.\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: code\n          description: The oauth2 exchange token from oauth2 service provider.\n        - schema:\n            type: string\n          in: query\n          name: state\n          description: 'The encoded state string, which does not allow any changes by the user.'\n    parameters: []\n  '/service/{servicename}':\n    parameters:\n      - schema:\n          type: string\n        name: servicename\n        in: path\n        required: true\n    get:\n      summary: Returns authorize-url from service.\n      tags: []\n      responses:\n        '200':\n          description: |-\n            OK\n\n            For the jwt string, take a look at the jwt model.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  jwt:\n                    type: string\n        '404':\n          description: Not Found\n      description: |-\n        This is the normally known `/authorize` URL for oauth2 providers. If http-headers say, it is a machine, it returns a 200 code and give all informations for a manual redirect. Otherwise it redirects to the `/authorize` pages for the oauth2-providers with all needed service relevant informations like client_id.\n\n        This is for easier usability, so you don't have to pull the services before.\n  /authorization-success:\n    get:\n      summary: Returns success page\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            text/html:\n              schema:\n                type: object\n                properties: {}\n      description: 'Like ownclouds: index.php/apps/oauth2/authorization-successful'\n    parameters: []\n  /authorization-cancel:\n    get:\n      summary: Returns cancel page\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            text/html:\n              schema:\n                type: object\n                properties: {}\n      description: This endpoint represents an invalid oauth2 process.\n    parameters: []\n  /service:\n    get:\n      summary: Returns all available services\n      tags: []\n      responses:\n        '200':\n          description: |-\n            OK\n\n            For the jwt string, take a look at the jwt model.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    jwt:\n                      type: string\n                    informations:\n                      type: object\n                      description: A proxy for the informations from every port.\n      description: Returns all available services.\n  '/user/{user-id}/service':\n    parameters:\n      - schema:\n          type: string\n        name: user-id\n        in: path\n        required: true\n    get:\n      summary: Get services from user-id\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  length:\n                    type: integer\n                  list:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/service'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      description: Returns all services which the user is registered for.\n  '/user/{user-id}/service/{servicename}':\n    parameters:\n      - schema:\n          type: string\n        name: user-id\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: servicename\n        in: path\n        required: true\n    get:\n      summary: ''\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JsonService'\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      description: Get current access token for service.\n    delete:\n      summary: Delete the service from user\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      description: Remove the user token for service.\n  '/user/{user-id}/service/{servicename}/projects':\n    parameters:\n      - schema:\n          type: string\n        name: user-id\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: servicename\n        in: path\n        required: true\n    get:\n      summary: Returns all serviceprojects from given service for given user\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/serviceprojects'\n        '404':\n          description: Not Found\n    post:\n      summary: Creates a new project in given service for given user\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: The projectId of the created project.\n                properties:\n                  projectId:\n                    type: string\n            application/xml:\n              schema:\n                type: object\n                properties: {}\n        '500':\n          description: Internal Server Error\n  '/user/{user-id}/service/{servicename}/projects/{projects-id}':\n    parameters:\n      - schema:\n          type: string\n        name: user-id\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: servicename\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: projects-id\n        in: path\n        required: true\n    get:\n      summary: Returns specified project in given service for given user\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/serviceprojects'\n        '404':\n          description: Not Found\n    delete:\n      summary: Removes given project in given service for given user\n      responses:\n        '204':\n          description: No Content\n  /exchange:\n    post:\n      summary: Exchange the oauth2 code\n      tags: []\n      responses:\n        '204':\n          description: No Content\n        '400':\n          description: Bad Request\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                jwt:\n                  type: string\n        description: |-\n          JWT holds the following object with keys:\n\n          state, code, userId, servicename\n\n          state holds all informations from rds.\n          code holds the code, which needs to be exchanged.\n          userId holds the name of the user, which get the exchanged token. If the userId is not known as master account in token storage, it will be created as master account associated with servicename.\n          servicename holds the name of the service, which client secret was used to sign the jwt.\n\n          The jwt has to be signed with the oauth2 client secret for rds from service.\n\n          If userId is not present in jwt, the user_id field in response from oauth2 provider will be used as userId.\n      description: ''\n  /credentials:\n    post:\n      summary: ''\n      responses:\n        '200':\n          description: OK\n      description: Adds the given credentials to the corresponding user and save it for use\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                servicename:\n                  type: string\n                password:\n                  type: string\n                username:\n                  type: string\n                userId:\n                  type: string\ncomponents:\n  schemas:\n    oauth_uri:\n      title: OAuth2 URL\n      type: object\n      description: ''\n      properties:\n        redirect_uri_full:\n          type: string\n          description: 'A complete uri with client id, type and redirect_uri.'\n        redirect_uri:\n          type: string\n        client_id:\n          type: string\n        response_type:\n          type: string\n        authorize_uri:\n          type: string\n    oauth:\n      title: oauth\n      type: object\n      properties:\n        id:\n          type: string\n        service:\n          type: string\n        username:\n          type: string\n        refresh_token:\n          type: string\n        access_token:\n          type: string\n    jwt:\n      title: jwt\n      type: object\n      description: 'This string is a jwt, so it follows the structure: header.payload.signature. The payload follows the defined struct below.'\n      properties:\n        servicename:\n          type: string\n        authorize_url:\n          type: string\n        date:\n          type: string\n    error:\n      title: error\n      type: object\n      properties:\n        error:\n          type: string\n        http_code:\n          type: string\n        description:\n          type: string\n      description: Represents an internal server error.\n    serviceprojects:\n      title: serviceprojects\n      type: object\n      properties:\n        projectId:\n          type: string\n        metadata:\n          type: object\n    service:\n      title: service\n      type: object\n      properties:\n        id:\n          type: integer\n        servicename:\n          type: string\n        access_token:\n          type: string\n        projects:\n          type: array\n          items:\n            $ref: '#/components/schemas/serviceprojects'\n        informations:\n          type: object\n          required:\n            - fileTransferArchive\n            - fileTransferMode\n            - implements\n          properties:\n            credentials:\n              type: object\n              properties:\n                userId:\n                  type: boolean\n                password:\n                  type: boolean\n            fileTransferArchive:\n              type: integer\n            fileTransferMode:\n              type: integer\n            implements:\n              type: array\n              description: 'ex. [\"fileStorage\", \"metadata\"]'\n              items:\n                type: string\n            authorize_url:\n              type: string\n            refresh_url:\n              type: string\n            client_id:\n              type: string\n            servicename:\n              type: string\n      required:\n        - servicename\n        - access_token\n        - projects\n        - informations\n    JsonService:\n      description: ''\n      type: object\n      x-examples:\n        example-1:\n          data:\n            access_token: IY6EObhyvqEHezdDzAQ3bGn8kT2MEg5CCR7kHa4yJn1GjrPOTgs9Zlezzc8XuMLP\n            expiration_date: '2021-05-27 18:56:53.466014'\n            refresh_token: ''\n            service:\n              data:\n                authorize_url: 'https://sciebords.uni-muenster.de/index.php/apps/oauth2/authorize%3Fredirect_uri=https://sciebords.uni-muenster.de/rds\u0026response_type=code\u0026client_id=H693PGgehViYbyPVjzMkhHPIGNE7JaxRKmm58oLQKNjgUQXyRopsGfPxC6czTq3H'\n                client_id: H693PGgehViYbyPVjzMkhHPIGNE7JaxRKmm58oLQKNjgUQXyRopsGfPxC6czTq3H\n                client_secret: ''\n                fileTransferArchive: 0\n                fileTransferMode: 0\n                implements:\n                  - fileStorage\n                refresh_url: 'https://sciebords.uni-muenster.de/index.php/apps/oauth2/api/v1/token'\n                servicename: port-owncloud\n              type: OAuth2Service\n            user:\n              data:\n                username: admin\n              type: User\n          type: OAuth2Token\n      title: ''\n      properties:\n        data:\n          type: object\n          properties:\n            access_token:\n              type: string\n            expiration_date:\n              type: string\n              minLength: 1\n            refresh_token:\n              type: string\n            service:\n              type: object\n              required:\n                - data\n                - type\n              properties:\n                data:\n                  type: object\n                  required:\n                    - fileTransferArchive\n                    - fileTransferMode\n                    - implements\n                    - servicename\n                  properties:\n                    authorize_url:\n                      type: string\n                      minLength: 1\n                    client_id:\n                      type: string\n                      minLength: 1\n                    client_secret:\n                      type: string\n                    fileTransferArchive:\n                      type: number\n                    fileTransferMode:\n                      type: number\n                    implements:\n                      type: array\n                      description: 'ex. [\"fileStorage\", \"metadata\"]'\n                      items:\n                        type: string\n                    refresh_url:\n                      type: string\n                      minLength: 1\n                    servicename:\n                      type: string\n                      minLength: 1\n                type:\n                  type: string\n                  minLength: 1\n            user:\n              type: object\n              required:\n                - data\n                - type\n              properties:\n                data:\n                  type: object\n                  required:\n                    - username\n                  properties:\n                    username:\n                      type: string\n                      minLength: 1\n                type:\n                  type: string\n                  minLength: 1\n          required:\n            - access_token\n            - service\n            - user\n        type:\n          type: string\n          minLength: 1\n      required:\n        - type\n",
			"canonicalURL": "/github.com/Sciebo-RDS/Sciebo-RDS@5b868aa82ae367fd7f33ebd419ffc7ba255cdd7e/-/blob/RDS/layer2_use_cases/port/use-case_port.yml",
			"externalURLs": [
				{
					"url": "https://github.com/Sciebo-RDS/Sciebo-RDS/blob/5b868aa82ae367fd7f33ebd419ffc7ba255cdd7e/RDS/layer2_use_cases/port/use-case_port.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/authorization-cancel\": get: responses: 200: contents: unsupported content types: [text/html]",
	"NotImplemented": [
		"unsupported content types"
	]
}