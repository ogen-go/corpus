{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/yonaskolb/SwagGen"
		},
		"file": {
			"name": "spec.yml",
			"size": 0,
			"path": "Specs/PetstoreTest/spec.yml",
			"byteSize": 30835,
			"content": "openapi: 3.0.0\ninfo:\n  description: This spec is mainly for testing Petstore server and contains fake endpoints,\n    models. Please do not use this for any other purpose.\n  version: 1.0.0\n  title: Swagger Petstore\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"405\":\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid status value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid tag value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  \"/pet/{petId}\":\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n      security:\n        - api_key:\n            []\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        \"405\":\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: \"\"\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid pet value\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  \"/pet/{petId}/uploadImage\":\n    post:\n      tags:\n        - pet\n      summary: uploads an image\n      description: \"\"\n      operationId: uploadFile\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                additionalMetadata:\n                  description: Additional data to pass to server\n                  type: string\n                file:\n                  description: file to upload\n                  type: string\n                  format: binary\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiResponse\"\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n      security:\n        - api_key:\n            []\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: \"\"\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid Order\n  \"/store/order/{order_id}\":\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value \u003c= 5 or \u003e 10. Other values\n        will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: order_id\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 5\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with value \u003c 1000. Anything above\n        1000 or nonintegers will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: order_id\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: \"\"\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when toekn expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  \"/user/{username}\":\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: \"\"\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: \"The name that needs to be fetched. Use user1 for testing. \"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be deleted\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Updated user object\n        required: true\n      responses:\n        \"400\":\n          description: Invalid user supplied\n        \"404\":\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n  /fake:\n    patch:\n      tags:\n        - fake\n      summary: To test \"client\" model\n      description: To test \"client\" model\n      operationId: testClientModel\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Client\"\n        description: client model\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Client\"\n    get:\n      tags:\n        - fake\n      summary: To test enum parameters\n      description: To test enum parameters\n      operationId: testEnumParameters\n      parameters:\n        - name: enum_header_string_array\n          in: header\n          description: Header parameter enum test (string array)\n          schema:\n            type: array\n            items:\n              type: string\n              default: $\n              enum:\n                - \"\u003e\"\n                - $\n        - name: enum_header_string\n          in: header\n          description: Header parameter enum test (string)\n          schema:\n            type: string\n            enum:\n              - _abc\n              - -efg\n              - (xyz)\n            default: -efg\n        - name: enum_query_string_array\n          in: query\n          description: Query parameter enum test (string array)\n          schema:\n            type: array\n            items:\n              type: string\n              default: $\n              enum:\n                - \"\u003e\"\n                - $\n        - name: enum_query_string\n          in: query\n          description: Query parameter enum test (string)\n          schema:\n            type: string\n            enum:\n              - _abc\n              - -efg\n              - (xyz)\n            default: -efg\n        - name: enum_query_integer\n          in: query\n          description: Query parameter enum test (double)\n          schema:\n            type: integer\n            format: int32\n            enum:\n              - 1\n              - -2\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                enum_form_string_array:\n                  description: Form parameter enum test (string array)\n                  type: array\n                  items:\n                    type: string\n                    default: $\n                    enum:\n                      - \"\u003e\"\n                      - $\n                enum_form_string:\n                  description: Form parameter enum test (string)\n                  type: string\n                  enum:\n                    - _abc\n                    - -efg\n                    - (xyz)\n                  default: -efg\n                enum_query_double:\n                  description: Query parameter enum test (double)\n                  type: number\n                  format: double\n                  enum:\n                    - 1.1\n                    - -1.2\n      responses:\n        \"400\":\n          description: Invalid request\n        \"404\":\n          description: Not found\n    post:\n      tags:\n        - fake\n      summary: |\n        Fake endpoint for testing various parameters\n        假端點\n        偽のエンドポイント\n        가짜 엔드 포인트\n      description: |\n        Fake endpoint for testing various parameters\n        假端點\n        偽のエンドポイント\n        가짜 엔드 포인트\n      operationId: testEndpointParameters\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                integer:\n                  description: None\n                  type: integer\n                  minimum: 10\n                  maximum: 100\n                int32:\n                  description: None\n                  type: integer\n                  format: int32\n                  minimum: 20\n                  maximum: 200\n                int64:\n                  description: None\n                  type: integer\n                  format: int64\n                number:\n                  description: None\n                  type: number\n                  minimum: 32.1\n                  maximum: 543.2\n                float:\n                  description: None\n                  type: number\n                  format: float\n                  maximum: 987.6\n                double:\n                  description: None\n                  type: number\n                  format: double\n                  minimum: 67.8\n                  maximum: 123.4\n                string:\n                  description: None\n                  type: string\n                  pattern: /[a-z]/i\n                pattern_without_delimiter:\n                  description: None\n                  type: string\n                  pattern: ^[A-Z].*\n                byte:\n                  description: None\n                  type: string\n                  format: byte\n                binary:\n                  description: None\n                  type: string\n                  format: binary\n                date:\n                  description: None\n                  type: string\n                  format: date\n                dateTime:\n                  description: None\n                  type: string\n                  format: date-time\n                password:\n                  description: None\n                  type: string\n                  format: password\n                  minLength: 10\n                  maxLength: 64\n                callback:\n                  description: None\n                  type: string\n              required:\n                - number\n                - double\n                - pattern_without_delimiter\n                - byte\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n      security:\n        - http_basic_test:\n            []\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: http://petstore.swagger.io:80/v2\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/User\"\n      description: List of user object\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n      description: Pet object that needs to be added to the store\n      required: true\n  securitySchemes:\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: http://petstore.swagger.io/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    http_basic_test:\n      type: http\n      scheme: basic\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          x-is-unique: true\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n          x-is-unique: true\n        category:\n          $ref: \"#/components/schemas/Category\"\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n    Return:\n      description: Model for testing reserved words\n      properties:\n        return:\n          type: integer\n          format: int32\n      xml:\n        name: Return\n    Name:\n      description: Model for testing model name same as property name\n      required:\n        - name\n      properties:\n        name:\n          type: integer\n          format: int32\n        snake_case:\n          readOnly: true\n          type: integer\n          format: int32\n        property:\n          type: string\n        123Number:\n          type: integer\n          readOnly: true\n      xml:\n        name: Name\n    200_response:\n      description: Model for testing model name starting with number\n      properties:\n        name:\n          type: integer\n          format: int32\n        class:\n          type: string\n      xml:\n        name: Name\n    ClassModel:\n      description: Model for testing model with \"_class\" property\n      properties:\n        _class:\n          type: string\n    Dog:\n      allOf:\n        - $ref: \"#/components/schemas/Animal\"\n        - type: object\n          properties:\n            breed:\n              type: string\n    Cat:\n      allOf:\n        - $ref: \"#/components/schemas/Animal\"\n        - type: object\n          properties:\n            declawed:\n              type: boolean\n    Animal:\n      type: object\n      discriminator:\n        propertyName: className\n      required:\n        - className\n      properties:\n        className:\n          type: string\n        color:\n          type: string\n          default: red\n    AnimalFarm:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Animal\"\n    format_test:\n      type: object\n      required:\n        - number\n        - byte\n        - date\n        - password\n      properties:\n        integer:\n          type: integer\n          maximum: 100\n          minimum: 10\n        int32:\n          type: integer\n          format: int32\n          maximum: 200\n          minimum: 20\n        int64:\n          type: integer\n          format: int64\n        number:\n          maximum: 543.2\n          minimum: 32.1\n          type: number\n        float:\n          type: number\n          format: float\n          maximum: 987.6\n          minimum: 54.3\n        double:\n          type: number\n          format: double\n          maximum: 123.4\n          minimum: 67.8\n        string:\n          type: string\n          pattern: /[a-z]/i\n        byte:\n          type: string\n          format: byte\n        binary:\n          type: string\n          format: binary\n        date:\n          type: string\n          format: date\n        dateTime:\n          type: string\n          format: date-time\n        uuid:\n          type: string\n          format: uuid\n        password:\n          type: string\n          format: password\n          maxLength: 64\n          minLength: 10\n    EnumClass:\n      type: string\n      default: -efg\n      enum:\n        - _abc\n        - -efg\n        - (xyz)\n    Enum_Test:\n      type: object\n      properties:\n        enum_string:\n          type: string\n          enum:\n            - UPPER\n            - lower\n            - \"\"\n        enum_integer:\n          type: integer\n          format: int32\n          enum:\n            - 1\n            - -1\n        enum_number:\n          type: number\n          format: double\n          enum:\n            - 1.1\n            - -1.2\n        outerEnum:\n          $ref: \"#/components/schemas/OuterEnum\"\n    AdditionalPropertiesClass:\n      type: object\n      properties:\n        map_property:\n          type: object\n          additionalProperties:\n            type: string\n        map_of_map_property:\n          type: object\n          additionalProperties:\n            type: object\n            additionalProperties:\n              type: string\n    MixedPropertiesAndAdditionalPropertiesClass:\n      type: object\n      properties:\n        uuid:\n          type: string\n          format: uuid\n        dateTime:\n          type: string\n          format: date-time\n        map:\n          type: object\n          additionalProperties:\n            $ref: \"#/components/schemas/Animal\"\n    List:\n      type: object\n      properties:\n        123-list:\n          type: string\n    Client:\n      type: object\n      properties:\n        client:\n          type: string\n    ReadOnlyFirst:\n      type: object\n      properties:\n        bar:\n          type: string\n          readOnly: true\n        baz:\n          type: string\n    hasOnlyReadOnly:\n      type: object\n      properties:\n        bar:\n          type: string\n          readOnly: true\n        foo:\n          type: string\n          readOnly: true\n    Capitalization:\n      type: object\n      properties:\n        smallCamel:\n          type: string\n        CapitalCamel:\n          type: string\n        small_Snake:\n          type: string\n        Capital_Snake:\n          type: string\n        SCA_ETH_Flow_Points:\n          type: string\n        ATT_NAME:\n          description: |\n            Name of the pet\n          type: string\n    MapTest:\n      type: object\n      properties:\n        map_map_of_string:\n          type: object\n          additionalProperties:\n            type: object\n            additionalProperties:\n              type: string\n        map_of_enum_string:\n          type: object\n          additionalProperties:\n            type: string\n            enum:\n              - UPPER\n              - lower\n    ArrayTest:\n      type: object\n      properties:\n        array_of_string:\n          type: array\n          items:\n            type: string\n        array_array_of_integer:\n          type: array\n          items:\n            type: array\n            items:\n              type: integer\n              format: int64\n        array_array_of_model:\n          type: array\n          items:\n            type: array\n            items:\n              $ref: \"#/components/schemas/ReadOnlyFirst\"\n    NumberOnly:\n      type: object\n      properties:\n        JustNumber:\n          type: number\n    ArrayOfNumberOnly:\n      type: object\n      properties:\n        ArrayNumber:\n          type: array\n          items:\n            type: number\n    ArrayOfArrayOfNumberOnly:\n      type: object\n      properties:\n        ArrayArrayNumber:\n          type: array\n          items:\n            type: array\n            items:\n              type: number\n    EnumArrays:\n      type: object\n      properties:\n        just_symbol:\n          type: string\n          enum:\n            - \"\u003e=\"\n            - $\n        array_enum:\n          type: array\n          items:\n            type: string\n            enum:\n              - fish\n              - crab\n    OuterEnum:\n      type: string\n      enum:\n        - placed\n        - approved\n        - delivered\n    '$special[model.name]':\n      properties:\n        \"$special[property.name]\":\n          type: integer\n          format: int64\n      xml:\n        name: $special[model.name]",
			"canonicalURL": "/github.com/yonaskolb/SwagGen@0bef6077c83620565e2ae50d76f9633061b0a2ac/-/blob/Specs/PetstoreTest/spec.yml",
			"externalURLs": [
				{
					"url": "https://github.com/yonaskolb/SwagGen/blob/0bef6077c83620565e2ae50d76f9633061b0a2ac/Specs/PetstoreTest/spec.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/pet/{petId}\": post: security: security \"petstore_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}