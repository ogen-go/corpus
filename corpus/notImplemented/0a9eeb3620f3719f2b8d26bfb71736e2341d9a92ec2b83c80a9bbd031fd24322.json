{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/keycloak.local/1/openapi.yaml",
			"byteSize": 217266,
			"content": "openapi: 3.0.2\nservers:\n  - url: http://keycloak.local\ninfo:\n  description: This is a REST API reference for the Keycloak Admin\n  title: Keycloak Admin REST API\n  version: \"1\"\n  x-apisguru-categories:\n    - developer_tools\n  x-origin:\n    - format: openapi\n      url: https://raw.githubusercontent.com/ccouzens/keycloak-openapi/master/keycloak/10.0.json\n      version: \"3.0\"\n  x-providerName: keycloak.local\nexternalDocs:\n  description: Schema source code\n  url: https://github.com/keycloak/keycloak/tree/6.0.1/core/src/main/java/org/keycloak/representations\nsecurity:\n  - access_token: []\npaths:\n  /:\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerInfoRepresentation\"\n          description: success\n      summary: Get themes, social providers, auth providers, and event listeners available on this server\n      tags:\n        - Root\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RealmRepresentation\"\n        description: JSON representation of the realm\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Import a realm   Imports a realm from a full representation of that realm.\n      tags:\n        - Realms Admin\n  \"/{id}/name\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                additionalProperties: true\n                type: object\n          description: success\n      summary: Need this for admin console to display simple name of provider when displaying client detail   KEYCLOAK-4328\n      tags:\n        - User Storage Provider\n    parameters:\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete the realm\n      tags:\n        - Realms Admin\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RealmRepresentation\"\n          description: success\n      summary: Get the top-level representation of the realm   It will not include nested information like User and Client representations.\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RealmRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.\n      tags:\n        - Realms Admin\n  \"/{realm}/admin-events\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete all admin events\n      tags:\n        - Realms Admin\n    get:\n      parameters:\n        - in: query\n          name: authClient\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: authIpAddress\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: authRealm\n          schema:\n            type: string\n          style: form\n        - description: user id\n          in: query\n          name: authUser\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: dateFrom\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: dateTo\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: Maximum results size (defaults to 100)\n          in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - in: query\n          name: operationTypes\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n        - in: query\n          name: resourcePath\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: resourceTypes\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/AdminEventRepresentation\"\n                type: array\n          description: success\n      summary: Get admin events   Returns all admin events, or filters events based on URL query parameters listed here\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/attack-detection/brute-force/users\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Clear any user login failures for all users   This can release temporary disabled users\n      tags:\n        - Attack Detection\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/attack-detection/brute-force/users/{userId}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Clear any user login failures for the user   This can release temporary disabled user\n      tags:\n        - Attack Detection\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                additionalProperties: true\n                type: object\n          description: success\n      summary: Get status of a username in brute force detection\n      tags:\n        - Attack Detection\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/authentication/authenticator-providers\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  additionalProperties: true\n                  type: object\n                type: array\n          description: success\n      summary: Get authenticator providers   Returns a list of authenticator providers.\n      tags:\n        - Authentication Management\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/authentication/client-authenticator-providers\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  additionalProperties: true\n                  type: object\n                type: array\n          description: success\n      summary: Get client authenticator providers   Returns a list of client authenticator providers.\n      tags:\n        - Authentication Management\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/authentication/config-description/{providerId}\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthenticatorConfigInfoRepresentation\"\n          description: success\n      summary: Get authenticator providerâ€™s configuration description\n      tags:\n        - Authentication Management\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: providerId\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/authentication/config/{id}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete authenticator configuration\n      tags:\n        - Authentication Management\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthenticatorConfigRepresentation\"\n          description: success\n      summary: Get authenticator configuration\n      tags:\n        - Authentication Management\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Configuration id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AuthenticatorConfigRepresentation\"\n        description: JSON describing new state of authenticator configuration\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update authenticator configuration\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/executions\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AuthenticationExecutionRepresentation\"\n        description: JSON model describing authentication execution\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add new authentication execution\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/executions/{executionId}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete execution\n      tags:\n        - Authentication Management\n    get:\n      responses:\n        2XX:\n          description: success\n      summary: Get Single Execution\n      tags:\n        - Authentication Management\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Execution id\n        in: path\n        name: executionId\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/authentication/executions/{executionId}/config\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Execution id\n        in: path\n        name: executionId\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AuthenticatorConfigRepresentation\"\n        description: JSON with new configuration\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update execution with new configuration\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/executions/{executionId}/lower-priority\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Execution id\n        in: path\n        name: executionId\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          description: success\n      summary: Lower executionâ€™s priority\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/executions/{executionId}/raise-priority\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Execution id\n        in: path\n        name: executionId\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          description: success\n      summary: Raise executionâ€™s priority\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/flows\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/AuthenticationFlowRepresentation\"\n                type: array\n          description: success\n      summary: Get authentication flows   Returns a list of authentication flows.\n      tags:\n        - Authentication Management\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AuthenticationFlowRepresentation\"\n        description: Authentication flow representation\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Create a new authentication flow\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/flows/{flowAlias}/copy\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Name of the existing authentication flow\n        in: path\n        name: flowAlias\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: true\n              type: object\n        description: JSON containing 'newName' attribute\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Copy existing authentication flow under a new name   The new name is given as 'newName' attribute of the passed JSON object\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/flows/{flowAlias}/executions\":\n    get:\n      responses:\n        2XX:\n          description: success\n      summary: Get authentication executions for a flow\n      tags:\n        - Authentication Management\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Flow alias\n        in: path\n        name: flowAlias\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AuthenticationExecutionInfoRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update authentication executions of a flow\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/flows/{flowAlias}/executions/execution\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Alias of parent flow\n        in: path\n        name: flowAlias\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: true\n              type: object\n        description: New execution JSON data containing 'provider' attribute\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add new authentication execution to a flow\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/flows/{flowAlias}/executions/flow\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Alias of parent authentication flow\n        in: path\n        name: flowAlias\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: true\n              type: object\n        description: New authentication flow / execution JSON data containing 'alias', 'type', 'provider', and 'description' attributes\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add new flow with new execution to existing flow\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/flows/{id}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete an authentication flow\n      tags:\n        - Authentication Management\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthenticationFlowRepresentation\"\n          description: success\n      summary: Get authentication flow for id\n      tags:\n        - Authentication Management\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Flow id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AuthenticationFlowRepresentation\"\n        description: Authentication flow representation\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update an authentication flow\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/form-action-providers\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  additionalProperties: true\n                  type: object\n                type: array\n          description: success\n      summary: Get form action providers   Returns a list of form action providers.\n      tags:\n        - Authentication Management\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/authentication/form-providers\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  additionalProperties: true\n                  type: object\n                type: array\n          description: success\n      summary: Get form providers   Returns a list of form providers.\n      tags:\n        - Authentication Management\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/authentication/per-client-config-description\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                additionalProperties: true\n                type: object\n          description: success\n      summary: Get configuration descriptions for all clients\n      tags:\n        - Authentication Management\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/authentication/register-required-action\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: true\n              type: object\n        description: JSON containing 'providerId', and 'name' attributes.\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Register a new required actions\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/required-actions\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RequiredActionProviderRepresentation\"\n                type: array\n          description: success\n      summary: Get required actions   Returns a list of required actions.\n      tags:\n        - Authentication Management\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/authentication/required-actions/{alias}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete required action\n      tags:\n        - Authentication Management\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequiredActionProviderRepresentation\"\n          description: success\n      summary: Get required action for alias\n      tags:\n        - Authentication Management\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Alias of required action\n        in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RequiredActionProviderRepresentation\"\n        description: JSON describing new state of required action\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update required action\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/required-actions/{alias}/lower-priority\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Alias of required action\n        in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          description: success\n      summary: Lower required actionâ€™s priority\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/required-actions/{alias}/raise-priority\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Alias of required action\n        in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          description: success\n      summary: Raise required actionâ€™s priority\n      tags:\n        - Authentication Management\n  \"/{realm}/authentication/unregistered-required-actions\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  additionalProperties: true\n                  type: object\n                type: array\n          description: success\n      summary: Get unregistered required actions   Returns a list of unregistered required actions.\n      tags:\n        - Authentication Management\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clear-keys-cache\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          description: success\n      summary: Clear cache of external public keys (Public keys of clients or Identity providers)\n      tags:\n        - Realms Admin\n  \"/{realm}/clear-realm-cache\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          description: success\n      summary: Clear realm cache\n      tags:\n        - Realms Admin\n  \"/{realm}/clear-user-cache\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          description: success\n      summary: Clear user cache\n      tags:\n        - Realms Admin\n  \"/{realm}/client-description-converter\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n        required: true\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClientRepresentation\"\n          description: success\n      summary: Base path for importing clients under this realm.\n      tags:\n        - Realms Admin\n  \"/{realm}/client-registration-policy/providers\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ComponentTypeRepresentation\"\n                type: array\n          description: success\n      summary: Base path for retrieve providers with the configProperties properly filled\n      tags:\n        - Client Registration Policy\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/client-scopes\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ClientScopeRepresentation\"\n                type: array\n          description: success\n      summary: Get client scopes belonging to the realm   Returns a list of client scopes belonging to the realm\n      tags:\n        - Client Scopes\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ClientScopeRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Create a new client scope   Client Scopeâ€™s name must be unique!\n      tags:\n        - Client Scopes\n  \"/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete the mapper\n      tags:\n        - Protocol Mappers\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n          description: success\n      summary: Get mapper by id\n      tags:\n        - Protocol Mappers\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id1\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id2\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update the mapper\n      tags:\n        - Protocol Mappers\n  \"/{realm}/client-scopes/{id}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete the client scope\n      tags:\n        - Client Scopes\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClientScopeRepresentation\"\n          description: success\n      summary: Get representation of the client scope\n      tags:\n        - Client Scopes\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client scope (not name)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ClientScopeRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update the client scope\n      tags:\n        - Client Scopes\n  \"/{realm}/client-scopes/{id}/protocol-mappers/add-models\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client scope (not name)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Create multiple mappers\n      tags:\n        - Protocol Mappers\n  \"/{realm}/client-scopes/{id}/protocol-mappers/models\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n                type: array\n          description: success\n      summary: Get mappers\n      tags:\n        - Protocol Mappers\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client scope (not name)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Create a mapper\n      tags:\n        - Protocol Mappers\n  \"/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n                type: array\n          description: success\n      summary: Get mappers by name for a specific protocol\n      tags:\n        - Protocol Mappers\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client scope (not name)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: protocol\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/client-scopes/{id}/scope-mappings\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MappingsRepresentation\"\n          description: success\n      summary: Get all scope mappings for the client\n      tags:\n        - Scope Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client scope (not name)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/client-scopes/{id}/scope-mappings/clients/{client}\":\n    delete:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Remove client-level roles from the clientâ€™s scope.\n      tags:\n        - Scope Mappings\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get the roles associated with a clientâ€™s scope   Returns roles for the client.\n      tags:\n        - Scope Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client scope (not name)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add client-level roles to the clientâ€™s scope\n      tags:\n        - Scope Mappings\n  \"/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: The available client-level roles   Returns the roles for the client that can be associated with the clientâ€™s scope\n      tags:\n        - Scope Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client scope (not name)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get effective client roles   Returns the roles for the client that are associated with the clientâ€™s scope.\n      tags:\n        - Scope Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client scope (not name)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/client-scopes/{id}/scope-mappings/realm\":\n    delete:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Remove a set of realm-level roles from the clientâ€™s scope\n      tags:\n        - Scope Mappings\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get realm-level roles associated with the clientâ€™s scope\n      tags:\n        - Scope Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client scope (not name)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add a set of realm-level roles to the clientâ€™s scope\n      tags:\n        - Scope Mappings\n  \"/{realm}/client-scopes/{id}/scope-mappings/realm/available\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get realm-level roles that are available to attach to this clientâ€™s scope\n      tags:\n        - Scope Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client scope (not name)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/client-scopes/{id}/scope-mappings/realm/composite\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get effective realm-level roles associated with the clientâ€™s scope   What this does is recurse  any composite roles associated with the clientâ€™s scope and adds the roles to this lists.\n      tags:\n        - Scope Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client scope (not name)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/client-session-stats\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  additionalProperties: true\n                  type: object\n                type: array\n          description: success\n      summary: Get client session stats   Returns a JSON map.\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients\":\n    get:\n      parameters:\n        - description: filter by clientId\n          in: query\n          name: clientId\n          schema:\n            type: string\n          style: form\n        - description: the first result\n          in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: the max results to return\n          in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: whether this is a search query or a getClientById query\n          in: query\n          name: search\n          schema:\n            type: boolean\n          style: form\n        - description: filter clients that cannot be viewed in full by admin\n          in: query\n          name: viewableOnly\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ClientRepresentation\"\n                type: array\n          description: success\n      summary: Get clients belonging to the realm   Returns a list of clients belonging to the realm\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ClientRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Create a new client   Clientâ€™s client_id must be unique!\n      tags:\n        - Clients\n  \"/{realm}/clients-initial-access\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ClientInitialAccessPresentation\"\n                type: array\n          description: success\n      tags:\n        - Client Initial Access\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ClientInitialAccessCreatePresentation\"\n        required: true\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClientInitialAccessPresentation\"\n          description: success\n      summary: Create a new initial access token.\n      tags:\n        - Client Initial Access\n  \"/{realm}/clients-initial-access/{id}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Client Initial Access\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id1}/protocol-mappers/models/{id2}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete the mapper\n      tags:\n        - Protocol Mappers\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n          description: success\n      summary: Get mapper by id\n      tags:\n        - Protocol Mappers\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id1\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id2\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update the mapper\n      tags:\n        - Protocol Mappers\n  \"/{realm}/clients/{id}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete the client\n      tags:\n        - Clients\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClientRepresentation\"\n          description: success\n      summary: Get representation of the client\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ClientRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update the client\n      tags:\n        - Clients\n  \"/{realm}/clients/{id}/certificates/{attr}\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CertificateRepresentation\"\n          description: success\n      summary: Get key info\n      tags:\n        - Client Attribute Certificate\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: attr\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/certificates/{attr}/download\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: attr\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/KeyStoreConfig\"\n        description: Keystore configuration as JSON\n        required: true\n      responses:\n        2XX:\n          content:\n            application/octet-stream:\n              schema:\n                format: byte\n                type: string\n          description: success\n      summary: Get a keystore file for the client, containing private key and public certificate\n      tags:\n        - Client Attribute Certificate\n  \"/{realm}/clients/{id}/certificates/{attr}/generate\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: attr\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CertificateRepresentation\"\n          description: success\n      summary: Generate a new certificate with new key pair\n      tags:\n        - Client Attribute Certificate\n  \"/{realm}/clients/{id}/certificates/{attr}/generate-and-download\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: attr\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/KeyStoreConfig\"\n        description: Keystore configuration as JSON\n        required: true\n      responses:\n        2XX:\n          content:\n            application/octet-stream:\n              schema:\n                format: byte\n                type: string\n          description: success\n      summary: Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.\n      tags:\n        - Client Attribute Certificate\n  \"/{realm}/clients/{id}/certificates/{attr}/upload\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: attr\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CertificateRepresentation\"\n          description: success\n      summary: Upload certificate and eventually private key\n      tags:\n        - Client Attribute Certificate\n  \"/{realm}/clients/{id}/certificates/{attr}/upload-certificate\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: attr\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CertificateRepresentation\"\n          description: success\n      summary: Upload only certificate, not private key\n      tags:\n        - Client Attribute Certificate\n  \"/{realm}/clients/{id}/client-secret\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CredentialRepresentation\"\n          description: success\n      summary: Get the client secret\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CredentialRepresentation\"\n          description: success\n      summary: Generate a new secret for the client\n      tags:\n        - Clients\n  \"/{realm}/clients/{id}/default-client-scopes\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ClientScopeRepresentation\"\n                type: array\n          description: success\n      summary: Get default client scopes.\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/default-client-scopes/{clientScopeId}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: clientScopeId\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Clients\n  \"/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token\":\n    get:\n      parameters:\n        - in: query\n          name: scope\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: userId\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccessToken\"\n          description: success\n      summary: Create JSON with payload of example access token\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/evaluate-scopes/protocol-mappers\":\n    get:\n      parameters:\n        - in: query\n          name: scope\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ClientScopeEvaluateResource-ProtocolMapperEvaluationRepresentation\"\n                type: array\n          description: success\n      summary: Return list of all protocol mappers, which will be used when generating tokens issued for particular client.\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted\":\n    get:\n      parameters:\n        - in: query\n          name: scope\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: either realm name OR client UUID\n        in: path\n        name: roleContainerId\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted\":\n    get:\n      parameters:\n        - in: query\n          name: scope\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get roles, which this client doesnâ€™t have scope for and canâ€™t have them in the accessToken issued for him.\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: either realm name OR client UUID\n        in: path\n        name: roleContainerId\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/installation/providers/{providerId}\":\n    get:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: providerId\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/management/permissions\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ManagementPermissionReference\"\n          description: success\n      summary: Return object stating whether client Authorization permissions have been initialized or not and a reference\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ManagementPermissionReference\"\n        required: true\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ManagementPermissionReference\"\n          description: success\n      summary: Return object stating whether client Authorization permissions have been initialized or not and a reference\n      tags:\n        - Clients\n  \"/{realm}/clients/{id}/nodes\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: true\n              type: object\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Register a cluster node with the client   Manually register cluster node to this client - usually itâ€™s not needed to call this directly as adapter should handle  by sending registration request to Keycloak\n      tags:\n        - Clients\n  \"/{realm}/clients/{id}/nodes/{node}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Unregister a cluster node from the client\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: node\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/offline-session-count\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                additionalProperties: true\n                type: object\n          description: success\n      summary: 'Get application offline session count   Returns a number of offline user sessions associated with this client   {      \"count\": number  }'\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/offline-sessions\":\n    get:\n      parameters:\n        - description: Paging offset\n          in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: Maximum results size (defaults to 100)\n          in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/UserSessionRepresentation\"\n                type: array\n          description: success\n      summary: Get offline sessions for client   Returns a list of offline user sessions associated with this client\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/optional-client-scopes\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ClientScopeRepresentation\"\n                type: array\n          description: success\n      summary: Get optional client scopes.\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: clientScopeId\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Clients\n  \"/{realm}/clients/{id}/protocol-mappers/add-models\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Create multiple mappers\n      tags:\n        - Protocol Mappers\n  \"/{realm}/clients/{id}/protocol-mappers/models\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n                type: array\n          description: success\n      summary: Get mappers\n      tags:\n        - Protocol Mappers\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Create a mapper\n      tags:\n        - Protocol Mappers\n  \"/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n                type: array\n          description: success\n      summary: Get mappers by name for a specific protocol\n      tags:\n        - Protocol Mappers\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: protocol\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/push-revocation\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GlobalRequestResult\"\n          description: success\n      summary: Push the clientâ€™s revocation policy to its admin URL   If the client has an admin URL, push revocation policy to it.\n      tags:\n        - Clients\n  \"/{realm}/clients/{id}/registration-access-token\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClientRepresentation\"\n          description: success\n      summary: Generate a new registration access token for the client\n      tags:\n        - Clients\n  \"/{realm}/clients/{id}/roles\":\n    get:\n      parameters:\n        - in: query\n          name: briefRepresentation\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - in: query\n          name: search\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get all roles for the realm or client\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RoleRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Create a new role for the realm or client\n      tags:\n        - Roles\n  \"/{realm}/clients/{id}/roles/{role-name}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete a role by name\n      tags:\n        - Roles\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n          description: success\n      summary: Get a role by name\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: roleâ€™s name (not id!)\n        in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RoleRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update a role by name\n      tags:\n        - Roles\n  \"/{realm}/clients/{id}/roles/{role-name}/composites\":\n    delete:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        description: roles to remove\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Remove roles from the roleâ€™s composite\n      tags:\n        - Roles\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get composites of the role\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: roleâ€™s name (not id!)\n        in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add a composite to the role\n      tags:\n        - Roles\n  \"/{realm}/clients/{id}/roles/{role-name}/composites/clients/{client}\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: An app-level roles for the specified app for the roleâ€™s composite\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: roleâ€™s name (not id!)\n        in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/roles/{role-name}/composites/realm\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get realm-level roles of the roleâ€™s composite\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: roleâ€™s name (not id!)\n        in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/roles/{role-name}/groups\":\n    get:\n      parameters:\n        - description: if false, return a full representation of the GroupRepresentation objects\n          in: query\n          name: briefRepresentation\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/GroupRepresentation\"\n                type: array\n          description: success\n      summary: Return List of Groups that have the specified role name\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/roles/{role-name}/management/permissions\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ManagementPermissionReference\"\n          description: success\n      summary: Return object stating whether role Authoirzation permissions have been initialized or not and a reference\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ManagementPermissionReference\"\n        required: true\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ManagementPermissionReference\"\n          description: success\n      summary: Return object stating whether role Authoirzation permissions have been initialized or not and a reference\n      tags:\n        - Roles\n  \"/{realm}/clients/{id}/roles/{role-name}/users\":\n    get:\n      parameters:\n        - in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/UserRepresentation\"\n                type: array\n          description: success\n      summary: Return List of Users that have the specified role name\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/scope-mappings\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MappingsRepresentation\"\n          description: success\n      summary: Get all scope mappings for the client\n      tags:\n        - Scope Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/scope-mappings/clients/{client}\":\n    delete:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Remove client-level roles from the clientâ€™s scope.\n      tags:\n        - Scope Mappings\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get the roles associated with a clientâ€™s scope   Returns roles for the client.\n      tags:\n        - Scope Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add client-level roles to the clientâ€™s scope\n      tags:\n        - Scope Mappings\n  \"/{realm}/clients/{id}/scope-mappings/clients/{client}/available\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: The available client-level roles   Returns the roles for the client that can be associated with the clientâ€™s scope\n      tags:\n        - Scope Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/scope-mappings/clients/{client}/composite\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get effective client roles   Returns the roles for the client that are associated with the clientâ€™s scope.\n      tags:\n        - Scope Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/scope-mappings/realm\":\n    delete:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Remove a set of realm-level roles from the clientâ€™s scope\n      tags:\n        - Scope Mappings\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get realm-level roles associated with the clientâ€™s scope\n      tags:\n        - Scope Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add a set of realm-level roles to the clientâ€™s scope\n      tags:\n        - Scope Mappings\n  \"/{realm}/clients/{id}/scope-mappings/realm/available\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get realm-level roles that are available to attach to this clientâ€™s scope\n      tags:\n        - Scope Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/scope-mappings/realm/composite\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get effective realm-level roles associated with the clientâ€™s scope   What this does is recurse  any composite roles associated with the clientâ€™s scope and adds the roles to this lists.\n      tags:\n        - Scope Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/service-account-user\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserRepresentation\"\n          description: success\n      summary: Get a user dedicated to the service account\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/session-count\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                additionalProperties: true\n                type: object\n          description: success\n      summary: 'Get application session count   Returns a number of user sessions associated with this client   {      \"count\": number  }'\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/test-nodes-available\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GlobalRequestResult\"\n          description: success\n      summary: Test if registered cluster nodes are available   Tests availability by sending 'ping' request to all cluster nodes.\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/clients/{id}/user-sessions\":\n    get:\n      parameters:\n        - description: Paging offset\n          in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: Maximum results size (defaults to 100)\n          in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/UserSessionRepresentation\"\n                type: array\n          description: success\n      summary: Get user sessions for client   Returns a list of user sessions associated with this client\n      tags:\n        - Clients\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of client (not client-id)\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/components\":\n    get:\n      parameters:\n        - in: query\n          name: name\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: parent\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: type\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ComponentRepresentation\"\n                type: array\n          description: success\n      tags:\n        - Component\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ComponentRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Component\n  \"/{realm}/components/{id}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Component\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ComponentRepresentation\"\n          description: success\n      tags:\n        - Component\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ComponentRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Component\n  \"/{realm}/components/{id}/sub-component-types\":\n    get:\n      parameters:\n        - in: query\n          name: type\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ComponentTypeRepresentation\"\n                type: array\n          description: success\n      summary: List of subcomponent types that are available to configure for a particular parent component.\n      tags:\n        - Component\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/credential-registrators\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: success\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/default-default-client-scopes\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ClientScopeRepresentation\"\n                type: array\n          description: success\n      summary: Get realm default client scopes.\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/default-default-client-scopes/{clientScopeId}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: clientScopeId\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Realms Admin\n  \"/{realm}/default-groups\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/GroupRepresentation\"\n                type: array\n          description: success\n      summary: Get group hierarchy.\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/default-groups/{groupId}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Realms Admin\n  \"/{realm}/default-optional-client-scopes\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ClientScopeRepresentation\"\n                type: array\n          description: success\n      summary: Get realm optional client scopes.\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/default-optional-client-scopes/{clientScopeId}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: clientScopeId\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Realms Admin\n  \"/{realm}/events\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete all events\n      tags:\n        - Realms Admin\n    get:\n      parameters:\n        - description: App or oauth client name\n          in: query\n          name: client\n          schema:\n            type: string\n          style: form\n        - description: From date\n          in: query\n          name: dateFrom\n          schema:\n            type: string\n          style: form\n        - description: To date\n          in: query\n          name: dateTo\n          schema:\n            type: string\n          style: form\n        - description: Paging offset\n          in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: IP address\n          in: query\n          name: ipAddress\n          schema:\n            type: string\n          style: form\n        - description: Maximum results size (defaults to 100)\n          in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: The types of events to return\n          in: query\n          name: type\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n        - description: User id\n          in: query\n          name: user\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/EventRepresentation\"\n                type: array\n          description: success\n      summary: Get events   Returns all events, or filters them based on URL query parameters listed here\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/events/config\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RealmEventsConfigRepresentation\"\n          description: success\n      summary: Get the events provider configuration   Returns JSON object with events provider configuration\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RealmEventsConfigRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update the events provider   Change the events provider and/or its configuration\n      tags:\n        - Realms Admin\n  \"/{realm}/group-by-path/{path}\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GroupRepresentation\"\n          description: success\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: path\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/groups\":\n    get:\n      parameters:\n        - in: query\n          name: briefRepresentation\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - in: query\n          name: search\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/GroupRepresentation\"\n                type: array\n          description: success\n      summary: Get group hierarchy.\n      tags:\n        - Groups\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GroupRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: create or add a top level realm groupSet or create child.\n      tags:\n        - Groups\n  \"/{realm}/groups/count\":\n    get:\n      parameters:\n        - in: query\n          name: search\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: top\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                additionalProperties: true\n                type: object\n          description: success\n      summary: Returns the groups counts.\n      tags:\n        - Groups\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/groups/{id}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Groups\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GroupRepresentation\"\n          description: success\n      tags:\n        - Groups\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GroupRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update group, ignores subgroups.\n      tags:\n        - Groups\n  \"/{realm}/groups/{id}/children\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GroupRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Set or create child.\n      tags:\n        - Groups\n  \"/{realm}/groups/{id}/management/permissions\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ManagementPermissionReference\"\n          description: success\n      summary: Return object stating whether client Authorization permissions have been initialized or not and a reference\n      tags:\n        - Groups\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ManagementPermissionReference\"\n        required: true\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ManagementPermissionReference\"\n          description: success\n      summary: Return object stating whether client Authorization permissions have been initialized or not and a reference\n      tags:\n        - Groups\n  \"/{realm}/groups/{id}/members\":\n    get:\n      parameters:\n        - description: |-\n            Only return basic information (only guaranteed to return id, username, created, first and last name,\n             email, enabled state, email verification state, federation link, and access.\n             Note that it means that namely user attributes, required actions, and not before are not returned.)\n          in: query\n          name: briefRepresentation\n          schema:\n            type: boolean\n          style: form\n        - description: Pagination offset\n          in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: Maximum results size (defaults to 100)\n          in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/UserRepresentation\"\n                type: array\n          description: success\n      summary: Get users   Returns a list of users, filtered according to query parameters\n      tags:\n        - Groups\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/groups/{id}/role-mappings\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MappingsRepresentation\"\n          description: success\n      summary: Get role mappings\n      tags:\n        - Role Mapper\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/groups/{id}/role-mappings/clients/{client}\":\n    delete:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Delete client-level roles from user role mapping\n      tags:\n        - Client Role Mappings\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get client-level role mappings for the user, and the app\n      tags:\n        - Client Role Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add client-level roles to the user role mapping\n      tags:\n        - Client Role Mappings\n  \"/{realm}/groups/{id}/role-mappings/clients/{client}/available\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get available client-level roles that can be mapped to the user\n      tags:\n        - Client Role Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/groups/{id}/role-mappings/clients/{client}/composite\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get effective client-level role mappings   This recurses any composite roles\n      tags:\n        - Client Role Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/groups/{id}/role-mappings/realm\":\n    delete:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Delete realm-level role mappings\n      tags:\n        - Role Mapper\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get realm-level role mappings\n      tags:\n        - Role Mapper\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        description: Roles to add\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add realm-level role mappings to the user\n      tags:\n        - Role Mapper\n  \"/{realm}/groups/{id}/role-mappings/realm/available\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get realm-level roles that can be mapped\n      tags:\n        - Role Mapper\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/groups/{id}/role-mappings/realm/composite\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get effective realm-level role mappings   This will recurse all composite roles to get the result.\n      tags:\n        - Role Mapper\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/identity-provider/import-config\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                additionalProperties: true\n                type: object\n          description: success\n      summary: Import identity provider from uploaded JSON file\n      tags:\n        - Identity Providers\n  \"/{realm}/identity-provider/instances\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/IdentityProviderRepresentation\"\n                type: array\n          description: success\n      summary: Get identity providers\n      tags:\n        - Identity Providers\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IdentityProviderRepresentation\"\n        description: JSON body\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Create a new identity provider\n      tags:\n        - Identity Providers\n  \"/{realm}/identity-provider/instances/{alias}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete the identity provider\n      tags:\n        - Identity Providers\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IdentityProviderRepresentation\"\n          description: success\n      summary: Get the identity provider\n      tags:\n        - Identity Providers\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IdentityProviderRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update the identity provider\n      tags:\n        - Identity Providers\n  \"/{realm}/identity-provider/instances/{alias}/export\":\n    get:\n      parameters:\n        - description: Format to use\n          in: query\n          name: format\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n      summary: Export public broker configuration for identity provider\n      tags:\n        - Identity Providers\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/identity-provider/instances/{alias}/management/permissions\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ManagementPermissionReference\"\n          description: success\n      summary: Return object stating whether client Authorization permissions have been initialized or not and a reference\n      tags:\n        - Identity Providers\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ManagementPermissionReference\"\n        required: true\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ManagementPermissionReference\"\n          description: success\n      summary: Return object stating whether client Authorization permissions have been initialized or not and a reference\n      tags:\n        - Identity Providers\n  \"/{realm}/identity-provider/instances/{alias}/mapper-types\":\n    get:\n      responses:\n        2XX:\n          description: success\n      summary: Get mapper types for identity provider\n      tags:\n        - Identity Providers\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/identity-provider/instances/{alias}/mappers\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/IdentityProviderMapperRepresentation\"\n                type: array\n          description: success\n      summary: Get mappers for identity provider\n      tags:\n        - Identity Providers\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IdentityProviderMapperRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add a mapper to identity provider\n      tags:\n        - Identity Providers\n  \"/{realm}/identity-provider/instances/{alias}/mappers/{id}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete a mapper for the identity provider\n      tags:\n        - Identity Providers\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IdentityProviderMapperRepresentation\"\n          description: success\n      summary: Get mapper by id for the identity provider\n      tags:\n        - Identity Providers\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: alias\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Mapper id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/IdentityProviderMapperRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update a mapper for the identity provider\n      tags:\n        - Identity Providers\n  \"/{realm}/identity-provider/providers/{provider_id}\":\n    get:\n      responses:\n        2XX:\n          description: success\n      summary: Get identity providers\n      tags:\n        - Identity Providers\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Provider id\n        in: path\n        name: provider_id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/keys\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/KeysMetadataRepresentation\"\n          description: success\n      tags:\n        - Key\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/logout-all\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          description: success\n      summary: Removes all user sessions.\n      tags:\n        - Realms Admin\n  \"/{realm}/partial-export\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      parameters:\n        - in: query\n          name: exportClients\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: exportGroupsAndRoles\n          schema:\n            type: boolean\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RealmRepresentation\"\n          description: success\n      summary: Partial export of existing realm into a JSON file.\n      tags:\n        - Realms Admin\n  \"/{realm}/partialImport\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PartialImportRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Partial import from a JSON file to an existing realm.\n      tags:\n        - Realms Admin\n  \"/{realm}/push-revocation\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          description: success\n      summary: Push the realmâ€™s revocation policy to any client that has an admin url associated with it.\n      tags:\n        - Realms Admin\n  \"/{realm}/roles\":\n    get:\n      parameters:\n        - in: query\n          name: briefRepresentation\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - in: query\n          name: search\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get all roles for the realm or client\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RoleRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Create a new role for the realm or client\n      tags:\n        - Roles\n  \"/{realm}/roles-by-id/{role-id}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete the role\n      tags:\n        - Roles (by ID)\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n          description: success\n      summary: Get a specific roleâ€™s representation\n      tags:\n        - Roles (by ID)\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: id of role\n        in: path\n        name: role-id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RoleRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update the role\n      tags:\n        - Roles (by ID)\n  \"/{realm}/roles-by-id/{role-id}/composites\":\n    delete:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        description: A set of roles to be removed\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Remove a set of roles from the roleâ€™s composite\n      tags:\n        - Roles (by ID)\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get roleâ€™s children   Returns a set of roleâ€™s children provided the role is a composite.\n      tags:\n        - Roles (by ID)\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Role id\n        in: path\n        name: role-id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Make the role a composite role by associating some child roles\n      tags:\n        - Roles (by ID)\n  \"/{realm}/roles-by-id/{role-id}/composites/clients/{client}\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get client-level roles for the client that are in the roleâ€™s composite\n      tags:\n        - Roles (by ID)\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/roles-by-id/{role-id}/composites/realm\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get realm-level roles that are in the roleâ€™s composite\n      tags:\n        - Roles (by ID)\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/roles-by-id/{role-id}/management/permissions\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ManagementPermissionReference\"\n          description: success\n      summary: Return object stating whether role Authoirzation permissions have been initialized or not and a reference\n      tags:\n        - Roles (by ID)\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ManagementPermissionReference\"\n        required: true\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ManagementPermissionReference\"\n          description: success\n      summary: Return object stating whether role Authoirzation permissions have been initialized or not and a reference\n      tags:\n        - Roles (by ID)\n  \"/{realm}/roles/{role-name}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete a role by name\n      tags:\n        - Roles\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n          description: success\n      summary: Get a role by name\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: roleâ€™s name (not id!)\n        in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RoleRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update a role by name\n      tags:\n        - Roles\n  \"/{realm}/roles/{role-name}/composites\":\n    delete:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        description: roles to remove\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Remove roles from the roleâ€™s composite\n      tags:\n        - Roles\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get composites of the role\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: roleâ€™s name (not id!)\n        in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add a composite to the role\n      tags:\n        - Roles\n  \"/{realm}/roles/{role-name}/composites/clients/{client}\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: An app-level roles for the specified app for the roleâ€™s composite\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: roleâ€™s name (not id!)\n        in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/roles/{role-name}/composites/realm\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get realm-level roles of the roleâ€™s composite\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: roleâ€™s name (not id!)\n        in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/roles/{role-name}/groups\":\n    get:\n      parameters:\n        - description: if false, return a full representation of the GroupRepresentation objects\n          in: query\n          name: briefRepresentation\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/GroupRepresentation\"\n                type: array\n          description: success\n      summary: Return List of Groups that have the specified role name\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/roles/{role-name}/management/permissions\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ManagementPermissionReference\"\n          description: success\n      summary: Return object stating whether role Authoirzation permissions have been initialized or not and a reference\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ManagementPermissionReference\"\n        required: true\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ManagementPermissionReference\"\n          description: success\n      summary: Return object stating whether role Authoirzation permissions have been initialized or not and a reference\n      tags:\n        - Roles\n  \"/{realm}/roles/{role-name}/users\":\n    get:\n      parameters:\n        - in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/UserRepresentation\"\n                type: array\n          description: success\n      summary: Return List of Users that have the specified role name\n      tags:\n        - Roles\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: role-name\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/sessions/{session}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Remove a specific user session.\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: session\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/testLDAPConnection\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TestLdapConnectionRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Test LDAP connection\n      tags:\n        - Realms Admin\n  \"/{realm}/testSMTPConnection\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: true\n              type: object\n        required: true\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Realms Admin\n  \"/{realm}/user-storage/{id}/name\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                additionalProperties: true\n                type: object\n          description: success\n      summary: Need this for admin console to display simple name of provider when displaying user detail   KEYCLOAK-4328\n      tags:\n        - User Storage Provider\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/user-storage/{id}/remove-imported-users\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          description: success\n      summary: Remove imported users\n      tags:\n        - User Storage Provider\n  \"/{realm}/user-storage/{id}/sync\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      parameters:\n        - in: query\n          name: action\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SynchronizationResult\"\n          description: success\n      summary: Trigger sync of users   Action can be \"triggerFullSync\" or \"triggerChangedUsersSync\"\n      tags:\n        - User Storage Provider\n  \"/{realm}/user-storage/{id}/unlink-users\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          description: success\n      summary: Unlink imported users from a storage provider\n      tags:\n        - User Storage Provider\n  \"/{realm}/user-storage/{parentId}/mappers/{id}/sync\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: parentId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      parameters:\n        - in: query\n          name: direction\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SynchronizationResult\"\n          description: success\n      summary: Trigger sync of mapper data related to ldap mapper (roles, groups, â€¦â€‹)   direction is \"fedToKeycloak\" or \"keycloakToFed\"\n      tags:\n        - User Storage Provider\n  \"/{realm}/users\":\n    get:\n      parameters:\n        - in: query\n          name: briefRepresentation\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: email\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - in: query\n          name: firstName\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: lastName\n          schema:\n            type: string\n          style: form\n        - description: Maximum results size (defaults to 100)\n          in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: A String contained in username, first or last name, or email\n          in: query\n          name: search\n          schema:\n            type: string\n          style: form\n        - in: query\n          name: username\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/UserRepresentation\"\n                type: array\n          description: success\n      summary: Get users   Returns a list of users, filtered according to query parameters\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Create a new user   Username must be unique.\n      tags:\n        - Users\n  \"/{realm}/users-management-permissions\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ManagementPermissionReference\"\n          description: success\n      tags:\n        - Realms Admin\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ManagementPermissionReference\"\n        required: true\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ManagementPermissionReference\"\n          description: success\n      tags:\n        - Realms Admin\n  \"/{realm}/users/count\":\n    get:\n      parameters:\n        - description: email filter\n          in: query\n          name: email\n          schema:\n            type: string\n          style: form\n        - description: first name filter\n          in: query\n          name: firstName\n          schema:\n            type: string\n          style: form\n        - description: last name filter\n          in: query\n          name: lastName\n          schema:\n            type: string\n          style: form\n        - description: arbitrary search string for all the fields below\n          in: query\n          name: search\n          schema:\n            type: string\n          style: form\n        - description: username filter\n          in: query\n          name: username\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                format: int32\n                type: integer\n          description: success\n      summary: Returns the number of users that match the given criteria.\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Delete the user\n      tags:\n        - Users\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserRepresentation\"\n          description: success\n      summary: Get representation of the user\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update the user\n      tags:\n        - Users\n  \"/{realm}/users/{id}/configured-user-storage-credential-types\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: success\n      summary: Return credential types, which are provided by the user storage where user is stored.\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}/consents\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  additionalProperties: true\n                  type: object\n                type: array\n          description: success\n      summary: Get consents granted by the user\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}/consents/{client}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Revoke consent and offline tokens for particular client from user\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Client id\n        in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}/credentials\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/CredentialRepresentation\"\n                type: array\n          description: success\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}/credentials/{credentialId}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Remove a credential for a user\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: credentialId\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The credential to move\n        in: path\n        name: credentialId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list.\n        in: path\n        name: newPreviousCredentialId\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          description: success\n      summary: Move a credential to a position behind another credential\n      tags:\n        - Users\n  \"/{realm}/users/{id}/credentials/{credentialId}/moveToFirst\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The credential to move\n        in: path\n        name: credentialId\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          description: success\n      summary: Move a credential to a first position in the credentials list of the user\n      tags:\n        - Users\n  \"/{realm}/users/{id}/credentials/{credentialId}/userLabel\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: credentialId\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Update a credential label for a user\n      tags:\n        - Users\n  \"/{realm}/users/{id}/disable-credential-types\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                type: string\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Disable all credentials for a user of a specific type\n      tags:\n        - Users\n  \"/{realm}/users/{id}/execute-actions-email\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      parameters:\n        - description: Client id\n          in: query\n          name: client_id\n          schema:\n            type: string\n          style: form\n        - description: Number of seconds after which the generated token expires\n          in: query\n          name: lifespan\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - description: Redirect uri\n          in: query\n          name: redirect_uri\n          schema:\n            type: string\n          style: form\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                type: string\n              type: array\n        description: required actions the user needs to complete\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Send a update account email to the user   An email contains a link the user can click to perform a set of required actions.\n      tags:\n        - Users\n  \"/{realm}/users/{id}/federated-identity\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/FederatedIdentityRepresentation\"\n                type: array\n          description: success\n      summary: Get social logins associated with the user\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}/federated-identity/{provider}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      summary: Remove a social login provider from user\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Social login provider id\n        in: path\n        name: provider\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FederatedIdentityRepresentation\"\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add a social login provider to the user\n      tags:\n        - Users\n  \"/{realm}/users/{id}/groups\":\n    get:\n      parameters:\n        - in: query\n          name: briefRepresentation\n          schema:\n            type: boolean\n          style: form\n        - in: query\n          name: first\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - in: query\n          name: max\n          schema:\n            format: int32\n            type: integer\n          style: form\n        - in: query\n          name: search\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/GroupRepresentation\"\n                type: array\n          description: success\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}/groups/count\":\n    get:\n      parameters:\n        - in: query\n          name: search\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                additionalProperties: true\n                type: object\n          description: success\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}/groups/{groupId}\":\n    delete:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      responses:\n        2XX:\n          description: success\n      tags:\n        - Users\n  \"/{realm}/users/{id}/impersonation\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                additionalProperties: true\n                type: object\n          description: success\n      summary: Impersonate the user\n      tags:\n        - Users\n  \"/{realm}/users/{id}/logout\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      responses:\n        2XX:\n          description: success\n      summary: Remove all user sessions associated with the user   Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.\n      tags:\n        - Users\n  \"/{realm}/users/{id}/offline-sessions/{clientId}\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/UserSessionRepresentation\"\n                type: array\n          description: success\n      summary: Get offline sessions associated with the user and client\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: clientId\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}/reset-password\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CredentialRepresentation\"\n        description: The representation must contain a rawPassword with the plain-text password\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Set up a new password for the user.\n      tags:\n        - Users\n  \"/{realm}/users/{id}/role-mappings\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MappingsRepresentation\"\n          description: success\n      summary: Get role mappings\n      tags:\n        - Role Mapper\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}/role-mappings/clients/{client}\":\n    delete:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Delete client-level roles from user role mapping\n      tags:\n        - Client Role Mappings\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get client-level role mappings for the user, and the app\n      tags:\n        - Client Role Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add client-level roles to the user role mapping\n      tags:\n        - Client Role Mappings\n  \"/{realm}/users/{id}/role-mappings/clients/{client}/available\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get available client-level roles that can be mapped to the user\n      tags:\n        - Client Role Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}/role-mappings/clients/{client}/composite\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get effective client-level role mappings   This recurses any composite roles\n      tags:\n        - Client Role Mappings\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - in: path\n        name: client\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}/role-mappings/realm\":\n    delete:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Delete realm-level role mappings\n      tags:\n        - Role Mapper\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get realm-level role mappings\n      tags:\n        - Role Mapper\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/RoleRepresentation\"\n              type: array\n        description: Roles to add\n        required: true\n      responses:\n        2XX:\n          description: success\n      summary: Add realm-level role mappings to the user\n      tags:\n        - Role Mapper\n  \"/{realm}/users/{id}/role-mappings/realm/available\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get realm-level roles that can be mapped\n      tags:\n        - Role Mapper\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}/role-mappings/realm/composite\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/RoleRepresentation\"\n                type: array\n          description: success\n      summary: Get effective realm-level role mappings   This will recurse all composite roles to get the result.\n      tags:\n        - Role Mapper\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n  \"/{realm}/users/{id}/send-verify-email\":\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\n    put:\n      parameters:\n        - description: Client id\n          in: query\n          name: client_id\n          schema:\n            type: string\n          style: form\n        - description: Redirect uri\n          in: query\n          name: redirect_uri\n          schema:\n            type: string\n          style: form\n      responses:\n        2XX:\n          description: success\n      summary: Send an email-verification email to the user   An email contains a link the user can click to verify their email address.\n      tags:\n        - Users\n  \"/{realm}/users/{id}/sessions\":\n    get:\n      responses:\n        2XX:\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/UserSessionRepresentation\"\n                type: array\n          description: success\n      summary: Get sessions associated with the user\n      tags:\n        - Users\n    parameters:\n      - description: realm name (not id!)\n        in: path\n        name: realm\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: User id\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n        style: simple\ncomponents:\n  schemas:\n    AccessToken:\n      properties:\n        acr:\n          type: string\n        address:\n          $ref: \"#/components/schemas/AddressClaimSet\"\n        allowed-origins:\n          items:\n            type: string\n          type: array\n        at_hash:\n          type: string\n        auth_time:\n          format: int64\n          type: integer\n        authorization:\n          $ref: \"#/components/schemas/AccessToken-Authorization\"\n        azp:\n          type: string\n        birthdate:\n          type: string\n        c_hash:\n          type: string\n        category:\n          enum:\n            - INTERNAL\n            - ACCESS\n            - ID\n            - ADMIN\n            - USERINFO\n          type: string\n        claims_locales:\n          type: string\n        cnf:\n          $ref: \"#/components/schemas/AccessToken-CertConf\"\n        email:\n          type: string\n        email_verified:\n          type: boolean\n        exp:\n          format: int64\n          type: integer\n        family_name:\n          type: string\n        gender:\n          type: string\n        given_name:\n          type: string\n        iat:\n          format: int64\n          type: integer\n        iss:\n          type: string\n        jti:\n          type: string\n        locale:\n          type: string\n        middle_name:\n          type: string\n        name:\n          type: string\n        nbf:\n          format: int64\n          type: integer\n        nickname:\n          type: string\n        nonce:\n          type: string\n        otherClaims:\n          additionalProperties: true\n          type: object\n        phone_number:\n          type: string\n        phone_number_verified:\n          type: boolean\n        picture:\n          type: string\n        preferred_username:\n          type: string\n        profile:\n          type: string\n        realm_access:\n          $ref: \"#/components/schemas/AccessToken-Access\"\n        s_hash:\n          type: string\n        scope:\n          type: string\n        session_state:\n          type: string\n        sub:\n          type: string\n        trusted-certs:\n          items:\n            type: string\n          type: array\n        typ:\n          type: string\n        updated_at:\n          format: int64\n          type: integer\n        website:\n          type: string\n        zoneinfo:\n          type: string\n      type: object\n    AccessToken-Access:\n      properties:\n        roles:\n          items:\n            type: string\n          type: array\n        verify_caller:\n          type: boolean\n      type: object\n    AccessToken-Authorization:\n      properties:\n        permissions:\n          items:\n            $ref: \"#/components/schemas/Permission\"\n          type: array\n      type: object\n    AccessToken-CertConf:\n      properties:\n        x5t#S256:\n          type: string\n      type: object\n    AddressClaimSet:\n      properties:\n        country:\n          type: string\n        formatted:\n          type: string\n        locality:\n          type: string\n        postal_code:\n          type: string\n        region:\n          type: string\n        street_address:\n          type: string\n      type: object\n    AdminEventRepresentation:\n      properties:\n        authDetails:\n          $ref: \"#/components/schemas/AuthDetailsRepresentation\"\n        error:\n          type: string\n        operationType:\n          type: string\n        realmId:\n          type: string\n        representation:\n          type: string\n        resourcePath:\n          type: string\n        resourceType:\n          type: string\n        time:\n          format: int64\n          type: integer\n      type: object\n    AuthDetailsRepresentation:\n      properties:\n        clientId:\n          type: string\n        ipAddress:\n          type: string\n        realmId:\n          type: string\n        userId:\n          type: string\n      type: object\n    AuthenticationExecutionExportRepresentation:\n      properties:\n        authenticator:\n          type: string\n        authenticatorConfig:\n          type: string\n        authenticatorFlow:\n          type: boolean\n        autheticatorFlow:\n          type: boolean\n        flowAlias:\n          type: string\n        priority:\n          format: int32\n          type: integer\n        requirement:\n          type: string\n        userSetupAllowed:\n          type: boolean\n      type: object\n    AuthenticationExecutionInfoRepresentation:\n      properties:\n        alias:\n          type: string\n        authenticationConfig:\n          type: string\n        authenticationFlow:\n          type: boolean\n        configurable:\n          type: boolean\n        displayName:\n          type: string\n        flowId:\n          type: string\n        id:\n          type: string\n        index:\n          format: int32\n          type: integer\n        level:\n          format: int32\n          type: integer\n        providerId:\n          type: string\n        requirement:\n          type: string\n        requirementChoices:\n          items:\n            type: string\n          type: array\n      type: object\n    AuthenticationExecutionRepresentation:\n      properties:\n        authenticator:\n          type: string\n        authenticatorConfig:\n          type: string\n        authenticatorFlow:\n          type: boolean\n        autheticatorFlow:\n          type: boolean\n        flowId:\n          type: string\n        id:\n          type: string\n        parentFlow:\n          type: string\n        priority:\n          format: int32\n          type: integer\n        requirement:\n          type: string\n      type: object\n    AuthenticationFlowRepresentation:\n      properties:\n        alias:\n          type: string\n        authenticationExecutions:\n          items:\n            $ref: \"#/components/schemas/AuthenticationExecutionExportRepresentation\"\n          type: array\n        builtIn:\n          type: boolean\n        description:\n          type: string\n        id:\n          type: string\n        providerId:\n          type: string\n        topLevel:\n          type: boolean\n      type: object\n    AuthenticatorConfigInfoRepresentation:\n      properties:\n        helpText:\n          type: string\n        name:\n          type: string\n        properties:\n          items:\n            $ref: \"#/components/schemas/ConfigPropertyRepresentation\"\n          type: array\n        providerId:\n          type: string\n      type: object\n    AuthenticatorConfigRepresentation:\n      properties:\n        alias:\n          type: string\n        config:\n          additionalProperties: true\n          type: object\n        id:\n          type: string\n      type: object\n    CertificateRepresentation:\n      properties:\n        certificate:\n          type: string\n        kid:\n          type: string\n        privateKey:\n          type: string\n        publicKey:\n          type: string\n      type: object\n    ClientInitialAccessCreatePresentation:\n      properties:\n        count:\n          format: int32\n          type: integer\n        expiration:\n          format: int32\n          type: integer\n      type: object\n    ClientInitialAccessPresentation:\n      properties:\n        count:\n          format: int32\n          type: integer\n        expiration:\n          format: int32\n          type: integer\n        id:\n          type: string\n        remainingCount:\n          format: int32\n          type: integer\n        timestamp:\n          format: int32\n          type: integer\n        token:\n          type: string\n      type: object\n    ClientMappingsRepresentation:\n      properties:\n        client:\n          type: string\n        id:\n          type: string\n        mappings:\n          items:\n            $ref: \"#/components/schemas/RoleRepresentation\"\n          type: array\n      type: object\n    ClientRepresentation:\n      properties:\n        access:\n          additionalProperties: true\n          type: object\n        adminUrl:\n          type: string\n        alwaysDisplayInConsole:\n          type: boolean\n        attributes:\n          additionalProperties: true\n          type: object\n        authenticationFlowBindingOverrides:\n          additionalProperties: true\n          type: object\n        authorizationServicesEnabled:\n          type: boolean\n        authorizationSettings:\n          $ref: \"#/components/schemas/ResourceServerRepresentation\"\n        baseUrl:\n          type: string\n        bearerOnly:\n          type: boolean\n        clientAuthenticatorType:\n          type: string\n        clientId:\n          type: string\n        consentRequired:\n          type: boolean\n        defaultClientScopes:\n          items:\n            type: string\n          type: array\n        defaultRoles:\n          items:\n            type: string\n          type: array\n        description:\n          type: string\n        directAccessGrantsEnabled:\n          type: boolean\n        enabled:\n          type: boolean\n        frontchannelLogout:\n          type: boolean\n        fullScopeAllowed:\n          type: boolean\n        id:\n          type: string\n        implicitFlowEnabled:\n          type: boolean\n        name:\n          type: string\n        nodeReRegistrationTimeout:\n          format: int32\n          type: integer\n        notBefore:\n          format: int32\n          type: integer\n        optionalClientScopes:\n          items:\n            type: string\n          type: array\n        origin:\n          type: string\n        protocol:\n          type: string\n        protocolMappers:\n          items:\n            $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n          type: array\n        publicClient:\n          type: boolean\n        redirectUris:\n          items:\n            type: string\n          type: array\n        registeredNodes:\n          additionalProperties: true\n          type: object\n        registrationAccessToken:\n          type: string\n        rootUrl:\n          type: string\n        secret:\n          type: string\n        serviceAccountsEnabled:\n          type: boolean\n        standardFlowEnabled:\n          type: boolean\n        surrogateAuthRequired:\n          type: boolean\n        webOrigins:\n          items:\n            type: string\n          type: array\n      type: object\n    ClientScopeEvaluateResource-ProtocolMapperEvaluationRepresentation:\n      properties:\n        containerId:\n          type: string\n        containerName:\n          type: string\n        containerType:\n          type: string\n        mapperId:\n          type: string\n        mapperName:\n          type: string\n        protocolMapper:\n          type: string\n      type: object\n    ClientScopeRepresentation:\n      properties:\n        attributes:\n          additionalProperties: true\n          type: object\n        description:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n        protocol:\n          type: string\n        protocolMappers:\n          items:\n            $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n          type: array\n      type: object\n    ComponentExportRepresentation:\n      properties:\n        config:\n          $ref: \"#/components/schemas/MultivaluedHashMap\"\n        id:\n          type: string\n        name:\n          type: string\n        providerId:\n          type: string\n        subComponents:\n          $ref: \"#/components/schemas/MultivaluedHashMap\"\n        subType:\n          type: string\n      type: object\n    ComponentRepresentation:\n      properties:\n        config:\n          $ref: \"#/components/schemas/MultivaluedHashMap\"\n        id:\n          type: string\n        name:\n          type: string\n        parentId:\n          type: string\n        providerId:\n          type: string\n        providerType:\n          type: string\n        subType:\n          type: string\n      type: object\n    ComponentTypeRepresentation:\n      properties:\n        helpText:\n          type: string\n        id:\n          type: string\n        metadata:\n          additionalProperties: true\n          type: object\n        properties:\n          items:\n            $ref: \"#/components/schemas/ConfigPropertyRepresentation\"\n          type: array\n      type: object\n    ConfigPropertyRepresentation:\n      properties:\n        defaultValue:\n          type: object\n        helpText:\n          type: string\n        label:\n          type: string\n        name:\n          type: string\n        options:\n          items:\n            type: string\n          type: array\n        secret:\n          type: boolean\n        type:\n          type: string\n      type: object\n    CredentialRepresentation:\n      properties:\n        createdDate:\n          format: int64\n          type: integer\n        credentialData:\n          type: string\n        id:\n          type: string\n        priority:\n          format: int32\n          type: integer\n        secretData:\n          type: string\n        temporary:\n          type: boolean\n        type:\n          type: string\n        userLabel:\n          type: string\n        value:\n          type: string\n      type: object\n    EventRepresentation:\n      properties:\n        clientId:\n          type: string\n        details:\n          additionalProperties: true\n          type: object\n        error:\n          type: string\n        ipAddress:\n          type: string\n        realmId:\n          type: string\n        sessionId:\n          type: string\n        time:\n          format: int64\n          type: integer\n        type:\n          type: string\n        userId:\n          type: string\n      type: object\n    FederatedIdentityRepresentation:\n      properties:\n        identityProvider:\n          type: string\n        userId:\n          type: string\n        userName:\n          type: string\n      type: object\n    GlobalRequestResult:\n      properties:\n        failedRequests:\n          items:\n            type: string\n          type: array\n        successRequests:\n          items:\n            type: string\n          type: array\n      type: object\n    GroupRepresentation:\n      properties:\n        access:\n          additionalProperties: true\n          type: object\n        attributes:\n          additionalProperties: true\n          type: object\n        clientRoles:\n          additionalProperties: true\n          type: object\n        id:\n          type: string\n        name:\n          type: string\n        path:\n          type: string\n        realmRoles:\n          items:\n            type: string\n          type: array\n        subGroups:\n          items:\n            $ref: \"#/components/schemas/GroupRepresentation\"\n          type: array\n      type: object\n    IdentityProviderMapperRepresentation:\n      properties:\n        config:\n          additionalProperties: true\n          type: object\n        id:\n          type: string\n        identityProviderAlias:\n          type: string\n        identityProviderMapper:\n          type: string\n        name:\n          type: string\n      type: object\n    IdentityProviderRepresentation:\n      properties:\n        addReadTokenRoleOnCreate:\n          type: boolean\n        alias:\n          type: string\n        config:\n          additionalProperties: true\n          type: object\n        displayName:\n          type: string\n        enabled:\n          type: boolean\n        firstBrokerLoginFlowAlias:\n          type: string\n        internalId:\n          type: string\n        linkOnly:\n          type: boolean\n        postBrokerLoginFlowAlias:\n          type: string\n        providerId:\n          type: string\n        storeToken:\n          type: boolean\n        trustEmail:\n          type: boolean\n      type: object\n    KeyStoreConfig:\n      properties:\n        format:\n          type: string\n        keyAlias:\n          type: string\n        keyPassword:\n          type: string\n        realmAlias:\n          type: string\n        realmCertificate:\n          type: boolean\n        storePassword:\n          type: string\n      type: object\n    KeysMetadataRepresentation:\n      properties:\n        active:\n          additionalProperties: true\n          type: object\n        keys:\n          items:\n            $ref: \"#/components/schemas/KeysMetadataRepresentation-KeyMetadataRepresentation\"\n          type: array\n      type: object\n    KeysMetadataRepresentation-KeyMetadataRepresentation:\n      properties:\n        algorithm:\n          type: string\n        certificate:\n          type: string\n        kid:\n          type: string\n        providerId:\n          type: string\n        providerPriority:\n          format: int64\n          type: integer\n        publicKey:\n          type: string\n        status:\n          type: string\n        type:\n          type: string\n      type: object\n    ManagementPermissionReference:\n      properties:\n        enabled:\n          type: boolean\n        resource:\n          type: string\n        scopePermissions:\n          additionalProperties: true\n          type: object\n      type: object\n    MappingsRepresentation:\n      properties:\n        clientMappings:\n          additionalProperties: true\n          type: object\n        realmMappings:\n          items:\n            $ref: \"#/components/schemas/RoleRepresentation\"\n          type: array\n      type: object\n    MemoryInfoRepresentation:\n      properties:\n        free:\n          format: int64\n          type: integer\n        freeFormated:\n          type: string\n        freePercentage:\n          format: int64\n          type: integer\n        total:\n          format: int64\n          type: integer\n        totalFormated:\n          type: string\n        used:\n          format: int64\n          type: integer\n        usedFormated:\n          type: string\n      type: object\n    MultivaluedHashMap:\n      properties:\n        empty:\n          type: boolean\n        loadFactor:\n          format: float\n          type: number\n        threshold:\n          format: int32\n          type: integer\n      type: object\n    PartialImportRepresentation:\n      properties:\n        clients:\n          items:\n            $ref: \"#/components/schemas/ClientRepresentation\"\n          type: array\n        groups:\n          items:\n            $ref: \"#/components/schemas/GroupRepresentation\"\n          type: array\n        identityProviders:\n          items:\n            $ref: \"#/components/schemas/IdentityProviderRepresentation\"\n          type: array\n        ifResourceExists:\n          type: string\n        policy:\n          enum:\n            - SKIP\n            - OVERWRITE\n            - FAIL\n          type: string\n        roles:\n          $ref: \"#/components/schemas/RolesRepresentation\"\n        users:\n          items:\n            $ref: \"#/components/schemas/UserRepresentation\"\n          type: array\n      type: object\n    PasswordPolicyTypeRepresentation:\n      properties:\n        configType:\n          type: string\n        defaultValue:\n          type: string\n        displayName:\n          type: string\n        id:\n          type: string\n        multipleSupported:\n          type: boolean\n      type: object\n    Permission:\n      properties:\n        claims:\n          additionalProperties: true\n          type: object\n        rsid:\n          type: string\n        rsname:\n          type: string\n        scopes:\n          items:\n            type: string\n          type: array\n      type: object\n    PolicyRepresentation:\n      properties:\n        config:\n          additionalProperties: true\n          type: object\n        decisionStrategy:\n          enum:\n            - AFFIRMATIVE\n            - UNANIMOUS\n            - CONSENSUS\n          type: string\n        description:\n          type: string\n        id:\n          type: string\n        logic:\n          enum:\n            - POSITIVE\n            - NEGATIVE\n          type: string\n        name:\n          type: string\n        owner:\n          type: string\n        policies:\n          items:\n            type: string\n          type: array\n        resources:\n          items:\n            type: string\n          type: array\n        resourcesData:\n          items:\n            $ref: \"#/components/schemas/ResourceRepresentation\"\n          type: array\n        scopes:\n          items:\n            type: string\n          type: array\n        scopesData:\n          items:\n            $ref: \"#/components/schemas/ScopeRepresentation\"\n          type: array\n        type:\n          type: string\n      type: object\n    ProfileInfoRepresentation:\n      properties:\n        disabledFeatures:\n          items:\n            type: string\n          type: array\n        experimentalFeatures:\n          items:\n            type: string\n          type: array\n        name:\n          type: string\n        previewFeatures:\n          items:\n            type: string\n          type: array\n      type: object\n    ProtocolMapperRepresentation:\n      properties:\n        config:\n          additionalProperties: true\n          type: object\n        id:\n          type: string\n        name:\n          type: string\n        protocol:\n          type: string\n        protocolMapper:\n          type: string\n      type: object\n    ProviderRepresentation:\n      properties:\n        operationalInfo:\n          additionalProperties: true\n          type: object\n        order:\n          format: int32\n          type: integer\n      type: object\n    RealmEventsConfigRepresentation:\n      properties:\n        adminEventsDetailsEnabled:\n          type: boolean\n        adminEventsEnabled:\n          type: boolean\n        enabledEventTypes:\n          items:\n            type: string\n          type: array\n        eventsEnabled:\n          type: boolean\n        eventsExpiration:\n          format: int64\n          type: integer\n        eventsListeners:\n          items:\n            type: string\n          type: array\n      type: object\n    RealmRepresentation:\n      properties:\n        accessCodeLifespan:\n          format: int32\n          type: integer\n        accessCodeLifespanLogin:\n          format: int32\n          type: integer\n        accessCodeLifespanUserAction:\n          format: int32\n          type: integer\n        accessTokenLifespan:\n          format: int32\n          type: integer\n        accessTokenLifespanForImplicitFlow:\n          format: int32\n          type: integer\n        accountTheme:\n          type: string\n        actionTokenGeneratedByAdminLifespan:\n          format: int32\n          type: integer\n        actionTokenGeneratedByUserLifespan:\n          format: int32\n          type: integer\n        adminEventsDetailsEnabled:\n          type: boolean\n        adminEventsEnabled:\n          type: boolean\n        adminTheme:\n          type: string\n        attributes:\n          additionalProperties: true\n          type: object\n        authenticationFlows:\n          items:\n            $ref: \"#/components/schemas/AuthenticationFlowRepresentation\"\n          type: array\n        authenticatorConfig:\n          items:\n            $ref: \"#/components/schemas/AuthenticatorConfigRepresentation\"\n          type: array\n        browserFlow:\n          type: string\n        browserSecurityHeaders:\n          additionalProperties: true\n          type: object\n        bruteForceProtected:\n          type: boolean\n        clientAuthenticationFlow:\n          type: string\n        clientScopeMappings:\n          additionalProperties: true\n          type: object\n        clientScopes:\n          items:\n            $ref: \"#/components/schemas/ClientScopeRepresentation\"\n          type: array\n        clientSessionIdleTimeout:\n          format: int32\n          type: integer\n        clientSessionMaxLifespan:\n          format: int32\n          type: integer\n        clients:\n          items:\n            $ref: \"#/components/schemas/ClientRepresentation\"\n          type: array\n        components:\n          $ref: \"#/components/schemas/MultivaluedHashMap\"\n        defaultDefaultClientScopes:\n          items:\n            type: string\n          type: array\n        defaultGroups:\n          items:\n            type: string\n          type: array\n        defaultLocale:\n          type: string\n        defaultOptionalClientScopes:\n          items:\n            type: string\n          type: array\n        defaultRoles:\n          items:\n            type: string\n          type: array\n        defaultSignatureAlgorithm:\n          type: string\n        directGrantFlow:\n          type: string\n        displayName:\n          type: string\n        displayNameHtml:\n          type: string\n        dockerAuthenticationFlow:\n          type: string\n        duplicateEmailsAllowed:\n          type: boolean\n        editUsernameAllowed:\n          type: boolean\n        emailTheme:\n          type: string\n        enabled:\n          type: boolean\n        enabledEventTypes:\n          items:\n            type: string\n          type: array\n        eventsEnabled:\n          type: boolean\n        eventsExpiration:\n          format: int64\n          type: integer\n        eventsListeners:\n          items:\n            type: string\n          type: array\n        failureFactor:\n          format: int32\n          type: integer\n        federatedUsers:\n          items:\n            $ref: \"#/components/schemas/UserRepresentation\"\n          type: array\n        groups:\n          items:\n            $ref: \"#/components/schemas/GroupRepresentation\"\n          type: array\n        id:\n          type: string\n        identityProviderMappers:\n          items:\n            $ref: \"#/components/schemas/IdentityProviderMapperRepresentation\"\n          type: array\n        identityProviders:\n          items:\n            $ref: \"#/components/schemas/IdentityProviderRepresentation\"\n          type: array\n        internationalizationEnabled:\n          type: boolean\n        keycloakVersion:\n          type: string\n        loginTheme:\n          type: string\n        loginWithEmailAllowed:\n          type: boolean\n        maxDeltaTimeSeconds:\n          format: int32\n          type: integer\n        maxFailureWaitSeconds:\n          format: int32\n          type: integer\n        minimumQuickLoginWaitSeconds:\n          format: int32\n          type: integer\n        notBefore:\n          format: int32\n          type: integer\n        offlineSessionIdleTimeout:\n          format: int32\n          type: integer\n        offlineSessionMaxLifespan:\n          format: int32\n          type: integer\n        offlineSessionMaxLifespanEnabled:\n          type: boolean\n        otpPolicyAlgorithm:\n          type: string\n        otpPolicyDigits:\n          format: int32\n          type: integer\n        otpPolicyInitialCounter:\n          format: int32\n          type: integer\n        otpPolicyLookAheadWindow:\n          format: int32\n          type: integer\n        otpPolicyPeriod:\n          format: int32\n          type: integer\n        otpPolicyType:\n          type: string\n        otpSupportedApplications:\n          items:\n            type: string\n          type: array\n        passwordPolicy:\n          type: string\n        permanentLockout:\n          type: boolean\n        protocolMappers:\n          items:\n            $ref: \"#/components/schemas/ProtocolMapperRepresentation\"\n          type: array\n        quickLoginCheckMilliSeconds:\n          format: int64\n          type: integer\n        realm:\n          type: string\n        refreshTokenMaxReuse:\n          format: int32\n          type: integer\n        registrationAllowed:\n          type: boolean\n        registrationEmailAsUsername:\n          type: boolean\n        registrationFlow:\n          type: string\n        rememberMe:\n          type: boolean\n        requiredActions:\n          items:\n            $ref: \"#/components/schemas/RequiredActionProviderRepresentation\"\n          type: array\n        resetCredentialsFlow:\n          type: string\n        resetPasswordAllowed:\n          type: boolean\n        revokeRefreshToken:\n          type: boolean\n        roles:\n          $ref: \"#/components/schemas/RolesRepresentation\"\n        scopeMappings:\n          items:\n            $ref: \"#/components/schemas/ScopeMappingRepresentation\"\n          type: array\n        smtpServer:\n          additionalProperties: true\n          type: object\n        sslRequired:\n          type: string\n        ssoSessionIdleTimeout:\n          format: int32\n          type: integer\n        ssoSessionIdleTimeoutRememberMe:\n          format: int32\n          type: integer\n        ssoSessionMaxLifespan:\n          format: int32\n          type: integer\n        ssoSessionMaxLifespanRememberMe:\n          format: int32\n          type: integer\n        supportedLocales:\n          items:\n            type: string\n          type: array\n        userFederationMappers:\n          items:\n            $ref: \"#/components/schemas/UserFederationMapperRepresentation\"\n          type: array\n        userFederationProviders:\n          items:\n            $ref: \"#/components/schemas/UserFederationProviderRepresentation\"\n          type: array\n        userManagedAccessAllowed:\n          type: boolean\n        users:\n          items:\n            $ref: \"#/components/schemas/UserRepresentation\"\n          type: array\n        verifyEmail:\n          type: boolean\n        waitIncrementSeconds:\n          format: int32\n          type: integer\n        webAuthnPolicyAcceptableAaguids:\n          items:\n            type: string\n          type: array\n        webAuthnPolicyAttestationConveyancePreference:\n          type: string\n        webAuthnPolicyAuthenticatorAttachment:\n          type: string\n        webAuthnPolicyAvoidSameAuthenticatorRegister:\n          type: boolean\n        webAuthnPolicyCreateTimeout:\n          format: int32\n          type: integer\n        webAuthnPolicyPasswordlessAcceptableAaguids:\n          items:\n            type: string\n          type: array\n        webAuthnPolicyPasswordlessAttestationConveyancePreference:\n          type: string\n        webAuthnPolicyPasswordlessAuthenticatorAttachment:\n          type: string\n        webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister:\n          type: boolean\n        webAuthnPolicyPasswordlessCreateTimeout:\n          format: int32\n          type: integer\n        webAuthnPolicyPasswordlessRequireResidentKey:\n          type: string\n        webAuthnPolicyPasswordlessRpEntityName:\n          type: string\n        webAuthnPolicyPasswordlessRpId:\n          type: string\n        webAuthnPolicyPasswordlessSignatureAlgorithms:\n          items:\n            type: string\n          type: array\n        webAuthnPolicyPasswordlessUserVerificationRequirement:\n          type: string\n        webAuthnPolicyRequireResidentKey:\n          type: string\n        webAuthnPolicyRpEntityName:\n          type: string\n        webAuthnPolicyRpId:\n          type: string\n        webAuthnPolicySignatureAlgorithms:\n          items:\n            type: string\n          type: array\n        webAuthnPolicyUserVerificationRequirement:\n          type: string\n      type: object\n    RequiredActionProviderRepresentation:\n      properties:\n        alias:\n          type: string\n        config:\n          additionalProperties: true\n          type: object\n        defaultAction:\n          type: boolean\n        enabled:\n          type: boolean\n        name:\n          type: string\n        priority:\n          format: int32\n          type: integer\n        providerId:\n          type: string\n      type: object\n    ResourceRepresentation:\n      properties:\n        attributes:\n          additionalProperties: true\n          type: object\n        displayName:\n          type: string\n        icon_uri:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n        ownerManagedAccess:\n          type: boolean\n        scopes:\n          items:\n            $ref: \"#/components/schemas/ScopeRepresentation\"\n          type: array\n        type:\n          type: string\n        uris:\n          items:\n            type: string\n          type: array\n      type: object\n    ResourceServerRepresentation:\n      properties:\n        allowRemoteResourceManagement:\n          type: boolean\n        clientId:\n          type: string\n        decisionStrategy:\n          enum:\n            - AFFIRMATIVE\n            - UNANIMOUS\n            - CONSENSUS\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n        policies:\n          items:\n            $ref: \"#/components/schemas/PolicyRepresentation\"\n          type: array\n        policyEnforcementMode:\n          enum:\n            - ENFORCING\n            - PERMISSIVE\n            - DISABLED\n          type: string\n        resources:\n          items:\n            $ref: \"#/components/schemas/ResourceRepresentation\"\n          type: array\n        scopes:\n          items:\n            $ref: \"#/components/schemas/ScopeRepresentation\"\n          type: array\n      type: object\n    RoleRepresentation:\n      properties:\n        attributes:\n          additionalProperties: true\n          type: object\n        clientRole:\n          type: boolean\n        composite:\n          type: boolean\n        composites:\n          $ref: \"#/components/schemas/RoleRepresentation-Composites\"\n        containerId:\n          type: string\n        description:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n      type: object\n    RoleRepresentation-Composites:\n      properties:\n        client:\n          additionalProperties: true\n          type: object\n        realm:\n          items:\n            type: string\n          type: array\n      type: object\n    RolesRepresentation:\n      properties:\n        client:\n          additionalProperties: true\n          type: object\n        realm:\n          items:\n            $ref: \"#/components/schemas/RoleRepresentation\"\n          type: array\n      type: object\n    ScopeMappingRepresentation:\n      properties:\n        client:\n          type: string\n        clientScope:\n          type: string\n        roles:\n          items:\n            type: string\n          type: array\n        self:\n          type: string\n      type: object\n    ScopeRepresentation:\n      properties:\n        displayName:\n          type: string\n        iconUri:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n        policies:\n          items:\n            $ref: \"#/components/schemas/PolicyRepresentation\"\n          type: array\n        resources:\n          items:\n            $ref: \"#/components/schemas/ResourceRepresentation\"\n          type: array\n      type: object\n    ServerInfoRepresentation:\n      properties:\n        builtinProtocolMappers:\n          additionalProperties: true\n          type: object\n        clientImporters:\n          items:\n            additionalProperties: true\n            type: object\n          type: array\n        clientInstallations:\n          additionalProperties: true\n          type: object\n        componentTypes:\n          additionalProperties: true\n          type: object\n        enums:\n          additionalProperties: true\n          type: object\n        identityProviders:\n          items:\n            additionalProperties: true\n            type: object\n          type: array\n        memoryInfo:\n          $ref: \"#/components/schemas/MemoryInfoRepresentation\"\n        passwordPolicies:\n          items:\n            $ref: \"#/components/schemas/PasswordPolicyTypeRepresentation\"\n          type: array\n        profileInfo:\n          $ref: \"#/components/schemas/ProfileInfoRepresentation\"\n        protocolMapperTypes:\n          additionalProperties: true\n          type: object\n        providers:\n          additionalProperties: true\n          type: object\n        socialProviders:\n          items:\n            additionalProperties: true\n            type: object\n          type: array\n        systemInfo:\n          $ref: \"#/components/schemas/SystemInfoRepresentation\"\n        themes:\n          additionalProperties: true\n          type: object\n      type: object\n    SpiInfoRepresentation:\n      properties:\n        internal:\n          type: boolean\n        providers:\n          additionalProperties: true\n          type: object\n      type: object\n    SynchronizationResult:\n      properties:\n        added:\n          format: int32\n          type: integer\n        failed:\n          format: int32\n          type: integer\n        ignored:\n          type: boolean\n        removed:\n          format: int32\n          type: integer\n        status:\n          type: string\n        updated:\n          format: int32\n          type: integer\n      type: object\n    SystemInfoRepresentation:\n      properties:\n        fileEncoding:\n          type: string\n        javaHome:\n          type: string\n        javaRuntime:\n          type: string\n        javaVendor:\n          type: string\n        javaVersion:\n          type: string\n        javaVm:\n          type: string\n        javaVmVersion:\n          type: string\n        osArchitecture:\n          type: string\n        osName:\n          type: string\n        osVersion:\n          type: string\n        serverTime:\n          type: string\n        uptime:\n          type: string\n        uptimeMillis:\n          format: int64\n          type: integer\n        userDir:\n          type: string\n        userLocale:\n          type: string\n        userName:\n          type: string\n        userTimezone:\n          type: string\n        version:\n          type: string\n      type: object\n    TestLdapConnectionRepresentation:\n      properties:\n        action:\n          type: string\n        bindCredential:\n          type: string\n        bindDn:\n          type: string\n        componentId:\n          type: string\n        connectionTimeout:\n          type: string\n        connectionUrl:\n          type: string\n        startTls:\n          type: string\n        useTruststoreSpi:\n          type: string\n      type: object\n    UserConsentRepresentation:\n      properties:\n        clientId:\n          type: string\n        createdDate:\n          format: int64\n          type: integer\n        grantedClientScopes:\n          items:\n            type: string\n          type: array\n        lastUpdatedDate:\n          format: int64\n          type: integer\n      type: object\n    UserFederationMapperRepresentation:\n      properties:\n        config:\n          additionalProperties: true\n          type: object\n        federationMapperType:\n          type: string\n        federationProviderDisplayName:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n      type: object\n    UserFederationProviderRepresentation:\n      properties:\n        changedSyncPeriod:\n          format: int32\n          type: integer\n        config:\n          additionalProperties: true\n          type: object\n        displayName:\n          type: string\n        fullSyncPeriod:\n          format: int32\n          type: integer\n        id:\n          type: string\n        lastSync:\n          format: int32\n          type: integer\n        priority:\n          format: int32\n          type: integer\n        providerName:\n          type: string\n      type: object\n    UserRepresentation:\n      properties:\n        access:\n          additionalProperties: true\n          type: object\n        attributes:\n          additionalProperties: true\n          type: object\n        clientConsents:\n          items:\n            $ref: \"#/components/schemas/UserConsentRepresentation\"\n          type: array\n        clientRoles:\n          additionalProperties: true\n          type: object\n        createdTimestamp:\n          format: int64\n          type: integer\n        credentials:\n          items:\n            $ref: \"#/components/schemas/CredentialRepresentation\"\n          type: array\n        disableableCredentialTypes:\n          items:\n            type: string\n          type: array\n        email:\n          type: string\n        emailVerified:\n          type: boolean\n        enabled:\n          type: boolean\n        federatedIdentities:\n          items:\n            $ref: \"#/components/schemas/FederatedIdentityRepresentation\"\n          type: array\n        federationLink:\n          type: string\n        firstName:\n          type: string\n        groups:\n          items:\n            type: string\n          type: array\n        id:\n          type: string\n        lastName:\n          type: string\n        notBefore:\n          format: int32\n          type: integer\n        origin:\n          type: string\n        realmRoles:\n          items:\n            type: string\n          type: array\n        requiredActions:\n          items:\n            type: string\n          type: array\n        self:\n          type: string\n        serviceAccountClientId:\n          type: string\n        username:\n          type: string\n      type: object\n    UserSessionRepresentation:\n      properties:\n        clients:\n          additionalProperties: true\n          type: object\n        id:\n          type: string\n        ipAddress:\n          type: string\n        lastAccess:\n          format: int64\n          type: integer\n        start:\n          format: int64\n          type: integer\n        userId:\n          type: string\n        username:\n          type: string\n      type: object\n  securitySchemes:\n    access_token:\n      scheme: bearer\n      type: http\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/keycloak.local/1/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/keycloak.local/1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/{realm}/users/{id}/offline-sessions/{clientId}\": get: responses: HTTP code pattern not implemented",
	"NotImplemented": [
		"HTTP code pattern",
		"unsupported content types"
	]
}