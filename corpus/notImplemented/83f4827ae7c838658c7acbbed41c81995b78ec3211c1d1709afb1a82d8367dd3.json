{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/disit/snap4city"
		},
		"file": {
			"name": "sensors-openapiv3.yaml",
			"size": 0,
			"path": "swagger/internal/sensors-openapiv3.yaml",
			"byteSize": 9184,
			"content": "openapi: 3.0.1\ninfo:\n  title: Sensors API\n  version: 1.0.0\nservers:\n  - url: http://www.disit.org/sensor\npaths:\n  /api.php:\n    post:\n      tags: [Insert]\n      summary: Insert Sensors\n      description: If the input JSON is valid, the sensor(s) is persisted in the table _sensors_ of the schema _sensors_ of the database, and the total number of the written sensors is returned in the response body.\n      requestBody:\n        description: A JSON where one or more sensors are represented.\n        content:\n          application/json:\n            schema:\n              type: object\n              oneOf:\n                - $ref: '#/components/schemas/Beacon'\n                - $ref: '#/components/schemas/Wifi'\n                - $ref: '#/components/schemas/Status'\n                - type: array\n                  items:\n                    oneOf:\n                      - $ref: '#/components/schemas/Beacon'\n                      - $ref: '#/components/schemas/Wifi'\n                      - $ref: '#/components/schemas/Status'\n      responses:\n        200: \n          description: The sensors have been successfully persisted.\n        400:\n          description: Malformed input, such as syntax errors, or errors at field level. In the latter case, the invalid fields are listed in the response body. If multiple sensors can be found in the input JSON, the list of invalid fields refers to the first of the invalid sensors.\n        500: \n          description: Connection errors and other unexpected situations.\n  /api_select.php:\n    get:\n      tags: [Retrieve]\n      summary: Get Sensors\n      parameters:\n        - name: action\n          in: query\n          description: The only supported value at today is  _get_sensors_.\n          required: true\n          schema:\n            type: string\n            enum: [get_sensors]\n          example: get_sensors\n        - name: user\n          in: query\n          description: The requester user name. \n          required: true\n          schema:\n            type: string\n          example: user\n        - name: pwd\n          in: query\n          description: The requester password. \n          required: true\n          schema:\n            type: string\n          example: pwd\n        - name: type\n          in: query\n          description: The output format.\n          schema:\n            type: string\n            enum: [html, csv, json]\n          example: html\n        - name: limit\n          in: query\n          description: The number of results to be returned, for pagination purposes.\n          schema: \n            type: integer\n            format: int32\n          example: 1000\n        - name: offset\n          in: query\n          description: The number of results that must be skipped, for pagination purposes.\n          schema:\n            type: integer\n            format: int32\n          example: 1000\n      responses:\n        200:\n          description: The sensors are returned in the specified format.\n          content:\n            text/html:\n              schema: \n                type: string\n                format: html\n            text/csv:\n              schema:\n                type: string\n                format: csv\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - $ref: '#/components/schemas/Beacon'\n                    - $ref: '#/components/schemas/Wifi'\n                    - $ref: '#/components/schemas/Status'\n        400:\n          description: Malformed URL. No query performed.\n        500:\n          description: Connection errors or other unexpected situations.\ncomponents:\n  schemas:\n    Beacon:\n      type: object\n      required:\n        - date\n        - latitude\n        - longitude\n        - sender_IP\n        - type\n      properties:\n        UUID:\n          type: string\n          example: b9407f30-f5f8-466e-aff9-25556b57fe6d\n        id:\n          type: string\n          example: 25556b57fe6d\n        sender_IP:\n          type: string\n          example: 192.168.0.1\n        date:\n          type: string\n          example: 2015-11-11 13:23:44\n        date_pre_scan:\n          type: string\n          example: 2016-03-09 19:15:44\n        type:\n          type: string\n          example: beacon\n        latitude:\n          type: string\n          example: 43.7666667\n        longitude:\n          type: string\n          example: 11.25\n        lat_pre_scan:\n          type: string\n          example: 43.6\n        long_pre_scan:\n          type: string\n          example: 11.26\n        sensor_name:\n          type: string\n          example: blue beacon\n        MAC_address:\n          type: string\n          example: 00:A0:C9:14:C8:29\n        power:\n          type: string\n          example: 15 dB\n        rssi:\n          type: string\n          example: 13 dB\n        minor:\n          type: string\n          example: 12345\n        major: \n          type: string\n          example: 45123\n        provider:\n          type: string\n          example: network\n        speed:\n          type: integer\n          format: int32\n          example: 0\n        altitude:\n          type: integer\n          format: int32\n          example: 0\n        accuracy:\n          type: integer\n          format: int32\n          example: 45\n        heading:\n          type: integer\n          format: int32\n          example: 0\n        device_model:\n          type: string\n          example: AAAA lt03lte\n        device_id:\n          type: string\n          example: 42767b11352d69d6408ffcc\n        status:\n          type: string\n          example: bike\n        prev_status:\n          type: string\n          example: bus\n        appID:\n          type: string\n          example: fdck_i\n    Wifi:\n      type: object\n      required:\n        - date\n        - latitude\n        - longitude\n        - sender_IP\n        - type\n      properties:\n        sender_IP:\n          type: string\n          example: 192.168.0.1\n        date:\n          type: string\n          example: 2016-03-09 19:16:44\n        date_pre_scan:\n          type: string\n          example: 2016-03-09 19:15:44\n        type:\n          type: string\n          example: wifi\n        latitude:\n          type: string\n          example: 43.7666667\n        longitude:\n          type: string\n          example: 11.25\n        lat_pre_scan:\n          type: string\n          example: 43.6\n        long_pre_scan:\n          type: string\n          example: 11.26\n        network_name:\n          type: string\n          example: disit lab\n        MAC_address:\n          type: string\n          example: 00:A0:C9:14:C8:29\n        power:\n          type: string\n          example: 45 dB\n        rssi:\n          type: string\n          example: 45 dB\n        frequency:\n          type: string\n          example: 4545 Mhz\n        capabilities:\n          type: string\n          example: '[WPA-PSK-TKIP][WPA2-PSK-CCMP+TKIP][ESS]'\n        provider:\n          type: string\n          example: network\n        speed:\n          type: integer\n          format: int32\n          example: 0\n        altitude:\n          type: integer\n          format: int32\n          example: 0\n        accuracy:\n          type: integer\n          format: int32\n          example: 45\n        heading:\n          type: integer\n          format: int32\n          example: 0\n        device_model:\n          type: string\n          example: AAAA lt03lte\n        device_id:\n          type: string\n          example: 42767b11352d69d6408ffcc8216a4438017cbbcc44ba5d07abd6ff38d859d519\n        status:\n          type: string\n          example: bike\n        prev_status:\n          type: string\n          example: bus                \n    Status:\n      type: object\n      required:\n        - date\n        - latitude\n        - longitude\n        - sender_IP\n        - type\n      properties:\n        sender_IP:\n          type: string\n          example: 192.168.0.1\n        date:\n          type: string\n          example: 2015-11-11 13:23:44\n        date_pre_scan:\n          type: string\n          example: 2016-03-09 19:15:44\n        type:\n          type: string\n          example: status\n        latitude:\n          type: string\n          example: 43.7666667\n        longitude:\n          type: string\n          example: 11.25\n        lat_pre_scan:\n          type: string\n          example: 43.6\n        long_pre_scan:\n          type: string\n          example: 11.26\n        MAC_address:\n          type: string\n          example: 00:00:00:00:00:00\n        provider:\n          type: string\n          example: network\n        speed:\n          type: integer\n          format: int32\n          example: 0\n        altitude:\n          type: integer\n          format: int32\n          example: 0\n        accuracy:\n          type: integer\n          format: int32\n          example: 45\n        heading:\n          type: integer\n          format: int32\n          example: 0\n        device_model:\n          type: string\n          example: AAAA lt03lte\n        device_id:\n          type: string\n          example: 42767b11352d69d6408ffcc\n        status:\n          type: string\n          example: bike\n        prev_status:\n          type: string\n          example: bus",
			"canonicalURL": "/github.com/disit/snap4city@523488172f08a8e700ea3a777117724aac25eb65/-/blob/swagger/internal/sensors-openapiv3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/disit/snap4city/blob/523488172f08a8e700ea3a777117724aac25eb65/swagger/internal/sensors-openapiv3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api.php\": post: requestBody: contents: application/json: generate schema: oneOf: oneOf APIPhpPostReq: variant APIPhpPostReq3ItemArray: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"discriminator inference"
	]
}