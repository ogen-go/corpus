{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ory/sdk"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "clients/hydra/go/api/openapi.yaml",
			"byteSize": 168829,
			"content": "openapi: 3.0.1\ninfo:\n  description: Welcome to the ORY Hydra HTTP API documentation. You will find documentation\n    for all HTTP APIs here.\n  title: ORY Hydra\n  version: v1.11.0\nservers:\n- url: /\npaths:\n  /.well-known/jwks.json:\n    get:\n      description: |-\n        This endpoint returns JSON Web Keys to be used as public keys for verifying OpenID Connect ID Tokens and,\n        if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like\n        [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.\n      operationId: wellKnown\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONWebKeySet'\n          description: JSONWebKeySet\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: JSON Web Keys Discovery\n      tags:\n      - public\n  /.well-known/openid-configuration:\n    get:\n      description: |-\n        The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll\n        your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this\n        flow at https://openid.net/specs/openid-connect-discovery-1_0.html .\n\n        Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others.\n        For a full list of clients go here: https://openid.net/developers/certified/\n      operationId: discoverOpenIDConfiguration\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/wellKnown'\n          description: wellKnown\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: OpenID Connect Discovery\n      tags:\n      - public\n  /clients:\n    get:\n      description: |-\n        This endpoint lists all clients in the database, and never returns client secrets.\n        As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients,\n        but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.\n\n        OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are\n        generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.\n\n        The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: '\u003chttps://hydra-url/admin/clients?limit={limit}\u0026offset={offset}\u003e; rel=\"{page}\"', where page is one of the following applicable pages: 'first', 'next', 'last', and 'previous'.\n        Multiple links can be included in this header, and will be separated by a comma.\n      operationId: listOAuth2Clients\n      parameters:\n      - description: The maximum amount of clients to returned, upper bound is 500\n          clients.\n        in: query\n        name: limit\n        schema:\n          format: int64\n          type: integer\n      - description: The offset from where to start looking.\n        in: query\n        name: offset\n        schema:\n          format: int64\n          type: integer\n      - description: The name of the clients to filter by.\n        in: query\n        name: client_name\n        schema:\n          type: string\n      - description: The owner of the clients to filter by.\n        in: query\n        name: owner\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/oAuth2Client'\n                type: array\n          description: A list of clients.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: List OAuth 2.0 Clients\n      tags:\n      - admin\n    post:\n      description: |-\n        Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret\n        will be generated. The secret will be returned in the response and you will not be able to retrieve it later on.\n        Write the secret down and keep it somwhere safe.\n\n        OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are\n        generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.\n      operationId: createOAuth2Client\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/oAuth2Client'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/oAuth2Client'\n          description: oAuth2Client\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Create an OAuth 2.0 Client\n      tags:\n      - admin\n      x-codegen-request-body-name: Body\n  /clients/{id}:\n    delete:\n      description: |-\n        Delete an existing OAuth 2.0 Client by its ID.\n\n        OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are\n        generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.\n\n        Make sure that this endpoint is well protected and only callable by first-party components.\n      operationId: deleteOAuth2Client\n      parameters:\n      - description: The id of the OAuth 2.0 Client.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          content: {}\n          description: |-\n            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\n            typically 201.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Deletes an OAuth 2.0 Client\n      tags:\n      - admin\n    get:\n      description: |-\n        Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.\n\n        OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are\n        generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.\n      operationId: getOAuth2Client\n      parameters:\n      - description: The id of the OAuth 2.0 Client.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/oAuth2Client'\n          description: oAuth2Client\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Get an OAuth 2.0 Client\n      tags:\n      - admin\n    patch:\n      description: |-\n        Patch an existing OAuth 2.0 Client. If you pass `client_secret`\n        the secret will be updated and returned via the API. This is the\n        only time you will be able to retrieve the client secret, so write it down and keep it safe.\n\n        OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are\n        generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.\n      operationId: patchOAuth2Client\n      parameters:\n      - description: The id of the OAuth 2.0 Client.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/patchRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/oAuth2Client'\n          description: oAuth2Client\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Patch an OAuth 2.0 Client\n      tags:\n      - admin\n      x-codegen-request-body-name: Body\n    put:\n      description: |-\n        Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API.\n        This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.\n\n        OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are\n        generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.\n      operationId: updateOAuth2Client\n      parameters:\n      - description: The id of the OAuth 2.0 Client.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/oAuth2Client'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/oAuth2Client'\n          description: oAuth2Client\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Update an OAuth 2.0 Client\n      tags:\n      - admin\n      x-codegen-request-body-name: Body\n  /connect/register:\n    post:\n      description: |-\n        This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the\n        public internet directly and can be used in self-service. It implements the OpenID Connect\n        Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint\n        is disabled by default. It can be enabled by an administrator.\n\n        Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those\n        values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or\n        `client_secret_post`.\n\n        The `client_secret` will be returned in the response and you will not be able to retrieve it later on.\n        Write the secret down and keep it somewhere safe.\n      operationId: dynamicClientRegistrationCreateOAuth2Client\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/oAuth2Client'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/oAuth2Client'\n          description: oAuth2Client\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Register an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client\n        Registration Management Protocol\n      tags:\n      - public\n      x-codegen-request-body-name: Body\n  /connect/register/{id}:\n    delete:\n      description: |-\n        This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the\n        public internet directly and can be used in self-service. It implements the OpenID Connect\n        Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint\n        is disabled by default. It can be enabled by an administrator.\n\n        To use this endpoint, you will need to present the client's authentication credentials. If the OAuth2 Client\n        uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query.\n        If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.\n\n        OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are\n        generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.\n      operationId: dynamicClientRegistrationDeleteOAuth2Client\n      parameters:\n      - description: The id of the OAuth 2.0 Client.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          content: {}\n          description: |-\n            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\n            typically 201.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Deletes an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client\n        Registration Management Protocol\n      tags:\n      - public\n    get:\n      description: |-\n        This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the\n        public internet directly and can be used in self-service. It implements the OpenID Connect\n        Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint\n        is disabled by default. It can be enabled by an administrator.\n\n        To use this endpoint, you will need to present the client's authentication credentials. If the OAuth2 Client\n        uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query.\n        If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.\n\n        OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are\n        generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.\n      operationId: dynamicClientRegistrationGetOAuth2Client\n      parameters:\n      - description: The id of the OAuth 2.0 Client.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/oAuth2Client'\n          description: oAuth2Client\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Get an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client Registration\n        Management Protocol\n      tags:\n      - public\n    put:\n      description: |-\n        This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the\n        public internet directly and can be used in self-service. It implements the OpenID Connect\n        Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint\n        is disabled by default. It can be enabled by an administrator.\n\n        If you pass `client_secret` the secret will be updated and returned via the API.\n        This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.\n\n        To use this endpoint, you will need to present the client's authentication credentials. If the OAuth2 Client\n        uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query.\n        If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.\n\n        OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are\n        generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.\n      operationId: dynamicClientRegistrationUpdateOAuth2Client\n      parameters:\n      - description: The id of the OAuth 2.0 Client.\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/oAuth2Client'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/oAuth2Client'\n          description: oAuth2Client\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Update an OAuth 2.0 Client using the OpenID / OAuth2 Dynamic Client\n        Registration Management Protocol\n      tags:\n      - public\n      x-codegen-request-body-name: Body\n  /health/alive:\n    get:\n      description: |-\n        This endpoint returns a 200 status code when the HTTP server is up running.\n        This status does currently not include checks whether the database connection is working.\n\n        If the service supports TLS Edge Termination, this endpoint does not require the\n        `X-Forwarded-Proto` header to be set.\n\n        Be aware that if you are running multiple nodes of this service, the health status will never\n        refer to the cluster state, only to a single instance.\n      operationId: isInstanceAlive\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/healthStatus'\n          description: healthStatus\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Check Alive Status\n      tags:\n      - admin\n  /health/ready:\n    get:\n      description: |-\n        This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g.\n        the database) are responsive as well.\n\n        If the service supports TLS Edge Termination, this endpoint does not require the\n        `X-Forwarded-Proto` header to be set.\n\n        Be aware that if you are running multiple nodes of this service, the health status will never\n        refer to the cluster state, only to a single instance.\n      operationId: isInstanceReady\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/healthStatus'\n          description: healthStatus\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/healthNotReadyStatus'\n          description: healthNotReadyStatus\n      summary: Check Readiness Status\n      tags:\n      - public\n  /keys/{set}:\n    delete:\n      description: |-\n        Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.\n\n        A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.\n      operationId: deleteJsonWebKeySet\n      parameters:\n      - description: The set\n        in: path\n        name: set\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          content: {}\n          description: |-\n            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\n            typically 201.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Delete a JSON Web Key Set\n      tags:\n      - admin\n    get:\n      description: |-\n        This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.\n\n        A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.\n      operationId: getJsonWebKeySet\n      parameters:\n      - description: The set\n        in: path\n        name: set\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONWebKeySet'\n          description: JSONWebKeySet\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Retrieve a JSON Web Key Set\n      tags:\n      - admin\n    post:\n      description: |-\n        This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.\n\n        A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.\n      operationId: createJsonWebKeySet\n      parameters:\n      - description: The set\n        in: path\n        name: set\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/jsonWebKeySetGeneratorRequest'\n        required: false\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONWebKeySet'\n          description: JSONWebKeySet\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Generate a New JSON Web Key\n      tags:\n      - admin\n      x-codegen-request-body-name: Body\n    put:\n      description: |-\n        Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.\n\n        A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.\n      operationId: updateJsonWebKeySet\n      parameters:\n      - description: The set\n        in: path\n        name: set\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JSONWebKeySet'\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONWebKeySet'\n          description: JSONWebKeySet\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Update a JSON Web Key Set\n      tags:\n      - admin\n      x-codegen-request-body-name: Body\n  /keys/{set}/{kid}:\n    delete:\n      description: |-\n        Use this endpoint to delete a single JSON Web Key.\n\n        A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.\n      operationId: deleteJsonWebKey\n      parameters:\n      - description: The kid of the desired key\n        in: path\n        name: kid\n        required: true\n        schema:\n          type: string\n      - description: The set\n        in: path\n        name: set\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          content: {}\n          description: |-\n            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\n            typically 201.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Delete a JSON Web Key\n      tags:\n      - admin\n    get:\n      description: This endpoint returns a singular JSON Web Key, identified by the\n        set and the specific key ID (kid).\n      operationId: getJsonWebKey\n      parameters:\n      - description: The kid of the desired key\n        in: path\n        name: kid\n        required: true\n        schema:\n          type: string\n      - description: The set\n        in: path\n        name: set\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONWebKeySet'\n          description: JSONWebKeySet\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Fetch a JSON Web Key\n      tags:\n      - admin\n    put:\n      description: |-\n        Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.\n\n        A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.\n      operationId: updateJsonWebKey\n      parameters:\n      - description: The kid of the desired key\n        in: path\n        name: kid\n        required: true\n        schema:\n          type: string\n      - description: The set\n        in: path\n        name: set\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JSONWebKey'\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONWebKey'\n          description: JSONWebKey\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"403\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Update a JSON Web Key\n      tags:\n      - admin\n      x-codegen-request-body-name: Body\n  /metrics/prometheus:\n    get:\n      description: |-\n        ```\n        metadata:\n        annotations:\n        prometheus.io/port: \"4434\"\n        prometheus.io/path: \"/metrics/prometheus\"\n        ```\n      operationId: prometheus\n      responses:\n        \"200\":\n          content: {}\n          description: |-\n            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\n            typically 201.\n      summary: |-\n        Get snapshot metrics from the service. If you're using k8s, you can then add annotations to\n        your deployment like so:\n      tags:\n      - metadata\n  /oauth2/auth:\n    get:\n      description: |-\n        This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows.\n        OAuth2 is a very popular protocol and a library for your programming language will exists.\n\n        To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749\n      operationId: oauthAuth\n      responses:\n        \"302\":\n          content: {}\n          description: |-\n            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\n            typically 201.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: The OAuth 2.0 Authorize Endpoint\n      tags:\n      - public\n  /oauth2/auth/requests/consent:\n    get:\n      description: |-\n        When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\n        to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if\n        the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.\n\n        The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to\n        grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").\n\n        The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent\n        provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted\n        or rejected the request.\n      operationId: getConsentRequest\n      parameters:\n      - in: query\n        name: consent_challenge\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/consentRequest'\n          description: consentRequest\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"410\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/requestWasHandledResponse'\n          description: requestWasHandledResponse\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Get Consent Request Information\n      tags:\n      - admin\n  /oauth2/auth/requests/consent/accept:\n    put:\n      description: |-\n        When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\n        to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if\n        the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.\n\n        The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to\n        grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").\n\n        The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent\n        provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted\n        or rejected the request.\n\n        This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf.\n        The consent provider includes additional information, such as session data for access and ID tokens, and if the\n        consent request should be used as basis for future requests.\n\n        The response contains a redirect URL which the consent provider should redirect the user-agent to.\n      operationId: acceptConsentRequest\n      parameters:\n      - in: query\n        name: consent_challenge\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/acceptConsentRequest'\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/completedRequest'\n          description: completedRequest\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Accept a Consent Request\n      tags:\n      - admin\n      x-codegen-request-body-name: Body\n  /oauth2/auth/requests/consent/reject:\n    put:\n      description: |-\n        When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\n        to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if\n        the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.\n\n        The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to\n        grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").\n\n        The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent\n        provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted\n        or rejected the request.\n\n        This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf.\n        The consent provider must include a reason why the consent was not granted.\n\n        The response contains a redirect URL which the consent provider should redirect the user-agent to.\n      operationId: rejectConsentRequest\n      parameters:\n      - in: query\n        name: consent_challenge\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/rejectRequest'\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/completedRequest'\n          description: completedRequest\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Reject a Consent Request\n      tags:\n      - admin\n      x-codegen-request-body-name: Body\n  /oauth2/auth/requests/login:\n    get:\n      description: |-\n        When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\n        (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login\n        provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\")\n        a subject (in OAuth2 the proper name for subject is \"resource owner\").\n\n        The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login\n        provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.\n      operationId: getLoginRequest\n      parameters:\n      - in: query\n        name: login_challenge\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/loginRequest'\n          description: loginRequest\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"410\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/requestWasHandledResponse'\n          description: requestWasHandledResponse\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Get a Login Request\n      tags:\n      - admin\n  /oauth2/auth/requests/login/accept:\n    put:\n      description: |-\n        When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\n        (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login\n        provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\")\n        a subject (in OAuth2 the proper name for subject is \"resource owner\").\n\n        The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login\n        provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.\n\n        This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as\n        the subject's ID and if ORY Hydra should remember the subject's subject agent for future authentication attempts by setting\n        a cookie.\n\n        The response contains a redirect URL which the login provider should redirect the user-agent to.\n      operationId: acceptLoginRequest\n      parameters:\n      - in: query\n        name: login_challenge\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/acceptLoginRequest'\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/completedRequest'\n          description: completedRequest\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Accept a Login Request\n      tags:\n      - admin\n      x-codegen-request-body-name: Body\n  /oauth2/auth/requests/login/reject:\n    put:\n      description: |-\n        When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\n        (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login\n        provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\")\n        a subject (in OAuth2 the proper name for subject is \"resource owner\").\n\n        The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login\n        provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.\n\n        This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication\n        was be denied.\n\n        The response contains a redirect URL which the login provider should redirect the user-agent to.\n      operationId: rejectLoginRequest\n      parameters:\n      - in: query\n        name: login_challenge\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/rejectRequest'\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/completedRequest'\n          description: completedRequest\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Reject a Login Request\n      tags:\n      - admin\n      x-codegen-request-body-name: Body\n  /oauth2/auth/requests/logout:\n    get:\n      description: Use this endpoint to fetch a logout request.\n      operationId: getLogoutRequest\n      parameters:\n      - in: query\n        name: logout_challenge\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/logoutRequest'\n          description: logoutRequest\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"410\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/requestWasHandledResponse'\n          description: requestWasHandledResponse\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Get a Logout Request\n      tags:\n      - admin\n  /oauth2/auth/requests/logout/accept:\n    put:\n      description: |-\n        When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request.\n        No body is required.\n\n        The response contains a redirect URL which the consent provider should redirect the user-agent to.\n      operationId: acceptLogoutRequest\n      parameters:\n      - in: query\n        name: logout_challenge\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/completedRequest'\n          description: completedRequest\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Accept a Logout Request\n      tags:\n      - admin\n  /oauth2/auth/requests/logout/reject:\n    put:\n      description: |-\n        When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request.\n        No body is required.\n\n        The response is empty as the logout provider has to chose what action to perform next.\n      operationId: rejectLogoutRequest\n      parameters:\n      - in: query\n        name: logout_challenge\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/rejectRequest'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/rejectRequest'\n        required: false\n      responses:\n        \"204\":\n          content: {}\n          description: |-\n            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\n            typically 201.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Reject a Logout Request\n      tags:\n      - admin\n      x-codegen-request-body-name: Body\n  /oauth2/auth/sessions/consent:\n    delete:\n      description: |-\n        This endpoint revokes a subject's granted consent sessions for a specific OAuth 2.0 Client and invalidates all\n        associated OAuth 2.0 Access Tokens.\n      operationId: revokeConsentSessions\n      parameters:\n      - description: The subject (Subject) who's consent sessions should be deleted.\n        in: query\n        name: subject\n        required: true\n        schema:\n          type: string\n      - description: If set, deletes only those consent sessions by the Subject that\n          have been granted to the specified OAuth 2.0 Client ID\n        in: query\n        name: client\n        schema:\n          type: string\n      - description: If set to `?all=true`, deletes all consent sessions by the Subject\n          that have been granted.\n        in: query\n        name: all\n        schema:\n          type: boolean\n      responses:\n        \"204\":\n          content: {}\n          description: |-\n            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\n            typically 201.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client\n      tags:\n      - admin\n    get:\n      description: |-\n        This endpoint lists all subject's granted consent sessions, including client and granted scope.\n        If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an\n        empty JSON array with status code 200 OK.\n\n\n        The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: '\u003chttps://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}\u0026limit={limit}\u0026offset={offset}\u003e; rel=\"{page}\"', where page is one of the following applicable pages: 'first', 'next', 'last', and 'previous'.\n        Multiple links can be included in this header, and will be separated by a comma.\n      operationId: listSubjectConsentSessions\n      parameters:\n      - in: query\n        name: subject\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/PreviousConsentSession'\n                type: array\n          description: A list of used consent requests.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Lists All Consent Sessions of a Subject\n      tags:\n      - admin\n  /oauth2/auth/sessions/login:\n    delete:\n      description: |-\n        This endpoint invalidates a subject's authentication session. After revoking the authentication session, the subject\n        has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect\n        Front- or Back-channel logout.\n      operationId: revokeAuthenticationSession\n      parameters:\n      - in: query\n        name: subject\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          content: {}\n          description: |-\n            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\n            typically 201.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: |-\n        Invalidates All Login Sessions of a Certain User\n        Invalidates a Subject's Authentication Session\n      tags:\n      - admin\n  /oauth2/flush:\n    post:\n      description: |-\n        This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be\n        not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted\n        automatically when performing the refresh flow.\n      operationId: flushInactiveOAuth2Tokens\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/flushInactiveOAuth2TokensRequest'\n        required: false\n      responses:\n        \"204\":\n          content: {}\n          description: |-\n            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\n            typically 201.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Flush Expired OAuth2 Access Tokens\n      tags:\n      - admin\n      x-codegen-request-body-name: Body\n  /oauth2/introspect:\n    post:\n      description: |-\n        The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token\n        is neither expired nor revoked. If a token is active, additional information on the token will be included. You can\n        set additional data for a token by setting `accessTokenExtra` during the consent flow.\n\n        For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).\n      operationId: introspectOAuth2Token\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                token:\n                  description: |-\n                    The string value of the token. For access tokens, this\n                    is the \"access_token\" value returned from the token endpoint\n                    defined in OAuth 2.0. For refresh tokens, this is the \"refresh_token\"\n                    value returned.\n                  type: string\n                scope:\n                  description: |-\n                    An optional, space separated list of required scopes. If the access token was not granted one of the\n                    scopes, the result of active will be false.\n                  type: string\n              required:\n              - token\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/oAuth2TokenIntrospection'\n          description: oAuth2TokenIntrospection\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Introspect OAuth2 Tokens\n      tags:\n      - admin\n  /oauth2/revoke:\n    post:\n      description: |-\n        Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no\n        longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token.\n        Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by\n        the client the token was generated for.\n      operationId: revokeOAuth2Token\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                token:\n                  type: string\n              required:\n              - token\n        required: true\n      responses:\n        \"200\":\n          content: {}\n          description: |-\n            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\n            typically 201.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      security:\n      - basic: []\n      - oauth2: []\n      summary: Revoke OAuth2 Tokens\n      tags:\n      - public\n  /oauth2/sessions/logout:\n    get:\n      description: |-\n        This endpoint initiates and completes user logout at Ory Hydra and initiates OpenID Connect Front-/Back-channel logout:\n\n        https://openid.net/specs/openid-connect-frontchannel-1_0.html\n        https://openid.net/specs/openid-connect-backchannel-1_0.html\n      operationId: disconnectUser\n      responses:\n        \"302\":\n          content: {}\n          description: |-\n            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\n            typically 201.\n      summary: OpenID Connect Front-Backchannel Enabled Logout\n      tags:\n      - public\n  /oauth2/token:\n    post:\n      description: |-\n        The client makes a request to the token endpoint by sending the\n        following parameters using the \"application/x-www-form-urlencoded\" HTTP\n        request entity-body.\n\n        \u003e Do not implement a client for this endpoint yourself. Use a library. There are many libraries\n        \u003e available for any programming language. You can find a list of libraries here: https://oauth.net/code/\n        \u003e\n        \u003e Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above!\n      operationId: oauth2Token\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                grant_type:\n                  type: string\n                code:\n                  type: string\n                refresh_token:\n                  type: string\n                redirect_uri:\n                  type: string\n                client_id:\n                  type: string\n              required:\n              - grant_type\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/oauth2TokenResponse'\n          description: oauth2TokenResponse\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      security:\n      - basic: []\n      - oauth2: []\n      summary: The OAuth 2.0 Token Endpoint\n      tags:\n      - public\n  /oauth2/tokens:\n    delete:\n      description: This endpoint deletes OAuth2 access tokens issued for a client\n        from the database\n      operationId: deleteOAuth2Token\n      parameters:\n      - in: query\n        name: client_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          content: {}\n          description: |-\n            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\n            typically 201.\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      summary: Delete OAuth2 Access Tokens from a Client\n      tags:\n      - admin\n  /trust/grants/jwt-bearer/issuers:\n    get:\n      description: Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.\n      operationId: listTrustedJwtGrantIssuers\n      parameters:\n      - description: If optional \"issuer\" is supplied, only jwt-bearer grants with\n          this issuer will be returned.\n        in: query\n        name: issuer\n        schema:\n          type: string\n      - description: The maximum amount of policies returned, upper bound is 500 policies\n        in: query\n        name: limit\n        schema:\n          format: int64\n          type: integer\n      - description: The offset from where to start looking.\n        in: query\n        name: offset\n        schema:\n          format: int64\n          type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/trustedJwtGrantIssuers'\n          description: trustedJwtGrantIssuers\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/genericError'\n          description: genericError\n      summary: List Trusted OAuth2 JWT Bearer Grant Type Issuers\n      tags:\n      - admin\n    post:\n      description: |-\n        Use this endpoint to establish a trust relationship for a JWT issuer\n        to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication\n        and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).\n      operationId: trustJwtGrantIssuer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/trustJwtGrantIssuerBody'\n        required: false\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/trustedJwtGrantIssuer'\n          description: trustedJwtGrantIssuer\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/genericError'\n          description: genericError\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/genericError'\n          description: genericError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/genericError'\n          description: genericError\n      summary: Trust an OAuth2 JWT Bearer Grant Type Issuer\n      tags:\n      - admin\n      x-codegen-request-body-name: Body\n  /trust/grants/jwt-bearer/issuers/{id}:\n    delete:\n      description: |-\n        Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you\n        created the trust relationship.\n\n        Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile\n        for OAuth 2.0 Client Authentication and Authorization Grant.\n      operationId: deleteTrustedJwtGrantIssuer\n      parameters:\n      - description: The id of the desired grant\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          content: {}\n          description: |-\n            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\n            typically 201.\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/genericError'\n          description: genericError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/genericError'\n          description: genericError\n      summary: Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer\n      tags:\n      - admin\n    get:\n      description: |-\n        Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you\n        created the trust relationship.\n      operationId: getTrustedJwtGrantIssuer\n      parameters:\n      - description: The id of the desired grant\n        in: path\n        name: id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/trustedJwtGrantIssuer'\n          description: trustedJwtGrantIssuer\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/genericError'\n          description: genericError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/genericError'\n          description: genericError\n      summary: Get a Trusted OAuth2 JWT Bearer Grant Type Issuer\n      tags:\n      - admin\n  /userinfo:\n    get:\n      description: |-\n        This endpoint returns the payload of the ID Token, including the idTokenExtra values, of\n        the provided OAuth 2.0 Access Token.\n\n        For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).\n\n        In the case of authentication error, a WWW-Authenticate header might be set in the response\n        with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3)\n        for more details about header format.\n      operationId: userinfo\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/userinfoResponse'\n          description: userinfoResponse\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jsonError'\n          description: jsonError\n      security:\n      - oauth2: []\n      summary: OpenID Connect Userinfo\n      tags:\n      - public\n  /version:\n    get:\n      description: |-\n        This endpoint returns the service version typically notated using semantic versioning.\n\n        If the service supports TLS Edge Termination, this endpoint does not require the\n        `X-Forwarded-Proto` header to be set.\n      operationId: getVersion\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/version'\n          description: version\n      summary: Get Service Version\n      tags:\n      - admin\ncomponents:\n  schemas:\n    ContainerWaitOKBodyError:\n      description: ContainerWaitOKBodyError container waiting error, if any\n      properties:\n        Message:\n          description: Details of an error\n          type: string\n      type: object\n    JSONRawMessage:\n      title: JSONRawMessage represents a json.RawMessage that works well with JSON,\n        SQL, and Swagger.\n      type: object\n    JSONWebKey:\n      description: |-\n        It is important that this model object is named JSONWebKey for\n        \"swagger generate spec\" to generate only on definition of a\n        JSONWebKey.\n      example:\n        d: T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE\n        e: AQAB\n        crv: P-256\n        use: sig\n        kid: 1603dfe0af8f4596\n        x5c:\n        - x5c\n        - x5c\n        k: GawgguFyGrWKav7AX4VKUg\n        dp: G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0\n        dq: s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk\n        n: vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0\n        p: 6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ\n        kty: RSA\n        q: 0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ\n        qi: GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU\n        x: f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU\n        y: x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0\n        alg: RS256\n      properties:\n        alg:\n          description: |-\n            The \"alg\" (algorithm) parameter identifies the algorithm intended for\n            use with the key.  The values used should either be registered in the\n            IANA \"JSON Web Signature and Encryption Algorithms\" registry\n            established by [JWA] or be a value that contains a Collision-\n            Resistant Name.\n          example: RS256\n          type: string\n        crv:\n          example: P-256\n          type: string\n        d:\n          example: T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE\n          type: string\n        dp:\n          example: G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0\n          type: string\n        dq:\n          example: s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk\n          type: string\n        e:\n          example: AQAB\n          type: string\n        k:\n          example: GawgguFyGrWKav7AX4VKUg\n          type: string\n        kid:\n          description: |-\n            The \"kid\" (key ID) parameter is used to match a specific key.  This\n            is used, for instance, to choose among a set of keys within a JWK Set\n            during key rollover.  The structure of the \"kid\" value is\n            unspecified.  When \"kid\" values are used within a JWK Set, different\n            keys within the JWK Set SHOULD use distinct \"kid\" values.  (One\n            example in which different keys might use the same \"kid\" value is if\n            they have different \"kty\" (key type) values but are considered to be\n            equivalent alternatives by the application using them.)  The \"kid\"\n            value is a case-sensitive string.\n          example: 1603dfe0af8f4596\n          type: string\n        kty:\n          description: |-\n            The \"kty\" (key type) parameter identifies the cryptographic algorithm\n            family used with the key, such as \"RSA\" or \"EC\". \"kty\" values should\n            either be registered in the IANA \"JSON Web Key Types\" registry\n            established by [JWA] or be a value that contains a Collision-\n            Resistant Name.  The \"kty\" value is a case-sensitive string.\n          example: RSA\n          type: string\n        n:\n          example: vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0\n          type: string\n        p:\n          example: 6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ\n          type: string\n        q:\n          example: 0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ\n          type: string\n        qi:\n          example: GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU\n          type: string\n        use:\n          description: |-\n            Use (\"public key use\") identifies the intended use of\n            the public key. The \"use\" parameter is employed to indicate whether\n            a public key is used for encrypting data or verifying the signature\n            on data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).\n          example: sig\n          type: string\n        x:\n          example: f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU\n          type: string\n        x5c:\n          description: |-\n            The \"x5c\" (X.509 certificate chain) parameter contains a chain of one\n            or more PKIX certificates [RFC5280].  The certificate chain is\n            represented as a JSON array of certificate value strings.  Each\n            string in the array is a base64-encoded (Section 4 of [RFC4648] --\n            not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.\n            The PKIX certificate containing the key value MUST be the first\n            certificate.\n          items:\n            type: string\n          type: array\n        y:\n          example: x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0\n          type: string\n      required:\n      - alg\n      - kid\n      - kty\n      - use\n      type: object\n    JSONWebKeySet:\n      description: |-\n        It is important that this model object is named JSONWebKeySet for\n        \"swagger generate spec\" to generate only on definition of a\n        JSONWebKeySet. Since one with the same name is previously defined as\n        client.Client.JSONWebKeys and this one is last, this one will be\n        effectively written in the swagger spec.\n      example:\n        keys:\n        - d: T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE\n          e: AQAB\n          crv: P-256\n          use: sig\n          kid: 1603dfe0af8f4596\n          x5c:\n          - x5c\n          - x5c\n          k: GawgguFyGrWKav7AX4VKUg\n          dp: G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0\n          dq: s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk\n          n: vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0\n          p: 6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ\n          kty: RSA\n          q: 0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ\n          qi: GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU\n          x: f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU\n          y: x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0\n          alg: RS256\n        - d: T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE\n          e: AQAB\n          crv: P-256\n          use: sig\n          kid: 1603dfe0af8f4596\n          x5c:\n          - x5c\n          - x5c\n          k: GawgguFyGrWKav7AX4VKUg\n          dp: G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0\n          dq: s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk\n          n: vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0\n          p: 6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ\n          kty: RSA\n          q: 0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ\n          qi: GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU\n          x: f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU\n          y: x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0\n          alg: RS256\n      properties:\n        keys:\n          description: |-\n            The value of the \"keys\" parameter is an array of JWK values.  By\n            default, the order of the JWK values within the array does not imply\n            an order of preference among them, although applications of JWK Sets\n            can choose to assign a meaning to the order for their purposes, if\n            desired.\n          items:\n            $ref: '#/components/schemas/JSONWebKey'\n          type: array\n      type: object\n    JoseJSONWebKeySet:\n      type: object\n    PluginConfig:\n      properties:\n        Args:\n          $ref: '#/components/schemas/PluginConfigArgs'\n        Description:\n          description: description\n          type: string\n        DockerVersion:\n          description: Docker Version used to create the plugin\n          type: string\n        Documentation:\n          description: documentation\n          type: string\n        Entrypoint:\n          description: entrypoint\n          items:\n            type: string\n          type: array\n        Env:\n          description: env\n          items:\n            $ref: '#/components/schemas/PluginEnv'\n          type: array\n        Interface:\n          $ref: '#/components/schemas/PluginConfigInterface'\n        IpcHost:\n          description: ipc host\n          type: boolean\n        Linux:\n          $ref: '#/components/schemas/PluginConfigLinux'\n        Mounts:\n          description: mounts\n          items:\n            $ref: '#/components/schemas/PluginMount'\n          type: array\n        Network:\n          $ref: '#/components/schemas/PluginConfigNetwork'\n        PidHost:\n          description: pid host\n          type: boolean\n        PropagatedMount:\n          description: propagated mount\n          type: string\n        User:\n          $ref: '#/components/schemas/PluginConfigUser'\n        WorkDir:\n          description: work dir\n          type: string\n        rootfs:\n          $ref: '#/components/schemas/PluginConfigRootfs'\n      required:\n      - Args\n      - Description\n      - Documentation\n      - Entrypoint\n      - Env\n      - Interface\n      - IpcHost\n      - Linux\n      - Mounts\n      - Network\n      - PidHost\n      - PropagatedMount\n      - WorkDir\n      title: PluginConfig The config of a plugin.\n      type: object\n    PluginConfigArgs:\n      description: PluginConfigArgs plugin config args\n      properties:\n        Description:\n          description: description\n          type: string\n        Name:\n          description: name\n          type: string\n        Settable:\n          description: settable\n          items:\n            type: string\n          type: array\n        Value:\n          description: value\n          items:\n            type: string\n          type: array\n      required:\n      - Description\n      - Name\n      - Settable\n      - Value\n      type: object\n    PluginConfigInterface:\n      description: PluginConfigInterface The interface between Docker and the plugin\n      properties:\n        ProtocolScheme:\n          description: Protocol to use for clients connecting to the plugin.\n          type: string\n        Socket:\n          description: socket\n          type: string\n        Types:\n          description: types\n          items:\n            $ref: '#/components/schemas/PluginInterfaceType'\n          type: array\n      required:\n      - Socket\n      - Types\n      type: object\n    PluginConfigLinux:\n      description: PluginConfigLinux plugin config linux\n      properties:\n        AllowAllDevices:\n          description: allow all devices\n          type: boolean\n        Capabilities:\n          description: capabilities\n          items:\n            type: string\n          type: array\n        Devices:\n          description: devices\n          items:\n            $ref: '#/components/schemas/PluginDevice'\n          type: array\n      required:\n      - AllowAllDevices\n      - Capabilities\n      - Devices\n      type: object\n    PluginConfigNetwork:\n      description: PluginConfigNetwork plugin config network\n      properties:\n        Type:\n          description: type\n          type: string\n      required:\n      - Type\n      type: object\n    PluginConfigRootfs:\n      description: PluginConfigRootfs plugin config rootfs\n      properties:\n        diff_ids:\n          description: diff ids\n          items:\n            type: string\n          type: array\n        type:\n          description: type\n          type: string\n      type: object\n    PluginConfigUser:\n      description: PluginConfigUser plugin config user\n      properties:\n        GID:\n          description: g ID\n          format: uint32\n          type: integer\n        UID:\n          description: UID\n          format: uint32\n          type: integer\n      type: object\n    PluginDevice:\n      description: PluginDevice plugin device\n      properties:\n        Description:\n          description: description\n          type: string\n        Name:\n          description: name\n          type: string\n        Path:\n          description: path\n          type: string\n        Settable:\n          description: settable\n          items:\n            type: string\n          type: array\n      required:\n      - Description\n      - Name\n      - Path\n      - Settable\n      type: object\n    PluginEnv:\n      description: PluginEnv plugin env\n      properties:\n        Description:\n          description: description\n          type: string\n        Name:\n          description: name\n          type: string\n        Settable:\n          description: settable\n          items:\n            type: string\n          type: array\n        Value:\n          description: value\n          type: string\n      required:\n      - Description\n      - Name\n      - Settable\n      - Value\n      type: object\n    PluginInterfaceType:\n      description: PluginInterfaceType plugin interface type\n      properties:\n        Capability:\n          description: capability\n          type: string\n        Prefix:\n          description: prefix\n          type: string\n        Version:\n          description: version\n          type: string\n      required:\n      - Capability\n      - Prefix\n      - Version\n      type: object\n    PluginMount:\n      description: PluginMount plugin mount\n      properties:\n        Description:\n          description: description\n          type: string\n        Destination:\n          description: destination\n          type: string\n        Name:\n          description: name\n          type: string\n        Options:\n          description: options\n          items:\n            type: string\n          type: array\n        Settable:\n          description: settable\n          items:\n            type: string\n          type: array\n        Source:\n          description: source\n          type: string\n        Type:\n          description: type\n          type: string\n      required:\n      - Description\n      - Destination\n      - Name\n      - Options\n      - Settable\n      - Source\n      - Type\n      type: object\n    PluginSettings:\n      properties:\n        Args:\n          description: args\n          items:\n            type: string\n          type: array\n        Devices:\n          description: devices\n          items:\n            $ref: '#/components/schemas/PluginDevice'\n          type: array\n        Env:\n          description: env\n          items:\n            type: string\n          type: array\n        Mounts:\n          description: mounts\n          items:\n            $ref: '#/components/schemas/PluginMount'\n          type: array\n      required:\n      - Args\n      - Devices\n      - Env\n      - Mounts\n      title: PluginSettings Settings that can be modified by users.\n      type: object\n    PreviousConsentSession:\n      description: |-\n        The response used to return used consent requests\n        same as HandledLoginRequest, just with consent_request exposed as json\n      example:\n        remember: true\n        consent_request:\n          requested_access_token_audience:\n          - requested_access_token_audience\n          - requested_access_token_audience\n          login_challenge: login_challenge\n          subject: subject\n          amr:\n          - amr\n          - amr\n          oidc_context:\n            login_hint: login_hint\n            ui_locales:\n            - ui_locales\n            - ui_locales\n            id_token_hint_claims: '{}'\n            acr_values:\n            - acr_values\n            - acr_values\n            display: display\n          skip: true\n          request_url: request_url\n          acr: acr\n          context: '{}'\n          challenge: challenge\n          client:\n            metadata: '{}'\n            token_endpoint_auth_signing_alg: token_endpoint_auth_signing_alg\n            client_uri: client_uri\n            jwks: '{}'\n            logo_uri: logo_uri\n            created_at: 2000-01-23T04:56:07.000+00:00\n            registration_client_uri: registration_client_uri\n            allowed_cors_origins:\n            - allowed_cors_origins\n            - allowed_cors_origins\n            registration_access_token: registration_access_token\n            client_id: client_id\n            token_endpoint_auth_method: token_endpoint_auth_method\n            userinfo_signed_response_alg: userinfo_signed_response_alg\n            updated_at: 2000-01-23T04:56:07.000+00:00\n            scope: scope\n            request_uris:\n            - request_uris\n            - request_uris\n            client_secret: client_secret\n            backchannel_logout_session_required: true\n            backchannel_logout_uri: backchannel_logout_uri\n            client_name: client_name\n            policy_uri: policy_uri\n            owner: owner\n            audience:\n            - audience\n            - audience\n            post_logout_redirect_uris:\n            - post_logout_redirect_uris\n            - post_logout_redirect_uris\n            grant_types:\n            - grant_types\n            - grant_types\n            subject_type: subject_type\n            redirect_uris:\n            - redirect_uris\n            - redirect_uris\n            sector_identifier_uri: sector_identifier_uri\n            frontchannel_logout_session_required: true\n            frontchannel_logout_uri: frontchannel_logout_uri\n            client_secret_expires_at: 0\n            jwks_uri: jwks_uri\n            request_object_signing_alg: request_object_signing_alg\n            tos_uri: tos_uri\n            contacts:\n            - contacts\n            - contacts\n            response_types:\n            - response_types\n            - response_types\n          login_session_id: login_session_id\n          requested_scope:\n          - requested_scope\n          - requested_scope\n        session:\n          access_token: '{}'\n          id_token: '{}'\n        grant_access_token_audience:\n        - grant_access_token_audience\n        - grant_access_token_audience\n        handled_at: 2000-01-23T04:56:07.000+00:00\n        grant_scope:\n        - grant_scope\n        - grant_scope\n        remember_for: 0\n      properties:\n        consent_request:\n          $ref: '#/components/schemas/consentRequest'\n        grant_access_token_audience:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        grant_scope:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        handled_at:\n          format: date-time\n          title: NullTime implements sql.NullTime functionality.\n          type: string\n        remember:\n          description: |-\n            Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same\n            client asks the same user for the same, or a subset of, scope.\n          type: boolean\n        remember_for:\n          description: |-\n            RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the\n            authorization will be remembered indefinitely.\n          format: int64\n          type: integer\n        session:\n          $ref: '#/components/schemas/consentRequestSession'\n      type: object\n    StringSlicePipeDelimiter:\n      items:\n        type: string\n      title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL string.\n      type: array\n    Volume:\n      description: Volume volume\n      properties:\n        CreatedAt:\n          description: Date/Time the volume was created.\n          type: string\n        Driver:\n          description: Name of the volume driver used by the volume.\n          type: string\n        Labels:\n          additionalProperties:\n            type: string\n          description: User-defined key/value metadata.\n          type: object\n        Mountpoint:\n          description: Mount path of the volume on the host.\n          type: string\n        Name:\n          description: Name of the volume.\n          type: string\n        Options:\n          additionalProperties:\n            type: string\n          description: The driver specific options used when creating the volume.\n          type: object\n        Scope:\n          description: The level at which the volume exists. Either `global` for cluster-wide,\n            or `local` for machine level.\n          type: string\n        Status:\n          description: |-\n            Low-level details about the volume, provided by the volume driver.\n            Details are returned as a map with key/value pairs:\n            `{\"key\":\"value\",\"key2\":\"value2\"}`.\n\n            The `Status` field is optional, and is omitted if the volume driver\n            does not support this feature.\n          properties: {}\n          type: object\n        UsageData:\n          $ref: '#/components/schemas/VolumeUsageData'\n      required:\n      - Driver\n      - Labels\n      - Mountpoint\n      - Name\n      - Options\n      - Scope\n      type: object\n    VolumeUsageData:\n      description: |-\n        VolumeUsageData Usage details about the volume. This information is used by the\n        `GET /system/df` endpoint, and omitted in other endpoints.\n      properties:\n        RefCount:\n          description: |-\n            The number of containers referencing this volume. This field\n            is set to `-1` if the reference-count is not available.\n          format: int64\n          type: integer\n        Size:\n          description: |-\n            Amount of disk space used by the volume (in bytes). This information\n            is only available for volumes created with the `\"local\"` volume\n            driver. For volumes created with other volume drivers, this field\n            is set to `-1` (\"not available\")\n          format: int64\n          type: integer\n      required:\n      - RefCount\n      - Size\n      type: object\n    acceptConsentRequest:\n      properties:\n        grant_access_token_audience:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        grant_scope:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        handled_at:\n          format: date-time\n          title: NullTime implements sql.NullTime functionality.\n          type: string\n        remember:\n          description: |-\n            Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same\n            client asks the same user for the same, or a subset of, scope.\n          type: boolean\n        remember_for:\n          description: |-\n            RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the\n            authorization will be remembered indefinitely.\n          format: int64\n          type: integer\n        session:\n          $ref: '#/components/schemas/consentRequestSession'\n      title: The request payload used to accept a consent request.\n      type: object\n    acceptLoginRequest:\n      properties:\n        acr:\n          description: |-\n            ACR sets the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it\n            to express that, for example, a user authenticated using two factor authentication.\n          type: string\n        amr:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        context:\n          title: JSONRawMessage represents a json.RawMessage that works well with\n            JSON, SQL, and Swagger.\n          type: object\n        force_subject_identifier:\n          description: |-\n            ForceSubjectIdentifier forces the \"pairwise\" user ID of the end-user that authenticated. The \"pairwise\" user ID refers to the\n            (Pairwise Identifier Algorithm)[http://openid.net/specs/openid-connect-core-1_0.html#PairwiseAlg] of the OpenID\n            Connect specification. It allows you to set an obfuscated subject (\"user\") identifier that is unique to the client.\n\n            Please note that this changes the user ID on endpoint /userinfo and sub claim of the ID Token. It does not change the\n            sub claim in the OAuth 2.0 Introspection.\n\n            Per default, ORY Hydra handles this value with its own algorithm. In case you want to set this yourself\n            you can use this field. Please note that setting this field has no effect if `pairwise` is not configured in\n            ORY Hydra or the OAuth 2.0 Client does not expect a pairwise identifier (set via `subject_type` key in the client's\n            configuration).\n\n            Please also be aware that ORY Hydra is unable to properly compute this value during authentication. This implies\n            that you have to compute this value on every authentication process (probably depending on the client ID or some\n            other unique value).\n\n            If you fail to compute the proper value, then authentication processes which have id_token_hint set might fail.\n          type: string\n        remember:\n          description: |-\n            Remember, if set to true, tells ORY Hydra to remember this user by telling the user agent (browser) to store\n            a cookie with authentication data. If the same user performs another OAuth 2.0 Authorization Request, he/she\n            will not be asked to log in again.\n          type: boolean\n        remember_for:\n          description: |-\n            RememberFor sets how long the authentication should be remembered for in seconds. If set to `0`, the\n            authorization will be remembered for the duration of the browser session (using a session cookie).\n          format: int64\n          type: integer\n        subject:\n          description: Subject is the user ID of the end-user that authenticated.\n          type: string\n      required:\n      - subject\n      title: HandledLoginRequest is the request payload used to accept a login request.\n      type: object\n    completedRequest:\n      example:\n        redirect_to: redirect_to\n      properties:\n        redirect_to:\n          description: RedirectURL is the URL which you should redirect the user to\n            once the authentication process is completed.\n          type: string\n      required:\n      - redirect_to\n      title: The response payload sent when accepting or rejecting a login or consent\n        request.\n      type: object\n    consentRequest:\n      example:\n        requested_access_token_audience:\n        - requested_access_token_audience\n        - requested_access_token_audience\n        login_challenge: login_challenge\n        subject: subject\n        amr:\n        - amr\n        - amr\n        oidc_context:\n          login_hint: login_hint\n          ui_locales:\n          - ui_locales\n          - ui_locales\n          id_token_hint_claims: '{}'\n          acr_values:\n          - acr_values\n          - acr_values\n          display: display\n        skip: true\n        request_url: request_url\n        acr: acr\n        context: '{}'\n        challenge: challenge\n        client:\n          metadata: '{}'\n          token_endpoint_auth_signing_alg: token_endpoint_auth_signing_alg\n          client_uri: client_uri\n          jwks: '{}'\n          logo_uri: logo_uri\n          created_at: 2000-01-23T04:56:07.000+00:00\n          registration_client_uri: registration_client_uri\n          allowed_cors_origins:\n          - allowed_cors_origins\n          - allowed_cors_origins\n          registration_access_token: registration_access_token\n          client_id: client_id\n          token_endpoint_auth_method: token_endpoint_auth_method\n          userinfo_signed_response_alg: userinfo_signed_response_alg\n          updated_at: 2000-01-23T04:56:07.000+00:00\n          scope: scope\n          request_uris:\n          - request_uris\n          - request_uris\n          client_secret: client_secret\n          backchannel_logout_session_required: true\n          backchannel_logout_uri: backchannel_logout_uri\n          client_name: client_name\n          policy_uri: policy_uri\n          owner: owner\n          audience:\n          - audience\n          - audience\n          post_logout_redirect_uris:\n          - post_logout_redirect_uris\n          - post_logout_redirect_uris\n          grant_types:\n          - grant_types\n          - grant_types\n          subject_type: subject_type\n          redirect_uris:\n          - redirect_uris\n          - redirect_uris\n          sector_identifier_uri: sector_identifier_uri\n          frontchannel_logout_session_required: true\n          frontchannel_logout_uri: frontchannel_logout_uri\n          client_secret_expires_at: 0\n          jwks_uri: jwks_uri\n          request_object_signing_alg: request_object_signing_alg\n          tos_uri: tos_uri\n          contacts:\n          - contacts\n          - contacts\n          response_types:\n          - response_types\n          - response_types\n        login_session_id: login_session_id\n        requested_scope:\n        - requested_scope\n        - requested_scope\n      properties:\n        acr:\n          description: |-\n            ACR represents the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it\n            to express that, for example, a user authenticated using two factor authentication.\n          type: string\n        amr:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        challenge:\n          description: |-\n            ID is the identifier (\"authorization challenge\") of the consent authorization request. It is used to\n            identify the session.\n          type: string\n        client:\n          $ref: '#/components/schemas/oAuth2Client'\n        context:\n          title: JSONRawMessage represents a json.RawMessage that works well with\n            JSON, SQL, and Swagger.\n          type: object\n        login_challenge:\n          description: |-\n            LoginChallenge is the login challenge this consent challenge belongs to. It can be used to associate\n            a login and consent request in the login \u0026 consent app.\n          type: string\n        login_session_id:\n          description: |-\n            LoginSessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag)\n            this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false)\n            this will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back-\n            channel logout. It's value can generally be used to associate consecutive login requests by a certain user.\n          type: string\n        oidc_context:\n          $ref: '#/components/schemas/openIDConnectContext'\n        request_url:\n          description: |-\n            RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which\n            initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but\n            might come in handy if you want to deal with additional request parameters.\n          type: string\n        requested_access_token_audience:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        requested_scope:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        skip:\n          description: |-\n            Skip, if true, implies that the client has requested the same scopes from the same user previously.\n            If true, you must not ask the user to grant the requested scopes. You must however either allow or deny the\n            consent request using the usual API call.\n          type: boolean\n        subject:\n          description: |-\n            Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope\n            requested by the OAuth 2.0 client.\n          type: string\n      required:\n      - challenge\n      title: Contains information on an ongoing consent request.\n      type: object\n    consentRequestSession:\n      example:\n        access_token: '{}'\n        id_token: '{}'\n      properties:\n        access_token:\n          description: |-\n            AccessToken sets session data for the access and refresh token, as well as any future tokens issued by the\n            refresh grant. Keep in mind that this data will be available to anyone performing OAuth 2.0 Challenge Introspection.\n            If only your services can perform OAuth 2.0 Challenge Introspection, this is usually fine. But if third parties\n            can access that endpoint as well, sensitive data from the session might be exposed to them. Use with care!\n          properties: {}\n          type: object\n        id_token:\n          description: |-\n            IDToken sets session data for the OpenID Connect ID token. Keep in mind that the session'id payloads are readable\n            by anyone that has access to the ID Challenge. Use with care!\n          properties: {}\n          type: object\n      title: Used to pass session data to a consent request.\n      type: object\n    flushInactiveOAuth2TokensRequest:\n      properties:\n        notAfter:\n          description: |-\n            NotAfter sets after which point tokens should not be flushed. This is useful when you want to keep a history\n            of recently issued tokens for auditing.\n          format: date-time\n          type: string\n      type: object\n    genericError:\n      properties:\n        code:\n          description: The status code\n          example: 404\n          format: int64\n          type: integer\n        debug:\n          description: |-\n            Debug information\n\n            This field is often not exposed to protect against leaking\n            sensitive information.\n          example: SQL field \"foo\" is not a bool.\n          type: string\n        details:\n          description: Further error details\n          properties: {}\n          type: object\n        id:\n          description: |-\n            The error ID\n\n            Useful when trying to identify various errors in application logic.\n          type: string\n        message:\n          description: |-\n            Error message\n\n            The error's message.\n          example: The resource could not be found\n          type: string\n        reason:\n          description: A human-readable reason for the error\n          example: User with ID 1234 does not exist.\n          type: string\n        request:\n          description: |-\n            The request ID\n\n            The request ID is often exposed internally in order to trace\n            errors across service architectures. This is often a UUID.\n          example: d7ef54b1-ec15-46e6-bccb-524b82c035e6\n          type: string\n        status:\n          description: The status description\n          example: Not Found\n          type: string\n      required:\n      - message\n      type: object\n    healthNotReadyStatus:\n      properties:\n        errors:\n          additionalProperties:\n            type: string\n          description: Errors contains a list of errors that caused the not ready\n            status.\n          type: object\n      type: object\n    healthStatus:\n      example:\n        status: status\n      properties:\n        status:\n          description: Status always contains \"ok\".\n          type: string\n      type: object\n    jsonError:\n      description: Error responses are sent when an error (e.g. unauthorized, bad\n        request, ...) occurred.\n      properties:\n        error:\n          description: Name is the error name.\n          example: The requested resource could not be found\n          type: string\n        error_debug:\n          description: Debug contains debug information. This is usually not available\n            and has to be enabled.\n          example: The database adapter was unable to find the element\n          type: string\n        error_description:\n          description: Description contains further information on the nature of the\n            error.\n          example: Object with ID 12345 does not exist\n          type: string\n        status_code:\n          description: Code represents the error status code (404, 403, 401, ...).\n          example: 404\n          format: int64\n          type: integer\n      title: Generic Error Response\n      type: object\n    jsonWebKeySetGeneratorRequest:\n      properties:\n        alg:\n          description: The algorithm to be used for creating the key. Supports \"RS256\",\n            \"ES256\", \"ES512\", \"HS512\", and \"HS256\"\n          type: string\n        kid:\n          description: The kid of the key to be created\n          type: string\n        use:\n          description: |-\n            The \"use\" (public key use) parameter identifies the intended use of\n            the public key. The \"use\" parameter is employed to indicate whether\n            a public key is used for encrypting data or verifying the signature\n            on data. Valid values are \"enc\" and \"sig\".\n          type: string\n      required:\n      - alg\n      - kid\n      - use\n      type: object\n    loginRequest:\n      example:\n        requested_access_token_audience:\n        - requested_access_token_audience\n        - requested_access_token_audience\n        subject: subject\n        oidc_context:\n          login_hint: login_hint\n          ui_locales:\n          - ui_locales\n          - ui_locales\n          id_token_hint_claims: '{}'\n          acr_values:\n          - acr_values\n          - acr_values\n          display: display\n        challenge: challenge\n        client:\n          metadata: '{}'\n          token_endpoint_auth_signing_alg: token_endpoint_auth_signing_alg\n          client_uri: client_uri\n          jwks: '{}'\n          logo_uri: logo_uri\n          created_at: 2000-01-23T04:56:07.000+00:00\n          registration_client_uri: registration_client_uri\n          allowed_cors_origins:\n          - allowed_cors_origins\n          - allowed_cors_origins\n          registration_access_token: registration_access_token\n          client_id: client_id\n          token_endpoint_auth_method: token_endpoint_auth_method\n          userinfo_signed_response_alg: userinfo_signed_response_alg\n          updated_at: 2000-01-23T04:56:07.000+00:00\n          scope: scope\n          request_uris:\n          - request_uris\n          - request_uris\n          client_secret: client_secret\n          backchannel_logout_session_required: true\n          backchannel_logout_uri: backchannel_logout_uri\n          client_name: client_name\n          policy_uri: policy_uri\n          owner: owner\n          audience:\n          - audience\n          - audience\n          post_logout_redirect_uris:\n          - post_logout_redirect_uris\n          - post_logout_redirect_uris\n          grant_types:\n          - grant_types\n          - grant_types\n          subject_type: subject_type\n          redirect_uris:\n          - redirect_uris\n          - redirect_uris\n          sector_identifier_uri: sector_identifier_uri\n          frontchannel_logout_session_required: true\n          frontchannel_logout_uri: frontchannel_logout_uri\n          client_secret_expires_at: 0\n          jwks_uri: jwks_uri\n          request_object_signing_alg: request_object_signing_alg\n          tos_uri: tos_uri\n          contacts:\n          - contacts\n          - contacts\n          response_types:\n          - response_types\n          - response_types\n        session_id: session_id\n        skip: true\n        request_url: request_url\n        requested_scope:\n        - requested_scope\n        - requested_scope\n      properties:\n        challenge:\n          description: |-\n            ID is the identifier (\"login challenge\") of the login request. It is used to\n            identify the session.\n          type: string\n        client:\n          $ref: '#/components/schemas/oAuth2Client'\n        oidc_context:\n          $ref: '#/components/schemas/openIDConnectContext'\n        request_url:\n          description: |-\n            RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which\n            initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but\n            might come in handy if you want to deal with additional request parameters.\n          type: string\n        requested_access_token_audience:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        requested_scope:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        session_id:\n          description: |-\n            SessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag)\n            this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false)\n            this will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back-\n            channel logout. It's value can generally be used to associate consecutive login requests by a certain user.\n          type: string\n        skip:\n          description: |-\n            Skip, if true, implies that the client has requested the same scopes from the same user previously.\n            If true, you can skip asking the user to grant the requested scopes, and simply forward the user to the redirect URL.\n\n            This feature allows you to update / set session information.\n          type: boolean\n        subject:\n          description: |-\n            Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope\n            requested by the OAuth 2.0 client. If this value is set and `skip` is true, you MUST include this subject type\n            when accepting the login request, or the request will fail.\n          type: string\n      required:\n      - challenge\n      - client\n      - request_url\n      - requested_access_token_audience\n      - requested_scope\n      - skip\n      - subject\n      title: Contains information on an ongoing login request.\n      type: object\n    logoutRequest:\n      example:\n        subject: subject\n        challenge: challenge\n        client:\n          metadata: '{}'\n          token_endpoint_auth_signing_alg: token_endpoint_auth_signing_alg\n          client_uri: client_uri\n          jwks: '{}'\n          logo_uri: logo_uri\n          created_at: 2000-01-23T04:56:07.000+00:00\n          registration_client_uri: registration_client_uri\n          allowed_cors_origins:\n          - allowed_cors_origins\n          - allowed_cors_origins\n          registration_access_token: registration_access_token\n          client_id: client_id\n          token_endpoint_auth_method: token_endpoint_auth_method\n          userinfo_signed_response_alg: userinfo_signed_response_alg\n          updated_at: 2000-01-23T04:56:07.000+00:00\n          scope: scope\n          request_uris:\n          - request_uris\n          - request_uris\n          client_secret: client_secret\n          backchannel_logout_session_required: true\n          backchannel_logout_uri: backchannel_logout_uri\n          client_name: client_name\n          policy_uri: policy_uri\n          owner: owner\n          audience:\n          - audience\n          - audience\n          post_logout_redirect_uris:\n          - post_logout_redirect_uris\n          - post_logout_redirect_uris\n          grant_types:\n          - grant_types\n          - grant_types\n          subject_type: subject_type\n          redirect_uris:\n          - redirect_uris\n          - redirect_uris\n          sector_identifier_uri: sector_identifier_uri\n          frontchannel_logout_session_required: true\n          frontchannel_logout_uri: frontchannel_logout_uri\n          client_secret_expires_at: 0\n          jwks_uri: jwks_uri\n          request_object_signing_alg: request_object_signing_alg\n          tos_uri: tos_uri\n          contacts:\n          - contacts\n          - contacts\n          response_types:\n          - response_types\n          - response_types\n        rp_initiated: true\n        request_url: request_url\n        sid: sid\n      properties:\n        challenge:\n          description: |-\n            Challenge is the identifier (\"logout challenge\") of the logout authentication request. It is used to\n            identify the session.\n          type: string\n        client:\n          $ref: '#/components/schemas/oAuth2Client'\n        request_url:\n          description: RequestURL is the original Logout URL requested.\n          type: string\n        rp_initiated:\n          description: RPInitiated is set to true if the request was initiated by\n            a Relying Party (RP), also known as an OAuth 2.0 Client.\n          type: boolean\n        sid:\n          description: SessionID is the login session ID that was requested to log\n            out.\n          type: string\n        subject:\n          description: Subject is the user for whom the logout was request.\n          type: string\n      title: Contains information about an ongoing logout request.\n      type: object\n    nullTime:\n      format: date-time\n      title: NullTime implements sql.NullTime functionality.\n      type: string\n    oAuth2Client:\n      example:\n        metadata: '{}'\n        token_endpoint_auth_signing_alg: token_endpoint_auth_signing_alg\n        client_uri: client_uri\n        jwks: '{}'\n        logo_uri: logo_uri\n        created_at: 2000-01-23T04:56:07.000+00:00\n        registration_client_uri: registration_client_uri\n        allowed_cors_origins:\n        - allowed_cors_origins\n        - allowed_cors_origins\n        registration_access_token: registration_access_token\n        client_id: client_id\n        token_endpoint_auth_method: token_endpoint_auth_method\n        userinfo_signed_response_alg: userinfo_signed_response_alg\n        updated_at: 2000-01-23T04:56:07.000+00:00\n        scope: scope\n        request_uris:\n        - request_uris\n        - request_uris\n        client_secret: client_secret\n        backchannel_logout_session_required: true\n        backchannel_logout_uri: backchannel_logout_uri\n        client_name: client_name\n        policy_uri: policy_uri\n        owner: owner\n        audience:\n        - audience\n        - audience\n        post_logout_redirect_uris:\n        - post_logout_redirect_uris\n        - post_logout_redirect_uris\n        grant_types:\n        - grant_types\n        - grant_types\n        subject_type: subject_type\n        redirect_uris:\n        - redirect_uris\n        - redirect_uris\n        sector_identifier_uri: sector_identifier_uri\n        frontchannel_logout_session_required: true\n        frontchannel_logout_uri: frontchannel_logout_uri\n        client_secret_expires_at: 0\n        jwks_uri: jwks_uri\n        request_object_signing_alg: request_object_signing_alg\n        tos_uri: tos_uri\n        contacts:\n        - contacts\n        - contacts\n        response_types:\n        - response_types\n        - response_types\n      properties:\n        allowed_cors_origins:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        audience:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        backchannel_logout_session_required:\n          description: |-\n            Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout\n            Token to identify the RP session with the OP when the backchannel_logout_uri is used.\n            If omitted, the default value is false.\n          type: boolean\n        backchannel_logout_uri:\n          description: RP URL that will cause the RP to log itself out when sent a\n            Logout Token by the OP.\n          type: string\n        client_id:\n          description: ID  is the id for this client.\n          type: string\n        client_name:\n          description: |-\n            Name is the human-readable string name of the client to be presented to the\n            end-user during authorization.\n          type: string\n        client_secret:\n          description: |-\n            Secret is the client's secret. The secret will be included in the create request as cleartext, and then\n            never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users\n            that they need to write the secret down as it will not be made available again.\n          type: string\n        client_secret_expires_at:\n          description: |-\n            SecretExpiresAt is an integer holding the time at which the client\n            secret will expire or 0 if it will not expire. The time is\n            represented as the number of seconds from 1970-01-01T00:00:00Z as\n            measured in UTC until the date/time of expiration.\n\n            This feature is currently not supported and it's value will always\n            be set to 0.\n          format: int64\n          type: integer\n        client_uri:\n          description: |-\n            ClientURI is an URL string of a web page providing information about the client.\n            If present, the server SHOULD display this URL to the end-user in\n            a clickable fashion.\n          type: string\n        contacts:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        created_at:\n          description: CreatedAt returns the timestamp of the client's creation.\n          format: date-time\n          type: string\n        frontchannel_logout_session_required:\n          description: |-\n            Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be\n            included to identify the RP session with the OP when the frontchannel_logout_uri is used.\n            If omitted, the default value is false.\n          type: boolean\n        frontchannel_logout_uri:\n          description: |-\n            RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query\n            parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the\n            request and to determine which of the potentially multiple sessions is to be logged out; if either is\n            included, both MUST be.\n          type: string\n        grant_types:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        jwks:\n          type: object\n        jwks_uri:\n          description: |-\n            URL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains\n            the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the\n            Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing\n            and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced\n            JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both\n            signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used\n            to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST\n            match those in the certificate.\n          type: string\n        logo_uri:\n          description: LogoURI is an URL string that references a logo for the client.\n          type: string\n        metadata:\n          title: JSONRawMessage represents a json.RawMessage that works well with\n            JSON, SQL, and Swagger.\n          type: object\n        owner:\n          description: Owner is a string identifying the owner of the OAuth 2.0 Client.\n          type: string\n        policy_uri:\n          description: |-\n            PolicyURI is a URL string that points to a human-readable privacy policy document\n            that describes how the deployment organization collects, uses,\n            retains, and discloses personal data.\n          type: string\n        post_logout_redirect_uris:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        redirect_uris:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        registration_access_token:\n          description: RegistrationAccessToken can be used to update, get, or delete\n            the OAuth2 Client.\n          type: string\n        registration_client_uri:\n          description: RegistrationClientURI is the URL used to update, get, or delete\n            the OAuth2 Client.\n          type: string\n        request_object_signing_alg:\n          description: |-\n            JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects\n            from this Client MUST be rejected, if not signed with this algorithm.\n          type: string\n        request_uris:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        response_types:\n          items:\n            type: string\n          title: StringSlicePipeDelimiter de/encodes the string slice to/from a SQL\n            string.\n          type: array\n        scope:\n          description: |-\n            Scope is a string containing a space-separated list of scope values (as\n            described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client\n            can use when requesting access tokens.\n          pattern: ([a-zA-Z0-9\\.\\*]+\\s?)+\n          type: string\n        sector_identifier_uri:\n          description: |-\n            URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a\n            file with a single JSON array of redirect_uri values.\n          type: string\n        subject_type:\n          description: |-\n            SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a\n            list of the supported subject_type values for this server. Valid types include `pairwise` and `public`.\n          type: string\n        token_endpoint_auth_method:\n          description: |-\n            Requested Client Authentication method for the Token Endpoint. The options are client_secret_post,\n            client_secret_basic, private_key_jwt, and none.\n          type: string\n        token_endpoint_auth_signing_alg:\n          description: Requested Client Authentication signing algorithm for the Token\n            Endpoint.\n          type: string\n        tos_uri:\n          description: |-\n            TermsOfServiceURI is a URL string that points to a human-readable terms of service\n            document for the client that describes a contractual relationship\n            between the end-user and the client that the end-user accepts when\n            authorizing the client.\n          type: string\n        updated_at:\n          description: UpdatedAt returns the timestamp of the last update.\n          format: date-time\n          type: string\n        userinfo_signed_response_alg:\n          description: |-\n            JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT\n            [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims\n            as a UTF-8 encoded JSON object using the application/json content-type.\n          type: string\n      title: Client represents an OAuth 2.0 Client.\n      type: object\n    oAuth2TokenIntrospection:\n      description: https://tools.ietf.org/html/rfc7662\n      example:\n        ext: '{}'\n        sub: sub\n        iss: iss\n        active: true\n        obfuscated_subject: obfuscated_subject\n        token_type: token_type\n        client_id: client_id\n        aud:\n        - aud\n        - aud\n        nbf: 1\n        token_use: token_use\n        scope: scope\n        exp: 0\n        iat: 6\n        username: username\n      properties:\n        active:\n          description: |-\n            Active is a boolean indicator of whether or not the presented token\n            is currently active.  The specifics of a token's \"active\" state\n            will vary depending on the implementation of the authorization\n            server and the information it keeps about its tokens, but a \"true\"\n            value return for the \"active\" property will generally indicate\n            that a given token has been issued by this authorization server,\n            has not been revoked by the resource owner, and is within its\n            given time window of validity (e.g., after its issuance time and\n            before its expiration time).\n          type: boolean\n        aud:\n          description: Audience contains a list of the token's intended audiences.\n          items:\n            type: string\n          type: array\n        client_id:\n          description: |-\n            ID is aclient identifier for the OAuth 2.0 client that\n            requested this token.\n          type: string\n        exp:\n          description: |-\n            Expires at is an integer timestamp, measured in the number of seconds\n            since January 1 1970 UTC, indicating when this token will expire.\n          format: int64\n          type: integer\n        ext:\n          description: Extra is arbitrary data set by the session.\n          properties: {}\n          type: object\n        iat:\n          description: |-\n            Issued at is an integer timestamp, measured in the number of seconds\n            since January 1 1970 UTC, indicating when this token was\n            originally issued.\n          format: int64\n          type: integer\n        iss:\n          description: IssuerURL is a string representing the issuer of this token\n          type: string\n        nbf:\n          description: |-\n            NotBefore is an integer timestamp, measured in the number of seconds\n            since January 1 1970 UTC, indicating when this token is not to be\n            used before.\n          format: int64\n          type: integer\n        obfuscated_subject:\n          description: |-\n            ObfuscatedSubject is set when the subject identifier algorithm was set to \"pairwise\" during authorization.\n            It is the `sub` value of the ID Token that was issued.\n          type: string\n        scope:\n          description: |-\n            Scope is a JSON string containing a space-separated list of\n            scopes associated with this token.\n          type: string\n        sub:\n          description: |-\n            Subject of the token, as defined in JWT [RFC7519].\n            Usually a machine-readable identifier of the resource owner who\n            authorized this token.\n          type: string\n        token_type:\n          description: TokenType is the introspected token's type, typically `Bearer`.\n          type: string\n        token_use:\n          description: TokenUse is the introspected token's use, for example `access_token`\n            or `refresh_token`.\n          type: string\n        username:\n          description: |-\n            Username is a human-readable identifier for the resource owner who\n            authorized this token.\n          type: string\n      required:\n      - active\n      title: 'Introspection contains an access token''s session data as specified\n        by IETF RFC 7662, see:'\n      type: object\n    oauth2TokenResponse:\n      description: The Access Token Response\n      example:\n        access_token: access_token\n        refresh_token: refresh_token\n        scope: scope\n        id_token: id_token\n        token_type: token_type\n        expires_in: 0\n      properties:\n        access_token:\n          type: string\n        expires_in:\n          format: int64\n          type: integer\n        id_token:\n          type: string\n        refresh_token:\n          type: string\n        scope:\n          type: string\n        token_type:\n          type: string\n      type: object\n    openIDConnectContext:\n      example:\n        login_hint: login_hint\n        ui_locales:\n        - ui_locales\n        - ui_locales\n        id_token_hint_claims: '{}'\n        acr_values:\n        - acr_values\n        - acr_values\n        display: display\n      properties:\n        acr_values:\n          description: |-\n            ACRValues is the Authentication AuthorizationContext Class Reference requested in the OAuth 2.0 Authorization request.\n            It is a parameter defined by OpenID Connect and expresses which level of authentication (e.g. 2FA) is required.\n\n            OpenID Connect defines it as follows:\n            \u003e Requested Authentication AuthorizationContext Class Reference values. Space-separated string that specifies the acr values\n            that the Authorization Server is being requested to use for processing this Authentication Request, with the\n            values appearing in order of preference. The Authentication AuthorizationContext Class satisfied by the authentication\n            performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a\n            Voluntary Claim by this parameter.\n          items:\n            type: string\n          type: array\n        display:\n          description: |-\n            Display is a string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.\n            The defined values are:\n            page: The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, this is the default display mode.\n            popup: The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate size for a login-focused dialog and should not obscure the entire window that it is popping up over.\n            touch: The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface.\n            wap: The Authorization Server SHOULD display the authentication and consent UI consistent with a \"feature phone\" type display.\n\n            The Authorization Server MAY also attempt to detect the capabilities of the User Agent and present an appropriate display.\n          type: string\n        id_token_hint_claims:\n          description: |-\n            IDTokenHintClaims are the claims of the ID Token previously issued by the Authorization Server being passed as a hint about the\n            End-User's current or past authenticated session with the Client.\n          properties: {}\n          type: object\n        login_hint:\n          description: |-\n            LoginHint hints about the login identifier the End-User might use to log in (if necessary).\n            This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier)\n            and then wants to pass that value as a hint to the discovered authorization service. This value MAY also be a\n            phone number in the format specified for the phone_number Claim. The use of this parameter is optional.\n          type: string\n        ui_locales:\n          description: |-\n            UILocales is the End-User'id preferred languages and scripts for the user interface, represented as a\n            space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value\n            \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation),\n            followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested\n            locales are not supported by the OpenID Provider.\n          items:\n            type: string\n          type: array\n      title: Contains optional information about the OpenID Connect request.\n      type: object\n    patchDocument:\n      description: A JSONPatch document as defined by RFC 6902\n      properties:\n        from:\n          description: A JSON-pointer\n          type: string\n        op:\n          description: The operation to be performed\n          example: '\"replace\"'\n          type: string\n        path:\n          description: A JSON-pointer\n          example: '\"/name\"'\n          type: string\n        value:\n          description: The value to be used within the operations\n          properties: {}\n          type: object\n      required:\n      - op\n      - path\n      type: object\n    patchRequest:\n      description: A JSONPatch request\n      items:\n        $ref: '#/components/schemas/patchDocument'\n      type: array\n    rejectRequest:\n      properties:\n        error:\n          description: |-\n            The error should follow the OAuth2 error format (e.g. `invalid_request`, `login_required`).\n\n            Defaults to `request_denied`.\n          type: string\n        error_debug:\n          description: |-\n            Debug contains information to help resolve the problem as a developer. Usually not exposed\n            to the public but only in the server logs.\n          type: string\n        error_description:\n          description: Description of the error in a human readable format.\n          type: string\n        error_hint:\n          description: Hint to help resolve the error.\n          type: string\n        status_code:\n          description: |-\n            Represents the HTTP status code of the error (e.g. 401 or 403)\n\n            Defaults to 400\n          format: int64\n          type: integer\n      title: The request payload used to accept a login or consent request.\n      type: object\n    requestWasHandledResponse:\n      properties:\n        redirect_to:\n          description: Original request URL to which you should redirect the user\n            if request was already handled.\n          type: string\n      required:\n      - redirect_to\n      title: The response payload sent when there is an attempt to access already\n        handled request.\n      type: object\n    trustJwtGrantIssuerBody:\n      properties:\n        expires_at:\n          description: The \"expires_at\" indicates, when grant will expire, so we will\n            reject assertion from \"issuer\" targeting \"subject\".\n          format: date-time\n          type: string\n        issuer:\n          description: The \"issuer\" identifies the principal that issued the JWT assertion\n            (same as \"iss\" claim in JWT).\n          example: https://jwt-idp.example.com\n          type: string\n        jwk:\n          $ref: '#/components/schemas/JSONWebKey'\n        scope:\n          description: The \"scope\" contains list of scope values (as described in\n            Section 3.3 of OAuth 2.0 [RFC6749])\n          example:\n          - openid\n          - offline\n          items:\n            type: string\n          type: array\n        subject:\n          description: The \"subject\" identifies the principal that is the subject\n            of the JWT.\n          example: mike@example.com\n          type: string\n      required:\n      - expires_at\n      - issuer\n      - jwk\n      - scope\n      - subject\n      type: object\n    trustedJsonWebKey:\n      example:\n        set: https://jwt-idp.example.com\n        kid: 123e4567-e89b-12d3-a456-426655440000\n      properties:\n        kid:\n          description: The \"key_id\" is key unique identifier (same as kid header in\n            jws/jwt).\n          example: 123e4567-e89b-12d3-a456-426655440000\n          type: string\n        set:\n          description: The \"set\" is basically a name for a group(set) of keys. Will\n            be the same as \"issuer\" in grant.\n          example: https://jwt-idp.example.com\n          type: string\n      type: object\n    trustedJwtGrantIssuer:\n      example:\n        public_key:\n          set: https://jwt-idp.example.com\n          kid: 123e4567-e89b-12d3-a456-426655440000\n        expires_at: 2000-01-23T04:56:07.000+00:00\n        subject: mike@example.com\n        scope:\n        - openid\n        - offline\n        created_at: 2000-01-23T04:56:07.000+00:00\n        id: 9edc811f-4e28-453c-9b46-4de65f00217f\n        issuer: https://jwt-idp.example.com\n      properties:\n        created_at:\n          description: The \"created_at\" indicates, when grant was created.\n          format: date-time\n          type: string\n        expires_at:\n          description: The \"expires_at\" indicates, when grant will expire, so we will\n            reject assertion from \"issuer\" targeting \"subject\".\n          format: date-time\n          type: string\n        id:\n          example: 9edc811f-4e28-453c-9b46-4de65f00217f\n          type: string\n        issuer:\n          description: The \"issuer\" identifies the principal that issued the JWT assertion\n            (same as \"iss\" claim in JWT).\n          example: https://jwt-idp.example.com\n          type: string\n        public_key:\n          $ref: '#/components/schemas/trustedJsonWebKey'\n        scope:\n          description: The \"scope\" contains list of scope values (as described in\n            Section 3.3 of OAuth 2.0 [RFC6749])\n          example:\n          - openid\n          - offline\n          items:\n            type: string\n          type: array\n        subject:\n          description: The \"subject\" identifies the principal that is the subject\n            of the JWT.\n          example: mike@example.com\n          type: string\n      type: object\n    trustedJwtGrantIssuers:\n      items:\n        $ref: '#/components/schemas/trustedJwtGrantIssuer'\n      type: array\n    userinfoResponse:\n      description: The userinfo response\n      example:\n        sub: sub\n        website: website\n        zoneinfo: zoneinfo\n        birthdate: birthdate\n        email_verified: true\n        gender: gender\n        profile: profile\n        phone_number_verified: true\n        preferred_username: preferred_username\n        given_name: given_name\n        locale: locale\n        middle_name: middle_name\n        picture: picture\n        updated_at: 0\n        name: name\n        nickname: nickname\n        phone_number: phone_number\n        family_name: family_name\n        email: email\n      properties:\n        birthdate:\n          description: End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004]\n            YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted.\n            To represent only the year, YYYY format is allowed. Note that depending\n            on the underlying platform's date related function, providing just year\n            can result in varying month and day, so the implementers need to take\n            this factor into account to correctly process the dates.\n          type: string\n        email:\n          description: End-User's preferred e-mail address. Its value MUST conform\n            to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon\n            this value being unique, as discussed in Section 5.7.\n          type: string\n        email_verified:\n          description: True if the End-User's e-mail address has been verified; otherwise\n            false. When this Claim Value is true, this means that the OP took affirmative\n            steps to ensure that this e-mail address was controlled by the End-User\n            at the time the verification was performed. The means by which an e-mail\n            address is verified is context-specific, and dependent upon the trust\n            framework or contractual agreements within which the parties are operating.\n          type: boolean\n        family_name:\n          description: Surname(s) or last name(s) of the End-User. Note that in some\n            cultures, people can have multiple family names or no family name; all\n            can be present, with the names being separated by space characters.\n          type: string\n        gender:\n          description: End-User's gender. Values defined by this specification are\n            female and male. Other values MAY be used when neither of the defined\n            values are applicable.\n          type: string\n        given_name:\n          description: Given name(s) or first name(s) of the End-User. Note that in\n            some cultures, people can have multiple given names; all can be present,\n            with the names being separated by space characters.\n          type: string\n        locale:\n          description: End-User's locale, represented as a BCP47 [RFC5646] language\n            tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in\n            lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase,\n            separated by a dash. For example, en-US or fr-CA. As a compatibility note,\n            some implementations have used an underscore as the separator rather than\n            a dash, for example, en_US; Relying Parties MAY choose to accept this\n            locale syntax as well.\n          type: string\n        middle_name:\n          description: Middle name(s) of the End-User. Note that in some cultures,\n            people can have multiple middle names; all can be present, with the names\n            being separated by space characters. Also note that in some cultures,\n            middle names are not used.\n          type: string\n        name:\n          description: End-User's full name in displayable form including all name\n            parts, possibly including titles and suffixes, ordered according to the\n            End-User's locale and preferences.\n          type: string\n        nickname:\n          description: Casual name of the End-User that may or may not be the same\n            as the given_name. For instance, a nickname value of Mike might be returned\n            alongside a given_name value of Michael.\n          type: string\n        phone_number:\n          description: End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED\n            as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2)\n            687 2400. If the phone number contains an extension, it is RECOMMENDED\n            that the extension be represented using the RFC 3966 [RFC3966] extension\n            syntax, for example, +1 (604) 555-1234;ext=5678.\n          type: string\n        phone_number_verified:\n          description: True if the End-User's phone number has been verified; otherwise\n            false. When this Claim Value is true, this means that the OP took affirmative\n            steps to ensure that this phone number was controlled by the End-User\n            at the time the verification was performed. The means by which a phone\n            number is verified is context-specific, and dependent upon the trust framework\n            or contractual agreements within which the parties are operating. When\n            true, the phone_number Claim MUST be in E.164 format and any extensions\n            MUST be represented in RFC 3966 format.\n          type: boolean\n        picture:\n          description: URL of the End-User's profile picture. This URL MUST refer\n            to an image file (for example, a PNG, JPEG, or GIF image file), rather\n            than to a Web page containing an image. Note that this URL SHOULD specifically\n            reference a profile photo of the End-User suitable for displaying when\n            describing the End-User, rather than an arbitrary photo taken by the End-User.\n          type: string\n        preferred_username:\n          description: Non-unique shorthand name by which the End-User wishes to be\n            referred to at the RP, such as janedoe or j.doe. This value MAY be any\n            valid JSON string including special characters such as @, /, or whitespace.\n          type: string\n        profile:\n          description: URL of the End-User's profile page. The contents of this Web\n            page SHOULD be about the End-User.\n          type: string\n        sub:\n          description: Subject - Identifier for the End-User at the IssuerURL.\n          type: string\n        updated_at:\n          description: Time the End-User's information was last updated. Its value\n            is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z\n            as measured in UTC until the date/time.\n          format: int64\n          type: integer\n        website:\n          description: URL of the End-User's Web page or blog. This Web page SHOULD\n            contain information published by the End-User or an organization that\n            the End-User is affiliated with.\n          type: string\n        zoneinfo:\n          description: String from zoneinfo [zoneinfo] time zone database representing\n            the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.\n          type: string\n      type: object\n    version:\n      example:\n        version: version\n      properties:\n        version:\n          description: Version is the service's version.\n          type: string\n      type: object\n    wellKnown:\n      description: |-\n        It includes links to several endpoints (e.g. /oauth2/token) and exposes information on supported signature algorithms\n        among others.\n      example:\n        request_parameter_supported: true\n        claims_parameter_supported: true\n        backchannel_logout_supported: true\n        scopes_supported:\n        - scopes_supported\n        - scopes_supported\n        issuer: https://playground.ory.sh/ory-hydra/public/\n        authorization_endpoint: https://playground.ory.sh/ory-hydra/public/oauth2/auth\n        claims_supported:\n        - claims_supported\n        - claims_supported\n        userinfo_signing_alg_values_supported:\n        - userinfo_signing_alg_values_supported\n        - userinfo_signing_alg_values_supported\n        token_endpoint_auth_methods_supported:\n        - token_endpoint_auth_methods_supported\n        - token_endpoint_auth_methods_supported\n        backchannel_logout_session_supported: true\n        response_modes_supported:\n        - response_modes_supported\n        - response_modes_supported\n        token_endpoint: https://playground.ory.sh/ory-hydra/public/oauth2/token\n        response_types_supported:\n        - response_types_supported\n        - response_types_supported\n        request_uri_parameter_supported: true\n        grant_types_supported:\n        - grant_types_supported\n        - grant_types_supported\n        end_session_endpoint: end_session_endpoint\n        revocation_endpoint: revocation_endpoint\n        userinfo_endpoint: userinfo_endpoint\n        frontchannel_logout_supported: true\n        require_request_uri_registration: true\n        code_challenge_methods_supported:\n        - code_challenge_methods_supported\n        - code_challenge_methods_supported\n        frontchannel_logout_session_supported: true\n        jwks_uri: https://playground.ory.sh/ory-hydra/public/.well-known/jwks.json\n        subject_types_supported:\n        - subject_types_supported\n        - subject_types_supported\n        id_token_signing_alg_values_supported:\n        - id_token_signing_alg_values_supported\n        - id_token_signing_alg_values_supported\n        registration_endpoint: https://playground.ory.sh/ory-hydra/admin/client\n        request_object_signing_alg_values_supported:\n        - request_object_signing_alg_values_supported\n        - request_object_signing_alg_values_supported\n      properties:\n        authorization_endpoint:\n          description: URL of the OP's OAuth 2.0 Authorization Endpoint.\n          example: https://playground.ory.sh/ory-hydra/public/oauth2/auth\n          type: string\n        backchannel_logout_session_supported:\n          description: |-\n            Boolean value specifying whether the OP can pass a sid (session ID) Claim in the Logout Token to identify the RP\n            session with the OP. If supported, the sid Claim is also included in ID Tokens issued by the OP\n          type: boolean\n        backchannel_logout_supported:\n          description: Boolean value specifying whether the OP supports back-channel\n            logout, with true indicating support.\n          type: boolean\n        claims_parameter_supported:\n          description: Boolean value specifying whether the OP supports use of the\n            claims parameter, with true indicating support.\n          type: boolean\n        claims_supported:\n          description: |-\n            JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply\n            values for. Note that for privacy or other reasons, this might not be an exhaustive list.\n          items:\n            type: string\n          type: array\n        code_challenge_methods_supported:\n          description: |-\n            JSON array containing a list of Proof Key for Code Exchange (PKCE) [RFC7636] code challenge methods supported\n            by this authorization server.\n          items:\n            type: string\n          type: array\n        end_session_endpoint:\n          description: URL at the OP to which an RP can perform a redirect to request\n            that the End-User be logged out at the OP.\n          type: string\n        frontchannel_logout_session_supported:\n          description: |-\n            Boolean value specifying whether the OP can pass iss (issuer) and sid (session ID) query parameters to identify\n            the RP session with the OP when the frontchannel_logout_uri is used. If supported, the sid Claim is also\n            included in ID Tokens issued by the OP.\n          type: boolean\n        frontchannel_logout_supported:\n          description: Boolean value specifying whether the OP supports HTTP-based\n            logout, with true indicating support.\n          type: boolean\n        grant_types_supported:\n          description: JSON array containing a list of the OAuth 2.0 Grant Type values\n            that this OP supports.\n          items:\n            type: string\n          type: array\n        id_token_signing_alg_values_supported:\n          description: |-\n            JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token\n            to encode the Claims in a JWT.\n          items:\n            type: string\n          type: array\n        issuer:\n          description: |-\n            URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier.\n            If IssuerURL discovery is supported , this value MUST be identical to the issuer value returned\n            by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.\n          example: https://playground.ory.sh/ory-hydra/public/\n          type: string\n        jwks_uri:\n          description: |-\n            URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate\n            signatures from the OP. The JWK Set MAY also contain the Server's encryption key(s), which are used by RPs\n            to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use)\n            parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage.\n            Although some algorithms allow the same key to be used for both signatures and encryption, doing so is\n            NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of\n            keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.\n          example: https://playground.ory.sh/ory-hydra/public/.well-known/jwks.json\n          type: string\n        registration_endpoint:\n          description: URL of the OP's Dynamic Client Registration Endpoint.\n          example: https://playground.ory.sh/ory-hydra/admin/client\n          type: string\n        request_object_signing_alg_values_supported:\n          description: |-\n            JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects,\n            which are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when\n            the Request Object is passed by value (using the request parameter) and when it is passed by reference\n            (using the request_uri parameter).\n          items:\n            type: string\n          type: array\n        request_parameter_supported:\n          description: Boolean value specifying whether the OP supports use of the\n            request parameter, with true indicating support.\n          type: boolean\n        request_uri_parameter_supported:\n          description: Boolean value specifying whether the OP supports use of the\n            request_uri parameter, with true indicating support.\n          type: boolean\n        require_request_uri_registration:\n          description: |-\n            Boolean value specifying whether the OP requires any request_uri values used to be pre-registered\n            using the request_uris registration parameter.\n          type: boolean\n        response_modes_supported:\n          description: JSON array containing a list of the OAuth 2.0 response_mode\n            values that this OP supports.\n          items:\n            type: string\n          type: array\n        response_types_supported:\n          description: |-\n            JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID\n            Providers MUST support the code, id_token, and the token id_token Response Type values.\n          items:\n            type: string\n          type: array\n        revocation_endpoint:\n          description: URL of the authorization server's OAuth 2.0 revocation endpoint.\n          type: string\n        scopes_supported:\n          description: |-\n            SON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST\n            support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used\n          items:\n            type: string\n          type: array\n        subject_types_supported:\n          description: |-\n            JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include\n            pairwise and public.\n          items:\n            type: string\n          type: array\n        token_endpoint:\n          description: URL of the OP's OAuth 2.0 Token Endpoint\n          example: https://playground.ory.sh/ory-hydra/public/oauth2/token\n          type: string\n        token_endpoint_auth_methods_supported:\n          description: |-\n            JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are\n            client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0\n          items:\n            type: string\n          type: array\n        userinfo_endpoint:\n          description: URL of the OP's UserInfo Endpoint.\n          type: string\n        userinfo_signing_alg_values_supported:\n          description: JSON array containing a list of the JWS [JWS] signing algorithms\n            (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims\n            in a JWT [JWT].\n          items:\n            type: string\n          type: array\n      required:\n      - authorization_endpoint\n      - id_token_signing_alg_values_supported\n      - issuer\n      - jwks_uri\n      - response_types_supported\n      - subject_types_supported\n      - token_endpoint\n      title: WellKnown represents important OpenID Connect discovery metadata\n      type: object\n  securitySchemes:\n    basic:\n      scheme: basic\n      type: http\n    oauth2:\n      flows:\n        authorizationCode:\n          authorizationUrl: https://hydra.demo.ory.sh/oauth2/auth\n          scopes:\n            offline: A scope required when requesting refresh tokens (alias for `offline_access`)\n            offline_access: A scope required when requesting refresh tokens\n            openid: Request an OpenID Connect ID Token\n          tokenUrl: https://hydra.demo.ory.sh/oauth2/token\n      type: oauth2\nx-forwarded-proto: string\nx-request-id: string\nx-original-swagger-version: \"2.0\"\n",
			"canonicalURL": "/github.com/ory/sdk@90149750ce71014072ee0714de2f9d3105889abe/-/blob/clients/hydra/go/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ory/sdk/blob/90149750ce71014072ee0714de2f9d3105889abe/clients/hydra/go/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/oauth2/revoke\": post: security: security \"oauth2\" (index 1): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}