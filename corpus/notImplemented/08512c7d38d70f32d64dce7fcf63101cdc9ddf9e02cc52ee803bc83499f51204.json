{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/seznam/Hackathon-Brno-2021"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "usb-flash-drive-contents-for-contestants/openapi.yaml",
			"byteSize": 13557,
			"content": "openapi: 3.0.1\ninfo:\n  title: Comments\n  description: REST API for managing comments related to web pages.\n  version: 1.0.0\nservers:\n- url: http://localhost:8000/\ntags:\n- name: comment\npaths:\n  /webPage/{location}/comment:\n    get:\n      tags:\n      - comment\n      summary:\n        Used to retrieve comments related to the specified web page. The\n        returned comments are chronologically sorted from the oldest to the\n        newest. The method returns the beginning of root comments if no \"after\"\n        cursor is provided.\n      parameters:\n      - name: location\n        in: path\n        description:\n          URL of the web page for which the comments should be retrieved. No\n          URL normalization is required or expected from the API.\n        required: true\n        schema:\n          $ref: '#/components/schemas/URL'\n      - name: limit\n        in: query\n        description:\n          The maximum number of top-level (relative to the level referenced by\n          the cursor) comments to retrieve. The limit must be a positive\n          integer that fits within the range of a 32-bit signed integer (up to\n          2 147 483 647).\n        required: true\n        schema:\n          type: number\n          format: int32\n          minimum: 1\n      - name: after\n        in: query\n        description:\n          Cursor pointing to a comment (which can be either top-level or a\n          reply). The API must return comments created after the referenced\n          comments and at the referenced comment's level within the tree of\n          comments related to the web page.\n        schema:\n          $ref: '#/components/schemas/Cursor'\n      - name: replies1stLevelLimit\n        in: query\n        description:\n          The maximum number of direct replies to top level of the returned\n          comments to return. The returned top-level comments won't have the\n          replies property set if this parameter is omitted.\n        schema:\n          type: number\n          format: int32\n          minimum: 1\n      - name: replies2ndLevelLimit\n        in: query\n        description:\n          The maximum number of replies to replies to top-level returned\n          comments to return. The 1st level replies won't have the replies\n          property set if this parameter is omitted.\n        schema:\n          type: number\n          format: int32\n          minimum: 1\n      - name: replies3rdLevelLimit\n        in: query\n        description:\n          The maximum number of 3rd-level replies (replies to replies to\n          replies) to top-level returned comments to return. The 2nd level\n          replies won't have the relies property set if this parameter is\n          omitted.\n        schema:\n          type: number\n          format: int32\n          minimum: 1\n      responses:\n        200:\n          description: The requested comments.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CommentsConnection'\n        400:\n          description:\n            The input parameters are invalid (e.g. negative or zero limit or a\n            malformed cursor) or do not make sense (e.g. replies2ndLevelLimit\n            is set, but replies1stLevelLimit is missing).\n\n    post:\n      tags:\n      - comment\n      summary: Posts a new comment related to the specified web page.\n      parameters:\n      - name: location\n        in: path\n        description: URL of the web page for which the comment is being posted.\n        required: true\n        schema:\n          $ref: '#/components/schemas/URL'\n      requestBody:\n        description: Data of a comment to post.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CommentInput'\n      responses:\n        201:\n          description:\n            The created comment. While the comment's ID must be generated\n            synchronously, the comment itself may be persisted at a later\n            moment.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n        400:\n          description:\n            The comment data is invalid, e.g. the text is too long or the\n            specified parent does not exist or is related to a different web\n            page.\n\n  /comment/{id}:\n    get:\n      tags:\n      - comment\n      summary: Used to retrieve a single comment.\n      parameters:\n      - name: id\n        in: path\n        description: ID of the comment to retrieve.\n        required: true\n        schema:\n          $ref: '#/components/schemas/ID'\n      responses:\n        200:\n          description: The requested comment.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n        404:\n          description:\n            The comment either does not exist yet or has not been persisted yet\n            (applies only if comments are not persisted synchronously and the\n            API is unable to query the queue of comments to persist).\n\n  /comment:\n    delete:\n      tags:\n      - comment\n      summary: Used to delete all comments.\n      responses:\n        204:\n          description:\n            Confirmation that all comments (persisted and enqueued to be\n            persisted) have been deleted.\n\n  /batch:\n    post:\n      tags:\n      - comment\n      summary:\n        Used to perform multiple operations in one request. Only read\n        operations are supported.\n      requestBody:\n        description: The operations to perform.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchInput'\n      responses:\n        200:\n          description:\n            Results of all of the requested operations, in order matching the\n            requested operations.\n          content:\n            application/jsn:\n              schema:\n                $ref: '#/components/schemas/BatchResult'\n        400:\n          description:\n            Returned if any of the requested operations would result in a 4xx\n            status code (except for 404 from fetching a single comment).\n\ncomponents:\n  schemas:\n    ID:\n      type: string\n      description:\n        Unique identifier of a record. This can be any non-empty string of up\n        to 36 bytes (36 bytes length is derived from the UUID textual\n        representation) when using UTF-8 encoding.\n      minLength: 1\n      maxLength: 36\n\n    MillisecondUnixTimestamp:\n      type: integer\n      format: int32\n      description:\n        Int representing a UNIX timestamp with millisecond precision.\n\n    URL:\n      type: string\n      description:\n        String containing a valid URL to a website (with either https or http\n        protocol).\n\n    Cursor:\n      type: string\n      description:\n        String containing information needed for pagination. This is usually\n        some info encoded using base64, but the server can use anything it\n        needs or prefers.\n\n    Node:\n      type: object\n      description:\n        An object with an ID unique across all records available via this API.\n        UUID (v1, v2 or v5) is recommended.\n      properties:\n        id:\n          # The universally unique identifier of this record.\n          $ref: '#/components/schemas/ID'\n      required:\n      - id\n\n    PageInfo:\n      type: object\n      description: Pagination-related information.\n      properties:\n        hasNextPage:\n          type: boolean\n          description:\n            True iff there is another page of records available at the moment\n            the information was retrieved. The endCursor must be non-null if\n            this flag is true.\n        endCursor:\n          # The cursor pointing to the end of the current page of records, used\n          # to access the next page.\n          $ref: '#/components/schemas/Cursor'\n      required:\n      - hasNextPage\n\n    Connection:\n      type: object\n      description: Properties shared by all record connections.\n      properties:\n        pageInfo:\n          # Pagination-related information.\n          $ref: '#/components/schemas/PageInfo'\n      required:\n      - pageInfo\n\n    Edge:\n      type: object\n      description:\n        Properties shared by all connection edges in the graph of records.\n      properties:\n        cursor:\n          # Cursor pointing to this edge in the current pagination context.\n          # Used to retrieve records immediately following this one. The API\n          # must preserve the current records ordering when requesting\n          # following records using this cursor.\n          $ref: '#/components/schemas/Cursor'\n      required:\n      - cursor\n\n    CommentsConnection:\n      type: object\n      description:\n        Records connection containing a single page of comment records.\n      allOf:\n      - $ref: '#/components/schemas/Connection'\n      properties:\n        edges:\n          type: array\n          items:\n            $ref: '#/components/schemas/CommentsEdge'\n      required:\n      - edges\n\n    CommentsEdge:\n      type: object\n      description:\n        Edge of a comment records connection referencing a single comment.\n      allOf:\n      - $ref: '#/components/schemas/Edge'\n      properties:\n        node:\n          $ref: '#/components/schemas/Comment'\n      required:\n      - node\n\n    CommentData:\n      type: object\n      description: Common data related to a single comment.\n      properties:\n        author:\n          # Unique identifier of the comment's author. This can be any\n          # non-empty string of up to 36 bytes when using UTF-8 encoding.\n          $ref: '#/components/schemas/ID'\n        text:\n          type: string\n          description:\n            Comment's actual content. The content must be at least 5 bytes\n            long, may contain any valid Unicode characters and can be up to\n            128 KiB long when using UTF-8 encoding.\n      required:\n      - author\n      - text\n\n    Comment:\n      type: object\n      description:\n        Record representing a persisted (or soon-to-be persisted) comment.\n      allOf:\n      - $ref: '#/components/schemas/Node'\n      - $ref: '#/components/schemas/CommentData'\n      properties:\n        parent:\n          # ID of the comment this comment is a reply to. Set to null for root\n          # comments (comments that are not replies to other comments).\n          $ref: '#/components/schemas/Node'\n        created:\n          # The UNIX timestamp with millisecond precision of the moment the\n          # comment has been accepted by the API. Note the comment may be\n          # persisted at a later moment.\n          $ref: '#/components/schemas/MillisecondUnixTimestamp'\n        repliesStartCursor:\n          # A cursor that can be used to retrieve the direct replies to this\n          # comment (this is an alternative to requesting the replies field).\n          # The comments returned when using this cursor are chronologically\n          # sorted from the oldest to the newest.\n          $ref: '#/components/schemas/Cursor'\n        replies:\n          # Contains the direct replies to this comment (if requested,\n          # otherwise null or omitted). The returned comments are\n          # chronologically sorted from the oldest to the newest. Replies to\n          # the returned comments can be retrieved using the replies field of\n          # the returned comments (if requested) or using their\n          # repliesStartCursor cursors.\n          $ref: '#/components/schemas/CommentsConnection'\n      required:\n      - created\n      - repliesStartCursor\n\n    CommentInput:\n      type: object\n      description: A\n      allOf:\n      - $ref: '#/components/schemas/CommentData'\n      properties:\n        parent:\n          # Unique identifier of the comment to which this comment replies. Use\n          # null for root comments (comments that are not replies to other\n          # comments).\n          $ref: '#/components/schemas/ID'\n\n    GetCommentInput:\n      type: object\n      description:\n        Input for read operation for getting a single comment by its ID. Used\n        by the batch operation.\n      properties:\n        id:\n          $ref: '#/components/schemas/ID'\n      required:\n      - id\n\n    GetCommentsInput:\n      type: object\n      description:\n        Input for read operation for traversing the comments tree. Used by the\n        batch operation.\n      properties:\n        location:\n          $ref: '#/components/schemas/URL'\n        limit:\n          type: number\n          format: int32\n          minimum: 1\n        after:\n          $ref: '#/components/schemas/Cursor'\n        replies1stLevelLimit:\n          type: number\n          format: int32\n          minimum: 1\n        replies2ndLevelLimit:\n          type: number\n          format: int32\n          minimum: 1\n        replies3rdLevelLimit:\n          type: number\n          format: int32\n          minimum: 1\n      required:\n      - location\n      - limit\n\n    BatchInput:\n      type: array\n      description: Input for the batch operation.\n      items:\n        oneOf:\n        - $ref: '#/components/schemas/GetCommentInput'\n        - $ref: '#/components/schemas/GetCommentsInput'\n\n    BatchResult:\n      type: array\n      description:\n        Result of a successful call to the batch operation. If an operation to\n        fetch a single comment fails to locate the specified comment, the\n        result of the operation would be null.\n      items:\n        oneOf:\n        - $ref: '#/components/schemas/Comment'\n        - $ref: '#/components/schemas/CommentsConnection'\n",
			"canonicalURL": "/github.com/seznam/Hackathon-Brno-2021@bb5366715f6310706789bfff4f4a55d7e7dc20ee/-/blob/usb-flash-drive-contents-for-contestants/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/seznam/Hackathon-Brno-2021/blob/bb5366715f6310706789bfff4f4a55d7e7dc20ee/usb-flash-drive-contents-for-contestants/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/batch\": post: responses: 200: contents: unsupported content types: [application/jsn]",
	"NotImplemented": [
		"unsupported content types"
	]
}