{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wonder-wonder/cakemix-server"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "docs/api.yml",
			"byteSize": 35714,
			"content": "openapi: 3.0.0\ninfo:\n  title: Cakemix Server API\n  description: Definition of Cakemix Server API\n  version: 1.4.0\n  contact:\n    name: Wonder Wonder\n    url: 'https://wonder-wonder.xyz'\n    email: contact@wonder-wonder.xyz\nservers:\n  - url: 'http://localhost:8081/v1'\n    description: Server URL for localhost development\npaths:\n  /auth/login:\n    post:\n      summary: Login and get token\n      operationId: post-login\n      responses:\n        '200':\n          description: Authentication is success and logged in. Server returns JWT token.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthLoginResModel'\n        '401':\n          description: The ID or password is incorrect.\n      tags:\n        - Auth\n      description: Request login with email and password and returns JWT token.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthLoginReqModel'\n        description: Login request.\n  /auth/logout:\n    post:\n      summary: Logout and remove session key\n      operationId: post-logout\n      description: Request to logout. Server removes session key.\n      tags:\n        - Auth\n      responses:\n        '200':\n          description: Removed session and logout successfully.\n        '401':\n          description: Invalid token.\n      parameters: []\n  /auth/check/token:\n    get:\n      summary: Check token\n      tags:\n        - Auth\n      responses:\n        '200':\n          description: Token is valid.\n        '401':\n          description: Invalid token.\n      operationId: get-check-token\n      description: Checks JWT token is valid.\n  /auth/regist/gen/token:\n    get:\n      summary: Generate new key for registering new user\n      operationId: get-new-token-regist\n      tags:\n        - Auth\n      description: Request to generate new key for registering new user.\n      responses:\n        '200':\n          description: The request is accepted with no error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthRegistNewTokenResModel'\n        '403':\n          description: The user has not permission to generate token\n  '/auth/check/user/{user_name}/{token}':\n    parameters:\n      - schema:\n          type: string\n        name: token\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: user_name\n        in: path\n        required: true\n    get:\n      summary: Check username\n      tags:\n        - Auth\n      responses:\n        '200':\n          description: No user\n        '401':\n          description: invalid token\n        '409':\n          description: username has already taken\n      operationId: get-auth-check-user-username\n      description: Check username is not taken by other\n      security: []\n      parameters: []\n  '/auth/regist/pre/{token}':\n    parameters:\n      - schema:\n          type: string\n        name: token\n        in: path\n        required: true\n        description: Verification token for registration.\n    post:\n      summary: Request to register new user\n      operationId: post-regist\n      tags:\n        - Auth\n      description: Request to register new user. Server sends verification email.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthRegistReqModel'\n        description: Regist information\n      responses:\n        '200':\n          description: The request is accepted with no error.\n        '409':\n          description: The username or email is already used. Server cannot accept the request.\n    get:\n      summary: ''\n      operationId: get-auth-regist-pre-token\n      responses:\n        '200':\n          description: token is valid.\n        '401':\n          description: Invalid token.\n      description: Request to verify invitation link\n      tags:\n        - Auth\n      security: []\n  '/auth/regist/verify/{token}':\n    parameters:\n      - schema:\n          type: string\n        name: token\n        in: path\n        required: true\n        description: Verification token for registration.\n    post:\n      summary: Verify registration verification token\n      operationId: post-regist-verify\n      responses:\n        '200':\n          description: The token is accepted and user is registered successfully.\n        '404':\n          description: The token is invalid or expired.\n      tags:\n        - Auth\n      description: 'Verify registration verification token. After verification, the account is added to user data and activated.'\n      security: []\n  /auth/pass/change:\n    post:\n      summary: Request to change password\n      operationId: post-pass-change\n      responses:\n        '200':\n          description: The password is changed successfully.\n        '401':\n          description: Invalid token.\n        '403':\n          description: Old password is wrong.\n      tags:\n        - Auth\n      description: Request to change password.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthPassChangeReqModel'\n        description: Old and new password.\n  /auth/pass/reset:\n    post:\n      summary: Request to reset password\n      operationId: post-pass-reset\n      tags:\n        - Auth\n      description: Request to reset password. Server sends verification email.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthPassResetReqModel'\n        description: Email address to reset password.\n      responses:\n        '200':\n          description: The request is accepted.\n        '400':\n          description: The request is invalid. (Email is invalid.)\n  '/auth/pass/reset/verify/{token}':\n    get:\n      summary: Check password reset token\n      tags:\n        - Auth\n      responses:\n        '200':\n          description: The token is valid.\n        '401':\n          description: Invalid token.\n      operationId: get-pass-reset-verify\n      description: 'Check verification token to reset password. To change password with token, use POST methods.'\n      security: []\n    post:\n      summary: Reset password\n      operationId: post-pass-reset-verify\n      responses:\n        '200':\n          description: The request is accepted.\n        '401':\n          description: Invalid token.\n      tags:\n        - Auth\n      description: Reset password with new one.\n      security: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AuthPassChangeReqModel'\n        description: New password.\n    parameters:\n      - schema:\n          type: string\n        name: token\n        in: path\n        required: true\n  /auth/session:\n    get:\n      summary: Get session list\n      tags:\n        - Auth\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AuthSessionModel'\n      operationId: get-auth-session\n      description: Get session list\n  '/auth/session/{id}':\n    delete:\n      summary: Revoke session\n      operationId: delete-auth-session\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: Not Found\n      tags:\n        - Auth\n      description: Revoke session\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n  /auth/log:\n    get:\n      summary: Get logs\n      tags:\n        - Auth\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthLogResModel'\n      operationId: get-auth-log\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: targetid\n          description: target team/userUUID\n        - schema:\n            type: integer\n          in: query\n          name: offset\n          description: Offset\n        - schema:\n            type: integer\n          in: query\n          name: limit\n          description: Limit\n        - schema:\n            type: string\n          in: query\n          name: type\n          description: target log type\n      description: Get log list\n  '/auth/lock/{uuid}':\n    get:\n      summary: Get user lock status\n      tags:\n        - Auth\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthLockResModel'\n        '403':\n          description: Forbidden\n      operationId: get-auth-lock\n      description: Get user lock status\n    post:\n      summary: Lock user\n      operationId: post-auth-lock\n      responses:\n        '200':\n          description: OK\n        '403':\n          description: Forbidden\n      tags:\n        - Auth\n      description: Lock user\n    delete:\n      summary: Unlock user\n      operationId: delete-auth-lock\n      responses:\n        '200':\n          description: OK\n        '403':\n          description: Forbidden\n      tags:\n        - Auth\n      description: Unlock user\n    parameters:\n      - schema:\n          type: string\n        name: uuid\n        in: path\n        required: true\n  /team:\n    post:\n      summary: Create team\n      operationId: post-team\n      responses:\n        '200':\n          description: The new team is created successfully.\n        '401':\n          description: Invalid token.\n        '409':\n          description: The teamname is already used.\n      tags:\n        - Team\n      description: Create new team.\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: name\n          description: Teamname\n          required: true\n    parameters: []\n  '/team/{teamid}':\n    parameters:\n      - schema:\n          type: string\n        name: teamid\n        in: path\n        required: true\n        description: Team UUID\n    delete:\n      summary: Remove team\n      operationId: delete-team-teamid\n      responses:\n        '200':\n          description: The team is removed successfully.\n        '401':\n          description: Invalid token.\n        '403':\n          description: Removing team is not allowed.\n        '404':\n          description: The team is not found.\n      tags:\n        - Team\n      description: Remove the team.\n  '/team/{teamid}/member':\n    parameters:\n      - schema:\n          type: string\n        name: teamid\n        in: path\n        required: true\n    get:\n      summary: Get team member list\n      parameters:\n        - schema:\n            type: integer\n          in: query\n          name: limit\n          description: member limit\n        - schema:\n            type: integer\n          in: query\n          name: offset\n          description: member offset\n        - schema:\n            type: string\n          in: query\n          name: uuid\n          description: uuid\n      responses:\n        '200':\n          description: Got team member list\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Member list\n                properties:\n                  total:\n                    type: integer\n                  members:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/MemberInfoModel'\n        '404':\n          description: The team is not found.\n      operationId: get-team-teamid-member\n      description: Get team member list.\n      tags:\n        - Team\n    post:\n      summary: Add the member into team\n      operationId: post-team-teamid-member\n      responses:\n        '200':\n          description: Added the member into the team.\n        '401':\n          description: Invalid token.\n        '403':\n          description: Adding member into the team is not allowed.\n        '404':\n          description: The team is not found.\n      description: Add the member into the team.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MemberInfoModel'\n        description: Member info.\n      tags:\n        - Team\n    put:\n      summary: Modify member info in the team\n      operationId: put-team-teamid-member\n      responses:\n        '200':\n          description: Modified the member info.\n        '401':\n          description: Invalid token.\n        '403':\n          description: Modifying member info team is not allowed.\n        '404':\n          description: The team is not found.\n      description: Modify member info in the team.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MemberInfoModel'\n        description: Member info.\n      tags:\n        - Team\n    delete:\n      summary: Remove the member from the team\n      operationId: delete-team-teamid-member\n      responses:\n        '200':\n          description: Removed the member from the tean.\n        '401':\n          description: Invalid token.\n        '403':\n          description: Removing member from the team is not allowed.\n        '404':\n          description: The team is not found.\n      description: Remove the member from the team.\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: uuid\n          description: Removing member UUID\n          required: true\n      tags:\n        - Team\n  '/profile/{uuid}':\n    parameters:\n      - schema:\n          type: string\n        name: uuid\n        in: path\n        required: true\n        description: Username or teamname\n    get:\n      summary: Get profile\n      responses:\n        '200':\n          description: Got the profile.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProfileModel'\n        '404':\n          description: The user/team is not found.\n      operationId: get-user-profile-uuid\n      tags:\n        - Profile\n      description: Get profile for user/team.\n    put:\n      summary: Edit profile\n      operationId: put-user-profile-uuid\n      responses:\n        '200':\n          description: The profile is updated successfully.\n        '401':\n          description: Invalid token.\n        '403':\n          description: Update of profile is not allowed.\n        '404':\n          description: The user/team is not found.\n      tags:\n        - Profile\n      description: Edit profile\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProfileModel'\n        description: |-\n          Updated profile data. The parameters can be omitted if no update.\n          Some parameter cannot be changed because of readonly.\n  '/doc/{folder_id}':\n    parameters:\n      - schema:\n          type: string\n        name: folder_id\n        in: path\n        required: true\n        description: Folder ID\n    post:\n      summary: Make a new document\n      responses:\n        '200':\n          description: Create new a document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentResModel'\n        '400':\n          description: Cannot create new document.\n      operationId: create-new-doc\n      tags:\n        - Document\n      description: Just create new document and will return document id\n  '/doc/{doc_id}':\n    parameters:\n      - schema:\n          type: string\n        name: doc_id\n        in: path\n        required: true\n        description: Document ID\n    delete:\n      summary: Delete a document\n      responses:\n        '200':\n          description: Delete the document.\n        '400':\n          description: Cannot delete the document.\n      operationId: delete-doc\n      tags:\n        - Document\n      description: Delete a document\n    put:\n      summary: Modify document property\n      operationId: put-doc-doc_id\n      responses:\n        '200':\n          description: Modified the document property.\n        '400':\n          description: Cannot modify the document property.\n      tags:\n        - Document\n      description: Modify document property\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DocumentModifyReqModel'\n    get:\n      summary: Get document information\n      operationId: get-doc-doc_id\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentModel'\n      tags:\n        - Document\n      description: Get document information\n  '/doc/{doc_id}/move/{folder_id}':\n    parameters:\n      - schema:\n          type: string\n        name: doc_id\n        in: path\n        description: Document ID\n        required: true\n      - schema:\n          type: string\n        name: folder_id\n        in: path\n        description: Folder ID\n        required: true\n    put:\n      summary: Move document to target folder\n      responses:\n        '200':\n          description: Move document to target folder.\n        '400':\n          description: Cannot move document.\n      operationId: move-doc\n      tags:\n        - Document\n      description: Move document to target folder\n  '/doc/{doc_id}/copy/{folder_id}':\n    parameters:\n      - schema:\n          type: string\n        name: doc_id\n        in: path\n        required: true\n        description: Document ID\n      - schema:\n          type: string\n        name: folder_id\n        in: path\n        required: true\n        description: Folder ID\n    post:\n      summary: Copy document to target folder\n      operationId: post-doc-doc_id-copy-folder_id\n      responses:\n        '200':\n          description: Document is duplicated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentResModel'\n        '400':\n          description: Connot copy the document.\n      description: Copy document to target folder\n      tags:\n        - Document\n  '/doc/{doc_id}/ws':\n    parameters:\n      - schema:\n          type: string\n        name: doc_id\n        in: path\n        required: true\n    get:\n      summary: Open OT session\n      tags:\n        - Document\n      responses:\n        '101':\n          description: Switch to web socket protocol\n      operationId: get-doc-doc_id-ws\n      description: Open OT session for the document\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: token\n          description: security token\n          required: true\n      security: []\n  '/folder/{folder_id}':\n    parameters:\n      - schema:\n          type: string\n        name: folder_id\n        in: path\n        required: true\n        description: Folder ID\n    get:\n      summary: Get document and folder list in the target folder\n      responses:\n        '200':\n          description: Move items from target parent.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FolderListModel'\n        '404':\n          description: Not found target folder.\n      operationId: get-list\n      tags:\n        - Folder\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: type\n          required: true\n          description: 'type that which list will be returned (all, folder, document)'\n      description: Get document and folder list in the target folder\n    post:\n      summary: Make a new folder\n      responses:\n        '200':\n          description: Create new a folder.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  folder_id:\n                    type: string\n        '400':\n          description: Cannot create new folder.\n      operationId: create-new-folder\n      tags:\n        - Folder\n      description: Make a new folder\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: name\n          required: true\n          description: Folder name\n    delete:\n      summary: Delete a folder\n      responses:\n        '200':\n          description: delete the folder.\n        '400':\n          description: Cannot delete the folder.\n      operationId: delete-folder\n      tags:\n        - Folder\n      description: Delete a folder\n    put:\n      summary: Modify folder property\n      responses:\n        '200':\n          description: Modified the folder property.\n        '400':\n          description: Cannot modify the folder property.\n      operationId: modify-folder\n      tags:\n        - Folder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FolderModifyReqModel'\n          application/javascript:\n            schema:\n              type: object\n              properties: {}\n      description: Modify folder property\n  '/folder/{folder_id}/move/{target_folder_id}':\n    parameters:\n      - schema:\n          type: string\n        name: folder_id\n        in: path\n        description: Folder ID\n        required: true\n      - schema:\n          type: string\n        name: target_folder_id\n        in: path\n        description: Target Folder ID\n        required: true\n    put:\n      summary: Move folder to target parent.\n      responses:\n        '200':\n          description: Moved folder to target parent.\n        '400':\n          description: Cannot move folder.\n      operationId: move-folder\n      tags:\n        - Folder\n      description: Move folder to target parent.\n  /search/team:\n    get:\n      summary: Get team list\n      tags:\n        - Search\n      description: Get team list\n      responses:\n        '200':\n          description: Got team list.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                  teams:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ProfileModel'\n      operationId: get-search-team\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: q\n          description: search filter\n        - schema:\n            type: integer\n          in: query\n          name: limit\n          description: search limit\n        - schema:\n            type: integer\n          in: query\n          name: offset\n          description: search offset\n  /search/user:\n    get:\n      summary: Get user list\n      tags:\n        - Search\n      description: Get user list\n      responses:\n        '200':\n          description: Got user list.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ProfileModel'\n      operationId: get-search-user\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: q\n          description: search filter\n        - schema:\n            type: integer\n          in: query\n          name: limit\n          description: search limit\n        - schema:\n            type: integer\n          in: query\n          name: offset\n          description: search offset\n        - schema:\n            type: string\n          in: query\n          name: filter\n          description: search condition filter\n  /image:\n    post:\n      summary: Upload image\n      operationId: post-image\n      responses:\n        '200':\n          description: Image is uploaded successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    description: Image ID\n      tags:\n        - Image\n      description: Upload image\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              description: ''\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n              required:\n                - file\n            examples: {}\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties: {}\n        description: ''\n  '/image/{imgid}':\n    parameters:\n      - schema:\n          type: string\n        name: imgid\n        in: path\n        required: true\n        description: Image ID\n    get:\n      summary: Get uploaded image\n      tags:\n        - Image\n      responses:\n        '200':\n          description: Got image\n      operationId: get-image-imgid\n      security: []\n      description: Get uploaded image\ncomponents:\n  schemas:\n    JWT:\n      title: JWT\n      type: object\n      description: |-\n        JSON Web Token(JWT) is used for authorization.\n        Geekers API uses only requred items.\n      properties:\n        iss:\n          type: string\n          description: Issuer Claim.\n          example: geekers\n        sub:\n          type: string\n          description: Subject Claim.\n          example: login\n        aud:\n          type: string\n          description: Audience Claim. It keeps UUID.\n          example: u123456\n        exp:\n          type: integer\n          description: Expiration Time Claim.\n          example: 1609426800\n        nbf:\n          type: integer\n          description: Not Before Claim.\n        iat:\n          type: integer\n          description: Issued At Claim.\n        jti:\n          type: string\n          description: JWT ID Claim. It keeps session ID.\n          example: sessionkey\n      required:\n        - aud\n        - exp\n        - jti\n    AuthRegistReqModel:\n      title: AuthRegistReqModel\n      type: object\n      description: Request model for /auth/regist\n      properties:\n        email:\n          type: string\n          description: Email address\n          format: email\n        username:\n          type: string\n          description: Username\n        password:\n          type: string\n          description: Password\n      required:\n        - email\n        - username\n        - password\n    AuthRegistNewTokenResModel:\n      title: AuthRegistNewTokenResModel\n      type: object\n      description: Request model for /auth/regist/new/token\n      properties:\n        token:\n          type: string\n          description: Token for registering\n      required:\n        - token\n    AuthLoginReqModel:\n      title: AuthLoginReqModel\n      type: object\n      description: Request model for /auth/login\n      properties:\n        id:\n          type: string\n          description: Email address or username\n        pass:\n          type: string\n          description: Password\n      required:\n        - id\n        - pass\n    AuthLoginResModel:\n      title: AuthLoginResModel\n      type: object\n      description: Response model for /auth/login\n      properties:\n        jwt:\n          type: string\n          description: JWT token\n      required:\n        - jwt\n    AuthPassChangeReqModel:\n      title: AuthPassChangeReqModel\n      type: object\n      description: 'Request model for /auth/pass/change and /auth/pass/reset/verify/{token}'\n      properties:\n        oldpass:\n          type: string\n          description: Old password\n        newpass:\n          type: string\n          description: New password\n      required:\n        - newpass\n    AuthPassResetReqModel:\n      title: AuthPassResetReqModel\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n          description: Email for user to reset password\n      required:\n        - email\n      description: Request model for /auth/pass/reset\n    ProfileModel:\n      title: ProfileModel\n      type: object\n      description: |-\n        Profile model for get and post of /profile/{name}.\n        Required items are attached in child items.\n      properties:\n        uuid:\n          type: string\n          description: UUID for user/team\n        name:\n          type: string\n          description: Username or teamname\n        bio:\n          type: string\n          description: Biography\n        icon_uri:\n          type: string\n          description: IconURI\n          format: uri\n        created_at:\n          type: integer\n          description: User/team creation date\n        attr:\n          type: string\n          description: 'Attribute(Official, SysAdmin)'\n        is_team:\n          type: boolean\n          description: Team or not\n        teams:\n          type: array\n          description: List for joining teams\n          items:\n            $ref: '#/components/schemas/ProfileModel'\n        lang:\n          type: string\n          description: Language\n        is_admin:\n          type: boolean\n          description: Admin or not\n        is_lock:\n          type: boolean\n      required:\n        - uuid\n        - name\n        - icon_uri\n        - attr\n        - is_team\n    MemberInfoModel:\n      title: MemberInfoModel\n      description: 'Member info model for /team/{teamid}/member'\n      type: object\n      properties:\n        member:\n          oneOf:\n            - $ref: '#/components/schemas/ProfileModel'\n            - type: string\n              description: UUID\n          description: Member profile or UUID\n        permission:\n          type: integer\n          description: Permission\n    DocumentModel:\n      title: DocumentModel\n      description: Document model\n      type: object\n      properties:\n        owner:\n          oneOf:\n            - $ref: '#/components/schemas/ProfileModel'\n            - type: string\n              description: UUID\n        updater:\n          oneOf:\n            - $ref: '#/components/schemas/ProfileModel'\n            - type: string\n              description: UUID\n        title:\n          type: string\n          description: Documentation\n        body:\n          type: string\n          description: Documentation\n        permission:\n          type: integer\n          description: Permission\n        created_at:\n          type: integer\n          description: document creation date\n        updated_at:\n          type: integer\n          description: document creation date\n        uuid:\n          type: string\n        editable:\n          type: boolean\n        parentfolderid:\n          type: string\n        revision:\n          type: integer\n    DocumentResModel:\n      title: DocumentResModel\n      type: object\n      description: Response of document creation\n      properties:\n        doc_id:\n          type: string\n          description: Documentation\n      required:\n        - doc_id\n    FolderModel:\n      title: FolderModel\n      description: Folder model\n      type: object\n      properties:\n        owner:\n          oneOf:\n            - $ref: '#/components/schemas/ProfileModel'\n            - type: string\n              description: UUID\n        updater:\n          oneOf:\n            - $ref: '#/components/schemas/ProfileModel'\n            - type: string\n              description: UUID\n        permission:\n          type: integer\n          description: Permission\n        created_at:\n          type: integer\n          description: folder creation date\n        updated_at:\n          type: integer\n          description: folder creation date\n        name:\n          type: string\n        uuid:\n          type: string\n        editable:\n          type: boolean\n    BreadcrumbModel:\n      title: BreadcrumbModel\n      type: object\n      description: Breadcrumb\n      properties:\n        folder_id:\n          type: string\n        title:\n          type: string\n    FolderModifyReqModel:\n      title: FolderModifyReqModel\n      type: object\n      properties:\n        owneruuid:\n          type: string\n          description: Owner UUID\n        name:\n          type: string\n          description: Folder name\n        permission:\n          type: integer\n          description: Permission\n      description: Folder modify request model\n    DocumentModifyReqModel:\n      title: DocumentModifyReqModel\n      type: object\n      description: Document modify request model\n      properties:\n        owneruuid:\n          type: string\n          description: Owner UUID\n        permission:\n          type: integer\n          description: Permission\n    FolderListModel:\n      title: FolderListModel\n      type: object\n      description: Folder list model\n      properties:\n        folder:\n          type: array\n          items:\n            $ref: '#/components/schemas/FolderModel'\n        document:\n          type: array\n          items:\n            $ref: '#/components/schemas/DocumentModel'\n        path:\n          type: array\n          items:\n            $ref: '#/components/schemas/BreadcrumbModel'\n      required:\n        - path\n    AuthSessionModel:\n      title: AuthSessionModel\n      type: object\n      properties:\n        sessionid:\n          type: string\n        lastlogin:\n          type: integer\n        lastused:\n          type: integer\n        ipaddr:\n          type: string\n        devinfo:\n          type: string\n        iscurrent:\n          type: boolean\n      description: Session info\n    AuthLogModel:\n      description: ''\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/ProfileModel'\n        date:\n          type: integer\n        type:\n          type: string\n        data:\n          oneOf:\n            - $ref: '#/components/schemas/AuthLogLoginModel'\n            - $ref: '#/components/schemas/AuthLogPassResetModel'\n            - $ref: '#/components/schemas/AuthLogPassChangeModel'\n      required:\n        - user\n        - date\n        - type\n    AuthLogResModel:\n      description: ''\n      type: object\n      title: ''\n      properties:\n        offset:\n          type: integer\n        len:\n          type: integer\n        logs:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthLogModel'\n        has_next:\n          type: boolean\n      required:\n        - offset\n        - len\n        - logs\n        - has_next\n    AuthLogLoginModel:\n      title: AuthLogLoginModel\n      type: object\n      properties:\n        sessionid:\n          type: string\n        ipaddr:\n          type: string\n        devinfo:\n          type: string\n    AuthLogPassResetModel:\n      title: AuthLogPassResetModel\n      type: object\n      properties:\n        ipaddr:\n          type: string\n        devinfo:\n          type: string\n    AuthLogPassChangeModel:\n      title: AuthLogPassChangeModel\n      type: object\n      properties:\n        sessionid:\n          type: string\n        ipaddr:\n          type: string\n    AuthLockResModel:\n      title: AuthLockResModel\n      type: object\n      properties:\n        status:\n          type: boolean\n      required:\n        - status\n      description: Response model for /auth/lock\n  securitySchemes:\n    JWT:\n      type: http\n      scheme: bearer\ntags:\n  - name: Auth\n    description: Authorization API\n  - name: Document\n    description: Document API\n  - name: Profile\n    description: Profile API\n  - name: Team\n    description: Team management API\n  - name: Folder\n    description: Folder API\n  - name: Search\n    description: Search API\n  - name: Image\n    description: Image API\nsecurity:\n  - JWT: []\n",
			"canonicalURL": "/github.com/wonder-wonder/cakemix-server@34eda9310f2e02c0e28c44010e89844f380b5052/-/blob/docs/api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/wonder-wonder/cakemix-server/blob/34eda9310f2e02c0e28c44010e89844f380b5052/docs/api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/auth/log\": get: responses: 200: contents: application/json: generate schema: field logs: item: field data: oneOf: oneOf AuthLogModelData: variant AuthLogPassResetModel: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"complex form schema",
		"discriminator inference"
	]
}