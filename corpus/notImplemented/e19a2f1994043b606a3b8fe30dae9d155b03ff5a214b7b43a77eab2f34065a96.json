{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "synq.fm-1.9.1-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/synq.fm-1.9.1-swagger.yaml",
			"byteSize": 13718,
			"content": "openapi: 3.0.0\ninfo:\n  description: |-\n    * [Sign up for a developer API key!](https://www.synq.fm/register)\n    * [SYNQ API Guide](/)\n  title: SYNQ Video\n  version: 1.9.1\n  x-apisguru-categories:\n    - media\n  x-logo:\n    url: https://pbs.twimg.com/profile_images/894535623213809664/lp7hTlgk_400x400.jpg\n  x-origin:\n    - format: swagger\n      url: https://docs.synq.fm/swagger/api.json\n      version: \"2.0\"\n  x-providerName: synq.fm\npaths:\n  /video/create:\n    post:\n      description: Create a new video, optionally setting some metadata fields. You may\n        optionally set some of the metadata associated with the video. Only\n        fields inside the \"userdata\" field can be set.\n      operationId: create\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                api_key:\n                  type: string\n                userdata:\n                  description: Additional metadata that will be associated with the video\n                  type: string\n              required:\n                - api_key\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/VideoObjectResponse\"\n        \"400\":\n          $ref: \"#/components/responses/ErrorResponse\"\n      summary: Create a new video, optionally setting some metadata fields.\n      tags:\n        - video\n  /video/details:\n    post:\n      description: Return details about a video. You may optionally request that only some\n        of the metadata fields are returned.\n      operationId: details\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                api_key:\n                  type: string\n                video_id:\n                  description: ID of the video to retrieve the metadata from\n                  type: string\n              required:\n                - api_key\n                - video_id\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/VideoObjectResponse\"\n        \"400\":\n          $ref: \"#/components/responses/ErrorResponse\"\n      summary: Return details about a video.\n      tags:\n        - video\n  /video/query:\n    post:\n      description: Find videos matching any criteria, by running a JavaScript function over\n        each video object. A detailed tutorial on how to use this functionality\n        is available on the [documentation\n        page](https://www.synq.fm/queries-video-api/).\n      operationId: query\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                api_key:\n                  type: string\n                filter:\n                  description: JavaScript code to be run over each video object, to\n                    determine what should be returend.\n                  type: string\n              required:\n                - api_key\n                - filter\n      responses:\n        \"200\":\n          description: An array of arbitrary elements, up to one element for each video\n            object\n          content:\n            application/json:\n              schema:\n                items:\n                  type: object\n                type: array\n        \"400\":\n          $ref: \"#/components/responses/ErrorResponse\"\n      summary: Perform a JavaScript query to return video objects matching any desired\n        criteria.\n      tags:\n        - video\n  /video/stream:\n    post:\n      description: Returns a stream url that you can stream to from your broadcasting\n        software, and a playback url people can use to watch the stream.\n      operationId: stream\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                api_key:\n                  type: string\n                video_id:\n                  description: The ID of the video you want to stream to. The video needs\n                    to have been previously created.\n                  type: string\n              required:\n                - api_key\n                - video_id\n      responses:\n        \"200\":\n          description: A JSON object with urls for streaming.\n          content:\n            text/plain:\n              schema:\n                properties:\n                  playback_url:\n                    example: http://stmr1.synq.fm:8081/abr/58a6657b73039192a1000006/playlist.m3u8\n                    type: string\n                  stream_url:\n                    example: rtmp://stmr1.synq.fm:1935/live/58a6657b73039192a1000006?publishsign=aWQ9NTc4N2I5MDI5MzRjY2RlMjcwMDAwMDA4JnNpZ249VTJCTU84bTRPS0R6OW9NanRUdkVLUT09JmlwPTg5LjE5MS4yNi41Nw==\n                    type: string\n                required:\n                  - stream_url\n                  - playback_url\n                title: StreamInformationObject\n                type: object\n        \"400\":\n          $ref: \"#/components/responses/ErrorResponse\"\n      summary: Returns urls for streaming.\n      tags:\n        - video\n  /video/update:\n    post:\n      description: Update a video's metadata through JavaScript code. Only fields inside\n        the \"userdata\" object can be set.\n      operationId: update\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                api_key:\n                  type: string\n                video_id:\n                  description: The ID of the video whose metadata will be updated\n                  type: string\n                source:\n                  description: JavaScript code to execute on the video object.\n                  type: string\n              required:\n                - api_key\n                - video_id\n                - source\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/VideoObjectResponse\"\n        \"400\":\n          $ref: \"#/components/responses/ErrorResponse\"\n      summary: Update a video's metadata.\n      tags:\n        - video\n  /video/upload:\n    post:\n      description: \u003e+\n        Return parameters needed for uploading a video file to Amazon Simple\n        Storage Service. See\n        http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html\n        as well as the language-specific code-examples.\n\n        #### *Example request*\n\n        ```shell\n\n        curl -s https://api.synq.fm/v1/video/upload \\\n          -F api_key=${SYNQ_API_KEY} \\\n          -F video_id=2d81c30ce62f4dfdb501dbca96c7ae56\n        ```\n\n\n        #### *Example response*\n\n        ```json\n\n        {\n          \"action\": \"https://synqfm.s3.amazonaws.com/\",\n          \"AWSAccessKeyId\": \"AKIAIP77Y7MMX3ITZMFA\",\n          \"Content-Type\": \"video/mp4\",\n          \"Policy\": \"eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\",\n          \"Signature\": \"ysqDemlKXKr6hKzVFP0hCGgf/cs=\",\n          \"acl\": \"public-read\",\n          \"key\": \"projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\"\n        }\n\n        ```\n\n\n        To upload the file, you can then make a multipart POST request to the URL in `action`, and for all the other parameters returned, set them as form parameters.\n\n\n        Given the parameters above, you would upload a file `test.mp4` using cURL like this:\n\n\n        ```shell\n\n        curl -s https://synqfm.s3.amazonaws.com/ \\\n          -F AWSAccessKeyId=\"AKIAIP77Y7MMX3ITZMFA\" \\\n          -F Content-Type=\"video/mp4\" \\\n          -F Policy=\"eyJleHBpcmF0aW9uIiA6ICIyMDE2LTA0LTIyVDE5OjAyOjI2LjE3MloiLCAiY29uZGl0aW9ucyIgOiBbeyJidWNrZXQiIDogInN5bnFmbSJ9LCB7ImFjbCIgOiAicHVibGljLXJlYWQifSwgWyJzdGFydHMtd2l0aCIsICIka2V5IiwgInByb2plY3RzLzZlLzYzLzZlNjNiNzUyYTE4NTRkZGU4ODViNWNjNDcyZWRmNTY5L3VwbG9hZHMvdmlkZW9zLzJkLzgxLzJkODFjMzBjZTYyZjRkZmRiNTAxZGJjYTk2YzdhZTU2Lm1wNCJdLCBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAidmlkZW8vbXA0Il0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAwLCAxMDk5NTExNjI3Nzc2XV19\" \\\n          -F Signature=\"ysqDemlKXKr6hKzVFP0hCGgf/cs=\" \\\n          -F acl=\"public-read\" \\\n          -F key=\"projects/6e/63/6e63b752a1854dde885b5cc472edf569/uploads/videos/2d/81/2d81c30ce62f4dfdb501dbca96c7ae56.mp4\" \\\n          -F file=\"@my_video_file.mp4\"\n        ```\n\n      operationId: upload\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                api_key:\n                  type: string\n                video_id:\n                  description: The ID of the video you are going to upload into. The video\n                    needs to have been previously created.\n                  type: string\n              required:\n                - api_key\n                - video_id\n      responses:\n        \"200\":\n          description: An object containing all parameters needed for uploading the file.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UploadParameterObject\"\n        \"400\":\n          $ref: \"#/components/responses/ErrorResponse\"\n      summary: Return parameters needed for uploading a video file.\n      tags:\n        - video\n  /video/uploader:\n    post:\n      description: Returns an embeddable url, that contains an uploader widget that allows\n        you to easily upload any mp4. Great way to simplify the uploading\n        process for end users.\n      operationId: uploader\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                api_key:\n                  type: string\n                video_id:\n                  description: The ID of the video you are going to upload into. The video\n                    needs to have been previously created.\n                  type: string\n                timeout:\n                  description: How long the uploader widget works for. Anything from '30\n                    minutes' to '2 days'.\n                  type: string\n                  default: 2 hours\n              required:\n                - api_key\n                - video_id\n      responses:\n        \"200\":\n          description: A JSON object with an embeddable url to an uploader page/widget.\n          content:\n            text/plain:\n              schema:\n                properties:\n                  uploader_url:\n                    example: https://uploader.synq.fm/uploader/5920d3dfe2dc4b36bd83df6f37ae9bc1?token=18d3bfa5aa4046df9202e6b5ac74760a\n                    type: string\n                title: UploaderInformationObject\n                type: object\n        \"400\":\n          $ref: \"#/components/responses/ErrorResponse\"\n      summary: Return embeddable url to an uploader widget\n      tags:\n        - video\nservers:\n  - url: https://api.synq.fm/v1\ncomponents:\n  responses:\n    ErrorResponse:\n      description: An error occurred\n      content:\n        \"*/*\":\n          schema:\n            $ref: \"#/components/schemas/ErrorObject\"\n    VideoObjectResponse:\n      description: A video object, containing all metadata members.\n      content:\n        \"*/*\":\n          schema:\n            $ref: \"#/components/schemas/VideoObject\"\n  schemas:\n    ErrorObject:\n      example:\n        message: A lengthy, human-readable description of the error that has occurred.\n        name: Some error occurred.\n        url: http://docs.synq.fm/api/v1/error/some_error_code\n      properties:\n        details:\n          type: object\n        message:\n          type: string\n        name:\n          type: string\n        url:\n          type: string\n      required:\n        - url\n        - name\n        - message\n      title: ErrorObject\n      type: object\n    StreamConfigurationObject:\n      properties:\n        rtmp_host:\n          example: ec2-54-171-205-23.eu-west-1.compute.amazonaws.com\n          type: string\n        rtmp_key:\n          example: live/ce29d1cb5da48a564d2c9f62be7ade06\n          type: string\n        rtmp_port:\n          example: \"1935\"\n          type: string\n        rtmp_url:\n          example: rtmp://ec2-54-171-205-23.eu-west-1.compute.amazonaws.com:1935/live/ce29d1cb5da48a564d2c9f62be7ade06\n          type: string\n      title: StreamConfigurationObject\n      type: object\n    UploadParameterObject:\n      properties:\n        AWSAccessKeyId:\n          type: string\n        Content-Type:\n          type: string\n        Policy:\n          type: string\n        Signature:\n          type: string\n        acl:\n          type: string\n        action:\n          type: string\n        key:\n          type: string\n      title: UploadParameterObject\n      type: object\n    VideoObject:\n      example:\n        created_at: 2017-03-07T12:03:34.477Z\n        state: created\n        updated_at: 2017-03-07T12:03:34.477Z\n        userdata: {}\n        video_id: 5747740852d14db58f47a5858f0bbcf7\n      properties:\n        created_at:\n          type: string\n        input:\n          type: object\n        outputs:\n          type: object\n        state:\n          type: string\n        updated_at:\n          type: string\n        userdata:\n          type: object\n        video_id:\n          type: string\n      required:\n        - video_id\n        - state\n        - userdata\n        - created_at\n        - updated_at\n      title: VideoObject\n      type: object\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/synq.fm-1.9.1-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/synq.fm-1.9.1-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/video/upload\": post: responses: 400: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}