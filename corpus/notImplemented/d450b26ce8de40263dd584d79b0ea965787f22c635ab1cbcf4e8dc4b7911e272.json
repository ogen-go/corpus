{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/swissfintechinnovations/common-API"
		},
		"file": {
			"name": "CustomerManagement.yaml",
			"size": 0,
			"path": "CustomerManagement.yaml",
			"byteSize": 52407,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.2.1\n  title: 'Customer Management API'\n  description: 'This API is part of the OpenWealth APIs for the connectivity between custody banks and WealthTechs (e.g. Portfolio Management Systems). This API allows the user to receive data from custody banks regarding customer data and alter and create address and contact data.'\n  contact:\n    email: wealth@common-api.ch\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\nservers:\n# Added by API Auto Mocking Plugin\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/OpenWealthAPI/CustomerManagement/1.2.1\n\npaths:\n    /customers:\n        get:\n            summary: Returns a list of customers.\n            description: Returns a list of all customers. A customer is an object which holds a contract with a (custody-)bank. Paging is done based on the customer object, i.e. if limit is set to 1, then 1 customer will be returned per page.\n\n            operationId: getCustomers\n            tags:\n             - customer\n            parameters: \n              - $ref: '#/components/parameters/cursor'\n              - $ref: '#/components/parameters/limit'\n              - $ref: '#/components/parameters/correlation_in_header'\n            responses:\n                '200':\n                    description: A customer object list.\n                    headers:\n                      X-Correlation-ID:\n                        $ref: '#/components/headers/X-Correlation-ID'\n                      nextCursor:\n                        $ref: '#/components/headers/nextCursor'\n                    content:\n                        application/json:\n                            schema:\n                              type: array\n                              items:  \n                                $ref: '#/components/schemas/customer'\n                '400':\n                  $ref: '#/components/responses/standard400'\n                '401':\n                  $ref: '#/components/responses/standard401'\n                '403':\n                  $ref: '#/components/responses/standard403'\n                '404':\n                  $ref: '#/components/responses/standard404'\n                '405':\n                  $ref: '#/components/responses/standard405'\n                '500':\n                  $ref: '#/components/responses/standard500'\n                '501':\n                  $ref: '#/components/responses/standard501'\n                '503':\n                  $ref: '#/components/responses/standard503' \n        \n    /customers/{customerId}:\n        parameters: \n            - $ref: '#/components/parameters/cursor'\n            - $ref: '#/components/parameters/limit'\n            - $ref: '#/components/parameters/customerId'\n            - $ref: '#/components/parameters/correlation_in_header'\n        get:\n            summary: Returns a specific customer.\n            description: Returns a full client record for a specific customer id.\n            operationId: getCustomerByCustomerId\n            tags:\n              - customer\n            responses:\n                '200':\n                    description: A specific customer object.\n                    headers:\n                      X-Correlation-ID:\n                        $ref: '#/components/headers/X-Correlation-ID'\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/customer'\n                '400':\n                  $ref: '#/components/responses/standard400'\n                '401':\n                  $ref: '#/components/responses/standard401'\n                '403':\n                  $ref: '#/components/responses/standard403'\n                '404':\n                  $ref: '#/components/responses/standard404'\n                '405':\n                  $ref: '#/components/responses/standard405'\n                '500':\n                  $ref: '#/components/responses/standard500'\n                '501':\n                  $ref: '#/components/responses/standard501'\n                '503':\n                  $ref: '#/components/responses/standard503' \n\n    /customers/{customerId}/kyc:\n        parameters: \n              - $ref: '#/components/parameters/cursor'\n              - $ref: '#/components/parameters/limit'\n              - $ref: '#/components/parameters/customerId'\n              - $ref: '#/components/parameters/correlation_in_header'\n        get:\n            summary: Returns the kyc to a specific customer.\n            description: Returns the know-your-client record for a specific customer.\n            operationId: getKycByCustomerId\n            tags:\n              - kyc\n            responses:\n                '200':\n                    description: A specific kyc object.\n                    headers:\n                      X-Correlation-ID:\n                        $ref: '#/components/headers/X-Correlation-ID'\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/customerAndKycResponse'\n\n                '400':\n                  $ref: '#/components/responses/standard400'\n                '401':\n                  $ref: '#/components/responses/standard401'\n                '403':\n                  $ref: '#/components/responses/standard403'\n                '404':\n                  $ref: '#/components/responses/standard404'\n                '405':\n                  $ref: '#/components/responses/standard405'\n                '500':\n                  $ref: '#/components/responses/standard500'\n                '501':\n                  $ref: '#/components/responses/standard501'\n                '503':\n                  $ref: '#/components/responses/standard503' \n    \n    /persons:\n        parameters: \n          - $ref: '#/components/parameters/cursor'\n          - $ref: '#/components/parameters/limit'\n          - $ref: '#/components/parameters/correlation_in_header'\n        get:\n            summary: Returns a list with all person objects.\n            description: Returns all person records. Paging is done based on the person object, i.e. if limit is set to 1, then 1 person will be returned per page.\n\n            operationId: getPersons\n            tags:\n              - person\n            responses:\n                '200':\n                    description: A person list.\n                    headers:\n                      X-Correlation-ID:\n                        $ref: '#/components/headers/X-Correlation-ID'\n                      nextCursor:\n                        $ref: '#/components/headers/nextCursor'\n                    content:\n                        application/json:\n                            schema:\n                              type: array\n                              items:\n                                $ref: '#/components/schemas/person'\n                '400':\n                  $ref: '#/components/responses/standard400'\n                '401':\n                  $ref: '#/components/responses/standard401'\n                '403':\n                  $ref: '#/components/responses/standard403'\n                '404':\n                  $ref: '#/components/responses/standard404'\n                '405':\n                  $ref: '#/components/responses/standard405'\n                '500':\n                  $ref: '#/components/responses/standard500'\n                '501':\n                  $ref: '#/components/responses/standard501'\n                '503':\n                  $ref: '#/components/responses/standard503'\n    \n    /persons/{personId}:\n        parameters: \n          - $ref: '#/components/parameters/personId'\n          - $ref: '#/components/parameters/cursor'\n          - $ref: '#/components/parameters/limit'\n          - $ref: '#/components/parameters/correlation_in_header'\n        get:\n            summary: Returns a specific person object.\n            description: Returns a person record for a specific person id.\n            operationId: getPersonByPersonId\n            tags:\n              - person\n            responses:\n                '200':\n                    description: A specific person object.\n                    headers:\n                      X-Correlation-ID:\n                        $ref: '#/components/headers/X-Correlation-ID'\n                    content:\n                        application/json:\n                            schema:\n                              $ref: '#/components/schemas/person'\n                '400':\n                  $ref: '#/components/responses/standard400'\n                '401':\n                  $ref: '#/components/responses/standard401'\n                '403':\n                  $ref: '#/components/responses/standard403'\n                '404':\n                  $ref: '#/components/responses/standard404'\n                '405':\n                  $ref: '#/components/responses/standard405'\n                '500':\n                  $ref: '#/components/responses/standard500'\n                '501':\n                  $ref: '#/components/responses/standard501'\n                '503':\n                  $ref: '#/components/responses/standard503' \n    /persons/{personId}/contactdetails:\n        parameters: \n          - $ref: '#/components/parameters/personId'\n          - $ref: '#/components/parameters/cursor'\n          - $ref: '#/components/parameters/limit'\n          - $ref: '#/components/parameters/correlation_in_header'\n        get:\n            summary: Returns the contact details for a specific person.\n            description: Returns a contact detail list for a specific person id.\n            operationId: getContactDetailsByPersonId\n            tags:\n              - person\n            responses:\n                '200':\n                    description: A contact detail list.\n                    headers:\n                      X-Correlation-ID:\n                        $ref: '#/components/headers/X-Correlation-ID'\n                    content:\n                        application/json:\n                            schema:\n                              type: array\n                              items:\n                                $ref: '#/components/schemas/contactDetails'\n                '400':\n                  $ref: '#/components/responses/standard400'\n                '401':\n                  $ref: '#/components/responses/standard401'\n                '403':\n                  $ref: '#/components/responses/standard403'\n                '404':\n                  $ref: '#/components/responses/standard404'\n                '405':\n                  $ref: '#/components/responses/standard405'\n                '500':\n                  $ref: '#/components/responses/standard500'\n                '501':\n                  $ref: '#/components/responses/standard501'\n                '503':\n                  $ref: '#/components/responses/standard503' \n        post:\n            summary: Creates new contact details for a specific person.\n            description: Creates new contact details for a specific person id.\n            operationId: postContactDetailsByPersonId\n            tags:\n              - person\n            requestBody:\n              content:\n                application/json:\n                  schema:\n                    $ref: '#/components/schemas/contactDetails'\n            responses:\n                '201':\n                  description: Contact details created.\n                  headers:\n                      X-Correlation-ID:\n                        $ref: '#/components/headers/X-Correlation-ID'\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/contactDetails'\n                '400':\n                  $ref: '#/components/responses/standard400'\n                '401':\n                  $ref: '#/components/responses/standard401'\n                '403':\n                  $ref: '#/components/responses/standard403'\n                '404':\n                  $ref: '#/components/responses/standard404'\n                '405':\n                  $ref: '#/components/responses/standard405'\n                '500':\n                  $ref: '#/components/responses/standard500'\n                '501':\n                  $ref: '#/components/responses/standard501'\n                '503':\n                  $ref: '#/components/responses/standard503' \n    /customers/{customerId}/addresses:\n        parameters: \n          - $ref: '#/components/parameters/customerId'\n          - $ref: '#/components/parameters/cursor'\n          - $ref: '#/components/parameters/limit'\n          - $ref: '#/components/parameters/correlation_in_header'\n        post:\n          summary: Creates a new address object for a specific customer.\n          operationId: postAddressByCustomerId\n          tags:\n              - address\n          requestBody:\n            required: true\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/addressNew'\n          responses: \n            '201':\n              description: Successfully created a new address object.\n              headers:\n                      X-Correlation-ID:\n                        $ref: '#/components/headers/X-Correlation-ID'\n              content:\n                application/json:\n                  schema:\n                    $ref: '#/components/schemas/addressIdentificationResponse'\n            '400':\n              $ref: '#/components/responses/standard400'\n            '401':\n              $ref: '#/components/responses/standard401'\n            '403':\n              $ref: '#/components/responses/standard403'\n            '404':\n              $ref: '#/components/responses/standard404'\n            '405':\n              $ref: '#/components/responses/standard405'\n            '500':\n              $ref: '#/components/responses/standard500'\n            '501':\n              $ref: '#/components/responses/standard501'\n            '503':\n              $ref: '#/components/responses/standard503'  \n              \n        get:\n            summary: Returns the address of a specific customer.\n            description: Returns a address record for a specific customer.\n            operationId: getAddressByCustomerId\n            tags:\n              - address\n            responses:\n              '200':\n                description: A specific address object.\n                headers:\n                  X-Correlation-ID:\n                    $ref: '#/components/headers/X-Correlation-ID'\n                content:\n                  application/json:\n                      schema:\n                        $ref: '#/components/schemas/address'\n              '400':\n                $ref: '#/components/responses/standard400'\n              '401':\n                $ref: '#/components/responses/standard401'\n              '403':\n                $ref: '#/components/responses/standard403'\n              '404':\n                $ref: '#/components/responses/standard404'\n              '405':\n                $ref: '#/components/responses/standard405'\n              '500':\n                $ref: '#/components/responses/standard500'\n              '501':\n                $ref: '#/components/responses/standard501'\n              '503':\n                $ref: '#/components/responses/standard503'  \n          \n        put:\n          summary: Updates an existing address object for a specific customer.\n          operationId: putAddressByCustomerId\n          tags:\n              - address\n          requestBody:\n            required: true\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/address'\n          responses: \n            '204':\n              description: No content.\n              headers:\n                      X-Correlation-ID:\n                        $ref: '#/components/headers/X-Correlation-ID'\n            '400':\n              $ref: '#/components/responses/standard400'\n            '401':\n              $ref: '#/components/responses/standard401'\n            '403':\n              $ref: '#/components/responses/standard403'\n            '404':\n              $ref: '#/components/responses/standard404'\n            '405':\n              $ref: '#/components/responses/standard405'\n            '500':\n              $ref: '#/components/responses/standard500'\n            '501':\n              $ref: '#/components/responses/standard501'\n            '503':\n              $ref: '#/components/responses/standard503' \n        \ncomponents:\n  parameters:\n    customerId:  \n        name: customerId\n        in: path\n        required: true\n        schema:\n          type: string\n          description: The customer's id\n    personId:\n        name: personId\n        in: path\n        required: true\n        schema:\n          type: string\n          description: The persons's id\n    limit: \n      name: limit\n      in: query\n      description: Maximum number of items to return.\n      required: false\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n    cursor:\n      name: cursor\n      in: query\n      description: An opaque string value used for pagination\n      required: false\n      schema:\n        type: string\n    correlation_in_header:\n      in: header\n      name: X-Correlation-ID\n      description: Unique ID (defined by the caller) which will be reflected back in the response.\n      required: true\n      schema:\n        type: string\n\n  ###############\n  # Headers     #\n  ###############\n\n  headers:\n  \n    X-Correlation-ID:\n      description: Client defined ID from request to correlates HTTP requests between a client and server.\n      schema:\n        type: string\n        example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n    nextCursor:\n      description: An opaque string value, or an empty string if there are no more results. \n      required: false\n      schema:\n        type: string\n        \n        \n######################\n# Schemas\n######################\n  schemas:\n\n    customer:\n      type: object\n      required: \n        - customerIdentification\n        - status\n      properties:\n            customerIdentification:\n                type: string\n                minLength: 1\n                maxLength: 35\n                example: 987654321\n                description: 'Customer ID of the bank'\n            externalReference:\n                type: string\n                maxLength: 35\n                example: 123-456-787\n                description: 'External customer ID'\n            name:\n                type: string\n                maxLength: 70\n                example: Steve Rogers\n                description: 'Name of the customer object'\n            status:\n                type: string\n                example: active\n                enum: \n                - active\n                - inactive\n                - closed\n                description: Status of the customer\n            referenceCurrency:\n                $ref: '#/components/schemas/currency'\n            openingDate:\n                $ref: '#/components/schemas/date'\n            personList:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    personRelation:\n                      type: string\n                      example: accountOwner\n                      description: Indicates what relation this person has to the specified customer.\n                      enum: \n                      - beneficialOwner\n                      - authorisedRepresentative\n                      - assetManager\n                      - accountOwner\n                      - authorisedSignatory\n                      - other\n                    personIdentification:\n                      type: string\n                      maxLength: 35\n                      example: 876543219\n                      description: 'Bank identification of the person'\n            addressList:\n                type: array\n                description: List of addresses associated with the customer\n                items:\n                  type: object\n                  properties:\n                    addressIdentification:\n                      type: number\n                      example: 12345678\n                      description: 'Bank ID of the address object'\n\n    person:\n      type: object\n      required:\n        - personIdentification\n        - personType\n        - personDetails\n      properties:\n        personIdentification:\n          type: string\n          minLength: 1\n          maxLength: 35\n          example: 876543219\n          description: 'Bank identification of the person'\n        externalReference:\n          type: string\n          maxLength: 35\n          example: 987-654-321\n          description: 'External person ID'\n        customerList:\n          type: array\n          items:\n            type: object\n            properties:\n              customerIdentification:\n                type: string\n                maxLength: 35\n                example: 123123\n        fullName:\n          type: string\n          maxLength: 70\n          example: Tony Stark\n          description: 'Name of the person object'\n        countryOfDomicile:\n          $ref: '#/components/schemas/country'\n        language:\n          type: string\n          maxLength: 35\n          example: German\n          description: 'Language for all communication concerning the account'\n        contactInformation:\n          type: array\n          items:\n            $ref: '#/components/schemas/contactDetails'\n        personDetails:\n          description: Further details about the person. Schema depends on personType.\n          $ref: '#/components/schemas/personDetails'\n        taxDomicile:\n          type: array\n          description: 'Indicates the tax domiciles of the person'\n          items:\n            $ref: '#/components/schemas/country'\n\n    personDetails:\n      type: object\n      description: 'Further details about the person. Schema depends on personType.'\n      required:\n        - personType\n      properties:\n        personType:\n          type: string\n          enum:\n            - naturalPerson\n            - legalPerson\n            - personAssociation\n            - trust\n            - soleProprietorship\n          example: naturalPerson\n          description: 'Indicates the type of the person object'\n      discriminator:\n        propertyName: personType\n\n    naturalPerson: # \"naturalPerson\" will be used as disciminator\n      allOf:\n        - $ref: '#/components/schemas/personDetails'\n        - type: object\n          properties:\n            givenName:\n              type: string\n              maxLength: 35\n              example: Anthony\n              description: 'Given name of the person'\n            middleName:\n              type: string\n              maxLength: 35\n              example: Edward\n              description: 'Middle name of the person'\n            lastName:\n              type: string\n              maxLength: 35\n              example: Stark\n              description: 'Last name of the person'\n            title:\n              type: string\n              maxLength: 35\n              example: PhD\n              description: 'Official title of the person'\n            dates:\n              type: array\n              items:\n                type: object\n                properties:\n                  date:\n                    $ref: '#/components/schemas/date'\n                  dateType:\n                    description: Type of the date\n                    type: string\n                    enum:\n                      - birthDate\n                      - divorceDate\n                      - deathDate\n            gender:\n              type: string\n              enum:\n                - male\n                - female\n                - other\n              example: male\n              description: 'Gender of the person'\n            nationality:\n              type: array\n              description: 'Indicates the nationality of the person'\n              items:\n                $ref: '#/components/schemas/country'\n            civilStatus:\n              type: string\n              enum:\n                - unmarried\n                - married\n                - divorced\n                - widowed\n              example: married\n              description: 'Civil status of the individual person'\n            TIN:\n              type: string\n              maxLength: 35\n              example: 123-12-1234\n\n    legalPerson: # \"legalPerson\" will be used as disciminator\n      allOf:\n        - $ref: '#/components/schemas/personDetails'\n        - type: object\n          required:\n            - organisationName\n            - legalForm\n            - domicilaryCompany\n          properties:\n            organisationName:\n              type: string\n              minLength: 1\n              maxLength: 35\n              description: 'Name by which the organisation is known and which is usually used to identify that organisation'\n              example: Stark Industries\n            legalForm:\n              type: string\n              maxLength: 35\n              description: 'Legal status of the company'\n              example: AG\n            LEI:\n              type: string\n              pattern: '[A-Z0-9]{18,18}[0-9]{2,2}'\n              example: 529900UVM8LC55IFAA52\n              description: Legal entity identifier\n            domicilaryCompany:\n              type: boolean\n              description: 'Indicates whether the company is a domiciliary company'\n              example: FALSE\n\n    personAssociation: # \"personAssociation\" will be used as disciminator\n      allOf:\n        - $ref: '#/components/schemas/personDetails'\n        - type: object\n          required:\n            - personAssociationName\n          properties:\n            personAssociationName:\n              type: string\n              minLength: 1\n              maxLength: 70\n              description: 'Name of the association object'\n              example: Anthony Stark a/o Piper Potts\n            personAssociationType:\n              type: string\n              enum:\n                - compteJoint\n                - jointHeirs\n                - unregisteredPartnership\n                - limitedPartnership\n                - collectiveProprietorship\n              description: 'Type of association'\n              example: compteJoint\n\n    trust: # \"trust\" will be used as disciminator\n      allOf:\n        - $ref: '#/components/schemas/personDetails'\n        - type: object\n          required:\n            - trustName\n            - trustType\n          properties:\n            trustName:\n              type: string\n              minLength: 1\n              maxLength: 70\n              description: 'Name of the trust object'\n              example: Spiderman Trust\n            trustType:\n              type: string\n              enum:\n                - simpleTrust\n                - complexTrust\n                - grantorTrust\n              description: 'Type of trust'\n              example: simpleTrust\n\n    soleProprietorship: # \"soleProprietorship\" will be used as disciminator\n      allOf:\n        - $ref: '#/components/schemas/personDetails'\n        - type: object\n          required:\n            - soleProprietorshipName\n          properties:\n            soleProprietorshipName:\n              type: string\n              minLength: 1\n              maxLength: 70\n              description: 'Name of the sole proprietorship object'\n              example: Anthony Stark\n\n    kyc:\n      type: object\n      properties:\n        nonFinancialSituation:\n          type: object\n          properties:\n            profession:\n              type: string\n              maxLength: 35\n              description: 'Name of the occupation or job of the person'\n              example: Philantropist\n            employingCompany:\n              type: string\n              maxLength: 35\n              description: 'Organisation represented by a person, or for which a person works'\n              example: Stark Industries\n            educationLevel:\n              type: string\n              maxLength: 70\n              description: 'Highest level of education reached by the individual person'\n              example: University\n            function:\n              type: string\n              maxLength: 35\n              description: 'Title of the job function'\n              example: CEO\n            typeOfEmployment:\n              type: string\n              description: 'Type of employment of the natural person'\n              enum: \n              - selfEmployed\n              - employed\n              - unemployed\n              - retired\n              example: employed\n            riskDomicile:\n              $ref: '#/components/schemas/country'\n            reasonForDomiciliaryCompany:\n              type: string\n              maxLength: 35\n              description: 'Describes the reason for domiciliary company'\n              example: Wealth management\n            sector:\n              type: string\n              maxLength: 70\n              description: 'Sector of econimic activity'\n              example: Energy supply\n            numberOfEmployees:\n              type: integer\n              description: 'Number of employees'\n              example: 250\n            dateOfIncorporation:\n              $ref: '#/components/schemas/date'\n            companyPurpose:\n              type: string\n              maxLength: 70\n              description: 'Describes the purpose of the company'\n              example: Provide sustainable energy\n            structureControllingPerson:\n              type: string\n              maxLength: 70\n              description: 'Structures of controlling persons'\n              example: 'Anthony Stark (75%), Piper Potts (25%)'\n            structureBeneficialOwners:\n              type: string\n              maxLength: 70\n              description: 'Structure of beneficial owners'\n              example: Anthony Stark (100%)\n            reasonForTrust:\n              type: string\n              maxLength: 70\n              description: 'Describes the reason for the trust'\n              example: Succession Planning\n            revocability:\n              type: boolean\n              description: 'Indicates wheter the trust is revocable or not'\n              example: TRUE\n            resettled:\n              type: boolean\n              description: 'Indicates if the trust is resettled'\n              example: FALSE\n            merged:\n              type: boolean\n              description: 'Indicates if the trust is merged'\n              example: FALSE\n            beneficialOwner:\n              type: string\n              maxLength: 70\n              description: 'Ultimate party that is entitled to either receive the benefits of the ownership of a financial instrument, or to be paid/credited as a result of a transfer'\n              example: Max Muster\n            beneficiary:\n              type: string\n              maxLength: 70\n              example: Peter Parker\n            protector:\n              type: string\n              maxLength: 70\n              description: 'Person appointed under the trust instrument to direct or restrain the trustees in relation to their administration of the trust. Typically, this is a controlling person of a trust.'\n              example: Stark Industries\n            dateOfTrustContract:\n              $ref: '#/components/schemas/date'\n        financialSituation:\n          type: object\n          properties:\n            incomeCurrentPeriod:\n              type: object\n              description: 'Income received in the current income year'\n              properties:\n                currency:\n                  $ref: '#/components/schemas/currency'\n                amount:\n                  type: string\n                  pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n                  maxLength: 22\n                  example: \"100000\"\n            sourceOfIncome:\n              type: string\n              description: 'Specifies the origin of the income'\n              enum: \n              - income\n              - savings\n              - inheritance\n              - lifeInsurance\n              - pensionFunds\n              - gift\n              example: income\n            annualTurnover:\n              type: object\n              description: 'Indicates the annual turnover'\n              properties:\n                currency:\n                  $ref: '#/components/schemas/currency'\n                amount:\n                  type: string\n                  pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n                  maxLength: 22\n                  example: \"200000\"\n            monetaryWealth:\n              type: object\n              description: 'Annual wealth of the individual person or share capital value of the legal entity '\n              properties:\n                currency:\n                  $ref: '#/components/schemas/currency'\n                amount:\n                  type: string\n                  pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n                  maxLength: 22\n                  example: \"1000000\"\n            sourceOfWealth:\n              type: array\n              description: Indicates the sources of wealth of the customer.\n              items:\n                type: object\n                properties:\n                  sourceOfWealth:\n                    type: string\n                    description: 'Indicates the type of the sources of wealth'\n                    example: inheritance\n                    enum: \n                    - retirementPolicy\n                    - selfEmploymentIncome\n                    - employeeIncome\n                    - savings\n                    - gift\n                    - inheritance\n                    - redemtion\n                    - winnings\n                    - insurancePremiumLiquidation\n                    - saleOfGoods\n                    - realEstateSale\n                    - saleAquisitionCorporation\n                    - cashProceeds\n                    - alimony\n                    - compensation\n                    - other\n                  currency:\n                    $ref: '#/components/schemas/currency'\n                  amount:\n                    type: string\n                    pattern: \"[0-9]{1,12}([.][0-9]{1,9})?\"\n                    maxLength: 22\n                    example: \"25000000\"\n                  dateOfReceipt:\n                    $ref: '#/components/schemas/date'\n                  originator:\n                    type: object\n                    description: Information about the founder/donor/testator that left the money for the customer.\n                    properties:\n                      name:\n                        type: string\n                        maxLength: 70\n                        description: Name of the originator, e.g. founder/donor/testator\n                        example: Howard Stark\n                      relationToCustomer:\n                        type: string\n                        maxLength: 35\n                        description: Relation of the originator to the customer\n                        example: Relatives\n                      occupation:\n                        type: string\n                        maxLength: 35\n                        description: Describes the (former) occupation of the originator (founder/donor/testator)\n                        example: Technology Provider\n            priorBank:\n              type: object\n              properties:\n                namePriorBank:\n                  type: string\n                  maxLength: 70\n                domicilePriorBank:\n                  $ref: '#/components/schemas/country'\n\n    customerAndKycResponse:\n      type: object\n      properties:\n        customer:\n         $ref: '#/components/schemas/customer'\n        kyc:\n         $ref: '#/components/schemas/kyc'\n    \n    contactDetails:\n      type: object\n      required:\n        - medium\n        - contactContent\n      properties:\n        contactIdentification:\n          type: string\n          maxLength: 35\n          example: 123987\n          readOnly: true\n        medium:\n          type: string\n          description: Medium for contacting the client.\n          example: phone\n          enum: \n          - email\n          - phone\n          - fax\n          - website\n          - socialMediaProfile\n        contactMediumType:\n          type: string\n          description: Specifies the type of contact details\n          example: business\n          enum: \n          - private\n          - business\n        contactContent:\n          type: string\n          minLength: 1\n          maxLength: 70\n          description: Content of the contact details, e.g. phone number, email-address, Website URL\n          example: 0041998887766\n        additionalContactInformation:\n          type: string\n          maxLength: 70\n          description: Used for additional information regarding the contact details\n          example: Prio 1 Phone Number\n\n    addressNew:\n      type: object\n      properties:\n        addressName:\n          type: string\n          maxLength: 70\n          example: Stark Mansion\n          description: 'Name of the address object'\n        mailingInstruction:\n          type: string\n          maxLength: 35\n          example: MainDispatch\n          description: 'Mailing instruction'\n        postalAddress:\n          $ref: '#/components/schemas/postalAddress'\n\n    address:\n        type: object\n        required: \n          - addressIdentification\n          - dispatchType\n        properties:\n          addressIdentification:\n            type: number\n            example: 12345678\n            description: 'Bank ID of the address object'\n          addressName:\n            type: string\n            maxLength: 70\n            example: Stark Mansion\n            description: 'Name of the address object'\n          isDomicile:\n              type: boolean\n              description: Indicates if this address is the domicile address\n              example: TRUE\n          isMailingAddress:\n              type: boolean\n              description: Indicates if this address is used for mailing purposes.\n              example: TRUE\n          mailingInstruction:\n              type: string\n              maxLength: 35\n              example: MainDispatch\n              description: 'Mailing instruction'\n          dispatchType:\n            type: string\n            description: Indicates wether the correspondance is sent out digitally (e.g. to the e-banking) or physically.\n            enum: \n            - postal\n            - electronical\n            - other\n          language:\n              type: string\n              maxLength: 35\n              example: German\n              description: 'Language for all communication concerning this address'\n          postalAddress:\n              $ref: '#/components/schemas/postalAddress'\n\n    postalAddress:\n        type: object\n        required: \n          - salutation\n          - isDomicile\n          - isMailingAddress\n          - postCode\n          - townName\n          - country\n        properties:\n            salutation:\n              type: object\n              properties:\n                receptionRestriction:\n                    type: string\n                    maxLength: 35\n                    description: Reception restrictions of physical delivery of mail\n                    example: confidential\n                salutation:\n                    type: string\n                    maxLength: 35\n                    description: Salutation of the person\n                    example: Mr.\n                title:\n                    type: string\n                    maxLength: 35\n                    description: Additional information about the person that follows a person's name, for example, qualification such as Doctor of Philosophy (PhD).\n                    example: PhD\n                overrideSalutation:\n                    type: string\n                    maxLength: 35\n                    example: Dear Ironman\n                    description: Used to override the salutations in letters.\n            name:\n              type: object\n              properties:\n                organisationName:\n                    type: string\n                    maxLength: 70\n                    description: Name by which the organisation is known and which is usually used to identify that organisation\n                    example: Strak Industries\n                givenName:\n                    type: string\n                    maxLength: 35\n                    description: First name of the person\n                    example: Anthony\n                middleName:\n                    type: string\n                    maxLength: 35\n                    description: Second- or middlename of the person\n                    example: Edward\n                lastName:\n                    type: string\n                    maxLength: 35\n                    description: Last name of the person\n                    example: Stark\n                nameSuffix:\n                    type: string\n                    maxLength: 35\n                    description: Additional information on a name of the person\n                    example: jr.\n            physicalAddress:\n              type: object\n              properties:\n                careOf:\n                    type: string\n                    maxLength: 35\n                    description: When the individual resides at another person's address, the name of the other person\n                    example: Piper Potts\n                toTheAttentionOf:\n                    type: string\n                    maxLength: 35\n                    description: When the mail should be distributed to a specific person within a company\n                    example: Jarvis\n                streetName:\n                    type: string\n                    maxLength: 35\n                    description: Name of the street or thoroughfare\n                    example: Malibu Point\n                buildingNumber:\n                    type: string\n                    maxLength: 35\n                    description: Number that identifies the position of the building on a street\n                    example: \"10880\"\n                postBox:\n                    type: string\n                    maxLength: 35\n                    description: Post box number of the addressee within the residential or company building\n                    example: \"12\"\n                addressSuffix:\n                    type: string\n                    maxLength: 35\n                    description: Additional infromation\n                    example: Appartment 1\n                postCode:\n                    type: string\n                    maxLength: 35\n                    description: Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail\n                    example: 90265\n                townName:\n                    type: string\n                    maxLength: 35\n                    description: Name of the town or city\n                    example: Malibu\n                countrySubDivision:\n                    type: string\n                    maxLength: 35\n                    description: Identifies a subdivision of a country such as state, region, county\n                    example: CA\n                country:\n                    $ref: '#/components/schemas/country'\n\n    addressIdentificationResponse:\n      type: object\n      properties:\n        addressIdentification:\n          type: string\n          example: 7353\n          description: ID of the newly created address object.\n          \n    country:\n      type: string\n      pattern: '[A-Z]{2}'\n      example: CH\n      description: 2-Letter ISO 3166-2 Country Code  \n    \n    currency:\n      description: ISO 4217 code\n      type: string\n      pattern: '[A-Z]{3}'\n      example: 'CHF'\n\n    date:\n      type: string\n      format: date\n      description: Date according to ISO 8601 i.e. YYYY-MM-DD format\n      example: '2018-04-13'\n\n    commonErrorResponse:\n      title: Common Error Response\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/commonErrorType'\n        title:\n          type: string\n          example:\n            This is the general problem description\n        detail:\n          type: string\n          example:\n            Detailed problem description with respect to the current request\n        instance:\n          type: string\n          example:\n            path/to/corresponding/resource\n\n    commonErrorType:\n      type: string\n      description: Error types for commonErrorResponse\n      example: invalidPayload\n      enum:\n        - invalidPayload\n        - malformedPayload\n        - invalidToken\n        - expiredToken\n        - insufficientPrivileges\n        - noAccessToResource\n        - resourceDoesNotExist\n        - resourceNotReady\n        - resourceTooLarge\n        - wrongMethod\n        - operationNotAllowed\n        - technicalError\n        - notImplemented\n        - serviceUnavailable\n\n# ---- Responses - Standard Errors Common Data Model v1.2.2----\n  responses:\n    standard400:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json\n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Bad Request - The server cannot or will not process the request due to something that is perceived to be a client error as malformed request syntax.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n\n    standard401:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json     \n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Unauthorized - The request has not been applied because it lacks valid authentication credentials for the target resource.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n\n    standard403:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json\n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Forbidden - The server understood the request but refuses to authorize it. \n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n\n    standard404:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json\n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Not Found - The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n\n    standard405:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json\n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Method Not Allowed - The method received in the request-line is known by the origin server but not supported by the target resource.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n\n    standard500:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json\n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n\n    standard501:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json\n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Not Implemented - The server does not support the functionality required to fulfill the request.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n\n    standard503:\n      headers:\n        Content-Type:\n          schema:\n            type: string\n            description: 'application/problem+json; charset=utf-8 according to RFC7807'\n            example: application/problem+json\n        Content-Language:\n          schema:\n            type: string\n            description: 'Response language - always en'\n            example: en\n        X-Correlation-ID:\n          schema:\n            type: string\n            description: Client defined ID from request to correlates HTTP requests between a client and server.\n            example: f058ebd6-02f7-4d3f-942e-904344e8cde5\n      description: Service Unavailable. The server is currently unable to handle the request due to a temporary overload or scheduled maintenance.\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/commonErrorResponse'\n  # ---- End Responses - Standard Errors",
			"canonicalURL": "/github.com/swissfintechinnovations/common-API@411f559625d224664dcc971e6637429d227e79b4/-/blob/CustomerManagement.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/swissfintechinnovations/common-API/blob/411f559625d224664dcc971e6637429d227e79b4/CustomerManagement.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/customers\": get: responses: 400: contents: unsupported content types: [application/problem+json]",
	"NotImplemented": [
		"unsupported content types"
	]
}