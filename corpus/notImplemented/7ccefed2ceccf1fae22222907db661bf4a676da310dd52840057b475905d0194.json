{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mrTimofey/vue-admin"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "docs/swagger.yml",
			"byteSize": 23386,
			"content": "openapi: 3.0.1\ninfo:\n  title: vue-admin-front API\n  description: Backend agnostic API specification used to interact administrative interface frontend SPA\n  version: 0.1.1\nservers:\n  - url: /api/admin\ncomponents:\n  securitySchemes:\n    bearer:\n      type: http\n      scheme: bearer\n  responses:\n    401:\n      description: Authorization required\n    403:\n      description: Authorized user is not allowed to perform this action\n    404:\n      description: Requested resource not found\n    413:\n      description: Request payload is too large\n    422:\n      description: Input data validation error\n      content:\n        application/json:\n          schema:\n            type: object\n            description: validation errors\n            properties:\n              errors:\n                type: object\n                description: errors per each field\n                additionalProperties:\n                  type: array\n                  description: array of error descriptions\n                  items:\n                    type: string\n                    description: error description\n            example:\n              errors:\n                email:\n                  - Email has wrong format\n                age:\n                  - Age must be at least 18\n                  - Age must be less than 100\n    429:\n      description: Too many requests, try again later\n      headers:\n        Retry-After:\n          schema:\n            type: integer\n          description: Retry timeout in seconds\n  requestBodies:\n    entityItemData:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EntityItem'\n        multipart/form-data:\n          schema:\n            description: |\n              Use multipart/form-data body only if you are going to upload files.\n              Each upload file field name must be prepended with `file__` special prefix.\n              For example, if you upload file to the `image_id` field you should name binary data field as `file__image_id`.\n              File name or ID must be returned (without `file__` prefix) after successful response processing.\n            properties:\n              __json_data:\n                type: string\n                format: json\n                description: JSON encoded non-file item field values, same format as the `application/json` request body\n                example: '{\"name\": \"Post name\", \"content\": \"\u003cp\u003ePost content\u003c/p\u003e\"}'\n            additionalProperties:\n              oneOf:\n                - type: string\n                  format: binary\n                  description: file__{field}\n                - type: array\n                  description: files array, field name must be appended with [] (file__{field}[])\n                  items:\n                    type: string\n                    format: binary\n  parameters:\n    entity:\n      in: path\n      name: entity\n      required: true\n      schema:\n        type: string\n      description: entity name\n    id:\n      in: path\n      name: id\n      required: true\n      schema:\n        type: string\n      description: entity item id\n    page:\n      in: query\n      name: page\n      schema:\n        type: integer\n        default: 1\n        minimum: 1\n      description: page number\n    limit:\n      in: query\n      name: limit\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 100\n        default: 25\n      description: items count per page\n    filters:\n      in: query\n      name: filters\n      schema:\n        type: object\n        additionalProperties: true\n      description: |\n        Apply query filters from request query string. API backend must support these actions:\n        * filters[field]=value - field equals to value\n        * filters[!field]=value - field not equals to value\n        * filters[\u003e~field]=value - field is more than or equals to value\n        * filters[\u003c~field]=value - field is less than or equals to value\n        * filters[\u003efield]=value - field is more than value\n        * filters[\u003cfield]=value - field is less than value\n        * filters[field][]=value1\u0026filters[field][]=value2... - field equals to one of provided values (WHERE IN)\n        * filters[!field][]=value1\u0026filters[!field][]=value2... - field not equals to any of provided values (WHERE NOT IN)\n        * filters[field] - field value is not null (IS NOT NULL)\n        * filters[!field] - field value is null (IS NULL)\n    scopes:\n      in: query\n      name: scopes\n      schema:\n        type: object\n        additionalProperties: true\n      description: |\n        Apply complex filters with custom logic (known as 'scopes' in Laravel) from request query string.\n        The main idea is to provide some custom filtering/ordering/etc. logic for entities.\n        Syntax:\n        * scopes[scopeName] - scope without parameters\n        * scopes[scopeName][]=param1\u0026scopes[scopeName][]=param2 - pass scope parameters\n    search:\n      in: query\n      name: search\n      schema:\n        type: string\n      description: text search\n    sort:\n      in: query\n      name: sort\n      schema:\n        type: object\n        additionalProperties: true\n      description: |\n        Apply simple sorting based on request query string. Syntax:\n        * sort[field] - order by asc\n        * sort[field]=asc|desc\n  schemas:\n    User:\n      type: object\n      description: Authorized user object\n      properties:\n        id:\n          type: integer\n        email:\n          type: string\n          format: email\n        name:\n          type: string\n      additionalProperties: true\n      required: [id]\n      example:\n        id: 1\n        email: example@mail.com\n        name: Darth Vader\n    MainNavItem:\n      oneOf:\n        - type: object\n          description: Main navigation link or group item\n          properties:\n            title:\n              type: string\n              description: link title (can be omitted if entity is provided and entity has a title)\n            icon:\n              type: string\n              description:\n                any valid [Font Awesome 5 icon name](http://fontawesome.io/icons/)\n              example: 'fas fa-user'\n            entity:\n              type: string\n              description: entity name (this item will be a link to an entity home page)\n            path:\n              type: string\n              description: custom URL or relative path (use this for external or unmanaged custom links)\n            route:\n              type: string\n              description: route within administrative interface (use this for SPA managed links)\n            items:\n              type: array\n              description: inner items (this item will be expandable group if provided)\n              items:\n                $ref: '#/components/schemas/MainNavItem'\n          additionalProperties: true\n        - type: string\n          description: Main navigation header item\n    FieldDescription:\n      type: object\n      description: Entity field description\n      properties:\n        name:\n          type: string\n          description: field name\n        type:\n          type: string\n          description: field type\n          default: text\n        title:\n          type: string\n          description: human readable field title\n        disabled:\n          type: boolean\n          description: disable editing (for editable fields)\n      additionalProperties:\n        description: anything else depending on a field type\n      required: [name]\n    EntityDescription:\n      type: object\n      description: Entity meta information\n      properties:\n        title:\n          type: string\n          description: entity name\n          example: 'Posts'\n        primary:\n          type: string\n          description: entity primary key name\n          default: 'id'\n          example: 'key'\n        create_title:\n          type: string\n          description: new item form title\n          default: 'New element'\n          example: 'Create new post'\n        item_title:\n          type: string\n          description: item edit form title (placeholders can be used)\n          default: '{{ title }} [{{ primary key }}]'\n          example: 'How to make a bomb [123]'\n        permissions:\n          type: object\n          description: allowed actions\n          properties:\n            index:\n              type: boolean\n              description: see item list\n            create:\n              type: boolean\n              description: create new item\n            item:\n              type: boolean\n              description: see item details\n            update:\n              type: boolean\n              description: update item\n            destroy:\n              type: boolean\n              description: destroy item\n        index_fields:\n          type: array\n          description: fields for entity index\n          items:\n            allOf:\n              - $ref: '#/components/schemas/FieldDescription'\n              - properties:\n                  editable:\n                    type: boolean\n                    description: allow inline editing (`display` component will be replaced with `field`)\n                  sortable:\n                    type: boolean\n                    description: allow sort by this field (enables sorting button on table column header)\n                  sortableAs:\n                    type: string\n                    description: sortable using a field other than a field name\n        item_fields:\n          type: array\n          description: editing/creating fields\n          items:\n            allOf:\n              - $ref: '#/components/schemas/FieldDescription'\n              - properties:\n                  default:\n                    description: default value (can be `'now'` for date/datetime fields)\n        filter_fields:\n          type: array\n          description: index filter fields\n          items:\n            $ref: '#/components/schemas/FieldDescription'\n    MetaData:\n      type: object\n      description: Meta data containing information about available entities, actions, navigation links, etc.\n      properties:\n        skin:\n          type: string\n          description: AdminLTE built-in or custom skin name\n          default: 'blue'\n          example: 'red'\n        nav:\n          type: array\n          description: main navigation menu items\n          items:\n            $ref: '#/components/schemas/MainNavItem'\n          example:\n            - Header\n            - entity: posts\n              icon: 'fas fa-newspaper'\n            - route: /entity/posts/item/1\n              title: Edit item \\#1\n            - path: 'https://facebook.com'\n              title: External link\n            - title: Link group\n              items:\n                - entity: users\n                  icon: 'fas fa-user'\n        entities:\n          type: object\n          description: entities meta data\n          additionalProperties:\n            $ref: '#/components/schemas/EntityDescription'\n        wysiwyg:\n          type: object\n          description: WYSIWYG editor default configuration\n          properties:\n            css:\n              type: string\n              description: inline CSS or CSS file link for WYSIWYG editor\n        image_path:\n          type: string\n          description: images base path (prepended to any image field values like `\u003cimg src=\"{prefix}{field value}\"\u003e`)\n      additionalProperties: true\n      required: [nav, entities]\n    EntityItem:\n      type: object\n      description: Entity item\n      additionalProperties:\n        description: Entity item fields\n      example:\n        id: 2\n        name: Post name\n        content: \u003cp\u003ePost content\u003c/p\u003e\n    PaginationData:\n      type: object\n      description: Pagination data\n      properties:\n        current_page:\n          type: integer\n        last_page:\n          type: integer\n        per_page:\n          type: integer\n        total:\n          type: integer\n      required: [current_page, last_page, per_page, total]\n      example:\n        current_page: 10\n        last_page: 18\n        per_page: 25\n        total: 462\n    FileList:\n      type: array\n      description: File paths list\n      items:\n        type: string\n      example:\n        - '/storage/upload/1234.pdf'\n        - '/storage/upload/4321.docx'\n        - '/storage/upload/qwerty.txt'\n    ImageList:\n      type: array\n      description: Image names list\n      items:\n        type: string\n      example:\n        - '604nHV1512539451.jpg'\n        - '9AMisR1512202192.png'\n        - 'G2ZNdd1512202192.svg'\n\ntags:\n  - name: user\n  - name: meta\n  - name: entity\n  - name: upload\npaths:\n  /auth:\n    post:\n      description: Authenticate\n      tags: [user]\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - type: object\n                  description: authenticate by email and password\n                  properties:\n                    email:\n                      type: string\n                      format: email\n                      description: user email\n                    password:\n                      type: string\n                      description: user password\n                    remember:\n                      type: boolean\n                      default: false\n                  required: [email, password]\n                - type: object\n                  description: authenticate by remember token\n                  properties:\n                    remember_token:\n                      type: string\n                      description: remember token\n                  required: [remember_token]\n            examples:\n              email_password:\n                summary: email and password\n                value:\n                  email: example@mail.com\n                  password: secret\n                  remember: true\n              remember_token:\n                summary: remember token\n                value:\n                  remember_token: \"0YUkQAflcEtSp522SiIG4V8txBE8Cl1MlO1svgOtpsLKOIalK8VVqn9jymAD7iPYK9fQ0onBi2fdFMikbaKfGEk1y6pXtasc97ZC\"\n      responses:\n        200:\n          description: Successful authentication\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user:\n                    $ref: '#/components/schemas/User'\n                  api_token:\n                    type: string\n                    description: bearer token\n                  remember_token:\n                    type: string\n                    description: remember token\n        400:\n          description: Bad credentials\n        429:\n          $ref: '#/components/responses/429'\n    delete:\n      description: Logout\n      tags: [user]\n      security:\n        - bearer: []\n      responses:\n        200:\n          description: Successful logout\n        401:\n          $ref: '#/components/responses/401'\n  /auth/user:\n    get:\n      description: Get authorized user\n      tags: [user]\n      security:\n        - bearer: []\n      responses:\n        200:\n          description: User\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        401:\n          $ref: '#/components/responses/401'\n  /locale:\n    get:\n      description: Get locale preferences\n      tags: [meta]\n      responses:\n        200:\n          description: Locale preferences\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  locale:\n                    type: string\n                    description: primary locale\n                  fallback_locale:\n                    type: string\n                    description: fallback locale\n                example:\n                  locale: ru\n                  fallback_locale: en\n  /meta:\n    get:\n      description: Get meta information (navigation, entity descriptions, allowed actions, etc.)\n      tags: [meta, entity]\n      security:\n        - bearer: []\n      responses:\n        200:\n          description: Meta information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetaData'\n        401:\n          $ref: '#/components/responses/401'\n  /entity/{entity}:\n    parameters:\n      - $ref: '#/components/parameters/entity'\n    get:\n      description: Get entity index\n      tags: [entity]\n      parameters:\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/filters'\n        - $ref: '#/components/parameters/scopes'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/search'\n      responses:\n        200:\n          description: Entity item listing\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/EntityItem'\n                  pagination:\n                    $ref: '#/components/schemas/PaginationData'\n        401:\n          $ref: '#/components/responses/401'\n        403:\n          $ref: '#/components/responses/403'\n    post:\n      description: Create new entity item\n      tags: [entity]\n      requestBody:\n        $ref: '#/components/requestBodies/entityItemData'\n      responses:\n        200:\n          description: Entity item successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntityItem'\n        401:\n          $ref: '#/components/responses/401'\n        403:\n          $ref: '#/components/responses/403'\n        413:\n          $ref: '#/components/responses/413'\n        422:\n          $ref: '#/components/responses/422'\n    delete:\n      description: Delete multiple entity items\n      tags: [entity]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                keys:\n                  type: array\n                  description: list of item keys (IDs)\n                  items:\n                    description: item key\n              example:\n                keys: [1, 2, 3]\n      responses:\n        200:\n          description: Entity items successfully deleted\n        401:\n          $ref: '#/components/responses/401'\n        403:\n          $ref: '#/components/responses/403'\n  /entity/{entity}/{id}:\n    parameters:\n      - $ref: '#/components/parameters/entity'\n      - $ref: '#/components/parameters/id'\n    get:\n      description: Get entity item\n      tags: [entity]\n      responses:\n        200:\n          description: Entity item\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntityItem'\n        401:\n          $ref: '#/components/responses/401'\n        403:\n          $ref: '#/components/responses/403'\n        404:\n          $ref: '#/components/responses/404'\n    post:\n      description: Update entity item\n      tags: [entity]\n      requestBody:\n        $ref: '#/components/requestBodies/entityItemData'\n      responses:\n        200:\n          description: Updated entity item\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntityItem'\n        401:\n          $ref: '#/components/responses/401'\n        403:\n          $ref: '#/components/responses/403'\n        404:\n          $ref: '#/components/responses/404'\n        413:\n          $ref: '#/components/responses/413'\n        422:\n          $ref: '#/components/responses/422'\n    delete:\n      description: Delete entity item\n      tags: [entity]\n      responses:\n        200:\n          description: Entity item successfully deleted\n        401:\n          $ref: '#/components/responses/401'\n        404:\n          $ref: '#/components/responses/404'\n        403:\n          $ref: '#/components/responses/403'\n  /entity/{entity}/{id}/fast:\n    parameters:\n      - $ref: '#/components/parameters/entity'\n      - $ref: '#/components/parameters/id'\n    post:\n      description: |\n        Entity item live update.\n        Works similar to POST /entity/{entity}/{id} but validation is executed only against a single field.\n      tags: [entity]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                __field:\n                  type: string\n                  description: field name to update\n                additionalProperties:\n                  description: field =\u003e value\n              example:\n                  __field: sort\n                  sort: 100\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                __field:\n                  type: string\n                  description: field name to update\n                additionalProperties:\n                  description: file__field =\u003e binary data\n                  type: string\n                  format: binary\n              example:\n                __field: photo\n                file__photo: '\u003cbinary file data\u003e'\n      responses:\n        200:\n          description: Updated entity item\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntityItem'\n        401:\n          $ref: '#/components/responses/401'\n        403:\n          $ref: '#/components/responses/403'\n        404:\n          $ref: '#/components/responses/404'\n        413:\n          $ref: '#/components/responses/413'\n        422:\n          $ref: '#/components/responses/422'\n  /upload/files:\n    post:\n      description: Upload files\n      tags: [upload]\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                'files[]':\n                  description: files to upload\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      responses:\n        200:\n          description: files successdully uploaded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileList'\n        401:\n          $ref: '#/components/responses/401'\n        403:\n          $ref: '#/components/responses/403'\n        413:\n          $ref: '#/components/responses/413'\n  /upload/images:\n    post:\n      description: Upload images\n      tags: [upload]\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                'images[]':\n                  description: images to upload\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n      responses:\n        200:\n          description: images successfully uploaded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImageList'\n        401:\n          $ref: '#/components/responses/401'\n        403:\n          $ref: '#/components/responses/403'\n        413:\n          $ref: '#/components/responses/413'",
			"canonicalURL": "/github.com/mrTimofey/vue-admin@ff0641b3c7f126e90f957f7ca79ab95c64887b6a/-/blob/docs/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/mrTimofey/vue-admin/blob/ff0641b3c7f126e90f957f7ca79ab95c64887b6a/docs/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: \"filters\": object with additionalProperties not implemented",
	"NotImplemented": [
		"complex form schema",
		"object with additionalProperties"
	]
}