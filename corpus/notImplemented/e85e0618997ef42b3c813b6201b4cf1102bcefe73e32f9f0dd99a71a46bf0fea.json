{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ivan1993spb/snake-server"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 14937,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: Snake-Server API\n  description: Snake-Server is a server for multiplayer snake game.\n  version: 4.6.0\n  license:\n    name: MIT\n  contact:\n    name: Ivan Pushkin\n    url: https://twitter.com/IvanDeveloper\n\nservers:\n  - url: /api\n    description: Current instance\n  - url: http://localhost:8080/api\n    description: HTTP instance\n  - url: https://localhost:8080/api\n    description: HTTPS instance\n\npaths:\n  /games:\n    get:\n      summary: Get a list of games\n      description: Get all games on the server\n      tags:\n        - Games\n      parameters:\n        - name: limit\n          in: query\n          description: Games limit in the server's response\n          schema:\n            type: integer\n            format: int32\n        - name: sorting\n          in: query\n          description: Games sorting rule\n          schema:\n            type: string\n            enum:\n              - smart\n              - random\n      responses:\n        200:\n          description: A list of games and additional information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Games'\n        400:\n          $ref: '#/components/responses/InvalidParameters'\n    post:\n      summary: Create a new game\n      description: Create a new game on the server with given map parameters and limits\n      tags:\n        - Games\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                limit:\n                  description: Players limit for the new game\n                  type: integer\n                  format: int32\n                  minimum: 1\n                width:\n                  description: Map width\n                  type: integer\n                  format: int32\n                  maximum: 255\n                height:\n                  description: Map height\n                  type: integer\n                  format: int32\n                  maximum: 255\n                enable_walls:\n                  description: This boolean parameter indicates whether to add walls to the new game or not to\n                  type: boolean\n                  default: true\n              required:\n                - limit\n                - width\n                - height\n      responses:\n        201:\n          description: Information about the created game\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Game'\n        400:\n          $ref: '#/components/responses/InvalidParameters'\n        500:\n          $ref: '#/components/responses/ServerError'\n        503:\n          description: Service unavailable, cannot create a game\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /games/{id}:\n    get:\n      summary: Get information about a game\n      description: Get information about a game by identificator\n      tags:\n        - Games\n      parameters:\n        - $ref: '#/components/parameters/GameID'\n      responses:\n        200:\n          description: Information about the game object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Game'\n        400:\n          $ref: '#/components/responses/InvalidParameters'\n        404:\n          $ref: '#/components/responses/GameNotFound'\n        500:\n          $ref: '#/components/responses/ServerError'\n    delete:\n      summary: Delete a game\n      description: Delete a game by identificator\n      tags:\n        - Games\n      parameters:\n        - $ref: '#/components/parameters/GameID'\n      responses:\n        200:\n          description: Object with identificator of the deleted game\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Deleted'\n        400:\n          $ref: '#/components/responses/InvalidParameters'\n        404:\n          $ref: '#/components/responses/GameNotFound'\n        500:\n          $ref: '#/components/responses/ServerError'\n        503:\n          description: Service unavailable, cannot delete\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /capacity:\n    get:\n      summary: Server capacity\n      tags:\n        - Server\n      description: Get server capacity. Capacity is the number of opened connections divided by the server's limit\n      responses:\n        200:\n          description: Capacity of the server\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Capacity'\n  /info:\n    get:\n      summary: Information about the server\n      tags:\n        - Server\n      description: Get information about the server\n      responses:\n        200:\n          description: Returns information about the server\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n  /games/{id}/broadcast:\n    post:\n      summary: Broadcast a message\n      tags:\n        - Games\n      description: Broadcast a message to all players in a game with given identificator\n      deprecated: true\n      parameters:\n        - $ref: '#/components/parameters/GameID'\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                message:\n                  description: Message to be broadcasted for players in a selected game\n                  type: string\n              required:\n                - message\n      responses:\n        200:\n          description: Object contained broadcast result flag\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Broadcast'\n        400:\n          $ref: '#/components/responses/InvalidParameters'\n        404:\n          $ref: '#/components/responses/GameNotFound'\n        500:\n          $ref: '#/components/responses/ServerError'\n        503:\n          description: Service unavailable, cannot broadcast right now\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /games/{id}/objects:\n    get:\n      summary: A list of objects on the map\n      tags:\n        - Games\n      description: Get all objects on the map\n      parameters:\n        - $ref: '#/components/parameters/GameID'\n      responses:\n        200:\n          description: All objects on the map\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Objects'\n        400:\n          $ref: '#/components/responses/InvalidParameters'\n        404:\n          $ref: '#/components/responses/GameNotFound'\n        500:\n          $ref: '#/components/responses/ServerError'\n  /ping:\n    get:\n      summary: Ping-pong requesting\n      tags:\n        - Server\n      description: Ping request to check the server's availability\n      responses:\n        200:\n          description: Pong response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pong'\ncomponents:\n\n  parameters:\n    GameID:\n      in: path\n      name: id\n      schema:\n        type: integer\n        format: int32\n      required: true\n      description: Game identificator\n\n  responses:\n    InvalidParameters:\n      description: Invalid parameters\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    ServerError:\n      description: Internal server error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    GameNotFound:\n      description: Game not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n\n  schemas:\n\n    Games:\n      type: object\n      description: Object contains a list of games on the server\n      required:\n        - games\n        - limit\n        - count\n      properties:\n        games:\n          type: array\n          items:\n            $ref: '#/components/schemas/Game'\n        limit:\n          description: Games limit\n          type: integer\n          format: int32\n        count:\n          description: Current games number on the server\n          type: integer\n          format: int32\n\n    Info:\n      type: object\n      description: Object contains basic information about the server\n      required:\n        - author\n        - license\n        - version\n        - build\n      properties:\n        author:\n          type: string\n        license:\n          type: string\n        version:\n          type: string\n        build:\n          type: string\n\n    Game:\n      type: object\n      description: Object contains information about a game\n      required:\n        - id\n        - limit\n        - count\n        - width\n        - height\n        - rate\n      properties:\n        id:\n          description: Identificator\n          type: integer\n          format: int32\n        limit:\n          description: Players limit\n          type: integer\n          format: int32\n        count:\n          description: Current players number in the game\n          type: integer\n          format: int32\n        width:\n          description: Map width\n          type: integer\n          format: int32\n        height:\n          description: Map height\n          type: integer\n          format: int32\n        rate:\n          description: Rate\n          type: integer\n          format: int32\n\n    Broadcast:\n      type: object\n      description: Object contains broadcast result flag\n      required:\n        - success\n      properties:\n        success:\n          description: If the flag is true, broadcasting has succeeded\n          type: boolean\n\n    Capacity:\n      type: object\n      description: Object contains current server capacity\n      required:\n        - capacity\n      properties:\n        capacity:\n          description: Capacity is the number of opened connections divided by the number of allowed connections for the server\n          type: number\n          format: double\n\n    Error:\n      type: object\n      description: Contains an error code and description\n      required:\n        - code\n        - text\n      properties:\n        code:\n          description: Error code\n          type: integer\n          format: int32\n        text:\n          description: description\n          type: string\n\n    Deleted:\n      type: object\n      description: Object contains information about the deleted game\n      required:\n        - id\n      properties:\n        id:\n          description: Game identificator\n          type: integer\n          format: int32\n\n    Objects:\n      type: object\n      description: Contains all game objects and the map's properties\n      required:\n        - objects\n      properties:\n        objects:\n          description: A list of all objects on the map\n          type: array\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/Snake'\n              - $ref: '#/components/schemas/Apple'\n              - $ref: '#/components/schemas/Corpse'\n              - $ref: '#/components/schemas/Mouse'\n              - $ref: '#/components/schemas/Watermelon'\n              - $ref: '#/components/schemas/Wall'\n        map:\n          $ref: '#/components/schemas/Map'\n\n    Direction:\n      type: string\n      enum:\n        - \"north\"\n        - \"east\"\n        - \"south\"\n        - \"west\"\n\n    Dot:\n      type: array\n      items:\n        type: integer\n        format: int32\n        minimum: 0\n        maximum: 255\n        nullable: false\n      minItems: 2\n      maxItems: 2\n      example: [2, 3]\n\n    Dots:\n      type: array\n      items:\n        $ref: '#/components/schemas/Dot'\n\n    Snake:\n      type: object\n      description: Object Snake. The type is `snake`\n      required:\n        - type\n        - id\n        - dots\n      properties:\n        type:\n          $ref: '#/components/schemas/ObjectType'\n        id:\n          $ref: '#/components/schemas/ObjectId'\n        dots:\n          $ref: '#/components/schemas/Dots'\n\n    Apple:\n      type: object\n      description: Object Apple. The type is `apple`\n      required:\n        - type\n        - id\n        - dots\n      properties:\n        type:\n          $ref: '#/components/schemas/ObjectType'\n        id:\n          $ref: '#/components/schemas/ObjectId'\n        dot:\n          $ref: '#/components/schemas/Dot'\n\n    Corpse:\n      type: object\n      description: Object Corpse. The type is `corpse`\n      required:\n        - type\n        - id\n        - dots\n      properties:\n        type:\n          $ref: '#/components/schemas/ObjectType'\n        id:\n          $ref: '#/components/schemas/ObjectId'\n        dots:\n          $ref: '#/components/schemas/Dots'\n\n    Mouse:\n      type: object\n      description: Object Mouse. The type is `mouse`\n      required:\n        - type\n        - id\n        - dots\n        - direction\n      properties:\n        type:\n          $ref: '#/components/schemas/ObjectType'\n        id:\n          $ref: '#/components/schemas/ObjectId'\n        dot:\n          $ref: '#/components/schemas/Dot'\n        direction:\n          $ref: '#/components/schemas/Direction'\n\n    Watermelon:\n      type: object\n      description: Object Watermelon. The type is `watermelon`\n      required:\n        - type\n        - id\n        - dots\n      properties:\n        type:\n          $ref: '#/components/schemas/ObjectType'\n        id:\n          $ref: '#/components/schemas/ObjectId'\n        dots:\n          $ref: '#/components/schemas/Dots'\n\n    Wall:\n      type: object\n      description: Object Wall. The type is `wall`\n      required:\n        - type\n        - id\n        - dots\n      properties:\n        type:\n          $ref: '#/components/schemas/ObjectType'\n        id:\n          $ref: '#/components/schemas/ObjectId'\n        dots:\n          $ref: '#/components/schemas/Dots'\n\n    ObjectId:\n      type: integer\n      format: int64\n      description: An object's identifier\n      example: 31\n\n    ObjectType:\n      type: string\n      enum:\n        - \"apple\"\n        - \"corpse\"\n        - \"mouse\"\n        - \"snake\"\n        - \"wall\"\n        - \"watermelon\"\n\n    Pong:\n      type: object\n      description: Pong message\n      required:\n        - pong\n      properties:\n        pong:\n          type: integer\n          format: int32\n\n    Map:\n      type: object\n      description: Map properties\n      required:\n        - width\n        - height\n      properties:\n        width:\n          description: Map width\n          type: integer\n          format: int32\n          example: 120\n        height:\n          description: Map height\n          type: integer\n          format: int32\n          example: 75\n",
			"canonicalURL": "/github.com/ivan1993spb/snake-server@d28532e270cf94ec9840679839dfd2ebc472d387/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ivan1993spb/snake-server/blob/d28532e270cf94ec9840679839dfd2ebc472d387/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/games/{id}/objects\": get: responses: 200: contents: application/json: generate schema: field objects: item: oneOf: oneOf ObjectsObjectsItem: variant Apple: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"discriminator inference"
	]
}