{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/joolfe/postman-to-openapi"
		},
		"file": {
			"name": "FoldersSeparator.yml",
			"size": 0,
			"path": "test/resources/output/FoldersSeparator.yml",
			"byteSize": 5162,
			"content": "openapi: 3.0.0\ninfo:\n  title: Folder Collection\n  description: Just a simple collection for test\n  version: 2.3.0\nservers:\n  - url: https://api.io\ntags:\n  - name: Users\n    description: Operations at User level\n  - name: Users-Admin\n    description: Admin operations at User level\n  - name: Posts\n    description: Operations for Post items\n  - name: Posts-Admin\n    description: Admin operations for Post items\n  - name: Folder 1\n    description: Folder 1 description\n  - name: Folder 1-Folder 2\n    description: Folder 2 description\n  - name: Folder 1-Folder 2-Folder 3\n    description: Folder 3 description\n  - name: Folder 1-Folder 2-Folder 3-Folder 4\n    description: Folder 4 description\n  - name: Folder 1-Folder 2-Folder 3-Folder 4-Folder 5\n    description: Folder 5 description\n  - name: Empty Folder\npaths:\n  /users/admin/roles:\n    get:\n      tags:\n        - Users-Admin\n      summary: Get user roles\n      description: This is a get request in a nested folder\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /users:\n    post:\n      tags:\n        - Users\n      summary: Create a user\n      description: This is a post request with json body\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                example: field\n                other:\n                  data1: 'yes'\n                  data2: 'no'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /customer:\n    post:\n      tags:\n        - Users\n      summary: Create a customer\n      description: This is a post request with json body for create a customer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                example: field\n                other:\n                  data1: 'yes'\n                  data2: 'no'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /posts/admin/settings:\n    get:\n      tags:\n        - Posts-Admin\n      summary: Get posts settings\n      description: This is a get request in a nested folder\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /posts:\n    post:\n      tags:\n        - Posts\n      summary: Create a post\n      requestBody:\n        content:\n          text/plain: {}\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /req4:\n    post:\n      tags:\n        - Folder 1-Folder 2-Folder 3-Folder 4-Folder 5\n      summary: Request 4\n      description: This is a post request with json body\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                example: field\n                other:\n                  data1: 'yes'\n                  data2: 'no'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /req3:\n    post:\n      tags:\n        - Folder 1-Folder 2-Folder 3\n      summary: Request 3\n      description: This is a post request with json body\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                example: field\n                other:\n                  data1: 'yes'\n                  data2: 'no'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /req2:\n    post:\n      tags:\n        - Folder 1-Folder 2\n      summary: Request 2\n      description: This is a post request with json body\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                example: field\n                other:\n                  data1: 'yes'\n                  data2: 'no'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /req1:\n    post:\n      tags:\n        - Folder 1\n      summary: Request 1\n      description: This is a post request with json body\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                example: field\n                other:\n                  data1: 'yes'\n                  data2: 'no'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /info:\n    post:\n      tags:\n        - default\n      summary: Create a info\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                test: here\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n",
			"canonicalURL": "/github.com/joolfe/postman-to-openapi@73718f5d77979d163176fac05796dbfa5755dc4e/-/blob/test/resources/output/FoldersSeparator.yml",
			"externalURLs": [
				{
					"url": "https://github.com/joolfe/postman-to-openapi/blob/73718f5d77979d163176fac05796dbfa5755dc4e/test/resources/output/FoldersSeparator.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/customer\": post: responses: 200: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema",
		"unsupported content types"
	]
}