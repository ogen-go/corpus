{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/corona-warn-app/cwa-quicktest-onboarding"
		},
		"file": {
			"name": "quicktest-openapi-dcc.json",
			"size": 0,
			"path": "api/quicktest-openapi-dcc.json",
			"byteSize": 15835,
			"content": "{\n  \"openapi\": \"3.0.1\",\n  \"info\": {\n    \"title\": \"cwa-dcc-server\",\n    \"license\": {\n      \"name\": \"Apache 2.0\",\n      \"url\": \"http://www.apache.org/licenses/LICENSE-2.0\"\n    },\n    \"version\": \"1.0.0-SNAPSHOT\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8080\",\n      \"description\": \"Generated server url\"\n    }\n  ],\n  \"paths\": {\n    \"/version/v1/dcc\": {\n      \"post\": {\n        \"tags\": [\n          \"external\"\n        ],\n        \"summary\": \"COVID-19 Test Result DCC Components\",\n        \"description\": \"Gets the components to build a Digital Covid Certificate with the result of COVID-19 Test.\",\n        \"operationId\": \"claimDcc\",\n        \"parameters\": [\n          {\n            \"name\": \"cwa-fake\",\n            \"in\": \"header\",\n            \"description\": \"Flag whether this request should be handled as fake request\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RegistrationToken\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"DCC Components retrieved.\",\n            \"content\": {\n              \"*/*\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DccResponse\"\n                }\n              }\n            }\n          },\n          \"202\": {\n            \"description\": \"DCC is pending.\",\n            \"content\": {\n              \"*/*\": {\n                \"schema\": {\n                  \"type\": \"object\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad Request. (Invalid RegistrationToken format)\"\n          },\n          \"404\": {\n            \"description\": \"Registration Token does not exist/ is not registered at DCC-Server.\",\n            \"content\": {\n              \"*/*\": {\n                \"schema\": {\n                  \"type\": \"object\"\n                }\n              }\n            }\n          },\n          \"405\": {\n            \"description\": \"Method Not Allowed\"\n          },\n          \"410\": {\n            \"description\": \"DCC already cleaned up.\",\n            \"content\": {\n              \"*/*\": {\n                \"schema\": {\n                  \"type\": \"object\"\n                }\n              }\n            }\n          },\n          \"415\": {\n            \"description\": \"Unsupported Media Type\"\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DccUnexpectedError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/version/v1/test/{testId}/dcc\": {\n      \"post\": {\n        \"tags\": [\n          \"internal\"\n        ],\n        \"summary\": \"Upload a DCC for a test.\",\n        \"description\": \"Endpoint to upload components to build the DCC.\",\n        \"operationId\": \"uploadDcc\",\n        \"parameters\": [\n          {\n            \"name\": \"testId\",\n            \"in\": \"path\",\n            \"description\": \"ID of the test (hashed GUID).\",\n            \"required\": true,\n            \"schema\": {\n              \"pattern\": \"^[XxA-Fa-f0-9]([A-Fa-f0-9]{63})$\",\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"X-CWA-PARTNER-ID\",\n            \"in\": \"header\",\n            \"description\": \"PartnerID. This needs only to be set if DCC-Server is contacted without DCC-Proxy in between.\",\n            \"required\": true,\n            \"schema\": {\n              \"pattern\": \"^[A-Za-z0-9]{1,64}$\",\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/DccUploadRequest\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"DCC created\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DccUploadResponse\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid Data format\"\n          },\n          \"403\": {\n            \"description\": \"LabId is not or cannot be assigned to Partner.\",\n            \"content\": {\n              \"*/*\": {\n                \"schema\": {\n                  \"type\": \"object\"\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"Test does not exists\",\n            \"content\": {\n              \"*/*\": {\n                \"schema\": {\n                  \"type\": \"object\"\n                }\n              }\n            }\n          },\n          \"405\": {\n            \"description\": \"Method Not Allowed\"\n          },\n          \"409\": {\n            \"description\": \"DCC already exists\",\n            \"content\": {\n              \"*/*\": {\n                \"schema\": {\n                  \"type\": \"object\"\n                }\n              }\n            }\n          },\n          \"415\": {\n            \"description\": \"Unsupported Media Type\"\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\"\n          }\n        }\n      }\n    },\n    \"/version/v1/publicKey/search/{labId}\": {\n      \"get\": {\n        \"tags\": [\n          \"internal\"\n        ],\n        \"summary\": \"Search Public Keys and Test Ids for given LabId\",\n        \"description\": \"Endpoint to search and download all PublicKeys which are assigned to a testId and the given lab Id.\",\n        \"operationId\": \"searchPublicKeys\",\n        \"parameters\": [\n          {\n            \"name\": \"X-CWA-PARTNER-ID\",\n            \"in\": \"header\",\n            \"description\": \"PartnerID. This needs only to be set if DCC-Server is contacted without DCC-Proxy in between.\",\n            \"required\": true,\n            \"schema\": {\n              \"pattern\": \"^[A-Za-z0-9]{1,64}$\",\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"labId\",\n            \"in\": \"path\",\n            \"description\": \"ID of the laboratory to search for.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Public Key list returned.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/LabPublicKeyInfo\"\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad Request\"\n          },\n          \"403\": {\n            \"description\": \"LabId is not or cannot be assigned to Partner.\",\n            \"content\": {\n              \"*/*\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/LabPublicKeyInfo\"\n                  }\n                }\n              }\n            }\n          },\n          \"405\": {\n            \"description\": \"Method Not Allowed\"\n          },\n          \"415\": {\n            \"description\": \"Unsupported Media Type\"\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\"\n          }\n        }\n      }\n    },\n    \"/version/v1/labId\": {\n      \"post\": {\n        \"tags\": [\n          \"internal\"\n        ],\n        \"summary\": \"Claims a new LabId for partner.\",\n        \"description\": \"Checks if the given LabId is not in use and creates a claim to associate it with the partner.\",\n        \"operationId\": \"claimLabId\",\n        \"parameters\": [\n          {\n            \"name\": \"X-CWA-PARTNER-ID\",\n            \"in\": \"header\",\n            \"description\": \"PartnerID. This needs only to be set if DCC-Server is contacted without DCC-Proxy in between.\",\n            \"required\": true,\n            \"schema\": {\n              \"pattern\": \"^[A-Za-z0-9]{1,64}$\",\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/LabIdClaimRequest\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"204\": {\n            \"description\": \"LabId is claimed to you.\",\n            \"headers\": {\n              \"X-CWA-REMAINING-LAB-ID\": {\n                \"description\": \"Amount of remaining LabIds which can be claimed by partner\",\n                \"style\": \"simple\",\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Invalid LabId format\"\n          },\n          \"403\": {\n            \"description\": \"LabId Quota is exceeded by partner.\"\n          },\n          \"405\": {\n            \"description\": \"Method Not Allowed\"\n          },\n          \"409\": {\n            \"description\": \"LabId is already used by another partner.\"\n          },\n          \"415\": {\n            \"description\": \"Unsupported Media Type\"\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\"\n          }\n        }\n      }\n    },\n    \"/version/v1/publicKey\": {\n      \"post\": {\n        \"tags\": [\n          \"external\"\n        ],\n        \"summary\": \"Upload a Public Key\",\n        \"description\": \"Uploads a Public Key to a Registration Token from Verification Server to generate Digital Covid Certificate data.\",\n        \"operationId\": \"uploadPublicKey\",\n        \"parameters\": [\n          {\n            \"name\": \"cwa-fake\",\n            \"in\": \"header\",\n            \"description\": \"Flag whether this request should be handled as fake request\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UploadPublicKeyRequest\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Public Key uploaded and associated.\"\n          },\n          \"400\": {\n            \"description\": \"Bad Request. (e.g. Wrong Format of RegistrationToken or PublicKey).\"\n          },\n          \"403\": {\n            \"description\": \"RegistrationToken is not allowed to issue a DCC (e.g. Token is issued for TeleTan).\"\n          },\n          \"404\": {\n            \"description\": \"RegistrationToken does not exists.\"\n          },\n          \"405\": {\n            \"description\": \"Method Not Allowed\"\n          },\n          \"409\": {\n            \"description\": \"RegistrationToken is already assigned with a PublicKey.\"\n          },\n          \"415\": {\n            \"description\": \"Unsupported Media Type\"\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"RegistrationToken\": {\n        \"required\": [\n          \"registrationToken\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"registrationToken\": {\n            \"pattern\": \"^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$\",\n            \"type\": \"string\",\n            \"description\": \"registrationToken from Verification Server\"\n          }\n        },\n        \"description\": \"The registration token model.\"\n      },\n      \"DccResponse\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"dek\": {\n            \"type\": \"string\",\n            \"description\": \"Data Encryption Key (Encrypted AES-256 Key, encrypted with uploaders public key\"\n          },\n          \"dcc\": {\n            \"type\": \"string\",\n            \"description\": \"Base64 encoded DCC COSE Object. Payload is encrypted with data encryption key.\"\n          }\n        },\n        \"description\": \"The Dcc Response Model.\"\n      },\n      \"DccUnexpectedError\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"reason\": {\n            \"type\": \"string\",\n            \"description\": \"Reason of failure.\",\n            \"enum\": [\n              \"SIGNING_CLIENT_ERROR\",\n              \"SIGNING_SERVER_ERROR\",\n              \"LAB_INVALID_RESPONSE\",\n              \"INTERNAL\"\n            ]\n          }\n        },\n        \"description\": \"The DCC Unexpected Error model. Holds the error which has occured during creation of DCC.\"\n      },\n      \"DccUploadRequest\": {\n        \"required\": [\n          \"dataEncryptionKey\",\n          \"encryptedDcc\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"dccHash\": {\n            \"pattern\": \"^[A-Fa-f0-9]{64}$\",\n            \"type\": \"string\",\n            \"description\": \"SHA256 Hash of plain DCC payload.\"\n          },\n          \"encryptedDcc\": {\n            \"maxLength\": 1000,\n            \"minLength\": 0,\n            \"pattern\": \"^[A-Za-z0-9+/=]*$\",\n            \"type\": \"string\",\n            \"description\": \"Base64 encoded encrypted DCC payload.\"\n          },\n          \"dataEncryptionKey\": {\n            \"maxLength\": 600,\n            \"minLength\": 0,\n            \"pattern\": \"^[A-Za-z0-9+/=]*$\",\n            \"type\": \"string\",\n            \"description\": \"Base64 encoded with PublicKey encrypted Data Encryption Key for encrypted DCC.\"\n          }\n        },\n        \"description\": \"Request payload to upload a DCC from laboratory.\"\n      },\n      \"DccUploadResponse\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"partialDcc\": {\n            \"type\": \"string\",\n            \"description\": \"Base64 encoded DCC Structure without the payload. (COSE/CBOR, Payload needs to be replaced by laboratory)\"\n          }\n        },\n        \"description\": \"Response for uploaded DCC data.\"\n      },\n      \"LabPublicKeyInfo\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"testId\": {\n            \"type\": \"string\",\n            \"description\": \"Hashed GUID of the test.\"\n          },\n          \"dcci\": {\n            \"type\": \"string\",\n            \"description\": \"The DCCI of the to be created DCC.\"\n          },\n          \"publicKey\": {\n            \"type\": \"string\",\n            \"description\": \"The PublicKey to encrypt the Data Encryption Key with.\",\n            \"format\": \"Base64 encoded X509 SubjectPublicKeyInformation Object (RSA or EC Key)\"\n          }\n        },\n        \"description\": \"Information a lab receives when searching for PublicKeys\"\n      },\n      \"LabIdClaimRequest\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"labId\": {\n            \"pattern\": \"^[A-Za-z0-9]{1,64}$\",\n            \"type\": \"string\",\n            \"description\": \"LabId to claim.\"\n          }\n        },\n        \"description\": \"Request payload to claim a LabId.\"\n      },\n      \"UploadPublicKeyRequest\": {\n        \"required\": [\n          \"publicKey\",\n          \"registrationToken\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"registrationToken\": {\n            \"pattern\": \"^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$\",\n            \"type\": \"string\",\n            \"description\": \"registrationToken from Verification Server\"\n          },\n          \"publicKey\": {\n            \"type\": \"string\",\n            \"description\": \"Base64 encoded public key in DER format to encrypt DCC payload components.\"\n          },\n          \"responsePadding\": {\n            \"type\": \"string\"\n          }\n        },\n        \"description\": \"Request payload to upload a Public Key.\"\n      }\n    }\n  }\n}\n",
			"canonicalURL": "/github.com/corona-warn-app/cwa-quicktest-onboarding@439da2acaf528b81eb4ea2d31d5ce38378970ec2/-/blob/api/quicktest-openapi-dcc.json",
			"externalURLs": [
				{
					"url": "https://github.com/corona-warn-app/cwa-quicktest-onboarding/blob/439da2acaf528b81eb4ea2d31d5ce38378970ec2/api/quicktest-openapi-dcc.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/version/v1/dcc\": post: responses: 200: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}