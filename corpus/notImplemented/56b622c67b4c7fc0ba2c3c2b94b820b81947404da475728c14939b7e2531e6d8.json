{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/visiblethread/openapi.yaml",
			"byteSize": 21526,
			"content": "openapi: 3.0.1\ninfo:\n  title: VisibleThread API\n  description: \u003e\n    This is a generated connector for [VisibleThread API v1.0](https://api.visiblethread.com/example/index.html) OpenAPI specification. \n    \n    The VisibleThread API provides services for analyzing or searching documents and web pages.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials.\n\n    Contact support@visiblethread.com to request an API key.\n  x-ballerina-display:\n    label: VisibleThread\n    iconPath: \"icon.png\"\n  version: \"1.0\"\nservers:\n- url: https://api.visiblethread.com/api/v1\nsecurity:\n- api_key: []\npaths:\n  /documents:\n    get:\n      tags:\n      - Documents\n      summary: Get your list of documents\n      description: Get your list of documents\n      operationId: getDocs\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                title: Documents\n                type: array\n                items:\n                  $ref: '#/components/schemas/DocumentListSummary'\n    # post:\n    #   tags:\n    #   - Documents\n    #   summary: Upload a document\n    #   description: \"Upload a document to your VisibleThread account. \\nWe return a\\\n    #     \\ JSON response that contains a \\\"docId\\\" that represents your document. \\\n    #     \\       \\nYou can use this id in other requests to check on the analysis status\\\n    #     \\ for the document and run a dictionary search and retrieve search\\nresults. \"\n    #   operationId: uploadDoc\n    #   requestBody:\n    #     description: Request payload to upload document\n    #     content:\n    #       multipart/form-data:\n    #         schema:\n    #           required:\n    #           - file\n    #           properties:\n    #             file:\n    #               type: string\n    #               description: The uploaded file data\n    #               format: binary\n    #             longSentenceWordCount:\n    #               type: integer\n    #               description: Optional setting what constitutes a long sentence (default\n    #                 25)\n    #               format: int32\n    #             veryLongSentenceWordCount:\n    #               type: integer\n    #               description: Optional setting what constitutes a very long sentence\n    #                 (default 30)\n    #               format: int32\n    #     required: true\n    #   responses:\n    #     200:\n    #       description: Successful response\n    #       content:\n    #         application/json:\n    #           schema:\n    #             $ref: '#/components/schemas/NewDocumentResponse'\n    #     405:\n    #       description: Invalid input\n    #       content: {}\n    #     413:\n    #       description: The document exceeds the maximum supported file size (15mb)\n    #       content: {}\n  /documents/{docId}:\n    get:\n      tags:\n      - Documents\n      summary: Get data from a previously submitted document\n      description: Get data from a previously submitted document identified by ***docId***\n      operationId: getDocById\n      parameters:\n      - name: docId\n        in: path\n        description: Id of document to fetch\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: document response contained readability details for the document\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentResponseDetailed'\n        404:\n          description: document not found\n          content: {}\n        415:\n          description: the document is an unsupported file type\n          content: {}\n        500:\n          description: an unknown error occurred processing the document\n          content: {}\n        503:\n          description: the document analysis has not yet completed, try again later\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentResponseNotReady'\n  /dictionaries:\n    get:\n      tags:\n      - Documents\n      summary: Get your list of dictionaries\n      description: Get your list of dictionaries\n      operationId: getDictionaries\n      responses:\n        200:\n          description: Successful response\n          content: {}\n    # post:\n    #   tags:\n    #   - Documents\n    #   summary: Upload a dictionary (CSV)\n    #   description: 'Upload a dictionary (CSV format) to your VisibleThread account. '\n    #   operationId: uploadDictionary\n    #   requestBody:\n    #     description: Request payload to upload dictionary\n    #     content:\n    #       multipart/form-data:\n    #         schema:\n    #           required:\n    #           - file\n    #           properties:\n    #             file:\n    #               type: string\n    #               description: The uploaded CSV dictionary\n    #               format: binary\n    #     required: true\n    #   responses:\n    #     200:\n    #       description: Successful response\n    #       content: {}\n    #     405:\n    #       description: Invalid input\n    #       content: {}\n  /searches:\n    get:\n      tags:\n      - Documents\n      summary: Get your list of searches\n      description: Get your list of searches\n      operationId: getSearchResults\n      responses:\n        200:\n          description: Successful response\n          content: {}\n    post:\n      tags:\n      - Documents\n      summary: Run a search\n      description: 'Run a search on document **docId** using dictionary **dictId** '\n      operationId: runSearch\n      requestBody:\n        description: Run a search on document **docId** using dictionary**dictId**\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Search'\n        required: true\n      responses:\n        200:\n          description: Successful response\n          content:\n            text/plain:\n              schema:\n                type: object\n        405:\n          description: Invalid input\n          content: {}\n      x-codegen-request-body-name: body\n  /searches/{docId}/{dictionaryId}:\n    get:\n      tags:\n      - Documents\n      summary: Gets search results for a particular document/dictionary\n      description: Get detailed results for a scan/url (readability, long sentence\n        and passive language instances), identified by **scanId** \u0026 **urlId**\n      operationId: getSearchResultsById\n      parameters:\n      - name: docId\n        in: path\n        description: Id of document\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: dictionaryId\n        in: path\n        description: Id of dictionary\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: matchingOnly\n        in: query\n        description: Only returning paragraphs containing a match\n        required: true\n        schema:\n          type: boolean\n      responses:\n        200:\n          description: scan response\n          content: {}\n  /webscans:\n    get:\n      tags:\n      - Webscans\n      summary: Get your list of scans\n      description: Get your list of scans\n      operationId: getScans\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                title: Scans\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScanResponseSummary'\n    post:\n      tags:\n      - Webscans\n      summary: Run a new scan\n      description: \"The scan runs in the background but returns immediately with a\\\n        \\ JSON response containing an \\\"id\\\" that represents your scan.        \\n\\\n        You can use this id in other requests to retrieve your scan result. \\n\\nAlso,\\\n        \\ an \\\"id\\\" is returned for each url which can be used to retrieve detailed\\\n        \\ results for individual scan urls. \"\n      operationId: runScan\n      requestBody:\n        description: Scan title and webUrls to analyze\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewScan'\n        required: true\n      responses:\n        200:\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NewScanResponse'\n        405:\n          description: Invalid input\n          content: {}\n      x-codegen-request-body-name: body\n  /webscans/{scanId}:\n    get:\n      tags:\n      - Webscans\n      summary: Get data from a previously run scan\n      description: Get data from a previously run scan, identified by **scanId**\n      operationId: getScanById\n      parameters:\n      - name: scanId\n        in: path\n        description: Id of scan to fetch\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: scan response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScanResponseDetailed'\n        404:\n          description: webscan not found\n          content: {}\n        503:\n          description: the web analysis has not yet completed, try again later\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebResponseNotReady'\n  /webscans/{scanId}/webUrls/{urlId}:\n    get:\n      tags:\n      - Webscans\n      summary: Gets data for a particular scan/webUrl\n      description: Get detailed results for a scan/url (readability, long sentence\n        and passive language instances), identified by **scanId** \u0026 **urlId**\n      operationId: getScanUrlById\n      parameters:\n      - name: scanId\n        in: path\n        description: Id of scan\n        required: true\n        schema:\n          type: integer\n          format: int64\n      - name: urlId\n        in: path\n        description: Id of url to fetch\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: scan response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebUrlDetail'\n        404:\n          description: scan url not found\n          content: {}\ncomponents:\n  schemas:\n    Search:\n      required:\n      - dictId\n      - docId\n      type: object\n      properties:\n        docId:\n          type: integer\n          format: int64\n          example: 56487\n        dictId:\n          type: integer\n          format: int64\n          example: 47364\n    NewScan:\n      required:\n      - title\n      - webUrls\n      type: object\n      properties:\n        title:\n          type: string\n          example: My fancy scan title\n        webUrls:\n          type: array\n          items:\n            required:\n            - url\n            type: object\n            properties:\n              url:\n                type: string\n                example: http://visiblethread.com\n        scanSettings:\n          type: object\n          properties:\n            longSentenceWordCount:\n              type: integer\n              format: int32\n              example: 20\n            veryLongSentenceWordCount:\n              type: integer\n              format: int32\n              example: 30\n    NewDocumentResponse:\n      required:\n      - docId\n      - scanSettings\n      - task\n      type: object\n      properties:\n        docId:\n          type: integer\n          format: int64\n        task:\n          type: string\n          example: parse\n        scanSettings:\n          type: object\n          properties:\n            longSentenceWordCount:\n              type: integer\n              format: int32\n            veryLongSentenceWordCount:\n              type: integer\n              format: int32\n    NewScanResponse:\n      required:\n      - id\n      - title\n      - webUrls\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 56487\n        title:\n          type: string\n          example: My fancy scan title\n        webUrls:\n          type: array\n          items:\n            required:\n            - id\n            - url\n            type: object\n            properties:\n              url:\n                type: string\n                example: http://visiblethread.com\n              id:\n                type: integer\n                format: int64\n                example: 88596\n    WebUrlHeader:\n      required:\n      - id\n      - url\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        url:\n          type: string\n          example: http://visiblethread.com\n    ScanSummary:\n      required:\n      - title\n      - webUrls\n      type: object\n      properties:\n        title:\n          type: string\n          example: My fancy scan title\n        webUrls:\n          type: array\n          items:\n            $ref: '#/components/schemas/WebUrlHeader'\n    ScanResponseSummary:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        started:\n          type: string\n          format: date-time\n        eta:\n          type: string\n          format: date-time\n        completed:\n          type: string\n          format: date-time\n        scan:\n          $ref: '#/components/schemas/ScanSummary'\n    WebResponseNotReady:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        started:\n          type: string\n          format: date-time\n        eta:\n          type: string\n          format: date-time\n    DocumentResponseNotReady:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        started:\n          type: string\n          format: date-time\n        eta:\n          type: string\n          format: date-time\n    DocumentListSummary:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n          example: My Document.pdf\n    DocumentResponseDetailed:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        started:\n          type: string\n          format: date-time\n        eta:\n          type: string\n          format: date-time\n        completed:\n          type: string\n          format: date-time\n        title:\n          type: string\n        stats:\n          $ref: '#/components/schemas/Stats'\n        scanSettings:\n          type: object\n          properties:\n            longSentenceWordCount:\n              type: integer\n              format: int32\n            veryLongSentenceWordCount:\n              type: integer\n              format: int32\n        paragraphs:\n          type: array\n          items:\n            type: object\n            properties:\n              text:\n                type: string\n                example: This is an exmaple sentence which was extracted from a web\n                  page during a scan previously run using the VisibleThread API service.\n                  This is a short, simple sentence.\n              paragraphIndex:\n                type: integer\n                example: 22\n              paragraphCounter:\n                type: integer\n                example: 12\n              stats:\n                type: object\n                properties:\n                  longSentences:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/LongSentences'\n                  passives:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Passives'\n                  veryLongSentences:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/VeryLongSentences'\n                  hiddenVerbs:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/HiddenVerbs'\n                  adverbs:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Adverbs'\n    Stats:\n      type: object\n      properties:\n        avgSentenceLength:\n          type: integer\n        fleschReadingLevel:\n          type: integer\n        wordCount:\n          type: integer\n        sentenceCount:\n          type: integer\n        longSentenceCount:\n          type: integer\n        fleschKincaidGradeLevel:\n          type: number\n          format: float\n        passiveSentenceCount:\n          type: integer\n    Analysis:\n      type: object\n      properties:\n        title:\n          type: string\n          example: My funky scan title\n        stats:\n          $ref: '#/components/schemas/Stats'\n    WebUrl:\n      allOf:\n      - $ref: '#/components/schemas/WebUrlHeader'\n      - required:\n        - analysis\n        type: object\n        properties:\n          analysis:\n            $ref: '#/components/schemas/Analysis'\n    ScanDetailed:\n      required:\n      - stats\n      - title\n      - webUrls\n      type: object\n      properties:\n        title:\n          type: string\n          example: My fancy scan title\n        webUrls:\n          type: array\n          items:\n            $ref: '#/components/schemas/WebUrl'\n        stats:\n          $ref: '#/components/schemas/Stats'\n    ScanResponseDetailed:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        started:\n          type: string\n          format: date-time\n        eta:\n          type: string\n          format: date-time\n        completed:\n          type: string\n          format: date-time\n        scan:\n          $ref: '#/components/schemas/ScanDetailed'\n    LongSentences:\n      type: array\n      items:\n        type: object\n        properties:\n          start:\n            type: integer\n            example: 0\n          end:\n            type: integer\n            example: 130\n          wordCount:\n            type: integer\n            example: 22\n    VeryLongSentences:\n      type: array\n      items:\n        type: object\n        properties:\n          start:\n            type: integer\n            example: 0\n          end:\n            type: integer\n            example: 130\n          wordCount:\n            type: integer\n            example: 34\n    Passives:\n      type: array\n      items:\n        type: object\n        properties:\n          start:\n            type: integer\n            example: 34\n          end:\n            type: integer\n            example: 47\n          verb:\n            type: string\n            example: extracted\n          passivePiece:\n            type: string\n            example: was extracted\n    HiddenVerbs:\n      type: array\n      items:\n        type: object\n        properties:\n          start:\n            type: integer\n            example: 185\n          end:\n            type: integer\n            example: 210\n          noun:\n            type: string\n            example: investment\n          text:\n            type: string\n            example: investment in intangibles\n    Adverbs:\n      type: array\n      items:\n        type: object\n        properties:\n          start:\n            type: integer\n            example: 386\n          end:\n            type: integer\n            example: 399\n          text:\n            type: string\n            example: exceptionally\n    WebUrlDetail:\n      required:\n      - stats\n      - title\n      - url\n      type: object\n      properties:\n        title:\n          type: string\n          example: My fancy scan title\n        url:\n          type: string\n          example: http://visiblethread.com\n        stats:\n          $ref: '#/components/schemas/Stats'\n        paragraphs:\n          type: array\n          items:\n            type: object\n            properties:\n              text:\n                type: string\n                example: This is an exmaple sentence which was extracted from a web\n                  page during a scan previously run using the VisibleThread API service.\n                  This is a short, simple sentence.\n              paragraphIndex:\n                type: integer\n                example: 22\n              paragraphCounter:\n                type: integer\n                example: 12\n              stats:\n                type: object\n                properties:\n                  longSentences:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/LongSentences'\n                  passives:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Passives'\n                  veryLongSentences:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/VeryLongSentences'\n                  hiddenVerbs:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/HiddenVerbs'\n                  adverbs:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Adverbs'\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: apiKey\n      description: All requests on the VisibleThread API needs to include an API key. The API key can be provided as part of the query string or as a request header. The name of the API key needs to be `apiKey`\n      in: header\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/visiblethread/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/visiblethread/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/searches\": post: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}