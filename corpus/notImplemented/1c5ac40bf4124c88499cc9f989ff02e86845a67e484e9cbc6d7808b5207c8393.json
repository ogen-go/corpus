{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/watchdogpolska/small_eod"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "docs/swagger.yaml",
			"byteSize": 57298,
			"content": "x-paginationLimit: \u0026metaPaginationLimit\n  name: limit\n  in: query\n  description: How many items to return at one time (max 100)\n  required: false\n  schema:\n    type: integer\n    format: int32\nx-paginationOffset: \u0026metaPaginationOffset\n  name: offset\n  in: query\n  description: How many items skip in return\n  required: false\n  schema:\n    type: integer\n    format: int32\nx-errorResponse:\n  default: \u0026metaErrorResponse\n    description: unexpected error\n    content:\n      application/json:\n        schema:\n          $ref: \"#/components/schemas/Error\"\nx-metaEdit: \u0026metaEdit\n  createdOn: \u0026metaCreatedOn\n    type: string\n    format: datetime\n    title: Czas utworzenia treści\n    readOnly: true\n  createdBy: \u0026metaCreatedBy\n    type: string\n    description: User ID responsible for creating the content\n    readOnly: true\n  modifiedOn: \u0026metaModifiedOn\n    type: string\n    format: datetime\n    title: Czas ostatniej modyfikacji treści\n    readOnly: true\n  modifiedBy: \u0026metaModifiedBy\n    type: string\n    title: User ID responsible for the latest content change\n    readOnly: true\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Small_EOD\n  contact:\n    name: Adam Dobrawy\n    email: adam.dobrawy@siecobywatelska.pl\n  license:\n    name: MIT\nservers:\n  - url: https://small-eod.siecobywatelska.pl/v1\n    description: Production server (uses live data)\n  - url: https://demo.small-eod.siecobywatelska.pl/v1\n    description: Sandbox server (uses test data)\n  - url: https://localhost:8080/v1\n    description: Development server (uses ephemeral data)\nsecurity:\n  - sessionAuth: []\n\ntags:\n  - name: administrativeUnit\n  - name: case\n  - name: collection\n  - name: description\n  - name: dictionary\n  - name: event\n  - name: file\n  - name: institution\n  - name: letter\n  - name: note\n  - name: notifiedUser\n  - name: responsibleUser\n  - name: session\n  - name: tagNamespace\n  - name: user\n\n\npaths:\n  /case:\n    get:\n      summary: List all cases\n      operationId: listCase\n      tags:\n        - case\n      parameters:\n        - *metaPaginationLimit\n        - *metaPaginationOffset\n        - name: institution\n          in: query\n          description: Institution ID or NULL\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of cases\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Case\"\n    post:\n      summary: Create a case\n      operationId: createCase\n      tags:\n        - case\n      requestBody:\n        description: New case\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Case'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Case\"\n        default: *metaErrorResponse\n  /case/{caseId}:\n    get:\n      summary: Info for a specific case\n      operationId: showCaseById\n      tags:\n        - case\n      parameters:\n        - name: caseId\n          in: path\n          required: true\n          description: The id of the case to retrieve\n          schema:\n            type: number\n            format: caseId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Case\"\n        default: *metaErrorResponse\n    patch:\n      summary: modified case\n      operationId: updateCaseById\n      tags:\n        - case\n      parameters:\n        - name: caseId\n          in: path\n          required: true\n          description: The id of the case to modify\n          schema:\n            type: number\n            format: caseId\n      requestBody:\n        description: Modified case\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Case'\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Case\"\n        default: *metaErrorResponse\n    delete:\n      description: Deletes a single case based on the ID supplied\n      operationId: deleteCase\n      parameters:\n        - name: caseId\n          in: path\n          description: The id of the case to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - case\n      responses:\n        '204':\n          description: case deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /case/{caseId}/responsibleUser:\n    post:\n      summary: Create a responsible user reference of case\n      operationId: createResponsibleUser\n      parameters:\n        - name: caseId\n          in: path\n          required: true\n          description: The id of the case to modify\n          schema:\n            type: number\n            format: caseId\n      tags:\n        - responsibleUser\n      requestBody:\n        description: New responsible user\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserRef'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserRef\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /case/{caseId}/responsibleUser/{responsibleUserId}:\n    get:\n      summary: Info for a specific responsible user of case\n      operationId: showcaseById\n      tags:\n        - responsibleUser\n      parameters:\n        - name: caseId\n          in: path\n          required: true\n          description: The id of the case to retrieve\n          schema:\n            type: number\n            format: caseId\n        - name: responsibleUserId\n          in: path\n          required: true\n          description: The id of the responsible user to retrieve\n          schema:\n            type: number\n            format: objectId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserRef\"\n        default: *metaErrorResponse\n    delete:\n      description: Deletes a single responsible user based on the ID supplied\n      operationId: deleteResponsibleUser\n      parameters:\n        - name: caseId\n          in: path\n          required: true\n          description: The id of the case to modify\n          schema:\n            type: number\n            format: caseId\n        - name: responsibleUserId\n          in: path\n          required: true\n          description: The id of the responsible user to delete\n          schema:\n            type: number\n            format: objectId\n      tags:\n        - responsibleUser\n      responses:\n        '204':\n          description: case deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /case/{caseId}/notifiedUser:\n    post:\n      summary: Create a notified user reference of case\n      operationId: createNotifiedUser\n      parameters:\n        - name: caseId\n          in: path\n          required: true\n          description: The id of the case to modify\n          schema:\n            type: number\n            format: caseId\n      tags:\n        - notifiedUser\n      requestBody:\n        description: New notified user\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserRef'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserRef\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /case/{caseId}/notifiedUser/{notifiedUserId}:\n    get:\n      summary: Info for a specific notified user of case\n      operationId: shownotifiedUserById\n      tags:\n        - notifiedUser\n      parameters:\n        - name: caseId\n          in: path\n          required: true\n          description: The id of the case to modify\n          schema:\n            type: number\n            format: caseId\n        - name: notifiedUserId\n          in: path\n          required: true\n          description: The id of the responsible user to retrieve\n          schema:\n            type: number\n            format: objectId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserRef\"\n        default: *metaErrorResponse\n    delete:\n      description: Deletes a single notified user based on the ID supplied\n      operationId: deleteNotifiedUser\n      parameters:\n        - name: caseId\n          in: path\n          description: The id of the case to modify\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: notifiedUserId\n          in: path\n          required: true\n          description: The id of the responsible user to delete\n          schema:\n            type: number\n            format: objectId\n      tags:\n        - notifiedUser\n      responses:\n        '204':\n          description: case deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /letter:\n    get:\n      summary: List all letters\n      operationId: listLetter\n      tags:\n        - letter\n      parameters:\n        - *metaPaginationLimit\n        - *metaPaginationOffset\n        - name: case\n          in: query\n          description: Case ID\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of letter\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Letter\"\n    post:\n      summary: Create a letter\n      operationId: createLetter\n      tags:\n        - letter\n      requestBody:\n        description: New letter\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Letter'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Letter\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /letter/{letterId}:\n    get:\n      summary: Info for a specific letter\n      operationId: showLetterById\n      tags:\n        - letter\n      parameters:\n        - name: letterId\n          in: path\n          required: true\n          description: The id of the letter to retrieve\n          schema:\n            type: number\n            format: letterId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Letter\"\n        default: *metaErrorResponse\n    delete:\n      description: Deletes a single letter based on the ID supplied\n      operationId: deleteLetter\n      parameters:\n        - name: letterId\n          in: path\n          description: The id of the letter to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - letter\n      responses:\n        '204':\n          description: letter deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /letter/{letterId}/file:\n    post:\n      summary: Create a file\n      operationId: createFile\n      parameters:\n        - name: letterId\n          in: path\n          required: true\n          description: The id of the letter to retrieve\n          schema:\n            type: number\n            format: letterId\n      tags:\n        - file\n      requestBody:\n        description: New file\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/File'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/File\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /letter/file/sign:\n    post:\n      summary: Create a pre-signed URLs for file\n      operationId: createPreSignedUrl\n      tags:\n        - file\n      requestBody:\n        description: New file signature request\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FileSigner'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileSigner\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /letter/{letterId}/file/{fileId}:\n    get:\n      summary: Info for a specific file\n      operationId: showFileByLetterId\n      tags:\n        - file\n      parameters:\n        - name: letterId\n          in: path\n          required: true\n          description: The id of the letter of file\n          schema:\n            type: number\n            format: letterId\n        - name: fileId\n          in: path\n          required: true\n          description: The id of the file to retrieve\n          schema:\n            type: number\n            format: letterId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Letter\"\n        default: *metaErrorResponse\n  /collection:\n    get:\n      summary: List all collections\n      operationId: listCollection\n      tags:\n        - collection\n      parameters:\n        - *metaPaginationLimit\n        - *metaPaginationOffset\n        - name: case\n          in: query\n          description: Case ID\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of collection\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Collection\"\n    post:\n      summary: Create a collection\n      operationId: createCollection\n      tags:\n        - collection\n      requestBody:\n        description: New collection\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Collection'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Collection\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /collection/{collectionId}:\n    get:\n      summary: Info for a specific collection\n      operationId: showCollectionById\n      security:\n      - sessionAuth: []\n      - bearerAuth: []\n      tags:\n        - collection\n      parameters:\n        - name: collectionId\n          in: path\n          required: true\n          description: The id of the collection to retrieve\n          schema:\n            type: number\n            format: collectionId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Collection\"\n        default: *metaErrorResponse\n    patch:\n      summary: modified collection\n      operationId: updateCollectionById\n      tags:\n        - collection\n      parameters:\n        - name: collectionId\n          in: path\n          required: true\n          description: The id of the collection to modify\n          schema:\n            type: number\n            format: collectionId\n      requestBody:\n        description: Modified collection\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Collection'\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Collection\"\n        default: *metaErrorResponse\n    delete:\n      description: Deletes a single collection based on the ID supplied\n      operationId: deleteCollection\n      parameters:\n        - name: collectionId\n          in: path\n          description: The id of the collection to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - collection\n      responses:\n        '204':\n          description: collection deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /collection/{collectionId}/case:\n    get:\n      summary: Cases match query for a specific collection\n      operationId: showCaseByCollection\n      security:\n      - sessionAuth: []\n      - bearerAuth: []\n      tags:\n        - collection\n      parameters:\n        - name: collectionId\n          in: path\n          required: true\n          description: The id of the collection to retrieve\n          schema:\n            type: number\n            format: collectionId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Case\"\n        default:  *metaErrorResponse\n  /collection/{collectionId}/case/{caseId}/letter:\n    get:\n      summary: Letters of cases match query for a specific collection\n      operationId: showLetterCaseByCollection\n      tags:\n        - collection\n      security:\n      - sessionAuth: []\n      - bearerAuth: []\n      parameters:\n        - name: collectionId\n          in: path\n          required: true\n          description: The id of the collection to retrieve\n          schema:\n            type: number\n            format: collectionId\n        - name: caseId\n          in: path\n          required: true\n          description: The id of the collection to retrieve\n          schema:\n            type: number\n            format: caseId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Letter\"\n        default:  *metaErrorResponse\n  /collection/{collectionId}/case/{caseId}/note:\n    get:\n      summary: Notes of case match query for a specific collection\n      operationId: showNoteCaseByCollection\n      tags:\n        - collection\n      security:\n      - sessionAuth: []\n      - bearerAuth: []\n      parameters:\n        - name: collectionId\n          in: path\n          required: true\n          description: The id of the collection to retrieve\n          schema:\n            type: number\n            format: collectionId\n        - name: caseId\n          in: path\n          required: true\n          description: The id of the collection to retrieve\n          schema:\n            type: number\n            format: caseId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Letter\"\n        default: *metaErrorResponse\n  /collection/{collectionId}/case/{caseId}/event:\n    get:\n      summary: Events of case match query for a specific collection\n      operationId: showEventCaseByCollection\n      tags:\n        - collection\n      security:\n      - sessionAuth: []\n      - bearerAuth: []\n      parameters:\n        - name: collectionId\n          in: path\n          required: true\n          description: The id of the collection to retrieve\n          schema:\n            type: number\n            format: collectionId\n        - name: caseId\n          in: path\n          required: true\n          description: The id of the collection to retrieve\n          schema:\n            type: number\n            format: caseId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n        default: *metaErrorResponse\n  /note:\n    get:\n      summary: List all notes of case\n      operationId: listNote\n      tags:\n        - note\n      parameters:\n        - *metaPaginationLimit\n        - *metaPaginationOffset\n        - name: case\n          in: query\n          description: Case ID\n          required: false\n          schema:\n            type: integer\n            format: caseId\n      responses:\n        '200':\n          description: A paged array of notes\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Note\"\n    post:\n      summary: Create a note\n      operationId: createNote\n      tags:\n        - note\n      requestBody:\n        description: New note\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Note'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Note\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /note/{noteId}:\n    get:\n      summary: Info for a specific note\n      operationId: showNoteById\n      tags:\n        - note\n      parameters:\n        - name: noteId\n          in: path\n          required: true\n          description: The id of the note to retrieve\n          schema:\n            type: number\n            format: letterId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Note\"\n        default: *metaErrorResponse\n    delete:\n      description: Deletes a single note based on the ID supplied\n      operationId: deleteNote\n      parameters:\n        - name: noteId\n          in: path\n          description: The id of the note to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - note\n      responses:\n        '204':\n          description: note deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /event:\n    get:\n      summary: List all events of case\n      operationId: listEvent\n      tags:\n        - event\n      parameters:\n        - *metaPaginationLimit\n        - *metaPaginationOffset\n        - name: case\n          in: query\n          description: Case ID\n          required: false\n          schema:\n            type: integer\n            format: caseId\n      responses:\n        '200':\n          description: A paged array of events\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Event\"\n    post:\n      summary: Create a event\n      operationId: createEvent\n      tags:\n        - event\n      requestBody:\n        description: New event\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Event'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /event/{eventId}:\n    get:\n      summary: Info for a specific event\n      operationId: showEventById\n      tags:\n        - event\n      parameters:\n        - name: eventId\n          in: path\n          required: true\n          description: The id of the event to retrieve\n          schema:\n            type: number\n            format: letterId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Event\"\n        default: *metaErrorResponse\n    delete:\n      description: Deletes a single event based on the ID supplied\n      operationId: deleteEvent\n      parameters:\n        - name: eventId\n          in: path\n          description: The id of the event to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - event\n      responses:\n        '204':\n          description: event deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /user:\n    get:\n      summary: List all users\n      operationId: listUser\n      tags:\n        - user\n      parameters:\n        - *metaPaginationLimit\n        - *metaPaginationOffset\n      responses:\n        '200':\n          description: A paged array of users\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/User\"\n    post:\n      summary: Create a user\n      operationId: createUser\n      tags:\n        - user\n      requestBody:\n        description: New user\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /user/{userId}:\n    get:\n      summary: Info for a specific user\n      operationId: showUserById\n      tags:\n        - user\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          description: The id of the user to retrieve\n          schema:\n            type: number\n            format: letterId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        default: *metaErrorResponse\n    delete:\n      description: Deletes a single user based on the ID supplied\n      operationId: deleteUser\n      parameters:\n        - name: userId\n          in: path\n          description: The id of the user to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - user\n      responses:\n        '204':\n          description: user deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /user/{userId}/session:\n    parameters:\n      - name: userId\n        in: path\n        description: The id of the user to modify\n        required: true\n        schema:\n          type: integer\n          format: userId\n    get:\n      summary: List all sessions\n      operationId: listSessionOfUser\n      tags:\n        - session\n      responses:\n        '200':\n          description: A paged array of sessions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Session\"\n    post:\n      summary: Create a session\n      operationId: createSession\n      security:\n        - basicAuth: []\n      tags:\n        - session\n      requestBody:\n        description: New session\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n      responses:\n        '201':\n          description: Expected response to a valid request. Headers contains secret.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Session\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /user/{userId}/session/{sessionId}:\n    get:\n      summary: Info for a specific session of user\n      operationId: showSessionById\n      tags:\n        - session\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          description: The id of the user to retrieve\n          schema:\n            type: number\n            format: letterId\n        - name: sessionId\n          in: path\n          required: true\n          description: The id of the user to retrieve\n          schema:\n            type: number\n            format: letterId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Session\"\n        default: *metaErrorResponse\n    delete:\n      description: Deletes a single session based on the ID supplied\n      operationId: deleteSession\n      parameters:\n        - name: userId\n          in: path\n          description: The id of the user to modify\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: sessionId\n          in: path\n          description: The id of the session to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - session\n      responses:\n        '204':\n          description: session deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /dictionary:\n    get:\n      summary: List all dictionaries\n      operationId: listDictionary\n      tags:\n        - dictionary\n      parameters:\n        - *metaPaginationLimit\n        - *metaPaginationOffset\n      responses:\n        '200':\n          description: A paged array of dictionaries\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Dictionary\"\n    post:\n      summary: Create a dictionary\n      operationId: createDictionary\n      tags:\n        - dictionary\n      requestBody:\n        description: New dictionary\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Dictionary'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dictionary\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /dictionary/{dictionaryId}:\n    get:\n      summary: Info for a specific dictionary\n      operationId: showDictionaryById\n      tags:\n        - dictionary\n      parameters:\n        - name: dictionaryId\n          in: path\n          required: true\n          description: The id of the dictionary to retrieve\n          schema:\n            type: number\n            format: letterId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dictionary\"\n        default: *metaErrorResponse\n    delete:\n      description: Deletes a single dictionary based on the ID supplied\n      operationId: deleteDictionary\n      parameters:\n        - name: dictionaryId\n          in: path\n          description: The id of the dictionary to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - dictionary\n      responses:\n        '204':\n          description: dictionary deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /description:\n    get:\n      summary: List all descriptions\n      operationId: listDescription\n      tags:\n        - description\n      parameters:\n        - *metaPaginationLimit\n        - *metaPaginationOffset\n      responses:\n        '200':\n          description: A paged array of descriptions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Description\"\n    post:\n      summary: Create a description\n      operationId: createDescription\n      tags:\n        - description\n      requestBody:\n        description: New description\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Description'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Description\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /description/{descriptionId}:\n    get:\n      summary: Info for a specific description\n      operationId: showDescriptionById\n      tags:\n        - description\n      parameters:\n        - name: descriptionId\n          in: path\n          required: true\n          description: The id of the description to retrieve\n          schema:\n            type: number\n            format: letterId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Description\"\n        default: *metaErrorResponse\n    delete:\n      description: Deletes a single description based on the ID supplied\n      operationId: deleteDescription\n      parameters:\n        - name: descriptionId\n          in: path\n          description: The id of the description to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - description\n      responses:\n        '204':\n          description: description deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /institution:\n    get:\n      summary: List all institutions\n      operationId: listInstitution\n      tags:\n        - institution\n      parameters:\n        - *metaPaginationLimit\n        - *metaPaginationOffset\n      responses:\n        '200':\n          description: A paged array of institutions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Institution\"\n    post:\n      summary: Create a institution\n      operationId: createInstitution\n      tags:\n        - institution\n      requestBody:\n        description: New institution\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Institution'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Institution\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /administrativeUnit:\n    get:\n      summary: List all administrative units\n      operationId: listAdministrativeUnit\n      tags:\n        - administrativeUnit\n      parameters:\n        - *metaPaginationLimit\n        - *metaPaginationOffset\n      responses:\n        '200':\n          description: A paged array of administrative units\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/AdministrativeUnit\"\n    post:\n      summary: Create a administrative unit\n      operationId: createAdministrativeUnit\n      tags:\n        - administrativeUnit\n      requestBody:\n        description: New administrative unit\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdministrativeUnit'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdministrativeUnit\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /administrativeUnit/{administrativeUnitId}:\n    get:\n      summary: Info for a specific administrative unit\n      operationId: showAdministrativeUnitById\n      tags:\n        - administrativeUnit\n      parameters:\n        - name: administrativeUnitId\n          in: path\n          required: true\n          description: The id of the administrative unit to retrieve\n          schema:\n            type: number\n            format: letterId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AdministrativeUnit\"\n        default: *metaErrorResponse\n    delete:\n      description: Deletes a single administrative unit based on the ID supplied\n      operationId: deleteAdministrativeUnit\n      parameters:\n        - name: administrativeUnitId\n          in: path\n          description: The id of the administrativeUnit to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - administrativeUnit\n      responses:\n        '204':\n          description: administrativeUnit deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /tagNamespace:\n    get:\n      summary: List all tag namespaces\n      operationId: listTagNamespace\n      tags:\n        - tagNamespace\n      parameters:\n        - *metaPaginationLimit\n        - *metaPaginationOffset\n      responses:\n        '200':\n          description: A paged array of tag namespaces\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TagNamespace\"\n    post:\n      summary: Create a tag namespace\n      operationId: createTagNamespace\n      tags:\n        - tagNamespace\n      requestBody:\n        description: New tag namespace\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TagNamespace'\n      responses:\n        '201':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TagNamespace\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /tagNamespace/{tagNamespaceId}:\n    get:\n      summary: Info for a specific tag namespace\n      operationId: showTagNamespaceById\n      tags:\n        - tagNamespace\n      parameters:\n        - name: tagNamespaceId\n          in: path\n          required: true\n          description: The id of the tag namespace to retrieve\n          schema:\n            type: number\n            format: letterId\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TagNamespace\"\n        default: *metaErrorResponse\n    delete:\n      description: Deletes a single tag namespace based on the ID supplied\n      operationId: deleteTagNamespace\n      parameters:\n        - name: tagNamespaceId\n          in: path\n          description: The id of the tag namespace to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      tags:\n        - tagNamespace\n      responses:\n        '204':\n          description: Tag Namespace deleted\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\ncomponents:\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n    sessionAuth:\n      type: apiKey\n      in: cookie\n      name: session\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\n  schemas:\n    Dictionary:\n      type: object\n      description: A collection of dictionary data for categorizing and collecting statistical information\n      required:\n        - id\n        - name\n        - createdOn\n        - createdBy\n        - modifiedOn\n        - modifiedBy\n      properties:\n        id:\n          type: string\n          format: dictionaryId\n        name:\n          type: string\n          description: Name of the statistical field\n          example:\n              - whose_case\n              - what_scope\n              - inaction_scope\n              - decision_scope\n              - time_of_info_provide\n              - proceddings_interrupted\n              - status\n        value:\n          type: array\n          description: Acceptable values\n          items:\n            type: object\n            required:\n              - id\n              - name\n            properties:\n              id:\n                type: string\n                format: objectId\n              name:\n                type: string\n        maxItems:\n          description: Maximum number of selected values\n          type: number\n          default: 1\n        minItems:\n          description: Minimum number of selected values\n          type: number\n          default: 1\n        active:\n          description: Allows to add to new entries\n          type: boolean\n          default: true\n        createdOn: *metaCreatedOn\n        createdBy: *metaCreatedBy\n        modifiedOn: *metaModifiedOn\n        modifiedBy: *metaModifiedBy\n    Case:\n      type: object\n      required:\n        - id\n        - name\n        - createdOn\n        - createdBy\n        - modifiedOn\n        - modifiedBy\n      properties:\n        id:\n          type: number\n          format: caseId\n          readOnly: true\n        name:\n          type: string\n          description: Name of case\n        comment:\n          type: string\n          description: Comment available for team\n        tag:\n          type: array\n          description: List of tag which apply to case\n          items:\n            type: string\n        auditedInstitution:\n          type: array\n          description: List of audited institution\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                format: objectId\n              user:\n                type: number\n                format: institutionId\n        responsibleUser:\n          type: array\n          description: List of users responsible for the case\n          items:\n            $ref: \"#/components/schemas/UserRef\"\n        notifiedUser:\n          type: array\n          description: List of users which receive notifications\n          items:\n            $ref: \"#/components/schemas/UserRef\"\n        features:\n          type: array\n          description: List of features from dictionaries\n          items:\n            type: string\n        letterCount:\n          type: number\n          description: Count of letter in case\n          readOnly: true\n        noteCount:\n          type: number\n          description: Count of note in case\n          readOnly: true\n        eventCount:\n          type: number\n          description: Count of event in case\n          readOnly: true\n        createdOn: *metaCreatedOn\n        createdBy: *metaCreatedBy\n        modifiedOn: *metaModifiedOn\n        modifiedBy: *metaModifiedBy\n    Institution:\n      type: object\n      required:\n        - id\n        - name\n        - createdOn\n        - createdBy\n        - modifiedOn\n        - modifiedBy\n      properties:\n        id:\n          type: string\n          readOnly: true\n        name:\n          type: string\n          description: Name of institution\n        external_identifier:\n          type: object\n          description: Known external identifier of the institution\n          properties:\n            regon:\n              type: string\n            nip:\n              type: string\n        address:\n          description: Known address of the institution\n          $ref: \"#/components/schemas/AddressData\"\n        administrativeUnit:\n          type: string\n          format: administrativeUnitId\n        createdOn: *metaCreatedOn\n        createdBy: *metaCreatedBy\n        modifiedOn: *metaModifiedOn\n        modifiedBy: *metaModifiedBy\n    TagNamespace:\n        type: object\n        required:\n          - id\n          - description\n          - createdOn\n          - createdBy\n          - modifiedOn\n          - modifiedBy\n        properties:\n          id:\n            type: string\n            format: labelId\n            readOnly: true\n          description:\n            type: string\n          color:\n            type: string\n            format: rgb\n            pattern: \"^[a-f0-9]{9}$\"\n          createdOn: *metaCreatedOn\n          createdBy: *metaCreatedBy\n          modifiedOn: *metaModifiedOn\n          modifiedBy: *metaModifiedBy\n    Collection:\n        type: object\n        required:\n          - id\n          - name\n          - query\n          - createdOn\n          - createdBy\n          - modifiedOn\n          - modifiedBy\n        properties:\n          id:\n            type: string\n            format: collectionId\n            readOnly: true\n          name:\n            type: string\n          content:\n            type: array\n            items:\n              type: string\n              enum:\n                - note\n                - comment\n                - letter\n                - event\n          public:\n            type: boolean\n          expiredOn:\n            type: string\n            format: date-time\n          query:\n            type: string\n            description: Search query\n          createdOn: *metaCreatedOn\n          createdBy: *metaCreatedBy\n          modifiedOn: *metaModifiedOn\n          modifiedBy: *metaModifiedBy\n    Letter:\n      type: object\n      required:\n        - id\n        - name\n        - direction\n        - channel\n        - createdOn\n        - createdBy\n        - modifiedOn\n        - modifiedBy\n      properties:\n        id:\n          type: string\n          format: letterId\n          readOnly: true\n        name:\n          type: string\n        direction:\n          type: string\n          description: Direction\n          enum:\n          - received\n          - send\n        channel:\n          type: string\n          format: channelId\n          description: Channel\n        final:\n          type: boolean\n          description: The status of the letter, e.g. deciding about visibility in the collection\n        data:\n          type: string\n          format: date-time\n          description: Date of receipt / Date of dispatch\n        identifier:\n          type: string\n          description: External identifier of letter / case\n        description:\n          type: number\n          description: Description ID choose by content creator\n        institution:\n          type: array\n          items:\n            type: number\n            format: institutionId\n            description: Institution\n        address:\n          $ref: \"#/components/schemas/AddressData\"\n        case:\n          type: string\n          format: caseId\n        attachment:\n          type: array\n          minItems: 0\n          items:\n            $ref: \"#/components/schemas/File\"\n        ordering:\n          type: number\n          default: 0\n        comment:\n          type: string\n        excerpt:\n          type: string\n        tags:\n          type: array\n          items:\n            type: string\n        createdOn: *metaCreatedOn\n        createdBy: *metaCreatedBy\n        modifiedOn: *metaModifiedOn\n        modifiedBy: *metaModifiedBy\n    File:\n      type: object\n      required:\n        - id\n        - path\n        - name\n      properties:\n        id:\n          type: string\n          format: fileId\n          readOnly: true\n        path:\n          type: string\n        name:\n          type: string\n    FileSigner:\n      type: object\n      required:\n        - name\n      properties:\n          name:\n            type: string\n          method:\n            type: string\n            readOnly: true\n            enum:\n              - POST\n              - PUT\n          url:\n            type: string\n            readOnly: true\n            description: \"Path to send file. See details: https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html\"\n          path:\n            type: string\n            readOnly: true\n    AddressData:\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n        epuap:\n          type: string\n          format: epuapId\n        street:\n          type: string\n        postal_code:\n          type: string\n        city:\n          type: string\n        voivodeship:\n          type: string\n        house_no:\n          type: string\n        flat_no:\n          type: string\n    UserRef:\n      type: object\n      required:\n        - id\n        - user\n      properties:\n        id:\n          type: string\n          format: objectId\n          readOnly: true\n        user:\n          type: number\n          format: userId\n    Channel:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: string\n          format: channelId\n          readOnly: true\n        name:\n          type: string\n          enum:\n            - fedrowanie\n            - faks\n            - od klienta\n            - mecenas zewn.\n            - dostarczenie osobiście\n            - email\n            - poczta tradycyjna\n            - epuap\n        required:\n          type: array\n          description: Required address fields\n          items:\n            type: string\n            enum:\n              - email\n              - epuap\n              - street\n              - postal_code\n              - city\n              - voivodeship\n              - house_no\n              - flat_no\n        createdOn: *metaCreatedOn\n        createdBy: *metaCreatedBy\n        modifiedOn: *metaModifiedOn\n        modifiedBy: *metaModifiedBy\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    Note:\n      type: object\n      required:\n        - id\n        - comment\n        - createdOn\n        - createdBy\n        - modifiedOn\n        - modifiedBy\n      properties:\n        id:\n          type: string\n          format: noteId\n          readOnly: true\n        case:\n          type: string\n          format: caseId\n        comment:\n          type: string\n        createdOn: *metaCreatedOn\n        createdBy: *metaCreatedBy\n        modifiedOn: *metaModifiedOn\n        modifiedBy: *metaModifiedBy\n    Event:\n      type: object\n      required:\n        - id\n        - data\n        - name\n        - createdOn\n        - createdBy\n        - modifiedOn\n        - modifiedBy\n      properties:\n        id:\n          type: string\n          format: noteId\n          readOnly: true\n        case:\n          type: string\n          format: caseId\n        name:\n          type: string\n        data:\n          type: string\n          format: date-time\n        comment:\n            type: string\n        createdOn: *metaCreatedOn\n        createdBy: *metaCreatedBy\n        modifiedOn: *metaModifiedOn\n        modifiedBy: *metaModifiedBy\n    User:\n      type: object\n      required:\n        - id\n        - first_name\n        - second_name\n        - email\n        - permission\n      properties:\n        id:\n          type: string\n          format: userId\n          readOnly: true\n        first_name:\n          type: string\n        second_name:\n          type: string\n        email:\n          type: string\n          format: email\n        password:\n          type: string\n          writeOnly: true\n        permission:\n          type: array\n          minItems: 0\n          items:\n            type: string\n    Session:\n      type: object\n      required:\n        - id\n        - secret\n      properties:\n        id:\n          type: string\n          format: sessionId\n          readOnly: true\n        user:\n          type: string\n          format: userId\n        userAgent:\n          type: string\n        createdOn:\n          type: string\n          format: date-time\n        validUntil:\n          type: string\n          format: date-time\n        secret:\n          type: string\n          writeOnly: true\n          description: Available via cookie on create\n    Description:\n      type: object\n      required:\n        - id\n        - text\n        - createdOn\n        - createdBy\n        - modifiedOn\n        - modifiedBy\n      properties:\n        id:\n          type: string\n          format: sessionId\n          readOnly: true\n        text:\n          type: string\n          format: name\n          maxLength: 200\n        userAgent:\n          type: string\n        createdOn: *metaCreatedOn\n        createdBy: *metaCreatedBy\n        modifiedOn: *metaModifiedOn\n        modifiedBy: *metaModifiedBy\n    AdministrativeUnit:\n      type: object\n      required:\n        - id\n        - name\n        - level\n        - category\n        - terc\n      properties:\n        id:\n          type: string\n          format: AdministrativeUnitId\n        name:\n          type: string\n        level:\n          type: number\n        category:\n          type: string\n        terc:\n          type: string\n",
			"canonicalURL": "/github.com/watchdogpolska/small_eod@509f532e10c20e700cb9b37c73f4a695b53b42a8/-/blob/docs/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/watchdogpolska/small_eod/blob/509f532e10c20e700cb9b37c73f4a695b53b42a8/docs/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/tagNamespace/{tagNamespaceId}\": get: security: security \"sessionAuth\" (index 0): cookie security not implemented",
	"NotImplemented": [
		"cookie security"
	]
}