{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/fossology/fossology"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "src/www/ui/api/documentation/openapi.yaml",
			"byteSize": 62372,
			"content": "# Copyright (C) Siemens AG 2017-2022\n# Copyright (C) 2021 Orange by Piotr Pszczola \u003cpiotr.pszczola@orange.com\u003e\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# version 2 as published by the Free Software Foundation.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# You should have received a copy of the GNU General Public License along\n# with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n\nopenapi: 3.0.2\ninfo:\n  title: FOSSology API\n  description: Automate your fossology instance using REST API\n  version: 1.4.3\n  contact:\n    email: fossology@fossology.org\n  license:\n    name: GPL-2.0-only\n    url: https://github.com/fossology/fossology/blob/master/LICENSE\nservers:\n  - url: http://localhost/repo/api/v1\n    description: Localhost instance\nsecurity:\n  - bearerAuth: []\n  - oauth: []\nexternalDocs:\n  description: Basic guide\n  url: https://github.com/fossology/fossology/wiki/FOSSology-REST-API\ntags:\n- name: auth\n  description: Authentication endpoints\n- name: info\n  description: Basic info about API\n- name: Upload\n  description: Endpoints related to uploads\n- name: Organize\n  description: Endpoints for organization of data\n- name: Search\n  description: Searching data on FOSSology\n- name: User\n  description: User management\n- name: Admin\n  description: Administrator tasks\n- name: Job\n  description: FOSSology jobs\n- name: Folders\n  description: Folder management\n- name: Groups\n  description: User group management\n- name: Report\n  description: Upload's report\n- name: License\n  description: License and obligation management\n\npaths:\n  /tokens:\n    post:\n      operationId: createToken\n      tags:\n        - auth\n      security: []\n      summary: Generate a new token\n      description: \u003e\n        Generate a new token to access REST API\n      requestBody:\n        description: Required details for generating new token\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenRequest'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TokenRequest'\n      responses:\n        '201':\n          description: Token generated\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  header:\n                      type: string\n              example:\n                {\"Authorization\": \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QiLCJleHAiOjE1NTEyOTIyMDAsIm5iZiI6MTU1MTIwNTgwMCwianRpIjoiTmk0eiIsInNjb3BlIjoicmVhZCJ9.71D6xTD2QE45t9AVCwbrQwSSae5lC4yzKCMpZWXoC2Q\"}\n        '404':\n          description: UserName or password incorrect\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n\n  /version:\n    get:\n      operationId: getVersion\n      deprecated: true\n      tags:\n        - info\n      security: []\n      summary: Current API information\n      description: \u003e\n        Deprecated in favour of /info endpoint.\n      responses:\n        '200':\n          description: The version and security information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiInfo'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n\n  /info:\n    get:\n      operationId: getInfo\n      tags:\n        - info\n      security: []\n      summary: Get the current API information\n      description: \u003e\n        Get the current API version, supported authentication methods\n        and description\n      responses:\n        '200':\n          description: The API information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiInfo'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n\n  /health:\n    get:\n      operationId: getHealth\n      tags:\n        - info\n      security: []\n      summary: Get the status of API service\n      description: \u003e\n        Check if API is ready to accept requests or not\n      responses:\n        '200':\n          description: The API information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthInfo'\n        '503':\n          description: The API is not unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthInfo'\n\n  /uploads/{id}:\n    parameters:\n      - name: id\n        required: true\n        description: Id of the upload\n        in: path\n        schema:\n          type: integer\n      - name: groupName\n        description: The group name to chose while accessing the package\n        in: header\n        required: false\n        schema:\n          type: string\n          description: Group name, from last login if not provided\n    get:\n      operationId: getUploadById\n      tags:\n        - Upload\n      summary: Get single upload by id\n      description:\n        Returns a single upload\n      responses:\n        '200':\n          description: Get upload\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Upload'\n        '503':\n          description: \u003e\n            The ununpack agent has not started yet. Please check the 'Look-at'\n            header for more information\n          headers:\n            'Look-at':\n              description: Contains the URL to get jobs for the given upload\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    delete:\n      operationId: deleteUploadById\n      tags:\n        - Upload\n        - Organize\n      summary: Delete upload by id\n      description: \u003e\n        Delete a single upload by id\n      responses:\n        '202':\n          description: Upload will be deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    patch:\n      operationId: updateUploadById\n      tags:\n        - Upload\n        - Organize\n      description: Update an upload information\n      parameters:\n        - name: status\n          description: New status of the upload\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - Open\n              - InProgress\n              - Closed\n              - Rejected\n          example: Closed\n        - name: assignee\n          description: New assignee for the project\n          in: query\n          required: false\n          schema:\n            type: integer\n      requestBody:\n        description: \u003e\n          Comment on the status, required for Closed and Rejected states.\n          Ignored for others.\n        content:\n          text/plain:\n            schema:\n              description: The comment for new status\n              type: string\n              example: \"The upload cleared for use.\"\n      responses:\n        '202':\n          description: Upload will be updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    put:\n      operationId: moveUploadById\n      tags:\n        - Upload\n        - Organize\n      description: Copy or move an upload by id\n      parameters:\n        - name: folderId\n          description: Folder Id, where upload should be copied to\n          in: header\n          required: true\n          schema:\n            type: integer\n        - name: action\n          in: header\n          required: true\n          description: Action to be performed\n          schema:\n            type: string\n            enum:\n              - copy\n              - move\n      summary: Copy/Move an upload\n      responses:\n        '202':\n          description: Upload will be copied/moved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n\n  /uploads:\n    parameters:\n      - name: groupName\n        description: The group name to chose while accessing the package\n        in: header\n        required: false\n        schema:\n          type: string\n          description: Group name, from last login if not provided\n    get:\n      operationId: getUploads\n      tags:\n        - Upload\n      summary: Uploads\n      parameters:\n        - name: folderId\n          description: Folder ID to limit the uploads to\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: recursive\n          description: Load uploads from child folders as well\n          in: query\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: name\n          description: Filter pattern for name and description\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: status\n          description: Status of uploads\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - Open\n              - InProgress\n              - Closed\n              - Rejected\n        - name: assignee\n          description: \u003e\n            User name to which uploads are assigned to or -me- or -unassigned-\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: since\n          description: Uploads since given date in YYYY-MM-DD format\n          in: query\n          required: false\n          schema:\n            type: string\n            pattern: \\d{4}\\-\\d{2}\\-\\d{2}\n        - name: page\n          description: Page number to fetch\n          in: header\n          required: false\n          schema:\n            type: integer\n            default: 1\n        - name: limit\n          description: Limits of responses per request\n          in: header\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            default: 100\n      description: \u003e\n        The uploads endpoint returns all uploads\n      responses:\n        '200':\n          description: An array of uploads\n          headers:\n            X-Total-Pages:\n              description: Total number of pages which can be fetched\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Upload'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    post:\n      operationId: createUpload\n      tags:\n        - Upload\n      summary: Post new upload to FOSSology\n      description: \u003e\n        Endpoint to create a new upload in FOSSology\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/VcsUpload'\n                - $ref: '#/components/schemas/UrlUpload'\n                - $ref: '#/components/schemas/ServerUpload'\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                fileInput:\n                  type: string\n                  format: binary\n      parameters:\n        - name: folderId\n          description: Folder Id, where upload should be created\n          in: header\n          required: true\n          schema:\n            type: integer\n        - name: uploadDescription\n          description: Visible description of the file\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: public\n          description: The access level to the upload\n          in: header\n          required: false\n          schema:\n            type: string\n            enum:\n              - private\n              - protected\n              - public\n            default: protected\n        - name: applyGlobal\n          description: \u003e\n            Apply global decisions for current upload\n          in: header\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: ignoreScm\n          description: \u003e\n            Ignore SCM files (Git, SVN, TFS) and files with particular Mimetype\n          in: header\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: uploadType\n          description: \u003e\n            Type of upload done. Required for VCS, URL and server uploads\n          in: header\n          required: false\n          schema:\n            type: string\n            enum:\n              - vcs\n              - url\n              - server\n            default: vcs\n      responses:\n        '201':\n          description: Upload is created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n\n  /uploads/{id}/summary:\n    parameters:\n      - name: id\n        required: true\n        description: Id of the upload\n        in: path\n        schema:\n          type: integer\n      - name: groupName\n        description: The group name to chose while accessing the package\n        in: header\n        required: false\n        schema:\n          type: string\n          description: Group name, from last login if not provided\n    get:\n      operationId: getSummaryByUploadId\n      tags:\n        - Upload\n      summary: Get single upload summary\n      description:\n        Returns summary for single upload\n      responses:\n        '200':\n          description: Get summary\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UploadSummary'\n        '503':\n          description: \u003e\n            The ununpack agent has not started yet. Please check the 'Look-at'\n            header for more information\n          headers:\n            'Look-at':\n              description: Contains the URL to get jobs for the given upload\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n\n  /uploads/{id}/licenses:\n    parameters:\n      - name: id\n        required: true\n        description: Id of the upload\n        in: path\n        schema:\n          type: integer\n      - name: agent\n        required: true\n        description: Name of the agent\n        in: query\n        schema:\n          type: array\n          items:\n            type: string\n            enum:\n              - nomos\n              - monk\n              - ninka\n              - ojo\n              - reportImport\n              - reso\n              - scancode\n          uniqueItems: true\n        style: form\n        explode: false\n      - name: containers\n        required: false\n        description: Show directories and containers\n        in: query\n        schema:\n          type: boolean\n          default: true\n      - name: license\n        required: false\n        description: Show license in response\n        in: query\n        schema:\n          type: boolean\n          default: true    \n      - name: copyright\n        required: false\n        description: Show copyrights in response\n        in: query\n        schema:\n          type: boolean\n          default: false    \n      - name: groupName\n        description: The group name to chose while accessing the package\n        in: header\n        required: false\n        schema:\n          type: string\n          description: Group name, from last login if not provided\n    get:\n      operationId: getLicensesByUploadId\n      tags:\n        - Upload\n      summary: Get licenses found by agent\n      description:\n        Returns the list of licenses found by requested agent\n      responses:\n        '200':\n          description: Get licenses\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UploadLicenses'\n        '503':\n          description: \u003e\n            The ununpack agent or queried agents have not started yet. Please\n            check the 'Look-at' header for more information.\n          headers:\n            'Look-at':\n              description: Contains the URL to get jobs for the given upload\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        '412':\n          description: \u003e\n            The agent has not been scheduled for the upload. Please check the\n            response message.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n\n  /search:\n    get:\n      operationId: searchFile\n      tags:\n        - Search\n      description: Search the FOSSology for a specific file\n      parameters:\n        - name: groupName\n          description: The group name to chose while performing search\n          in: header\n          required: false\n          schema:\n            type: string\n            description: Group name, from last login if not provided\n        - name: searchType\n          # use 'allfiles', if not given\n          required: false\n          description: Limit search to\n          in: header\n          schema:\n            type: string\n            enum:\n              - directory\n              - containers\n              - allfiles\n            default: allfiles\n        - name: uploadId\n          in: header\n          required: false\n          description: Id of the upload to search files into\n          schema:\n            type: integer\n        - name: filename\n          description: Filename to find, can contain % as wild-card\n          required: false\n          in: header\n          schema:\n            type: string\n        - name: tag\n          description: Tag to find\n          required: false\n          in: header\n          schema:\n            type: string\n        - name: page\n          description: Page number (starts from 1)\n          required: false\n          in: header\n          schema:\n            type: integer\n            default: 1\n            minimum: 1\n        - name: limit\n          description: Limits of responses per request\n          required: false\n          in: header\n          schema:\n            type: integer\n            default: 50\n            minimum: 1\n            maximum: 100\n        - name: filesizemin\n          description: Min filesize in bytes\n          required: false\n          in: header\n          schema:\n            type: integer\n            minimum: 0\n        - name: filesizemax\n          description: Max filesize in bytes\n          required: false\n          in: header\n          schema:\n            type: integer\n            minimum: 0\n        - name: license\n          description: License search filter\n          required: false\n          in: header\n          schema:\n            type: string\n        - name: copyright\n          description: Copyright search filter\n          required: false\n          in: header\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          headers:\n            X-Total-Pages:\n              description: Total number of pages which can be generated based on limit\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SearchResults'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  /users:\n    get:\n      operationId: getUsers\n      tags:\n        - User\n        - Admin\n      description: Get the registered users\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  /users/{id}:\n    parameters:\n      - name: id\n        required: true\n        in: path\n        schema:\n          type: integer\n    get:\n      operationId: getUserById\n      tags:\n        - User\n        - Admin\n      summary: Get user by id\n      description: \u003e\n        Get one single user by id\n      responses:\n        '200':\n          description: User with the given id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n    delete:\n      operationId: deleteUserById\n      tags:\n        - User\n        - Admin\n      summary: Delete user by id\n      description: \u003e\n        Delete a single user by id\n      responses:\n        '202':\n          description: User will be deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n  /users/self:\n    get:\n      operationId: getSelf\n      tags:\n        - User\n      description: Get the information about logged in user\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/User'\n                  - type: object\n                    properties:\n                      default_group:\n                        type: string\n                        description: Default group of the user\n                        example:\n                          \"fossy\"        \n        default:\n          $ref: '#/components/responses/defaultResponse'\n  /jobs:\n    parameters:\n      - name: groupName\n        description: The group name to chose while accessing jobs\n        in: header\n        required: false\n        schema:\n          type: string\n          description: Group name, from last login if not provided\n    get:\n      operationId: getJobs\n      tags:\n      - Job\n      summary: Gets all jobs\n      description: Returns all jobs with their status\n      parameters:\n        - name: limit\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n          in: header\n        - name: page\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n          in: header\n        - name: upload\n          required: false\n          schema:\n            type: integer\n          in: query\n          description: Return jobs for the given upload id only\n      responses:\n        '200':\n          description: OK\n          headers:\n            X-Total-Pages:\n              description: Total number of pages which can be generated based on limit\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Job'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n    post:\n      operationId: startJobs\n      tags:\n        - Job\n      summary: Schedule an Analysis\n      description:  Schedule an Analysis of an existing upload\n      parameters:\n        # This could also be omitted, because there are no real folders\n        - name: folderId\n          in: header\n          required: true\n          schema:\n            type: integer\n        - name: uploadId\n          in: header\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: Agents to be scheduled with the job\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScanOptions'\n      responses:\n        '201':\n          description: Job Scheduled with job id in message\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n          $ref: '#/components/responses/defaultResponse'\n  /jobs/{id}:\n    parameters:\n      - name: id\n        required: true\n        description: Id of the job\n        in: path\n        schema:\n          type: integer\n    get:\n      operationId: getJobById\n      tags:\n      - Job\n      summary: Gets single job by id\n      description: Returns job with the status\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Job'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n\n  /folders:\n    parameters:\n      - name: groupName\n        description: The group name to chose while accessing folders\n        in: header\n        required: false\n        schema:\n          type: string\n          description: Group name, from last login if not provided\n    get:\n      operationId: getFolders\n      tags:\n      - Folders\n      summary: Get the list of accessible folders\n      description: \u003e\n        Get all folders or from a specific group\n      responses:\n        '200':\n          description: List of folders\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Folder'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n    post:\n      operationId: createFolder\n      tags:\n      - Organize\n      - Admin\n      - Folders\n      summary: Create a new folder\n      description: \u003e\n        Create a new child folder with optional description\n      parameters:\n        - name: parentFolder\n          in: header\n          required: true\n          description: Parent folder for the new folder\n          schema:\n            type: integer\n        - name: folderName\n          in: header\n          required: true\n          description: Name of the new folder\n          schema:\n            type: string\n        - name: folderDescription\n          in: header\n          required: false\n          description: Description of the new folder\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Folder with the same name already exists under the same parent\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        '201':\n          description: Folder is created with new folder id in message\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n  /folders/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: ID of the folder\n        schema:\n          type: integer\n      - name: groupName\n        description: The group name to chose while accessing the folder\n        in: header\n        required: false\n        schema:\n          type: string\n          description: Group name, from last login if not provided\n    get:\n      operationId: getFolderById\n      tags:\n      - Folders\n      summary: Get a single folder details\n      description:\n        Get a single folder by id\n      responses:\n        '200':\n          description: Details of the required folder\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Folder'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n    delete:\n      operationId: deleteFolderById\n      tags:\n      - Organize\n      - Folders\n      - Admin\n      summary: Delete a folder\n      description: \u003e\n        Schedule a folder deletion\n      responses:\n        '202':\n          description: Folder scheduled to be deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n    patch:\n      operationId: patchFolderById\n      tags:\n      - Organize\n      - Folders\n      parameters:\n        - name: name\n          in: header\n          required: false\n          description: New name of the folder\n          schema:\n            type: string\n        - name: description\n          in: header\n          required: false\n          description: New description of the folder\n          schema:\n            type: string\n      summary: Edit a folder's description\n      description: \u003e\n        Change a folder's name and/or description\n      responses:\n        '200':\n          description: Folder is updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n    put:\n      operationId: moveFolderById\n      tags:\n      - Organize\n      - Folders\n      parameters:\n        - name: parent\n          in: header\n          required: true\n          description: New parent folder id\n          schema:\n            type: integer\n        - name: action\n          in: header\n          required: true\n          description: Action to be performed\n          schema:\n            type: string\n            enum:\n              - copy\n              - move\n      summary: Copy/Move a folder\n      description: \u003e\n        Copy or move a folder by id\n      responses:\n        '202':\n          description: Folder will be copied/moved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n\n  /groups:\n    get:\n      operationId: getGroups\n      tags:\n      - Groups\n      summary: Get the list of groups\n      description: \u003e\n        Returns accessible groups for a user, all groups for an admin\n      responses:\n        '200':\n          description: List of groups\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Group'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n    post:\n      operationId: createGroup\n      tags:\n      - Organize\n      - Groups\n      - Admin\n      summary: Create a new group\n      description: \u003e\n        Create a new user group\n      parameters:\n        - name: name\n          in: header\n          required: true\n          description: Name of the new group\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Group has been added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        '400':\n          description: Group already exists, failed to create group or no group name provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        '500':\n          description: Internal server error with details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n\n  /report:\n    get:\n      operationId: getReportsByUpload\n      tags:\n      - Job\n      - Report\n      summary: Get the reports for a given upload\n      description: \u003e\n        List all reports available for a given upload\n      parameters:\n        - name: uploadId\n          in: header\n          required: true\n          description: Id of the upload to generate the report for\n          schema:\n            type: integer\n        - name: reportFormat\n          in: header\n          required: true\n          description: Which report to be genereated\n          schema:\n            type: string\n            enum:\n              - dep5\n              - spdx2\n              - spdx2tv\n              - readmeoss\n              - unifiedreport\n              - clixml\n        - name: groupName\n          description: The group name to chose while generating a report\n          in: header\n          required: false\n          schema:\n            type: string\n            description: Group name, from last login if not provided\n      responses:\n        '201':\n          description: Report generation is scheduled. Link to download report will be in message\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n  /report/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: Id the report to download\n        schema:\n          type: integer\n      - name: groupName\n        description: The group name to chose while downloading specific report\n        in: header\n        required: false\n        schema:\n          type: string\n          description: Group name, from last login if not provided\n    get:\n      operationId: getReportById\n      tags:\n      - Job\n      - Report\n      summary: Download the report\n      description: \u003e\n        Get a report by id\n      responses:\n        '200':\n          description: Required report\n          content:\n            text/plain:\n              schema:\n                type: string\n                format: binary\n            application/vnd.openxmlformats-officedocument.wordprocessingml.document:\n              schema:\n                type: string\n                format: binary\n            application/xml:\n              schema:\n                type: string\n                format: binary\n        '503':\n          description: Report is not ready yet. Check 'Retry-After' header.\n          headers:\n            Retry-After:\n              description: Retry the request after this many seconds\n              schema:\n                type: integer\n                example: 10\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n  /filesearch:\n    parameters:\n      - name: groupName\n        description: The group name to chose while downloading specific report\n        in: header\n        required: false\n        schema:\n          type: string\n          description: Group name, from last login if not provided\n    post:\n      operationId: getFiles\n      tags:\n      - Upload\n      - Search\n      summary: Get the information of files matching the provided hashes\n      description: \u003e\n        Get a list of files by hashes\n      requestBody:\n          description: List of file hashes to fetch\n          required: true\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Hash'\n      responses:\n        '200':\n          description: List of matching files\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/File'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n  /license:\n    parameters:\n      - name: groupName\n        description: The group name to chose\n        in: header\n        required: false\n        schema:\n          type: string\n          description: Group name, from last login if not provided\n    get:\n      operationId: getLicenses\n      tags:\n      - License\n      parameters:\n        - name: page\n          description: Page number to fetch\n          in: header\n          required: false\n          schema:\n            type: integer\n            default: 1\n        - name: limit\n          description: Limits of responses per request\n          in: header\n          required: false\n          schema:\n            type: integer\n            minimum: 1\n            default: 100\n        - name: active\n          description: Get only active licenses\n          in: header\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: kind\n          description: Which kind of licenses to get.\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - candidate\n              - main\n              - all\n            default: all\n      summary: Get all license from the database\n      description: \u003e\n        Get a list of available licenses (filtered by kind or status)\n      responses:\n        '200':\n          description: All licenses from database\n          headers:\n            X-Total-Pages:\n              description: Total number of pages which can be fetched\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  allOf:\n                    - type: object\n                      properties:\n                        id:\n                          type: integer\n                          description: Id key\n                          example:\n                            125\n                    - $ref: '#/components/schemas/License'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n    post:\n      operationId: createLicense\n      tags:\n      - License\n      summary: Create a new license\n      description: \u003e\n        Add a new license to the database\n      requestBody:\n        description: Information about new license\n        required: true\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '#/components/schemas/License'\n                - type: object\n                  properties:\n                    mergeRequest:\n                      description: Open a merge request for candidate license?\n                      type: boolean\n                      default: false\n              required:\n                - shortName\n      responses:\n        '201':\n          description: License added successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        '409':\n          description: License with same name or text already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n  /license/{shortname}:\n    parameters:\n      - name: shortname\n        in: path\n        required: true\n        description: Shortname of the license\n        schema:\n          type: string\n      - name: groupName\n        description: The group name to chose\n        in: header\n        required: false\n        schema:\n          type: string\n          description: Group name, from last login if not provided\n    get:\n      operationId: getLicenseByShortname\n      tags:\n      - License\n      summary: Get a specific license\n      description: \u003e\n        Get information about a specific license\n      responses:\n        '200':\n          description: License\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: object\n                    properties:\n                      id:\n                        type: integer\n                        description: Id key\n                        example:\n                          125\n                  - $ref: \"#/components/schemas/License\"\n                  - type: object\n                    properties:\n                      obligations:\n                        description: Obligations associated with the license\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Obligation'\n        '404':\n          description: License not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n    patch:\n      operationId: updateLicenseByShortname\n      tags:\n      - License\n      summary: Update a license\n      description: \u003e\n        Update information about a given license\n      requestBody:\n        description: Information to be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              description: Set the properties to be updated\n              properties:\n                fullName:\n                  description: New fullname\n                  type: string\n                  nullable: true\n                  example:\n                    \"Updated license name\"\n                text:\n                  description: New license text\n                  type: string\n                  nullable: true\n                  example:\n                    \"Updated and corrected license text\"\n                url:\n                  description: New URL for license\n                  type: string\n                  nullable: true\n                  example:\n                    \"https://opensource.org/licenses/MIT\"\n                risk:\n                  description: New risk value\n                  type: integer\n                  nullable: true\n                  example:\n                    2\n      responses:\n        '200':\n          description: License added successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        default:\n            $ref: '#/components/responses/defaultResponse'\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: \"Token from FOSSology\"\n    oauth:\n      description: \"Machine-2-Machine communication from oauth\"\n      type: oauth2\n      flows:\n        clientCredentials:\n          tokenUrl: \"https://api.example.com/oauth2/authorize\"\n          scopes: {}\n  schemas:\n    SearchResults:\n      type: object\n      properties:\n        upload:\n          $ref: '#/components/schemas/Upload'\n        uploadTreeId:\n          type: integer\n          description: Upload tree ID\n        filename:\n          type: string\n          description: Filename of the treeItem\n    LicenseDecider:\n      type: object\n      properties:\n        nomos_monk:\n          type: boolean\n          description: Scanners matches if all Nomos findings are within the Monk findings.\n        bulk_reused:\n          type: boolean\n          description: Bulk phrases from reused packages.\n        new_scanner:\n          type: boolean\n          description: New scanner results, i.e., decisions were marked as work in progress if new scanner finds additional licenses.\n        ojo_decider:\n          type: boolean\n          description: Scanners matches if Ojo or REUSE.Software findings are no contradiction with other findings.\n    ScanOptions:\n      type: object\n      properties:\n        analysis:\n          $ref: '#/components/schemas/Analysis'\n        decider:\n          $ref: '#/components/schemas/LicenseDecider'\n        reuse:\n          $ref: '#/components/schemas/Reuser'\n        scancode:\n          $ref: '#/components/schemas/Scancode'\n    Upload:\n      type: object\n      properties:\n        folderid:\n          type: integer\n          description: The folder id, where the upload is located\n        foldername:\n          type: string\n          description: The name of the folder where the upload is located\n        id:\n          type: integer\n          description: Upload id of the upload.\n        description:\n          type: string\n          description: Description of the upload.\n        uploadname:\n          type: string\n          description: Display name of the upload.\n        uploaddate:\n          type: string\n          description: Date, when the file was uploaded.\n        assignee:\n          type: integer\n          description: assignee id of the upload.\n          nullable: true\n        hash:\n          $ref: '#/components/schemas/Hash'\n    UploadSummary:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Upload id of the upload.\n        uploadName:\n          type: string\n          description: Display name of the upload.\n        assignee:\n          type: integer\n          description: assignee id of the upload.\n          nullable: true\n        mainLicense:\n          type: string\n          description: Main license selected on the upload.\n        uniqueLicenses:\n          type: integer\n          description: No. of unique licenses found.\n        totalLicenses:\n          type: integer\n          description: Total no. of licenses found.\n        uniqueConcludedLicenses:\n          type: integer\n          description: Unique licenses concluded.\n        totalConcludedLicenses:\n          type: integer\n          description: Total concluded licenses.\n        filesToBeCleared:\n          type: integer\n          description: Files without clearing decisions.\n        filesCleared:\n          type: integer\n          description: Files with clearing decisions.\n        clearingStatus:\n          type: string\n          enum:\n            - Open\n            - InProgress\n            - Closed\n            - Rejected\n          description: Upload is clearing status.\n        copyrightCount:\n          type: integer\n          description: No. of copyrights found in the upload.\n    Job:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the job\n        name:\n          type: string\n          description: Name of the job\n        queueDate:\n          type: string\n          description: When the job was queued\n        uploadId:\n          type: integer\n          description: Upload for which the job was scheduled\n        userId:\n          type: integer\n          description: User who scheduled the job\n        groupId:\n          type: integer\n          description: Group under which the job was scheduled\n        eta:\n          type: integer\n          description: ETA of job to finish in seconds\n        status:\n          type: string\n          enum:\n            - Completed\n            - Failed\n            - Queued\n            - Processing\n          description: Denotes the current status of the job in the queue\n    Info:\n      type: object\n      properties:\n        code:\n          type: integer\n          description: HTTP status code\n          example: 200\n        message:\n          type: string\n          description: Message in the info\n        type:\n          type: string\n          enum:\n            - INFO\n            - ERROR\n          description: Denotes if info was created on error\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: ID of the user\n        name:\n          type: string\n          description: Unique username\n        description:\n          type: string\n          description: Description of the user\n        email:\n          type: string\n          description: Email of the user, needs to be unique and is required\n        accessLevel:\n          type: string\n          enum:\n            - none\n            - read_only\n            - read_write\n            - admin\n        rootFolderId:\n          type: number\n          format: int\n          description: root folder id of the user\n        emailNotification:\n          type: boolean\n          description: enable email notification when upload scan completes\n        agents:\n          $ref: '#/components/schemas/Analysis'\n      required:\n        - id\n        - name\n        - description\n    Analysis:\n      type: object\n      properties:\n        bucket:\n          type: boolean\n          description: Should bucket analysis be run on this upload\n        copyright_email_author:\n          type: boolean\n          description: Should Copyright/Email/URL/Author Analysis be run on this upload.\n        ecc:\n          type: boolean\n          description: Should ECC Analysis be run on this upload.\n        keyword:\n          type: boolean\n          description: Should keyword Analysis be run on this upload.\n        mime:\n          type: boolean\n          description: Should MIME Analysis be run on this upload.\n        monk:\n          type: boolean\n          description: Should Monk Analysis be run on this upload.\n        nomos:\n          type: boolean\n          description: Should Nomos Analysis be run on this upload.\n        ojo:\n          type: boolean\n          description: Should OJO Analysis be run on this upload.\n        package:\n          type: boolean\n          description: Should Package Analysis be run on this upload.\n        reso:\n          type: boolean\n          description: Should REUSE.Software Analysis be run on this upload.\n    Reuser:\n      type: object\n      properties:\n        reuse_upload:\n          type: integer\n          description: The UploadID to reuse.\n        reuse_group:\n          type: string\n          description: The group of the reused upload\n        reuse_main:\n          type: boolean\n          description: Copy the main license from reused package?\n        reuse_enhanced:\n          type: boolean\n          description: Run enhanced reuser with diff tool (slow)\n        reuse_report:\n          type: boolean\n          description: Copy all report configuration from conf page.\n        reuse_copyright:\n          type: boolean\n          description: Copy the copyright deactivation and edits.\n      required:\n        - reuse_upload\n        - reuse_group\n    Scancode:\n      type: object\n      properties:\n        license:\n          type: boolean\n          description: A full comparison between the database of licenses present in ScanCode and the code uploaded by users based approach. \n        copyright:\n          type: boolean\n          description: Copyright along with copyright holder/author information.\n        email:\n          type: boolean\n          description: Email(s) present in the scan code file.\n        url:\n          type: boolean\n          description: URL(s) present in the scan code file.\n    Folder:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Id of the folder.\n        name:\n          type: string\n          description: Name of the folder.\n        description:\n          type: string\n          description: Description of the folder.\n        parent:\n          type: integer\n          description: Id of the parent folder (if any, null otherwise).\n    TokenRequest:\n      type: object\n      properties:\n        username:\n          type: string\n          description: Username of the login user.\n        password:\n          type: string\n          format: password\n          description: Password of the user trying to login.\n        token_name:\n          type: string\n          maxLength: 40\n          description: Friendly name of the token\n        token_scope:\n          type: string\n          enum:\n            - read\n            - write\n          description: The scope of the token.\n        token_expire:\n          type: string\n          format: date\n          description: Date when the token must expire (default max 30 days).\n      required:\n        - username\n        - password\n        - token_name\n        - token_scope\n        - token_expire\n    VcsUpload:\n      description: To create an upload from a version control system\n      type: object\n      properties:\n        vcsType:\n          description: VCS type\n          type: string\n          enum:\n            - svn\n            - git\n        vcsUrl:\n          description: URL of the repository\n          type: string\n        vcsBranch:\n          description: Branch to checkout for analysis (for Git only)\n          type: string\n        vcsName:\n          description: Display name of the upload\n          type: string\n        vcsUsername:\n          description: Username for the VCS\n          type: string\n        vcsPassword:\n          description: Password for the VCS\n          type: string\n      required:\n        - vcsType\n        - vcsUrl\n    UploadLicenses:\n      type: array\n      items:\n        type: object\n        properties:\n          filePath:\n            description: Relative file path\n            type: string\n            example: \"path/to/LICENSE\"\n          findings:\n            $ref: '#/components/schemas/Findings'\n    UrlUpload:\n      description: To create an upload from a URL\n      type: object\n      properties:\n        url:\n          description: URL for file/folder to be uploaded\n          type: string\n        name:\n          description: Viewable name for this file or directory\n          type: string\n        accept:\n          description: \u003e\n            Comma-separated lists of file name suffixes or patterns to accpet\n          type: string\n        reject:\n          description: \u003e\n            Comma-separated lists of file name suffixes or patterns to reject\n          type: string\n        maxRecursionDepth:\n          description: Maximum recursion depth for folders (0 for infinite)\n          type: integer\n      required:\n        - url\n    ServerUpload:\n      description: To create an upload from a server\n      type: object\n      properties:\n        path:\n          description: File path to be uploaded (reccursive, support *)\n          type: string\n        name:\n          description: Viewable name for this file or directory\n          type: string\n      required:\n        - path\n    Hash:\n      description: Hash information of a file\n      type: object\n      properties:\n        sha1:\n          description: SHA1 checksum of the file\n          type: string\n          example:\n            \"81fe8bfe87576c3ecb22426f8e57847382917acf\"\n        md5:\n          description: MD5 checksum of the file\n          type: string\n          example:\n            \"e2fc714c4727ee9395f324cd2e7f331f\"\n        sha256:\n          description: SHA256 checksum of the file\n          type: string\n          example:\n            \"88d4266fd4e6338d13b845fcf289579d209c897823b9217da3e161936f031589\"\n        size:\n          description: Size of the file in bytes\n          type: integer\n    File:\n      description: Meta information about file in FOSSology\n      type: object\n      properties:\n        hash:\n          $ref: '#/components/schemas/Hash'\n        findings:\n          $ref: '#/components/schemas/Findings'\n        uploads:\n          description: Upload ID if the file was uploaded as a package\n          type: array\n          items:\n            type: integer\n            description: Upload IDs where the given file was found\n          nullable: true\n        message:\n          description: Message in case provided hash not found or error\n          type: string\n          enum:\n            - \"Not found\"\n            - \"Invalid keys\"\n          example:\n            \"Not found\"\n          nullable: true\n      required:\n        - hash\n    Findings:\n      description: License findings and conclusions of file\n      type: object\n      properties:\n        scanner:\n          description: Licenses finding by scanner\n          type: array\n          items:\n            type: string\n            description: Name of license found\n            nullable: true\n          example:\n            - \"MIT\"\n            - \"BSD-3-Clause\"\n        conclusion:\n          description: \u003e\n            Licenses concluded by user or main license in case of package\n          type: array\n          items:\n            type: string\n            description: Name of license concluded\n            nullable: true\n          example:\n            - \"MIT\"\n            - \"GPL-2.0\"\n        copyright:\n          description: \u003e\n            Copyright findings for the file\n          type: array\n          items:\n            type: string\n            description: Copyright finding\n            nullable: true\n          example:\n            - \"Copyright (C) 2017-2020 Free Software Foundation, Inc.\"\n            - \"Copyright (C) 1991-2020 Free Software Foundation, Inc.\"\n    License:\n      description: License from the database\n      type: object\n      properties:\n        shortName:\n          description: Short name\n          type: string\n          example:\n            \"MIT\"\n        fullName:\n          description: Full name\n          type: string\n          example:\n            \"MIT License\"\n        text:\n          description: License text\n          type: string\n          example:\n            \"MIT License Copyright (c) \u003cyear\u003e \u003ccopyright holders\u003e ...\"\n        url:\n          description: URL of the license text\n          type: string\n          example:\n            \"https://opensource.org/licenses/MIT\"\n        risk:\n          description: Risk level\n          type: integer\n          nullable: true\n          example:\n            3\n        isCandidate:\n          description: Is the license a candidate?\n          type: boolean\n    Group:\n      description: Group object\n      type: object\n      properties:\n        id:\n          description: Id key\n          type: integer\n          example:\n            126\n        name:\n          description: Name of a group\n          type: string\n          example:\n            \"Main group\"\n    Obligation:\n      description: Obligation information\n      type: object\n      properties:\n        id:\n          description: Id key\n          type: integer\n          example:\n            126\n        topic:\n          description: Obligation topic\n          type: string\n          example:\n            \"Should preserve notice\"\n        type:\n          description: Type of obligation\n          type: string\n          example:\n            \"Obligation\"\n        text:\n          description: Obligation text\n          type: string\n          example:\n            \"All notices from the package should be preserved.\"\n        classification:\n          description: \u003e\n            Level of attention this obligation\n            should raise in the clearing process\n          type: string\n          enum:\n            - green\n            - white\n            - yellow\n            - red\n        comment:\n          description: Comments for the obligation\n          type: string\n          nullable: true\n          example:\n            \"Please respect the obligation\"\n    ApiInfo:\n      description: Info about the API\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the API service\n        description:\n          type: string\n          description: Additional information\n        version:\n          type: string\n          description: Current API version as per documentation\n        security:\n          type: array\n          description: Security methods allowed\n          items:\n            type: string\n        contact:\n          type: string\n          description: Contact email from API docs\n        license:\n          type: object\n          properties:\n            name:\n              type: string\n              description: Name of license\n            url:\n              type: string\n              description: Link to license\n          description: Licensing of API\n        fossology:\n          type: object\n          description: Information about FOSSology server. Values can be null.\n          properties:\n            version:\n              type: string\n              description: Version of the FOSSology server\n              nullable: true\n              example: \"4.0.0\"\n            branchName:\n              type: string\n              description: Branch deployed on the FOSSology server\n              nullable: true\n              example: master\n            commitHash:\n              type: string\n              description: Hash of commit deployed on the FOSSology server\n              nullable: true\n              example: \"306260\"\n            commitDate:\n              type: string\n              description: |\n                Date of commit deployed on the FOSSology server in\n                ISO8601 format\n              nullable: true\n              example: \"2022-01-05T22:03:00+05:30\"\n            buildDate:\n              type: string\n              description: Date on which packages were built in ISO8601 format\n              nullable: true\n              example: \"2022-01-07T11:13:00+05:30\"\n    HealthInfo:\n      description: Health status of server\n      type: object\n      properties:\n        status:\n          type: string\n          enum:\n            - OK\n            - WARN\n            - ERROR\n          description: Status of service\n        scheduler:\n          type: object\n          description: Scheduler information\n          properties:\n            status:\n              type: string\n              description: Health status of scheduler\n              enum:\n                - OK\n                - ERROR\n        db:\n          type: object\n          description: DB connection status\n          properties:\n            status:\n              type: string\n              description: Health status of DB connection\n              enum:\n                - OK\n                - ERROR\n  responses:\n    defaultResponse:\n      description: Some error occured. Check the \"message\"\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Info'\n",
			"canonicalURL": "/github.com/fossology/fossology@20ca3a482ce18e85859e92842e94fe06bb226237/-/blob/src/www/ui/api/documentation/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/fossology/fossology/blob/20ca3a482ce18e85859e92842e94fe06bb226237/src/www/ui/api/documentation/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/jobs\": get: security: security \"oauth\" (index 1): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security",
		"unsupported content types"
	]
}