{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/yashodgayashan/environment_platform"
		},
		"file": {
			"name": "openapi_v3.yaml",
			"size": 0,
			"path": "core/src/env_platform/resources/openapi_v3.yaml",
			"byteSize": 30594,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Environment Platform\n  description: This is the RESTfull API specification for the environment platform which is developed for the environment ministry.\n\npaths:\n  /applications:\n    get:\n      operationId: getApplications\n      description: Return all the applications related to a user, admin or the appointed ministry.\n      parameters:\n        - in: query\n          name: user-id\n          description: Used to query applications related to a specific user.\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: ministry-id\n          description: Used to query applications appointed to a specific ministry.\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: draft\n          description: This parameter is used to get the draft applications.\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: Successful response(Success).\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TreeRemovalApplicationCollection\"\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"404\":\n          description: Application not found(Not Found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n    post:\n      operationId: postApplication\n      description: A user can submit an application or save a draft.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TreeRemovalForm\"\n      responses:\n        \"201\":\n          description: Created application(Created).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n                  applicationId:\n                    type: string\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"404\":\n          description: Application not found(Not Found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"406\":\n          description: Failure in form data verification(Not Accepteble).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error_type:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n  /applications/{applicationId}:\n    get:\n      operationId: getApplicationById\n      description: Returns the information of the latest version of a specific application or a draft.\n      parameters:\n        - name: applicationId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response(Success).\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TreeRemovalApplication\"\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"404\":\n          description: Application not found(Not Found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n    put:\n      operationId: putApplicationById\n      description: Update the information in the draft or in the application.\n      parameters:\n        - name: applicationId\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TreeRemovalForm\"\n      responses:\n        \"200\":\n          description: Successful response(Success).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"404\":\n          description: Requested draft not found(Not Found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n    delete:\n      operationId: deleteApplicationById\n      description: Delete an application draft.\n      parameters:\n        - name: applicationId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response(Success).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"404\":\n          description: Application draft not found(Not Found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n  /applications/{applicationId}/assign-ministry:\n    post:\n      operationId: assignMinistry\n      description: Assign a ministry for an application.\n      parameters:\n        - name: applicationId\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AssignedMinistry\"\n      responses:\n        \"200\":\n          description: Successful response(Success).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"404\":\n          description: Application not found(Not Found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n  /applications/{applicationId}/update-status:\n    post:\n      operationId: updateStatus\n      description: Update the status of an application.\n      parameters:\n        - name: applicationId\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Status\"\n      responses:\n        \"200\":\n          description: Successful response(Success).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"404\":\n          description: Application not found(Not Found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n  /applications/{applicationId}/versions:\n    get:\n      operationId: getApplicationVersionsByApplicationId\n      description: This will return all the version information of a particular application.\n      parameters:\n        - name: applicationId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response(Success).\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    versionId:\n                      type: integer\n                    createdAt:\n                      $ref: \"#/components/schemas/Date\"\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"404\":\n          description: Application not found(Not Found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n  /application/{applicationId}/versions/{versionId}:\n    get:\n      operationId: getApplicationVersionByVersionId\n      description: This will return a specific version of the application.\n      parameters:\n        - name: applicationId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: versionId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response(Success).\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TreeRemovalForm\"\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"404\":\n          description: Application not found(Not Found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n  /application/{applicationId}/status:\n    get:\n      operationId: getApplicationStatusById\n      description: Get the details of a status update to an application\n      parameters:\n        - name: applicationId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response(Success).\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Status\"\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"404\":\n          description: Application not found(Not Found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n  /application/{applicationId}/status/{statusId}/versions:\n    get:\n      operationId: getApplicationStatusVersions\n      description: Get the history of a status for a given application\n      parameters:\n        - name: applicationId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: statusId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response(Success).\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Status\"\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"404\":\n          description: Application not found(Not Found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n  /maps/reservation:\n    get:\n      operationId: getReservations\n      description: Get all the reservations' co-ordinates.\n      responses:\n        \"200\":\n          description: Successful response(Success).\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Reservation\"\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"404\":\n          description: Application not found(Not Found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n  /maps/validate-map:\n    post:\n      operationId: validateCoordinates\n      description: Validates the map and its co-ordinates.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Area\"\n      responses:\n        \"200\":\n          description: Validated the map object.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"406\":\n          description: Failure in validating the map (Not Acceptable).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n  /applications/{applicationId}/comments:\n    get:\n      operationId: getApplicationComments\n      description: Get all the comments which has taken place in applications.\n      parameters:\n        - name: applicationId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response(Success).\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Message\"\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n    post:\n      operationId: postApplicationComment\n      description: Post a new comment.\n      parameters:\n        - name: applicationId\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Message\"\n      responses:\n        \"201\":\n          description: Created message(Created).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"404\":\n          description: Conversation not found(Not Found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n  /applications/{applicationId}/comments/{commentId}:\n    get:\n      operationId: getApplicationComment\n      description: Get information about a comment.\n      parameters:\n        - name: applicationId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: commentId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response(Success).\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Message\"\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"404\":\n          description: Conversation not found(Not Found).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n  /comments:\n    get:\n      operationId: getComments\n      description: Get all the comments specific to a user.\n      responses:\n        \"200\":\n          description: Successful response(Success).\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Message\"\n        \"401\":\n          description: Authorization failure(Unauthorized).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n        \"500\":\n          description: Server error(Internal Server Error).\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  reason:\n                    type: string\n\ncomponents:\n  schemas:\n    TreeRemovalApplicationCollection:\n      type: array\n      items:\n        type: object\n        properties:\n          applicationId:\n            type: string\n          title:\n            type: string\n            description: The title of the application.\n          reason:\n            type: string\n            description: Reason to remove the tree.\n          applicationCreatedDate:\n            $ref: \"#/components/schemas/Date\"\n          status:\n            type: array\n            items:\n              $ref: \"#/components/schemas/Status\"\n          isFlagged:\n            type: boolean\n            description: The application is flagged by the user(The user might be an admin, the ministry or the user).\n          message:\n            $ref: \"#/components/schemas/Message\"\n    TreeRemovalApplication:\n      type: object\n      properties:\n        numberOfVersions:\n          type: integer\n          description: This indicates number of versions having for particular application.\n        versionNumber:\n          type: integer\n        applicationId:\n          type: string\n        title:\n          type: string\n          description: The title of the title.\n        applicationCreatedDate:\n          $ref: \"#/components/schemas/Date\"\n        removalDate:\n          $ref: \"#/components/schemas/Date\"\n        reason:\n          type: string\n        applicationType:\n          type: string\n        requestedBy:\n          type: string\n          description: Name of Requester.\n        permitRequired:\n          type: boolean\n        landOwner:\n          type: string\n          description: Name of the landowner.\n        treeRemovalAutrhority:\n          type: string\n        city:\n          type: string\n        district:\n          type: string\n        nameOfTheLand:\n          type: string\n        planNumber:\n          type: string\n        area:\n          $ref: \"#/components/schemas/Area\"\n        treeInformation:\n          type: array\n          description: Information of the trees to be cut off.\n          items:\n            $ref: \"#/components/schemas/TreeInformation\"\n        status:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Status\"\n        addedFields:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Field\"\n        comments:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Message\"\n    AssignedMinistry:\n      type: object\n      properties:\n        ministry:\n          $ref: \"#/components/schemas/Ministry\"\n        assignedBy:\n          $ref: \"#/components/schemas/Person\"\n        assignedTime:\n          $ref: \"#/components/schemas/Date\"\n        prerequisite:\n          $ref: \"#/components/schemas/Ministry\"\n    TreeRemovalForm:\n      type: object\n      properties:\n        status:\n          type: string\n          enum: [\"save\", \"submit\"]\n        title:\n          type: string\n          description: The title of the application.\n        applicationCreatedDate:\n          $ref: \"#/components/schemas/Date\"\n        removalDate:\n          $ref: \"#/components/schemas/Date\"\n        reason:\n          type: string\n        applicationType:\n          type: string\n        requestedBy:\n          type: string\n          description: The person who is requesting.\n        permitRequired:\n          type: boolean\n        landOwner:\n          type: string\n          description: Name of the landowner.\n        treeRemovalAuthority:\n          type: string\n        city:\n          type: string\n        district:\n          type: string\n        nameOfTheLand:\n          type: string\n        planNumber:\n          type: string\n        area:\n          $ref: \"#/components/schemas/Area\"\n        treeInformation:\n          type: array\n          description: This includes all the inforemation about the trees which are to be cut.\n          items:\n            $ref: \"#/components/schemas/TreeInformation\"\n    Reservation:\n      type: object\n      properties:\n        name:\n          type: string\n        area:\n          $ref: \"#/components/schemas/Area\"\n    Area:\n      type: array\n      description: This includes all the points of the land in the form of a polygon.\n      items:\n        $ref: \"#/components/schemas/Location\"\n    Location:\n      type: object\n      properties:\n        latitude:\n          type: number\n        longitude:\n          type: number\n    TreeInformation:\n      type: object\n      properties:\n        species:\n          type: string\n        treeNumber:\n          type: string\n        heightType:\n          type: string\n          enum: [\"Merchantable\", \"Top\"]\n        height:\n          type: number\n          description: Height (in m)\n        girth:\n          type: number\n          description: The girth at the breast height and this should be in centimeters.\n        logDetails:\n          type: array\n          items:\n            type: object\n            properties:\n              minGirth:\n                type: number\n                description: Minimum girth of the log.\n              maxGirth:\n                type: number\n                description: Maximum girth of the log.\n              height:\n                type: number\n                description: Length of the log.\n    Message:\n      type: object\n      properties:\n        sender:\n          anyOf:\n            - $ref: \"#/components/schemas/Person\"\n            - $ref: \"#/components/schemas/Ministry\"\n        timestamp:\n          $ref: \"#/components/schemas/Date\"\n        message:\n          type: string\n    Person:\n      type: object\n      properties:\n        name:\n          type: string\n        id:\n          type: string\n    Ministry:\n      type: object\n      properties:\n        name:\n          type: string\n        id:\n          type: string\n    Date:\n      type: object\n      properties:\n        year:\n          type: integer\n        month:\n          type: integer\n        day:\n          type: integer\n        hour:\n          type: integer\n        minute:\n          type: integer\n    Status:\n      type: object\n      properties:\n        ministry:\n          $ref: \"#/components/schemas/Ministry\"\n        progress:\n          type: string\n        changedBy:\n          $ref: \"#/components/schemas/Person\"\n        reason:\n          type: string\n          description: The reason field is only added if the application is cancelled.\n        timestamp:\n          $ref: \"#/components/schemas/Date\"\n    Field:\n      type: object\n      properties:\n        fieldName:\n          type: string\n        data:\n          type: string\n          description: This is the data regarding the document and this may be a document.\n        addedBy:\n          $ref: \"#/components/schemas/Ministry\"\n        addedOn:\n          $ref: \"#/components/schemas/Date\"\n        edited:\n          type: boolean\n",
			"canonicalURL": "/github.com/yashodgayashan/environment_platform@b4c06ae18e77deaba357b08958ac34181f1d5532/-/blob/core/src/env_platform/resources/openapi_v3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/yashodgayashan/environment_platform/blob/b4c06ae18e77deaba357b08958ac34181f1d5532/core/src/env_platform/resources/openapi_v3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/applications\": get: responses: 200: contents: application/json: generate schema: item: field message: field sender: anyOf: complex anyOf not implemented",
	"NotImplemented": [
		"complex anyOf"
	]
}